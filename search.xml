<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Functional Parallelism]]></title>
    <url>%2FFunctional-Parallelism%2F2019%2F06%2F12%2F</url>
    <content type="text"><![CDATA[Functional ParallelismFuture tasks are tasks with return valuesFuture object is a “handle” for accessing a task’s return value There are two key operations that can be performed on a future object, A Assignment — A can be assigned a reference to a future object returned by a task of the form, future { ⟨ task-with-return-value ⟩ } (using pseudocode notation). The content of the future object is constrained to be single assignment (similar to a final variable in Java), and cannot be modified after the future task has returned. Blocking read — the operation, A.get(), waits until the task associated with future object A has completed, and then propagates the task’s return value as the value returned by A.get(). Any statement, S, executed after A.get() can be assured that the task associated with future object A must have completed before S starts execution. Creating Future Tasks in Java’s Fork/Join Framework A future task extends the RecursiveTask class in the FJ framework, instead of RecursiveAction as in regular tasks. (RecursiveTask can have return value) The 𝚌𝚘𝚖𝚙𝚞𝚝𝚎() method of a future task must have a non-void return type, whereas it has a void return type for regular tasks. A method call like 𝚕𝚎𝚏𝚝.𝚓𝚘𝚒𝚗() waits for the task referred to by object 𝚕𝚎𝚏𝚝 in both cases, but also provides the task’s return value in the case of future tasks. Memoization Create a data structure that stores the set {($x_1$,$y_1 = f(x_1)$),($x_2$,$y_2 = f(x_2)$),…} for each call $f(x_i)$ that returns $y_i$. Perform look ups in that data structure when processing calls of the form $f(x\prime)$ when $x\prime$ equals one of the $x_i$ inputs for which $f(x_i)$ has already been computed. Memoization can be especially helpful for algorithms based on dynamic programming. In the lecture, we used Pascal’s triangle as an illustrative example to motivate memoization. The memoization pattern lends itself easily to parallelization using futures by modifying the memoized data structure to store {($x_1$,$y_1 = f(x_1)$),($x_2$,$y_2 = f(x_2)$),…}. The lookup operation can then be replaced by a get() operation on the future value, if a future has already been created for the result of a given input. Java Streamsthe following pipeline can be used to compute the average age of all active students using Java streams: 1234students.stream() .filter(s -&gt; s.getStatus() == Student.ACTIVE) .mapToInt(a -&gt; a.getAge()) .average(); An important benefit of using Java streams when possible is that the pipeline can be made to execute in parallel by designating the source to be a parallel stream, i.e., by simply replacing students.stream() in the above code by students.parallelStream() or Stream.of(students).parallel(). This form of functional parallelism is a major convenience for the programmer, since they do not need to worry about explicitly allocating intermediate collections (e.g., a collection of all active students), or about ensuring that parallel accesses to data collections are properly synchronized. Determinism and Data RacesDeterminismA parallel program is said to be: functionally deterministic if it always computes the same answer when given the same input. structurally deterministic if it always computes the same computation graph, when given the same input. Data Races There may be cases of “benign” nondeterminism for programs with data races in which different executions with the same input may generate different outputs, but all the outputs may be acceptable in the context of the application, e.g., different locations for a search pattern in a target string. 转载于 一字马胡 Fork/Join 框架与 Java Stream APIFork/Join框架可以将大的任务切分为足够小的任务，然后将小任务分配给不同的线程来执行，而线程之间通过工作窃取算法来协调资源，提前做完任务的线程可以去“窃取”其他还没有做完任务的线程的任务，而每一个线程都会持有一个双端队列，里面存储着分配给自己的任务，Fork/Join框架在实现上，为了防止线程之间的竞争，线程在消费分配给自己的任务时，是从队列头取任务的，而“窃取”线程则从队列尾部取任务。Fork/Join框架通过fork方法来分割大任务，通过使用join来获取小任务的结果，然后组合成大任务的结果。 Stream的并发实现细节Java Stream的操作分为两类，也可以分为三类，具体的细节可以参考该文章：Java Streams API。一个简单的判断一个操作是否是Terminal操作还是Intermediate操作的方法是，如果操作返回的是一个新的Stream，那么就是一个Intermediate操作，否则就是一个Terminal操作。 Intermediate：一个流可以后面跟随零个或多个 intermediate 操作。其目的主要是打开流，做出某种程度的数据操作，然后返回一个新的流，交给下一个操作使用。这类操作都是惰性化的（lazy），就是说，仅仅调用到这类方法，并没有真正开始流的遍历。 Terminal：一个流只能有一个 terminal 操作，当这个操作执行后，流就被使用“光”了，无法再被操作。所以这必定是流的最后一个操作。Terminal 操作的执行，才会真正开始流的遍历，并且会生成一个结果，或者一个 side effect。 Java Stream对四种类型的Terminal操作使用了Fork/Join实现了并发操作，下面的图片展示了这四种操作类型： Find ForEach Match Reduce Example1234Stream.of(1,2,3,4) .parallel() .map(n -&gt; n*2) .collect(Collectors.toCollection(ArrayList::new)); 解释一下，上面的代码想要实现的功能是将（1，2，3，4）这四个数字每一个都变为其自身的两倍，然后收集这些元素到一个ArrayList中返回。这是一个非常简单的功能，下面是上面的操作流的执行路径： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748//step 1:public static&lt;T&gt; Stream&lt;T&gt; of(T... values) &#123; return Arrays.stream(values);&#125;//step 2:public final &lt;R&gt; Stream&lt;R&gt; map(Function&lt;? super P_OUT, ? extends R&gt; mapper) &#123; Objects.requireNonNull(mapper); return new StatelessOp&lt;P_OUT, R&gt;(this, StreamShape.REFERENCE, StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) &#123; @Override Sink&lt;P_OUT&gt; opWrapSink(int flags, Sink&lt;R&gt; sink) &#123; return new Sink.ChainedReference&lt;P_OUT, R&gt;(sink) &#123; @Override public void accept(P_OUT u) &#123; downstream.accept(mapper.apply(u)); &#125; &#125;; &#125; &#125;;&#125;//step 3: public final &lt;R, A&gt; R collect(Collector&lt;? super P_OUT, A, R&gt; collector) &#123; ... container = evaluate(ReduceOps.makeRef(collector)); ...&#125;//step 4: final &lt;R&gt; R evaluate(TerminalOp&lt;E_OUT, R&gt; terminalOp) &#123; assert getOutputShape() == terminalOp.inputShape(); if (linkedOrConsumed) throw new IllegalStateException(MSG_STREAM_LINKED); linkedOrConsumed = true; return isParallel() ? terminalOp.evaluateParallel(this, sourceSpliterator(terminalOp.getOpFlags())) : terminalOp.evaluateSequential(this, sourceSpliterator(terminalOp.getOpFlags()));&#125;//step 5://使用Fork/Join框架执行操作。 上面的五个步骤是经过一些省略的，需要注意的一点是，intermediate类型的操作仅仅将操作加到一个upstream里面，具体的原文描述如下： Construct a new Stream by appending a stateless intermediate operation to an existing stream. 比如上面我们的操作中的map操作，实际上只是将操作加到一个intermediate链条上面，不会立刻执行。重点是第五步，Stream是如何使用Fork/Join来实现并发的。evaluate这个方法至关重要，在方法里面会分开处理，对于设置了并发标志的操作流，会使用Fork/Join来并发执行操作任务，而对于没有打开并发标志的操作流，则串行执行操作。]]></content>
      <categories>
        <category>Parallel Computation</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Tutorial of Java's concurrent packages]]></title>
    <url>%2FTutorial-of-Java-s-concurrent-packages%2F2019%2F06%2F09%2F</url>
    <content type="text"><![CDATA[Processes and Threads Processes A process has a self-contained execution environment. A process generally has a complete, private set of basic run-time resources; in particular, each process has its own memory space. Threads Threads are sometimes called lightweight processes. Both processes and threads provide an execution environment, but creating a new thread requires fewer resources than creating a new process. Threads exist within a process — every process has at least one. Threads share the process's resources, including memory and open files. This makes for efficient, but potentially problematic, communication. Thread Objects Each thread is associated with an instance of the class Thread. There are two basic strategies for using Thread objects to create a concurrent application. To directly control thread creation and management, simply instantiate Thread each time the application needs to initiate an asynchronous task. To abstract thread management from the rest of your application, pass the application's tasks to an executor. Defining and Starting a Thread Provide a Runnable object. The Runnable interface defines a single method, run, meant to contain the code executed in the thread. The Runnable object is passed to the Thread constructor, as in the HelloRunnable example: 123456789101112public class HelloRunnable implements Runnable &#123; public void run() &#123; System.out.println("Hello from a thread!"); &#125; public static void main(String args[]) &#123; (new Thread(new HelloRunnable())).start(); &#125;&#125; Subclass Thread. The Thread class itself implements Runnable, though its run method does nothing. An application can subclass Thread, providing its own implementation of run, as in the HelloThread example: 1234567891011public class HelloThread extends Thread &#123; public void run() &#123; System.out.println("Hello from a thread!"); &#125; public static void main(String args[]) &#123; (new HelloThread()).start(); &#125;&#125; Pausing Execution with Sleep Thread.sleep causes the current thread to suspend execution for a specified period. Interrupts An interrupt is an indication to a thread that it should stop what it is doing and do something else. If the thread is frequently invoking methods that throw InterruptedException, it simply returns from the run method after it catches that exception if a thread goes a long time without invoking a method that throws InterruptedException? Then it must periodically invoke Thread.interrupted, which returns true if an interrupt has been received. 1234567891011121314151617181920for (int i = 0; i &lt; importantInfo.length; i++) &#123; // Pause for 4 seconds try &#123; Thread.sleep(4000); &#125; catch (InterruptedException e) &#123; // We've been interrupted: no more messages. return; &#125; // Print a message System.out.println(importantInfo[i]);&#125;for (int i = 0; i &lt; inputs.length; i++) &#123; heavyCrunch(inputs[i]); if (Thread.interrupted()) &#123; // We've been interrupted: no more crunching. return; &#125;&#125; Joins The join method allows one thread to wait for the completion of another. If t is a Thread object whose thread is currently executing,causes the current thread to pause execution until t's thread terminates. 1t.join(); Synchronization Threads communicate primarily by sharing access to fields and the objects reference fields refer to.Synchronization can introduce thread contention, which occurs when two or more threads try to access the same resource simultaneously and cause the Java runtime to execute one or more threads more slowly, or even suspend their execution. Starvation and livelock are forms of thread contention. Thread Interference Interference happens when two operations, running in different threads, but acting on the same data, interleave. This means that the two operations consist of multiple steps, and the sequences of steps overlap. Memory Consistency Errors Memory consistency errors occur when different threads have inconsistent views of what should be the same data. The key to avoiding memory consistency errors is understanding the happens-before relationship. 123456// Thread 1int counter = 0;counter++;// Thread 2System.out.println(counter); Synchronized Methods To make a method synchronized, simply add the synchronized keyword to its declaration: 123456789101112131415public class SynchronizedCounter &#123; private int c = 0; public synchronized void increment() &#123; c++; &#125; public synchronized void decrement() &#123; c--; &#125; public synchronized int value() &#123; return c; &#125;&#125; It is not possible for two invocations of synchronized methods on the same object to interleave. When one thread is executing a synchronized method for an object, all other threads that invoke synchronized methods for the same object block (suspend execution) until the first thread is done with the object. When a synchronized method exits, it automatically establishes a happens-before relationship with any subsequent invocation of a synchronized method for the same object. This guarantees that changes to the state of the object are visible to all threads. Synchronized Statements Unlike synchronized methods, synchronized statements must specify the object that provides the intrinsic lock 1234567public void addName(String name) &#123; synchronized(this) &#123; lastName = name; nameCount++; &#125; nameList.add(name);&#125; Liveness Deadlock Deadlock describes a situation where two or more threads are blocked forever, waiting for each other. Alphonse and Gaston are friends, and great believers in courtesy. A strict rule of courtesy is that when you bow to a friend, you must remain bowed until your friend has a chance to return the bow. Unfortunately, this rule does not account for the possibility that two friends might bow to each other at the same time. This example application, Deadlock, models this possibility: 1234567891011121314151617181920212223242526272829303132333435public class Deadlock &#123; static class Friend &#123; private final String name; public Friend(String name) &#123; this.name = name; &#125; public String getName() &#123; return this.name; &#125; public synchronized void bow(Friend bower) &#123; System.out.format("%s: %s" + " has bowed to me!%n", this.name, bower.getName()); bower.bowBack(this); &#125; public synchronized void bowBack(Friend bower) &#123; System.out.format("%s: %s" + " has bowed back to me!%n", this.name, bower.getName()); &#125; &#125; public static void main(String[] args) &#123; final Friend alphonse = new Friend("Alphonse"); final Friend gaston = new Friend("Gaston"); new Thread(new Runnable() &#123; public void run() &#123; alphonse.bow(gaston); &#125; &#125;).start(); new Thread(new Runnable() &#123; public void run() &#123; gaston.bow(alphonse); &#125; &#125;).start(); &#125;&#125; Starvation Starvation describes a situation where a thread is unable to gain regular access to shared resources and is unable to make progress. This happens when shared resources are made unavailable for long periods by "greedy" threads. For example, suppose an object provides a synchronized method that often takes a long time to return. If one thread invokes this method frequently, other threads that also need frequent synchronized access to the same object will often be blocked. Livelock A thread often acts in response to the action of another thread. If the other thread's action is also a response to the action of another thread, then livelock may result. As with deadlock, livelocked threads are unable to make further progress. However, the threads are not blocked — they are simply too busy responding to each other to resume work. This is comparable to two people attempting to pass each other in a corridor: Alphonse moves to his left to let Gaston pass, while Gaston moves to his right to let Alphonse pass. Seeing that they are still blocking each other, Alphone moves to his right, while Gaston moves to his left. They're still blocking each other, so... High Level Concurrency Objects Only one thread can own a Lock object at a time. Lock objects also support a wait/notify mechanism, through their associated Condition objects. Fork/Join The fork/join framework is an implementation of the ExecutorService interface that helps you take advantage of multiple processors. It is designed for work that can be broken into smaller pieces recursively. The goal is to use all the available processing power to enhance the performance of your application. As with any ExecutorService implementation, the fork/join framework distributes tasks to worker threads in a thread pool. The fork/join framework is distinct because it uses a work-stealing algorithm. Worker threads that run out of things to do can steal tasks from other threads that are still busy. The center of the fork/join framework is the ForkJoinPool class, an extension of the AbstractExecutorService class. ForkJoinPool implements the core work-stealing algorithm and can execute ForkJoinTask processes. 12345if (my portion of the work is small enough) do the work directlyelse split my work into two pieces invoke the two pieces and wait for the results 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556public class ForkBlur extends RecursiveAction &#123; private int[] mSource; private int mStart; private int mLength; private int[] mDestination; // Processing window size; should be odd. private int mBlurWidth = 15; public ForkBlur(int[] src, int start, int length, int[] dst) &#123; mSource = src; mStart = start; mLength = length; mDestination = dst; &#125; protected void computeDirectly() &#123; int sidePixels = (mBlurWidth - 1) / 2; for (int index = mStart; index &lt; mStart + mLength; index++) &#123; // Calculate average. float rt = 0, gt = 0, bt = 0; for (int mi = -sidePixels; mi &lt;= sidePixels; mi++) &#123; int mindex = Math.min(Math.max(mi + index, 0), mSource.length - 1); int pixel = mSource[mindex]; rt += (float)((pixel &amp; 0x00ff0000) &gt;&gt; 16) / mBlurWidth; gt += (float)((pixel &amp; 0x0000ff00) &gt;&gt; 8) / mBlurWidth; bt += (float)((pixel &amp; 0x000000ff) &gt;&gt; 0) / mBlurWidth; &#125; // Reassemble destination pixel. int dpixel = (0xff000000 ) | (((int)rt) &lt;&lt; 16) | (((int)gt) &lt;&lt; 8) | (((int)bt) &lt;&lt; 0); mDestination[index] = dpixel; &#125; &#125; protected static int sThreshold = 100000; protected void compute() &#123; if (mLength &lt; sThreshold) &#123; computeDirectly(); return; &#125; int split = mLength / 2; invokeAll(new ForkBlur(mSource, mStart, split, mDestination), new ForkBlur(mSource, mStart + split, mLength - split, mDestination));&#125; Create a task that represents all of the work to be done. // source image pixels are in src // destination image pixels are in dst 1ForkBlur fb = new ForkBlur(src, 0, src.length, dst); Create the ForkJoinPool that will run the task. 1ForkJoinPool pool = new ForkJoinPool(); Run the task. 1pool.invoke(fb); Referece from https://docs.oracle.com/javase/tutorial/essential/concurrency/runthread.html]]></content>
      <categories>
        <category>Parallel Computation</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Task Parallelism]]></title>
    <url>%2FTask-Parallelism%2F2019%2F06%2F08%2F</url>
    <content type="text"><![CDATA[Table of Contents Task-level Parallelism Task Creation and Termination (Async, Finish) Creating Tasks in Java's Fork/Join Framework Computation Graphs, Work, Span, Ideal Parallelism Computation Graphs (CGs) ideal parallelism Multiprocessor Scheduling, Parallel Speedup Amdahl’s Law Task-level Parallelism Task Creation and Termination (Async, Finish) async notation: “async ⟨stmt1⟩”, causes the parent task (i.e., the task executing the async statement) to create a new child task to execute the body of the async, ⟨stmt1⟩, asynchronously (i.e., before, after, or in parallel) with the remainder of the parent task. finish notation: “finish ⟨stmt2⟩” causes the parent task to execute ⟨stmt2⟩, and then wait until ⟨stmt2⟩ and all async tasks created within ⟨stmt2⟩ have completed Async and finish constructs may be arbitrarily nested. 12345finish &#123; async S1; // asynchronously compute sum of the lower half of the array S2; // compute sum of the upper half of the array in parallel with S1&#125;S3; // combine the two partial sums after both S1 and S2 have finished Creating Tasks in Java's Fork/Join Framework Fork/Join (FJ) framework In this framework, a task can be specified in the 𝚌𝚘𝚖𝚙𝚞𝚝𝚎() method of a user-defined class that extends the standard RecursiveAction class in the FJ framework. 1234567891011private static class ASum extends RecursiveAction &#123; int[] A; // input array int LO, HI; // subrange int SUM; // return value . . . @Override protected void compute() &#123; SUM = 0; for (int i = LO; i &lt;= HI; i++) SUM += A[i]; &#125; // compute()&#125; Computation Graphs, Work, Span, Ideal Parallelism Computation Graphs (CGs) Computation Graphs (CGs), which model the execution of a parallel program as a partially ordered set. Specifically, a CG consists of: A set of vertices or nodes, in which each node represents a step consisting of an arbitrary sequential computation. A set of directed edges that represent ordering constraints among steps. For fork–join programs, it is useful to partition the edges into three cases: Continue edges that capture sequencing of steps within a task. Fork edges that connect a fork operation to the first step of child tasks. Join edges that connect the last step of a task to all join operations on that task. CGs can be used to define data races, an important class of bugs in parallel programs. We say that a data race occurs on location L in a computation graph, G, if there exist steps S1 and S2 in G such that there is no path of directed edges from S1 to S2 or from S2 to S1 in G, and both S1 and S2 read or write L (with at least one of the accesses being a write, since two parallel reads do not pose a problem). ideal parallelism CGs can also be used to reason about the ideal parallelism of a parallel program as follows: Define WORK(G) to be the sum of the execution times of all nodes in CG G, Define SPAN(G) to be the length of a longest path in G, when adding up the execution times of all nodes in the path. The longest paths are known as critical paths, so SPAN also represents the critical path length (CPL) of G. Given the above definitions of WORK and SPAN, we define the ideal parallelism of Computation Graph G as the ratio, WORK(G)/SPAN(G). The ideal parallelism is an upper limit on the speedup factor that can be obtained from parallel execution of nodes in computation graph G. Note that ideal parallelism is only a function of the parallel program, and does not depend on the actual parallelism available in a physical computer. Multiprocessor Scheduling, Parallel Speedup \(T_p\): \(T_p\) as the execution time of a CG on P processors \(T_1\): \(T_1\) as the execution time of a CG on 1 processors \(T_{\infty}\) : \(T_{\infty}\) as the execution time of a CG on 1 processors \[T_{\infty} \leq T_p \leq T_1\] We also saw examples for which there could be different values of \(T_p\) for different schedules of the same CG on P processors. speedup: given schedule of a CG on P processors as, $ Speedup(P) = $. Speedup(P) must be \(\leq\) the number of processors P , and also \(\leq\) the ideal parallelism, WORK/SPAN. Amdahl’s Law q is the fraction of WORK in a parallel program that must be executed sequentially: \[Speedup(P) \leq \frac{1}{q}\]]]></content>
      <categories>
        <category>Parallel Computation</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java Review]]></title>
    <url>%2FJava-Review%2F2019%2F06%2F07%2F</url>
    <content type="text"><![CDATA[变量和数据类型 Java提供了两种变量类型：基本类型和引用类型。基本类型包括整型，浮点型，布尔型，字符型。变量可重新赋值，等号是赋值语句，不是数学意义的等号。常量在初始化后不可重新赋值，使用常量便于理解程序意图。 基本数据类型 整数类型：byte，short，int，long 浮点数类型：float，double 字符类型：char 布尔类型：boolean 数据类型 大小(二进制位数) 范围 默认值 包装类 byte(字节) 8 -128 - 127 0 Integer shot(短整型) 16 -32768 - 32768 0 Short int(整型) 32 -2147483648-2147483648 0 Long long(长整型) 64 -9233372036854477808-9233372036854477808 0 Byte float(浮点型) 32 -3.40292347E+38-3.40292347E+38 0.0f Float double(双精度) 64 -1.79769313486231570E+308-1.79769313486231570E+308 0.0d Double char(字符型) 16 \u0000 - u\ffff \u0000 Character boolean(布尔型) 1 true/false false Boolean Java有一个能够表示任意精度的算书包，通常称为大数值(big number)。虽然被称为大数值，但它并不是一种Java类型，而是一个Java对象。 如果基本的整数和浮点数精度不能够满足需求，那么可以使用java.math包中的两个很有用的类：BigInteger,BigDecimal(Android SDK中也包含了java.math包以及这两个类)这两个类可以处理包含任意长度数字序列的数值。BigInteger类实现了任意精度的整数运算，BigDecimal实现了任意精度的浮点数运算 常量 定义变量的时候，如果加上final修饰符，这个变量就变成了常量。常量在定义时进行初始化后就不可再次赋值，再次赋值会导致编译错误。 1final double PI = 3.14 var关键字 有些时候，类型的名字太长，写起来比较麻烦。这个时候，如果想省略变量类型，可以使用var关键字，编译器会根据赋值语句自动推断出变量sb的类型是StringBuilder。 12StringBuilder sb = new StringBuilder();var sb = new StringBuilder(); 引用类型 数组类型 定义一个数组类型的变量，使用数组类型类型[]，例如，int[]。和单个基本类型变量不同，数组变量初始化必须使用new int[5]表示创建一个可容纳5个int元素的数组。 数组所有元素初始化为默认值，整型都是0，浮点型是0.0，布尔型是false; 数组一旦创建后，大小就不可改变。 12int[] ns = new int[5];int[] ns = new int[] &#123; 68, 79, 91, 85, 62 &#125;; 字符串数组 如果数组元素不是基本类型，而是一个引用类型，那么，修改数组元素会有哪些不同？ 123String[] names = &#123; "ABC", "XYZ", "zoo"&#125;; 变量的作用范围 在Java中，多行语句用{ }括起来。很多控制语句，例如条件判断和循环，都以{ }作为它们自身的范围。而在语句块中定义的变量，它有一个作用域，就是从定义处开始，到语句块结束。 12345678910111213141516171819202122232425262728293031323334if (...) &#123; // if开始 ... while (...) &#123; while 开始 ... if (...) &#123; // if开始 ... &#125; // if结束 ... &#125; // while结束 ...&#125; // if结束&#123; ... int i = 0; // 变量i从这里开始定义 ... &#123; ... int x = 1; // 变量x从这里开始定义 ... &#123; ... String s = "hello"; // 变量s从这里开始定义 ... &#125; // 变量s作用域到此结束 ... // 注意，这是一个新的变量s，它和上面的变量同名， // 但是因为作用域不同，它们是两个不同的变量: String s = "hi"; ... &#125; // 变量x和s作用域到此结束 ...&#125; // 变量i作用域到此结束 修饰符 Java语言提供了很多修饰符，主要分为以下两类： 访问修饰符 非访问修饰符 访问修饰符 修饰符 当前类 同一包内 子孙类(同一包) 子孙类(不同包) 其他包 public Y Y Y Y Y protected Y Y Y Y/N（说明） N default Y Y Y N N private Y N N N N 非访问修饰符 static 修饰符，用来修饰类方法和类变量。 静态变量: static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。 静态变量也被称为类变量。局部变量不能被声明为 static 变量。对类变量和方法的访问可以直接使用 classname.variablename 和 classname.methodname 的方式访问。 静态方法: static 关键字用来声明独立于对象的静态方法。静态方法不能使用类的非静态变量。静态方法从参数列表得到数据，然后计算这些数据。 123456789101112131415161718192021222324public class InstanceCounter &#123; private static int numInstances = 0; protected static int getCount() &#123; return numInstances; &#125; private static void addInstance() &#123; numInstances++; &#125; InstanceCounter() &#123; InstanceCounter.addInstance(); &#125; public static void main(String[] arguments) &#123; System.out.println("Starting with " + InstanceCounter.getCount() + " instances"); for (int i = 0; i &lt; 500; ++i)&#123; new InstanceCounter(); &#125; System.out.println("Created " + InstanceCounter.getCount() + " instances"); &#125;&#125; final 修饰符，用来修饰类、方法和变量，final 修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。 abstract 修饰符，用来创建抽象类和抽象方法。 synchronized 和 volatile 修饰符，主要用于线程的编程。 运算 算术运算符 操作符 描述 A=10，B=20 + 加法: 相加运算符两侧的值 A + B 等于 30 - 减法: 左操作数减去右操作数 A – B 等于 -10 * 乘法: 相乘操作符两侧的值 A * B等于200 / 除法: 左操作数除以右操作数 B / A等于2 ％ 取余: 左操作数除以右操作数的余数 B%A等于0 ++ 自增: 操作数的值增加1 B++ 或 ++B 等于 21 -- 自减: 操作数的值减少1 B-- 或 --B 等于 19 关系运算符 运算符 描述 例子 == 检查如果两个操作数的值是否相等，如果相等则条件为真。 （A == B）为假。 != 检查如果两个操作数的值是否相等，如果值不相等则条件为真。 (A != B) 为真。 &gt; 检查左操作数的值是否大于右操作数的值，如果是那么条件为真。 （A&gt; B）为假。 &lt; 检查左操作数的值是否小于右操作数的值，如果是那么条件为真。 （A &lt;B）为真。 &gt;= 检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。 （A&gt; = B）为假。 &lt;= 检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。 （A &lt;= B）为真。 位运算符 运算符 描述 例子 ＆ 如果相对应位都是1，则结果为1，否则为0 （A＆B），得到12，即0000 1100 | 如果相对应位都是0，则结果为0，否则为1 （A | B）得到61，即 0011 1101 ^ 如果相对应位值相同，则结果为0，否则为1 （A ^ B）得到49，即 0011 0001 〜 按位取反运算符翻转操作数的每一位，即0变成1，1变成0。 （〜A）得到-61，即1100 0011 &lt;&lt; 按位左移运算符。左操作数按位左移右操作数指定的位数。 A &lt;&lt; 2得到240，即 1111 0000 &gt;&gt; 按位右移运算符。左操作数按位右移右操作数指定的位数。 A &gt;&gt; 2得到15即 1111 &gt;&gt;&gt; 按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。 A&gt;&gt;&gt;2得到15即0000 1111 短路逻辑运算符 当使用与逻辑运算符时，在两个操作数都为true时，结果才为true，但是当得到第一个操作为false时，其结果就必定是false，这时候就不会再判断第二个操作了。 12345678public class LuoJi&#123; public static void main(String[] args)&#123; int a = 5;//定义一个变量； boolean b = (a&lt;4)&amp;&amp;(a++&lt;10); System.out.println("使用短路逻辑运算符的结果为"+b); System.out.println("a的结果为"+a); &#125;&#125; 逻辑运算符 运算符 描述 例子 &amp;&amp; 称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真。 （A &amp;&amp; B）为假。} || 称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真。 （A || B）为真。} ！ 称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false。 ！（A &amp;&amp; B）为真。} 条件运算符（?:） 1var x = (expression) ? value if true : value if false instanceof 运算符 如果运算符左侧变量所指的对象，是操作符右侧类或接口(class/interface)的一个对象，那么结果为真。 1234( Object reference variable ) instanceof (class/interface type)String name = "James";boolean result = name instanceof String; // 由于 name 是 String 类型，所以返回真 类型自动提升与强制转型 在运算过程中，如果参与运算的两个数类型不一致，那么计算结果为较大类型的整型。例如，short和int计算，结果总是int，原因是short首先自动被转型为int 如果参与运算的两个数其中一个是整型，那么整型可以自动提升到浮点型。 12int n = 5;double d = 1.2 + 24.0 / n; // 6.0 可以将浮点数强制转型为整数。在转型时，浮点数的小数部分会被丢掉。如果转型后超过了整型能表示的最大范围，将返回整型的最大值。 1int n4 = (int) 1.2e20; // 2147483647 字符和字符串 字符类型 char是基本数据类型，它是character的缩写。一个char保存一个Unicode字符。因为Java在内存中总是使用Unicode表示字符，所以，一个英文字符和一个中文字符都用一个char类型表示，它们都占用两个字节。 12char c1 = 'A';char c2 = '中'; 要显示一个字符的Unicode编码，只需将char类型直接赋值给int类型即可： 12int n1 = 'A'; // 字母“A”的Unicodde编码是65int n2 = '中'; // 汉字“中”的Unicode编码是20013 还可以直接用转义字符Unicode编码来表示一个字符： 12char c3 = '\u0041'; // 'A'，因为十六进制0041 = 十进制65char c4 = '\u4e2d'; // '中'，因为十六进制4e2d = 十进制20013 字符串类型 字符串类型String是引用类型,使用双引号"..."表示开始和结束。可以使用+连接任意字符串和其他数据类型。 1234567String s = ""; // 空字符串，包含0个字符String s1 = "A"; // 包含一个字符String s2 = "ABC"; // 包含3个字符String s3 = "中文 ABC"; // 包含6个字符，其中有一个空格int age = 25;String s = "age is " + age; 字符串不可变。 空值null 引用类型的变量可以指向一个空值null，它表示不存在，即该变量不指向任何对象。注意要区分空值null和空字符串""，空字符串是一个有效的字符串对象，它不等于null。 1String s1 = null; // s1是null 流程控制 格式化输出 123System.out.printf("%.2f\n", d); // 显示两位小数3.14System.out.printf("%.4f\n", d); // 显示4位小数3.1416System.out.printf("n=%d, hex=%08x", n, n); // 注意，两个%占位符必须传入两个数 占位符 说明 %d 格式化输出整数 %x 格式化输出十六进制整数 %f 格式化输出浮点数 %e 格式化输出科学计数法表示的浮点数 %s 格式化字符串 输入 首先，我们通过import语句导入java.util.Scanner，import是导入某个类的语句，必须放到Java源代码的开头，后面我们在Java的package中会详细讲解如何使用import。然后，创建Scanner对象并传入System.in。System.out代表标准输出流，而System.in代表标准输入流。直接使用System.in读取用户输入虽然是可以的，但需要更复杂的代码，而通过Scanner就可以简化后续的代码。有了Scanner对象后，要读取用户输入的字符串，使用scanner.nextLine()，要读取用户输入的整数，使用scanner.nextInt()。Scanner会自动转换数据类型，因此不必手动转换。 123456789101112import java.util.Scanner;public class Main &#123; public static void main(String[] args) &#123; Scanner scanner = new Scanner(System.in); // 创建Scanner对象 System.out.print("Input your name: "); // 打印提示 String name = scanner.nextLine(); // 读取一行输入并获取字符串 System.out.print("Input your age: "); // 打印提示 int age = scanner.nextInt(); // 读取一行输入并获取整数 System.out.printf("Hi, %s, you are %d\n", name, age); // 格式化输出 &#125;&#125; if判断 12345if (条件) &#123; // （true or false) // 条件为true满足时执行&#125;else &#123; // 条件为false满足时执行&#125; 判断引用类型相等 判断值类型的变量是否相等，可以使用==运算符。但是，判断引用类型的变量是否相等，==表示引用是否相等，或者说，是否指向同一个对象。 123456String s1 = "hello";String s2 = "HELLO".toLowerCase();if (s1 == s2) &#123; System.out.println("s1 == s2");&#125; else &#123; System.out.println("s1 != s2"); // s1,s2引用不同的对象 要判断引用类型的变量内容是否相等，必须使用equals()方法。 1234567891011121314151617String s1 = "hello";String s2 = "HELLO".toLowerCase();if (s1.equals(s2)) &#123; System.out.println("s1 == s2"); // s1,s2 值相等&#125; else &#123; System.out.println("s1 != s2"); //要避免NullPointerException错误，可以利用**短路运算符&amp;&amp;**：```Javapublic class Main &#123; public static void main(String[] args) &#123; String s1 = null; if (s1 != null &amp;&amp; s1.equals("hello")) &#123; System.out.println("hello"); &#125; &#125;&#125; switch多重选择 switch语句根据switch (表达式)计算的结果，跳转到匹配的case结果，然后继续执行后续语句，直到遇到break结束执行。可以给switch语句加一个default，当没有匹配到任何case时，执行default。 1234567891011121314151617181920212223242526272829public class Main &#123; public static void main(String[] args) &#123; int option = 99; switch (option) &#123; case 1: System.out.println("Selected 1"); break; case 2: System.out.println("Selected 2"); break; case 3: System.out.println("Selected 3"); break; default: System.out.println("Not selected"); break; &#125; &#125;&#125;// if (option == 1) &#123;// System.out.println("Selected 1");// &#125; else if (option == 2) &#123;// System.out.println("Selected 2");// &#125; else if (option == 3) &#123;// System.out.println("Selected 3");// &#125; else &#123;// System.out.println("Not selected");// &#125; 循环 while 循环 与 do... while 循环 1234567while (条件表达式) &#123; 循环语句&#125;do &#123; 执行循环语句&#125; while (条件表达式); for 循环 for循环的功能非常强大，它使用计数器实现循环。for循环会先初始化计数器，然后，在每次循环前检测循环条件，在每次循环后更新计数器。计数器变量通常命名为i。for循环还可以缺少初始化语句、循环条件和每次循环更新语句。 123456789101112131415161718for (初始条件; 循环检测条件; 循环后更新计数器) &#123; // 执行语句&#125;// 不设置结束条件:for (int i=0; ; i++) &#123; ...&#125;// 不设置结束条件和更新语句:for (int i=0; ;) &#123; ...&#125;// 什么都不设置:for (;;) &#123; ...&#125; Java还提供了另一种for each循环，它可以更简单地遍历数组。for each循环能够遍历所有“可迭代”的数据类型，包括后面会介绍的List、Map等。 12345678public class Main &#123; public static void main(String[] args) &#123; int[] ns = &#123; 1, 4, 9, 16, 25 &#125;; for (int i=?; ?; ?) &#123; System.out.println(ns[i]); &#125; &#125;&#125; break and continue 在循环过程中，可以使用break语句跳出当前循环。 continue可以提前结束本次循环，直接继续执行下次循环。 对象和类 Java作为一种面向对象语言。支持以下基本概念： - 多态 - 继承 - 封装 - 抽象 - 类 - 对象 - 实例 - 方法 - 重载 类 类可以看成是创建Java对象的模板。 一个类可以包含以下类型变量： 局部变量：在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。 成员变量：成员变量是定义在类中，方法体之外的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问。 类变量：类变量也声明在类中，方法体之外，但必须声明为static类型。 一个类可以拥有多个方法，在上面的例子中：barking()、hungry()和sleeping()都是Dog类的方法。 12345678910111213public class Dog&#123; String breed; int age; String color; void barking()&#123; &#125; void hungry()&#123; &#125; void sleeping()&#123; &#125;&#125; 对象构造和初始化 声明：声明一个对象，包括对象名称和对象类型。 实例化：使用关键字new来创建一个对象。 初始化：使用new创建对象时，会调用构造方法初始化对象。 12345678910111213141516171819public class Puppy&#123; public Puppy()&#123; &#125; public Puppy(String name)&#123; // 这个构造器仅有一个参数：name &#125;&#125;public class Puppy&#123; public Puppy(String name)&#123; //这个构造器仅有一个参数：name System.out.println("小狗的名字是 : " + name ); &#125; public static void main(String[] args)&#123; // 下面的语句将创建一个Puppy对象 Puppy myPuppy = new Puppy( "tommy" ); &#125;&#125; 实例变量和调用成员方法 123456789101112131415161718192021222324252627public class Puppy&#123; int puppyAge; public Puppy(String name)&#123; // 这个构造器仅有一个参数：name System.out.println("小狗的名字是 : " + name ); &#125; public void setAge( int age )&#123; puppyAge = age; &#125; public int getAge( )&#123; System.out.println("小狗的年龄为 : " + puppyAge ); return puppyAge; &#125; public static void main(String[] args)&#123; /* 创建对象 */ Puppy myPuppy = new Puppy( "tommy" ); /* 通过方法来设定age */ myPuppy.setAge( 2 ); /* 调用另一个方法获取age */ myPuppy.getAge( ); /*你也可以像下面这样访问成员变量 */ System.out.println("变量值 : " + myPuppy.puppyAge ); &#125;&#125; 继承 12345class 父类 &#123;&#125; class 子类 extends 父类 &#123;&#125; 继承类型 继承的特性 子类拥有父类非 private 的属性、方法。 子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。 子类可以用自己的方式实现父类的方法。 继承关键字 继承可以使用 extends 和 implements 这两个关键字来实现继承，而且所有的类都是继承于 java.lang.Object，当一个类没有继承的两个关键字，则默认继承object（这个类在 java.lang 包中，所以不需要 import）祖先类。 extends关键字 在 Java 中，类的继承是单一继承，也就是说，一个子类只能拥有一个父类，所以 extends 只能继承一个类。 123456789101112public class Animal &#123; private String name; private int id; public Animal(String myName, String myid) &#123; //初始化属性值 &#125; public void eat() &#123; //吃东西方法的具体实现 &#125; public void sleep() &#123; //睡觉方法的具体实现 &#125; &#125; public class Penguin extends Animal&#123; &#125; implements关键字 使用 implements 关键字可以变相的使java具有多继承的特性，使用范围为类继承接口的情况，可以同时继承多个接口（接口跟接口之间采用逗号分隔）。 1234567891011public interface A &#123; public void eat(); public void sleep();&#125; public interface B &#123; public void show();&#125; public class C implements A,B &#123;&#125; super 与 this 关键字 super：我们可以通过super关键字来实现对父类成员的访问，用来引用当前对象的父类。 this：指向自己的引用。 1234567891011121314151617181920212223242526272829class Animal &#123; void eat() &#123; System.out.println("animal : eat"); &#125;&#125; class Dog extends Animal &#123; void eat() &#123; System.out.println("dog : eat"); &#125; void eatTest() &#123; this.eat(); // this 调用自己的方法 super.eat(); // super 调用父类方法 &#125;&#125; public class Test &#123; public static void main(String[] args) &#123; Animal a = new Animal(); a.eat(); Dog d = new Dog(); d.eatTest(); &#125;&#125;// animal : eat// dog : eat// animal : eat final关键字 final 关键字声明类可以把类定义为不能继承的，即最终类；或者用于修饰方法，该方法不能被子类重写。 12final class 类名 &#123;类体&#125;修饰符(public/private/default/protected) final 返回值类型 方法名()&#123;//方法体&#125; 子类是不继承父类的构造器（构造方法或者构造函数）的，它只是调用（隐式或显式）。如果父类的构造器带有参数，则必须在子类的构造器中显式地通过 super 关键字调用父类的构造器并配以适当的参数列表。如果父类构造器没有参数，则在子类的构造器中不需要使用 super 关键字调用父类构造器，系统会自动调用父类的无参构造器。 重写(Override)与重载(Overload) 重写(Override)规则 参数列表必须完全与被重写方法的相同； 返回类型与被重写方法的返回类型可以不相同，但是必须是父类返回值的派生类（java5 及更早版本返回类型要一样，java7 及更高版本可以不同）； 访问权限不能比父类中被重写的方法的访问权限更低。例如：如果父类的一个方法被声明为public，那么在子类中重写该方法就不能声明为protected。 父类的成员方法只能被它的子类重写。 声明为final的方法不能被重写。 声明为static的方法不能被重写，但是能够被再次声明。 子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为private和final的方法。 子类和父类不在同一个包中，那么子类只能够重写父类的声明为public和protected的非final方法。 重写的方法能够抛出任何非强制异常，无论被重写的方法是否抛出异常。但是，重写的方法不能抛出新的强制性异常，或者比被重写方法声明的更广泛的强制性异常，反之则可以。 构造方法不能被重写。 如果不能继承一个方法，则不能重写这个方法。 当需要在子类中调用父类的被重写方法时，要使用super关键字。 12345678910111213141516171819202122232425class Animal&#123; public void move()&#123; System.out.println("动物可以移动"); &#125;&#125; class Dog extends Animal&#123; public void move()&#123; System.out.println("狗可以跑和走"); &#125; public void bark()&#123; System.out.println("狗可以吠叫"); &#125;&#125; public class TestDog&#123; public static void main(String args[])&#123; Animal a = new Animal(); // Animal 对象 Animal b = new Dog(); // Dog 对象 a.move();// 执行 Animal 类的方法 b.move();//执行 Dog 类的方法 b.bark(); &#125;&#125; 重载(Overload)规则 被重载的方法必须改变参数列表(参数个数或类型不一样)； 被重载的方法可以改变返回类型； 被重载的方法可以改变访问修饰符； 被重载的方法可以声明新的或更广的检查异常； 方法能够在同一个类中或者在一个子类中被重载。 无法以返回值类型作为重载函数的区分标准。 1234567891011121314151617181920212223242526272829public class Overloading &#123; public int test()&#123; System.out.println("test1"); return 1; &#125; public void test(int a)&#123; System.out.println("test2"); &#125; //以下两个参数类型顺序不同 public String test(int a,String s)&#123; System.out.println("test3"); return "returntest3"; &#125; public String test(String s,int a)&#123; System.out.println("test4"); return "returntest4"; &#125; public static void main(String[] args)&#123; Overloading o = new Overloading(); System.out.println(o.test()); o.test(1); System.out.println(o.test(1,"test3")); System.out.println(o.test("test4",1)); &#125;&#125; 重写与重载之间的区别 区别点 重载方法 重写方法 参数列表 必须修改 一定不能修改 返回类型 可以修改 一定不能修改 异常 可以修改 可以减少或删除，一定不能抛出新的或者更广的异常 访问 可以修改 一定不能做更严格的限制（可以降低限制） 多态 现实中，比如我们按下 F1 键这个动作： 如果当前在 Flash 界面下弹出的就是 AS 3 的帮助文档； 如果当前在 Word 下弹出的就是 Word 帮助； 在 Windows 下弹出的就是 Windows 帮助和支持。 同一个事件发生在不同的对象上会产生不同的结果。 多态存在的三个必要条件 继承 重写 父类引用指向子类对象 123456789101112131415161718192021222324252627282930313233343536373839404142434445public class Test &#123; public static void main(String[] args) &#123; show(new Cat()); // 以 Cat 对象调用 show 方法 show(new Dog()); // 以 Dog 对象调用 show 方法 Animal a = new Cat(); // 向上转型 a.eat(); // 调用的是 Cat 的 eat Cat c = (Cat)a; // 向下转型 c.work(); // 调用的是 Cat 的 work &#125; public static void show(Animal a) &#123; a.eat(); // 类型判断 if (a instanceof Cat) &#123; // 猫做的事情 Cat c = (Cat)a; c.work(); &#125; else if (a instanceof Dog) &#123; // 狗做的事情 Dog c = (Dog)a; c.work(); &#125; &#125; &#125; abstract class Animal &#123; abstract void eat(); &#125; class Cat extends Animal &#123; public void eat() &#123; System.out.println("吃鱼"); &#125; public void work() &#123; System.out.println("抓老鼠"); &#125; &#125; class Dog extends Animal &#123; public void eat() &#123; System.out.println("吃骨头"); &#125; public void work() &#123; System.out.println("看家"); &#125; &#125; 抽象类与抽象方法 如果一个类包含抽象方法，那么该类必须是抽象类。 任何子类必须重写父类的抽象方法，或者声明自身为抽象类。 抽象类不能被实例化(初学者很容易犯的错)，如果被实例化，就会报错，编译无法通过。只有抽象类的非抽象子类可以创建对象。 抽象类中不一定包含抽象方法，但是有抽象方法的类必定是抽象类。 抽象类中的抽象方法只是声明，不包含方法体，就是不给出方法的具体实现也就是方法的具体功能。 构造方法，类方法（用 static 修饰的方法）不能声明为抽象方法。 12345678910public abstract class Employee&#123; private String name; private String address; private int number; public abstract double computePay(); //其余代码&#125; 封装 修改属性的可见性来限制对属性的访问（一般限制为private），例如： 1234public class Person &#123; private String name; private int age;&#125; 对每个值属性提供对外的公共方法访问，也就是创建一对赋取值方法，用于对私有属性的访问，例如： 123456789101112131415161718192021// 采用 this 关键字是为了解决实例变量（private String name）和局部变量（setName(String name)中的name变量）之间发生的同名的冲突。public class Person&#123; private String name; private int age;​ public int getAge()&#123; return age; &#125;​ public String getName()&#123; return name; &#125;​ public void setAge(int age)&#123; this.age = age; &#125;​ public void setName(String name)&#123; this.name = name; &#125;&#125; 接口 接口并不是类，编写接口的方式和类很相似，但是它们属于不同的概念。类描述对象的属性和方法。接口则包含类要实现的方法。 除非实现接口的类是抽象类，否则该类要定义接口中的所有方法。 接口无法被实例化，但是可以被实现。一个实现接口的类，必须实现接口内所描述的所有方法，否则就必须声明为抽象类。另外，在 Java 中，接口类型可用来声明一个变量，他们可以成为一个空指针，或是被绑定在一个以此接口实现的对象。 1234[可见度] interface 接口名称 [extends 其他的接口名] &#123; // 声明变量 // 抽象方法&#125; 接口与类的区别： 接口不能用于实例化对象。 接口没有构造方法。 接口中所有的方法必须是抽象方法。 接口不能包含成员变量，除了 static 和 final 变量。 接口不是被类继承了，而是要被类实现。 接口支持多继承。 抽象类和接口的区别 抽象类中的方法可以有方法体，就是能实现方法的具体功能，但是接口中的方法不行。 抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是 public static final 类型的。 接口中不能含有静态代码块以及静态方法(用 static 修饰的方法)，而抽象类是可以有静态代码块和静态方法。 一个类只能继承一个抽象类，而一个类却可以实现多个接口。 源文件声明规则 一个源文件中只能有一个public类 一个源文件可以有多个非public类 源文件的名称应该和public类的类名保持一致。例如：源文件中public类的类名是Employee，那么源文件应该命名为Employee.java。 如果一个类定义在某个包中，那么package语句应该在源文件的首行。 如果源文件包含import语句，那么应该放在package语句和类定义之间。如果没有package语句，那么import语句应该在源文件中最前面。 import语句和package语句对源文件中定义的所有类都有效。在同一源文件中，不能给不同的类不同的包声明。 Java包 包主要用来对类和接口进行分类。当开发Java程序时，可能编写成百上千的类，因此很有必要对类和接口进行分类。 1package pkg1[．pkg2[．pkg3…]]; 12345678910111213141516171819202122232425262728293031323334/* 文件名: Animal.java */package animals; interface Animal &#123; public void eat(); public void travel();&#125;// -------------------------/* 文件名 : MammalInt.java */package animals;public class MammalInt implements Animal&#123; public void eat()&#123; System.out.println("Mammal eats"); &#125; public void travel()&#123; System.out.println("Mammal travels"); &#125; public int noOfLegs()&#123; return 0; &#125; public static void main(String args[])&#123; MammalInt m = new MammalInt(); m.eat(); m.travel(); &#125;&#125; Import语句 在Java中，如果给出一个完整的限定名，包括包名、类名，那么Java编译器就可以很容易地定位到源代码或者类。Import语句就是用来提供一个合理的路径，使得编译器可以找到某个类。 1import package1[.package2…].(classname|*);]]></content>
      <categories>
        <category>Programming Language</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Assembler Project]]></title>
    <url>%2FAssembler-Project%2F2019%2F06%2F05%2F</url>
    <content type="text"><![CDATA[Overview Objective Develop an assembler that translates programs written in Hack assembly language into the binary code understood by the Hack hardware platform. Resources The only tool needed for completing this project is the program- ming language in which you will implement your assembler. You may also find the following two tools useful: the assembler and CPU emulator supplied with the book. These tools allow you to experiment with a working assembler before you set out to build one yourself. In addition, the supplied assembler provides a visual line-by-line translation GUI and allows online code comparisons with the outputs that your assembler will generate. For more information about these capabilities, refer to the assembler tutorial (part of the book’s software suite). Contract When loaded into your assembler, a Prog.asm file containing a valid Hack assembly language program should be translated into the correct Hack binary code and stored in a Prog.hack file. The output produced by your assembler must be identical to the output produced by the assembler supplied with the book. Building Plan We suggest building the assembler in two stages. First write a symbol-less assembler, namely, an assembler that can only translate programs that contain no symbols. Then extend your assembler with symbol handling capabilities. The test programs that we supply here come in two such versions (without and with symbols), to help you test your assembler incrementally. Test Programs Each test program except the first one comes in two versions: ProgL.asm is symbol-less, and Prog.asm is with symbols. - Add: Adds the constants 2 and 3 and puts the result in R0. - Max: Computes maxðR0; R1Þ and puts the result in R2. -Rect: Draws a rectangle at the top left corner of the screen. The rectangle is 16 pixels wide and R0 pixels high. - Pong: A single-player Ping-Pong game. A ball bounces constantly off the screen’s ‘‘walls.’’ The player attempts to hit the ball with a bat by pressing the left and right arrow keys. For every successful hit, the player gains one point and the bat shrinks a little to make the game harder. If the player misses the ball, the game is over. To quit the game, press ESC. The Pong program was written in the Jack programming language (chapter 9) and translated into the supplied assembly program by the Jack compiler (chap- ters 10–11). Although the original Jack program is only about 300 lines of code, the executable Pong application is about 20,000 lines of binary code, most of which being the Jack operating system (chapter 12). Running this interactive pro- gram in the CPU emulator is a slow affair, so don’t expect a high-powered Pong game. This slowness is actually a virtue, since it enables your eye to track the graphical behavior of the program. In future projects in the book, this game will run much faster. API Parser: unpacks each instruction into its underlying fields Code: translates each field into its corresponding binary value SymbolTable: manages the symbol table Main: initializes I/O files and drives the process. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282import sysA_COMMAND = 1C_COMMAND = 2L_COMMAND = 3class SymbolTable(object): def __init__(self): self.symbol_table = &#123; "R0":0, "R1":1, "R2":2, "R3":3, "R4":4, "R5":5, "R6":6, "R7":7, "R8":8, "R9":9, "R10":10, "R11":11, "R12":12, "R13":13, "R14":14, "R15":15, "SCREEN":16384, "KBD":24576, "SP":0, "LCL":1, "ARG":2, "THIS":3, "THAT":4 &#125; def addEntry(self,symbol,address): if not self.contains(symbol): self.symbol_table[symbol] = address def contains(self,symbol): return symbol in self.symbol_table def getAddress(self,symbol): return self.symbol_table.get(symbol,-1) def __repr__(self): return str(self.symbol_table)class Code(object): def __init__(self): self.dest_table = &#123; "None": "000", "M": "001", "D": "010", "MD": "011", "A":"100", "AM": "101", "AD": "110", "AMD":"111" &#125; self.comp_table = &#123; "0": "0101010", "1": "0111111", "-1": "0111010", "D": "0001100", "A": "0110000", "!D": "0001101", "!A": "0110001", "-D": "0001111", "-A": "0110011", "D+1": "0011111", "A+1": "0110111", "D-1": "0001110", "A-1": "0110010", "D+A": "0000010", "D-A": "0010011", "A-D": "0000111", "D&amp;A": "0000000", "D|A": "0010101", "M": "1110000", "!M": "1110001", "-M": "1110011", "M+1": "1110111", "M-1": "1110010", "D+M": "1000010", "D-M": "1010011", "M-D": "1000111", "D&amp;M": "1000000", "D|M": "1010101" &#125; self.jump_table = &#123; "None": "000", "JGT" : "001", "JEQ" : "010", "JGE" : "011", "JLT" : "100", "JNE" : "101", "JLE" : "110", "JMP" : "111" &#125; def comp(self,mnemonic): if mnemonic in self.comp_table: return self.comp_table[mnemonic] else: print(mnemonic) print("error finding when code comp") def dest(self,mnemonic): if mnemonic in self.dest_table: return self.dest_table[mnemonic] else: print("error finding when code dest") def jump(self,mnemonic): if mnemonic in self.jump_table: return self.jump_table[mnemonic] else: print("error finding when code jump")class Parser(object): def __init__(self, filename): self.file = open(filename,"r") self.current_command = None def __uncomment__(self): index = self.current_command.find("//") if index != -1: self.current_command = self.current_command[:index] def hasMoreCommands(self): line = self.file.readline() if line: self.current_command = line return True else: return False def advance(self): if self.hasMoreCommands(): self.current_command = self.current_command.strip() self.__uncomment__() if self.current_command == "": self.advance() return self.current_command else: return None def commandType(self): if self.current_command.startswith("@"): return A_COMMAND elif self.current_command.startswith("("): return L_COMMAND else: return C_COMMAND def symbol(self): if self.commandType() == A_COMMAND: return self.current_command[1:] elif self.commandType() == L_COMMAND: return self.current_command[1:-1] def dest(self): # dest = comp ; jump if self.commandType() == C_COMMAND: if "=" in self.current_command: return self.current_command.split("=")[0] else: return "None" else: raise("error find in dest in parser") def comp(self): if self.commandType() == C_COMMAND: result = "" if "=" in self.current_command and ";" in self.current_command: result = self.current_command.split("=")[1].strip() result = result.split(";")[0].strip() elif "=" in self.current_command: result = self.current_command.split("=")[1].strip() elif ";" in self.current_command: result = self.current_command.split(";")[0].strip() return result else: raise("error find in comp in parser") def jump(self): if self.commandType() == C_COMMAND: if ";" in self.current_command: return self.current_command.split(";")[-1].strip() else: return "None" else: raise("error find in jump in parser") def main(file): symbol_table = SymbolTable() coder = Code() output_file = open(file.split(".")[0]+"."+"hack","w") parser = Parser(file) command_index = 0 while True: current_command = parser.advance() if not current_command: break # print(current_command) if parser.commandType() == L_COMMAND: symbol_table.addEntry(parser.symbol(),command_index) continue command_index+=1 parser = Parser(file) command_index = 16 while True: current_command = parser.advance() if not current_command: break # print(current_command) if parser.commandType() == A_COMMAND: symbol = parser.symbol() if symbol_table.contains(symbol): address = symbol_table.getAddress(symbol) else: if symbol.isdigit(): address = int(symbol) else: symbol_table.addEntry(symbol,command_index) address = command_index command_index += 1 # print("&#123;:0&gt;16b&#125;".format(address)) output_file.write("&#123;:0&gt;16b&#125;\n".format(address)) elif parser.commandType() == C_COMMAND: c=parser.comp() d=parser.dest() j=parser.jump() # print(c) # print(d) # print(j) cc = coder.comp(c) dd = coder.dest(d) jj = coder.jump(j) # print(cc) # print(dd) # print(jj) # print("111" + cc + dd + jj) output_file.write("111" + cc + dd + jj + "\n") if __name__ == '__main__': file = sys.argv[1] main(file)]]></content>
      <categories>
        <category>Software Architecture</category>
      </categories>
      <tags>
        <tag>Nand2Tetris</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Assembler]]></title>
    <url>%2FAssembler%2F2019%2F06%2F05%2F</url>
    <content type="text"><![CDATA[Table of Contents Hack language specification A-instruction C-instruction Symbols(Pre-defined symbols) A translator’s perspective The assembly process: instructions The assembly process: symbols Symbol table The assembly process Hack language specification A-instruction Symbolic syntax &gt; @value Where value is either - a non-negative decimal constant - a symbol referring to such a constant Example &gt; @21, @foo Binary syntax &gt; 0valueInBinary Example: &gt; 0000000000010101 C-instruction Symbolic syntax &gt; dest = comp ; jump Binary syntax &gt; 1 1 1 a c1 c2 c3 c4 c5 c6 d1 d2 d3 j1 j2 j3 Symbols(Pre-defined symbols) Label declaration: (label) Variable declaration: @variableName The Hack language specification describes 23 pre-defined symbols Symbol Value Symbol Value R0 0 SP 0 R1 1 LCL 1 R2 2 ARG 2 ... ... THIS 3 R15 15 THAT 4 SCREEN 16384 KBD 24576 A translator’s perspective Assembly program elements: White space - q Empty lines / indentation - Linecomments - In-line comments Instructions - A-instructions - C-instructions Symbols - References - Label declarations The assembly process: instructions For each instruction Parse the instruction: break it into its underlying fields A-instruction: translate the decimal value into a binary value C-instruction: for each field in the instruction, generate the corresponding binary code; Assemble the translated binary codes into a complete 16-bit machine instruction Write the 16-bit instruction to the output file. The assembly process: symbols Translating @preDefinedSymbol: Replace preDefinedSymbol with its value. Label symbols Used to label destinations of goto commands Declared by the pseudo-command (XXX) This directive defines the symbol XXX to refer to the memory location holding the next instruction in the program Translating @labelSymbol : Replace labelSymbol with its value LOOP 4 STOP 18 END 22 Variable symbols Any symbol XXX appearing in an assembly program which is not predefined and is not defined elsewhere using the (XXX) directive is treated as a variable Each variable is assigned a unique memory address, starting at 16 Translating @variableSymbol : If seen for the first time, assign a unique memory address Replace variableSymbol with this address i 16 sum 17 Symbol table To resolve a symbol, look up its value in the symbol table The assembly process Initialization Construct an empty symbol table Add the pre-defined symbols to the symbol table First pass Scan the entire program; For each instruction of the form (xxx): Add the pair (xxx, address) to the symbol table, where address is the number of the instruction following (xxx) Second pass Set n to 16 Scan the entire program again, for each instruction: If the instruction is @symbol, look up symbol in the symbol table; If (symbol, value) is found, use value to complete the instruction’s translation; If not found: Add (symbol, n) to the symbol table, Use n to complete the instruction’s translation, n++ If the instruction is a C-instruction, complete the instruction’s translation Write the translated instruction to the output file.]]></content>
      <categories>
        <category>Software Architecture</category>
      </categories>
      <tags>
        <tag>Nand2Tetris</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Low Level Programming Taste Project]]></title>
    <url>%2FLow-Level-Programming-Taste-Project%2F2019%2F06%2F04%2F</url>
    <content type="text"><![CDATA[Objective Get a taste of low-level programming in machine language, and get acquainted with the Hack computer platform. In the process of working on this project, you will also become familiar with the assembly process, and you will ap- preciate visually how the translated binary code executes on the target hardware. Resources In this project you will use two tools supplied with the book: An assem- bler, designed to translate Hack assembly programs into binary code, and a CPU emulator, designed to run binary programs on a simulated Hack platform. Contract Write and test the two programs described in what follows. When exe- cuted on the CPU emulator, your programs should generate the results mandated by the test scripts supplied in the project directory. Multiplication Program (Mult.asm): The inputs of this program are the current values stored in R0 and R1 (i.e., the two top RAM locations). The program computes the product R0R1 and stores the result in R2. We assume (in this program) that R0&gt;=0, R1&gt;=0, and R0R1&lt;32768. Your program need not test these conditions, but rather assume that they hold. The supplied Mult.tst and Mult.cmp scripts will test your program on several representative data values. I/O-Handling Program (Fill.asm): This program runs an infinite loop that listens to the keyboard input. When a key is pressed (any key), the program blackens the screen, namely, writes ‘‘black’’ in every pixel. When no key is pressed, the screen should be cleared. You may choose to blacken and clear the screen in any spatial order, as long as pressing a key continuously for long enough will result in a fully blackened screen and not pressing any key for long enough will result in a cleared screen. This program has a test script (Fill.tst) but no compare file—it should be checked by visibly inspecting the simulated screen. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162// This file is part of www.nand2tetris.org// and the book "The Elements of Computing Systems"// by Nisan and Schocken, MIT Press.// File name: projects/04/Mult.asm// Multiplies R0 and R1 and stores the result in R2.// (R0, R1, R2 refer to RAM[0], RAM[1], and RAM[2], respectively.)// Put your code here.//m * n = m + m + m + ... + m// @sum// M=0// @i// M=1// (LOOP)// @i// D=M// @R0// D=M-D// @END// D;JGT// @R1// sum=sum+M// @i// M=M+1// @LOOP// 0;JMP// (END)// @sum// D=M// @R2// M=D@sumM=0 //sum=0@i //i=1M=1(LOOP)@i //D=iD=M@R0 D=D-M //D=I-R0@ENDD;JGT // if(i-R0) &gt; 0 goto END@R1D=M //D=R1@sumM=D+M@iM=M+1@LOOP0;JMP //Goto LOOP(END)@sumD=M@R2M=D 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162// This file is part of www.nand2tetris.org// and the book "The Elements of Computing Systems"// by Nisan and Schocken, MIT Press.// File name: projects/04/Fill.asm// Runs an infinite loop that listens to the keyboard input.// When a key is pressed (any key), the program blackens the screen,// i.e. writes "black" in every pixel;// the screen should remain fully black as long as the key is pressed. // When no key is pressed, the program clears the screen, i.e. writes// "white" in every pixel;// the screen should remain fully clear as long as no key is pressed.// Put your code here. @status M=-1 // status=0xFFFF D=0 // Argument - what to set screen bits to @SETSCREEN 0;JMP(LOOP) @KBD D=M // D = current keyboard character @SETSCREEN D;JEQ // If no key, set screen to zeroes (white) D=-1 // If key pressed, set screen to all 1 bits (black) (SETSCREEN) // Set D=new status before jumping here @ARG M=D // Save new status arg @status // FFFF=black, 0=white - status of entire screen D=D-M // D=newstatus-status @LOOP D;JEQ // Do nothing if new status == old status @ARG D=M @status M=D // status = ARG @SCREEN D=A // D=Screen address @8192 D=D+A // D=Byte just past last screen address @i M=D // i=SCREEN address (SETLOOP) @i D=M-1 M=D // i=i-1 @LOOP D;JLT // if i&lt;0 goto LOOP @status D=M // D=status @i A=M // Indirect M=D // M[current screen address]=status @SETLOOP 0;JMP]]></content>
      <categories>
        <category>Hardware Architecture</category>
      </categories>
      <tags>
        <tag>Nand2Tetris</tag>
        <tag>Project</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[The functions of Pooling]]></title>
    <url>%2Fthe-functions-of-Pooling%2F2019%2F06%2F04%2F</url>
    <content type="text"><![CDATA[作者：谢志宁 链接：https://www.zhihu.com/question/36686900/answer/130890492 来源：知乎 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。 invariance(不变性)，这种不变性包括translation(平移)，rotation(旋转)，scale(尺度) 保留主要的特征同时减少参数(降维，效果类似PCA)和计算量，防止过拟合，提高模型泛化能力. translation invariance：这里举一个直观的例子(数字识别)，假设有一个16x16的图片，里面有个数字1，我们需要识别出来，这个数字1可能写的偏左一点(图1)，这个数字1可能偏右一点(图2)，图1到图2相当于向右平移了一个单位，但是图1和图2经过max pooling之后它们都变成了相同的8x8特征矩阵，主要的特征我们捕获到了，同时又将问题的规模从16x16降到了8x8，而且具有平移不变性的特点。图中的a（或b）表示，在原始图片中的这些a（或b）位置，最终都会映射到相同的位置。 rotation invariance：下图表示汉字“一”的识别，第一张相对于x轴有倾斜角，第二张是平行于x轴，两张图片相当于做了旋转，经过多次max pooling后具有相同的特征 scale invariance：下图表示数字“0”的识别，第一张的“0”比较大，第二张的“0”进行了较小，相当于作了缩放，同样地，经过多次max pooling后具有相同的特征]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Convolutional Neural Networks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Computer Architecture]]></title>
    <url>%2FComputer-Architecture%2F2019%2F06%2F03%2F</url>
    <content type="text"><![CDATA[We ascribe beauty to that which is simple; which has no superfluous parts; which exactly answers its end; which stands related to all things; which is the mean of many extremes. -- Ralph Waldo Emerson Table of Contents Overview The von Neumann Architecture Memory Physical Perspective Logical Perspective Data Memory Instruction Memory Central Processing Unit(CPU) Fetching Executing Arithmetic Logic Unit Registers Control Unit CPU Operation Registers Data registers Address registers Program counter Input and Output Screen Keyboard Hack Computer implementation Overview This chapter is the pinnacle of the hardware part of our journey. We are now ready to take all the chips that we’ve built in chapters 1–3 and integrate them into a general-purpose computer system capable of running programs written in the machine language presented in chapter 4. The specific computer we will build, called Hack, has two important virtues. On the one hand, Hack is a simple machine that can be constructed in just a few hours, using previously built chips and the hardware simulator supplied with the book. On the other hand, Hack is sufficiently powerful to illustrate the key operating principles and hardware elements of any general-purpose computer. Therefore, building it will give you an excellent understanding of how modern computers work at the low hardware and software levels. The von Neumann Architecture The von Neumann machine is a practical architecture and the conceptual blueprint of almost all computer platforms today. At the heart of this architecture lies the stored program concept: The computer’s memory stores not only the data that the computer manipulates, but also the very instructions that tell the computer what to do. Let us explore this architecture in some detail. Memory Physical Perspective the memory is a linear sequence of addressable registers, each having a unique address and a value, which is a fixed-size word of information. Logical Perspective he memory is divided into two areas. One area is dedicated for storing data,e.g. the arrays and objects of programs that are presently executing, while the other area is dedicated for storing the programs’ instructions. Data Memory High-level programs manipulate abstract artifacts like variables, arrays, and objects. After the programs are translated into machine language, these data abstractions become binary codes, stored in the computer’s memory. Once an individual register has been selected from the memory by specifying its address, its contents can be either read or written to. Instruction Memory Before high-level programs can be executed on the computer, they must be translated into machine language. These instructions are stored in the computer’s instruction memory as binary codes. In each step of a program’s execution, the CPU fetches (i.e., reads) a binary machine instruction from a selected register in the instruction memory, decodes it, executes the specified instruction, and figures out which instruction to fetch and execute next. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849// This file is part of www.nand2tetris.org// and the book "The Elements of Computing Systems"// by Nisan and Schocken, MIT Press.// File name: projects/05/Memory.hdl/** * The complete address space of the Hack computer's memory, * including RAM and memory-mapped I/O. * The chip facilitates read and write operations, as follows: * Read: out(t) = Memory[address(t)](t) * Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1) * In words: the chip always outputs the value stored at the memory * location specified by address. If load==1, the in value is loaded * into the memory location specified by address. This value becomes * available through the out output from the next time step onward. * Address space rules: * Only the upper 16K+8K+1 words of the Memory chip are used. * Access to address&gt;0x6000 is invalid. Access to any address in * the range 0x4000-0x5FFF results in accessing the screen memory * map. Access to address 0x6000 results in accessing the keyboard * memory map. The behavior in these addresses is described in the * Screen and Keyboard chip specifications given in the book. */CHIP Memory &#123; IN in[16], load, address[15]; OUT out[16]; PARTS: //determine which one to load DMux(in=load,sel=address[14],a=ramload,b=skload); DMux(in=skload,sel=address[13],a=sload,b=nothing); //load ram and screen RAM16K(in=in,load=ramload,address=address[0..13],out=ramout); Screen(in=in,load=sload,address=address[0..12],out=screenout); //Deal with keyboard, make sure that all bits in [0..12] are 0 Keyboard(out=kbd); Or8Way(in=address[0..7], out=notkbd1); Or8Way(in[0..4]=address[8..12], in[5..7]=false, out=notkbd2); Or(a=notkbd1,b=notkbd2,out=notkbd); Mux16(a=kbd,b=false,sel=notkbd,out=kbdout); //determine which is the output Mux16(a=ramout,b=outsk,sel=address[14],out=out); Mux16(a=screenout,b=kbdout,sel=address[13],out=outsk); &#125; Central Processing Unit(CPU) The CPU—the centerpiece of the computer’s architecture—is in charge of executing the instructions of the currently loaded program. The CPU executes these tasks using three main hardware elements: an Arithmetic-Logic Unit (ALU), a set of registers, and a control unit. The CPU operation can be described as a repeated loop: decode the current instruction, execute it, figure out which instruction to execute next, fetch it, decode it, and so on. This process is sometimes referred to as the fetch-execute cycle. Fetching Put the location of the next instruction in the Memory address input Get the instruction code by reading the contents at that Memory location Executing The instruction code specifies what to do - Which arithmetic or logical instruction to execute - Which memory address to access (for read / write) - If / where to jump - ...... Executing the instruction involves: - accessing registers - accessing the data memory. Arithmetic Logic Unit perform all the low-level arithmetic and logical operations Any function not supported by the ALU as a primitive hardware operation can be later realized by the computer’s system software Registers store the intermediate results(rather than ship them in and out of the CPU chip and store them in RAM chip) typically equipped with a small set of 2 up to 32 resident high-speed registers, each capable of holding a single word. Control Unit decoded binary instructions signal various hardware devices (ALU, registers, memory) how to execute the instructions. CPU Operation 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586// This file is part of www.nand2tetris.org// and the book "The Elements of Computing Systems"// by Nisan and Schocken, MIT Press.// File name: projects/05/CPU.hdl/** * The Hack CPU (Central Processing unit), consisting of an ALU, * two registers named A and D, and a program counter named PC. * The CPU is designed to fetch and execute instructions written in * the Hack machine language. In particular, functions as follows: * Executes the inputted instruction according to the Hack machine * language specification. The D and A in the language specification * refer to CPU-resident registers, while M refers to the external * memory location addressed by A, i.e. to Memory[A]. The inM input * holds the value of this location. If the current instruction needs * to write a value to M, the value is placed in outM, the address * of the target location is placed in the addressM output, and the * writeM control bit is asserted. (When writeM==0, any value may * appear in outM). The outM and writeM outputs are combinational: * they are affected instantaneously by the execution of the current * instruction. The addressM and pc outputs are clocked: although they * are affected by the execution of the current instruction, they commit * to their new values only in the next time step. If reset==1 then the * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather * than to the address resulting from executing the current instruction. */CHIP CPU &#123; IN inM[16], // M value input (M = contents of RAM[A]) instruction[16], // Instruction for execution reset; // Signals whether to re-start the current // program (reset=1) or continue executing // the current program (reset=0). OUT outM[16], // M value output writeM, // Write into M? addressM[15], // Address in data memory (of M) pc[15]; // address of next instruction PARTS: Mux16(a=instruction,b=ALUout,sel=instruction[15],out=Ain); Not(in=instruction[15],out=notinstruction); //RegisterA //when instruction[15] = 0, it is @value means A should load value Or(a=notinstruction,b=instruction[5],out=loadA);//d1 ARegister(in=Ain,load=loadA,out=Aout,out[0..14]=addressM); Mux16(a=Aout,b=inM,sel=instruction[12],out=AMout); //Prepare for ALU, if it is not an instruction, just return D And(a=instruction[11],b=instruction[15],out=zx);//c1 And(a=instruction[10],b=instruction[15],out=nx);//c2 Or(a=instruction[9],b=notinstruction,out=zy);//c3 Or(a=instruction[8],b=notinstruction,out=ny);//c4 And(a=instruction[7],b=instruction[15],out=f);//c5 And(a=instruction[6],b=instruction[15],out=no);//c6 ALU(x=Dout,y=AMout,zx=zx,nx=nx,zy=zy,ny=ny,f=f,no=no,out=outM,out=ALUout,zr=zero,ng=neg); //when it is an instruction, write M And(a=instruction[15],b=instruction[3],out=writeM);//d3 //RegisterD,when it is an instruction, load D And(a=instruction[15],b=instruction[4],out=loadD);//d2 DRegister(in=ALUout,load=loadD,out=Dout); //Prepare for jump //get positive Or(a=zero,b=neg,out=notpos); Not(in=notpos,out=pos); And(a=instruction[0],b=pos,out=j3);//j3 And(a=instruction[1],b=zero,out=j2);//j2 And(a=instruction[2],b=neg,out=j1);//j1 Or(a=j1,b=j2,out=j12); Or(a=j12,b=j3,out=j123); And(a=j123,b=instruction[15],out=jump); //when jump,load Aout PC(in=Aout,load=jump,reset=reset,inc=true,out[0..14]=pc);&#125; Registers CPU-resident registers save unnecessary memory access, and allow using thinner instruction formats, resulting in faster throughput.(saved ourselves a great deal of time and overhead) Data registers calculate (a − b)*c, temporary result(a - b) can be stored in some memory register. Typically, CPU’s use at least one and up to 32 data registers. Address registers the output of an address register is typically connected to the address input of a memory device. set Memory[17] to 1. First set A=17(@17), followed by M=1(M mnemonic stand for Memory[17]) In addition to supporting this fundamental addressing operation, an address register is, well, a register. Therefore, if needed, it can be used as yet another data register. D=17( @17, D=A) Program counter When executing a program, the CPU must always keep track of the address of the instruction that must be fetched and executed next. This address is kept in a special register called program counter. Input and Output computer scientists have devised clever schemes to make all these different devices look exactly the same to the computer. The key trick in managing this complexity is called memory-mapped I/O. The basic idea is to create a binary emulation of the I/O device, making it “look” to the CPU as if it were a regular memory segment. each I/O device is allocated an exclusive area in memory, becoming its “memory map.” the data that drives each I/O device must be serialized. example: 2-dimensional grid of pixels, must be mapped on a 1-dimensional vector of fixed-size memory registers. Screen Keyboard Hack Computer implementation 12345678910111213141516171819202122232425// This file is part of www.nand2tetris.org// and the book "The Elements of Computing Systems"// by Nisan and Schocken, MIT Press.// File name: projects/05/Computer.hdl/** * The HACK computer, including CPU, ROM and RAM. * When reset is 0, the program stored in the computer's ROM executes. * When reset is 1, the execution of the program restarts. * Thus, to start a program's execution, reset must be pushed "up" (1) * and "down" (0). From this point onward the user is at the mercy of * the software. In particular, depending on the program's code, the * screen may show some output and the user may be able to interact * with the computer via the keyboard. */CHIP Computer &#123; IN reset; PARTS: CPU(instruction=instruction,reset=reset,inM=outMemo,outM=CPUoutM,writeM=wM,addressM=adM,pc=PC); Memory(in=CPUoutM,load=wM,address=adM,out=outMemo); ROM32K(address=PC,out=instruction);&#125;]]></content>
      <categories>
        <category>Hardware Architecture</category>
      </categories>
      <tags>
        <tag>Nand2Tetris</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Machine Languages]]></title>
    <url>%2FMachine-Languages%2F2019%2F06%2F02%2F</url>
    <content type="text"><![CDATA[Table of Contents Table of Contents Background Machine languages Mnemonics Commands Arithmetic and Logic Operations Memory Access Compilation The Hack language specification The A-Instruction The C-Instruction The Computation Specification(comp) The Destination Specification The Jump Specification Symbols Hack programs: symbolic and binary Input / Output Screen Keyboard Syntax Conventions and File Format Hack programming Hack assembly language (overview) Registers and memory Branching and Labels Variables Iterative processing Pointers Background Memory The term memory refers loosely to the collection of hardware devices that store data and instructions in a computer. From the programmer’s standpoint, all memories have the same structure: A continuous array of cells of some fixed width, also called words or locations, each having a unique address. Processor The processor, normally called Central Processing Unit or CPU, is a device capable of performing a fixed set of elementary operations Registers Memory access is a relatively slow operation, requiring long instruction formats (an address may require 32 bits). For this reason, most processors are equipped with several registers, each capable of holding a single value. Located in the processor’s immediate proximity, the registers serve as a high-speed local memory, allowing the processor to manipulate data and instructions quickly. This setting enables the programmer to minimize the use of memory access commands, thus speeding up the program’s execution. Machine languages A machine language can be viewed as an agreed-upon formalism, designed to manipulate a memory using a processor and a set of registers. Mnemonics For example, the language designer can decide that the operation code 1010 will be represented by the mnemonic add and that the registers of the machine will be symbolically referred to using the symbols R0, R1, R2, and so forth. Using these conventions, one can specify machine language instructions either directly, as 1010001100011001, or symbolically, as, say, ADD R3,R1,R9. Commands Yet irrespective of this variety, all machine lan- guages support similar sets of generic commands, which we now describe. Arithmetic and Logic Operations 12345ADD R2,R1,R3 // R2-&lt;--R1+R3 where R1,R2,R3 are registersADD R2,R1,foo // R2-&lt;--R1+foo where foo stands for the // value of the memory location pointed // at by the user-defined label foo.AND R1,R1,R2 // R1-&lt;--bit wise And of R1 and R2 Memory Access Memory access commands fall into two categories. - First, as we have just seen, arithmetic and logical commands are allowed to operate not only on registers, but also on selected memory locations. - Second, all computers feature explicit load and store commands, designed to move data between registers and memory. These memory access commands may use several types of addressing modes -- ways of specifying the address of the required memory word. Direct addressing The most common way to address the memory is to express a specific address or use a symbol that refers to a specific address, as follows 123LOAD R1,67 // R1-&lt;--Memory[67] // Or, assuming that bar refers to memory address 67:LOAD R1,bar // R1&lt;--Memory[67] Immediate addressing This form of addressing is used to load constants— namely, load values that appear in the instruction code 1LOADI R1,67 // R1&lt;--67 Indirect addressing In this addressing mode the address of the required memory location is not hard-coded into the instruction; instead, the instruction specifies a memory location that holds the required address. 1234// Translation of x=foo[j] or x=*(foo+j):ADD R1, foo, j // R1&lt;--foo+jLOAD* R2,R1 // R2-&lt;--Memory[R1] STR R2,x // x-&lt;--R2 Flow of Control While programs normally execute in a linear fashion, one com- mand after the other, they also include occasional branches to locations other than the next command. Branching serves several purposes including repetition (jump backward to the beginning of a loop), conditional execution (if a Boolean condition is false, jump forward to the location after the ‘‘if-then’’ clause), and subroutine calling ( jump to the first command of some other code segment). Unconditional jump commands like JMP beginWhile specify only the address of the target location Conditional jump commands like JNG R1,endWhile must also specify a Boolean condition, expressed in some way. 12345load R1,0add 1, R1...// do something with R1 value ...jmp 102 // goto 102 Compilation The Hack language specification Memory Address Spaces The Hack computer is a von Neumann platform. It is a 16-bit machine, consisting of a CPU, two separate memory modules serving as instruction memory and data memory, and two memory-mapped I/O devices: a screen and a keyboard.The CPU can only execute programs that reside in the instruction memory. Register 1. The Hack programmer is aware of two 16-bit registers called D and A. D is used solely to store data values, While A can be interpreted either as a data value, or as an address in the data memory. 2. Since Hack instructions are 16-bit wide, and since addresses are specified using 15 bits, it is impossible to pack both an operation code and an address in one instruction. Thus, the syntax of the Hack language mandates that memory access instructions operate on an implicit memory location labeled M. 3. the A register can be used to facilitate direct access to the data memory: the convention is that M always refers to the memory word whose address is the current value of the A register &gt; eg: D = Memory[516] 􏰁- 1, we have to use one instruction to set the A register to 516, and a subsequent instruction to specify D=M-1. facilitate direct access to the instruction memory: Hack jump instructions do not specify a particular address. Instead, the convention is that any jump operation always effects a jump to the instruction located in the memory word addressed by A. @value, where value is either a number or a symbol representing a number. This command simply stores the specified value in the A register. The A-Instruction The A-instruction is used to set the A register to a 15-bit values \[@valu\] The A-instruction is used for three different purposes. - it provides the only way to enter a constant into the computer under program control. - it sets the stage for a subsequent C-instruction designed to manipulate a certain data memory location, by first setting A to the address of that location. - it sets the stage for a subsequent C-instruction that specifies a jump, by first loading the address of the jump destination to the A register The C-Instruction The instruction code is a specification that answers three questions: - what to computer - where to store the computed value - what to do next The overall semantics of the symbolic instruction dest=comp;jump is as follows. The comp field instructs the ALU what to compute. The dest field instructs where to store the computed value (ALU output). The Computation Specification(comp) The Hack ALU is designed to compute a fixed set of functions on the D, A, and M registers (where M stands for Memory[A]). Recall that the format of the C-instruction is 111accccccdd djjj. Suppose we want to have the ALU compute D-1, the current value of the D register minus 1. According to figure blow, this can be done by issuing the instruction 1110001110000000 (the 7-bit operation code is in bold). To compute the value of D|M, we issue the instruction 1111 010101000000. To compute the constant 􏰁1, we issue the instruction 1110111010000000, and so on. The Destination Specification The value computed by the comp part of the C- instruction can be stored in several destinations, as specified by the instruction’s 3-bit dest part. Recall that the format of the C-instruction is 111a cccc ccdd djjj. Suppose we want the computer to increment the value of Memory[7] by 1 and to also store the result in the D register. According to figures 4.3 and 4.4, this can be accomplished by the following instructions: 120000 0000 0000 0111 // @71111 1101 1101 1000 // MD=M+1 ### The Jump Specification The jump field of the C-instruction tells the computer what to do next. 12345678910// if Memory[3]=5 then goto 100 else goto 200@3D=M // D=Memory[3]@5D=D-A // D=D-5@100D;JEQ // If D=0 goto 100@2000;JMP // Goto 200 Symbols Assembly commands can refer to memory locations (addresses) using either constants or symbols. Symbols are introduced into assembly programs in the following three ways: Predefined symbols: A special subset of RAM addresses can be referred to by any assembly program using the following predefined symbols. - Virtual registers: To simplify assembly programming, the symbols R0 to R15 are predefined to refer to RAM addresses 0 to 15, respectively. - Predefined pointers: The symbols SP, LCL, ARG, THIS, and THAT are predefined to refer to RAM addresses 0 to 4, respectively. Note that each of these memory locations has two labels. For example, address 2 can be referred to using either R2 or ARG. This syntactic convention will come to play in the implementation of the virtual machine, discussed in chapters 7 and 8. - I/O pointers: The symbols SCREEN and KBD are predefined to refer to RAM addresses 16384 (0x4000) and 24576 (0x6000), respectively, which are the base addresses of the screen and keyboard memory maps. The use of these I/O devices is explained later. Label symbols: These user-defined symbols, which serve to label destinations of goto commands, are declared by the pseudo-command ‘‘(Xxx)’’. This directive defines the symbol Xxx to refer to the instruction memory location holding the next command in the program. A label can be defined only once and can be used any- where in the assembly program, even before the line in which it is defined. Variable symbols: Any user-defined symbol Xxx appearing in an assembly program that is not predefined and is not defined elsewhere using the ‘‘(Xxx)’’ command is treated as a variable, and is assigned a unique memory address by the assembler, starting at RAM address 16 (0x0010). Hack programs: symbolic and binary Input / Output The Hack platform can be connected to two peripheral devices: a screen and a keyboard. Both devices interact with the computer platform through memory maps. This means that drawing pixels on the screen is achieved by writing binary values into a memory segment associated with the screen. Likewise, listening to the key- board is done by reading a memory location associated with the keyboard. The physical I/O devices and their memory maps are synchronized via continuous refresh loops. A designated memory area, dedicated to manage a display unit The physical display is continuously refreshed from the memory map, many times per second Output is effected by writing code that manipulates the screen memory map. Screen The Hack computer includes a black-and-white screen organized as 256 rows of 512 pixels per row. The screen’s contents are represented by an 8K memory map that starts at RAM address 16384 (0x4000). Each row in the physical screen, starting at the screen’s top left corner, is represented in the RAM by 32 consecutive 16-bit words. Thus the pixel at row r from the top and column c from the left is mapped on the c%16 bit (counting from LSB to MSB) of the word located at RAM[16384 + r *􏰀 32 + c/16]. To write or read a pixel of the physical screen, one reads or writes the corresponding bit in the RAM-resident memory map (1 1⁄4 black, 0 1⁄4 white). Example: 12345// Draw a single black dot at the screen&apos;s top left corner:@SCREEN // Set the A register to point to the memory // word that is mapped to the 16 left-most // pixels of the top row of the screen.M=1 // Blacken the left-most pixel. !()[11.png] Task: draw a filled rectangle at the upper left corner of the screen, 16 pixels wide and RAM[0] pixels long 123456789101112131415// Pseudo code// for (i=0; i&lt;n; i++) &#123;// draw 16 black pixels at the// beginning of row i// &#125;addr = SCREEN n = RAM[0] i=0LOOP:if i &gt; n goto ENDRAM[addr] = -1 // 1111111111111111 // advances to the next rowaddr = addr + 32i=i+1goto LOOPEND:goto END 123456789101112131415161718192021222324252627282930313233343536@SCREEND=A@addrM=D // addr = 16384 // (screen’s base address)@0D=M@nM=D // n = RAM[0]@iM=0 //i=0(LOOP) @i D=M @n D=D-M @END D;JGT // if i&gt;n goto END @addr A=M M=-1 // RAM[addr]=1111111111111111 @i M=M+1 //i=i+1 @32 D=A @addr M=D+M // addr = addr + 32 @LOOP 0;JMP // goto LOOP(END) @END // program’s end 0;JMP Keyboard The Hack computer interfaces with the physical keyboard via a single-word memory map located in RAM address 24576 (0x6000). Whenever a key is pressed on the physical keyboard, its 16-bit ASCII code appears in RAM[24576]. When no key is pressed, the code 0 appears in this location. In addition to the usual ASCII codes, the Hack keyboard recognizes the keys shown in figure 4.6. Syntax Conventions and File Format Binary Code Files A binary code file is composed of text lines. Each line is a sequence of sixteen ‘‘0’’ and ‘‘1’’ ASCII characters, coding a single machine language instruction. Taken together, all the lines in the file represent a machine language program. The contract is such that when a machine language program is loaded into the computer’s instruction memory, the binary code represented by the file’s nth line is stored in address n of the instruction memory (the count of both program lines and memory addresses starts at 0). By convention, machine language programs are stored in text files with a ‘‘hack’’ extension, for example, Prog.hack. Assembly Language Files By convention, assembly language programs are stored in text files with an ‘‘asm’’ extension, for example, Prog.asm. An assembly languages file is composed of text lines, each representing either an instruction or a symbol declaration: - Instruction: an A-instruction or a C-instruction. - (Symbol): This pseudo-command causes the assembler to assign the label Symbol to the memory location in which the next command of the program will be stored. It is called ‘‘pseudo-command’’ since it generates no machine code. Constants and Symbols Constants must be non-negative and are always written in decimal notation. A user-defined symbol can be any sequence of letters, digits, underscore (_), dot (.), dollar sign ($), and colon (:) that does not begin with a digit. Comments Text beginning with two slashes (//) and ending at the end of the line is considered a comment and is ignored. White Space Space characters are ignored. Empty lines are ignored. Case Conventions All the assembly mnemonics must be written in uppercase. The rest (user-defined labels and variable names) is case sensitive. The convention is to use uppercase for labels and lowercase for variable names. Hack programming Hack assembly language (overview) Registers and memory D: data register A: address / data register M: the currently selected memory register: M = RAM[A] Typical operations: 1234567891011121314151617181920212223242526// D = 10@10D=A// D++D=D+1// D=RAM[17]@17D=M//RAM[17]=D@17M=D// RAM[17]=10@10D=A@17M=D// RAM[5] = RAM[3]@3 D=M @5M=D Program example: add two numbers 123456789101112// Program: Add2.asm// Computes: RAM[2] = RAM[0] + RAM[1]// Usage: put values in RAM[0], RAM[1]@0D=A@1D=D+M@2M=D Branching and Labels Variables Iterative processing 12345678910111213// pseudo code// Computes RAM[1] = 1+2+ ... +RAM[0]n = R0 i=1 sum = 0LOOP: if i &gt; n goto STOP sum = sum + i i=i+1 goto LOOPSTOP: R1 = sum 12345678910111213141516171819202122232425262728293031323334// Computes RAM[1] = 1+2+ ... +n// Usage: put a number (n) in RAM[0] @R0 D=M @n M=D // n = R0 @i M=1 // i = 1 @sum M=0 // sum = 0(LOOP) @i D=M @n D=D-M @STOP D;JGT // if i &gt; n goto STOP @sum D=M @i D=D+M @sum M=D // sum = sum + i @i M=M+1 // i = i + 1 @LOOP 0;JMP(STOP) @sum D=M @R1 M=D // RAM[1] = sum(END) @END 0;JMP Pointers]]></content>
      <categories>
        <category>Hardware Architecture</category>
      </categories>
      <tags>
        <tag>Nand2Tetris</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Transfer Learning]]></title>
    <url>%2FTransfer-Learning%2F2019%2F05%2F31%2F</url>
    <content type="text"><![CDATA[$("#ipynb").load( function() { console.log($("#ipynb").contents().find("body").find("#notebook")); document.getElementById('ipynb').height=$("#ipynb").contents().find("#notebook").height()+100; })]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Project</tag>
        <tag>Computer Vision</tag>
        <tag>Convolutional Neural Networks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Data Augmentation]]></title>
    <url>%2FData-Augmentation%2F2019%2F05%2F31%2F</url>
    <content type="text"><![CDATA[$("#ipynb").load( function() { console.log($("#ipynb").contents().find("body").find("#notebook")); document.getElementById('ipynb').height=$("#ipynb").contents().find("#notebook").height()+100; })]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Project</tag>
        <tag>Computer Vision</tag>
        <tag>Convolutional Neural Networks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python Multiprocessing]]></title>
    <url>%2FPython-Multiprocessing%2F2019%2F05%2F30%2F</url>
    <content type="text"><![CDATA[Multiprocessing.Pool中 apply, apply_async, map, map_async的区别 Multi-args Concurrence Blocking Ordered-results map no yes yes yes apply yes no yes no map_async no yes no yes apply_async yes yes no no apply 与 apply_async相比，apply是阻塞的，通常不在使用。apply_async方法还有一个回调callback，如果提供，则在函数完成时调用。callback是可调用对象，接收输入参数。当func的结果变为可用时，将理解传递给callback。callback禁止执行任何阻塞操作，否则将接收其他异步操作中的结果。 map 与 map_async 相比，map_async 不会阻塞主线程。 map 和 map_async 返回结果是根据参数的顺序有序，apply 与 apply_async 无序 from multiprocessing import Pool import time 12345678910111213141516171819202122232425from multiprocessing import Poolimport time result = []def mycallback(x): return result.append(x) def worker(num): time.sleep(1) return num if __name__ == '__main__': e1 = time.time() pool = Pool() for i in range(10): pool.apply_async(worker, args = (i, ),callback = mycallback) pool.close() pool.join() e2 = time.time() print(float(e2 - e1)) # 2.07s print(result) # [2, 4, 3, 0, 1, 5, 6, 7, 8, 9] 1234567891011121314151617from multiprocessing import Poolimport timedef worker(num): time.sleep(1) return num if __name__ == '__main__': e1 = time.time() pool = Pool() result = pool.map(worker, [i for i in range(10)]) e2 = time.time() print(float(e2 - e1)) print(result) #[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] 123456789101112131415161718192021222324252627from multiprocessing import Poolimport time result = []def mycallback(x): result.append(x) def worker(num): time.sleep(1) return num if __name__ == '__main__': e1 = time.time() pool = Pool(4) pool.map_async(worker, [i for i in range(10)], callback = mycallback) pool.close() pool.join() e2 = time.time() print(float(e2 - e1)) # 2.07s print(result) # [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]] 多进程写入同一个文件时，为了避免写入顺序混乱，有如下几种解决办法。 对写入操作进行加锁 对当前进行写入操作的进程锁定，直到该进程写完十个字，也就是一个完成的操作，后解除该进程的锁定，放它离开。切换到另外一个进程来操作。因为一次只能一个进程执行写入操作，而且必须执行完成完整的操作，才允许切换。所以不会造成文件内容的混乱。但是加锁一般会完造成程序的执行效率下降。而且，如果写入操作分散在整个代码的多处，lock作为一个不可直接打包的资源是没有办法作为一个参数直接给Pool的map方法里的函数传参的。为了解决这个问题，有两种解决方法，一种是使用多进程的管理器Manager()，并使用偏函数的办法传递对象Manager.Lock()。第二种是在进程池创建时传递multiprocessing.Lock()对象。 1234567891011121314151617181920212223242526272829303132from multiprocessing import Pool,Lock,Managerimport timefrom functools import partial def worker(lock,x): time.sleep(1) lock.acquire() try: with open('result.txt', 'a+') as f: f.writelines(str(x)) finally: lock.release()if __name__ == '__main__': e1 = time.time() pool = Pool(4) manager = Manager() lock = manager.Lock() partial_worker = partial(worker, lock) # for i in range(10): # pool.apply_async(partial_worker, (i,)) pool.map(partial_worker, [i for i in range(10)]) pool.close() pool.join() e2 = time.time() print(float(e2 - e1)) 通过initializer参数在Pool对象创建时传递Lock对象。这种方式将Lock对象变为了所有子进程的全局对象。 1234567891011121314151617181920def send_request(data): api_url = 'http://api.xxxx.com/?data=%s' start_time = clock() print urllib2.urlopen(api_url % data).read() end_time = clock() lock.acquire() whit open('request.log', 'a+') as logs: logs.write('request %s cost: %s\n' % (data, end_time - start_time)) lock.release()def init(l): global lock lock = l if __name__ == '__main__': data_list = ['data1', 'data2', 'data3'] lock = Lock() pool = Pool(8, initializer=init, initargs=(lock,)) pool.map(send_request, data_list) pool.close() pool.join() 更优雅的方法，使用multiprocessing的回调函数。 - 把写入操作抽象为单独的一个函数 - 把进程需要写入的内容，作为返回值返回 - 使用回调函数写入进程返回内容。 12345678910111213141516171819202122232425from multiprocessing import Poolimport time def mycallback(x): with open('result.txt', 'a+') as f: f.writelines(str(x)) def worker(num): time.sleep(1) return num if __name__ == '__main__': e1 = time.time() pool = Pool() for i in range(10): pool.apply_async(worker, (i,), callback=mycallback) pool.close() pool.join() e2 = time.time() print(float(e2 - e1))]]></content>
      <categories>
        <category>Parallel Computation</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Debris 20190530]]></title>
    <url>%2FDebris-20190530%2F2019%2F05%2F30%2F</url>
    <content type="text"><![CDATA[Problem fixed Conda 修改 channel 123456nano ~/.condrcsource ~/.condrcconda config --add channels xxxxconda config --remove channels xxxx## example: conda config --remove channels 'intel' Conda 保存于环境保存与重建 12conda env export &gt; environment.yamlpip freeze &gt; requirement.txt 1conda env create -f environment.yaml SSH,SCP穿越跳板机 直接编辑 ~/.ssh/config 文件, 增加ProxyCommand选项 12345678910Host gateway HostName gatewayhost User gateway_userHost target.machine #主机别名，也可写成目标服务器IP，可使用通配符，如：Host 10.208.* HostName target.machine #目标机域名或IP地址 User targetuser #SSH用户名 Port 22 #SSH端口 ProxyCommand ssh -q -W %h:%p gateway IdentityFile ~/.ssh/id_rsa #登陆跳板机的私钥所在位置，如默认位置可不用显示指定 用ssh-keygen在本机生成private key and public key 1ssh-keygen ## in local host copy the public key to authorized_keys in gateway and target.machine 123cat ~/.ssh/id_rsa.pub ## in local hostnano ~/.ssh/authorized_keys ## in gateway and target.machine, add the content got above 现在，只需要通过下面这样简单的语句登陆远程计算机： 1ssh target.machine 还可以直接SCP过去，跳板机完全透明： 1scp ToCopy.txt target.machine:~ 使用 command 直接跳到远程计算机 1ssh -o ProxyCommand="ssh -q -W %h:%p user@jumphost" lmx@target.machine 拷贝文件到远程计算机 1scp -o ProxyCommand="ssh -q -W %h:%p user@jumphost" lmx@target.machine:~/rdsAgent . 在远程计算机执行命令 1ssh -o "ProxyCommand ssh -q -W %h:%p user@jumphost" lmx@target.machine 'ip a' 本地配置多个 ssh key 为github 生成 ssh key 1ssh-keygen -t rsa -C "your_mail@example.com" -f github_rsa 为gitlab 生成 ssh key 1ssh-keygen -t rsa -C "your_mail@example.com" -f gitlab_rsa 修改.ssh/config 1234567891011# github.comHost github.comHostName github.comPreferredAuthentications publickeyIdentityFile ~/.ssh/github_rsa# gitlab.company.comHost gitlab.company.comHostName gitlab.company.comPreferredAuthentications publickeyIdentityFile ~/.ssh/company_rsa 如果需要代理，给github设置proxy 12git config --global http.proxy 'socks5://127.0.0.1:1080'git config --global https.proxy 'socks5://127.0.0.1:1080' 12345678// edit ~/.ssh/config add the lines blowhost github.com hostname ssh.github.com user git port 443 PreferredAuthentications publickey IdentityFile ~/.ssh/id_rsa_zrc proxycommand socat - PROXY:&lt;Ip&gt;:%h:%p,proxyport=&lt;Port&gt; Test 1ssh -T git@github.com Skills 对象的深浅拷贝 123456789tmp = []all_pos = []for i in range(100): tmp.append(i) if len(tmp) % 10 == 0: all_pos.append(tmp) #print(id(tmp) == id(all_pos[-1])) # True tmp[:] = [] ## 清空当前对象print(all_pos) # [[],[],[]] 123456789tmp = []all_pos = []for i in range(100): tmp.append(i) if len(tmp) % 10 == 0: all_pos.append(tmp) #print(id(tmp) == id(all_pos[-1])) # True tmp = [] ## 生成新的对象print(all_pos) # [[ 1,2,3...],[11,12,...],]]]></content>
      <categories>
        <category>Debris</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Using more sophisticated images with Convolutional Neural Networks]]></title>
    <url>%2FUsing-more-sophisticated-images-with-Convolutional-Neural-Networks%2F2019%2F05%2F30%2F</url>
    <content type="text"><![CDATA[$("#ipynb").load( function() { console.log($("#ipynb").contents().find("body").find("#notebook")); document.getElementById('ipynb').height=$("#ipynb").contents().find("#notebook").height()+100; })]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Project</tag>
        <tag>Computer Vision</tag>
        <tag>Convolutional Neural Networks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Debris 20190529]]></title>
    <url>%2FDebris-20190529%2F2019%2F05%2F29%2F</url>
    <content type="text"><![CDATA[Problem fixed Set http proxy for package control change the user setting of package control add some channels use the http proxy check the shadowsocks's HTTP proxy listen address and port add the HTTP proxy listen address and port to the user setting file 1234567"channels":[ "http://cst.stu.126.net/u/json/cms/channel_v3.json", "https://raw.githubusercontent.com/wilon/sublime/master/download/channel_v3.json"],"http_proxy": "127.0.0.1:1087","https_proxy": "127.0.0.1:1087", Skills Use the sublime text3 to connect the remote server open the package control and downlad the SFTP right click the local folder in sublime text3 to map it to remote folder setting the config file which had been created above Gist and sublime text3 integration open the package control and downlad the Gist get the GitHub Token 1curl -v -u zhangruochi -X POST https://api.github.com/authorizations --data &#123;"\"scopes\":[\"gist\"], \"note\": \"SublimeText 2/3 Gist plugin\”&#125;” add the token to the user setting of Gist in Sublime Text 1&#123;"token":xxxxxx&#125;]]></content>
      <categories>
        <category>Debris</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Sequential Logic]]></title>
    <url>%2FSequential-Logic%2F2019%2F05%2F27%2F</url>
    <content type="text"><![CDATA[Sequential Logic Combinational chips compute functions that depend solely on combinations of their input values. These relatively simple chips provide many important processing functions (like the ALU), but they cannot maintain state. Since computers must be able to not only compute values but also store and recall values, they must be equipped with memory elements that can preserve data over time. These memory elements are built from sequential chips. Flip-Flop the DFF has a clock input that continuously changes according to the master clock’s signal. 1-bit input, 1-bit output Thegateoutputsitspreviousinput: \[out(t)=in(t-1)\] Implementation: a gate that can flip between two stable states: remembering 0, or remembering 1 Gates that feature this behavior are called data flip-flops. 1-bit register A single-bit register, which we call Bit, or binary cell, is designed to store a single bit of information (0 or 1). The chip interface consists of an input pin that carries a data bit; a load pin that enables the cell for writes; an output pin that emits the current state of the cell read/write behavior Read: To read the contents of a register, we simply probe its output. Write: To write a new data value d into a register, we put d in the in input and assert (set to 1) the load input. In the next clock cycle, the register commits to the new data value, and its output starts emitting d. 12345678910111213141516/** * 1-bit register: * If load[t] == 1 then out[t+1] = in[t] * else out does not change (out[t+1] = out[t]) */CHIP Bit &#123; IN in, load; OUT out; PARTS: // Put your code here: Mux(a=dout,b=in, sel=load, out=out1); DFF(in=out1,out=dout,out=out);&#125; Multi-bit register (also known as “register”) A w-bit register can be created from an array of w 1-bit registers. 1234567891011121314151617181920212223242526272829/** * 16-bit register: * If load[t] == 1 then out[t+1] = in[t] * else out does not change */CHIP Register &#123; IN in[16], load; OUT out[16]; PARTS: // Put your code here: Bit(in=in[0],load=load,out=out[0]); Bit(in=in[1],load=load,out=out[1]); Bit(in=in[2],load=load,out=out[2]); Bit(in=in[3],load=load,out=out[3]); Bit(in=in[4],load=load,out=out[4]); Bit(in=in[5],load=load,out=out[5]); Bit(in=in[6],load=load,out=out[6]); Bit(in=in[7],load=load,out=out[7]); Bit(in=in[8],load=load,out=out[8]); Bit(in=in[9],load=load,out=out[9]); Bit(in=in[10],load=load,out=out[10]); Bit(in=in[11],load=load,out=out[11]); Bit(in=in[12],load=load,out=out[12]); Bit(in=in[13],load=load,out=out[13]); Bit(in=in[14],load=load,out=out[14]); Bit(in=in[15],load=load,out=out[15]);&#125; Random Access Memory (RAM) Architecture A sequence of n addressable registers, with addresses 0 to n-1 The number of registers (n) and the width of each register (w) are called the memory’s size and width Address width \[k = log_2 n\] To read Register i: set address = i probe out To set Register i to v: set address = i set in = v set load = 1 1234567891011121314151617181920212223/** * Memory of 8 registers, each 16 bit-wide. Out holds the value * stored at the memory location specified by address. If load=1, then * the in value is loaded into the memory location specified by address * (the loaded value will be emitted to out after the next time step.) */CHIP RAM8 &#123; IN in[16], load, address[3]; OUT out[16]; PARTS: DMux8Way(in=load,sel=address,a=load0,b=load1,c=load2,d=load3,e=load4,f=load5,g=load6,h=load7); Register(in=in,load=load0,out=out0); Register(in=in,load=load1,out=out1); Register(in=in,load=load2,out=out2); Register(in=in,load=load3,out=out3); Register(in=in,load=load4,out=out4); Register(in=in,load=load5,out=out5); Register(in=in,load=load6,out=out6); Register(in=in,load=load7,out=out7); Mux8Way16(a=out0,b=out1,c=out2,d=out3,e=out4,f=out5,g=out6,h=out7,sel=address,out=out);&#125; Program Counter The computer must keep track of which instruction should be fetched and executed next This control mechanism can be realized by a register called Program Counter The PC contains the address of the instruction that will be fetched and executed next The PC is designed to support three possible control operations: Reset: fetch the first instruction (PC = 0) Next: fetch the next instruction (PC++) Goto: fetch instruction n(PC = n) 123456789101112131415161718192021/** * A 16-bit counter with load and reset control bits. * if (reset[t] == 1) out[t+1] = 0 * else if (load[t] == 1) out[t+1] = in[t] * else if (inc[t] == 1) out[t+1] = out[t] + 1 (integer addition) * else out[t+1] = out[t] */CHIP PC &#123; IN in[16],load,inc,reset; OUT out[16]; PARTS: // Put your code here: Inc16(in=out5,out=out1); Mux16(a=out5,b=out1,sel=inc,out=out2); Mux16(a=out2,b=in,sel=load,out=out3); Mux16(a=out3,b=false,sel=reset,out=out4); Register(in=out4,load=true,out=out5,out=out);&#125;]]></content>
      <categories>
        <category>Hardware Architecture</category>
      </categories>
      <tags>
        <tag>Nand2Tetris</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Horses or Humans with Validation]]></title>
    <url>%2FHorses-or-Humans-with-Validation%2F2019%2F05%2F23%2F</url>
    <content type="text"><![CDATA[$("#ipynb").load( function() { console.log($("#ipynb").contents().find("body").find("#notebook")); document.getElementById('ipynb').height=$("#ipynb").contents().find("#notebook").height()+100; })]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Project</tag>
        <tag>Computer Vision</tag>
        <tag>Convolutional Neural Networks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Exploring how Convolutions and Pooling work]]></title>
    <url>%2FExploring-how-Convolutions-and-Pooling-work%2F2019%2F05%2F23%2F</url>
    <content type="text"><![CDATA[$("#ipynb").load( function() { console.log($("#ipynb").contents().find("body").find("#notebook")); document.getElementById('ipynb').height=$("#ipynb").contents().find("#notebook").height()+100; })]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Project</tag>
        <tag>Computer Vision</tag>
        <tag>Convolutional Neural Networks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Improving Computer Vision Accuracy using Convolutions]]></title>
    <url>%2FImproving-Computer-Vision-Accuracy-using-Convolutions%2F2019%2F05%2F23%2F</url>
    <content type="text"><![CDATA[$("#ipynb").load( function() { console.log($("#ipynb").contents().find("body").find("#notebook")); document.getElementById('ipynb').height=$("#ipynb").contents().find("#notebook").height()+100; })]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Project</tag>
        <tag>Computer Vision</tag>
        <tag>Convolutional Neural Networks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Beyond Hello World, A Computer Vision Example]]></title>
    <url>%2FBeyond-Hello-World-A-Computer-Vision-Example%2F2019%2F05%2F22%2F</url>
    <content type="text"><![CDATA[$("#ipynb").load( function() { console.log($("#ipynb").contents().find("body").find("#notebook")); document.getElementById('ipynb').height=$("#ipynb").contents().find("#notebook").height()+100; })]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Project</tag>
        <tag>Computer Vision</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[The Hello World of Deep Learning]]></title>
    <url>%2FThe-Hello-World-of-Deep-Learning%2F2019%2F05%2F21%2F</url>
    <content type="text"><![CDATA[$("#ipynb").load( function() { console.log($("#ipynb").contents().find("body").find("#notebook")); document.getElementById('ipynb').height=$("#ipynb").contents().find("#notebook").height()+100; })]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Project</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Boolean Arithmetic]]></title>
    <url>%2FBoolean-Arithmetic%2F2019%2F05%2F21%2F</url>
    <content type="text"><![CDATA[Table of Contents Boolean Arithmetic Binary numbers Addition Building an Adder Half adder Full adder Multi-bit Adder Negative numbers Arithmetic Logic Unit Von Neumann Architecture The Hack ALU Boolean Arithmetic Binary numbers Representing numbers \[b_{n}b_{n-1}b_{n-2}\cdots b_{1}b_{0}\] Binary to Decimal \[ \sum_{i=0}^{n}b_{i} * 2^{i}\] Maximum value represented by k bits \[1+2+4+8+\cdots +2^{k-1} = 2^{k}-1\] Decimal to Binary 以十进制的数除以所要转换的进制数,把每次除得的余数保留,所得的商数继续除以进制数,直到余数为0时止. 如把100转换成八进制: 1234100/8=12...412/8=1.....41/8=0......1#把相应的余数从低向高顺着写出来,如上的为144,此即为100的八进制表示形式. 如100转换为十六进制: 12345678910111213100/16=6....4 6/16=0......6``` - 如100转换为二进制: ```BASH100/2=50....050/2=25.....025/2=12.....112/2=6......06/2=3.......03/2=1.......11/2=0.......1#所以100的二进制表示形式为1100100; Addition Building an Adder Half adder: adds two bits Full adder: adds three bits Adder: adds two integers Half adder 123456789101112131415/** * Computes the sum of two bits. */CHIP HalfAdder &#123; IN a, b; // 1-bit inputs OUT sum, // Right bit of a + b carry; // Left bit of a + b PARTS: // Put you code here: Xor(a=a,b=b,out=sum); And(a=a,b=b,out=carry);&#125; Full adder 12345678910111213141516 /** * Computes the sum of three bits. */CHIP FullAdder &#123; IN a, b, c; // 1-bit inputs OUT sum, // Right bit of a + b + c carry; // Left bit of a + b + c PARTS: // Put you code here: HalfAdder(a=a,b=b,sum=sum1,carry=carry1); HalfAdder(a=c,b=sum1,sum=sum,carry=carry2); Or(a=carry1,b=carry2,out=carry); &#125; Multi-bit Adder 12345678910111213141516171819202122232425262728/** * Adds two 16-bit values. * The most significant carry bit is ignored. */CHIP Add16 &#123; IN a[16], b[16]; OUT out[16]; PARTS: // Put you code here: HalfAdder(a=a[0],b=b[0],sum=out[0],carry=carry1); FullAdder(a=a[1],b=b[1],c=carry1,sum=out[1],carry=carry2); FullAdder(a=a[2],b=b[2],c=carry2,sum=out[2],carry=carry3); FullAdder(a=a[3],b=b[3],c=carry3,sum=out[3],carry=carry4); FullAdder(a=a[4],b=b[4],c=carry4,sum=out[4],carry=carry5); FullAdder(a=a[5],b=b[5],c=carry5,sum=out[5],carry=carry6); FullAdder(a=a[6],b=b[6],c=carry6,sum=out[6],carry=carry7); FullAdder(a=a[7],b=b[7],c=carry7,sum=out[7],carry=carry8); FullAdder(a=a[8],b=b[8],c=carry8,sum=out[8],carry=carry9); FullAdder(a=a[9],b=b[9],c=carry9,sum=out[9],carry=carry10); FullAdder(a=a[10],b=b[10],c=carry10,sum=out[10],carry=carry11); FullAdder(a=a[11],b=b[11],c=carry11,sum=out[11],carry=carry12); FullAdder(a=a[12],b=b[12],c=carry12,sum=out[12],carry=carry13); FullAdder(a=a[13],b=b[13],c=carry13,sum=out[13],carry=carry14); FullAdder(a=a[14],b=b[14],c=carry14,sum=out[14],carry=carry15); FullAdder(a=a[15],b=b[15],c=carry15,sum=out[15],carry=carry16);&#125; Negative numbers Possible Solution: use a sign bit Use the left-most bit to represent the sign, -/+; Use the remaining bits to represent a positive number 123456789101112131415160000-----00001-----10010-----20011-----30100-----40101-----50110-----60111-----71000-----(-0)1001-----(-1)1010-----(-2)1011-----(-3)1100-----(-4)1101-----(-5)1110-----(-6)1111-----(-7) Complications: - different representation of 0 and -0 - x + (-x) != 0 - more complication Two's Complement &gt; Represent the negative number \(-x\) using the positive number \(2^n - x\) Computing \(-x\) Input: x Output: -x (in two's complement) Idea: \[2^{n} - x = 1 + (2^{n} - 1) - x\] \(2^{n} - 1 = 11111111_{2}\) \(11111111_{2} - x\) means flip all the bits of x Arithmetic Logic Unit Von Neumann Architecture The Hack ALU !(ALU.png) The ALU computes a function on the two inputs, and outputs the result \(f\): one out of a family of pre-defined arithmetic and logical functions Arithmetic functions: integer addition, multiplication, division,... logical functions: And, Or, Xor, ... Which functions should the ALU perform? two control bits 12if (out == 0) then zr = 1, else zr = 0 if(out&lt;0) thenng=1,else ng=0 Example 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970/** * The ALU (Arithmetic Logic Unit). * Computes one of the following functions: * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y, * x+1, y+1, x-1, y-1, x&amp;y, x|y on two 16-bit inputs, * according to 6 input bits denoted zx,nx,zy,ny,f,no. * In addition, the ALU computes two 1-bit outputs: * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0; * if the ALU output &lt; 0, ng is set to 1; otherwise ng is set to 0. */// Implementation: the ALU logic manipulates the x and y inputs// and operates on the resulting values, as follows:// if (zx == 1) set x = 0 // 16-bit constant// if (nx == 1) set x = !x // bitwise not// if (zy == 1) set y = 0 // 16-bit constant// if (ny == 1) set y = !y // bitwise not// if (f == 1) set out = x + y // integer 2&apos;s complement addition// if (f == 0) set out = x &amp; y // bitwise and// if (no == 1) set out = !out // bitwise not// if (out == 0) set zr = 1// if (out &lt; 0) set ng = 1CHIP ALU &#123; IN x[16], y[16], // 16-bit inputs zx, // zero the x input? nx, // negate the x input? zy, // zero the y input? ny, // negate the y input? f, // compute out = x + y (if 1) or x &amp; y (if 0) no; // negate the out output? OUT out[16], // 16-bit output zr, // 1 if (out == 0), 0 otherwise ng; // 1 if (out &lt; 0), 0 otherwise PARTS: // Put you code here: // if (zx==1) set x = 0 Mux16(a=x,b=false,sel=zx,out=zxout); // if (zy==1) set y = 0 Mux16(a=y,b=false,sel=zy,out=zyout); // if (nx==1) set x = ~x // if (ny==1) set y = ~y Not16(in=zxout,out=notx); Not16(in=zyout,out=noty); Mux16(a=zxout,b=notx,sel=nx,out=nxout); Mux16(a=zyout,b=noty,sel=ny,out=nyout); // if (f==1) set out = x + y // if (f==0) set out = x &amp; y Add16(a=nxout,b=nyout,out=addout); And16(a=nxout,b=nyout,out=andout); Mux16(a=andout,b=addout,sel=f,out=fout); // if (no==1) set out = ~out // 1 if (out&lt;0), 0 otherwise Not16(in=fout,out=nfout); Mux16(a=fout,b=nfout,sel=no,out=out,out[0..7]=zr1,out[8..15]=zr2,out[15]=ng); // 1 if (out==0), 0 otherwise Or8Way(in=zr1,out=or1); Or8Way(in=zr2,out=or2); Or(a=or1,b=or2,out=or3); Not(in=or3,out=zr);&#125;]]></content>
      <categories>
        <category>Hardware Architecture</category>
      </categories>
      <tags>
        <tag>Nand2Tetris</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Boolean Logic Project]]></title>
    <url>%2FBoolean-Logic-Project%2F2019%2F05%2F21%2F</url>
    <content type="text"><![CDATA[Objective: Implement all the logic gates presented in the chapter. The only building blocks that you can use are primitive Nand gates and the composite gates that you will gradually build on top of them. Resources: The only tool that you need for this project is the hardware simulator supplied with the book. All the chips should be implemented in the HDL language specified in appendix A. For each one of the chips mentioned in the chapter, we provide a skeletal .hdl program (text file) with a missing implementation part. In addition, for each chip we provide a .tst script file that tells the hardware simulator how to test it, along with the correct output file that this script should generate, called .cmp or ‘‘compare file.’’ Your job is to complete the missing implementation parts of the supplied .hdl programs. Contract: When loaded into the hardware simulator, your chip design (modified .hdl program), tested on the supplied .tst file, should produce the outputs listed in the supplied .cmp file. If that is not the case, the simulator will let you know. Tips: The Nand gate is considered primitive and thus there is no need to build it: Whenever you use Nand in one of your HDL programs, the simulator will auto- matically invoke its built-in tools/builtIn/Nand.hdl implementation. We rec- ommend implementing the other gates in this project in the order in which they appear in the chapter. However, since the builtIn directory features working ver- sions of all the chips described in the book, you can always use these chips without defining them first: The simulator will automatically use their built-in versions. For example, consider the skeletal Mux.hdl program supplied in this project. Suppose that for one reason or another you did not complete this program’s im- plementation, but you still want to use Mux gates as internal parts in other chip designs. This is not a problem, thanks to the following convention. If our simula- tor fails to find a Mux.hdl file in the current directory, it automatically invokes a built-in Mux implementation, pre-supplied with the simulator’s software. This built- in implementation—a Java class stored in the builtIn directory—has the same in- terface and functionality as those of the Mux gate described in the book. Thus, if you want the simulator to ignore one or more of your chip implementations, simply move the corresponding .hdl files out of the current directory. Steps: We recommend proceeding in the following order: The hardware simulator needed for this project is available in the tools directory of the book’s software suite. Read appendix A, sections A1–A6 only. Go through the hardware simulator tutorial, parts I, II, and III only. Build and simulate all the chips specified in the projects/01 directory. 123456789101112131415/** * And gate: * out = 1 if (a == 1 and b == 1) * 0 otherwise */CHIP And &#123; IN a, b; OUT out; PARTS: // Put your code here: Nand(a=a,b=b,out=nandout); Not(in=nandout,out=out);&#125; 1234567891011121314151617181920212223242526272829/** * 16-bit bitwise And: * for i = 0..15: out[i] = (a[i] and b[i]) */CHIP And16 &#123; IN a[16], b[16]; OUT out[16]; PARTS: // Put your code here: And(a=a[0],b=b[0],out=out[0]); And(a=a[1],b=b[1],out=out[1]); And(a=a[2],b=b[2],out=out[2]); And(a=a[3],b=b[3],out=out[3]); And(a=a[4],b=b[4],out=out[4]); And(a=a[5],b=b[5],out=out[5]); And(a=a[6],b=b[6],out=out[6]); And(a=a[7],b=b[7],out=out[7]); And(a=a[8],b=b[8],out=out[8]); And(a=a[9],b=b[9],out=out[9]); And(a=a[10],b=b[10],out=out[10]); And(a=a[11],b=b[11],out=out[11]); And(a=a[12],b=b[12],out=out[12]); And(a=a[13],b=b[13],out=out[13]); And(a=a[14],b=b[14],out=out[14]); And(a=a[15],b=b[15],out=out[15]);&#125; 12345678910111213141516/** * Demultiplexor: * &#123;a, b&#125; = &#123;in, 0&#125; if sel == 0 * &#123;0, in&#125; if sel == 1 */CHIP DMux &#123; IN in, sel; OUT a, b; PARTS: // Put your code here: And(a=in,b=sel,out=b); Not(in=sel,out=notsel); And(a=in,b=notsel,out=a);&#125; 123456789101112131415161718/** * 4-way demultiplexor: * &#123;a, b, c, d&#125; = &#123;in, 0, 0, 0&#125; if sel == 00 * &#123;0, in, 0, 0&#125; if sel == 01 * &#123;0, 0, in, 0&#125; if sel == 10 * &#123;0, 0, 0, in&#125; if sel == 11 */CHIP DMux4Way &#123; IN in, sel[2]; OUT a, b, c, d; PARTS: // Put your code here: DMux(in=in,sel=sel[1],a=out1,b=out2); DMux(in=out1,sel=sel[0],a=a,b=b); DMux(in=out2,sel=sel[0],a=c,b=d);&#125; 123456789101112131415161718/** * 8-way demultiplexor: * &#123;a, b, c, d, e, f, g, h&#125; = &#123;in, 0, 0, 0, 0, 0, 0, 0&#125; if sel == 000 * &#123;0, in, 0, 0, 0, 0, 0, 0&#125; if sel == 001 * etc. * &#123;0, 0, 0, 0, 0, 0, 0, in&#125; if sel == 111 */CHIP DMux8Way &#123; IN in, sel[3]; OUT a, b, c, d, e, f, g, h; PARTS: // Put your code here: DMux(in=in,sel=sel[2],a=out1,b=out2); DMux4Way(in=out1,sel=sel[0..1],a=a,b=b,c=c,d=d); DMux4Way(in=out2,sel=sel[0..1],a=e,b=f,c=g,d=h);&#125; 1234567891011121314151617/** * Multiplexor: * out = a if sel == 0 * b otherwise */CHIP Mux &#123; IN a, b, sel; OUT out; PARTS: // Put your code here: Not(in=sel,out=notsel); And(a=a,b=notsel,out=anotsel); And(a=b,b=sel,out=bsel); Or(a=anotsel,b=bsel,out=out);&#125; 1234567891011121314151617181920212223242526272829/** * 16-bit multiplexor: * for i = 0..15 out[i] = a[i] if sel == 0 * b[i] if sel == 1 */CHIP Mux16 &#123; IN a[16], b[16], sel; OUT out[16]; PARTS: // Put your code here: Mux(a=a[0],b=b[0],sel=sel,out=out[0]); Mux(a=a[1],b=b[1],sel=sel,out=out[1]); Mux(a=a[2],b=b[2],sel=sel,out=out[2]); Mux(a=a[3],b=b[3],sel=sel,out=out[3]); Mux(a=a[4],b=b[4],sel=sel,out=out[4]); Mux(a=a[5],b=b[5],sel=sel,out=out[5]); Mux(a=a[6],b=b[6],sel=sel,out=out[6]); Mux(a=a[7],b=b[7],sel=sel,out=out[7]); Mux(a=a[8],b=b[8],sel=sel,out=out[8]); Mux(a=a[9],b=b[9],sel=sel,out=out[9]); Mux(a=a[10],b=b[10],sel=sel,out=out[10]); Mux(a=a[11],b=b[11],sel=sel,out=out[11]); Mux(a=a[12],b=b[12],sel=sel,out=out[12]); Mux(a=a[13],b=b[13],sel=sel,out=out[13]); Mux(a=a[14],b=b[14],sel=sel,out=out[14]); Mux(a=a[15],b=b[15],sel=sel,out=out[15]);&#125; 123456789101112131415161718/** * 4-way 16-bit multiplexor: * out = a if sel == 00 * b if sel == 01 * c if sel == 10 * d if sel == 11 */CHIP Mux4Way16 &#123; IN a[16], b[16], c[16], d[16], sel[2]; OUT out[16]; PARTS: // Put your code here: Mux16(a=a,b=b,sel=sel[0],out=out1); Mux16(a=c,b=d,sel=sel[0],out=out2); Mux16(a=out1,b=out2,sel=sel[1],out=out);&#125; 1234567891011121314151617181920/** * 8-way 16-bit multiplexor: * out = a if sel == 000 * b if sel == 001 * etc. * h if sel == 111 */CHIP Mux8Way16 &#123; IN a[16], b[16], c[16], d[16], e[16], f[16], g[16], h[16], sel[3]; OUT out[16]; PARTS: // Put your code here: Mux4Way16(a=a,b=b,c=c,d=d,sel=sel[0..1],out=out1); Mux4Way16(a=e,b=f,c=g,d=h,sel=sel[0..1],out=out2); Mux16(a=out1,b=out2,sel=sel[2],out=out);&#125; 12345678910111213/** * Not gate: * out = not in */CHIP Not &#123; IN in; OUT out; PARTS: // Put your code here: Nand(a=in,b=in,out=out);&#125; 12345678910111213141516171819202122232425262728/** * 16-bit Not: * for i=0..15: out[i] = not in[i] */CHIP Not16 &#123; IN in[16]; OUT out[16]; PARTS: // Put your code here: Not(in=in[0],out=out[0]); Not(in=in[1],out=out[1]); Not(in=in[2],out=out[2]); Not(in=in[3],out=out[3]); Not(in=in[4],out=out[4]); Not(in=in[5],out=out[5]); Not(in=in[6],out=out[6]); Not(in=in[7],out=out[7]); Not(in=in[8],out=out[8]); Not(in=in[9],out=out[9]); Not(in=in[10],out=out[10]); Not(in=in[11],out=out[11]); Not(in=in[12],out=out[12]); Not(in=in[13],out=out[13]); Not(in=in[14],out=out[14]); Not(in=in[15],out=out[15]);&#125; 12345678910111213141516/** * Or gate: * out = 1 if (a == 1 or b == 1) * 0 otherwise */CHIP Or &#123; IN a, b; OUT out; PARTS: // Put your code here: Nand(a=a,b=a,out=outa); Nand(a=b,b=b,out=outb); Nand(a=outa,b=outb,out=out);&#125; 12345678910111213141516171819202122232425262728/** * 16-bit bitwise Or: * for i = 0..15 out[i] = (a[i] or b[i]) */CHIP Or16 &#123; IN a[16], b[16]; OUT out[16]; PARTS: // Put your code here: Or(a=a[0],b=b[0],out=out[0]); Or(a=a[1],b=b[1],out=out[1]); Or(a=a[2],b=b[2],out=out[2]); Or(a=a[3],b=b[3],out=out[3]); Or(a=a[4],b=b[4],out=out[4]); Or(a=a[5],b=b[5],out=out[5]); Or(a=a[6],b=b[6],out=out[6]); Or(a=a[7],b=b[7],out=out[7]); Or(a=a[8],b=b[8],out=out[8]); Or(a=a[9],b=b[9],out=out[9]); Or(a=a[10],b=b[10],out=out[10]); Or(a=a[11],b=b[11],out=out[11]); Or(a=a[12],b=b[12],out=out[12]); Or(a=a[13],b=b[13],out=out[13]); Or(a=a[14],b=b[14],out=out[14]); Or(a=a[15],b=b[15],out=out[15]);&#125; 12345678910111213141516171819/** * 8-way Or: * out = (in[0] or in[1] or ... or in[7]) */CHIP Or8Way &#123; IN in[8]; OUT out; PARTS: // Put your code here: Or(a=in[0],b=in[1],out=or1); Or(a=in[2],b=in[3],out=or2); Or(a=in[4],b=in[5],out=or3); Or(a=in[6],b=in[7],out=or4); Or(a=or1,b=or2,out=or5); Or(a=or3,b=or4,out=or6); Or(a=or5,b=or6,out=out);&#125; 1234567891011121314151617/** * Exclusive-or gate: * out = not (a == b) */CHIP Xor &#123; IN a, b; OUT out; PARTS: // Put your code here: Not(in=a,out=nota); Not(in=b,out=notb); And(a=nota,b=b,out=t1); And(a=a,b=notb,out=t2); Or(a=t1,b=t2,out=out);&#125;]]></content>
      <tags>
        <tag>Nand2Tetris</tag>
        <tag>Project</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Boolean Functions and Gate Logic]]></title>
    <url>%2FBoolean-Functions-and-Gate-Logic%2F2019%2F05%2F20%2F</url>
    <content type="text"><![CDATA[Boolean Logic Every digital device is made from the same building blocks: Elementary logic gates; Nand can build all the other logic gate from itself; Boolean Algebra Boolean algebra deals with Boolean (also called binary) values that are typically labeled true/false, 1/0, yes/no, on/off, and so forth A Boolean function is a function that operates on binary inputs and returns binary outputs. Infinitely many Boolean expressions vs. only a finite number of Boolean functions Infinitely many Boolean expressions are equivalent to the same Boolean function Boolean values are the two logic constants True, and False. for n independent Boolean variables, each taking one particular Boolean value, there are \(2^n\) different possible combinations. A Boolean function has to assign one Boolean value to each one of these combinations. This brings the number of different possible Boolean functions of n variables to a total of \(2^{2^n}\) Boolean Identities two ways to represent the boolean functions Truth Table Representation: The simplest way to specify a Boolean function is to enumerate all the possible values of the function’s input variables, along with the function’s output for each set of inputs. Boolean Expressions: a Boolean function can also be specified using Boolean operations over its input variables \[f(x,y,z) = (x + y) * \bar(z)\] Canonical Representation Every Boolean function, no matter how complex, can be expressed using three Boolean operators only: And, Or, and Not. example: for the figure above, we can get \[f(x,y,z) = \bar(x)y\bar(z) + x\bar(y)\bar(z) + xy\bar(z)\] find all the expressions euqual to 1, use "and" conbines the bits together and use "or" conbine all the expressions. Gate Logic A gate is a physical device that implements a Boolean function. If a Boolean function f operates on n variables and returns m binary results (in all our examples so far, m was 1), the gate that implements f will have n input pins and m output pins. Each one of the operations And, Or, and Not can be constructed from it, and it alone (e.g., x Or y = (x Nand x) Nand (y Nand y). And since every Boolean function can be constructed from And, Or, and Not operations using the canonical representation method, it follows that every Boolean function can be constructed from Nand operations alone Primitive and Composite Gates a primitive gate (see figure 1.3) can be viewed as a black box device that implements an elementary logical operation in one way or another—we don’t care how. Computer scientists can be content with the abstract notions of Boolean algebra and gate logic, trusting that someone else (the physicists and electrical engineers—bless their souls) will figure out how to actually realize them in hardware We see that any given logic gate can be viewed from two different perspectives: external and internal. As the blow picture a example. The right-hand side of figure gives the gate’s internal architecture, or implementation, whereas the left side shows only the gate interface. The gate implementation will realize its stated interface, in one way or another. Multi-Bit Versions of Basic Gates Computer hardware is typically designed to operate on multi-bit arrays called buses. or example, a basic requirement of a 32-bit computer is to be able to compute (bit-wise) an And function on two given 32-bit buses. To implement this operation, we can build an array of 32 binary And gates, each operating separately on a pair of bits. In order to enclose all this logic in one package, we can encapsulate the gates array in a single chip interface consisting of two 32-bit input buses and one 32-bit output bus. example, Multi-Bit Not An n-bit Not gate applies the Boolean operation Not to every one of the bits in its n-bit input bus: 123Chip name: Not16Inputs: in[16] // a 16-bit pin Outputs: out[16]Function: For i=0..15 out[i]=Not(in[i]). Multi-Way Versions of Basic Gates any 2-way logic gates that accept two inputs have natural generalization to multi- way variants that accept an arbitrary number of inputs. example, Multi-Way Or An n-way Or gate outputs 1 when at least one of its n bit inputs is 1, and 0 otherwise. Here is the 8-way variant of this gate: 1234Chip name: Or8WayInputs: in[8]Outputs: outFunction: out=Or(in[0],in[1],...,in[7]). Multiplexor A multiplexor is a three-input gate that uses one of the inputs, called selection bit, to select and output one of the other two inputs, called data bits. Thus, a better name for this device might have been selector. 1234Chip name: XorInputs: a, bOutputs: outFunction: If a=/b then out=1 else out=0. Demultiplexor A demultiplexor performs the opposite function of a multiplexor: It takes a single input and channels it to one of two possible outputs according to a selector bit that specifies which output to chose. 1234Chip name: DMuxInputs: in, selOutputs: a, bFunction: If sel=0 then &#123;a=in, b=0&#125; else &#123;a=0, b=in&#125;. Hardware Description Language (HDL) Thus, using HDL, one can completely plan, debug, and optimize the entire chip before a single penny is spent on actual production. When the HDL program is deemed complete, that is, when the performance of the simulated chip satisfies the client who ordered it, the HDL program can become the blueprint from which many copies of the physical chip can be stamped in silicon. An HDL definition of a chip consists of a header section and a parts section. The header section specifies the chip interface, namely the chip name and the names of its input and output pins. The parts section describes the names and topol- ogy of all the lower-level parts (other chips) from which this chip is constructed HDL implementation of a Xor gate. Hardware Simulation Since HDL is a hardware construction language, the process of writing and debug- ging HDL programs is quite similar to software development. The main difference is that instead of writing code in a language like Java, we write it in HDL, and instead of using a compiler to translate and test the code, we use a hardware simulator. The hardware simulator is a computer program that knows how to parse and interpret HDL code, turn it into an executable representation, and test it according to the specifications of a given test script]]></content>
      <categories>
        <category>Hardware Architecture</category>
      </categories>
      <tags>
        <tag>Nand2Tetris</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Domain Driven Design Introduction]]></title>
    <url>%2FDomain-Driven-Design-Introduction%2F2019%2F05%2F16%2F</url>
    <content type="text"><![CDATA[DDD把模型分成四层 UI 层，负责界面展示。 应用层（Application Layer），负责业务流程。 领域层（Domain Layer），负责领域逻辑 基建层（Infrastructure Layer），负责提供基建。 DDD 把业务分成 UI、应用、领域、基建四层，其核心是高度提纯、通用、少变化的领域层，是谓“领域驱动”； 领域层中包含领域模型，捕捉领域逻辑，暴露出接口用于操作领域模型，这些接口提供的操作可以确保领域是自洽的； 领域模型既是业务描述，又是代码实现的结构设计，二者的结合点在于公开出来的界面、接口。 实体(Entity) &amp; 值对象(Value Object) 实体与面向对象中的概念类似，在这里再次提出是因为它是领域模型的基本元素。在领域模型中，实体应该具有唯一的标识符，从设计的一开始就应该考虑实体，决定是否建立一个实体也是十分重要的。 值对象和我们说的编程中数值类型的变量是不同的，它仅仅是没有唯一标识符的实体，比如有两个收获地址的信息完全一样，那它就是值对象，并不是实体。值对象在领域模型中是可以被共享的，他们应该是“不可变的”（只读的），当有其他地方需要用到值对象时，可以将它的副本作为参数传递。 服务(Services) 当我们在分析某一领域时，一直在尝试如何将信息转化为领域模型，但并非所有的点我们都能用Model来涵盖。对象应当有属性，状态和行为，但有时领域中有一些行为是无法映射到具体的对象中的，我们也不能强行将其放入在某一个模型对象中，而将其单独作为一个方法又没有地方，此时就需要服务. 服务具有以下特点： 服务中体现的行为一定是不属于任何实体和值对象的，但它属于领域模型的范围内 服务的行为一定涉及其他多个对象 服务的操作是无状态的 Reference from https://blog.csdn.net/xuxuerlai/article/details/81318565]]></content>
      <categories>
        <category>Software Architecture</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Gaussian Mixed Model Introduction]]></title>
    <url>%2FGaussian-Mixed-Model-Introduction%2F2019%2F05%2F15%2F</url>
    <content type="text"><![CDATA[Gaussian Mixture Models(高斯混合模型) 高斯模型即正态分布，高斯混合模型就是几个正态分布的叠加，每一个正态分布代表一个类别，所以和K-means很像，高斯混合模型也可以用来做无监督的聚类分析。 基本步骤 即通过模型来计算数据的期望值。通过更新参数μ和σ来让期望值最大化。这个过程可以不断迭代直到两次迭代中生成的参数变化非常小为止。该过程和k-means的算法训练过程很相似（k-means不断更新类中心来让结果最大化），只不过在这里的高斯模型中，我们需要同时更新两个参数：分布的均值和标准差。 猜测有几个类别，既有几个高斯分布; 针对每一个高斯分布，随机给其均值和方差进行赋值; 针对每一个样本，计算其在各个高斯分布下的概率; \[f(x)=\frac{1 }{\sqrt\times\sigma}e^{\frac{1}{2}(\frac{x-\mu}{\sigma})^2}\] 针对每一个高斯分布，每一个样本对该高斯分布的贡献可以由其下的概率表示，如概率大则表示贡献大，反之亦然。这样把样本对该高斯分布的贡献作为权重来计算加权的均值和方差。之后替代其原本的均值和方差; 重复3~4直到每一个高斯分布的均值和方差收敛; 当高斯混合模型的特征值维数大于一维时，在计算加权的时候还要计算协方差，即要考虑不同维度之间的相互关联. GMM VS KMeans KMeans 将样本分到离其最近的聚类中心所在的簇，也就是每个样本数据属于某簇的概率非零即1。对比KMeans，高斯混合的不同之处在于，样本点属于某簇的概率不是非零即1的，而是属于不同簇有不同的概率值。高斯混合模型假设所有样本点是由K个高斯分布混合而成的。 Implementing the EM(Expectation Maximization) algorithm for Gaussian mixture models Log likelihood We provide a function to calculate log likelihood for mixture of Gaussians. The log likelihood quantifies the probability of observing a given set of data under a particular setting of the parameters in our model. We will use this to assess convergence of our EM algorithm; specifically, we will keep looping through EM update steps until the log likehood ceases to increase at a certain rate. 123456789101112131415161718192021222324252627def log_sum_exp(Z): """ Compute log(\sum_i exp(Z_i)) for some array Z.""" return np.max(Z) + np.log(np.sum(np.exp(Z - np.max(Z))))def loglikelihood(data, weights, means, covs): """ Compute the loglikelihood of the data for a Gaussian mixture model with the given parameters. """ num_clusters = len(means) num_dim = len(data[0]) ll = 0 for d in data: Z = np.zeros(num_clusters) for k in range(num_clusters): # Compute (x-mu)^T * Sigma^&#123;-1&#125; * (x-mu) delta = np.array(d) - means[k] exponent_term = np.dot(delta.T, np.dot(np.linalg.inv(covs[k]), delta)) # Compute loglikelihood contribution for this data point and this cluster Z[k] += np.log(weights[k]) Z[k] -= 1/2. * (num_dim * np.log(2*np.pi) + np.log(np.linalg.det(covs[k])) + exponent_term) # Increment loglikelihood contribution of this data point across all clusters ll += log_sum_exp(Z) return ll E-step: assign cluster responsibilities, given current parameters The first step in the EM algorithm is to compute cluster responsibilities. Let \(r_{ik}\) denote the responsibility of cluster \(k\) for data point \(i\). Note that cluster responsibilities are fractional parts: Cluster responsibilities for a single data point \(i\) should sum to 1. \[ r_{i1} + r_{i2} + \ldots + r_{iK} = 1 \] To figure how much a cluster is responsible for a given data point, we compute the likelihood of the data point under the particular cluster assignment, multiplied by the weight of the cluster. For data point \(i\) and cluster \(k\), this quantity is \[ r_{ik} \propto \pi_k N(x_i | \mu_k, \Sigma_k) \] where \(N(x_i | \mu_k, \Sigma_k)\) is the Gaussian distribution for cluster \(k\) (with mean \(\mu_k\) and covariance \(\Sigma_k\)). We used \(\propto\) because the quantity \(N(x_i | \mu_k, \Sigma_k)\) is not yet the responsibility we want. To ensure that all responsibilities over each data point add up to 1, we add the normalization constant in the denominator: \[ r_{ik} = \frac{\pi_k N(x_i | \mu_k, \Sigma_k)}{\sum_{k=1}^{K} \pi_k N(x_i | \mu_k, \Sigma_k)}. \] Complete the following function that computes \(r_{ik}\) for all data points \(i\) and clusters \(k\). 123456789101112131415161718def compute_responsibilities(data, weights, means, covariances): '''E-step: compute responsibilities, given the current parameters''' num_data = len(data) num_clusters = len(means) resp = np.zeros((num_data, num_clusters)) # Update resp matrix so that resp[i,k] is the responsibility of cluster k for data point i. # Hint: To compute likelihood of seeing data point i given cluster k, use multivariate_normal.pdf. for i in range(num_data): for k in range(num_clusters): # YOUR CODE HERE resp[i, k] = weights[k]*multivariate_normal.pdf(data[i], mean=means[k], cov=covariances[k]) # Add up responsibilities over each data point and normalize row_sums = resp.sum(axis=1)[:, np.newaxis] resp = resp / row_sums return resp M-step: Update parameters, given current cluster responsibilities Once the cluster responsibilities are computed, we update the parameters (weights, means, and covariances) associated with the clusters. Computing soft counts. Before updating the parameters, we first compute what is known as "soft counts". The soft count of a cluster is the sum of all cluster responsibilities for that cluster: \[ N^{\text{soft}}_k = r_{1k} + r_{2k} + \ldots + r_{Nk} = \sum_{i=1}^{N} r_{ik} \] where we loop over data points. Note that, unlike k-means, we must loop over every single data point in the dataset. This is because all clusters are represented in all data points, to a varying degree. We provide the function for computing the soft counts: 12345def compute_soft_counts(resp): # Compute the total responsibility assigned to each cluster, which will be useful when # implementing M-steps below. In the lectures this is called N^&#123;soft&#125; counts = np.sum(resp, axis=0) return counts Updating weights. The cluster weights show us how much each cluster is represented over all data points. The weight of cluster \(k\) is given by the ratio of the soft count \(N^{\text{soft}}_{k}\) to the total number of data points \(N\): \[ \hat{\pi}_k = \frac{N^{\text{soft}}_{k}}{N} \] Notice that \(N\) is equal to the sum over the soft counts \(N^{\text{soft}}_{k}\) of all clusters. Complete the following function: 1234567891011def compute_weights(counts): num_clusters = len(counts) weights = [0.] * num_clusters for k in range(num_clusters): # Update the weight for cluster k using the M-step update rule for the cluster weight, \hat&#123;\pi&#125;_k. # HINT: compute # of data points by summing soft counts. # YOUR CODE HERE weights[k] = counts[k] / np.sum(counts) return weights Updating means. The mean of each cluster is set to the weighted average of all data points, weighted by the cluster responsibilities: \[ \hat{\mu}_k = \frac{1}{N_k^{\text{soft}}} \sum_{i=1}^N r_{ik}x_i \] Complete the following function: 12345678910111213141516def compute_means(data, resp, counts): num_clusters = len(counts) num_data = len(data) means = [np.zeros(len(data[0]))] * num_clusters for k in range(num_clusters): # Update means for cluster k using the M-step update rule for the mean variables. # This will assign the variable means[k] to be our estimate for \hat&#123;\mu&#125;_k. weighted_sum = 0. for i in range(num_data): # YOUR CODE HERE weighted_sum += data[i] * resp[i][k] # YOUR CODE HERE means[k] = weighted_sum / counts[k] return means Updating covariances. The covariance of each cluster is set to the weighted average of all outer products, weighted by the cluster responsibilities: \[ \hat{\Sigma}_k = \frac{1}{N^{\text{soft}}_k}\sum_{i=1}^N r_{ik} (x_i - \hat{\mu}_k)(x_i - \hat{\mu}_k)^T \] The "outer product" in this context refers to the matrix product \[ (x_i - \hat{\mu}_k)(x_i - \hat{\mu}_k)^T. \] Letting \((x_i - \hat{\mu}_k)\) to be \(d \times 1\) column vector, this product is a \(d \times d\) matrix. Taking the weighted average of all outer products gives us the covariance matrix, which is also \(d \times d\). Complete the following function: 1234567891011121314151617def compute_covariances(data, resp, counts, means): num_clusters = len(counts) num_dim = len(data[0]) num_data = len(data) covariances = [np.zeros((num_dim,num_dim))] * num_clusters for k in range(num_clusters): # Update covariances for cluster k using the M-step update rule for covariance variables. # This will assign the variable covariances[k] to be the estimate for \hat&#123;\Sigma&#125;_k. weighted_sum = np.zeros((num_dim, num_dim)) for i in range(num_data): # YOUR CODE HERE (Hint: Use np.outer on the data[i] and this cluster's mean) weighted_sum += resp[i][k]*np.outer(data[i] - means[k], data[i] - means[k]) # YOUR CODE HERE covariances[k] = weighted_sum / counts[k] return covariances The EM algorithm 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960# SOLUTIONdef EM(data, init_means, init_covariances, init_weights, maxiter=1000, thresh=1e-4): # Make copies of initial parameters, which we will update during each iteration means = init_means[:] covariances = init_covariances[:] weights = init_weights[:] # Infer dimensions of dataset and the number of clusters num_data = len(data) num_dim = len(data[0]) num_clusters = len(means) # Initialize some useful variables resp = np.zeros((num_data, num_clusters)) ll = loglikelihood(data, weights, means, covariances) ll_trace = [ll] for it in range(maxiter): if it % 5 == 0: print("Iteration %s" % it) # E-step: compute responsibilities resp = compute_responsibilities(data, weights, means, covariances) # M-step # Compute the total responsibility assigned to each cluster, which will be useful when # implementing M-steps below. In the lectures this is called N^&#123;soft&#125; counts = compute_soft_counts(resp) # Update the weight for cluster k using the M-step update rule for the cluster weight, \hat&#123;\pi&#125;_k. # YOUR CODE HERE weights = compute_weights(counts) # Update means for cluster k using the M-step update rule for the mean variables. # This will assign the variable means[k] to be our estimate for \hat&#123;\mu&#125;_k. # YOUR CODE HERE means = compute_means(data, resp, counts) # Update covariances for cluster k using the M-step update rule for covariance variables. # This will assign the variable covariances[k] to be the estimate for \hat&#123;\Sigma&#125;_k. # YOUR CODE HERE covariances = compute_covariances(data, resp, counts, means) # Compute the loglikelihood at this iteration # YOUR CODE HERE ll_latest = loglikelihood(data, weights, means, covariances) ll_trace.append(ll_latest) # Check for convergence in log-likelihood and store if (ll_latest - ll) &lt; thresh and ll_latest &gt; -np.inf: break ll = ll_latest if it % 5 != 0: print("Iteration %s" % it) out = &#123;'weights': weights, 'means': means, 'covs': covariances, 'loglik': ll_trace, 'resp': resp&#125; return out Reference from https://zhuanlan.zhihu.com/p/29538307 Reference from https://zhuanlan.zhihu.com/p/31103654 Reference from coursera course Machine Learning Foundation from University of Washington]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Machine Learning Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[KMeans Improving]]></title>
    <url>%2FKMeans-Improving%2F2019%2F05%2F15%2F</url>
    <content type="text"><![CDATA[KMeans++ Algorithm Smart initialization: Choose first cluster center uniformly at random from data points For each obs x, compute distance d(x) to nearest cluster center Choose new cluster center from amongst data points, with probability of x being chosen proportional to d(x)2 Repeat Steps 2 and 3 until k centers have been chosen Run the standard KMeans with centers got above Assign observations to closest cluster center Revise cluster centers as mean of assigned observations Repeat 1.+2. until convergence KMeans++ visualized Elkan K-Means Algorithm (距离计算优化) 在传统的K-Means算法中，我们在每轮迭代时，要计算所有的样本点到所有的质心的距离，这样会比较的耗时。那么，对于距离的计算有没有能够简化的地方呢？elkan K-Means算法就是从这块入手加以改进。它的目标是减少不必要的距离的计算。那么哪些距离不需要计算呢？ elkan K-Means利用了两边之和大于等于第三边,以及两边之差小于第三边的三角形性质，来减少距离的计算。 对于一个样本点\(x\)和两个质心\(\mu_1\),\(\mu_2\).如果我们预先计算出了这两个质心之间的距离\(D(\mu_1,\mu_2)\),则如果计算发现 \(2D(x,\mu_1) \leq D(\mu_1,\mu_2)\), 我们可以得知 \(2D(x,\mu_1) \leq D(x,\mu_2)\),此时我们不需要再计算\(D(x,\mu_2)\),也就是说省了一步距离计算。 对于一个样本点\(x\)和两个质心\(\mu_1\),\(\mu_2\),我们可以得到 \(D(x,\mu_2) &gt; max\lbrace 0, D(x,\mu_1) - D(\mu_1,\mu_2)\rbrace\) MapReduce for scaling KMeans What is MapReduce Scaling up KMeans via MapReduce Classify: Assign observations to closest cluster center \[z_i = \mathop{\arg\min}_{j}\Vert \mu_{j} - x_{j} \Vert^2_2\] For each data point, given \((\mu_{j}, x_{i} )\), \(emit(z_i, x_i)\) Recenter: Revise cluster centers as mean of assigned observations \[\mu_j = \frac{1}{n_j}\sum\limits_{i:z_i = k} x_i\] Reduce: Average over all points in cluster \(j(z_j = k)\)]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Machine Learning Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[KNN with KDtree]]></title>
    <url>%2FKNN-with-KDtree%2F2019%2F05%2F14%2F</url>
    <content type="text"><![CDATA[What is KDtree kd-tree或者k维树是计算机科学中使用的一种数据结构，用来组织表示k维空间中点集合。它是一种带有其他约束条件的二分查找树。kd-tree对于区间和搜索十分有用。 对于构造kd-tree二叉树有两个关键的问题：1）每次对子空间的划分时，怎样确定在哪个维度上进行划分；2）在某个维度上进行划分时，怎样确保在这一维度上的划分得到的两个子集合的数量尽量相等，即左子树和右子树中的结点个数尽量相等。 Works well in low-medium dimensions Unlikely to have any data points close to query point Once nearby point is found, the search radius is likely to intersect many hypercubes in at least one dim Not many nodes can be pruned Can show under some conditions that you visit at least \(2^{d}\) nodes 每次对子空间的划分时，怎样进行划分？ max invarince 最简单的方法就是轮着来，即如果这次选择了在第i维上进行数据划分，那下一次就在第j(j≠i)维上进行划分，例如：j = (i mod k) + 1。想象一下我们切豆腐时，先是竖着切一刀，切成两半后，再横着来一刀，就得到了很小的方块豆腐。 可是“轮着来”的方法是否可以很好地解决问题呢？再次想象一下，我们现在要切的是一根木条，按照“轮着来”的方法先是竖着切一刀，木条一分为二，干净利落，接下来就是再横着切一刀，这个时候就有点考验刀法了，如果木条的直径（横截面）较大，还可以下手，如果直径较小，就没法往下切了。因此，如果K维数据的分布像上面的豆腐一样，“轮着来”的切分方法是可以奏效，但是如果K维度上数据的分布像木条一样，“轮着来”就不好用了。因此，还需要想想其他的切法。 如果一个K维数据集合的分布像木条一样，那就是说明这K维数据在木条较长方向代表的维度上，这些数据的分布散得比较开，数学上来说，就是这些数据在该维度上的方差（invariance）比较大，换句话说，正因为这些数据在该维度上分散的比较开，我们就更容易在这个维度上将它们划分开，因此，这就引出了我们选择维度的另一种方法：最大方差法（max invarince），即每次我们选择维度进行划分时，都选择具有最大方差维度。 如何确保划分的左子树和右子树中的节点个数尽量相等。 use medium as pivot 假设当前我们按照最大方差法选择了在维度i上进行K维数据集S的划分，此时我们需要在维度i上将K维数据集合S划分为两个子集合A和B，子集合A中的数据在维度i上的值都小于子集合B中。首先考虑最简单的划分法，即选择第一个数作为比较对象（即划分轴，pivot），S中剩余的其他所有K维数据都跟该pivot在维度i上进行比较，如果小于pivot则划A集合，大于则划入B集合。把A集合和B集合分别看做是左子树和右子树，那么我们在构造一个二叉树的时候，当然是希望它是一棵尽量平衡的树，即左右子树中的结点个数相差不大。而A集合和B集合中数据的个数显然跟pivot值有关，因为它们是跟pivot比较后才被划分到相应的集合中去的。好了，现在的问题就是确定pivot了。给定一个数组，怎样才能得到两个子数组，这两个数组包含的元素个数差不多且其中一个子数组中的元素值都小于另一个子数组呢？方法很简单，找到数组中的中值（即中位数，median），然后将数组中所有元素与中值进行比较，就可以得到上述两个子数组。同样，在维度i上进行划分时，pivot就选择该维度i上所有数据的中值，这样得到的两个子集合数据个数就基本相同了。 构建好一棵Kd-Tree后，下面给出利用Kd-Tree进行最近邻查找的算法： 将查询数据Q从根结点开始，按照Q与各个结点的比较结果向下访问Kd-Tree，直至达到叶子结点。 其中Q与结点的比较指的是将Q对应于结点中的k维度上的值与m进行比较，若Q(k) &lt; m，则访问左子树，否则访问右子树。达到叶子结点时，计算Q与叶子结点上保存的数据之间的距离，记录下最小距离对应的数据点，记为当前“最近邻点”Pcur和最小距离Dcur。 进行回溯（Backtracking）操作，该操作是为了找到离Q更近的“最近邻点”。即判断未被访问过的分支里是否还有离Q更近的点，它们之间的距离小于Dcur。 如果Q与其父结点下的未被访问过的分支之间的距离小于Dcur，则认为该分支中存在离P更近的数据，进入该结点，进行（1）步骤一样的查找过程，如果找到更近的数据点，则更新为当前的“最近邻点”Pcur，并更新Dcur。 如果Q与其父结点下的未被访问过的分支之间的距离大于Dcur，则说明该分支内不存在与Q更近的点。 回溯的判断过程是从下往上进行的，直到回溯到根结点时已经不存在与P更近的分支为止。 Reference from https://blog.csdn.net/qq_34510308/article/details/60151260 123456789101112import numpy as npimport picklerng = np.random.RandomState(0)X = rng.random_sample((10, 3)) # 10 points in 3 dimensionstree = KDTree(X, leaf_size=2) s = pickle.dumps(tree) tree_copy = pickle.loads(s) dist, ind = tree_copy.query(X[:1], k=3) print(ind) # indices of 3 closest neighbors# [0 3 1]print(dist) # distances to 3 closest neighbors# [ 0. 0.19662693 0.29473397] screen shoot to explain How to use KDtree in KNN Start by exploring leaf node containing query point Compute distance to each other point at leaf node Backtrack and try other branch at each node visited 4.png Moving away from exact NN search what we want? 1. Approximate neighbor finding(Don’t find exact neighbor, but that’s okay for many applications) 2. Focus on methods that provide good probabilistic guarantees on approximation LSH as an alternative to KD-trees Draw h random lines Compute score for each point under each line and translate to binary index Use h-bit binary vector per data point as bin index Create hash table For each query point x, search bin(x),then neighboring bins until time limit]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Machine Learning Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AdaBoost Summary]]></title>
    <url>%2FAdaBoost-Summary%2F2019%2F05%2F14%2F</url>
    <content type="text"><![CDATA[initialize equal weights for all samples \[\alpha_{i} = \frac{1}{N}\] Repeat t = 1,...,T learn \(f_{t}(x)\) with data weights \(\alpha_{i}\) compute weighted error \[weighted_error_{t} = \sum_{i=1}^{m}\alpha_{i}I(y_{i} \neq f_{t}(x_{i}))\] compute coefficient \[\hat{w_{t}} = \frac{1}{2}\ln(\frac{1 - weighted_error_{t} }{weighted_error_{t}})\] \(\hat{w_{t}}\) is higher when weighted_error is larger recomputed weights \(\alpha_{i}\) \[\alpha_{i} = \begin{equation} \left\{ \begin{array}{lr} \alpha_{i}e^{-\hat{w_{t}}} &amp; \\ \alpha_{i}e^{\hat{w{t}}} &amp; \end{array} \right. \end{equation} \] Normalize weights \(\alpha_{i}\) if \(x_{i}\) often mistake, weight \(\alpha_{i}\) gets very large if \(x_{i}\) often correct, weight \(\alpha_{i}\) gets very small \[\alpha_{i} = \frac{\alpha_{i}}{\sum_{i}^{m}\alpha_{i}}\] screen shoot]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Machine Learning Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TFserving Introdcution]]></title>
    <url>%2FTFserving-Introdcution%2F2019%2F05%2F13%2F</url>
    <content type="text"><![CDATA[TensorFlow SavedModel SaveModel与语言无关 Tensorflow Serving server部署模型必须选择SavedModel格式。 一个比较完整的SavedModel模型包含以下内容： 123456assets/assets.extra/variables/ variables.data variables.indexsaved_model.pb saved_model.pb是MetaGraphDef，它包含图形结构。variables文件夹保存训练所习得的权重。assets文件夹可以添加可能需要的外部文件，assets.extra是一个库可以添加其特定assets的地方。 MetaGraph是一个数据流图，加上其相关的变量、assets和签名。MetaGraphDef是MetaGraph的Protocol Buffer表示。 保存 1234tf.saved_model.simple_save(sess, "./model", inputs=&#123;"myInput": x&#125;, outputs=&#123;"myOutput": y&#125;) 加载 123with tf.Session(graph=tf.Graph()) as sess: tf.saved_model.loader.load(sess, ["serve"], "./model") graph = tf.get_default_graph() Tensorflow Serving Key Concepts: Servables: the underlying objects that clients use to perform computation. Typical servables include: TensorFlow SavedModelBundle(tensorflow::Session) lookup table for embedding/vocabulary lookups. Loaders: manage a servable's life cycle. Sources: plugin modules that originate servables. Managers: Sounds like they basically just work with the 3 previous things. They load, serve, and unload servables. Core: All of the above wrapped into a single object. Screen Shot 2019-05-13 at 10.16.36.png Servables Servables 是 TensorFlow Serving 中最核心的抽象，是客户端用于执行计算 (例如：查找或推断) 的底层对象。 Servables Streams 一个 Servables Stream 是多个版本的 Servable 的序列，其按照版本号的递增排序。 Loaders Loaders 管理一个 Servable 的生命周期。Loader API 提供了一个独立于特定机器学习算法，数据和用户产品用例的通用基础平台。具体说，Loaders 将一个 Servable 的加载和卸载的 API 进行了标准化。 Sources Sources 是用于查找和提供 Servables 的插件模块，每个 Source 提供零个或多个 Servable Streams。对于每个 Servable Stream，一个 Source 为一个 Loader 实例对不同版本的载入提供支持。(一个 Source 通常是由零个或多个 SourceAdapters 链接在一起，其中最后一项将触发 Loaders。) Managers Managers 维护 Servables 的整个生命周期，包括： 加载 Servables 为 Servables 提供服务 卸载 Servables Core TensorFlow Serving Core 通过 TensorFlow Serving APIs 管理 Servales 的如下方面： 生命周期 (lifecycle) 度量信息 (metrics) 启动过程主要是创建ServerCore对象, 并启动grpc server和http server. ServerCore对象可以认为是系统中枢, 模型的维护, 服务请求的处理都是由他完成. ServerCore通过BasicManager管理所有的model(多版本号), 并查处模型已经提供预测、分类、回归请求. ServerCore启动的时候创建AspiredVersionManager, AspiredVersionManager会启动定时任务(线程), 用于处理AspiredVersionRequest消息, 其实就是模型的加载、卸载. 启动的时候ServerCore还会根据模型配置创建文件系统扫描任务, 定时扫描模型文件目录并进行相应的处理 http rest服务启动后, 会监听http post请求, 通过serverCore查找对应的模型版本, 获取对应的已加载的模型, 进行运算并返回结果. gRPC服务与 http rest服务类似. example 例如：一个 Source 请求一个包含最近更新的权重的 TensorFlow 计算图，其权重信息存储在硬盘的一个文件中。 Source 检测到一个新版本的模型权重，其会创建一个包含指向磁盘中模型数据指针的 Loader。 Source 通知 Dynamic Manager 此时的 Aspired Version。 Dynamic Manager 应用 Version Policy 并决定载入新版本。 Dynamic Manager 通知 Loader 目前有充足的内存，Loader 利用新的权重实例化 Tensorflow 计算图。 一个客户端请求最新版本的模型，Dynamic Manager 返回一个最新版本 Servable 的处理器。 Functions Support distributed TensorFlow models Support the general RESTful/HTTP APIs Support inference with accelerated GPU If you want to use GPU, try with the docker image with GPU tag and put cuda files in /usr/cuda_files/. 1234export CUDA_SO="-v /usr/cuda_files/:/usr/cuda_files/"export DEVICES=$(\ls /dev/nvidia* | xargs -I&#123;&#125; echo '--device &#123;&#125;:&#123;&#125;')export LIBRARY_ENV="-e LD_LIBRARY_PATH=/usr/local/cuda/extras/CUPTI/lib64:/usr/local/nvidia/lib:/usr/local/nvidia/lib64:/usr/cuda_files"docker run -it -p 8500:8500 $CUDA_SO $DEVICES $LIBRARY_ENV tobegit3hub/simple_tensorflow_serving:latest-gpu You can set session config and gpu options in command-line parameter or the model config file. 1simple_tensorflow_serving --model_base_path="./models/tensorflow_template_application_model" --session_config='&#123;"log_device_placement": true, "allow_soft_placement": ˓→true, "allow_growth": true, "per_process_gpu_memory_fraction": 0.5&#125;' 123456789&#123;"model_config_list": [&#123;"name": "default","base_path": "./models/tensorflow_template_application_model/", "platform": "tensorflow","session_config": &#123;"log_device_placement": true, "allow_soft_placement": true, "allow_growth": true, "per_process_gpu_memory_fraction": 0.5&#125; &#125;] &#125; Here is the benchmark of CPU and GPU inference and y-coordinate is the latency(the lower the better). Support curl and other command-line tools Support clients in any programming language Support code-gen client by models without coding You can generate the test json data for the online models. 1curl http://localhost:8500/v1/models/default/gen_json Or generate clients in different languages(Bash, Python, Golang, JavaScript etc.) for your model without writing any code. 1curl http://localhost:8500/v1/models/default/gen_client?language=python &gt; client.py Support inference with raw file for image models 1curl -X POST -F 'image=@./images/mew.jpg' -F "model_version=1" 127.0.0.1:8500 Support statistical metrics for verbose requests Support serving multiple models/multiple version at the same time 1234567891011121314151617 model_config_list:&#123; config:&#123; name:&quot;model1&quot;, base_path:&quot;/models/multiModel/model1&quot;, model_platform:&quot;tensorflow&quot; &#125;, config:&#123; name:&quot;model2&quot;, base_path:&quot;/models/multiModel/model2&quot;, model_platform:&quot;tensorflow&quot; &#125;, config:&#123; name:&quot;model3&quot;, base_path:&quot;/models/multiModel/model3&quot;, model_platform:&quot;tensorflow&quot; &#125; &#125; 12docker run -p 8501:8501 --mount type=bind,source=/home/jerry/tmp/multiModel/,target=/models/multiModel \ -t tensorflow/serving --model_config_file=/models/multiModel/models.config 123456789101112131415import requests import numpy as np SERVER_URL = 'http://localhost:8501/v1/models/model3:predict' #注意SERVER_URL中的‘model3’是config文件中定义的模型name,不是文件夹名称def prediction(): predict_request='&#123;"instances":%s&#125;' % str([[[10]*7]*7]) print(predict_request) response = requests.post(SERVER_URL, data=predict_request) print(response) prediction = response.json()['predictions'][0] print(prediction) if __name__ == "__main__": prediction() 请求指定模型版本 1SERVER_URL = &apos;http://localhost:8501/v1/models/model1/versions/100001:predict&apos; Support dynamic online and offline(hot plugin) for model versions tfserving支持模型的Hot Plug，上述容器运行起来之后，如果在宿主机的 /home/jerry/tmp/multiModel/model1/ 文件夹下新增模型文件如100003/，tfserving会自动加载新模型；同样如果移除现有模型，tfserving也会自动卸载模型。 Support loading new custom op for TensorFlow models If your models rely on new TensorFlow custom op, you can run the server while loading the so files. 1simple_tensorflow_serving --model_base_path="./model/" --custom_op_paths="./foo_op/" Support secure authentication with configurable basic auth For enterprises, we can enable basic auth for all the APIs and any anonymous request is denied. 1./server.py --model_base_path="./models/tensorflow_template_application_model/" -- enable_auth=True --auth_username="admin" --auth_password="admin" If you are using the Web dashboard, just type your certification. If you are using clients, give the username and password within the request. 1curl -u admin:admin -H "Content-Type: application/json" -X POST -d '&#123;"data": &#123;"keys": ˓→[[11.0], [2.0]], "features": [[1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, ˓→1]]&#125;&#125;' http://127.0.0.1:8500 Support multiple models of TensorFlow/MXNet/PyTorch/Caffe2/CNTK/ONNX/H2o/Scikit-learn/XGBoost/PMML 1simple_tensorflow_serving --model_base_path="./models/tensorflow_template_application_ model" --model_platform="tensorflow" 1simple_tensorflow_serving --model_base_path="./models/mxnet_mlp/mx_mlp" --model_ platform="mxnet" Extra support for image models uploading the image files in web browser 1simple_tensorflow_serving --model_base_path="./deep_image_model" using form-data accept the base64 strings as input, then decode and resize the tensor for the required model input. 12345678910import requestsimport base64def main():image_string = base64.urlsafe_b64encode(open("./test.png", "rb").read()) endpoint = "http://127.0.0.1:8500" json_data = &#123;"model_name": "default", "data": &#123;"images": [image_string]&#125; &#125; result = requests.post(endpoint, json=json_data) print(result.json())if __name__ == "__main__": main() To conclude, its seems that the serialization of Tensorflow Protobuff is less “consistent”, time wise, then the one to plain JSON, though it is more efficient size wise. I would test these on more complex objects, but for now, it seems that if you have simple big inputs then gRPC would be much faster. Having more complex objects as inputs (such as arrays and matrix), up until a certain size, REST with JSON should be faster (as we have seen in the MNIST example tested locally). However, the requests themselves (and probably their processing on the server side) are much faster using gRPC, so bandwidth should be put into the equation as the inputs size grows. APIs gRPC gRPC使用ProtoBuf来定义服务，ProtoBuf是由Google开发的一种数据序列化协议，性能出众，得到了广泛的应用; 支持多种语言; 基于HTTP/2标准设计。 RESTful API TensorFlow ModelServr 除了提供 gRPC APIs 以外，还支持 RESTful APIs 用于 TensorFlow 的分类，回归和预测模型 1234POST http://host:port/&lt;URI&gt;:&lt;VERB&gt;URI: /v1/models/$&#123;MODEL_NAME&#125;[/versions/$&#123;MODEL_VERSION&#125;]VERB: classify|regress|predict example 12http://host:port/v1/models/iris:classifyhttp://host:port/v1/models/mnist/versions/314:predict classify 和 regress APIs 的请求内容必须为如下格式的 JSON 对象 1234567891011121314151617181920212223242526272829&#123; // Optional: serving signature to use. // If unspecifed default serving signature is used. "signature_name": &lt;string&gt;, // Optional: Common context shared by all examples. // Features that appear here MUST NOT appear in examples (below). "context": &#123; "&lt;feature_name3&gt;": &lt;value&gt;|&lt;list&gt; "&lt;feature_name4&gt;": &lt;value&gt;|&lt;list&gt; &#125;, // List of Example objects "examples": [ &#123; // Example 1 "&lt;feature_name1&gt;": &lt;value&gt;|&lt;list&gt;, "&lt;feature_name2&gt;": &lt;value&gt;|&lt;list&gt;, ... &#125;, &#123; // Example 2 "&lt;feature_name1&gt;": &lt;value&gt;|&lt;list&gt;, "&lt;feature_name2&gt;": &lt;value&gt;|&lt;list&gt;, ... &#125; ... ]&#125; Response format 12345678910&#123; "result": [ // List of class label/score pairs for first Example (in request) [ [&lt;label1&gt;, &lt;score1&gt;], [&lt;label2&gt;, &lt;score2&gt;], ... ], // List of class label/score pairs for next Example (in request) [ [&lt;label1&gt;, &lt;score1&gt;], [&lt;label2&gt;, &lt;score2&gt;], ... ], ... ]&#125; Encoding binary values JSON 使用 UTF-8 格式编码。如果输入特征或张量的值为二进制 (例如：图像)，则你需要将数据利用 Base64 进行编码，并将其以 b64 为键封装在 JSON 对象中： 1&#123; &quot;b64&quot;: &lt;base64 encoded string&gt; &#125; 12345678910111213&#123; &quot;signature_name&quot;: &quot;classify_objects&quot;, &quot;examples&quot;: [ &#123; &quot;image&quot;: &#123; &quot;b64&quot;: &quot;aW1hZ2UgYnl0ZXM=&quot; &#125;, &quot;caption&quot;: &quot;seaside&quot; &#125;, &#123; &quot;image&quot;: &#123; &quot;b64&quot;: &quot;YXdlc29tZSBpbWFnZSBieXRlcw==&quot; &#125;, &quot;caption&quot;: &quot;mountains&quot; &#125; ]&#125; 一个包含图片 image (二进制数据) 和标题 caption 特征的分类请求示例如下： 12345678910111213&#123; "signature_name": "classify_objects", "examples": [ &#123; "image": &#123; "b64": "aW1hZ2UgYnl0ZXM=" &#125;, "caption": "seaside" &#125;, &#123; "image": &#123; "b64": "YXdlc29tZSBpbWFnZSBieXRlcw==" &#125;, "caption": "mountains" &#125; ]&#125; TensorFlow Serving Benchmark MNIST (235MB image) Running a simple benchmark on my machine (Macbook pro) with 1000 sync requests and a batch size of 100 images in each request had some surprising results. The inference rate was in favor of the REST API, tough, as expected, the payload of requests was twice the size when using REST. I run this test several times and got the same results. REST Inference rate: 1,729 img/sec Network: 620 MB gRPC Inference rate: 1,239 img/sec Network: 320 MB Removing the serializations part from the gRPC, and sending the same prepared request over and over again indeed had increased the inference rate dramatically to 25,961 img/sec when using gRPC. Doing the same, and sending the same already serialized REST request (JSON) have increased the inference rate as well, but not as much, to 7,680 img/sec. Giving the advantage to using gRPC by a factor of ~3.5. This suggests that a lot of the overhead is in the transformation of the Numpy array into a tensor Protobuff or JSON. This actually made sense when working locally as the network bandwidth is less of an issue. REST (serialized once) Inference rate: 7,680 img/sec Network: 620 MB gRPC (serialized once) Inference rate: 25,961 img/sec Network: 320 MB checking only the preparation of the requests (both gRPC and REST) have shown that when using Numpy arrays as input gRPC is little slower then REST. Using a raw PNG image (basically a string) as input, REST seems to be much slower (X6) then gRPC REST (preperation only) Image: 2,148 img/sec Numpy array: 1,090 img/sec gRPC (preperation only) Image: 14,490 img/sec Numpy array: 1,249 img/sec 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182import pickleimport numpy as npimport timeimport requestsimport subprocessimport refrom grpc.beta import implementationsimport tensorflow as tffrom tensorflow_serving.apis import predict_pb2from tensorflow_serving.apis import prediction_service_pb2# returns the network IN traffic size for a given containerdef get_network_i(container_name): command = 'docker stats --no-stream --format "table &#123;&#123;.NetIO&#125;&#125;" %s' % container_name proc = subprocess.Popen(['bash', '-c', command], stderr=subprocess.STDOUT, stdout=subprocess.PIPE)object = proc.communicate() output = object[0]return float(re.sub("[^0-9.]", "", str.split(str.split(output, "\n")[1], '/')[0]))def prepare_grpc_request(model_name, signature_name, data): request = predict_pb2.PredictRequest() request.model_spec.name = model_name request.model_spec.signature_name = signature_name request.inputs[input_name].CopyFrom( tf.contrib.util.make_tensor_proto(data, dtype=None))return requesthost = 'localhost'grpc_container_name = 'tf_serving_mnist1'rest_container_name = 'tf_serving_mnist2'grpc_port = '8500'rest_port = '8501'batch_size = 100num_of_requests = 1000model_name = 'model'signature_name = 'predict_images'input_name = 'images'image_path = "./mnist_image.pkl"with open(image_path, 'rb') as f: image = pickle.load(f)print("input shape: %s" % str(np.shape(image)))batch = np.repeat(image, batch_size, axis=0).tolist()print("creating batch. Now shape is: %s" % str(np.shape(batch)))image_cnt = num_of_requests * batch_sizeprint("total number of images to be sent: %d" % image_cnt)channel = implementations.insecure_channel(host, int(grpc_port))stub = prediction_service_pb2.beta_create_PredictionService_stub(channel)# gRPCprint("starting gRPC test...")print ("warming up....")request = prepare_grpc_request(model_name, signature_name, batch)stub.Predict(request, timeout=600)grpc_start_net = get_network_i(grpc_container_name)total_start = time.time()for _ in range(num_of_requests): request = prepare_grpc_request(model_name, signature_name, batch) response = stub.Predict(request, timeout=600)total_duration = float(time.time() - total_start)grpc_rate = image_cnt / total_durationgrpc_end_net = get_network_i(grpc_container_name)grpc_net = grpc_end_net - grpc_start_netprint("--gRPC--\n""Duration: %f secs -- requests: %d -- images: %d -- batch size: %d -- rate: %f img/sec -- net: %s"% (total_duration, num_of_requests, image_cnt, batch_size, grpc_rate, grpc_net))# RESTprint("starting REST test...")json = &#123;"signature_name": signature_name,"instances": batch&#125;print ("warming up....")req = requests.Request('post', "http://%s:%s/v1/models/model:predict" % (host, rest_port), json=json)rest_start_net = get_network_i(rest_container_name)total_start = time.time()for _ in range(num_of_requests): response = requests.post("http://%s:%s/v1/models/model:predict" % (host, rest_port), json=json)total_duration = float(time.time() - total_start)rest_rate = image_cnt / total_durationrest_end_net = get_network_i(rest_container_name)rest_net = rest_end_net - rest_start_netprint("--REST--\n""Duration: %f secs -- requests: %d -- images: %d -- batch size: %d -- rate: %f img/sec -- net: %s"% (total_duration, num_of_requests, image_cnt, batch_size, rest_rate, rest_net))print("--Summary--\n""Inference rate ratio (REST/gRPC): %f" % (rest_rate / grpc_rate)) TFS(Simple TensorFlow Serving) and TFS(TensorFlow Serving) have similar performances for different models. Vertical coordinate is inference latency(microsecond) and the less is better. For simplest model, each request only costs ~1.9 microseconds and one instance of Simple TensorFlow Serving can achieve 5000+ QPS. With larger batch size, it can inference more than 1M instances per second. Screen Shot 2019-05-13 at 13.24.15.png]]></content>
      <categories>
        <category>Tensorflow</category>
      </categories>
      <tags>
        <tag>Concept</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Overfitting in decision trees]]></title>
    <url>%2FOverfittingin-decision-trees%2F2019%2F05%2F11%2F</url>
    <content type="text"><![CDATA[Reference from course note of Machine Learning Foundation from University of Washington Principle of Occam’s razor: Simpler trees are better Among competing hypotheses, the one with fewest assumptions should be selected Early stopping for learning decision trees Limit tree depth: Stop splitting after a certain depth Classification error: Do not consider any split that does not cause a sufficient decrease in classification error Typically, add magic parameter \(\epsilon\),Stop if error doesn’t decrease by more than \(\epsilon\) Some pitfalls to this rule Very useful in practice Minimum node “size”: Do not split an intermediate node which contains too few data points Pruning: Simplify the tree after the learning algorithm terminates Simple measure of complexity of tree L(T) = number of leaf nodes Balance simplicity &amp; predictive power Desired total quality format Total cost = measure of fit + measure of complexity \[C(T) = Error(T) + \lambda L(T)\] \(\lambda = 0\): standard Decision Tree learning \(\lambda = +\inf\): root, majority classification \(\lambda = 0 - +\inf\): balance of fit and complexity Tree pruning algorithm]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Machine Learning Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Debris 20190509]]></title>
    <url>%2FDebris-20190509%2F2019%2F05%2F09%2F</url>
    <content type="text"><![CDATA[Docker deployment The Docker daemon uses the HTTP_PROXY, HTTPS_PROXY, and NO_PROXY environmental variables in its start-up environment to configure HTTP or HTTPS proxy behavior. If your compant use a proxy, you need to change the setting of proxy in docker. edit the http-proxy.conf 123nano /etc/systemd/system/docker.service.d/http-proxy.conf[Service]Environment="HTTP_PROXY=http://ip:port" edit daemon.json 12345sudo nano /etc/docker/daemon.json&#123; "registry-mirrors":["https://docker.mirrors.ustc.edu.cn","http://hub-mirror.c.163.com"]&#125; sudo systemctl daemon-reload sudo systemctl restart docker if not work check the version of docker downgrade the version to TFserving Once we have our Tensorflow or Keras based model trained, we needs to think on how to use it in, deploy it in production. we may want to Dockerize it as a micro-service, implementing a custom GRPC (or REST- or not) interface. Then deploy this to server or Kubernetes cluster and have other client micro-services calling it. Google Tensorflow Serving library helps here, to save our model to disk, and then load and serve a GRPC or RESTful interface to interact with it. TFserving.png Deploy docker environment of TFserving 1docker pull tensorflow/serving download example code 123mkdir -p /tmp/tfservingcd /tmp/tfservinggit clone https://github.com/tensorflow/serving RESTful API run TFserving 12345docker run -p 8501:8501 \ --mount type=bind,\ source=/tmp/tfserving/serving/tensorflow_serving/servables/tensorflow/testdata/saved_model_half_plus_two_cpu,\target=/models/half_plus_two \-e MODEL_NAME=half_plus_two -t tensorflow/serving &amp; run Client 12curl -d '&#123;"instances": [1.0, 2.0, 5.0]&#125;' \ -X POST http://localhost:8501/v1/models/half_plus_two:predict result 1&#123; "predictions": [2.5, 3.0, 4.5] &#125; gPRC API run a mnist model and save the model 1python3 mnist_saved_model.py models/mnist source code - rain a model - Save the model we have trained 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129 from __future__ import print_function import os import sys # This is a placeholder for a Google-internal import. import tensorflow as tf import mnist_input_data tf.app.flags.DEFINE_integer('training_iteration', 1000, 'number of training iterations.') tf.app.flags.DEFINE_integer('model_version', 1, 'version number of the model.') tf.app.flags.DEFINE_string('work_dir', '/tmp', 'Working directory.') FLAGS = tf.app.flags.FLAGS def main(_): if len(sys.argv) &lt; 2 or sys.argv[-1].startswith('-'): print('Usage: mnist_saved_model.py [--training_iteration=x] ' '[--model_version=y] export_dir') sys.exit(-1) if FLAGS.training_iteration &lt;= 0: print('Please specify a positive value for training iteration.') sys.exit(-1) if FLAGS.model_version &lt;= 0: print('Please specify a positive value for version number.') sys.exit(-1) # Train model print('Training model...') mnist = mnist_input_data.read_data_sets(FLAGS.work_dir, one_hot=True) sess = tf.InteractiveSession() serialized_tf_example = tf.placeholder(tf.string, name='tf_example') feature_configs = &#123;'x': tf.FixedLenFeature(shape=[784], dtype=tf.float32),&#125; tf_example = tf.parse_example(serialized_tf_example, feature_configs) x = tf.identity(tf_example['x'], name='x') # use tf.identity() to assign name y_ = tf.placeholder('float', shape=[None, 10]) w = tf.Variable(tf.zeros([784, 10])) b = tf.Variable(tf.zeros([10])) sess.run(tf.global_variables_initializer()) y = tf.nn.softmax(tf.matmul(x, w) + b, name='y') cross_entropy = -tf.reduce_sum(y_ * tf.log(y)) train_step = tf.train.GradientDescentOptimizer(0.01).minimize(cross_entropy) values, indices = tf.nn.top_k(y, 10) table = tf.contrib.lookup.index_to_string_table_from_tensor( tf.constant([str(i) for i in range(10)])) prediction_classes = table.lookup(tf.to_int64(indices)) for _ in range(FLAGS.training_iteration): batch = mnist.train.next_batch(50) train_step.run(feed_dict=&#123;x: batch[0], y_: batch[1]&#125;) correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1)) accuracy = tf.reduce_mean(tf.cast(correct_prediction, 'float')) print('training accuracy %g' % sess.run( accuracy, feed_dict=&#123; x: mnist.test.images, y_: mnist.test.labels &#125;)) print('Done training!') # Export model # WARNING(break-tutorial-inline-code): The following code snippet is # in-lined in tutorials, please update tutorial documents accordingly # whenever code changes. export_path_base = sys.argv[-1] export_path = os.path.join( tf.compat.as_bytes(export_path_base), tf.compat.as_bytes(str(FLAGS.model_version))) print('Exporting trained model to', export_path) builder = tf.saved_model.builder.SavedModelBuilder(export_path) # Build the signature_def_map. classification_inputs = tf.saved_model.utils.build_tensor_info( serialized_tf_example) classification_outputs_classes = tf.saved_model.utils.build_tensor_info( prediction_classes) classification_outputs_scores = tf.saved_model.utils.build_tensor_info(values) classification_signature = ( tf.saved_model.signature_def_utils.build_signature_def( inputs=&#123; tf.saved_model.signature_constants.CLASSIFY_INPUTS: classification_inputs &#125;, outputs=&#123; tf.saved_model.signature_constants.CLASSIFY_OUTPUT_CLASSES: classification_outputs_classes, tf.saved_model.signature_constants.CLASSIFY_OUTPUT_SCORES: classification_outputs_scores &#125;, method_name=tf.saved_model.signature_constants.CLASSIFY_METHOD_NAME)) tensor_info_x = tf.saved_model.utils.build_tensor_info(x) tensor_info_y = tf.saved_model.utils.build_tensor_info(y) prediction_signature = ( tf.saved_model.signature_def_utils.build_signature_def( inputs=&#123;'images': tensor_info_x&#125;, outputs=&#123;'scores': tensor_info_y&#125;, method_name=tf.saved_model.signature_constants.PREDICT_METHOD_NAME)) builder.add_meta_graph_and_variables( sess, [tf.saved_model.tag_constants.SERVING], signature_def_map=&#123; 'predict_images': prediction_signature, tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY: classification_signature, &#125;, main_op=tf.tables_initializer(), strip_default_attrs=True) builder.save() print('Done exporting!') if __name__ == '__main__': tf.app.run()``` 2. Deploy the model we have exported using TFserving```BASHdocker run -p 8500:8500 \--mount type=bind,source=$(pwd)/models/mnist,target=/models/mnist \-e MODEL_NAME=mnist -t tensorflow/serving run client 1pip3 install tensorflow-serving-api 1python3 mnist_client.py --num_tests=1000 --server=127.0.0.1:8500 result 1Inference error rate: 11.13% Client source code 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143from __future__ import print_functionimport sysimport threading# This is a placeholder for a Google-internal import.import grpcimport numpyimport tensorflow as tffrom tensorflow_serving.apis import predict_pb2from tensorflow_serving.apis import prediction_service_pb2_grpcimport mnist_input_datatf.app.flags.DEFINE_integer('concurrency', 1, 'maximum number of concurrent inference requests')tf.app.flags.DEFINE_integer('num_tests', 100, 'Number of test images')tf.app.flags.DEFINE_string('server', '', 'PredictionService host:port')tf.app.flags.DEFINE_string('work_dir', '/tmp', 'Working directory. ')FLAGS = tf.app.flags.FLAGSclass _ResultCounter(object): """Counter for the prediction results.""" def __init__(self, num_tests, concurrency): self._num_tests = num_tests self._concurrency = concurrency self._error = 0 self._done = 0 self._active = 0 self._condition = threading.Condition() def inc_error(self): with self._condition: self._error += 1 def inc_done(self): with self._condition: self._done += 1 self._condition.notify() def dec_active(self): with self._condition: self._active -= 1 self._condition.notify() def get_error_rate(self): with self._condition: while self._done != self._num_tests: self._condition.wait() return self._error / float(self._num_tests) def throttle(self): with self._condition: while self._active == self._concurrency: self._condition.wait() self._active += 1def _create_rpc_callback(label, result_counter): """Creates RPC callback function. Args: label: The correct label for the predicted example. result_counter: Counter for the prediction result. Returns: The callback function. """ def _callback(result_future): """Callback function. Calculates the statistics for the prediction result. Args: result_future: Result future of the RPC. """ exception = result_future.exception() if exception: result_counter.inc_error() print(exception) else: sys.stdout.write('.') sys.stdout.flush() response = numpy.array( result_future.result().outputs['scores'].float_val) prediction = numpy.argmax(response) if label != prediction: result_counter.inc_error() result_counter.inc_done() result_counter.dec_active() return _callbackdef do_inference(hostport, work_dir, concurrency, num_tests): """Tests PredictionService with concurrent requests. Args: hostport: Host:port address of the PredictionService. work_dir: The full path of working directory for test data set. concurrency: Maximum number of concurrent requests. num_tests: Number of test images to use. Returns: The classification error rate. Raises: IOError: An error occurred processing test data set. """ test_data_set = mnist_input_data.read_data_sets(work_dir).test channel = grpc.insecure_channel(hostport) stub = prediction_service_pb2_grpc.PredictionServiceStub(channel) result_counter = _ResultCounter(num_tests, concurrency) for _ in range(num_tests): request = predict_pb2.PredictRequest() request.model_spec.name = 'mnist' request.model_spec.signature_name = 'predict_images' image, label = test_data_set.next_batch(1) request.inputs['images'].CopyFrom( tf.contrib.util.make_tensor_proto(image[0], shape=[1, image[0].size])) result_counter.throttle() result_future = stub.Predict.future(request, 5.0) # 5 seconds result_future.add_done_callback( _create_rpc_callback(label[0], result_counter)) return result_counter.get_error_rate()def main(_): if FLAGS.num_tests &gt; 10000: print('num_tests should not be greater than 10k') return if not FLAGS.server: print('please specify server host:port') return error_rate = do_inference(FLAGS.server, FLAGS.work_dir, FLAGS.concurrency, FLAGS.num_tests) print('\nInference error rate: %s%%' % (error_rate * 100))if __name__ == '__main__': tf.app.run()]]></content>
      <categories>
        <category>Debris</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Logistic Regression and Maximum likelihood estimation]]></title>
    <url>%2FLogistic-Regression-and-Maximum-likelihood-estimation%2F2019%2F05%2F03%2F</url>
    <content type="text"><![CDATA[为什么 LR 用极大似然估计而不用最小二乘 如果用最小二乘法，目标函数就是 \[E_{w,b}=\sum_{i=1}^{m}\left ( y_{i}-\frac{1}{1+e^{-\left ( w^{T}x_{i}+b \right )}}\right )^2 \] 是非凸的，不容易求解，会得到局部最优。 如果用最大似然估计，目标函数就是对数似然函数： \[l_{w,b}=\sum_{i=1}^{m}\left ( -y_{i}\left ( w^{T}x_{i}+b \right )+ln\left ( 1+e^{w^{T}x_{i}+b} \right ) \right )\] 是关于 (w,b) 的高阶连续可导凸函数，可以方便通过一些凸优化算法求解，比如梯度下降法、牛顿法等。 LR cost function 的具体推导过程 最大化似然概率的形式: \[max \prod_{i=1}^{m}p(y_{i}|x_{i},\theta)\] 对于二分类问题有: \[p_{1}=p(y=1|x,\theta)=\frac{e^{x\theta}}{1+e^{x\theta}},y=1\] \[p_{0}=p(y=0|x,\theta)=\frac{1}{1+e^{x\theta}},y=0\] 用一个式子表示上面这个分段的函数为： \[p=p(y|x,\theta)=p_{1}^{y_{i}}\ast p_{0}^{1-y_{i}}\] 代入目标函数中，再对目标函数取对数，则目标函数变为： \[max \sum_{i=1}^{m}({y_{i}\log{p_{1}}+(1-y_{i})\log{p_{0})}}\] 如果用 \(h_{\theta}(x_{i})\) 来表示 \(p_{1}\) ，则可用 \(1-h_{\theta}(x_{i})\) 来表示 \(p_{0}\) ，再将目标函数max换成min，则目标函数变为： \[min -\frac{1}{m}\sum_{i=1}^{m}({y_{i}\log{h_{\theta}(x_{i})}+(1-y_{i})\log({1-h_{\theta}(x_{i})}))}\] Reference from https://www.zhihu.com/question/65350200]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Concept</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Maximum Likelihood Estimation]]></title>
    <url>%2FMaximum-Likelihood-Estimation%2F2019%2F05%2F03%2F</url>
    <content type="text"><![CDATA[Likelihood &amp; Maximum likelihood 在统计学中，似然函数（likelihood function，通常简写为likelihood，似然）是一个非常重要的内容，在非正式场合似然和概率（Probability）几乎是一对同义词，但是在统计学中似然和概率却是两个不同的概念。概率是在特定环境下某件事情发生的可能性，也就是结果没有产生之前依据环境所对应的参数来预测某件事情发生的可能性，比如抛硬币，抛之前我们不知道最后是哪一面朝上，但是根据硬币的性质我们可以推测任何一面朝上的可能性均为50%，这个概率只有在抛硬币之前才是有意义的，抛完硬币后的结果便是确定的；而似然刚好相反，是在确定的结果下去推测产生这个结果的可能环境（参数），还是抛硬币的例子，假设我们随机抛掷一枚硬币1,000次，结果500次人头朝上，500次数字朝上（实际情况一般不会这么理想，这里只是举个例子），我们很容易判断这是一枚标准的硬币，两面朝上的概率均为50%，这个过程就是我们运用出现的结果来判断这个事情本身的性质（参数），也就是似然。 结果和参数相互对应的时候，似然和概率在数值上是相等的，如果用\(\theta\)表示环境对应的参数，\(x\)表示结果，那么概率可以表示为: \[P(x| \theta)\] \(P(x|\theta)\)是条件概率的表示方法，\(\theta\)是前置条件，理解为在\(θ\)的前提下，事件\(x\)发生的概率，相对应的似然可以表示为: \[\ell(\theta |x)\] 可以理解为已知结果为\(x\)，参数为\(\theta\)(似然函数里\(\theta\)是变量，这里说的参数和变量是相对与概率而言的)对应的概率，即: \[\ell(\theta |x) = P(x| \theta)\] 需要说明的是两者在数值上相等，但是意义并不相同，\(\ell\)是关于\(\theta\)的函数，而\(P\)则是关于\(x\)的函数，两者从不同的角度描述一件事情。 Example 假设一个袋子装有白球与红球，比例未知，现在抽取10次（每次抽完都放回，保证事件独立性），假设抽到了7次白球和3次红球，在此数据样本条件下，可以采用最大似然估计法求解袋子中白球的比例（最大似然估计是一种“模型已定，参数未知”的方法）。当然，这种数据情况下很明显，白球的比例是70%，但如何通过理论的方法得到这个答案呢？一些复杂的条件下，是很难通过直观的方式获得答案的，这时候理论分析就尤为重要了，这也是学者们为何要提出最大似然估计的原因。我们可以定义从袋子中抽取白球和红球的概率如下： 正态分布 假如有一组采样值（x1,...,xn），我们知道其服从正态分布，且标准差已知。当这个正态分布的期望为多少时，产生这个采样数据的概率为最大？ 这个例子中正态分布就是模型M，而期望就是前文提到的theta。 由上可知最大似然估计的一般求解过程： 写出似然函数 对似然函数取对数，并整理 求导数 解似然方程 Reference from http://fangs.in/post/thinkstats/likelihood/ Reference from https://www.jianshu.com/p/f1d3906e4a3e]]></content>
      <categories>
        <category>Statistics</category>
      </categories>
      <tags>
        <tag>Concept</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Kernel method]]></title>
    <url>%2FKernel-method%2F2019%2F05%2F02%2F</url>
    <content type="text"><![CDATA[Kernel Method 不是对特征做低维空间到高维空间的映射，只是用来计算映射到高维空间之后的内积的一种简便方法。 我们如果想对原本线性不可分的数据集进行分割，一般有两种方法: Soft Margin 对Input Space做Feature Expansion，把数据集映射到高维中去，形成了Feature Space。 我们几乎可以认为（We are safe but not certain）原本在低维中线性不可分的数据集在足够高的维度中存在线性可分的超平面。 对于2，我们所做的就是要在Feature Space套用原本在线性可分情况下的Input Space中使用过的优化方法，来找到那个Maximaizing Margin的超平面。原理机制一模一样，是二次规划，唯一不同是代入数据的不同，我们需要代入\(\phi(x)\)而不是\(x\)。这时（在假设我们已知了如何选取mapping之后）才有了Kernel Method的概念。 Kernel Trick的意义，是简化计算二次规划中间的内积计算。因为中间步骤有一步必须求得\(\phi(x_i)^{T}\phi(x_j)\)，而我们可以定义核函数\(K(x_i,x_j)=\phi(x_i)^{T}\phi(x_j)\)，使得我们在不需要显式计算每一个\(\phi(x_i)\)、甚至不需要知道\(\phi(\cdot )\)长什么样的情况下，直接求出\(\phi(x_i)^{T}\phi(x_j)\)的值来。 也就是说，核函数、内积、相似度这三个词是等价的。因为inner product其实就是一种similarity的度量。核函数和映射是无关的。 一句话概括的话，核函数等于映射至高维空间后的高维特征的点积，目的是降低计算的复杂度。 \[K(x_1,x_2) = \phi(x_1)^{T}*\phi(x_2)\] Example: \(K(X_1,X_2) = &lt;P(X_1,X_2)&gt;\) 已知 \(P(X) = (X,X^2)\), 可得 \(K(X_1,X_2) = &lt;P(X_1),P(X_2)&gt; = &lt;(X_1,X_1^2),(X_2,X_2^2)&gt; = X_1X_2+X_1^2 X_2^2\) 很多时候，我们只关心核函数，不需要显式地表示映射函数。可以用核函数表示低维空间下特性向量的操作（例子中的 \(X_1X_2+X_1^2 X_2^2\) ），令其代替映射后高维特征的点积（ (\(X_1\),\(X_1^2\)) 与 (\(X_2\),\(X_2^2\)) 的点积）。 内积平方 我们现在考虑核函数\(K(v_1,v_2) = &lt;v_1,v_2&gt;^2\)，即“内积平方”。 这里面\(v_1=(x_1,y_1), v_2=(x_2,y_2)\)是二维空间中的两个点。 这个核函数对应着一个二维空间到三维空间的映射，它的表达式是： \[P(x,y)=(x^2,\sqrt{2}xy,y^2)\] 可以验证， \[ \begin{align} &lt;P(v_1),P(v_2)&gt; &amp;= \, &lt;(x_1^2,\sqrt{2}x_1y_1,y_1^2),(x_2^2,\sqrt{2}x_2y_2,y_2^2)&gt; \\ &amp;= \, x_1^2x_2^2 + 2x_1x_2y_1y_2+y_1^2y_2^2 \\ &amp;= \, (x_1x_2 + y_1y_2)^2 \\ &amp;= \, \, &lt;v_1,v_2&gt;^2 \\ &amp;= \, K(v_1,v_2) \end{align} \] 多项式核函数的特征映射 RBF 核函数]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Coordinate descent for lasso]]></title>
    <url>%2FCoordinate-descent-for-lasso%2F2019%2F05%2F01%2F</url>
    <content type="text"><![CDATA[Goal Minimize some function g, Often, hard to find minimum for all coordinates, but easy for each coordinate. Coordinate descent: Initialize \(\hat{w} = 0\) (or smartly...) ----while not converged ---------for j =0,1,...,D(pick a coordinate j) ---------------\(\hat{w_{j}} &lt;- min_{w}g(w_{0},...w_{D})\) Optimizing least squares objective one coordinate at a time \[RSS(w) = \sum^{N}_{i=1}(y_{i} - \sum^{D}_{j=0}w_{j}h_{j}(xi))^{2}\] aside: \(h_{j}(xi)\) represent normalized feature Fix all coordinates \(w_{-j}\)(all feature except \(w_{j}\)) and take partial w.r.t \(w_{j}\) \[\frac{\partial}{\partial w_{j}}RSS(w) = -2\sum^{N}_{i=1}h_{j}(x_{i})(y_{i} - \sum^{D}_{j=0}w_{j}h_{j}(xi))\] = \[-2\sum^{N}_{i=1}h_{j}(x_{i})(y_{i} - \sum_{k \neq j}w_{k}h_{k}(x_{i}) - w_{j}h_{j}(x_{i})) \] = \[ -2\sum^{N}_{i=1}h_{j}(x_{i})(y_{i} - \sum_{k \neq j}w_{k}h_{k}(x_{i})) + 2w_{j}\sum^{N}_{i=1}h_{j}(x_{i})^{2}\] by definition, \(\sum^{N}_{i=1}h_{j}(x_{i})^{2}\) = 1, \(-2\sum^{N}_{i=1}h_{j}(x_{i})(y_{i} - \sum_{k \neq j}w_{k}h_{k}(x_{i})) = p_{j}\) we get \[-2p_{j} + 2w_{j}\] Set partial = 0 and solve: \[\frac{\partial}{\partial w_{j}}RSS(w) = -p_{j} + w_{j}\] ==&gt; \[p_{j} = w_{j}\] Coordinate descent for least squares regression Initialize \(\hat{w} = 0\) (or smartly...) ----while not converged ---------for j =0,1,...,D(pick a coordinate j) ---------------compute: \[ -2\sum^{N}_{i=1}h_{j}(x_{i})(y_{i} - \sum_{k \neq j}w_{k}h_{k}(x_{i})) \] ---------------set: \[ w_{j} = \left\{ \begin{aligned} &amp; p_{j} + \frac{\lambda}{2} &amp;\quad if \, p_{j} &lt; -\frac{\lambda}{2} \\ &amp; 0 &amp;\quad if \, p_{j} \, in \, [-\frac{\lambda}{2},\frac{\lambda}{2}] \\ &amp; p_{j} - \frac{\lambda}{2} &amp;\quad if \, p_{j} &gt; \frac{\lambda}{2} \end{aligned} \right. \]]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[The difference between Lasso and Ridge regularization]]></title>
    <url>%2FThe-difference-between-Lasso-and-Ridge-regularization%2F2019%2F05%2F01%2F</url>
    <content type="text"><![CDATA[Cost Function of Ridge \[Cost = RSS(W) + \lambda ||W||^{2}_{2} = \sum_{i=1}^{N}(y_{i} - w_{0}h_{0}(x_{i})- w_{1}h_{1}(x_{i}))^{2} + \lambda (w_{0}^2 + w_{1}^{2}) \] 上述方程可以表示为一个重心不在原点的椭圆(有cross term) ==&gt; \[\sum y^{2} + W_{0}^{2}\sum h_{0}^{2} + W_{1}^{2}\sum h_{1}^{2} + cross\; term = constant\] ==&gt; \[W_{0}^{2}\sum h_{0}^{2} + W_{1}^{2}\sum h_{1}^{2} + cross\; term = constant\] 椭圆更大的半径表示更大的cost 增大\(\lambda\), 在求最优cost的过程中，\(w_{0}\) 和 \(w_{1}\)会趋近于0. 分开表示cost function 的 rss 和 l2 penalty rss 表示椭圆 l2 norm 表示圆 \[\lambda (w_{0}^2 + w_{1}^{2}) \] Ridge 的最优解 Ridge的最优解是 rss 和 l2 penalty 之间balance 后的结果 Cost Function of Lasso \[Cost = RSS(W) + \lambda ||W||^{2}_{2} = \sum_{i=1}^{N}(y_{i} - w_{0}h_{0}(x_{i})- w_{1}h_{1}(x_{i}))^{2} + \lambda (|w_{0}| + |w_{1}|)\] 上述方程可以表示为一个重心不在原点的椭圆(有cross term) ==&gt; \[\sum y^{2} + W_{0}^{2}\sum h_{0}^{2} + W_{1}^{2}\sum h_{1}^{2} + cross\; term = constant\] ==&gt; \[W_{0}^{2}\sum h_{0}^{2} + W_{1}^{2}\sum h_{1}^{2} + cross\; term = constant\] 增大\(\lambda\), 在求最优cost的过程中，\(w_{0}\) 和 \(w_{1}\)会趋近于0. 但是，不是同时趋近为0，会有部分w先为0 分开表示cost function 的 rss 和 l1 penalty rss 表示椭圆（和ridge相同） l1 norm 表示菱形 \[\lambda (|w_{0}| + |w_{1}|)\] Lasso 的最优解 Ridge的最优解是 rss 和 l1 penalty 之间balance 后的结果]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Concept</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[3 sources of error]]></title>
    <url>%2F3-sources-of-error%2F2019%2F04%2F20%2F</url>
    <content type="text"><![CDATA[3 sources of error In forming predictions, there are 3 sources of error: Noise Bias Variance Noise contribution Data inherently noisy The world works is that there's some true relationship between X and Y. Or generically, between x and y. And we're representing that arbitrary relationship defined by the world, by \(f_{w}\) true. Which is the notation we're using for that functional relationship. But of course that's not a perfect description between x and y. There are lot of other contributing factors have the impact on y. Lots and lots of other things that we can't ever perfectly capture with just some function between x and y, and so that is the noise that's inherent in this process represented by this epsilon term. Bias contribution \[Bias(x) = f_{w}(X) - f_{\hat{w}}(X)\] For one data set of size N, we get this fit. But there are other datasets. For the fits associated with those data sets. there's a continuum of possible fits we might have gotten. And for all those possible fits, here this dashed green line represents our average fit, averaged over all those fits weighted by how likely they were to have appeared. What bias is it's the difference between this average fit and the true function. Variance contribution What variance is how different can my specific fits to a given data set be from one another, as I'm looking at different possible data sets? To summarize what this variance is saying is, how much can the fits vary? Average prediction error at x_{t} \[\sigma^{2} + [bias(f_{\hat{w}}(X_{t}))]^{2} + var(f_{\hat{w}}(X_{t})) \] prove]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Concept</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LSTM Mxnet Implementation]]></title>
    <url>%2FLSTM-Mxnet-Implementation%2F2019%2F04%2F13%2F</url>
    <content type="text"><![CDATA[长短期记忆（LSTM） 本节将介绍另一种常用的门控循环神经网络：长短期记忆（long short-term memory，简称 LSTM）[1]。它比门控循环单元的结构稍微复杂一点。 长短期记忆 LSTM 中引入了三个门：输入门（input gate）、遗忘门（forget gate）和输出门（output gate），以及与隐藏状态形状相同的记忆细胞（某些文献把记忆细胞当成一种特殊的隐藏状态），从而记录额外的信息。 输入门、遗忘门和输出门 同门控循环单元中的重置门和更新门一样，如图 6.7 所示，长短期记忆的门的输入均为当前时间步输入 \(\boldsymbol{X}_t\) 与上一时间步隐藏状态 \(\boldsymbol{H}_{t-1}\)，输出由激活函数为 sigmoid 函数的全连接层计算得到。如此一来，这三个门元素的值域均为 \([0,1]\)。 长短期记忆中输入门、遗忘门和输出门的计算。 具体来说，假设隐藏单元个数为 \(h\)，给定时间步 \(t\) 的小批量输入 \(\boldsymbol{X}_t \in \mathbb{R}^{n \times d}\)（样本数为 \(n\)，输入个数为 \(d\)）和上一时间步隐藏状态 \(\boldsymbol{H}_{t-1} \in \mathbb{R}^{n \times h}\)。 时间步 \(t\) 的输入门 \(\boldsymbol{I}_t \in \mathbb{R}^{n \times h}\)、遗忘门 \(\boldsymbol{F}_t \in \mathbb{R}^{n \times h}\) 和输出门 \(\boldsymbol{O}_t \in \mathbb{R}^{n \times h}\) 分别计算如下： \[ \begin{aligned} \boldsymbol{I}_t &amp;= \sigma(\boldsymbol{X}_t \boldsymbol{W}_{xi} + \boldsymbol{H}_{t-1} \boldsymbol{W}_{hi} + \boldsymbol{b}_i),\\ \boldsymbol{F}_t &amp;= \sigma(\boldsymbol{X}_t \boldsymbol{W}_{xf} + \boldsymbol{H}_{t-1} \boldsymbol{W}_{hf} + \boldsymbol{b}_f),\\ \boldsymbol{O}_t &amp;= \sigma(\boldsymbol{X}_t \boldsymbol{W}_{xo} + \boldsymbol{H}_{t-1} \boldsymbol{W}_{ho} + \boldsymbol{b}_o), \end{aligned} \] 其中的 \(\boldsymbol{W}_{xi}, \boldsymbol{W}_{xf}, \boldsymbol{W}_{xo} \in \mathbb{R}^{d \times h}\) 和 \(\boldsymbol{W}_{hi}, \boldsymbol{W}_{hf}, \boldsymbol{W}_{ho} \in \mathbb{R}^{h \times h}\) 是权重参数，\(\boldsymbol{b}_i, \boldsymbol{b}_f, \boldsymbol{b}_o \in \mathbb{R}^{1 \times h}\) 是偏差参数。 候选记忆细胞 接下来，长短期记忆需要计算候选记忆细胞 \(\tilde{\boldsymbol{C}}_t\)。它的计算同上面介绍的三个门类似，但使用了值域在 \([-1, 1]\) 的 tanh 函数做激活函数，如图 6.8 所示。 长短期记忆中候选记忆细胞的计算。 具体来说，时间步 \(t\) 的候选记忆细胞 \(\tilde{\boldsymbol{C}}_t \in \mathbb{R}^{n \times h}\) 的计算为 \[\tilde{\boldsymbol{C}}_t = \text{tanh}(\boldsymbol{X}_t \boldsymbol{W}_{xc} + \boldsymbol{H}_{t-1} \boldsymbol{W}_{hc} + \boldsymbol{b}_c),\] 其中的 \(\boldsymbol{W}_{xc} \in \mathbb{R}^{d \times h}\) 和 \(\boldsymbol{W}_{hc} \in \mathbb{R}^{h \times h}\) 是权重参数，\(\boldsymbol{b}_c \in \mathbb{R}^{1 \times h}\) 是偏差参数。 记忆细胞 我们可以通过元素值域在 \([0, 1]\) 的输入门、遗忘门和输出门来控制隐藏状态中信息的流动：这一般也是通过使用按元素乘法（符号为 \(\odot\)）来实现。当前时间步记忆细胞 \(\boldsymbol{C}_t \in \mathbb{R}^{n \times h}\) 的计算组合了上一时间步记忆细胞和当前时间步候选记忆细胞的信息，并通过遗忘门和输入门来控制信息的流动： \[\boldsymbol{C}_t = \boldsymbol{F}_t \odot \boldsymbol{C}_{t-1} + \boldsymbol{I}_t \odot \tilde{\boldsymbol{C}}_t.\] 如图 6.9 所示，遗忘门控制上一时间步的记忆细胞 \(\boldsymbol{C}_{t-1}\) 中的信息是否传递到当前时间步，而输入门则可以控制当前时间步的输入 \(\boldsymbol{X}_t\) 通过候选记忆细胞 \(\tilde{\boldsymbol{C}}_t\) 如何流入当前时间步的记忆细胞。如果遗忘门一直近似 1 且输入门一直近似 0，过去的记忆细胞将一直通过时间保存并传递至当前时间步。这个设计可以应对循环神经网络中的梯度衰减问题，并更好地捕捉时间序列中时间步距离较大的依赖关系。 长短期记忆中记忆细胞的计算。这里的乘号是按元素乘法。 隐藏状态 有了记忆细胞以后，接下来我们还可以通过输出门来控制从记忆细胞到隐藏状态 \(\boldsymbol{H}_t \in \mathbb{R}^{n \times h}\) 的信息的流动： \[\boldsymbol{H}_t = \boldsymbol{O}_t \odot \text{tanh}(\boldsymbol{C}_t).\] 这里的 tanh 函数确保隐藏状态元素值在 -1 到 1 之间。需要注意的是，当输出门近似 1 时，记忆细胞信息将传递到隐藏状态供输出层使用；当输出门近似 0 时，记忆细胞信息只自己保留。图 6.10 展示了长短期记忆中隐藏状态的计算。 长短期记忆中隐藏状态的计算。这里的乘号是按元素乘法。 读取数据集 下面我们开始实现并展示长短期记忆。和前几节中的实验一样，我们依然使用周杰伦歌词数据集来训练模型作词。 循环神经网络 本节将介绍循环神经网络。它并非刚性地记忆所有固定长度的序列，而是通过隐藏状态来储存之前时间步的信息。首先我们回忆一下前面介绍过的多层感知机，然后描述如何添加隐藏状态来将它变成循环神经网络。 不含隐藏状态的神经网络 让我们考虑一个单隐藏层的多层感知机。给定样本数为 \(n\)、输入个数（特征数或特征向量维度）为 \(d\) 的小批量数据样本 \(\boldsymbol{X} \in \mathbb{R}^{n \times d}\)。设隐藏层的激活函数为 \(\phi\)，那么隐藏层的输出 \(\boldsymbol{H} \in \mathbb{R}^{n \times h}\) 计算为 \[\boldsymbol{H} = \phi(\boldsymbol{X} \boldsymbol{W}_{xh} + \boldsymbol{b}_h),\] 其中隐藏层权重参数 \(\boldsymbol{W}_{xh} \in \mathbb{R}^{d \times h}\)，隐藏层偏差参数 \(\boldsymbol{b}_h \in \mathbb{R}^{1 \times h}\)，\(h\) 为隐藏单元个数。上式相加的两项形状不同，因此将按照广播机制相加。把隐藏变量 \(\boldsymbol{H}\) 作为输出层的输入，且设输出个数为 \(q\)（例如分类问题中的类别数），输出层的输出为 \[\boldsymbol{O} = \boldsymbol{H} \boldsymbol{W}_{hq} + \boldsymbol{b}_q,\] 其中输出变量 \(\boldsymbol{O} \in \mathbb{R}^{n \times q}\), 输出层权重参数 \(\boldsymbol{W}_{hq} \in \mathbb{R}^{h \times q}\), 输出层偏差参数 \(\boldsymbol{b}_q \in \mathbb{R}^{1 \times q}\)。如果是分类问题，我们可以使用 \(\text{softmax}(\boldsymbol{O})\) 来计算输出类别的概率分布。 含隐藏状态的循环神经网络 现在我们考虑输入数据存在时间相关性的情况。假设 \(\boldsymbol{X}_t \in \mathbb{R}^{n \times d}\) 是序列中时间步 \(t\) 的小批量输入，\(\boldsymbol{H}_t \in \mathbb{R}^{n \times h}\) 是该时间步的隐藏层变量。跟多层感知机不同的是，这里我们保存上一时间步的隐藏变量 \(\boldsymbol{H}_{t-1}\)，并引入一个新的权重参数 \(\boldsymbol{W}_{hh} \in \mathbb{R}^{h \times h}\)，该参数用来描述在当前时间步如何使用上一时间步的隐藏变量。具体来说，当前时间步的隐藏变量的计算由当前时间步的输入和上一时间步的隐藏变量共同决定： \[\boldsymbol{H}_t = \phi(\boldsymbol{X}_t \boldsymbol{W}_{xh} + \boldsymbol{H}_{t-1} \boldsymbol{W}_{hh} + \boldsymbol{b}_h).\] 与多层感知机相比，我们在这里添加了 \(\boldsymbol{H}_{t-1} \boldsymbol{W}_{hh}\) 一项。由上式中相邻时间步的隐藏变量 \(\boldsymbol{H}_t\) 和 \(\boldsymbol{H}_{t-1}\) 之间的关系可知，这里的隐藏变量捕捉了截至当前时间步的序列的历史信息，就像是神经网络当前时间步的状态或记忆一样。因此，该隐藏变量也称为隐藏状态。由于隐藏状态在当前时间步的定义使用了它在上一时间步相同的定义，上式的计算是循环的。使用循环计算的网络即循环神经网络。 循环神经网络有很多种不同的构造方法。含上式所定义的隐藏状态的循环神经网络是极为常见的一种。如无特别说明，本章中的循环神经网络基于上式中隐藏状态的循环计算。在时间步 \(t\)，输出层的输出和多层感知机中的计算类似： \[\boldsymbol{O}_t = \boldsymbol{H}_t \boldsymbol{W}_{hq} + \boldsymbol{b}_q.\] 循环神经网络的参数包括隐藏层的权重 \(\boldsymbol{W}_{xh} \in \mathbb{R}^{d \times h}, \boldsymbol{W}_{hh} \in \mathbb{R}^{h \times h}\) 和偏差 \(\boldsymbol{b}_h \in \mathbb{R}^{1 \times h}\)，以及输出层的权重 \(\boldsymbol{W}_{hq} \in \mathbb{R}^{h \times q}\) 和偏差 \(\boldsymbol{b}_q \in \mathbb{R}^{1 \times q}\)。值得一提的是，即便在不同时间步，循环神经网络始终使用这些模型参数。因此，循环神经网络模型参数的数量不随时间步的递增而增长。 图 6.1 展示了循环神经网络在三个相邻时间步的计算逻辑。在时间步 \(t\)，隐藏状态的计算可以看成是将输入 \(\boldsymbol{X}_t\) 和前一时间步隐藏状态 \(\boldsymbol{H}_{t-1}\) 连结后输入一个激活函数为 \(\phi\) 的全连接层。该全连接层的输出就是当前时间步的隐藏状态 \(\boldsymbol{H}_t\)，且模型参数为 \(\boldsymbol{W}_{xh}\) 与 \(\boldsymbol{W}_{hh}\) 的连结，偏差为 \(\boldsymbol{b}_h\)。当前时间步 \(t\) 的隐藏状态 \(\boldsymbol{H}_t\) 将参与下一个时间步 \(t+1\) 的隐藏状态 \(\boldsymbol{H}_{t+1}\) 的计算，并输入到当前时间步的全连接输出层。 含隐藏状态的循环神经网络。 我们刚刚提到，隐藏状态中 \(\boldsymbol{X}_t \boldsymbol{W}_{xh} + \boldsymbol{H}_{t-1} \boldsymbol{W}_{hh}\) 的计算等价于 \(\boldsymbol{X}_t\) 与 \(\boldsymbol{H}_{t-1}\) 连结后的矩阵乘以 \(\boldsymbol{W}_{xh}\) 与 \(\boldsymbol{W}_{hh}\) 连结后的矩阵。接下来，我们用一个具体的例子来验证这一点。首先，我们构造矩阵X、W_xh、H和W_hh，它们的形状分别为（3，1）、（1，4）、（3，2）和（2，4）。将X与W_xh、H与W_hh分别相乘，再把两个相乘的结果相加，得到形状为（3，4）的矩阵。 123456from mxnet import nd, autogradimport randomimport zipfilefrom mxnet.gluon import loss as glossimport timeimport math 读取数据集 1234with zipfile.ZipFile("jaychou_lyrics.txt.zip") as zin: for file in zin.namelist(): with zin.open(file) as f: corpus_chars = f.read().decode('utf-8') 123corpus_chars = corpus_chars.replace('\n',' ').replace('\r',' ')corpus_chars = corpus_chars[:10000]corpus_chars[:40] &#39;想要有直升机 想要和你飞到宇宙去 想要和你融化在一起 融化在宇宙里 我每天每天每&#39; 建立字符索引 1234index_to_char = list(set(corpus_chars))vocab_size = len(index_to_char)char_to_index = &#123;char:i for i,char in enumerate(index_to_char)&#125;vocab_size 1027 1234indices_corpus = [char_to_index[char] for char in corpus_chars]sample = indices_corpus[:20]print("chars: &#123;&#125;".format("".join(index_to_char[idx] for idx in sample)))print("index: &#123;&#125;".format(sample)) chars: 想要有直升机 想要和你飞到宇宙去 想要和 index: [824, 97, 659, 481, 263, 293, 559, 824, 97, 107, 87, 364, 893, 291, 847, 206, 559, 824, 97, 107] 时序数据的采样 随机采样 相邻采样 随机采样 批量大小 batch_size指每个小批量的样本数，num_steps为每个样本所包含的时间步数。 在随机采样中，每个样本是原始序列上任意截 取的一段序列。相邻的两个随机小批量在原始序列上的位置不一定相毗邻。因此，我们无法用一 个小批量最终时间步的隐藏状态来初始化下一个小批量的隐藏状态。 在训练模型时，每次随机采样前都需要重新初始化隐藏状态。 1234567891011121314151617def data_iter_random(indices_corpus, batch_size, num_steps, ctx=None): num_example = (len(indices_corpus) - 1) // num_steps ## 总共有多少个样本 epoch_size = num_example // batch_size ## 每个 epoch 有多少个小批量 example_indices = list(range(num_example)) ## 样本的索引 random.shuffle(example_indices) def _data(pos): return indices_corpus[pos : pos + num_steps] for i in range(epoch_size): # 每次生成 batch_size 个随机样本 batch_start = i * batch_size batch_indices = example_indices[batch_start:batch_start + batch_size] ## 小批量的样本索引 X = [_data( j * num_steps ) for j in batch_indices] Y = [_data( j * num_steps + 1) for j in batch_indices] yield nd.array(X, ctx), nd.array(Y, ctx) 123my_seq = list(range(30))for X, Y in data_iter_random(my_seq, batch_size=2, num_steps=6): print('X: ', X, '\nY:', Y, '\n') X: [[12. 13. 14. 15. 16. 17.] [ 0. 1. 2. 3. 4. 5.]] &lt;NDArray 2x6 @cpu(0)&gt; Y: [[13. 14. 15. 16. 17. 18.] [ 1. 2. 3. 4. 5. 6.]] &lt;NDArray 2x6 @cpu(0)&gt; X: [[18. 19. 20. 21. 22. 23.] [ 6. 7. 8. 9. 10. 11.]] &lt;NDArray 2x6 @cpu(0)&gt; Y: [[19. 20. 21. 22. 23. 24.] [ 7. 8. 9. 10. 11. 12.]] &lt;NDArray 2x6 @cpu(0)&gt; 相邻采样 除了对原始序列做随机采样之外，我们还可以令相邻的两个随机小批量在原始序列上的位置相毗邻。此时，我们就可以用一个小批量最终时间步的隐藏状态来初始化下一个小批量的隐藏状态， 从而使下一个小批量的输出也取决于当前小批量的输入，并如此循环下去。这对实现循环神经网络造成了两方面影响。一方面，在训练模型时，我们只需在每一个迭代周期开始时初始化隐藏状态。另一方面，当多个相邻小批量通过传递隐藏状态串联起来时，模型参数的梯度计算将依赖所有串联起来的小批量序列。同一迭代周期中，随着迭代次数的增加，梯度的计算开销会越来越大。 为了使模型参数的梯度计算只依赖一次迭代读取的小批量序列，我们可以在每次读取小批量前将隐藏状态从计算图分离出来 1234567891011121314def data_iter_consecutive(corpus_indices, batch_size, num_steps, ctx=None): corpus_indices = nd.array(corpus_indices) data_len = len(corpus_indices) batch_len = data_len // batch_size indices = corpus_indices[0: batch_size*batch_len].reshape((batch_size, batch_len)) epoch_size = (batch_len - 1) // num_steps for i in range(epoch_size): i = i * num_steps X = indices[:, i: i + num_steps] Y = indices[:, i + 1: i + num_steps + 1] yield X, Y 12for X, Y in data_iter_consecutive(my_seq, batch_size=2, num_steps=6): print('X: ', X, '\nY:', Y, '\n') X: [[ 0. 1. 2. 3. 4. 5.] [15. 16. 17. 18. 19. 20.]] &lt;NDArray 2x6 @cpu(0)&gt; Y: [[ 1. 2. 3. 4. 5. 6.] [16. 17. 18. 19. 20. 21.]] &lt;NDArray 2x6 @cpu(0)&gt; X: [[ 6. 7. 8. 9. 10. 11.] [21. 22. 23. 24. 25. 26.]] &lt;NDArray 2x6 @cpu(0)&gt; Y: [[ 7. 8. 9. 10. 11. 12.] [22. 23. 24. 25. 26. 27.]] &lt;NDArray 2x6 @cpu(0)&gt; 循环神经网络的从零开始实现 One hot encoding 12345def to_onehot(X,size): return [nd.one_hot(x,size) for x in X.T]X = nd.arange(10).reshape((2, 5))inputs = to_onehot(X, vocab_size)len(inputs), inputs[0].shape # time_step = 5，batch_size = 2, features = 2582 (5, (2, 1027)) 初始化模型参数 num_hiddens 是hidden cell的差参数 12345678910111213141516171819202122232425262728num_inputs, num_hiddens, num_outputs = vocab_size, 256, vocab_sizectx = Nonedef get_params(): def _one(shape): return nd.random.normal(scale=0.01, shape=shape, ctx=ctx) def _three(): return (_one((num_inputs, num_hiddens)), _one((num_hiddens, num_hiddens)), nd.zeros(num_hiddens, ctx=ctx)) # 隐藏层参数 W_xi, W_hi, b_i = _three() #输入门 W_xf, W_hf, b_f = _three() #遗忘门 W_xo, W_ho, b_o = _three() #输出门 W_xc, W_hc, b_c = _three() #候选cell参数 # 输出层参数 W_hq = _one((num_hiddens, num_outputs)) b_q = nd.zeros(num_outputs, ctx=ctx) # 附上梯度 params = [W_xi, W_hi, b_i, W_xf, W_hf, b_f, W_xo, W_ho, b_o, W_xc, W_hc,b_c, W_hq, b_q] for param in params: param.attach_grad() return params 定义模型 123456789101112131415161718def init_lstm_state(batch_size, num_hiddens, ctx): return (nd.zeros(shape=(batch_size, num_hiddens), ctx=ctx),nd.zeros(shape=(batch_size, num_hiddens), ctx=ctx))def lstm(inputs, state, params): [W_xi, W_hi, b_i, W_xf, W_hf, b_f, W_xo, W_ho, b_o, W_xc, W_hc, b_c, W_hq, b_q] = params H,C = state outputs = [] for X in inputs: I = nd.sigmoid(nd.dot(X, W_xi) + nd.dot(H, W_hi) + b_i) F = nd.sigmoid(nd.dot(X, W_xf) + nd.dot(H, W_hf) + b_f) O = nd.sigmoid(nd.dot(X, W_xo) + nd.dot(H, W_ho) + b_o) C_tilda = nd.tanh(nd.dot(X, W_xc) + nd.dot(H, W_hc) + b_c) C = F * C + I * C_tilda H = O * C.tanh() Y = nd.dot(H, W_hq) + b_q outputs.append(Y) return outputs, (H,C) 1234state = init_lstm_state(X.shape[0], num_hiddens, ctx = None)inputs = to_onehot(X, vocab_size)params = get_params()outputs, state_new = lstm(inputs, state, params) 1len(outputs), outputs[0].shape, state_new[0].shape (5, (2, 1027), (2, 256)) 定义预测函数 以下函数基于前缀 prefix(含有数个字符的字符串)来预测接下来的 num_chars个字符 123456789101112131415def predict_lstm(prefix, num_chars, rnn, params, init_lstm_state, num_hiddens, vocab_size, ctx, idx_to_char, char_to_idx): state = init_lstm_state(1, num_hiddens, ctx) output = [char_to_idx[prefix[0]]] for t in range(num_chars + len(prefix) - 1): # 将上一时间步的输出作为当前时间步的输入。 X = to_onehot(nd.array([output[-1]], ctx=ctx), vocab_size) (Y, state) = lstm(X, state, params) if t &lt; len(prefix) - 1: output.append(char_to_idx[prefix[t + 1]]) else: output.append(int(Y[0].argmax(axis=1).asscalar())) return ''.join([idx_to_char[i] for i in output]) 1predict_lstm('分开', 10, lstm, params, init_lstm_state, num_hiddens, vocab_size, ctx, index_to_char, char_to_index) &#39;分开蟑榜沉篇来他已密明漠&#39; 梯度剪裁 12345678def grad_clipping(params, theta, ctx = None): norm = nd.array([0.0], ctx) for param in params: norm += (param.grad ** 2).sum() norm = norm.sqrt().asscalar() if norm &gt; theta: for param in params: param.grad[:] *= theta / norm 梯度下降 123def sgd(params, lr, batch_size): # 本函数已保存在 gluonbook 包中方便以后使用。 for param in params: param[:] = param - lr * param.grad / batch_size 整合 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647def train_and_predict_rnn(lstm, get_params, init_lstm_state, num_hiddens, vocab_size, corpus_indices, idx_to_char, char_to_idx, is_random_iter, num_epochs, num_steps, lr, clipping_theta, batch_size, pred_period, pred_len, prefixes, ctx = None): if is_random_iter: data_iter_fn = data_iter_random else: data_iter_fn = data_iter_consecutive params = get_params() loss = gloss.SoftmaxCrossEntropyLoss() for epoch in range(num_epochs): if not is_random_iter: # 如使用相邻采样，在 epoch 开始时初始化隐藏状态。 state = init_lstm_state(batch_size, num_hiddens, ctx) loss_sum, start = 0.0, time.time() data_iter = data_iter_fn(indices_corpus, batch_size, num_steps, ctx) for t, (X, Y) in enumerate(data_iter): if is_random_iter: # 如使用随机采样，在每个小批量更新前初始化隐藏状态。 state = init_rnn_state(batch_size, num_hiddens, ctx) else: # 否则需要使用 detach 函数从计算图分离隐藏状态 for s in state: s.detach() with autograd.record(): inputs = to_onehot(X, vocab_size) # outputs 有 num_steps 个形状为(batch_size，vocab_size)的矩阵。 (outputs, state) = lstm(inputs, state, params) # 拼接之后形状为(num_steps * batch_size，vocab_size)。 outputs = nd.concat(*outputs, dim=0) # Y 的形状是(batch_size，num_steps)，转置后再变成⻓度为 # batch * num_steps 的向量，这样跟输出的行一一对应。 y = Y.T.reshape((-1,)) # 使用交叉熵损失计算平均分类误差。 l = loss(outputs, y).mean() l.backward() grad_clipping(params, clipping_theta, ctx) # 裁剪梯度。 gb.sgd(params, lr, 1) # 因为误差已经取过均值，梯度不用再做平均。 loss_sum += l.asscalar() sgd(params, lr, 1) # 因为误差已经取过均值，梯度不用再做平均。 loss_sum += l.asscalar() if (epoch + 1) % pred_period == 0: print('epoch %d, perplexity %f, time %.2f sec' % (epoch + 1, math.exp(loss_sum / (t + 1)), time.time() - start)) for prefix in prefixes: print(' -', predict_lstm(prefix, pred_len, lstm, params, init_lstm_state, num_hiddens, vocab_size, ctx, idx_to_char, char_to_idx)) 12345678num_epochs, num_steps, batch_size, lr, clipping_theta = 200, 35, 32, 1e2, 1e-2 pred_period, pred_len, prefixes = 50, 50, ['分开', '不分开']train_and_predict_rnn(lstm, get_params, init_lstm_state, num_hiddens, vocab_size, indices_corpus, index_to_char, char_to_index, False, num_epochs, num_steps, lr, clipping_theta, batch_size, pred_period, pred_len, prefixes, ctx = None) epoch 50, perplexity 163.030127, time 3.16 sec - 分开 我想你你你的可爱人 我想想你你你的可爱 我想想你你你的可爱 我想想你你你的可爱 我想想你你你的可爱 - 不分开 我想你你你的可爱人 我想想你你你的可爱 我想想你你你的可爱 我想想你你你的可爱 我想想你你你的可爱 epoch 100, perplexity 32.180855, time 3.49 sec - 分开 我想你这你是我 一场我 你给我的太笑 有有后觉 我给了这生我 我知好觉 我该了好生活 我知后觉 我 - 不分开 我想你的你笑我妈妈 我想你的你 我不要这想 我不 我不 我不要 我爱 我不了 你不不觉 我爱了觉 epoch 150, perplexity 5.679034, time 3.21 sec - 分开 你在我不里 除非一乌截棍 它什么 干什么 我想都有难信 干檐是人 是谁在在切记 哼哼哈兮 快使用双 - 不分开 我已你的个笑 我爱你 你爱我的我有你 败一抖的黑有 说你的让我有听的可有人人 我有你这里单美但家 epoch 200, perplexity 1.841203, time 3.22 sec - 分开 一直我 是场于枪年代白墙黑瓦的淡淡的忧伤 消失的 旧时光 一九四三 在头看 的片段 有一些风霜 老 - 不分开 我已经 我开我 我想了大牵牵着你 不开开心不你 让不不 你经开 我想就这牵牵着你的手不放开 爱可不 12]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Project</tag>
        <tag>Sequence Models</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GRU MXNET Implemetation]]></title>
    <url>%2FGRU-MXNET-Implemetation%2F2019%2F04%2F13%2F</url>
    <content type="text"><![CDATA[门控循环单元（GRU） 上一节介绍了循环神经网络中的梯度计算方法。我们发现，当时间步数较大或者时间步较小时，循环神经网络的梯度较容易出现衰减或爆炸。虽然裁剪梯度可以应对梯度爆炸，但无法解决梯度衰减的问题。通常由于这个原因，循环神经网络在实际中较难捕捉时间序列中时间步距离较大的依赖关系。 门控循环神经网络（gated recurrent neural network）的提出，正是为了更好地捕捉时间序列中时间步距离较大的依赖关系。它通过可以学习的门来控制信息的流动。其中，门控循环单元（gated recurrent unit，简称 GRU）是一种常用的门控循环神经网络 [1, 2]。另一种常见门控循环神经网络则将在下一节中介绍。 门控循环单元 下面将介绍门控循环单元的设计。它引入了重置门和更新门的概念，从而修改了循环神经网络中隐藏状态的计算方式。 重置门和更新门 如图 6.4 所示，门控循环单元中的重置门（reset gate）和更新门（update gate）的输入均为当前时间步输入 \(\boldsymbol{X}_t\) 与上一时间步隐藏状态 \(\boldsymbol{H}_{t-1}\)，输出由激活函数为 sigmoid 函数的全连接层计算得到。 门控循环单元中重置门和更新门的计算 具体来说，假设隐藏单元个数为 \(h\)，给定时间步 \(t\) 的小批量输入 \(\boldsymbol{X}_t \in \mathbb{R}^{n \times d}\)（样本数为 \(n\)，输入个数为 \(d\)）和上一时间步隐藏状态 \(\boldsymbol{H}_{t-1} \in \mathbb{R}^{n \times h}\)。重置门 \(\boldsymbol{R}_t \in \mathbb{R}^{n \times h}\) 和更新门 \(\boldsymbol{Z}_t \in \mathbb{R}^{n \times h}\) 的计算如下： \[ \begin{aligned} \boldsymbol{R}_t = \sigma(\boldsymbol{X}_t \boldsymbol{W}_{xr} + \boldsymbol{H}_{t-1} \boldsymbol{W}_{hr} + \boldsymbol{b}_r),\\ \boldsymbol{Z}_t = \sigma(\boldsymbol{X}_t \boldsymbol{W}_{xz} + \boldsymbol{H}_{t-1} \boldsymbol{W}_{hz} + \boldsymbol{b}_z), \end{aligned} \] 其中 \(\boldsymbol{W}_{xr}, \boldsymbol{W}_{xz} \in \mathbb{R}^{d \times h}\) 和 \(\boldsymbol{W}_{hr}, \boldsymbol{W}_{hz} \in \mathbb{R}^{h \times h}\) 是权重参数，\(\boldsymbol{b}_r, \boldsymbol{b}_z \in \mathbb{R}^{1 \times h}\) 是偏差参数。“多层感知机”一节中介绍过，sigmoid 函数可以将元素的值变换到 0 和 1 之间。因此，重置门 \(\boldsymbol{R}_t\) 和更新门 \(\boldsymbol{Z}_t\) 中每个元素的值域都是 \([0, 1]\)。 候选隐藏状态 接下来，门控循环单元将计算候选隐藏状态来辅助稍后的隐藏状态计算。如图 6.5 所示，我们将当前时间步重置门的输出与上一时间步隐藏状态做按元素乘法（符号为 \(\odot\)）。如果重置门中元素值接近 0，那么意味着重置对应隐藏状态元素为 0，即丢弃上一时间步的隐藏状态。如果元素值接近 1，那么表示保留上一时间步的隐藏状态。然后，将按元素乘法的结果与当前时间步的输入连结，再通过含激活函数 tanh 的全连接层计算出候选隐藏状态，其所有元素的值域为 \([-1, 1]\)。 门控循环单元中候选隐藏状态的计算 具体来说，时间步 \(t\) 的候选隐藏状态 \(\tilde{\boldsymbol{H}}_t \in \mathbb{R}^{n \times h}\) 的计算为 \[\tilde{\boldsymbol{H}}_t = \text{tanh}(\boldsymbol{X}_t \boldsymbol{W}_{xh} + \left(\boldsymbol{R}_t \odot \boldsymbol{H}_{t-1}\right) \boldsymbol{W}_{hh} + \boldsymbol{b}_h),\] 其中 \(\boldsymbol{W}_{xh} \in \mathbb{R}^{d \times h}\) 和 \(\boldsymbol{W}_{hh} \in \mathbb{R}^{h \times h}\) 是权重参数，\(\boldsymbol{b}_h \in \mathbb{R}^{1 \times h}\) 是偏差参数。从上面这个公式可以看出，重置门控制了上一时间步的隐藏状态如何流入当前时间步的候选隐藏状态。而上一时间步的隐藏状态可能包含了时间序列截至上一时间步的全部历史信息。因此，重置门可以用来丢弃与预测无关的历史信息。 隐藏状态 最后，时间步 \(t\) 的隐藏状态 \(\boldsymbol{H}_t \in \mathbb{R}^{n \times h}\) 的计算使用当前时间步的更新门 \(\boldsymbol{Z}_t\) 来对上一时间步的隐藏状态 \(\boldsymbol{H}_{t-1}\) 和当前时间步的候选隐藏状态 \(\tilde{\boldsymbol{H}}_t\) 做组合： \[\boldsymbol{H}_t = \boldsymbol{Z}_t \odot \boldsymbol{H}_{t-1} + (1 - \boldsymbol{Z}_t) \odot \tilde{\boldsymbol{H}}_t.\] 门控循环单元中隐藏状态的计算 值得注意的是，更新门可以控制隐藏状态应该如何被包含当前时间步信息的候选隐藏状态所更新，如图 6.6 所示。假设更新门在时间步 \(t&#39;\) 到 \(t\)（\(t&#39; &lt; t\)）之间一直近似 1。那么，在时间步 \(t&#39;\) 到 \(t\) 之间的输入信息几乎没有流入时间步 \(t\) 的隐藏状态 \(\boldsymbol{H}_t\)。实际上，这可以看作是较早时刻的隐藏状态 \(\boldsymbol{H}_{t&#39;-1}\) 一直通过时间保存并传递至当前时间步 \(t\)。这个设计可以应对循环神经网络中的梯度衰减问题，并更好地捕捉时间序列中时间步距离较大的依赖关系。 我们对门控循环单元的设计稍作总结： 重置门有助于捕捉时间序列里短期的依赖关系。 更新门有助于捕捉时间序列里长期的依赖关系。 读取数据集 为了实现并展示门控循环单元，我们依然使用周杰伦歌词数据集来训练模型作词。这里除门控循环单元以外的实现已在“循环神经网络”一节中介绍。以下为读取数据集部分。 循环神经网络 本节将介绍循环神经网络。它并非刚性地记忆所有固定长度的序列，而是通过隐藏状态来储存之前时间步的信息。首先我们回忆一下前面介绍过的多层感知机，然后描述如何添加隐藏状态来将它变成循环神经网络。 不含隐藏状态的神经网络 让我们考虑一个单隐藏层的多层感知机。给定样本数为 \(n\)、输入个数（特征数或特征向量维度）为 \(d\) 的小批量数据样本 \(\boldsymbol{X} \in \mathbb{R}^{n \times d}\)。设隐藏层的激活函数为 \(\phi\)，那么隐藏层的输出 \(\boldsymbol{H} \in \mathbb{R}^{n \times h}\) 计算为 \[\boldsymbol{H} = \phi(\boldsymbol{X} \boldsymbol{W}_{xh} + \boldsymbol{b}_h),\] 其中隐藏层权重参数 \(\boldsymbol{W}_{xh} \in \mathbb{R}^{d \times h}\)，隐藏层偏差参数 \(\boldsymbol{b}_h \in \mathbb{R}^{1 \times h}\)，\(h\) 为隐藏单元个数。上式相加的两项形状不同，因此将按照广播机制相加。把隐藏变量 \(\boldsymbol{H}\) 作为输出层的输入，且设输出个数为 \(q\)（例如分类问题中的类别数），输出层的输出为 \[\boldsymbol{O} = \boldsymbol{H} \boldsymbol{W}_{hq} + \boldsymbol{b}_q,\] 其中输出变量 \(\boldsymbol{O} \in \mathbb{R}^{n \times q}\), 输出层权重参数 \(\boldsymbol{W}_{hq} \in \mathbb{R}^{h \times q}\), 输出层偏差参数 \(\boldsymbol{b}_q \in \mathbb{R}^{1 \times q}\)。如果是分类问题，我们可以使用 \(\text{softmax}(\boldsymbol{O})\) 来计算输出类别的概率分布。 含隐藏状态的循环神经网络 现在我们考虑输入数据存在时间相关性的情况。假设 \(\boldsymbol{X}_t \in \mathbb{R}^{n \times d}\) 是序列中时间步 \(t\) 的小批量输入，\(\boldsymbol{H}_t \in \mathbb{R}^{n \times h}\) 是该时间步的隐藏层变量。跟多层感知机不同的是，这里我们保存上一时间步的隐藏变量 \(\boldsymbol{H}_{t-1}\)，并引入一个新的权重参数 \(\boldsymbol{W}_{hh} \in \mathbb{R}^{h \times h}\)，该参数用来描述在当前时间步如何使用上一时间步的隐藏变量。具体来说，当前时间步的隐藏变量的计算由当前时间步的输入和上一时间步的隐藏变量共同决定： \[\boldsymbol{H}_t = \phi(\boldsymbol{X}_t \boldsymbol{W}_{xh} + \boldsymbol{H}_{t-1} \boldsymbol{W}_{hh} + \boldsymbol{b}_h).\] 与多层感知机相比，我们在这里添加了 \(\boldsymbol{H}_{t-1} \boldsymbol{W}_{hh}\) 一项。由上式中相邻时间步的隐藏变量 \(\boldsymbol{H}_t\) 和 \(\boldsymbol{H}_{t-1}\) 之间的关系可知，这里的隐藏变量捕捉了截至当前时间步的序列的历史信息，就像是神经网络当前时间步的状态或记忆一样。因此，该隐藏变量也称为隐藏状态。由于隐藏状态在当前时间步的定义使用了它在上一时间步相同的定义，上式的计算是循环的。使用循环计算的网络即循环神经网络。 循环神经网络有很多种不同的构造方法。含上式所定义的隐藏状态的循环神经网络是极为常见的一种。如无特别说明，本章中的循环神经网络基于上式中隐藏状态的循环计算。在时间步 \(t\)，输出层的输出和多层感知机中的计算类似： \[\boldsymbol{O}_t = \boldsymbol{H}_t \boldsymbol{W}_{hq} + \boldsymbol{b}_q.\] 循环神经网络的参数包括隐藏层的权重 \(\boldsymbol{W}_{xh} \in \mathbb{R}^{d \times h}, \boldsymbol{W}_{hh} \in \mathbb{R}^{h \times h}\) 和偏差 \(\boldsymbol{b}_h \in \mathbb{R}^{1 \times h}\)，以及输出层的权重 \(\boldsymbol{W}_{hq} \in \mathbb{R}^{h \times q}\) 和偏差 \(\boldsymbol{b}_q \in \mathbb{R}^{1 \times q}\)。值得一提的是，即便在不同时间步，循环神经网络始终使用这些模型参数。因此，循环神经网络模型参数的数量不随时间步的递增而增长。 图 6.1 展示了循环神经网络在三个相邻时间步的计算逻辑。在时间步 \(t\)，隐藏状态的计算可以看成是将输入 \(\boldsymbol{X}_t\) 和前一时间步隐藏状态 \(\boldsymbol{H}_{t-1}\) 连结后输入一个激活函数为 \(\phi\) 的全连接层。该全连接层的输出就是当前时间步的隐藏状态 \(\boldsymbol{H}_t\)，且模型参数为 \(\boldsymbol{W}_{xh}\) 与 \(\boldsymbol{W}_{hh}\) 的连结，偏差为 \(\boldsymbol{b}_h\)。当前时间步 \(t\) 的隐藏状态 \(\boldsymbol{H}_t\) 将参与下一个时间步 \(t+1\) 的隐藏状态 \(\boldsymbol{H}_{t+1}\) 的计算，并输入到当前时间步的全连接输出层。 含隐藏状态的循环神经网络。 我们刚刚提到，隐藏状态中 \(\boldsymbol{X}_t \boldsymbol{W}_{xh} + \boldsymbol{H}_{t-1} \boldsymbol{W}_{hh}\) 的计算等价于 \(\boldsymbol{X}_t\) 与 \(\boldsymbol{H}_{t-1}\) 连结后的矩阵乘以 \(\boldsymbol{W}_{xh}\) 与 \(\boldsymbol{W}_{hh}\) 连结后的矩阵。接下来，我们用一个具体的例子来验证这一点。首先，我们构造矩阵X、W_xh、H和W_hh，它们的形状分别为（3，1）、（1，4）、（3，2）和（2，4）。将X与W_xh、H与W_hh分别相乘，再把两个相乘的结果相加，得到形状为（3，4）的矩阵。 123456from mxnet import nd, autogradimport randomimport zipfilefrom mxnet.gluon import loss as glossimport timeimport math 读取数据集 1234with zipfile.ZipFile("jaychou_lyrics.txt.zip") as zin: for file in zin.namelist(): with zin.open(file) as f: corpus_chars = f.read().decode('utf-8') 123corpus_chars = corpus_chars.replace('\n',' ').replace('\r',' ')corpus_chars = corpus_chars[:10000]corpus_chars[:40] &#39;想要有直升机 想要和你飞到宇宙去 想要和你融化在一起 融化在宇宙里 我每天每天每&#39; 建立字符索引 1234index_to_char = list(set(corpus_chars))vocab_size = len(index_to_char)char_to_index = &#123;char:i for i,char in enumerate(index_to_char)&#125;vocab_size 1027 1234indices_corpus = [char_to_index[char] for char in corpus_chars]sample = indices_corpus[:20]print("chars: &#123;&#125;".format("".join(index_to_char[idx] for idx in sample)))print("index: &#123;&#125;".format(sample)) chars: 想要有直升机 想要和你飞到宇宙去 想要和 index: [411, 880, 895, 556, 110, 829, 374, 411, 880, 525, 567, 837, 551, 220, 203, 258, 374, 411, 880, 525] 时序数据的采样 随机采样 相邻采样 随机采样 批量大小 batch_size指每个小批量的样本数，num_steps为每个样本所包含的时间步数。 在随机采样中，每个样本是原始序列上任意截 取的一段序列。相邻的两个随机小批量在原始序列上的位置不一定相毗邻。因此，我们无法用一 个小批量最终时间步的隐藏状态来初始化下一个小批量的隐藏状态。 在训练模型时，每次随机采样前都需要重新初始化隐藏状态。 1234567891011121314151617def data_iter_random(indices_corpus, batch_size, num_steps, ctx=None): num_example = (len(indices_corpus) - 1) // num_steps ## 总共有多少个样本 epoch_size = num_example // batch_size ## 每个 epoch 有多少个小批量 example_indices = list(range(num_example)) ## 样本的索引 random.shuffle(example_indices) def _data(pos): return indices_corpus[pos : pos + num_steps] for i in range(epoch_size): # 每次生成 batch_size 个随机样本 batch_start = i * batch_size batch_indices = example_indices[batch_start:batch_start + batch_size] ## 小批量的样本索引 X = [_data( j * num_steps ) for j in batch_indices] Y = [_data( j * num_steps + 1) for j in batch_indices] yield nd.array(X, ctx), nd.array(Y, ctx) 123my_seq = list(range(30))for X, Y in data_iter_random(my_seq, batch_size=2, num_steps=6): print('X: ', X, '\nY:', Y, '\n') X: [[ 0. 1. 2. 3. 4. 5.] [12. 13. 14. 15. 16. 17.]] &lt;NDArray 2x6 @cpu(0)&gt; Y: [[ 1. 2. 3. 4. 5. 6.] [13. 14. 15. 16. 17. 18.]] &lt;NDArray 2x6 @cpu(0)&gt; X: [[18. 19. 20. 21. 22. 23.] [ 6. 7. 8. 9. 10. 11.]] &lt;NDArray 2x6 @cpu(0)&gt; Y: [[19. 20. 21. 22. 23. 24.] [ 7. 8. 9. 10. 11. 12.]] &lt;NDArray 2x6 @cpu(0)&gt; 相邻采样 除了对原始序列做随机采样之外，我们还可以令相邻的两个随机小批量在原始序列上的位置相毗邻。此时，我们就可以用一个小批量最终时间步的隐藏状态来初始化下一个小批量的隐藏状态， 从而使下一个小批量的输出也取决于当前小批量的输入，并如此循环下去。这对实现循环神经网络造成了两方面影响。一方面，在训练模型时，我们只需在每一个迭代周期开始时初始化隐藏状态。另一方面，当多个相邻小批量通过传递隐藏状态串联起来时，模型参数的梯度计算将依赖所有串联起来的小批量序列。同一迭代周期中，随着迭代次数的增加，梯度的计算开销会越来越大。 为了使模型参数的梯度计算只依赖一次迭代读取的小批量序列，我们可以在每次读取小批量前将隐藏状态从计算图分离出来 1234567891011121314def data_iter_consecutive(corpus_indices, batch_size, num_steps, ctx=None): corpus_indices = nd.array(corpus_indices) data_len = len(corpus_indices) batch_len = data_len // batch_size indices = corpus_indices[0: batch_size*batch_len].reshape((batch_size, batch_len)) epoch_size = (batch_len - 1) // num_steps for i in range(epoch_size): i = i * num_steps X = indices[:, i: i + num_steps] Y = indices[:, i + 1: i + num_steps + 1] yield X, Y 12for X, Y in data_iter_consecutive(my_seq, batch_size=2, num_steps=6): print('X: ', X, '\nY:', Y, '\n') X: [[ 0. 1. 2. 3. 4. 5.] [15. 16. 17. 18. 19. 20.]] &lt;NDArray 2x6 @cpu(0)&gt; Y: [[ 1. 2. 3. 4. 5. 6.] [16. 17. 18. 19. 20. 21.]] &lt;NDArray 2x6 @cpu(0)&gt; X: [[ 6. 7. 8. 9. 10. 11.] [21. 22. 23. 24. 25. 26.]] &lt;NDArray 2x6 @cpu(0)&gt; Y: [[ 7. 8. 9. 10. 11. 12.] [22. 23. 24. 25. 26. 27.]] &lt;NDArray 2x6 @cpu(0)&gt; 循环神经网络的从零开始实现 One hot encoding 12345def to_onehot(X,size): return [nd.one_hot(x,size) for x in X.T]X = nd.arange(10).reshape((2, 5))inputs = to_onehot(X, vocab_size)len(inputs), inputs[0].shape # time_step = 5，batch_size = 2, features = 2582 (5, (2, 1027)) 初始化模型参数 num_hiddens 是hidden cell的差参数 12345678910111213141516171819202122232425262728num_inputs, num_hiddens, num_outputs = vocab_size, 256, vocab_sizectx = Nonedef get_params(): def _one(shape): return nd.random.normal(scale=0.01, shape=shape, ctx=ctx) def _three(): return (_one((num_inputs, num_hiddens)), _one((num_hiddens, num_hiddens)), nd.zeros(num_hiddens, ctx=ctx)) # 隐藏层参数 W_xz, W_hz, b_z = _three() #更新门 W_xr, W_hr, b_r = _three() #重置门 W_xh, W_hh, b_h = _three() #候选隐藏状态 # 输出层参数 W_hq = _one((num_hiddens, num_outputs)) b_q = nd.zeros(num_outputs, ctx=ctx) # 附上梯度 params = [W_xz, W_hz, b_z, W_xr, W_hr, b_r, W_xh, W_hh, b_h, W_hq, b_q] for param in params: param.attach_grad() return params 定义模型 123456789101112131415def init_rnn_state(batch_size, num_hiddens, ctx): return (nd.zeros(shape=(batch_size, num_hiddens), ctx=ctx), )def gru(inputs, state, params): W_xz, W_hz, b_z, W_xr, W_hr, b_r, W_xh, W_hh, b_h, W_hq, b_q = params H, = state outputs = [] for X in inputs: Z = nd.sigmoid(nd.dot(X, W_xz) + nd.dot(H, W_hz) + b_z) R = nd.sigmoid(nd.dot(X, W_xr) + nd.dot(H, W_hr) + b_r) H_tilda = nd.tanh(nd.dot(X, W_xh) + R * nd.dot(H, W_hh) + b_h) # 重置门，丢弃无关历史信息 H = Z * H + (1 - Z) * H_tilda # 更新门，保持长时记忆 Y = nd.dot(H, W_hq) + b_q outputs.append(Y) return outputs, (H,) 1234state = init_rnn_state(X.shape[0], num_hiddens, ctx = None)inputs = to_onehot(X, vocab_size)params = get_params()outputs, state_new = gru(inputs, state, params) 1len(outputs), outputs[0].shape, state_new[0].shape (5, (2, 1027), (2, 256)) 定义预测函数 以下函数基于前缀 prefix(含有数个字符的字符串)来预测接下来的 num_chars个字符 123456789101112131415def predict_gru(prefix, num_chars, gru, params, init_rnn_state, num_hiddens, vocab_size, ctx, idx_to_char, char_to_idx): state = init_rnn_state(1, num_hiddens, ctx) output = [char_to_idx[prefix[0]]] for t in range(num_chars + len(prefix) - 1): # 将上一时间步的输出作为当前时间步的输入。 X = to_onehot(nd.array([output[-1]], ctx=ctx), vocab_size) (Y, state) = gru(X, state, params) if t &lt; len(prefix) - 1: output.append(char_to_idx[prefix[t + 1]]) else: output.append(int(Y[0].argmax(axis=1).asscalar())) return ''.join([idx_to_char[i] for i in output]) 1predict_rnn('分开', 10, gru, params, init_rnn_state, num_hiddens, vocab_size, ctx, index_to_char, char_to_index) &#39;分开怒泊甜甜甜惚蝴解火术&#39; 梯度剪裁 12345678def grad_clipping(params, theta, ctx = None): norm = nd.array([0.0], ctx) for param in params: norm += (param.grad ** 2).sum() norm = norm.sqrt().asscalar() if norm &gt; theta: for param in params: param.grad[:] *= theta / norm 梯度下降 123def sgd(params, lr, batch_size): # 本函数已保存在 gluonbook 包中方便以后使用。 for param in params: param[:] = param - lr * param.grad / batch_size 整合 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647def train_and_predict_gru(gru, get_params, init_rnn_state, num_hiddens, vocab_size, corpus_indices, idx_to_char, char_to_idx, is_random_iter, num_epochs, num_steps, lr, clipping_theta, batch_size, pred_period, pred_len, prefixes, ctx = None): if is_random_iter: data_iter_fn = data_iter_random else: data_iter_fn = data_iter_consecutive params = get_params() loss = gloss.SoftmaxCrossEntropyLoss() for epoch in range(num_epochs): if not is_random_iter: # 如使用相邻采样，在 epoch 开始时初始化隐藏状态。 state = init_rnn_state(batch_size, num_hiddens, ctx) loss_sum, start = 0.0, time.time() data_iter = data_iter_fn(indices_corpus, batch_size, num_steps, ctx) for t, (X, Y) in enumerate(data_iter): if is_random_iter: # 如使用随机采样，在每个小批量更新前初始化隐藏状态。 state = init_rnn_state(batch_size, num_hiddens, ctx) else: # 否则需要使用 detach 函数从计算图分离隐藏状态 for s in state: s.detach() with autograd.record(): inputs = to_onehot(X, vocab_size) # outputs 有 num_steps 个形状为(batch_size，vocab_size)的矩阵。 (outputs, state) = gru(inputs, state, params) # 拼接之后形状为(num_steps * batch_size，vocab_size)。 outputs = nd.concat(*outputs, dim=0) # Y 的形状是(batch_size，num_steps)，转置后再变成⻓度为 # batch * num_steps 的向量，这样跟输出的行一一对应。 y = Y.T.reshape((-1,)) # 使用交叉熵损失计算平均分类误差。 l = loss(outputs, y).mean() l.backward() grad_clipping(params, clipping_theta, ctx) # 裁剪梯度。 gb.sgd(params, lr, 1) # 因为误差已经取过均值，梯度不用再做平均。 loss_sum += l.asscalar() sgd(params, lr, 1) # 因为误差已经取过均值，梯度不用再做平均。 loss_sum += l.asscalar() if (epoch + 1) % pred_period == 0: print('epoch %d, perplexity %f, time %.2f sec' % (epoch + 1, math.exp(loss_sum / (t + 1)), time.time() - start)) for prefix in prefixes: print(' -', predict_gru(prefix, pred_len, gru, params, init_rnn_state, num_hiddens, vocab_size, ctx, idx_to_char, char_to_idx)) 12345678num_epochs, num_steps, batch_size, lr, clipping_theta = 200, 35, 32, 1e2, 1e-2 pred_period, pred_len, prefixes = 50, 50, ['分开', '不分开']train_and_predict_gru(gru, get_params, init_rnn_state, num_hiddens, vocab_size, indices_corpus, index_to_char, char_to_index, False, num_epochs, num_steps, lr, clipping_theta, batch_size, pred_period, pred_len, prefixes, ctx = None) epoch 50, perplexity 107.604530, time 2.57 sec - 分开 我想你的让我 爱爱人 我不要你的可爱女人 坏的让我疯狂的可爱女人 坏坏的让我疯狂的可爱女人 坏坏 - 不分开 说我有你的爱人 爱有我有你的可爱女人 坏的让我疯狂的可爱女人 坏坏的让我疯狂的可爱女人 坏坏 epoch 100, perplexity 12.245766, time 2.56 sec - 分开 我想要这样 我不要再想 我不 我不 我不 我不 我不 我不 我不 我不 我不 我不 我不 我不 我 - 不分开 没有你在我有多多 难散 你想很久了吧? 我想想你 你不要再想 我不 我不 我不 我不 我不 我不 epoch 150, perplexity 1.785267, time 2.54 sec - 分开 我想带这样布 对你依依不舍 连隔壁邻居都猜到我现在的感受 河边的风 在吹着头发飘动 牵着你的手 一 - 不分开 没有你烦我有多烦多多难熬 穿过云层 我试著努力向你奔跑 爱才送到 你却已在别人怀抱 就是开不了 epoch 200, perplexity 1.072161, time 2.53 sec - 分开 我已轻这天布 对你依依不舍 连隔壁邻居都猜到我现在的感受 河边的风 在吹着头发飘动 牵着你的手 一 - 不分开 你已经离开我 不知不觉 我跟了这节奏 后知后觉 后知后觉 迷迷蒙蒙 你给的梦 出现裂缝 隐隐作痛 12]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Project</tag>
        <tag>Sequence Models</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RNN MXNET Implementation]]></title>
    <url>%2FRNN-MXNET-Implementation%2F2019%2F04%2F12%2F</url>
    <content type="text"><![CDATA[循环神经网络 本节将介绍循环神经网络。它并非刚性地记忆所有固定长度的序列，而是通过隐藏状态来储存之前时间步的信息。首先我们回忆一下前面介绍过的多层感知机，然后描述如何添加隐藏状态来将它变成循环神经网络。 不含隐藏状态的神经网络 让我们考虑一个单隐藏层的多层感知机。给定样本数为 \(n\)、输入个数（特征数或特征向量维度）为 \(d\) 的小批量数据样本 \(\boldsymbol{X} \in \mathbb{R}^{n \times d}\)。设隐藏层的激活函数为 \(\phi\)，那么隐藏层的输出 \(\boldsymbol{H} \in \mathbb{R}^{n \times h}\) 计算为 \[\boldsymbol{H} = \phi(\boldsymbol{X} \boldsymbol{W}_{xh} + \boldsymbol{b}_h),\] 其中隐藏层权重参数 \(\boldsymbol{W}_{xh} \in \mathbb{R}^{d \times h}\)，隐藏层偏差参数 \(\boldsymbol{b}_h \in \mathbb{R}^{1 \times h}\)，\(h\) 为隐藏单元个数。上式相加的两项形状不同，因此将按照广播机制相加。把隐藏变量 \(\boldsymbol{H}\) 作为输出层的输入，且设输出个数为 \(q\)（例如分类问题中的类别数），输出层的输出为 \[\boldsymbol{O} = \boldsymbol{H} \boldsymbol{W}_{hq} + \boldsymbol{b}_q,\] 其中输出变量 \(\boldsymbol{O} \in \mathbb{R}^{n \times q}\), 输出层权重参数 \(\boldsymbol{W}_{hq} \in \mathbb{R}^{h \times q}\), 输出层偏差参数 \(\boldsymbol{b}_q \in \mathbb{R}^{1 \times q}\)。如果是分类问题，我们可以使用 \(\text{softmax}(\boldsymbol{O})\) 来计算输出类别的概率分布。 含隐藏状态的循环神经网络 现在我们考虑输入数据存在时间相关性的情况。假设 \(\boldsymbol{X}_t \in \mathbb{R}^{n \times d}\) 是序列中时间步 \(t\) 的小批量输入，\(\boldsymbol{H}_t \in \mathbb{R}^{n \times h}\) 是该时间步的隐藏层变量。跟多层感知机不同的是，这里我们保存上一时间步的隐藏变量 \(\boldsymbol{H}_{t-1}\)，并引入一个新的权重参数 \(\boldsymbol{W}_{hh} \in \mathbb{R}^{h \times h}\)，该参数用来描述在当前时间步如何使用上一时间步的隐藏变量。具体来说，当前时间步的隐藏变量的计算由当前时间步的输入和上一时间步的隐藏变量共同决定： \[\boldsymbol{H}_t = \phi(\boldsymbol{X}_t \boldsymbol{W}_{xh} + \boldsymbol{H}_{t-1} \boldsymbol{W}_{hh} + \boldsymbol{b}_h).\] 与多层感知机相比，我们在这里添加了 \(\boldsymbol{H}_{t-1} \boldsymbol{W}_{hh}\) 一项。由上式中相邻时间步的隐藏变量 \(\boldsymbol{H}_t\) 和 \(\boldsymbol{H}_{t-1}\) 之间的关系可知，这里的隐藏变量捕捉了截至当前时间步的序列的历史信息，就像是神经网络当前时间步的状态或记忆一样。因此，该隐藏变量也称为隐藏状态。由于隐藏状态在当前时间步的定义使用了它在上一时间步相同的定义，上式的计算是循环的。使用循环计算的网络即循环神经网络。 循环神经网络有很多种不同的构造方法。含上式所定义的隐藏状态的循环神经网络是极为常见的一种。如无特别说明，本章中的循环神经网络基于上式中隐藏状态的循环计算。在时间步 \(t\)，输出层的输出和多层感知机中的计算类似： \[\boldsymbol{O}_t = \boldsymbol{H}_t \boldsymbol{W}_{hq} + \boldsymbol{b}_q.\] 循环神经网络的参数包括隐藏层的权重 \(\boldsymbol{W}_{xh} \in \mathbb{R}^{d \times h}, \boldsymbol{W}_{hh} \in \mathbb{R}^{h \times h}\) 和偏差 \(\boldsymbol{b}_h \in \mathbb{R}^{1 \times h}\)，以及输出层的权重 \(\boldsymbol{W}_{hq} \in \mathbb{R}^{h \times q}\) 和偏差 \(\boldsymbol{b}_q \in \mathbb{R}^{1 \times q}\)。值得一提的是，即便在不同时间步，循环神经网络始终使用这些模型参数。因此，循环神经网络模型参数的数量不随时间步的递增而增长。 图 6.1 展示了循环神经网络在三个相邻时间步的计算逻辑。在时间步 \(t\)，隐藏状态的计算可以看成是将输入 \(\boldsymbol{X}_t\) 和前一时间步隐藏状态 \(\boldsymbol{H}_{t-1}\) 连结后输入一个激活函数为 \(\phi\) 的全连接层。该全连接层的输出就是当前时间步的隐藏状态 \(\boldsymbol{H}_t\)，且模型参数为 \(\boldsymbol{W}_{xh}\) 与 \(\boldsymbol{W}_{hh}\) 的连结，偏差为 \(\boldsymbol{b}_h\)。当前时间步 \(t\) 的隐藏状态 \(\boldsymbol{H}_t\) 将参与下一个时间步 \(t+1\) 的隐藏状态 \(\boldsymbol{H}_{t+1}\) 的计算，并输入到当前时间步的全连接输出层。 含隐藏状态的循环神经网络。 我们刚刚提到，隐藏状态中 \(\boldsymbol{X}_t \boldsymbol{W}_{xh} + \boldsymbol{H}_{t-1} \boldsymbol{W}_{hh}\) 的计算等价于 \(\boldsymbol{X}_t\) 与 \(\boldsymbol{H}_{t-1}\) 连结后的矩阵乘以 \(\boldsymbol{W}_{xh}\) 与 \(\boldsymbol{W}_{hh}\) 连结后的矩阵。接下来，我们用一个具体的例子来验证这一点。首先，我们构造矩阵X、W_xh、H和W_hh，它们的形状分别为（3，1）、（1，4）、（3，2）和（2，4）。将X与W_xh、H与W_hh分别相乘，再把两个相乘的结果相加，得到形状为（3，4）的矩阵。 123456from mxnet import nd, autogradimport randomimport zipfilefrom mxnet.gluon import loss as glossimport timeimport math 读取数据集 1234with zipfile.ZipFile("jaychou_lyrics.txt.zip") as zin: for file in zin.namelist(): with zin.open(file) as f: corpus_chars = f.read().decode('utf-8') 123corpus_chars = corpus_chars.replace('\n',' ').replace('\r',' ')corpus_chars = corpus_chars[:10000]corpus_chars[:40] &#39;想要有直升机 想要和你飞到宇宙去 想要和你融化在一起 融化在宇宙里 我每天每天每&#39; 建立字符索引 1234index_to_char = list(set(corpus_chars))vocab_size = len(index_to_char)char_to_index = &#123;char:i for i,char in enumerate(index_to_char)&#125;vocab_size 1027 1234indices_corpus = [char_to_index[char] for char in corpus_chars]sample = indices_corpus[:20]print("chars: &#123;&#125;".format("".join(index_to_char[idx] for idx in sample)))print("index: &#123;&#125;".format(sample)) chars: 想要有直升机 想要和你飞到宇宙去 想要和 index: [61, 344, 208, 730, 798, 864, 723, 61, 344, 900, 763, 490, 826, 188, 217, 762, 723, 61, 344, 900] 时序数据的采样 随机采样 相邻采样 随机采样 批量大小 batch_size指每个小批量的样本数，num_steps为每个样本所包含的时间步数。 在随机采样中，每个样本是原始序列上任意截 取的一段序列。相邻的两个随机小批量在原始序列上的位置不一定相毗邻。因此，我们无法用一 个小批量最终时间步的隐藏状态来初始化下一个小批量的隐藏状态。 在训练模型时，每次随机采样前都需要重新初始化隐藏状态。 1234567891011121314151617def data_iter_random(indices_corpus, batch_size, num_steps, ctx=None): num_example = (len(indices_corpus) - 1) // num_steps ## 总共有多少个样本 epoch_size = num_example // batch_size ## 每个 epoch 有多少个小批量 example_indices = list(range(num_example)) ## 样本的索引 random.shuffle(example_indices) def _data(pos): return indices_corpus[pos : pos + num_steps] for i in range(epoch_size): # 每次生成 batch_size 个随机样本 batch_start = i * batch_size batch_indices = example_indices[batch_start:batch_start + batch_size] ## 小批量的样本索引 X = [_data( j * num_steps ) for j in batch_indices] Y = [_data( j * num_steps + 1) for j in batch_indices] yield nd.array(X, ctx), nd.array(Y, ctx) 123my_seq = list(range(30))for X, Y in data_iter_random(my_seq, batch_size=2, num_steps=6): print('X: ', X, '\nY:', Y, '\n') X: [[ 0. 1. 2. 3. 4. 5.] [12. 13. 14. 15. 16. 17.]] &lt;NDArray 2x6 @cpu(0)&gt; Y: [[ 1. 2. 3. 4. 5. 6.] [13. 14. 15. 16. 17. 18.]] &lt;NDArray 2x6 @cpu(0)&gt; X: [[ 6. 7. 8. 9. 10. 11.] [18. 19. 20. 21. 22. 23.]] &lt;NDArray 2x6 @cpu(0)&gt; Y: [[ 7. 8. 9. 10. 11. 12.] [19. 20. 21. 22. 23. 24.]] &lt;NDArray 2x6 @cpu(0)&gt; 相邻采样 除了对原始序列做随机采样之外，我们还可以令相邻的两个随机小批量在原始序列上的位置相毗邻。此时，我们就可以用一个小批量最终时间步的隐藏状态来初始化下一个小批量的隐藏状态， 从而使下一个小批量的输出也取决于当前小批量的输入，并如此循环下去。这对实现循环神经网络造成了两方面影响。一方面，在训练模型时，我们只需在每一个迭代周期开始时初始化隐藏状态。另一方面，当多个相邻小批量通过传递隐藏状态串联起来时，模型参数的梯度计算将依赖所有串联起来的小批量序列。同一迭代周期中，随着迭代次数的增加，梯度的计算开销会越来越大。 为了使模型参数的梯度计算只依赖一次迭代读取的小批量序列，我们可以在每次读取小批量前将隐藏状态从计算图分离出来 1234567891011121314def data_iter_consecutive(corpus_indices, batch_size, num_steps, ctx=None): corpus_indices = nd.array(corpus_indices) data_len = len(corpus_indices) batch_len = data_len // batch_size indices = corpus_indices[0: batch_size*batch_len].reshape((batch_size, batch_len)) epoch_size = (batch_len - 1) // num_steps for i in range(epoch_size): i = i * num_steps X = indices[:, i: i + num_steps] Y = indices[:, i + 1: i + num_steps + 1] yield X, Y 12for X, Y in data_iter_consecutive(my_seq, batch_size=2, num_steps=6): print('X: ', X, '\nY:', Y, '\n') X: [[ 0. 1. 2. 3. 4. 5.] [15. 16. 17. 18. 19. 20.]] &lt;NDArray 2x6 @cpu(0)&gt; Y: [[ 1. 2. 3. 4. 5. 6.] [16. 17. 18. 19. 20. 21.]] &lt;NDArray 2x6 @cpu(0)&gt; X: [[ 6. 7. 8. 9. 10. 11.] [21. 22. 23. 24. 25. 26.]] &lt;NDArray 2x6 @cpu(0)&gt; Y: [[ 7. 8. 9. 10. 11. 12.] [22. 23. 24. 25. 26. 27.]] &lt;NDArray 2x6 @cpu(0)&gt; 循环神经网络的从零开始实现 One hot encoding 12345def to_onehot(X,size): return [nd.one_hot(x,size) for x in X.T]X = nd.arange(10).reshape((2, 5))inputs = to_onehot(X, vocab_size)len(inputs), inputs[0].shape # time_step = 5，batch_size = 2, features = 2582 (5, (2, 1027)) 初始化模型参数 num_hiddens 是hidden cell的差参数 12345678910111213141516171819202122num_inputs, num_hiddens, num_outputs = vocab_size, 256, vocab_sizectx = Nonedef get_params(): def _one(shape): return nd.random.normal(scale=0.01, shape=shape, ctx=ctx) # 隐藏层参数 W_xh = _one((num_inputs, num_hiddens)) W_hh = _one((num_hiddens, num_hiddens)) b_h = nd.zeros(num_hiddens, ctx=ctx) # 输出层参数 W_hq = _one((num_hiddens, num_outputs)) b_q = nd.zeros(num_outputs, ctx=ctx) # 附上梯度 params = [W_xh, W_hh, b_h, W_hq, b_q] for param in params: param.attach_grad() return params 定义模型 123456789101112def init_rnn_state(batch_size, num_hiddens, ctx): return (nd.zeros(shape=(batch_size, num_hiddens), ctx=ctx), )def rnn(inputs, state, params): W_xh, W_hh, b_h, W_hq, b_q = params H, = state outputs = [] for X in inputs: H = nd.tanh(nd.dot(X, W_xh) + nd.dot(H, W_hh) + b_h) Y = nd.dot(H, W_hq) + b_q outputs.append(Y) return outputs, (H,) 1234state = init_rnn_state(X.shape[0], num_hiddens, ctx = None)inputs = to_onehot(X, vocab_size)params = get_params()outputs, state_new = rnn(inputs, state, params) 1len(outputs), outputs[0].shape, state_new[0].shape (5, (2, 1027), (2, 256)) 定义预测函数 以下函数基于前缀 prefix(含有数个字符的字符串)来预测接下来的 num_chars个字符 123456789101112131415def predict_rnn(prefix, num_chars, rnn, params, init_rnn_state, num_hiddens, vocab_size, ctx, idx_to_char, char_to_idx): state = init_rnn_state(1, num_hiddens, ctx) output = [char_to_idx[prefix[0]]] for t in range(num_chars + len(prefix) - 1): # 将上一时间步的输出作为当前时间步的输入。 X = to_onehot(nd.array([output[-1]], ctx=ctx), vocab_size) (Y, state) = rnn(X, state, params) if t &lt; len(prefix) - 1: output.append(char_to_idx[prefix[t + 1]]) else: output.append(int(Y[0].argmax(axis=1).asscalar())) return ''.join([idx_to_char[i] for i in output]) 1predict_rnn('分开', 10, rnn, params, init_rnn_state, num_hiddens, vocab_size, ctx, index_to_char, char_to_index) &#39;分开微寄载术苏沟及消等双&#39; 梯度剪裁 12345678def grad_clipping(params, theta, ctx = None): norm = nd.array([0.0], ctx) for param in params: norm += (param.grad ** 2).sum() norm = norm.sqrt().asscalar() if norm &gt; theta: for param in params: param.grad[:] *= theta / norm 梯度下降 123def sgd(params, lr, batch_size): # 本函数已保存在 gluonbook 包中方便以后使用。 for param in params: param[:] = param - lr * param.grad / batch_size 整合 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647def train_and_predict_rnn(rnn, get_params, init_rnn_state, num_hiddens, vocab_size, corpus_indices, idx_to_char, char_to_idx, is_random_iter, num_epochs, num_steps, lr, clipping_theta, batch_size, pred_period, pred_len, prefixes, ctx = None): if is_random_iter: data_iter_fn = data_iter_random else: data_iter_fn = data_iter_consecutive params = get_params() loss = gloss.SoftmaxCrossEntropyLoss() for epoch in range(num_epochs): if not is_random_iter: # 如使用相邻采样，在 epoch 开始时初始化隐藏状态。 state = init_rnn_state(batch_size, num_hiddens, ctx) loss_sum, start = 0.0, time.time() data_iter = data_iter_fn(indices_corpus, batch_size, num_steps, ctx) for t, (X, Y) in enumerate(data_iter): if is_random_iter: # 如使用随机采样，在每个小批量更新前初始化隐藏状态。 state = init_rnn_state(batch_size, num_hiddens, ctx) else: # 否则需要使用 detach 函数从计算图分离隐藏状态 for s in state: s.detach() with autograd.record(): inputs = to_onehot(X, vocab_size) # outputs 有 num_steps 个形状为(batch_size，vocab_size)的矩阵。 (outputs, state) = rnn(inputs, state, params) # 拼接之后形状为(num_steps * batch_size，vocab_size)。 outputs = nd.concat(*outputs, dim=0) # Y 的形状是(batch_size，num_steps)，转置后再变成⻓度为 # batch * num_steps 的向量，这样跟输出的行一一对应。 y = Y.T.reshape((-1,)) # 使用交叉熵损失计算平均分类误差。 l = loss(outputs, y).mean() l.backward() grad_clipping(params, clipping_theta, ctx) # 裁剪梯度。 gb.sgd(params, lr, 1) # 因为误差已经取过均值，梯度不用再做平均。 loss_sum += l.asscalar() sgd(params, lr, 1) # 因为误差已经取过均值，梯度不用再做平均。 loss_sum += l.asscalar() if (epoch + 1) % pred_period == 0: print('epoch %d, perplexity %f, time %.2f sec' % (epoch + 1, math.exp(loss_sum / (t + 1)), time.time() - start)) for prefix in prefixes: print(' -', predict_rnn(prefix, pred_len, rnn, params, init_rnn_state, num_hiddens, vocab_size, ctx, idx_to_char, char_to_idx)) 12345678num_epochs, num_steps, batch_size, lr, clipping_theta = 200, 35, 32, 1e2, 1e-2 pred_period, pred_len, prefixes = 50, 50, ['分开', '不分开']train_and_predict_rnn(rnn, get_params, init_rnn_state, num_hiddens, vocab_size, indices_corpus, index_to_char, char_to_index, False, num_epochs, num_steps, lr, clipping_theta, batch_size, pred_period, pred_len, prefixes, ctx = None) epoch 50, perplexity 64.202943, time 1.44 sec - 分开 我想你这你 我不的你 我有你这 我有了双 我有一空 我有一空 我有一空 我有一空 我有一空 我有一 - 不分开 我想你这你 我不的你 我有你这 我有一直 我有一空 我有一空 我有一空 我有一空 我有一空 我有一 epoch 100, perplexity 7.041272, time 1.50 sec - 分开 我想要这样牵着你的手 它在灌木丛旁折的 像入再里我想要 却你现没有经怎么 说有么 快我的没像错怎 - 不分开 我不要再可牵我 你一 我有你的话爱 我想 这对了义了吧 说通 你想很久了吧 说真 你想很久了吧 说 epoch 150, perplexity 2.039475, time 1.48 sec - 分开 我想要再想坦 有你你被默默 一亮都掉 我跟得好节奏 后知后觉 又过了一个秋 后知后觉 快使用双截棍 - 不分开觉 你已经离开我 不知不觉 我跟了这节奏 后知后觉 又过了一个秋 后知后觉 我该好好生活 我该好好生 epoch 200, perplexity 1.279734, time 1.47 sec - 分开 问候的风我 谁 在么胸 三经空 停么我遇着你说 满为了动 在来马步 硬底的功 全面裂纵 恨一作痛 - 不分开觉 你已经离开我 不知不觉 我跟了这节奏 后知后觉 又知了一个秋 后知后觉 我该好好生活 我该好好生 12]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Project</tag>
        <tag>Sequence Models</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Structuring Machine Learning Projects]]></title>
    <url>%2FStructuring-Machine-Learning-Projects%2F2019%2F03%2F29%2F</url>
    <content type="text"><![CDATA[Reference from lecture slides of Andrew Ng and github repo from DeepLearning.ai-Summary Table of contents Structuring Machine Learning Projects Table of contents Course summary ML Strategy 1 Why ML Strategy Orthogonalization Single number evaluation metric Satisfying and Optimizing metric Train/Dev/Test distributions Size of the Dev and Test sets When to change Dev/Test sets and metrics Why human-level performance? Avoidable bias Understanding human-level performance Surpassing human-level performance Improving your model performance ML Strategy 2 Carrying out error analysis Cleaning up incorrectly labeled data Build your first system quickly, then iterate Training and testing on different distributions Bias and Variance with mismatched data distributions Addressing data mismatch Transfer learning Multi-task learning What is end-to-end deep learning? Whether to use end-to-end deep learning Course summary Here are the course summary as its given on the course link: You will learn how to build a successful machine learning project. If you aspire to be a technical leader in AI, and know how to set direction for your team's work, this course will show you how. Much of this content has never been taught elsewhere, and is drawn from my experience building and shipping many deep learning products. This course also has two "flight simulators" that let you practice decision-making as a machine learning project leader. This provides "industry experience" that you might otherwise get only after years of ML work experience. After 2 weeks, you will: - Understand how to diagnose errors in a machine learning system, and - Be able to prioritize the most promising directions for reducing error - Understand complex ML settings, such as mismatched training/test sets, and comparing to and/or surpassing human-level performance - Know how to apply end-to-end learning, transfer learning, and multi-task learning I've seen teams waste months or years through not understanding the principles taught in this course. I hope this two week course will save you months of time. This is a standalone course, and you can take this so long as you have basic machine learning knowledge. This is the third course in the Deep Learning Specialization. ML Strategy 1 Why ML Strategy You have a lot of ideas to improve the accuracy of your deep learning system: Collect more data. Collect more diverse training set. Train gradient decent longer. Try bigger network. Try smaller network. Try dropout Add L2 regularization Try different optimization algorithm "ex. Adam" Activation functions. This course will give you some strategies to help you analyze your problem to go in a direction that will get you a better results. Orthogonalization Some deep learning developers knows exactly what hyperparameter to tune to achieve a specific task. This is called Orthogonalization. In Orthogonalization you have some controls, but each control does a specific task and doesn't effect other controls. Chain of assumptions in machine learning: You'll have to fit training set well on cost function. (Near human level performance if possible) If its not achieved you could try: bigger network - other optimization algorithm... Fit Dev set well on cost function. If its not achieved you could try: regularization - Bigger training set ... Fit test set well on cost function. If its not achieved you could try: Bigger Dev. set ... Performs well in real world. If its not achieved you could try: change dev. set - change cost function.. Single number evaluation metric Its better and faster to set a Single number evaluation metric to your project before you start it. Difference between precision and recall (In cat classification example): Suppose we run the classifier on 10 images which are 5 cats and 5 non-cats. The classifier identifies that there are 4 cats. but he identified 1 wrong cat. Confusion matrix: Cat Non-Cat Cat 3 2 Non-Cat 1 4 Precision: percentage of true cats in the recognized result. per = 3/4 Recall: percentage of true recognition in the whole dataset. rec = 3/5 Accuracy= 3/10 Using a precision/recall for evaluation is good in a lot of cases they doesn't tell you which is better. Ex: Classifier Precision Recall A 95% 90% B 98% 85% A better thing is to merge precision and Recall together. There a something called F1 score You can think of F1 score as average of Precision and Recall F1 = 2/ ((1/Per) + (1/Rec)) IF you have a lot of value as your metric you should take the average. Satisfying and Optimizing metric Its hard sometimes to get a single number evaluation metric. Ex: Classifier F1 Running time A 90% 80 ms B 92% 95 ms C 92% 1,500 ms In this case we can solve that by Satisfying and Optimizing metric. Ex: 12Maximize F1 # Optimizing metricsubject to Running time &lt; 100ms # Satisficing metric So as a general rule: 12Maximize 1 #Optimizing metric (One optimizing metric)subject to N-1 #Satisficing metric (N-1 Satisficing metric) Train/Dev/Test distributions Dev/Test set has to come from the same distribution. Choose Dev/Test sets to reflect data you expect to get in the future and consider important to do well on. Size of the Dev and Test sets Old way of splitting was 70% training, 30% test. Old way of splitting was 60% training, 20% Dev, 20% test. The old way was valid for ranges 1000 --&gt; 100000 In the modern deep learning you have if you have a million or more 98% Training, 1% Dev, 1% Test When to change Dev/Test sets and metrics Lets take an example. In a cat classification example we have these metric results: Metric Classification error Algorithm A 3% error (But a lot of porn images is treated as cat images here) Algorithm B 5% error In the last example if we choose the best algorithm by metric it would be "A", but if the users decide it will be "B" Thus here we want to change out metric. OldMetric = (1/m) * sum(y_pred[i] != y[i] ,m) Where m is the number of Dev set items. NewMetric = (1/sum(w[i])) * sum( w[i] * (y_pred[i] != y[i]) ,m) where: w[i] = 1 if x[i] is not porn w[i] = 10 if x[i] is porn Conclusion: If doing well on your metric + Dev/test set doesn't correspond to doing well in your application, change your metric and/or Dev/test set. Why human-level performance? We compare to human-level performance because a lot of deep learning algorithms in the recent days are a lot better than human level. After an algorithm reaches the human level performance it doesn't get better much. You won't surpass an error that's called "Bayes optimal error" There aren't much error range between human-level error and Bayes optimal error. Humans are quite good at lot of tasks. So as long as Machine learning is worse than humans, you can: Get labeled data from humans. Gain insight from manual error analysis. (Why did a person get it right?) Better analysis of bias/variance Avoidable bias Suppose that the cat classification algorithm gives these percentages: Humans 1% 7.5% Training error 8% 8% Dev Error 10% 10% In the left example, if the human level error is 1% then we have to focus on the bias. In the right example, if the human level error is 7.5% then we have to focus on the variance. In the latest examples we have used the human level as a proxy form Bayes optimal error because humans vision is too good. Understanding human-level performance When choosing human-level performance, it has to be choose in the terms of what you want to achieve with the system. You might have multiple human-level performance based on the human experience. Then the system you are trying to build will choose from these human levels as set it as proxy for Bayes error. Improving deep learning algorithms is harder once you reach a human level performance. Summary of bias/variance with human-level performance: human level error (Proxy for Bayes error) Calculate training error - human level error If difference is bigger then its Avoidable bias then you should use a strategy for bias. Training error Calculate dev error - training error If difference is bigger then its Variance then you should use a strategy for Variance. Dev error In a lot of problems Bayes error isn't zero that's why we need human level performance comparing. Surpassing human-level performance In some problems, deep learning has surpassed human level performance. Like: Online advertising. Product recommendation. Loan approval. The last examples are non natural perception task. Humans are far better in natural perception task like computer vision and speech recognition. Its harder for machines to surpass human level in natural perception task. Improving your model performance To improve your deep learning supervised system follow these guideline: Look at the difference between human level error and the training error. Avoidable bias Look at the difference between the training error and the Test/Dev set. Variance If number 1 difference is large you have these options: Train bigger model. Train longer/better optimization algorithm (Adam). NN architecture/hyperparameters search. Bigger training data. If number 2 difference is large you have these options: Get more training data. Regularization. NN architecture/hyperparameters search. ML Strategy 2 Carrying out error analysis Error analysis is to analysis why the accuracy of the system is like that. Example: In the cat classification example, if you have 10% error on your Dev set and you want to solve the error. If you discovered that some of the mislabeled data are dog pictures that looks like cats, should you try to make your cat classifier do better on dogs? this could take some weeks. Error analysis approach (To take a decision): Get 100 mislabeled Dev set examples at random. Count up how many are dogs. if there are 5/100 is dogs then it doesn't count to train your classifier to dogs. if there are 50/100 is dogs then you should work in that. Based on the last example, error analysis helps you to analyze the error before taking an action that could take lot of time with no need. You can evaluate multiple ideas -Error analysis ideas- in parallel and choose the best idea. create an excel shape to do that and decide Ex: Image Dog Great Cats blurry Comments 1 ✓ 2 ✓ ✓ 3 4 ✓ .... % totals 8% 43% 61% In the last example you will decide to work on great cats or blurry images to improve your performance. Cleaning up incorrectly labeled data Labeled data is incorrect when y of x is incorrect. If the incorrect labeled data is in the training set, Deep learning are quite robust to random error (Not systematic error). But its OK to go and fix these labels if you can. If you want to check for mislabeled data in Dev/test set, you should also try error analysis with mislabeled column. Ex: Image Dog Great Cats blurry Mislabeled Comments 1 ✓ 2 ✓ ✓ 3 4 ✓ .... % totals 8% 43% 61% 6% Then: If Overall Dev set error: 10% Then Errors due incorrect data: 0.6% Then Errors due other causes:9.4% Then you should focus on the 9.4% error rather than the incorrect data. Consider these while correcting the Dev/test mislabeled: Apply same process to your Dev and test sets to make sure they continue to come from the same distribution. Consider examining examples your algorithm got right as well as ones it got wrong. (Not always done if you reached a good accuracy) Train and (Dev/Test) data may now come from slightly different distributions Build your first system quickly, then iterate The steps you take to make your deep learning project: Setup Dev/test set and metric Build initial system quickly Using the training data. Use Bias/Variance analysis &amp; Error analysis to prioritize next steps. Training and testing on different distributions A lot of teams are working with deep learning applications that has training sets that are different from the Dev/test sets due to the hanger of deep learning to data. There are some strategies to follow up when training set distribution differs from Dev/test sets distribution. Option one (Not recommended): shuffle all the data together and extract randomly training and Dev/test sets. Advantages: All the sets now are from the same distribution. Disadvantages: The other distribution that was in the Dev/test sets will occur less in the new Dev/test sets and that might not what you want to achieve. Option two: Take some of the Dev/test set examples and put them with the training distribution. Advantages: The distribution you care about is your target now. Disadvantage: the distributions are different. but you will get a better performance over a long time. Bias and Variance with mismatched data distributions Bias and Variance analysis changes when training and Dev/test set is from different distribution. Example: Assume the cat classification example. Suppose you've worked in the example and reached this Human error: 0% Training error: 1% Dev error: 10% In the last example you'll think that this is a variance problem, but because the distributions aren't the same you cant judge this. Imagine if we created a new set called training-Dev set as a random subset of the training distribution. and we run error analysis and it came as follows: Human error: 0% Training error: 1% TrainingDev error: 8% Dev error: 10% Now you are sure this is a variance error. Suppose you have a different situation: Human error: 0% Training error: 1% TrainingDev error: 1.5% Dev error: 10% In this case you have something called Data mismatch problem. To conclude, first you'll have a new set called training-Dev set which has the same distribution as training set. Then follow this: human level error (Proxy for Bayes error) Calculate training error - human level error If difference is bigger then its Avoidable bias then you should use a strategy for bias. Training error Calculate Training-Dev error - training error If difference is bigger then its Variance then you should use a strategy for Variance. Training-Dev error Calculate dev error - training-dev error If difference is bigger then its Data mismatch then you should use a strategy for Data mismatch. Dev error Calculate test error - dev error Is the degree of overfitting to Dev set Test error Unfortunately there aren't much systematic ways to deal with Data mismatch but the next section will try to give us some insights. Addressing data mismatch Carry out manual error analysis to try to understand difference between training and Dev/test sets. Make training data more similar; or collect more data similar to Dev/test sets. There are something called Artificial data synthesis that can help you Make more training data. Combine some of your training data with something that can convert it to the Dev/test set distribution. Ex. Generate cars using 3D in a car classification example. Be careful with "Artificial data synthesis" because your NN might overfit these generated data. Transfer learning Apply the knowledge you took in a task and apply it in another task. For example You have trained a cat classifier with a lot of data, you can use all the learning data or part of it to solve x-ray classification problem. To do transfer learning, delete the weights of the last layer of the NN and keep all the other weights as a fixed weights. Initialize the new weights and feed the new data to the NN and learn the new weights. Thats if you have a small data set, but if you have enough data you can retrain all the weights again this is called fine tuning. You can create a several new layers not just one layer to original NN. When transfer learning make sense: When you have a lot of data for the problem you are transferring from and relatively less data for the problem your transferring to. Task A and B has the same input X. (Same type as input ex. image, audio) Low level features from A could be helpful for learning B Multi-task learning One NN do some tasks in the same time, and tasks can help each others. Example: You want to build an object recognition system that detects cars, stop signs, and traffic lights. (Image has a multiple labels.) Then Y shape will be (3,m) because we have 3 classification and each one is a binary one. Then Loss = (1/m) sum(sum(L(Y_dash[i], Y[i]),3) ,m) In the last example you could have train 3 neural network to get the same results, but if you suspect that the earlier layers has the same features then this will be faster. This will also work if y isn't complete for some labels. For example: 123Y = [1 ? 1 ..] [0 0 1 ..] [? 1 ? ..] And in this case it will do good with the missing data. but the loss function will be different: Loss = (1/m) sum(sum(L(Y_dash[i], Y[i]),for all i which Y[i] != ?) ,m) When Multi-task learning make sense: Training on a set of tasks that could benefit from having shared lower-level features. Usually amount of data you have for each task is quite similar. Can train a big enough network to do well on all the tasks. If you have a big enough NN, the performance of the Multi-task learning compared to splitting the tasks is better. Today Transfer learning is used more than Multi-task learning. What is end-to-end deep learning? Some systems has multiple stages to implement. An end to end deep learning implements all these stages with a single NN. Example: Suppose you have a speech recognition system: 12Audio ---&gt; Features --&gt; Phonemes --&gt; Words --&gt; Transcript # SystemAudio ---------------------------------------&gt; Transcript # End to end End to end deep learning gives data more freedom, it might not use phonemes when training! To build and end to end deep learning system that works well, we need a big dataset. If you have a small dataset the ordinary implementation of each stage is just fine. Another example: Suppose you want to build a face recognition system: 123Image-&gt;Image adjustments-&gt;Face detection-&gt;Face recognition-&gt;Matching # System.Image -----------------------------------&gt;Face recognition-&gt;Matching # End to endImage-&gt;Image adjustments-&gt;Face detection-------------------&gt;Matching # Best imp for now Best in practice now is the third approach. In the third implementation its a two steps approach where part is manually implemented and the other is using deep learning. Its working well because its harder to get a lot of pictures with people in front of the camera than getting faces of people and compare them. In the third implementation the NN takes two faces as an input and outputs if the two faces are the same or not. Another example: Suppose you want to build a machine translation system: 12English --&gt; Text analysis --&gt; ......................... --&gt; Fresh # System.English --------------------------------------------------&gt; Fresh # End to end Here end to end deep leaning system works well because we have enough data to build it. Whether to use end-to-end deep learning Here are some guidelines on Whether to use end-to-end deep learning. Pros of end to end deep learning: Let the data speak. Less hand designing of components needed. Cons of end to end deep learning: May need large amount of data. Excludes potentially useful hand design components. (It helps more on small dataset) Applying end to end deep learning: Do you have sufficient data to learn a function of the complexity needed to map x to y? These Notes were made by Mahmoud Badry @2017]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Course Note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Improving Deep Neural Networks]]></title>
    <url>%2FImproving-Deep-Neural-Networks%2F2019%2F03%2F29%2F</url>
    <content type="text"><![CDATA[Reference from lecture slides of Andrew Ng and github repo from DeepLearning.ai-Summary Table of contents Improving Deep Neural Networks: Hyperparameter tuning, Regularization and Optimization Table of contents Course summary Practical aspects of Deep Learning Train / Dev / Test sets Bias / Variance Basic Recipe for Machine Learning Regularization Dropout Regularization Understanding Dropout Other regularization methods Normalizing inputs Vanishing / Exploding gradients Weight Initialization for Deep Networks Numerical approximation of gradients Gradient checking implementation notes Optimization algorithms Mini-batch gradient descent Understanding mini-batch gradient descent Exponentially weighted averages Understanding exponentially weighted averages Bias correction in exponentially weighted averages Gradient descent with momentum RMSprop Adam optimization algorithm Learning rate decay The problem of local optima Hyperparameter tuning, Batch Normalization and Programming Frameworks Tuning process Using an appropriate scale to pick hyperparameters Hyperparameters tuning in practice: Pandas vs. Caviar Normalizing activations in a network Fitting Batch Normalization into a neural network Why does Batch normalization work Batch normalization at test time Softmax Regression Training a Softmax classifier Deep learning frameworks TensorFlow Extra Notes Course summary Here are the course summary as its given on the course link: This course will teach you the "magic" of getting deep learning to work well. Rather than the deep learning process being a black box, you will understand what drives performance, and be able to more systematically get good results. You will also learn TensorFlow. After 3 weeks, you will: - Understand industry best-practices for building deep learning applications. - Be able to effectively use the common neural network "tricks", including initialization, L2 and dropout regularization, Batch normalization, gradient checking, - Be able to implement and apply a variety of optimization algorithms, such as mini-batch gradient descent, Momentum, RMSprop and Adam, and check for their convergence. - Understand new best-practices for the deep learning era of how to set up train/dev/test sets and analyze bias/variance - Be able to implement a neural network in TensorFlow. This is the second course of the Deep Learning Specialization. Practical aspects of Deep Learning Train / Dev / Test sets Its impossible to get all your hyperparameters right on a new application from the first time. So the idea is you go through the loop: Idea ==&gt; Code ==&gt; Experiment. You have to go through the loop many times to figure out your hyperparameters. Your data will be split into three parts: Training set. (Has to be the largest set) Dev set or Validation set. Testing set. You will try to build a model upon training set then try to optimize hyperparameters on Dev set as much as possible. Then after your model is ready you try and evaluate the testing set. so the trend on the ratio of splitting the models: If size of the dataset is 100 to 1000000 ==&gt; 60/20/20 If size of the dataset is 1000000 to INF ==&gt; 98/1/1 or 99.5/0.25/0.25 The trend now gives the training data the biggest sets. Make sure the Training/Dev/test set is coming from the same distribution. For example if cat training pictures is from the web and the Dev/test pictures are from users cell phone they will mismatch. It is better to make them one distribution. The Dev set rule is to try them on some of the good models you've created. Its OK to only have a Dev set without a testing set. Almost all people call the Dev set as the test set. But a better terminology is to call it a Dev set as its used in the development. Bias / Variance Bias / Variance techniques are Easy to learn, but difficult to master. So here the explanation of Bias / Variance: If your model is underfitting (logistic regression of non linear data) it has a "high bias" If your model is overfitting then it has a "high variance" Your model will be alright if you balance the Bias / Variance For more: Another idea to get the bias / variance if you don't have a 2D plotting mechanism: High variance (overfitting) for example: Training error: 1% Dev error: 11% high Bias (underfitting) for example: Training error: 15% Dev error: 14% high Bias (underfitting) &amp;&amp; High variance (overfitting) for example: Training error: 15% Test error: 30% Best: Training error: 0.5% Test error: 1% These Assumptions came from that human has 0% error. If the problem isn't like that you'll need to use human error as baseline. Basic Recipe for Machine Learning If your algorithm has a high bias: Try to make your NN bigger (Size of Hidden units, Number of layers) Try a different model that are suitable for your data. Try to run it longer. Different optimization algorithm. If your algorithm has a high variance: More data. Try regularization. Try a different model that are suitable for your data. You should try the previous two points until you have a low bias / low variance. In the older days before deep learning there was a "Bias / variance trade off". But because now you have more options on solving the bias and variance problem its really helpful to use deep learning. Training a bigger neural network never hurt. Regularization Adding Regularization to NN will help it reduce variance (Overfitting) L1 matrix Norm: ||W|| = Sum(|W[i,j]|) # Sum of all Ws with abs L2 matrix Norm sometimes its called Frobenius norm: ||W||^2 = Sum(|W[i,j]|^2) #Sum of all Ws squared Also can be calculated using||W||^2 = W.T * W Regularization For logistic regression: The normal cost function that we want to minimize is: J(w,b) = (1/m) * Sum(L(y(i),y'(i))) The L2 Regularization version: J(w,b) = (1/m) * Sum(L(y(i),y'(i))) + (Lmda/2m) * ||W||^2 The L1 Regularization version: J(w,b) = (1/m) * Sum(L(y(i),y'(i))) + (Lmda/2m) * (||W||) The L1 Regularization version makes a lot of w values become zeros, which makes the model size is small. L2 Regularization is being used much often. Lmda here is the Regularization parameter (Hyperparameter) Regularization For NN: The normal cost function that we want to minimize is: J(W1,b1...,WL,bL) = (1/m) * Sum(L(y(i),y'(i))) The L2 Regularization version: J(w,b) = (1/m) * Sum(L(y(i),y'(i))) + (Lmda/2m) * Sum((||W[l]||) ^2) We stack the matrix as one vector (mn,1) and then we apply sqrt(w1^2+w2^2.....) To do back propagation (old way): w[l] = w[l] - learningRate * dw[l] The new way: dw[l] = (Back prob) + (Lmda/m)*w[l] So: w[l] = w[l] - (Lmda/m)*w[l] - learningRate * dw[l] w[l] = (1 - (learninRate*Lmda)/m) w[l] - learninRate*dw[l] In practice this penalizes large weights and effectively limits the freedom in your model. The new term (1 - (learninRate*Lmda)/m) w[l] causes the weight to decay in proportion to its size. Why regularization reduces overfitting? Here are some intuitions: Number 1 If Lmda is too large, as the equations we discussed before a lot of w's will be zeros which will make the NN act like logistic regression. If Lmda is good enough it will just reduce some weights that makes the neural network overfit. Number 2 (in Tanh activation function) If Lmda is too large, w's will be small which makes the Tanh activation function to be from non linear to linear which makes the NN a linear classifier. If Lmda good enough it will just make some Tanh activation a linear classifier which will prevent overfitting. Dropout Regularization In the most cases Andrew Ng tells that he uses the L1/L2 regularization. The dropout Regularization eliminates some neurons/weights on each iteration based on a probability. A technique called "Inverse dropout" is one of the techniques that are used to implement Inverse dropout. Code for Inverse dropout: 12345678910keep_prob = 0.8l = 3 # This code will work only on layer 3# the generated number that are less than 0.8 will be dropped. 80% stay, 20% droppedd3 = np.random.randn(a[l].shape[0], a[l].shape[1]) &lt; keep_proba3 = np.multiply(a3,d3) #Keeps only the values in d3# Maximize a3 again to gain the loss (The expected value of a3 is the same) - To solve the# scaling problema3 = a3 / keep_prob At test time we don't run the "Inverse dropout" Understanding Dropout Can't rely on one feature so have to spread out weights Dropout can have different dropouts per layer. The input layer drop out is has to be near 1 because we need to learn a lot from the input. A lot of researchers are using dropout with CNN. Downside of dropout is that the loss function is not well defined and it will be hard to debug. To solve that you'll need to set all the dropouts by 1 and then check your cost graph if its going well set the dropouts again. Other regularization methods Data augmentation: For example in a computer vision data: You can flip all your pictures horizontally this will give you m more data instances. You could also take a random position and rotation in an image to get more data. For example in OCR, you'll need to distort the digits. This technique's new data isn't as good as the real independent data, but still can be used as a Regularization technique. Early stopping: In this technique we plot the training data and the Dev data cost together. At some iteration the Dev data cost will stop decreasing. We will pick the point at which the training data graph and Dev data graph are best (lowest training cost with lowest dev cost). We will take these parameters as the best parameters. This technique is not recommended because it makes us think about something else more than optimize W's and b's. But its advantage is that you don't need to modify a Hyperparameter like in Regularization. Model Ensembles: Algorithm: Train multiple independent models. At test time average their results. It can get you extra 2% performance. It reduces the generalization error. You can use some snapshots of your NN at the training ensembles them and take the results. Normalizing inputs If you normalize your inputs this will speed up the training process a lot. Normalization are going on these steps: Get mean. Mean = (1/m) * sum(x(i)) Subtract the mean from each input. X = X - Mean This makes your inputs centered around 0. Get the variance. variance = (1/m) * sum(x(i)^2) Normalize the variance. X/= variance These steps should be applied to training, Dev, and testing sets. Why normalize? If we don't normalize the inputs our loss function will be deep and its shape is inconsistent then optimizing it will take a long time. But if we normalize it the opposite will occur. the shape of the function will be consistent and the optimizing will be easier. Vanishing / Exploding gradients The Vanishing / Exploding gradients occurs when your derivatives become very small or very big. To understand the problem, suppose that we have a deep neural network with number of layers L, and all the activation functions are linear and each b = 0 Then: 1Y&apos; = W[L]W[L-1].....W[2]W[1]X Then, if we have 2 layers, in each layer, we have two assumptions: 12Y&apos; = (W[L][1.5 0]^(L-1)) X = 1.5^L # which will be so large [0 1.5] 12Y&apos; = (W[L][0.5 0]^(L-1)) X = 0.5^L # which will be so small [0 0.5] The last example explains that the derivatives will be decreased/Increased exponentially. So If W &gt; I (Identity matrix) The weights will explode. And If W &lt; I (Identity matrix) The weights will vanish. Recently Microsoft trained 152 layers (ResNet)! which is a really big number. Weight Initialization for Deep Networks A partial solution to the Vanishing / Exploding gradients in NN is better or more careful choice of the random initialization of weights. In a single neuron (Perceptron model): Z = w1X1 + w2X2 + ...+wnXn So if Nx is large we want W's to be smaller to not explode the cost. So it turns out that we need the variance which equals 1/Nx to be the range of W's So lets say when we initialize W's we initialize like this (For Tanh its better to use this): 1np.random.rand(shape)*np.sqrt(1/n[l-1]) #n[l-1] In the multiple layers. Setting this to 2/n[l-1] especially for RELU is better: 1np.random.rand(shape)*np.sqrt(2/n[l-1]) #n[l-1] In the multiple layers. This is the best way to solve Vanishing / Exploding gradients (RELU + Weight Initialization with variance) The initialization in this video is called "He Initialization / Xavier Initialization" and has been published in 2015 paper. Numerical approximation of gradients There is an implementation called gradient check which tells if your implementation of back prob. is right. There's a numerical way to calculate the derivative This checking is so helpful at finding the errors in your back prob. algorithm but its slower than gradient descent. Implementation of this is so simple. Gradient checking: First take W[1],b[1]...W[L]b[L] and reshape into one big vector (Ceta) The cost function will be L(Ceta) Then take dW[1],db[1]......dW[L]db[L] into one big vector (d_ceta) Algorithm: 123eps = 10^-7 #Small numberfor i in len(Ceta): d_ceta_calc[i] = (J(ceta1,..,ceta[i] + eps) - J(ceta1,..,ceta[i] - eps)) / 2*eps Finally we check this formula (||d_ceta_calc - d_ceta||) / (||d_ceta_calc||+||d_ceta||) The || is the Euclidean distance. Gradient checking implementation notes Don't use the gradient-checking algorithm for all the calculation because its a much slow algorithm The gradient-checking is for debugging. If algorithm fails grad check, look at components to try to identify the bug. Don't forget to add (lamda/2m)sum(W[l]) to J if you are using L1 or L2 regularization. Gradient checking doesn't work with dropout. because J is not consistent. Run gradient checking at random initialization and train the network for a while maybe there's a bug that are not on the first iteration. Optimization algorithms Mini-batch gradient descent Training NN with a large data is slow. So to find an optimization algorithm that runs faster is a good idea. Suppose we have m = 50 million. To train this data it will take a huge processing time for one step. because 50 million won't fit in the memory at once we need other processing to make such a thing. It turns out you can make a faster algorithm to make gradient decent process some of your items even before you finish the 50 million items. Suppose we have split m to mini batches. X{1} = 0 ==&gt; 1000 X{2} = 1001 ==&gt; 2000 .... X{bs} = ... We similarly split X &amp; Y. So the definition of mini batches ==&gt; t: X{t}, Y{t} In Batch gradient descent We run the gradient decent on the whole dataset. While in Mini-Batch gradient descent We run the gradient decent on the mini datasets. Mini-Batch algorithm pseudo code: 12345for t = 1:No_of_batches #This is called on epoch AL, caches = forward_prop(X&#123;t&#125;, Y&#123;t&#125;) Cost = compute_cost(AL, Y&#123;t&#125;) grads = backward_prop(AL, caches) UpdateParameters(grads) The code inside an epoch should be vectorized. This works much faster in the large datasets. Understanding mini-batch gradient descent In mini batch algorithm, the cost won't go down with each step as batch algorithm do. It could contain some ups and downs but at whole it has to go down. Choosing mini-batch size If (mini batch size = m) ==&gt; Batch gradient descent If (mini batch size = 1) ==&gt; Stochastic gradient descent Might be faster than standard in big data &gt; 10^7 If (mini batch size = between 1 and m) ==&gt; Mini Batch gradient descent In Stochastic gradient descent is so noisy regarding cost minimization and won't reach the minimum cost. Also you lose vectorization advantage. In mini batch gradient descent is so noisy regarding cost minimization and won't reach the minimum cost. But you have the vectorization advantage and you can look at the costs when the code is running to see if its right. To help with the noisy cost minimization you should reduce the learning rate. Guidelines for using mini batch: It has to be a power of 2 to take advantage of vectorization: 64, 128, 256, 512, 1024.... Make sure mini-batch fits in CPU/GPU Mini batch size is a Hyperparameter. Exponentially weighted averages There are optimization algorithms that are better than gradient descent. but you should first learn about Exponentially weighted averages. If we have data like the temperature of day through the year it could be like this: 123456t(1) = 40t(2) = 49t(3) = 45..t(180) = 60.. This data is small in winter and big in summer. If we plot this data we will find it some noisy. Now lets compute the Exponentially weighted averages: 12345V0 = 0V1 = 0.9 * V0 + 0.1 * t(1) = 4 # 0.9 and 0.1 are hyperparametersV2 = 0.9 * V1 + 0.1 * t(2) = 8.5V3 = 0.9 * V2 + 0.1 * t(3) = 12.15... If we plot this it will represent averages. Another imagery example: Taken from: investopedia.com General equation 1V(t) = beta v(t-1) + (1-beta) ceta(t) If beta = 0.9 then we are averaging through this equation: (1/ (1-beta)) Then beta = 0.9 will average last 10 entries. beta = 0.98 will average last 50 entries. beta = 0.5 will average last 2 entries. Best beta average for our case is between 0.9 and 0.98 Understanding exponentially weighted averages Intuitions: We can implement this algorithm with more accurate results if we make a moving window. But the code is more efficient and faster using the exponentially weighted averages algorithm. Algorithm is so simple: 123456V = 0Repeat&#123; Get ceta(t) V = beta * V + (1-beta) * ceta(t)&#125; Bias correction in exponentially weighted averages The bias correction helps making the exponentially weighted averages more accurate. Because V(0) = 0, the bias of the weighted averages is shifted and the accuracy suffers. To solve the bias issue we have to use this equation: 1V(t) = (beta v(t-1) + (1-beta) ceta(t)) / (1 - beta^t) As you see the as t became larger the (1 - beta^t) became 1 Gradient descent with momentum The momentum algorithm works faster than standard Gradient descent. The simple idea is to calculate the exponentially weighted averages for your gradients and then updates your weights with the new values. Pseudo code: 123456789VdW = 0, Vdb = 0on iteration t: # The mini batch can be the whole batch its ok compute dw, db on current mini batch VdW = (beta * VdW) + (1 - beta)dW Vdb = (beta * Vdb) + (1 - beta)db W = W - learning_rate * VdW b = B - learning_rate * Vdb This will help the cost function to go to the minimum point in a more fast and consistent way. beta = 0.9 is working very well for lots of people. In practice people don't bother with Bias correction (They leave the first iterations to work as they want) RMSprop Stands for Root mean square prop. This algorithm speeds up the Gradient descent. Pseudo code: 123456789SdW = 0, Sdb = 0on iteration t: # The mini batch can be the whole batch its ok compute dw, db on current mini batch SdW = (beta * SdW) + (1 - beta)dW^2 Sdb = (beta * Sdb) + (1 - beta)db^2 W = W - learning_rate * dW/sqrt(SdW) b = B - learning_rate * db/sqrt(Sdb) This algorithm will make the cost function move on the vertical direction slow and the horizontal direction fast, in the following example. Ensure that SdW is not zero by adding a small value to it (epsilon). W = W - learning_rate * dW/(sqrt(SdW) + epsilon) With this algorithm you can increase your learning rate. Developed by Jeoffery Hinton on Coursea.com. Adam optimization algorithm Stands for Adaptive Momentum Estimation. Adam optimization and RMSprop are among the optimization algorithms that worked very well with a lot of NN architectures. Adam optimization simply puts RMSprop and momentum and puts the together! Pseudo code: 1234567891011121314151617181920VdW = 0, VdW = 0SdW = 0, Sdb = 0on iteration t: # The mini batch can be the whole batch its ok compute dw, db on current mini batch VdW = (beta1 * dW) + (1 - beta1)dW #Momentum Vdb = (beta1 * db) + (1 - beta1)db #Momentum SdW = (beta2 * dW) + (1 - beta2)dW^2 #RMSprop Sdb = (beta2 * db) + (1 - beta2)db^2 #RMSprop VdW = VdW/ (1 - beta^t) #Fixing bias Vdb = Vdb/ (1 - beta^t) #Fixing bias SdW = SdW/ (1 - beta^t) #Fixing bias Sdb = Sdb/ (1 - beta^t) #Fixing bias W = W - learning_rate * VdW/(sqrt(SdW) + epsilon) b = B - learning_rate * Vdb/(sqrt(Sdb) + epsilon) Hyperparameters: Learning rate: needed to be tuned. Beta1. Parameter of the momentum. 0.9 is recommended by default. Beta2. Parameter of the RMSprop. 0.999 is recommended by default. epsilon. 10^-8 is recommended by default. Learning rate decay Slowly reduce learning rate. In mini batch algorithm, we said that the minimization of the cost won't reach optimum point. But by making the learning rate decays with iterations it will reach it as the steps beside the optimum is small. One technique equations islearning_rate = (1 / (1 + decay_rate * epoch_num)) * learning_rate_0 epoch_num is over all data (not a single mini batch). Other learning rate decay methods (Continuous): learning_rate = (0.95 ^ epoch_num) * learning_rate_0 learning_rate = (k / sqrt(epoch_num)) * learning_rate_0 Some people is making changing the learning rate manually. For Andrew Ng, learning rate decay has less priority The problem of local optima The normal local optima is not likely to appear in a deep neural network. You are unlikely to get stuck in a bad local optima in high dimensions. Plateaus can make learning slow. Plateaus is an area of fairly level high ground. This is where algorithms like momentum and Adam helps. Hyperparameter tuning, Batch Normalization and Programming Frameworks Tuning process We need some steps to tune our Hyperparameters to get the best out of them. So far the Hyperparameters importance are (As to Andrew Ng) Learning rate. Mini-batch size. No. of hidden units. Momentum beta. No. of layers. Use learning rate decay? Adam beta1 &amp; beta2 regularization lambda Activation functions Its hard to decide which Hyperparameter is the more important in a problem. It depends much on your problem. One of the ideas to tune is to make a box with N Hyperparameter settings and then try the N settings on your problem. You can use Coarse to fine box and randomly initialize it the hyperparameters. Then if you find some values that gives you a better values. Zoom into the box. This methods can be automated! Using an appropriate scale to pick hyperparameters If you have a specific range for a hyper parameter lets say from "a" to "b". Lets demonstrate the logarithmic scale, this will give you a good random points: Calculate: aLog = log(a) # Ex. a = 0.0001 then aLog = -4 Calculate: bLog = log(b) # Ex. b = 1 then bLog = 0 Then: write this code: 123r = (aLog-bLog) * np.random.rand() + bLog# In our Ex the range would be from [-4, 0] because rand range [0,1)result = 10^r It uniformly samples values from [a, b] as r. - If we want to use the last method on exploring on the "momentum beta": - Beta best range is from 0.9 to 0.999 - You should scale this to 1-Beta = 0.001 to 0.1 and the use a = 0.001 and b = 0.1 - And remember to subtract 1 from the resulted random value. Hyperparameters tuning in practice: Pandas vs. Caviar If you don't have a much computational resources you will go thought "The baby sit model" Run the model with different hyperparameters day by day. Check at the end of each day if there are a progress or not. You run one model at a time. Called panda approach If you have computational resources, you can run some models in parallel and at the end of the day(s) you check the results. Called Caviar model. Normalizing activations in a network In the current evolution of deep learning an algorithm called Batch Normalization is so important. Made by Sergey Ioffe and Christian Szegedy. Batch Normalization speeds up learning. We discussed before that we can normalize input using the mean and variance method. This helped a lot in the shape of the cost function and reaching the minimum point in a more faster way! The question is For any hidden layer can we normalize A[l] to train W[l], b[l] faster?. This is what batch normalization is about. Some papers normalize Z[l] and some normalize A[l]. Most of them uses Z[l] and recommended from Andrew Ng. Algorithm Given Z[l] = [z(1) z(2) .. z(m)] #i = 1 to m (for one input) Compute mean[i] = 1/m * sum(z[i]) Compute Variance[i] = 1/m * sum((z[i] - mean)^2) Then Z_norm[i] = (z(i) - mean) / np.sqrt(Variance + epsilon) Forcing the outputs to a specific distribution. Then Z_dash[i] = alpha * Z_norm[i] + beta alpha and beta are learnable parameters. Making the NN learn the distribution of the outputs. Fitting Batch Normalization into a neural network Using batch norm in 3 hidden layers NN: Our NN parameters will be: W[1], b[1], W[2], b[2], W[3], b[3], beta[1], alpha[1], beta[2], alpha[2], beta[3], alpha[3] If you are using a deep learning framework, You won't have to implement batch norm yourself. Ex. in Tensorflow you can add this line: tf.nn.batch-normalization() If we are using batch norm the parameter b[1], b[2],.... Doesn't count because: Z[l] = W[l]A[l-1] + b[l] Z_N[l] = alpha[l] * Z_norm[l] + beta[l] Taking the mean of a constant b[l] will eliminate the b[l] So if you are using batch normalization, you can remove b[l] or make it always zero. So the parameter will be Ws, betas, and alphas. Shapes: Z[l] #(n[l], m) alpha[l] #(n[l], m) beta[l] #(n[l], m) Why does Batch normalization work The first reason is the same reason as why we normalize X. The second reason is that batch normalization reduces the problem of input values changing. Batch norm does some regularization: Each mini batch is scaled by the mean/variance computed of that mini batch. -This adds some noise to the values Z[l] within that mini batch. Similar to dropout it adds some noise to each hidden layer activation This has a slight regularization effect. To reduce this regularization effect you can make your mini batch bigger. If you need regularization you cant just rely on that slight regularization you'll need to add your regularization (L2 or dropout). Batch normalization at test time When we train a NN with Batch normalization, we compute the mean and the variance of the size of mini-batch. In testing we have to test one by one example. The mean and the variance of one example doesn't make sense! We have to compute an estimate value of mean and variance to use it in the testing time. We can use the weighted average across the mini batches. We will use the estimate values of the mean and variance to test. There are another method to estimate this value called "Running average" In practice don't worry as you will use a deep learning framework and it will contain some default of doing such a thing. Softmax Regression Every example we have used so far are talking about classification on only two classes. There are a generalization of logistic regression called Softmax regression that are more general. For example if we are classifying dogs, cat, and none of that Dog class = 1 Cat class = 2 None class = 0 To represent a dog vector y = [1 0 0] To represent a cat vector y = [0 1 0] To represent a none vector y = [0 0 1] We will use these notations: C = no. Of classes Range of classes is (0,...C-1) In output layer. Ny = C Each of the output layers will contain a probability if the class is true. In the last layer we will have to activate the Softmax activation function instead of the sigmoid activation. Softmax activation equations: 12t = e^(Z[L]) # shape(C, m)A[L] = e^(Z[L]) / sum(t, C) # shape(C, m) Training a Softmax classifier There's an activation which is called hard max, which gets 1 for the maximum value and zeros for the others. If you are using NumPy, its np.max over the vertical axis. The Softmax name came from Softening the values and not harding them like hard max. Softmax is a generalization of logistic regression with two or more classes. The loss function used with Softmax: 1L(y,y_dash) = -sum(y[i]*log(y_dash), C) The cost function used with Softmax: 1J(w[1], b[1], ....) = -1/m * (sum(L(y[i],y_dash[i]), m)) Back propagation with Softmax: 1dZ[L] = Y_dash - Y The derivative of Softmax is: 1Y_dash( 1 - Y_dash) Example: Deep learning frameworks Its not practical to implement everything from scratch. Out last implementations was to know how NN works. There are many good deep learning frameworks. Deep learning is now in the phase of doing something with the frameworks and not from scratch to keep on going. Here are some of the leading deep learning frameworks: Caffe/ Caffe2 CNTK DL4j Keras Lasagne mxnet PaddlePaddle TensorFlow Theano Torch/Pytorch These frameworks are getting better month by month. Comparison between them can be found here. How to choose deep learning framework: Ease of programming (development and deployment) Running speed Truly open (Open source with good governance) Programing frameworks can not only shorten your coding time, but sometimes also perform optimizations that speed up your code. TensorFlow In this section we will learn the basic structure of TensorFlow. Lets see how implement a minimization function: Function: J(w) = w^2 - 10w + 25 the result should be w = 5 as the function is (w-5)^2 = 0 Code V1: 12345678910111213141516w = tf.Variable(0, dtype=tf.float32) # Creating a variable wcost = tf.add(tf.add(w**2, tf.multiply(-10.0, w)), 25.0) # can be written as this [cost = w**2 - 10*w + 25]train = tf.train.GradientDescentOptimizer(0.01).minimize(cost)init = tf.global_variables_initializer()session = tf.Session()session.run(init)session.run(w) # Runs the definition of w, if you print this it will print zerosession.run(train)print(&quot;W after one run: &quot;, session.run(w))for i in range(1000): session.run(train)print(&quot;W after 1000 run: &quot;, session.run(w)) Code V2 (we feed the inputs to the algorithm through coefficient): 1234567891011121314151617181920coefficient = np.array([[1.], [-10.], [25.]])x = tf.placeholder(tf.float32, [3, 1])w = tf.Variable(0, dtype=tf.float32) # Creating a variable wcost = x[0][0]*w**2 + x[1][0]*w + x[2][0]train = tf.train.GradientDescentOptimizer(0.01).minimize(cost)init = tf.global_variables_initializer()session = tf.Session()session.run(init)session.run(w) # Runs the definition of w, if you print this it will print zerosession.run(train, feed_dict=&#123;x: coefficient&#125;)print(&quot;W after one run: &quot;, session.run(w))for i in range(1000): session.run(train, feed_dict=&#123;x: coefficient&#125;)print(&quot;W after 1000 run: &quot;, session.run(w)) In TensorFlow you implement the forward propagation and TensorFlow will do the back propagation because it knows how to do it. In TensorFlow a placeholder is a variable you can assign a value to later. If you are using a mini-batch training you should change the feed_dict={x: coefficient} to the current mini batch. Almost all TensorFlow program uses this: 123with tf.Session() as session: # Because its better at clean up. session.run(init) session.run(w) In deep learning frameworks there are a lot of things that you can do with one line of code like changing the optimizer. Writing and running programs in TensorFlow has the following steps: Create Tensors (variables) that are not yet executed/evaluated. Write operations between those Tensors. Initialize your Tensors. Create a Session. Run the Session. This will run the operations you'd written above. Instead of needing to write code to compute the cost function we know, we can use this line in TensorFlow : tf.nn.sigmoid_cross_entropy_with_logits(logits = ..., labels = ...) To initialize weights in NN using TensorFlow use: 123W1 = tf.get_variable(&quot;W1&quot;, [25,12288], initializer = tf.contrib.layers.xavier_initializer(seed = 1))b1 = tf.get_variable(&quot;b1&quot;, [25,1], initializer = tf.zeros_initializer()) For 3 layers NN, It is important to note that the forward propagation stops at Z3. The reason is that in TensorFlow the last linear layer output is given as input to the function computing the loss. Therefore, you don't need A3! To reset the graph tf.reset_default_graph() Extra Notes If you want a good papers in deep learning look at the ICLR proceedings (Or NIPS proceedings) and that will give you a really good view of the field. Who is Yuanqing Lin? Head of Baidu research. First one to win ImageNet Works in PaddlePaddle deep learning platform. These Notes were made by Mahmoud Badry @2017]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Course Note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Neural Networks and Deep Learning]]></title>
    <url>%2FNeural-Networks-and-Deep-Learning%2F2019%2F03%2F29%2F</url>
    <content type="text"><![CDATA[Reference from lecture slides of Andrew Ng and github repo from DeepLearning.ai-Summary Table of contents Neural Networks and Deep Learning Table of contents Course summary Introduction to deep learning What is a (Neural Network) NN? Supervised learning with neural networks Why is deep learning taking off? Neural Networks Basics Binary classification Logistic regression Logistic regression cost function Gradient Descent Derivatives More Derivatives examples Computation graph Derivatives with a Computation Graph Logistic Regression Gradient Descent Gradient Descent on m Examples Vectorization Vectorizing Logistic Regression Notes on Python and NumPy General Notes Shallow neural networks Neural Networks Overview Neural Network Representation Computing a Neural Network's Output Vectorizing across multiple examples Activation functions Why do you need non-linear activation functions? Derivatives of activation functions Gradient descent for Neural Networks Random Initialization Deep Neural Networks Deep L-layer neural network Forward Propagation in a Deep Network Getting your matrix dimensions right Why deep representations? Building blocks of deep neural networks Forward and Backward Propagation Parameters vs Hyperparameters What does this have to do with the brain Extra: Ian Goodfellow interview Course summary Here are the course summary as its given on the course link: If you want to break into cutting-edge AI, this course will help you do so. Deep learning engineers are highly sought after, and mastering deep learning will give you numerous new career opportunities. Deep learning is also a new "superpower" that will let you build AI systems that just weren't possible a few years ago. In this course, you will learn the foundations of deep learning. When you finish this class, you will: - Understand the major technology trends driving Deep Learning - Be able to build, train and apply fully connected deep neural networks - Know how to implement efficient (vectorized) neural networks - Understand the key parameters in a neural network's architecture This course also teaches you how Deep Learning actually works, rather than presenting only a cursory or surface-level description. So after completing it, you will be able to apply deep learning to a your own applications. If you are looking for a job in AI, after this course you will also be able to answer basic interview questions. Introduction to deep learning Be able to explain the major trends driving the rise of deep learning, and understand where and how it is applied today. What is a (Neural Network) NN? Single neuron == linear regression Simple NN graph: Image taken from tutorialspoint.com RELU stands for rectified linear unit is the most popular activation function right now that makes deep NNs train faster now. Hidden layers predicts connection between inputs automatically, thats what deep learning is good at. Deep NN consists of more hidden layers (Deeper layers) Image taken from opennn.net Each Input will be connected to the hidden layer and the NN will decide the connections. Supervised learning means we have the (X,Y) and we need to get the function that maps X to Y. Supervised learning with neural networks Different types of neural networks for supervised learning which includes: CNN or convolutional neural networks (Useful in computer vision) RNN or Recurrent neural networks (Useful in Speech recognition or NLP) Standard NN (Useful for Structured data) Hybrid/custom NN or a Collection of NNs types Structured data is like the databases and tables. Unstructured data is like images, video, audio, and text. Structured data gives more money because companies relies on prediction on its big data. Why is deep learning taking off? Deep learning is taking off for 3 reasons: Data: Using this image we can conclude: For small data NN can perform as Linear regression or SVM (Support vector machine) For big data a small NN is better that SVM For big data a big NN is better that a medium NN is better that small NN. Hopefully we have a lot of data because the world is using the computer a little bit more Mobiles IOT (Internet of things) Computation: GPUs. Powerful CPUs. Distributed computing. ASICs Algorithm: Creative algorithms has appeared that changed the way NN works. For example using RELU function is so much better than using SIGMOID function in training a NN because it helps with the vanishing gradient problem. ​ Neural Networks Basics Learn to set up a machine learning problem with a neural network mindset. Learn to use vectorization to speed up your models. Binary classification Mainly he is talking about how to do a logistic regression to make a binary classifier. Image taken from 3.bp.blogspot.com He talked about an example of knowing if the current image contains a cat or not. Here are some notations: M is the number of training vectors Nx is the size of the input vector Ny is the size of the output vector X(1) is the first input vector Y(1) is the first output vector X = [x(1) x(2).. x(M)] Y = (y(1) y(2).. y(M)) We will use python in this course. In NumPy we can make matrices and make operations on them in a fast and reliable time. Logistic regression Algorithm is used for classification algorithm of 2 classes. Equations: Simple equation: y = wx + b If x is a vector: y = w(transpose)x + b If we need y to be in between 0 and 1 (probability): y = sigmoid(w(transpose)x + b) In some notations this might be used: y = sigmoid(w(transpose)x) While b is w0 of w and we add x0 = 1. but we won't use this notation in the course (Andrew said that the first notation is better). In binary classification Y has to be between 0 and 1. In the last equation w is a vector of Nx and b is a real number Logistic regression cost function First loss function would be the square root error: L(y',y) = 1/2 (y' - y)^2 But we won't use this notation because it leads us to optimization problem which is non convex, means it contains local optimum points. This is the function that we will use: L(y',y) = - (y*log(y') + (1-y)*log(1-y')) To explain the last function lets see: if y = 1 ==&gt; L(y',1) = -log(y') ==&gt; we want y' to be the largest ==&gt; y' biggest value is 1 if y = 0 ==&gt; L(y',0) = -log(1-y') ==&gt; we want 1-y' to be the largest ==&gt; y' to be smaller as possible because it can only has 1 value. Then the Cost function will be: J(w,b) = (1/m) * Sum(L(y'[i],y[i])) The loss function computes the error for a single training example; the cost function is the average of the loss functions of the entire training set. Gradient Descent We want to predict w and b that minimize the cost function. Our cost function is convex. First we initialize w and b to 0,0 or initialize them to a random value in the convex function and then try to improve the values the reach minimum value. In Logistic regression people always use 0,0 instead of random. The gradient decent algorithm repeats: w = w - alpha * dw where alpha is the learning rate and dw is the derivative of w (Change to w) The derivative is also the slope of w Looks like greedy algorithms. the derivative give us the direction to improve our parameters. The actual equations we will implement: w = w - alpha * d(J(w,b) / dw) (how much the function slopes in the w direction) b = b - alpha * d(J(w,b) / db) (how much the function slopes in the d direction) Derivatives We will talk about some of required calculus. You don't need to be a calculus geek to master deep learning but you'll need some skills from it. Derivative of a linear line is its slope. ex. f(a) = 3a d(f(a))/d(a) = 3 if a = 2 then f(a) = 6 if we move a a little bit a = 2.001 then f(a) = 6.003 means that we multiplied the derivative (Slope) to the moved area and added it to the last result. More Derivatives examples f(a) = a^2 ==&gt; d(f(a))/d(a) = 2a a = 2 ==&gt; f(a) = 4 a = 2.0001 ==&gt; f(a) = 4.0004 approx. f(a) = a^3 ==&gt; d(f(a))/d(a) = 3a^2 f(a) = log(a) ==&gt; d(f(a))/d(a) = 1/a To conclude, Derivative is the slope and slope is different in different points in the function thats why the derivative is a function. Computation graph Its a graph that organizes the computation from left to right. Derivatives with a Computation Graph Calculus chain rule says: If x -&gt; y -&gt; z (x effect y and y effects z) Then d(z)/d(x) = d(z)/d(y) * d(y)/d(x) The video illustrates a big example. We compute the derivatives on a graph from right to left and it will be a lot more easier. dvar means the derivatives of a final output variable with respect to various intermediate quantities. Logistic Regression Gradient Descent In the video he discussed the derivatives of gradient decent example for one sample with two features x1 and x2. Gradient Descent on m Examples Lets say we have these variables: 1234567X1 FeatureX2 FeatureW1 Weight of the first feature.W2 Weight of the second feature.B Logistic Regression parameter.M Number of training examplesY(i) Expected output of i So we have: Then from right to left we will calculate derivations compared to the result: 12345d(a) = d(l)/d(a) = -(y/a) + ((1-y)/(1-a))d(z) = d(l)/d(z) = a - yd(W1) = X1 * d(z)d(W2) = X2 * d(z)d(B) = d(z) From the above we can conclude the logistic regression pseudo code: 12345678910111213141516171819202122J = 0; dw1 = 0; dw2 =0; db = 0; # Devs.w1 = 0; w2 = 0; b=0; # Weightsfor i = 1 to m # Forward pass z(i) = W1*x1(i) + W2*x2(i) + b a(i) = Sigmoid(z(i)) J += (Y(i)*log(a(i)) + (1-Y(i))*log(1-a(i))) # Backward pass dz(i) = a(i) - Y(i) dw1 += dz(i) * x1(i) dw2 += dz(i) * x2(i) db += dz(i)J /= mdw1/= mdw2/= mdb/= m# Gradient descentw1 = w1 - alpa * dw1w2 = w2 - alpa * dw2b = b - alpa * db The above code should run for some iterations to minimize error. So there will be two inner loops to implement the logistic regression. Vectorization is so important on deep learning to reduce loops. In the last code we can make the whole loop in one step using vectorization! Vectorization Deep learning shines when the dataset are big. However for loops will make you wait a lot for a result. Thats why we need vectorization to get rid of some of our for loops. NumPy library (dot) function is using vectorization by default. The vectorization can be done on CPU or GPU thought the SIMD operation. But its faster on GPU. Whenever possible avoid for loops. Most of the NumPy library methods are vectorized version. Vectorizing Logistic Regression We will implement Logistic Regression using one for loop then without any for loop. As an input we have a matrix X and its [Nx, m] and a matrix Y and its [Ny, m]. We will then compute at instance [z1,z2...zm] = W' * X + [b,b,...b]. This can be written in python as: Z = np.dot(W.T,X) + b # Vectorization, then broadcasting, Z shape is (1, m) A = 1 / 1 + np.exp(-Z) # Vectorization, A shape is (1, m) Vectorizing Logistic Regression's Gradient Output: dz = A - Y # Vectorization, dz shape is (1, m) dw = np.dot(X, dz.T) / m # Vectorization, dw shape is (Nx, 1) db = dz.sum() / m # Vectorization, dz shape is (1, 1) Notes on Python and NumPy In NumPy, obj.sum(axis = 0) sums the columns while obj.sum(axis = 1) sums the rows. In NumPy, obj.reshape(1,4) changes the shape of the matrix by broadcasting the values. Reshape is cheap in calculations so put it everywhere you're not sure about the calculations. Broadcasting works when you do a matrix operation with matrices that doesn't match for the operation, in this case NumPy automatically makes the shapes ready for the operation by broadcasting the values. Some tricks to eliminate all the strange bugs in the code: If you didn't specify the shape of a vector, it will take a shape of (m,) and the transpose operation won't work. You have to reshape it to (m, 1) Try to not use the rank one matrix in ANN Don't hesitate to use assert(a.shape == (5,1)) to check if your matrix shape is the required one. If you've found a rank one matrix try to run reshape on it. Jupyter / IPython notebooks are so useful library in python that makes it easy to integrate code and document at the same time. It runs in the browser and doesn't need an IDE to run. To open Jupyter Notebook, open the command line and call: jupyter-notebook It should be installed to work. To Compute the derivative of Sigmoid: 12s = sigmoid(x)ds = s * (1 - s) # derivative using calculus To make an image of (width,height,depth) be a vector, use this: 1v = image.reshape(image.shape[0]*image.shape[1]*image.shape[2],1) #reshapes the image. Gradient descent converges faster after normalization of the input matrices. General Notes The main steps for building a Neural Network are: Define the model structure (such as number of input features and outputs) Initialize the model's parameters. Loop. Calculate current loss (forward propagation) Calculate current gradient (backward propagation) Update parameters (gradient descent) Preprocessing the dataset is important. Tuning the learning rate (which is an example of a "hyperparameter") can make a big difference to the algorithm. kaggle.com is a good place for datasets and competitions. Pieter Abbeel is one of the best in deep reinforcement learning. Shallow neural networks Learn to build a neural network with one hidden layer, using forward propagation and backpropagation. Neural Networks Overview In logistic regression we had: 123X1 \ X2 ==&gt; z = XW + B ==&gt; a = Sigmoid(z) ==&gt; l(a,Y)X3 / In neural networks with one layer we will have: 123X1 \ X2 =&gt; z1 = XW1 + B1 =&gt; a1 = Sigmoid(a1) =&gt; z2 = a1W2 + B2 =&gt; a2 = Sigmoid(z2) =&gt; l(a2,Y)X3 / X is the input vector (X1, X2, X3), and Y is the output variable (1x1) NN is stack of logistic regression objects. Neural Network Representation We will define the neural networks that has one hidden layer. NN contains of input layers, hidden layers, output layers. Hidden layer means we cant see that layers in the training set. a0 = x (the input layer) a1 will represent the activation of the hidden neurons. a2 will represent the output layer. We are talking about 2 layers NN. The input layer isn't counted. Computing a Neural Network's Output Equations of Hidden layers: Here are some informations about the last image: noOfHiddenNeurons = 4 Nx = 3 Shapes of the variables: W1 is the matrix of the first hidden layer, it has a shape of (noOfHiddenNeurons,nx) b1 is the matrix of the first hidden layer, it has a shape of (noOfHiddenNeurons,1) z1 is the result of the equation z1 = W1*X + b, it has a shape of (noOfHiddenNeurons,1) a1 is the result of the equation a1 = sigmoid(z1), it has a shape of (noOfHiddenNeurons,1) W2 is the matrix of the second hidden layer, it has a shape of (1,noOfHiddenLayers) b2 is the matrix of the second hidden layer, it has a shape of (1,1) z2 is the result of the equation z2 = W2*a1 + b, it has a shape of (1,1) a2 is the result of the equation a2 = sigmoid(z2), it has a shape of (1,1) Vectorizing across multiple examples Pseudo code for forward propagation for the 2 layers NN: 12345for i = 1 to m z[1, i] = W1*x[i] + b1 # shape of z[1, i] is (noOfHiddenNeurons,1) a[1, i] = sigmoid(z[1, i]) # shape of a[1, i] is (noOfHiddenNeurons,1) z[2, i] = W2*a[1, i] + b2 # shape of z[2, i] is (1,1) a[2, i] = sigmoid(z[2, i]) # shape of a[2, i] is (1,1) Lets say we have X on shape (Nx,m). So the new pseudo code: 1234Z1 = W1X + b1 # shape of Z1 (noOfHiddenNeurons,m)A1 = sigmoid(Z1) # shape of A1 (noOfHiddenNeurons,m)Z2 = W2A1 + b2 # shape of Z2 is (1,m)A2 = sigmoid(Z2) # shape of A2 is (1,m) If you notice always m is the number of columns. In the last example we can call X = A0. So the previous step can be rewritten as: 1234Z1 = W1A0 + b1 # shape of Z1 (noOfHiddenNeurons,m)A1 = sigmoid(Z1) # shape of A1 (noOfHiddenNeurons,m)Z2 = W2A1 + b2 # shape of Z2 is (1,m)A2 = sigmoid(Z2) # shape of A2 is (1,m) Activation functions So far we are using sigmoid, but in some cases other functions can be a lot better. Sigmoid can lead us to gradient decent problem where the updates are so low. Sigmoid activation function range is [0,1] A = 1 / (1 + np.exp(-z)) # Where z is the input matrix Tanh activation function range is [-1,1] (Shifted version of sigmoid function) In NumPy we can implement Tanh using one of these methods: A = (np.exp(z) - np.exp(-z)) / (np.exp(z) + np.exp(-z)) # Where z is the input matrix Or A = np.tanh(z) # Where z is the input matrix It turns out that the tanh activation usually works better than sigmoid activation function for hidden units because the mean of its output is closer to zero, and so it centers the data better for the next layer. Sigmoid or Tanh function disadvantage is that if the input is too small or too high, the slope will be near zero which will cause us the gradient decent problem. One of the popular activation functions that solved the slow gradient decent is the RELU function. RELU = max(0,z) # so if z is negative the slope is 0 and if z is positive the slope remains linear. So here is some basic rule for choosing activation functions, if your classification is between 0 and 1, use the output activation as sigmoid and the others as RELU. Leaky RELU activation function different of RELU is that if the input is negative the slope will be so small. It works as RELU but most people uses RELU. Leaky_RELU = max(0.01z,z) #the 0.01 can be a parameter for your algorithm. In NN you will decide a lot of choices like: No of hidden layers. No of neurons in each hidden layer. Learning rate. (The most important parameter) Activation functions. And others.. It turns out there are no guide lines for that. You should try all activation functions for example. Why do you need non-linear activation functions? If we removed the activation function from our algorithm that can be called linear activation function. Linear activation function will output linear activations Whatever hidden layers you add, the activation will be always linear like logistic regression (So its useless in a lot of complex problems) You might use linear activation function in one place - in the output layer if the output is real numbers (regression problem). But even in this case if the output value is non-negative you could use RELU instead. Derivatives of activation functions Derivation of Sigmoid activation function: 123g(z) = 1 / (1 + np.exp(-z))g&apos;(z) = (1 / (1 + np.exp(-z))) * (1 - (1 / (1 + np.exp(-z))))g&apos;(z) = g(z) * (1 - g(z)) Derivation of Tanh activation function: 12g(z) = (e^z - e^-z) / (e^z + e^-z)g&apos;(z) = 1 - np.tanh(z)^2 = 1 - g(z)^2 Derivation of RELU activation function: 123g(z) = np.maximum(0,z)g&apos;(z) = &#123; 0 if z &lt; 0 1 if z &gt;= 0 &#125; Derivation of leaky RELU activation function: 123g(z) = np.maximum(0.01 * z, z)g&apos;(z) = &#123; 0.01 if z &lt; 0 1 if z &gt;= 0 &#125; Gradient descent for Neural Networks In this section we will have the full back propagation of the neural network (Just the equations with no explanations). Gradient descent algorithm: NN parameters: n[0] = Nx n[1] = NoOfHiddenNeurons n[2] = NoOfOutputNeurons = 1 W1 shape is (n[1],n[0]) b1 shape is (n[1],1) W2 shape is (n[2],n[1]) b2 shape is (n[2],1) Cost function I = I(W1, b1, W2, b2) = (1/m) * Sum(L(Y,A2)) Then Gradient descent: 1234567Repeat: Compute predictions (y&apos;[i], i = 0,...m) Get derivatives: dW1, db1, dW2, db2 Update: W1 = W1 - LearningRate * dW1 b1 = b1 - LearningRate * db1 W2 = W2 - LearningRate * dW2 b2 = b2 - LearningRate * db2 Forward propagation: 1234Z1 = W1A0 + b1 # A0 is XA1 = g1(Z1)Z2 = W2A1 + b2A2 = Sigmoid(Z2) # Sigmoid because the output is between 0 and 1 Back propagation (The new thing / derivations): 1234567dZ2 = A2 - Y # derivative of cost function we used * derivative of the sigmoid functiondW2 = (dZ2 * A1.T) / mdb2 = Sum(dZ2) / mdZ1 = (W2.T * dZ2) * g&apos;1(Z1) # element wise product (*)dW2 = (dZ1 * A0.T) / m # A0 = Xdb2 = Sum(dZ1) / m# Hint there are transposes when you are trying to multiplicate because these are matrices. How we derived the 6 equations of the back propagation: Random Initialization In logistic regression it wasn't important to initialize the weights randomly, while in NN we have to initialize them randomly. If we initialize all the weights with zeros in NN it won't work (initializing bias with zero is OK): all hidden units will be completely identical (symmetric) - compute exactly the same function on each gradient descent iteration all the hidden units will always update the same To solve this we initialize the W's with a small random numbers: 12W1 = np.random.randn((2,2)) * 0.01 # 0.01 to make it small enoughb1 = np.zeros((2,1)) # its ok to have b as zero, it won&apos;t get us to the symmetry breaking problem We need small values because in sigmoid (or tanh), for example, if the weight is too large you are more likely to end up even at the very start of training with very large values of Z. Which causes your tanh or your sigmoid activation function to be saturated, thus slowing down learning. If you don't have any sigmoid or tanh activation functions throughout your neural network, this is less of an issue. Constant 0.01 is alright for 1 hidden layer networks, but if the NN is deep this number can be changed but it will always be a small number. Deep Neural Networks Understand the key computations underlying deep learning, use them to build and train deep neural networks, and apply it to computer vision. Deep L-layer neural network Shallow NN is a NN with one or two layers. Deep NN is a NN with three or more layers. We will use the notation L to denote the number of layers in a NN. n[l] is the number of neurons in a specific layer l. n[0] denotes the number of neurons input layer. n[L] denotes the number of neurons in output layer. g[l] is the activation function. a[l] = g[l](z[l]) w[l] weights is used for z[l] x = a[0], a[l] = y' These were the notation we will use for deep neural network. So we have: A vector n of shape (1, NoOfLayers+1) A vector g of shape (1, NoOfLayers) A list of different shapes w based on the number of neurons on the previous and the current layer. A list of different shapes b based on the number of neurons on the current layer. Forward Propagation in a Deep Network Forward propagation General rule for one input: 12z[l] = W[l]a[l-1] + b[l]a[l] = g[l](a[l]) Forward propagation General rule for m inputs: 12Z[l] = W[l]A[l-1] + B[l]A[l] = g[l](A[l]) We can't compute the whole layers forward propagation without a for loop so its OK to have a for loop here. The dimensions of the matrices are so important you need to figure it out. Getting your matrix dimensions right The best way to debug your matrices dimensions is by a pencil and paper. Dimension of W is (n[l],n[l-1]) . Can be thought by Right to left. Dimension of b is (n[l],1) dw has the same shape as W, while db is the same shape as b Dimension of Z[l], A[l], dZ[l], and dA[l] is (n[l],m) Why deep representations? Why deep NN works well, we will discuss this question in this section. Deep NN makes relations with data from simpler to complex. In each layer it tries to make a relations between the previous layer. Face recognition application: Image ==&gt; Edges ==&gt; Face parts ==&gt; Faces ==&gt; desired face Audio recognition application: Audio ==&gt; Low level sound features like (sss,bb) ==&gt; Phonemes ==&gt; Words ==&gt; Sentences Neural Researchers thinks that deep neural networks thinks like brains (Simple ==&gt; Complex) Circuit theory and deep learning: When starting on an application don't start directly by dozens of hidden layers. Try the simplest solutions (L Regression) then try the parameters then try the shallow neural network and so on. Building blocks of deep neural networks Forward and back propagation for a layer l: Deep NN blocks: Forward and Backward Propagation Pseudo code for forward propagation for layer l: 1234Input A[l-1]Z[l] = W[l]A[l-1] + b[l]A[l] = g[l](Z[l])Output A[l], cache(Z[l]) Pseudo code for back propagation for layer l: 123456Input da[l], CachesdZ[l] = dA[l] * g&apos;[l](Z[l])dW[l] = (dZ[l]A[l-1].T) / mdb[l] = sum(dZ[l])/m # Dont forget axis=1, keepdims=TruedA[l-1] = w[l].T * dZ[1] # The multiplication here are a dot product.Output dA[l-1], dW[l], db[l] If we have used our loss function then: 1dA[L] = (-(y/a) + ((1-y)/(1-a))) Parameters vs Hyperparameters Main parameters of the NN is W and b Hyper parameters (parameters that control the algorithm) are like: Learning rate. Number of iteration. Number of hidden layers L. Number of hidden units n. Choice of activation functions. You have to try values yourself of hyper parameters. In the old days they thought that learning rate is a parameter while now all knows its a hyper parameter. On the next course we will see how to optimize hyperparameters. What does this have to do with the brain No Human today understand how a human brain neuron works. No Human today know exactly how many neurons on the brain. NN is a small representation of how brain work. The most near model of human brain is in the computer vision (CNN) Extra: Ian Goodfellow interview Ian is one of the world's most visible deep learning researchers. Ian is mainly working with generative models. He is the creator of GANs. We need to stabilize GANs. Stabilized GANs can become the best generative models. Ian wrote the first textbook on the modern version of deep learning with Yoshua Bengio and Aaron Courville. Ian worked with OpenAI.com and Google on ML and NN applications. Ian tells all who wants to get into AI to get a Ph.D. or post your code on Github and the companies will find you. Ian thinks that we need to start anticipating security problems with ML now and make sure that these algorithms are secure from the start instead of trying to patch it in retroactively years later. These Notes were made by Mahmoud Badry @2017]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Course Note</tag>
        <tag>Project</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Trigger word detection]]></title>
    <url>%2FTrigger-word-detection%2F2019%2F03%2F29%2F</url>
    <content type="text"><![CDATA[Trigger Word Detection Welcome to the final programming assignment of this specialization! In this week's videos, you learned about applying deep learning to speech recognition. In this assignment, you will construct a speech dataset and implement an algorithm for trigger word detection (sometimes also called keyword detection, or wakeword detection). Trigger word detection is the technology that allows devices like Amazon Alexa, Google Home, Apple Siri, and Baidu DuerOS to wake up upon hearing a certain word. For this exercise, our trigger word will be "Activate." Every time it hears you say "activate," it will make a "chiming" sound. By the end of this assignment, you will be able to record a clip of yourself talking, and have the algorithm trigger a chime when it detects you saying "activate." After completing this assignment, perhaps you can also extend it to run on your laptop so that every time you say "activate" it starts up your favorite app, or turns on a network connected lamp in your house, or triggers some other event? In this assignment you will learn to: - Structure a speech recognition project - Synthesize and process audio recordings to create train/dev datasets - Train a trigger word detection model and make predictions Lets get started! Run the following cell to load the package you are going to use. 12345678910import numpy as npfrom pydub import AudioSegmentimport randomimport sysimport ioimport osimport globimport IPythonfrom td_utils import *%matplotlib inline 1 - Data synthesis: Creating a speech dataset Let's start by building a dataset for your trigger word detection algorithm. A speech dataset should ideally be as close as possible to the application you will want to run it on. In this case, you'd like to detect the word "activate" in working environments (library, home, offices, open-spaces ...). You thus need to create recordings with a mix of positive words ("activate") and negative words (random words other than activate) on different background sounds. Let's see how you can create such a dataset. 1.1 - Listening to the data One of your friends is helping you out on this project, and they've gone to libraries, cafes, restaurants, homes and offices all around the region to record background noises, as well as snippets of audio of people saying positive/negative words. This dataset includes people speaking in a variety of accents. In the raw_data directory, you can find a subset of the raw audio files of the positive words, negative words, and background noise. You will use these audio files to synthesize a dataset to train the model. The "activate" directory contains positive examples of people saying the word "activate". The "negatives" directory contains negative examples of people saying random words other than "activate". There is one word per audio recording. The "backgrounds" directory contains 10 second clips of background noise in different environments. Run the cells below to listen to some examples. 1IPython.display.Audio("./raw_data/activates/1.wav") 1IPython.display.Audio("./raw_data/negatives/4.wav") 1IPython.display.Audio("./raw_data/backgrounds/1.wav") You will use these three type of recordings (positives/negatives/backgrounds) to create a labelled dataset. 1.2 - From audio recordings to spectrograms What really is an audio recording? A microphone records little variations in air pressure over time, and it is these little variations in air pressure that your ear also perceives as sound. You can think of an audio recording is a long list of numbers measuring the little air pressure changes detected by the microphone. We will use audio sampled at 44100 Hz (or 44100 Hertz). This means the microphone gives us 44100 numbers per second. Thus, a 10 second audio clip is represented by 441000 numbers (= \(10 \times 44100\)). It is quite difficult to figure out from this "raw" representation of audio whether the word "activate" was said. In order to help your sequence model more easily learn to detect triggerwords, we will compute a spectrogram of the audio. The spectrogram tells us how much different frequencies are present in an audio clip at a moment in time. (If you've ever taken an advanced class on signal processing or on Fourier transforms, a spectrogram is computed by sliding a window over the raw audio signal, and calculates the most active frequencies in each window using a Fourier transform. If you don't understand the previous sentence, don't worry about it.) Lets see an example. 1IPython.display.Audio("audio_examples/example_train.wav") 1x = graph_spectrogram("audio_examples/example_train.wav") png 1x array([[ 9.20850313e-08, 4.94545058e-01, 9.88447548e+01, ..., 2.30894224e-03, 4.91766839e-02, 3.50139219e-01], [ 1.80512628e-07, 1.00418722e+00, 1.18114390e+02, ..., 3.28274988e-02, 1.63775223e-01, 2.46378304e-01], [ 1.69854057e-07, 9.54327257e-01, 1.84377595e+02, ..., 3.10392369e-01, 1.30484879e+00, 8.80165188e-01], ..., [ 2.16098310e-07, 5.44274404e-05, 2.88564585e-05, ..., 1.51337049e-04, 1.92541456e-05, 4.46536973e-05], [ 2.25828769e-07, 1.96743381e-05, 3.15255813e-05, ..., 3.30137333e-04, 4.54464074e-05, 2.49749955e-05], [ 1.14628741e-07, 1.09958935e-07, 6.32568913e-05, ..., 1.75251216e-04, 9.53804196e-06, 2.46519606e-05]]) The graph above represents how active each frequency is (y axis) over a number of time-steps (x axis). Figure 1: Spectrogram of an audio recording, where the color shows the degree to which different frequencies are present (loud) in the audio at different points in time. Green squares means a certain frequency is more active or more present in the audio clip (louder); blue squares denote less active frequencies. The dimension of the output spectrogram depends upon the hyperparameters of the spectrogram software and the length of the input. In this notebook, we will be working with 10 second audio clips as the "standard length" for our training examples. The number of timesteps of the spectrogram will be 5511. You'll see later that the spectrogram will be the input \(x\) into the network, and so \(T_x = 5511\). 123_, data = wavfile.read("audio_examples/example_train.wav")print("Time steps in audio recording before spectrogram", data[:,0].shape)print("Time steps in input after spectrogram", x.shape) Time steps in audio recording before spectrogram (441000,) Time steps in input after spectrogram (101, 5511) Now, you can define: 12Tx = 5511 # The number of time steps input to the model from the spectrogramn_freq = 101 # Number of frequencies input to the model at each time step of the spectrogram Note that even with 10 seconds being our default training example length, 10 seconds of time can be discretized to different numbers of value. You've seen 441000 (raw audio) and 5511 (spectrogram). In the former case, each step represents \(10/441000 \approx 0.000023\) seconds. In the second case, each step represents \(10/5511 \approx 0.0018\) seconds. For the 10sec of audio, the key values you will see in this assignment are: \(441000\) (raw audio) \(5511 = T_x\) (spectrogram output, and dimension of input to the neural network). \(10000\) (used by the pydub module to synthesize audio) \(1375 = T_y\) (the number of steps in the output of the GRU you'll build). Note that each of these representations correspond to exactly 10 seconds of time. It's just that they are discretizing them to different degrees. All of these are hyperparameters and can be changed (except the 441000, which is a function of the microphone). We have chosen values that are within the standard ranges uses for speech systems. Consider the \(T_y = 1375\) number above. This means that for the output of the model, we discretize the 10s into 1375 time-intervals (each one of length \(10/1375 \approx 0.0072\)s) and try to predict for each of these intervals whether someone recently finished saying "activate." Consider also the 10000 number above. This corresponds to discretizing the 10sec clip into 10/10000 = 0.001 second itervals. 0.001 seconds is also called 1 millisecond, or 1ms. So when we say we are discretizing according to 1ms intervals, it means we are using 10,000 steps. 1Ty = 1375 # The number of time steps in the output of our model 1.3 - Generating a single training example Because speech data is hard to acquire and label, you will synthesize your training data using the audio clips of activates, negatives, and backgrounds. It is quite slow to record lots of 10 second audio clips with random "activates" in it. Instead, it is easier to record lots of positives and negative words, and record background noise separately (or download background noise from free online sources). To synthesize a single training example, you will: Pick a random 10 second background audio clip Randomly insert 0-4 audio clips of "activate" into this 10sec clip Randomly insert 0-2 audio clips of negative words into this 10sec clip Because you had synthesized the word "activate" into the background clip, you know exactly when in the 10sec clip the "activate" makes its appearance. You'll see later that this makes it easier to generate the labels \(y^{\langle t \rangle}\) as well. You will use the pydub package to manipulate audio. Pydub converts raw audio files into lists of Pydub data structures (it is not important to know the details here). Pydub uses 1ms as the discretization interval (1ms is 1 millisecond = 1/1000 seconds) which is why a 10sec clip is always represented using 10,000 steps. 123456# Load audio segments using pydub activates, negatives, backgrounds = load_raw_audio()print("background len: " + str(len(backgrounds[0]))) # Should be 10,000, since it is a 10 sec clipprint("activate[0] len: " + str(len(activates[0]))) # Maybe around 1000, since an "activate" audio clip is usually around 1 sec (but varies a lot)print("activate[1] len: " + str(len(activates[1]))) # Different "activate" clips can have different lengths background len: 10000 activate[0] len: 916 activate[1] len: 1579 Overlaying positive/negative words on the background: Given a 10sec background clip and a short audio clip (positive or negative word), you need to be able to "add" or "insert" the word's short audio clip onto the background. To ensure audio segments inserted onto the background do not overlap, you will keep track of the times of previously inserted audio clips. You will be inserting multiple clips of positive/negative words onto the background, and you don't want to insert an "activate" or a random word somewhere that overlaps with another clip you had previously added. For clarity, when you insert a 1sec "activate" onto a 10sec clip of cafe noise, you end up with a 10sec clip that sounds like someone sayng "activate" in a cafe, with "activate" superimposed on the background cafe noise. You do not end up with an 11 sec clip. You'll see later how pydub allows you to do this. Creating the labels at the same time you overlay: Recall also that the labels \(y^{\langle t \rangle}\) represent whether or not someone has just finished saying "activate." Given a background clip, we can initialize \(y^{\langle t \rangle}=0\) for all \(t\), since the clip doesn't contain any "activates." When you insert or overlay an "activate" clip, you will also update labels for \(y^{\langle t \rangle}\), so that 50 steps of the output now have target label 1. You will train a GRU to detect when someone has finished saying "activate". For example, suppose the synthesized "activate" clip ends at the 5sec mark in the 10sec audio---exactly halfway into the clip. Recall that \(T_y = 1375\), so timestep $687 = $ int(1375*0.5) corresponds to the moment at 5sec into the audio. So, you will set \(y^{\langle 688 \rangle} = 1\). Further, you would quite satisfied if the GRU detects "activate" anywhere within a short time-internal after this moment, so we actually set 50 consecutive values of the label \(y^{\langle t \rangle}\) to 1. Specifically, we have \(y^{\langle 688 \rangle} = y^{\langle 689 \rangle} = \cdots = y^{\langle 737 \rangle} = 1\). This is another reason for synthesizing the training data: It's relatively straightforward to generate these labels \(y^{\langle t \rangle}\) as described above. In contrast, if you have 10sec of audio recorded on a microphone, it's quite time consuming for a person to listen to it and mark manually exactly when "activate" finished. Here's a figure illustrating the labels \(y^{\langle t \rangle}\), for a clip which we have inserted "activate", "innocent", activate", "baby." Note that the positive labels "1" are associated only with the positive words. Figure 2 To implement the training set synthesis process, you will use the following helper functions. All of these function will use a 1ms discretization interval, so the 10sec of audio is alwsys discretized into 10,000 steps. get_random_time_segment(segment_ms) gets a random time segment in our background audio is_overlapping(segment_time, existing_segments) checks if a time segment overlaps with existing segments insert_audio_clip(background, audio_clip, existing_times) inserts an audio segment at a random time in our background audio using get_random_time_segment and is_overlapping insert_ones(y, segment_end_ms) inserts 1's into our label vector y after the word "activate" The function get_random_time_segment(segment_ms) returns a random time segment onto which we can insert an audio clip of duration segment_ms. Read through the code to make sure you understand what it is doing. 123456789101112131415def get_random_time_segment(segment_ms): """ Gets a random time segment of duration segment_ms in a 10,000 ms audio clip. Arguments: segment_ms -- the duration of the audio clip in ms ("ms" stands for "milliseconds") Returns: segment_time -- a tuple of (segment_start, segment_end) in ms """ segment_start = np.random.randint(low=0, high=10000-segment_ms) # Make sure segment doesn't run past the 10sec background segment_end = segment_start + segment_ms - 1 return (segment_start, segment_end) Next, suppose you have inserted audio clips at segments (1000,1800) and (3400,4500). I.e., the first segment starts at step 1000, and ends at step 1800. Now, if we are considering inserting a new audio clip at (3000,3600) does this overlap with one of the previously inserted segments? In this case, (3000,3600) and (3400,4500) overlap, so we should decide against inserting a clip here. For the purpose of this function, define (100,200) and (200,250) to be overlapping, since they overlap at timestep 200. However, (100,199) and (200,250) are non-overlapping. Exercise: Implement is_overlapping(segment_time, existing_segments) to check if a new time segment overlaps with any of the previous segments. You will need to carry out 2 steps: Create a "False" flag, that you will later set to "True" if you find that there is an overlap. Loop over the previous_segments' start and end times. Compare these times to the segment's start and end times. If there is an overlap, set the flag defined in (1) as True. You can use: 123for ....: if ... &lt;= ... and ... &gt;= ...: ... Hint: There is overlap if the segment starts before the previous segment ends, and the segment ends after the previous segment starts. 12345678910111213141516171819202122232425262728# GRADED FUNCTION: is_overlappingdef is_overlapping(segment_time, previous_segments): """ Checks if the time of a segment overlaps with the times of existing segments. Arguments: segment_time -- a tuple of (segment_start, segment_end) for the new segment previous_segments -- a list of tuples of (segment_start, segment_end) for the existing segments Returns: True if the time segment overlaps with any of the existing segments, False otherwise """ segment_start, segment_end = segment_time ### START CODE HERE ### (≈ 4 line) # Step 1: Initialize overlap as a "False" flag. (≈ 1 line) overlap = False # Step 2: loop over the previous_segments start and end times. # Compare start/end times and set the flag to True if there is an overlap (≈ 3 lines) for previous_start, previous_end in previous_segments: if segment_start &lt;= previous_end and segment_end &gt;= previous_start: overlap = True ### END CODE HERE ### return overlap 1234overlap1 = is_overlapping((950, 1430), [(2000, 2550), (260, 949)])overlap2 = is_overlapping((2305, 2950), [(824, 1532), (1900, 2305), (3424, 3656)])print("Overlap 1 = ", overlap1)print("Overlap 2 = ", overlap2) Overlap 1 = False Overlap 2 = True Expected Output: Overlap 1 False Overlap 2 True Now, lets use the previous helper functions to insert a new audio clip onto the 10sec background at a random time, but making sure that any newly inserted segment doesn't overlap with the previous segments. Exercise: Implement insert_audio_clip() to overlay an audio clip onto the background 10sec clip. You will need to carry out 4 steps: Get a random time segment of the right duration in ms. Make sure that the time segment does not overlap with any of the previous time segments. If it is overlapping, then go back to step 1 and pick a new time segment. Add the new time segment to the list of existing time segments, so as to keep track of all the segments you've inserted. Overlay the audio clip over the background using pydub. We have implemented this for you. 12345678910111213141516171819202122232425262728293031323334353637# GRADED FUNCTION: insert_audio_clipdef insert_audio_clip(background, audio_clip, previous_segments): """ Insert a new audio segment over the background noise at a random time step, ensuring that the audio segment does not overlap with existing segments. Arguments: background -- a 10 second background audio recording. audio_clip -- the audio clip to be inserted/overlaid. previous_segments -- times where audio segments have already been placed Returns: new_background -- the updated background audio """ # Get the duration of the audio clip in ms segment_ms = len(audio_clip) ### START CODE HERE ### # Step 1: Use one of the helper functions to pick a random time segment onto which to insert # the new audio clip. (≈ 1 line) segment_time = get_random_time_segment(segment_ms) # Step 2: Check if the new segment_time overlaps with one of the previous_segments. If so, keep # picking new segment_time at random until it doesn't overlap. (≈ 2 lines) while is_overlapping(segment_time, previous_segments): segment_time = get_random_time_segment(segment_ms) # Step 3: Add the new segment_time to the list of previous_segments (≈ 1 line) previous_segments.append(segment_time) ### END CODE HERE ### # Step 4: Superpose audio segment and background new_background = background.overlay(audio_clip, position = segment_time[0]) return new_background, segment_time 12345np.random.seed(5)audio_clip, segment_time = insert_audio_clip(backgrounds[0], activates[0], [(3790, 4400)])audio_clip.export("insert_test.wav", format="wav")print("Segment Time: ", segment_time)IPython.display.Audio("insert_test.wav") Segment Time: (2254, 3169) Expected Output Segment Time (2254, 3169) 12# Expected audioIPython.display.Audio("audio_examples/insert_reference.wav") Finally, implement code to update the labels \(y^{\langle t \rangle}\), assuming you just inserted an "activate." In the code below, y is a (1,1375) dimensional vector, since \(T_y = 1375\). If the "activate" ended at time step \(t\), then set \(y^{\langle t+1 \rangle} = 1\) as well as for up to 49 additional consecutive values. However, make sure you don't run off the end of the array and try to update y[0][1375], since the valid indices are y[0][0] through y[0][1374] because \(T_y = 1375\). So if "activate" ends at step 1370, you would get only y[0][1371] = y[0][1372] = y[0][1373] = y[0][1374] = 1 Exercise: Implement insert_ones(). You can use a for loop. (If you are an expert in python's slice operations, feel free also to use slicing to vectorize this.) If a segment ends at segment_end_ms (using a 10000 step discretization), to convert it to the indexing for the outputs \(y\) (using a \(1375\) step discretization), we will use this formula: 1segment_end_y = int(segment_end_ms * Ty / 10000.0) 12345678910111213141516171819202122232425262728# GRADED FUNCTION: insert_onesdef insert_ones(y, segment_end_ms): """ Update the label vector y. The labels of the 50 output steps strictly after the end of the segment should be set to 1. By strictly we mean that the label of segment_end_y should be 0 while, the 50 followinf labels should be ones. Arguments: y -- numpy array of shape (1, Ty), the labels of the training example segment_end_ms -- the end time of the segment in ms Returns: y -- updated labels """ # duration of the background (in terms of spectrogram time-steps) segment_end_y = int(segment_end_ms * Ty / 10000.0) # Add 1 to the correct index in the background label (y) ### START CODE HERE ### (≈ 3 lines) for i in range(segment_end_y+1, segment_end_y+51): if i &lt; Ty: y[0, i] = 1.0 ### END CODE HERE ### return y 123arr1 = insert_ones(np.zeros((1, Ty)), 9700)plt.plot(insert_ones(arr1, 4251)[0,:])print("sanity checks:", arr1[0][1333], arr1[0][634], arr1[0][635]) sanity checks: 0.0 1.0 0.0 png Expected Output sanity checks: 0.0 1.0 0.0 Finally, you can use insert_audio_clip and insert_ones to create a new training example. Exercise: Implement create_training_example(). You will need to carry out the following steps: Initialize the label vector \(y\) as a numpy array of zeros and shape \((1, T_y)\). Initialize the set of existing segments to an empty list. Randomly select 0 to 4 "activate" audio clips, and insert them onto the 10sec clip. Also insert labels at the correct position in the label vector \(y\). Randomly select 0 to 2 negative audio clips, and insert them into the 10sec clip. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869# GRADED FUNCTION: create_training_exampledef create_training_example(background, activates, negatives): """ Creates a training example with a given background, activates, and negatives. Arguments: background -- a 10 second background audio recording activates -- a list of audio segments of the word "activate" negatives -- a list of audio segments of random words that are not "activate" Returns: x -- the spectrogram of the training example y -- the label at each time step of the spectrogram """ # Set the random seed np.random.seed(18) # Make background quieter background = background - 20 ### START CODE HERE ### # Step 1: Initialize y (label vector) of zeros (≈ 1 line) y = np.zeros((1,Ty)) # Step 2: Initialize segment times as empty list (≈ 1 line) previous_segments = [] ### END CODE HERE ### # Select 0-4 random "activate" audio clips from the entire list of "activates" recordings number_of_activates = np.random.randint(0, 5) random_indices = np.random.randint(len(activates), size=number_of_activates) random_activates = [activates[i] for i in random_indices] ### START CODE HERE ### (≈ 3 lines) # Step 3: Loop over randomly selected "activate" clips and insert in background for random_activate in random_activates: # Insert the audio clip on the background background, segment_time = insert_audio_clip(background, random_activate, previous_segments) # Retrieve segment_start and segment_end from segment_time segment_start, segment_end = segment_time # Insert labels in "y" y = insert_ones(y, segment_end) ### END CODE HERE ### # Select 0-2 random negatives audio recordings from the entire list of "negatives" recordings number_of_negatives = np.random.randint(0, 3) random_indices = np.random.randint(len(negatives), size=number_of_negatives) random_negatives = [negatives[i] for i in random_indices] ### START CODE HERE ### (≈ 2 lines) # Step 4: Loop over randomly selected negative clips and insert in background for random_negative in random_negatives: # Insert the audio clip on the background background, _ = insert_audio_clip(background, random_negative, previous_segments) ### END CODE HERE ### # Standardize the volume of the audio clip background = match_target_amplitude(background, -20.0) # Export new training example file_handle = background.export("train" + ".wav", format="wav") print("File (train.wav) was saved in your directory.") # Get and plot spectrogram of the new recording (background with superposition of positive and negatives) x = graph_spectrogram("train.wav") return x, y 1x, y = create_training_example(backgrounds[0], activates, negatives) File (train.wav) was saved in your directory. png Expected Output Now you can listen to the training example you created and compare it to the spectrogram generated above. 1IPython.display.Audio("train.wav") Expected Output 1IPython.display.Audio("audio_examples/train_reference.wav") Finally, you can plot the associated labels for the generated training example. 1plt.plot(y[0]) [&lt;matplotlib.lines.Line2D at 0x7f717da726a0&gt;] png Expected Output 1.4 - Full training set You've now implemented the code needed to generate a single training example. We used this process to generate a large training set. To save time, we've already generated a set of training examples. 123# Load preprocessed training examplesX = np.load("./XY_train/X.npy")Y = np.load("./XY_train/Y.npy") 1.5 - Development set To test our model, we recorded a development set of 25 examples. While our training data is synthesized, we want to create a development set using the same distribution as the real inputs. Thus, we recorded 25 10-second audio clips of people saying "activate" and other random words, and labeled them by hand. This follows the principle described in Course 3 that we should create the dev set to be as similar as possible to the test set distribution; that's why our dev set uses real rather than synthesized audio. 123# Load preprocessed dev set examplesX_dev = np.load("./XY_dev/X_dev.npy")Y_dev = np.load("./XY_dev/Y_dev.npy") 2 - Model Now that you've built a dataset, lets write and train a trigger word detection model! The model will use 1-D convolutional layers, GRU layers, and dense layers. Let's load the packages that will allow you to use these layers in Keras. This might take a minute to load. 12345from keras.callbacks import ModelCheckpointfrom keras.models import Model, load_model, Sequentialfrom keras.layers import Dense, Activation, Dropout, Input, Masking, TimeDistributed, LSTM, Conv1Dfrom keras.layers import GRU, Bidirectional, BatchNormalization, Reshapefrom keras.optimizers import Adam 2.1 - Build the model Here is the architecture we will use. Take some time to look over the model and see if it makes sense. Figure 3 One key step of this model is the 1D convolutional step (near the bottom of Figure 3). It inputs the 5511 step spectrogram, and outputs a 1375 step output, which is then further processed by multiple layers to get the final \(T_y = 1375\) step output. This layer plays a role similar to the 2D convolutions you saw in Course 4, of extracting low-level features and then possibly generating an output of a smaller dimension. Computationally, the 1-D conv layer also helps speed up the model because now the GRU has to process only 1375 timesteps rather than 5511 timesteps. The two GRU layers read the sequence of inputs from left to right, then ultimately uses a dense+sigmoid layer to make a prediction for \(y^{\langle t \rangle}\). Because \(y\) is binary valued (0 or 1), we use a sigmoid output at the last layer to estimate the chance of the output being 1, corresponding to the user having just said "activate." Note that we use a uni-directional RNN rather than a bi-directional RNN. This is really important for trigger word detection, since we want to be able to detect the trigger word almost immediately after it is said. If we used a bi-directional RNN, we would have to wait for the whole 10sec of audio to be recorded before we could tell if "activate" was said in the first second of the audio clip. Implementing the model can be done in four steps: Step 1: CONV layer. Use Conv1D() to implement this, with 196 filters, a filter size of 15 (kernel_size=15), and stride of 4. [See documentation.] Step 2: First GRU layer. To generate the GRU layer, use: 1X = GRU(units = 128, return_sequences = True)(X) Setting return_sequences=True ensures that all the GRU's hidden states are fed to the next layer. Remember to follow this with Dropout and BatchNorm layers. Step 3: Second GRU layer. This is similar to the previous GRU layer (remember to use return_sequences=True), but has an extra dropout layer. Step 4: Create a time-distributed dense layer as follows: 1X = TimeDistributed(Dense(1, activation = &quot;sigmoid&quot;))(X) This creates a dense layer followed by a sigmoid, so that the parameters used for the dense layer are the same for every time step. [See documentation.] Exercise: Implement model(), the architecture is presented in Figure 3. 123456789101112131415161718192021222324252627282930313233343536373839404142# GRADED FUNCTION: modeldef model(input_shape): """ Function creating the model's graph in Keras. Argument: input_shape -- shape of the model's input data (using Keras conventions) Returns: model -- Keras model instance """ X_input = Input(shape = input_shape) ### START CODE HERE ### # Step 1: CONV layer (≈4 lines) X = Conv1D(filters = 196, kernel_size=15,strides=4)(X_input) # CONV1D X = BatchNormalization()(X) # Batch normalization X = Activation('relu')(X) # ReLu activation X = Dropout(0.8)(X) # Step 2: First GRU Layer (≈4 lines) X = GRU(units = 128, return_sequences=True)(X) # GRU (use 128 units and return the sequences) X = Dropout(0.8)(X) # dropout (use 0.8) X = BatchNormalization()(X) # Batch normalization # Step 3: Second GRU Layer (≈4 lines) X = GRU(units = 128, return_sequences=True)(X) # GRU (use 128 units and return the sequences) X = Dropout(0.8)(X) # dropout (use 0.8) X = BatchNormalization()(X) # Batch normalization X = Dropout(0.8)(X) # dropout (use 0.8) # Step 4: Time-distributed dense layer (≈1 line) X = TimeDistributed(Dense(1, activation = "sigmoid"))(X) # time distributed (sigmoid) ### END CODE HERE ### model = Model(inputs = X_input, outputs = X) return model 1model = model(input_shape = (Tx, n_freq)) Let's print the model summary to keep track of the shapes. 1model.summary() Layer (type) Output Shape Param # ================================================================= input_3 (InputLayer) (None, 5511, 101) 0 _________________________________________________________________ conv1d_3 (Conv1D) (None, 1375, 196) 297136 _________________________________________________________________ batch_normalization_2 (Batch (None, 1375, 196) 784 _________________________________________________________________ activation_1 (Activation) (None, 1375, 196) 0 _________________________________________________________________ dropout_1 (Dropout) (None, 1375, 196) 0 _________________________________________________________________ gru_1 (GRU) (None, 1375, 128) 124800 _________________________________________________________________ dropout_2 (Dropout) (None, 1375, 128) 0 _________________________________________________________________ batch_normalization_3 (Batch (None, 1375, 128) 512 _________________________________________________________________ gru_2 (GRU) (None, 1375, 128) 98688 _________________________________________________________________ dropout_3 (Dropout) (None, 1375, 128) 0 _________________________________________________________________ batch_normalization_4 (Batch (None, 1375, 128) 512 _________________________________________________________________ dropout_4 (Dropout) (None, 1375, 128) 0 _________________________________________________________________ time_distributed_1 (TimeDist (None, 1375, 1) 129 ================================================================= Total params: 522,561 Trainable params: 521,657 Non-trainable params: 904 _________________________________________________________________ Expected Output: Total params 522,561 Trainable params 521,657 Non-trainable params 904 The output of the network is of shape (None, 1375, 1) while the input is (None, 5511, 101). The Conv1D has reduced the number of steps from 5511 at spectrogram to 1375. 2.2 - Fit the model Trigger word detection takes a long time to train. To save time, we've already trained a model for about 3 hours on a GPU using the architecture you built above, and a large training set of about 4000 examples. Let's load the model. 1model = load_model('./models/tr_model.h5') You can train the model further, using the Adam optimizer and binary cross entropy loss, as follows. This will run quickly because we are training just for one epoch and with a small training set of 26 examples. 12opt = Adam(lr=0.0001, beta_1=0.9, beta_2=0.999, decay=0.01)model.compile(loss='binary_crossentropy', optimizer=opt, metrics=["accuracy"]) 1model.fit(X, Y, batch_size = 5, epochs=1) Epoch 1/1 26/26 [==============================] - 164s - loss: 0.0726 - acc: 0.9805 &lt;keras.callbacks.History at 0x7f71052e7f60&gt; 2.3 - Test the model Finally, let's see how your model performs on the dev set. 12loss, acc = model.evaluate(X_dev, Y_dev)print("Dev set accuracy = ", acc) 25/25 [==============================] - 18s Dev set accuracy = 0.94565820694 This looks pretty good! However, accuracy isn't a great metric for this task, since the labels are heavily skewed to 0's, so a neural network that just outputs 0's would get slightly over 90% accuracy. We could define more useful metrics such as F1 score or Precision/Recall. But let's not bother with that here, and instead just empirically see how the model does. 3 - Making Predictions Now that you have built a working model for trigger word detection, let's use it to make predictions. This code snippet runs audio (saved in a wav file) through the network. 1234567891011121314def detect_triggerword(filename): plt.subplot(2, 1, 1) x = graph_spectrogram(filename) # the spectogram outputs (freqs, Tx) and we want (Tx, freqs) to input into the model x = x.swapaxes(0,1) x = np.expand_dims(x, axis=0) predictions = model.predict(x) plt.subplot(2, 1, 2) plt.plot(predictions[0,:,0]) plt.ylabel('probability') plt.show() return predictions Once you've estimated the probability of having detected the word "activate" at each output step, you can trigger a "chiming" sound to play when the probability is above a certain threshold. Further, \(y^{\langle t \rangle}\) might be near 1 for many values in a row after "activate" is said, yet we want to chime only once. So we will insert a chime sound at most once every 75 output steps. This will help prevent us from inserting two chimes for a single instance of "activate". (This plays a role similar to non-max suppression from computer vision.) 12345678910111213141516171819chime_file = "audio_examples/chime.wav"def chime_on_activate(filename, predictions, threshold): audio_clip = AudioSegment.from_wav(filename) chime = AudioSegment.from_wav(chime_file) Ty = predictions.shape[1] # Step 1: Initialize the number of consecutive output steps to 0 consecutive_timesteps = 0 # Step 2: Loop over the output steps in the y for i in range(Ty): # Step 3: Increment consecutive output steps consecutive_timesteps += 1 # Step 4: If prediction is higher than the threshold and more than 75 consecutive output steps have passed if predictions[0,i,0] &gt; threshold and consecutive_timesteps &gt; 75: # Step 5: Superpose audio and background using pydub audio_clip = audio_clip.overlay(chime, position = ((i / Ty) * audio_clip.duration_seconds)*1000) # Step 6: Reset consecutive output steps to 0 consecutive_timesteps = 0 audio_clip.export("chime_output.wav", format='wav') 3.3 - Test on dev examples Let's explore how our model performs on two unseen audio clips from the development set. Lets first listen to the two dev set clips. 1IPython.display.Audio("./raw_data/dev/1.wav") 1IPython.display.Audio("./raw_data/dev/2.wav") Now lets run the model on these audio clips and see if it adds a chime after "activate"! 1234filename = "./raw_data/dev/1.wav"prediction = detect_triggerword(filename)chime_on_activate(filename, prediction, 0.5)IPython.display.Audio("./chime_output.wav") png 1234filename = "./raw_data/dev/2.wav"prediction = detect_triggerword(filename)chime_on_activate(filename, prediction, 0.5)IPython.display.Audio("./chime_output.wav") png Congratulations You've come to the end of this assignment! Here's what you should remember: - Data synthesis is an effective way to create a large training set for speech problems, specifically trigger word detection. - Using a spectrogram and optionally a 1D conv layer is a common pre-processing step prior to passing audio data to an RNN, GRU or LSTM. - An end-to-end deep learning approach can be used to built a very effective trigger word detection system. Congratulations on finishing the fimal assignment! Thank you for sticking with us through the end and for all the hard work you've put into learning deep learning. We hope you have enjoyed the course! 4 - Try your own example! (OPTIONAL/UNGRADED) In this optional and ungraded portion of this notebook, you can try your model on your own audio clips! Record a 10 second audio clip of you saying the word "activate" and other random words, and upload it to the Coursera hub as myaudio.wav. Be sure to upload the audio as a wav file. If your audio is recorded in a different format (such as mp3) there is free software that you can find online for converting it to wav. If your audio recording is not 10 seconds, the code below will either trim or pad it as needed to make it 10 seconds. 12345678910# Preprocess the audio to the correct formatdef preprocess_audio(filename): # Trim or pad audio segment to 10000ms padding = AudioSegment.silent(duration=10000) segment = AudioSegment.from_wav(filename)[:10000] segment = padding.overlay(segment) # Set frame rate to 44100 segment = segment.set_frame_rate(44100) # Export as wav segment.export(filename, format='wav') Once you've uploaded your audio file to Coursera, put the path to your file in the variable below. 1your_filename = "audio_examples/my_audio.wav" 12preprocess_audio(your_filename)IPython.display.Audio(your_filename) # listen to the audio you uploaded Finally, use the model to predict when you say activate in the 10 second audio clip, and trigger a chime. If beeps are not being added appropriately, try to adjust the chime_threshold. 1234chime_threshold = 0.5prediction = detect_triggerword(your_filename)chime_on_activate(your_filename, prediction, chime_threshold)IPython.display.Audio("./chime_output.wav")]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Project</tag>
        <tag>Sequence Models</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Neural Machine Translation with Attention]]></title>
    <url>%2FNeural-Machine-Translation-with-Attention%2F2019%2F03%2F29%2F</url>
    <content type="text"><![CDATA[Neural Machine Translation Welcome to your first programming assignment for this week! You will build a Neural Machine Translation (NMT) model to translate human readable dates ("25th of June, 2009") into machine readable dates ("2009-06-25"). You will do this using an attention model, one of the most sophisticated sequence to sequence models. This notebook was produced together with NVIDIA's Deep Learning Institute. Let's load all the packages you will need for this assignment. 123456789101112131415from keras.layers import Bidirectional, Concatenate, Permute, Dot, Input, LSTM, Multiplyfrom keras.layers import RepeatVector, Dense, Activation, Lambdafrom keras.optimizers import Adamfrom keras.utils import to_categoricalfrom keras.models import load_model, Modelimport keras.backend as Kimport numpy as npfrom faker import Fakerimport randomfrom tqdm import tqdmfrom babel.dates import format_datefrom nmt_utils import *import matplotlib.pyplot as plt%matplotlib inline 1 - Translating human readable dates into machine readable dates The model you will build here could be used to translate from one language to another, such as translating from English to Hindi. However, language translation requires massive datasets and usually takes days of training on GPUs. To give you a place to experiment with these models even without using massive datasets, we will instead use a simpler "date translation" task. The network will input a date written in a variety of possible formats (e.g. "the 29th of August 1958", "03/30/1968", "24 JUNE 1987") and translate them into standardized, machine readable dates (e.g. "1958-08-29", "1968-03-30", "1987-06-24"). We will have the network learn to output dates in the common machine-readable format YYYY-MM-DD. 1.1 - Dataset We will train the model on a dataset of 10000 human readable dates and their equivalent, standardized, machine readable dates. Let's run the following cells to load the dataset and print some examples. 12m = 10000dataset, human_vocab, machine_vocab, inv_machine_vocab = load_dataset(m) 100%|██████████| 10000/10000 [00:02&lt;00:00, 4299.43it/s] 1dataset[:10] [(&#39;29 december 1988&#39;, &#39;1988-12-29&#39;), (&#39;wednesday july 11 2018&#39;, &#39;2018-07-11&#39;), (&#39;saturday december 19 1981&#39;, &#39;1981-12-19&#39;), (&#39;6/13/96&#39;, &#39;1996-06-13&#39;), (&#39;monday june 1 1998&#39;, &#39;1998-06-01&#39;), (&#39;tuesday june 29 1982&#39;, &#39;1982-06-29&#39;), (&#39;28 sep 2012&#39;, &#39;2012-09-28&#39;), (&#39;6 04 03&#39;, &#39;2003-04-06&#39;), (&#39;thursday may 26 1988&#39;, &#39;1988-05-26&#39;), (&#39;friday april 14 2017&#39;, &#39;2017-04-14&#39;)] 1human_vocab {&#39; &#39;: 0, &#39;.&#39;: 1, &#39;/&#39;: 2, &#39;0&#39;: 3, &#39;1&#39;: 4, &#39;2&#39;: 5, &#39;3&#39;: 6, &#39;4&#39;: 7, &#39;5&#39;: 8, &#39;6&#39;: 9, &#39;7&#39;: 10, &#39;8&#39;: 11, &#39;9&#39;: 12, &#39;&lt;pad&gt;&#39;: 36, &#39;&lt;unk&gt;&#39;: 35, &#39;a&#39;: 13, &#39;b&#39;: 14, &#39;c&#39;: 15, &#39;d&#39;: 16, &#39;e&#39;: 17, &#39;f&#39;: 18, &#39;g&#39;: 19, &#39;h&#39;: 20, &#39;i&#39;: 21, &#39;j&#39;: 22, &#39;l&#39;: 23, &#39;m&#39;: 24, &#39;n&#39;: 25, &#39;o&#39;: 26, &#39;p&#39;: 27, &#39;r&#39;: 28, &#39;s&#39;: 29, &#39;t&#39;: 30, &#39;u&#39;: 31, &#39;v&#39;: 32, &#39;w&#39;: 33, &#39;y&#39;: 34} 1machine_vocab {&#39;-&#39;: 0, &#39;0&#39;: 1, &#39;1&#39;: 2, &#39;2&#39;: 3, &#39;3&#39;: 4, &#39;4&#39;: 5, &#39;5&#39;: 6, &#39;6&#39;: 7, &#39;7&#39;: 8, &#39;8&#39;: 9, &#39;9&#39;: 10} You've loaded: - dataset: a list of tuples of (human readable date, machine readable date) - human_vocab: a python dictionary mapping all characters used in the human readable dates to an integer-valued index - machine_vocab: a python dictionary mapping all characters used in machine readable dates to an integer-valued index. These indices are not necessarily consistent with human_vocab. - inv_machine_vocab: the inverse dictionary of machine_vocab, mapping from indices back to characters. Let's preprocess the data and map the raw text data into the index values. We will also use Tx=30 (which we assume is the maximum length of the human readable date; if we get a longer input, we would have to truncate it) and Ty=10 (since "YYYY-MM-DD" is 10 characters long). 12345678Tx = 30Ty = 10X, Y, Xoh, Yoh = preprocess_data(dataset, human_vocab, machine_vocab, Tx, Ty)print("X.shape:", X.shape)print("Y.shape:", Y.shape)print("Xoh.shape:", Xoh.shape)print("Yoh.shape:", Yoh.shape) X.shape: (10000, 30) Y.shape: (10000, 10) Xoh.shape: (10000, 30, 37) Yoh.shape: (10000, 10, 11) 12print(X[1])print(Y[1]) [33 17 16 25 17 29 16 13 34 0 22 31 23 34 0 4 4 0 5 3 4 11 36 36 36 36 36 36 36 36] [3 1 2 9 0 1 8 0 2 2] You now have: - X: a processed version of the human readable dates in the training set, where each character is replaced by an index mapped to the character via human_vocab. Each date is further padded to \(T_x\) values with a special character (&lt; pad &gt;). X.shape = (m, Tx) - Y: a processed version of the machine readable dates in the training set, where each character is replaced by the index it is mapped to in machine_vocab. You should have Y.shape = (m, Ty). - Xoh: one-hot version of X, the "1" entry's index is mapped to the character thanks to human_vocab. Xoh.shape = (m, Tx, len(human_vocab)) - Yoh: one-hot version of Y, the "1" entry's index is mapped to the character thanks to machine_vocab. Yoh.shape = (m, Tx, len(machine_vocab)). Here, len(machine_vocab) = 11 since there are 11 characters ('-' as well as 0-9). Lets also look at some examples of preprocessed training examples. Feel free to play with index in the cell below to navigate the dataset and see how source/target dates are preprocessed. 123456789index = 0print("Source date:", dataset[index][0])print("Target date:", dataset[index][1])print()print("Source after preprocessing (indices):", X[index])print("Target after preprocessing (indices):", Y[index])print()print("Source after preprocessing (one-hot):", Xoh[index])print("Target after preprocessing (one-hot):", Yoh[index]) Source date: 29 december 1988 Target date: 1988-12-29 Source after preprocessing (indices): [ 5 12 0 16 17 15 17 24 14 17 28 0 4 12 11 11 36 36 36 36 36 36 36 36 36 36 36 36 36 36] Target after preprocessing (indices): [ 2 10 9 9 0 2 3 0 3 10] Source after preprocessing (one-hot): [[ 0. 0. 0. ..., 0. 0. 0.] [ 0. 0. 0. ..., 0. 0. 0.] [ 1. 0. 0. ..., 0. 0. 0.] ..., [ 0. 0. 0. ..., 0. 0. 1.] [ 0. 0. 0. ..., 0. 0. 1.] [ 0. 0. 0. ..., 0. 0. 1.]] Target after preprocessing (one-hot): [[ 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0.] [ 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1.] [ 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0.] [ 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0.] [ 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] [ 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0.] [ 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0.] [ 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] [ 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0.] [ 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1.]] 2 - Neural machine translation with attention If you had to translate a book's paragraph from French to English, you would not read the whole paragraph, then close the book and translate. Even during the translation process, you would read/re-read and focus on the parts of the French paragraph corresponding to the parts of the English you are writing down. The attention mechanism tells a Neural Machine Translation model where it should pay attention to at any step. 2.1 - Attention mechanism In this part, you will implement the attention mechanism presented in the lecture videos. Here is a figure to remind you how the model works. The diagram on the left shows the attention model. The diagram on the right shows what one "Attention" step does to calculate the attention variables \(\alpha^{\langle t, t&#39; \rangle}\), which are used to compute the context variable \(context^{\langle t \rangle}\) for each timestep in the output (\(t=1, \ldots, T_y\)). Figure 1: Neural machine translation with attention Here are some properties of the model that you may notice: There are two separate LSTMs in this model (see diagram on the left). Because the one at the bottom of the picture is a Bi-directional LSTM and comes before the attention mechanism, we will call it pre-attention Bi-LSTM. The LSTM at the top of the diagram comes after the attention mechanism, so we will call it the post-attention LSTM. The pre-attention Bi-LSTM goes through \(T_x\) time steps; the post-attention LSTM goes through \(T_y\) time steps. The post-attention LSTM passes \(s^{\langle t \rangle}, c^{\langle t \rangle}\) from one time step to the next. In the lecture videos, we were using only a basic RNN for the post-activation sequence model, so the state captured by the RNN output activations \(s^{\langle t\rangle}\). But since we are using an LSTM here, the LSTM has both the output activation \(s^{\langle t\rangle}\) and the hidden cell state \(c^{\langle t\rangle}\). However, unlike previous text generation examples (such as Dinosaurus in week 1), in this model the post-activation LSTM at time \(t\) does will not take the specific generated \(y^{\langle t-1 \rangle}\) as input; it only takes \(s^{\langle t\rangle}\) and \(c^{\langle t\rangle}\) as input. We have designed the model this way, because (unlike language generation where adjacent characters are highly correlated) there isn't as strong a dependency between the previous character and the next character in a YYYY-MM-DD date. We use \(a^{\langle t \rangle} = [\overrightarrow{a}^{\langle t \rangle}; \overleftarrow{a}^{\langle t \rangle}]\) to represent the concatenation of the activations of both the forward-direction and backward-directions of the pre-attention Bi-LSTM. The diagram on the right uses a RepeatVector node to copy \(s^{\langle t-1 \rangle}\)'s value \(T_x\) times, and then Concatenation to concatenate \(s^{\langle t-1 \rangle}\) and \(a^{\langle t \rangle}\) to compute \(e^{\langle t, t&#39;}\), which is then passed through a softmax to compute \(\alpha^{\langle t, t&#39; \rangle}\). We'll explain how to use RepeatVector and Concatenation in Keras below. Lets implement this model. You will start by implementing two functions: one_step_attention() and model(). 1) one_step_attention(): At step \(t\), given all the hidden states of the Bi-LSTM (\([a^{&lt;1&gt;},a^{&lt;2&gt;}, ..., a^{&lt;T_x&gt;}]\)) and the previous hidden state of the second LSTM (\(s^{&lt;t-1&gt;}\)), one_step_attention() will compute the attention weights (\([\alpha^{&lt;t,1&gt;},\alpha^{&lt;t,2&gt;}, ..., \alpha^{&lt;t,T_x&gt;}]\)) and output the context vector (see Figure 1 (right) for details): \[context^{&lt;t&gt;} = \sum_{t&#39; = 0}^{T_x} \alpha^{&lt;t,t&#39;&gt;}a^{&lt;t&#39;&gt;}\tag{1}\] Note that we are denoting the attention in this notebook \(context^{\langle t \rangle}\). In the lecture videos, the context was denoted \(c^{\langle t \rangle}\), but here we are calling it \(context^{\langle t \rangle}\) to avoid confusion with the (post-attention) LSTM's internal memory cell variable, which is sometimes also denoted \(c^{\langle t \rangle}\). 2) model(): Implements the entire model. It first runs the input through a Bi-LSTM to get back \([a^{&lt;1&gt;},a^{&lt;2&gt;}, ..., a^{&lt;T_x&gt;}]\). Then, it calls one_step_attention() \(T_y\) times (for loop). At each iteration of this loop, it gives the computed context vector \(c^{&lt;t&gt;}\) to the second LSTM, and runs the output of the LSTM through a dense layer with softmax activation to generate a prediction \(\hat{y}^{&lt;t&gt;}\). Exercise: Implement one_step_attention(). The function model() will call the layers in one_step_attention() \(T_y\) using a for-loop, and it is important that all \(T_y\) copies have the same weights. I.e., it should not re-initiaiize the weights every time. In other words, all \(T_y\) steps should have shared weights. Here's how you can implement layers with shareable weights in Keras: 1. Define the layer objects (as global variables for examples). 2. Call these objects when propagating the input. We have defined the layers you need as global variables. Please run the following cells to create them. Please check the Keras documentation to make sure you understand what these layers are: RepeatVector(), Concatenate(), Dense(), Activation(), Dot(). 1234567# Defined shared layers as global variablesrepeator = RepeatVector(Tx)concatenator = Concatenate(axis=-1)densor1 = Dense(10, activation = "tanh")densor2 = Dense(1, activation = "relu")activator = Activation(softmax, name='attention_weights') # We are using a custom softmax(axis = 1) loaded in this notebookdotor = Dot(axes = 1) Now you can use these layers to implement one_step_attention(). In order to propagate a Keras tensor object X through one of these layers, use layer(X) (or layer([X,Y]) if it requires multiple inputs.), e.g. densor(X) will propagate X through the Dense(1) layer defined above. 12345678910111213141516171819202122232425262728293031# GRADED FUNCTION: one_step_attentiondef one_step_attention(a, s_prev): """ Performs one step of attention: Outputs a context vector computed as a dot product of the attention weights "alphas" and the hidden states "a" of the Bi-LSTM. Arguments: a -- hidden state output of the Bi-LSTM, numpy-array of shape (m, Tx, 2*n_a) s_prev -- previous hidden state of the (post-attention) LSTM, numpy-array of shape (m, n_s) Returns: context -- context vector, input of the next (post-attetion) LSTM cell """ ### START CODE HERE ### # Use repeator to repeat s_prev to be of shape (m, Tx, n_s) so that you can concatenate it with all hidden states "a" (≈ 1 line) s_prev = repeator(s_prev) # Use concatenator to concatenate a and s_prev on the last axis (≈ 1 line) concat = concatenator([a,s_prev]) # Use densor1 to propagate concat through a small fully-connected neural network to compute the "intermediate energies" variable e. (≈1 lines) e = densor1(concat) # Use densor2 to propagate e through a small fully-connected neural network to compute the "energies" variable energies. (≈1 lines) energies = densor2(e) # Use "activator" on "energies" to compute the attention weights "alphas" (≈ 1 line) alphas = activator(energies) # Use dotor together with "alphas" and "a" to compute the context vector to be given to the next (post-attention) LSTM-cell (≈ 1 line) context = dotor([alphas,a]) ### END CODE HERE ### return context You will be able to check the expected output of one_step_attention() after you've coded the model() function. Exercise: Implement model() as explained in figure 2 and the text above. Again, we have defined global layers that will share weights to be used in model(). 1234n_a = 32n_s = 64post_activation_LSTM_cell = LSTM(n_s, return_state = True)output_layer = Dense(len(machine_vocab), activation=softmax) Now you can use these layers \(T_y\) times in a for loop to generate the outputs, and their parameters will not be reinitialized. You will have to carry out the following steps: Propagate the input into a Bidirectional LSTM Iterate for \(t = 0, \dots, T_y-1\): Call one_step_attention() on \([\alpha^{&lt;t,1&gt;},\alpha^{&lt;t,2&gt;}, ..., \alpha^{&lt;t,T_x&gt;}]\) and \(s^{&lt;t-1&gt;}\) to get the context vector \(context^{&lt;t&gt;}\). Give \(context^{&lt;t&gt;}\) to the post-attention LSTM cell. Remember pass in the previous hidden-state \(s^{\langle t-1\rangle}\) and cell-states \(c^{\langle t-1\rangle}\) of this LSTM using initial_state= [previous hidden state, previous cell state]. Get back the new hidden state \(s^{&lt;t&gt;}\) and the new cell state \(c^{&lt;t&gt;}\). Apply a softmax layer to \(s^{&lt;t&gt;}\), get the output. Save the output by adding it to the list of outputs. Create your Keras model instance, it should have three inputs ("inputs", \(s^{&lt;0&gt;}\) and \(c^{&lt;0&gt;}\)) and output the list of "outputs". 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354# GRADED FUNCTION: modeldef model(Tx, Ty, n_a, n_s, human_vocab_size, machine_vocab_size): """ Arguments: Tx -- length of the input sequence Ty -- length of the output sequence n_a -- hidden state size of the Bi-LSTM n_s -- hidden state size of the post-attention LSTM human_vocab_size -- size of the python dictionary "human_vocab" machine_vocab_size -- size of the python dictionary "machine_vocab" Returns: model -- Keras model instance """ # Define the inputs of your model with a shape (Tx,) # Define s0 and c0, initial hidden state for the decoder LSTM of shape (n_s,) X = Input(shape=(Tx, human_vocab_size)) s0 = Input(shape=(n_s,), name='s0') c0 = Input(shape=(n_s,), name='c0') s = s0 c = c0 # Initialize empty list of outputs outputs = [] ### START CODE HERE ### # Step 1: Define your pre-attention Bi-LSTM. Remember to use return_sequences=True. (≈ 1 line) a = Bidirectional(LSTM(n_a, return_sequences=True))(X) # Step 2: Iterate for Ty steps for t in range(Ty): # Step 2.A: Perform one step of the attention mechanism to get back the context vector at step t (≈ 1 line) context = one_step_attention(a, s) # Step 2.B: Apply the post-attention LSTM cell to the "context" vector. # Don't forget to pass: initial_state = [hidden state, cell state] (≈ 1 line) s, _, c = post_activation_LSTM_cell(context, initial_state=[s, c]) # Step 2.C: Apply Dense layer to the hidden state output of the post-attention LSTM (≈ 1 line) out = output_layer(s) # Step 2.D: Append "out" to the "outputs" list (≈ 1 line) outputs.append(out) # Step 3: Create model instance taking three inputs and returning the list of outputs. (≈ 1 line) model = Model([X, s0, c0], outputs) ### END CODE HERE ### return model Run the following cell to create your model. 1model = model(Tx, Ty, n_a, n_s, len(human_vocab), len(machine_vocab)) Let's get a summary of the model to check if it matches the expected output. 1model.summary() ____________________________________________________________________________________________________ Layer (type) Output Shape Param # Connected to ==================================================================================================== input_2 (InputLayer) (None, 30, 37) 0 ____________________________________________________________________________________________________ s0 (InputLayer) (None, 64) 0 ____________________________________________________________________________________________________ bidirectional_2 (Bidirectional) (None, 30, 64) 17920 input_2[0][0] ____________________________________________________________________________________________________ repeat_vector_2 (RepeatVector) (None, 30, 64) 0 s0[0][0] lstm_2[0][0] lstm_2[1][0] lstm_2[2][0] lstm_2[3][0] lstm_2[4][0] lstm_2[5][0] lstm_2[6][0] lstm_2[7][0] lstm_2[8][0] ____________________________________________________________________________________________________ concatenate_2 (Concatenate) (None, 30, 128) 0 bidirectional_2[0][0] repeat_vector_2[0][0] bidirectional_2[0][0] repeat_vector_2[1][0] bidirectional_2[0][0] repeat_vector_2[2][0] bidirectional_2[0][0] repeat_vector_2[3][0] bidirectional_2[0][0] repeat_vector_2[4][0] bidirectional_2[0][0] repeat_vector_2[5][0] bidirectional_2[0][0] repeat_vector_2[6][0] bidirectional_2[0][0] repeat_vector_2[7][0] bidirectional_2[0][0] repeat_vector_2[8][0] bidirectional_2[0][0] repeat_vector_2[9][0] ____________________________________________________________________________________________________ dense_4 (Dense) (None, 30, 10) 1290 concatenate_2[0][0] concatenate_2[1][0] concatenate_2[2][0] concatenate_2[3][0] concatenate_2[4][0] concatenate_2[5][0] concatenate_2[6][0] concatenate_2[7][0] concatenate_2[8][0] concatenate_2[9][0] ____________________________________________________________________________________________________ dense_5 (Dense) (None, 30, 1) 11 dense_4[0][0] dense_4[1][0] dense_4[2][0] dense_4[3][0] dense_4[4][0] dense_4[5][0] dense_4[6][0] dense_4[7][0] dense_4[8][0] dense_4[9][0] ____________________________________________________________________________________________________ attention_weights (Activation) (None, 30, 1) 0 dense_5[0][0] dense_5[1][0] dense_5[2][0] dense_5[3][0] dense_5[4][0] dense_5[5][0] dense_5[6][0] dense_5[7][0] dense_5[8][0] dense_5[9][0] ____________________________________________________________________________________________________ dot_2 (Dot) (None, 1, 64) 0 attention_weights[0][0] bidirectional_2[0][0] attention_weights[1][0] bidirectional_2[0][0] attention_weights[2][0] bidirectional_2[0][0] attention_weights[3][0] bidirectional_2[0][0] attention_weights[4][0] bidirectional_2[0][0] attention_weights[5][0] bidirectional_2[0][0] attention_weights[6][0] bidirectional_2[0][0] attention_weights[7][0] bidirectional_2[0][0] attention_weights[8][0] bidirectional_2[0][0] attention_weights[9][0] bidirectional_2[0][0] ____________________________________________________________________________________________________ c0 (InputLayer) (None, 64) 0 ____________________________________________________________________________________________________ lstm_2 (LSTM) [(None, 64), (None, 6 33024 dot_2[0][0] s0[0][0] c0[0][0] dot_2[1][0] lstm_2[0][0] lstm_2[0][2] dot_2[2][0] lstm_2[1][0] lstm_2[1][2] dot_2[3][0] lstm_2[2][0] lstm_2[2][2] dot_2[4][0] lstm_2[3][0] lstm_2[3][2] dot_2[5][0] lstm_2[4][0] lstm_2[4][2] dot_2[6][0] lstm_2[5][0] lstm_2[5][2] dot_2[7][0] lstm_2[6][0] lstm_2[6][2] dot_2[8][0] lstm_2[7][0] lstm_2[7][2] dot_2[9][0] lstm_2[8][0] lstm_2[8][2] ____________________________________________________________________________________________________ dense_6 (Dense) (None, 11) 715 lstm_2[0][0] lstm_2[1][0] lstm_2[2][0] lstm_2[3][0] lstm_2[4][0] lstm_2[5][0] lstm_2[6][0] lstm_2[7][0] lstm_2[8][0] lstm_2[9][0] ==================================================================================================== Total params: 52,960 Trainable params: 52,960 Non-trainable params: 0 ____________________________________________________________________________________________________ Expected Output: Here is the summary you should see Total params: 52,960 Trainable params: 52,960 &lt;tr&gt; &lt;td&gt; **Non-trainable params:** &lt;/td&gt; &lt;td&gt; 0 &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; **bidirectional_1&#39;s output shape ** &lt;/td&gt; &lt;td&gt; (None, 30, 64) &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; **repeat_vector_1&#39;s output shape ** &lt;/td&gt; &lt;td&gt; (None, 30, 64) &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; **concatenate_1&#39;s output shape ** &lt;/td&gt; &lt;td&gt; (None, 30, 128) &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; **attention_weights&#39;s output shape ** &lt;/td&gt; &lt;td&gt; (None, 30, 1) &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; **dot_1&#39;s output shape ** &lt;/td&gt; &lt;td&gt; (None, 1, 64) &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; **dense_3&#39;s output shape ** &lt;/td&gt; &lt;td&gt; (None, 11) &lt;/td&gt; &lt;/tr&gt; As usual, after creating your model in Keras, you need to compile it and define what loss, optimizer and metrics your are want to use. Compile your model using categorical_crossentropy loss, a custom Adam optimizer (learning rate = 0.005, \(\beta_1 = 0.9\), \(\beta_2 = 0.999\), decay = 0.01) and ['accuracy'] metrics: 1234### START CODE HERE ### (≈2 lines)opt = Adam(lr = 0.005, beta_1=0.9, beta_2=0.999, decay = 0.01)model.compile(loss='categorical_crossentropy', optimizer=opt, metrics=['accuracy'])### END CODE HERE ### The last step is to define all your inputs and outputs to fit the model: - You already have X of shape \((m = 10000, T_x = 30)\) containing the training examples. - You need to create s0 and c0 to initialize your post_activation_LSTM_cell with 0s. - Given the model() you coded, you need the "outputs" to be a list of 11 elements of shape (m, T_y). So that: outputs[i][0], ..., outputs[i][Ty] represent the true labels (characters) corresponding to the \(i^{th}\) training example (X[i]). More generally, outputs[i][j] is the true label of the \(j^{th}\) character in the \(i^{th}\) training example. 123s0 = np.zeros((m, n_s))c0 = np.zeros((m, n_s))outputs = list(Yoh.swapaxes(0,1)) Let's now fit the model and run it for one epoch. 1model.fit([Xoh, s0, c0], outputs, epochs=1, batch_size=100) Epoch 1/1 10000/10000 [==============================] - 158s - loss: 16.3670 - dense_6_loss_1: 1.1703 - dense_6_loss_2: 0.9289 - dense_6_loss_3: 1.6998 - dense_6_loss_4: 2.6540 - dense_6_loss_5: 0.7749 - dense_6_loss_6: 1.2792 - dense_6_loss_7: 2.7100 - dense_6_loss_8: 0.9065 - dense_6_loss_9: 1.6950 - dense_6_loss_10: 2.5484 - dense_6_acc_1: 0.5611 - dense_6_acc_2: 0.7058 - dense_6_acc_3: 0.3274 - dense_6_acc_4: 0.0815 - dense_6_acc_5: 0.8946 - dense_6_acc_6: 0.3322 - dense_6_acc_7: 0.0551 - dense_6_acc_8: 0.9287 - dense_6_acc_9: 0.2578 - dense_6_acc_10: 0.1051 &lt;keras.callbacks.History at 0x7f39010f7320&gt; While training you can see the loss as well as the accuracy on each of the 10 positions of the output. The table below gives you an example of what the accuracies could be if the batch had 2 examples: Thus, dense_2_acc_8: 0.89 means that you are predicting the 7th character of the output correctly 89% of the time in the current batch of data. We have run this model for longer, and saved the weights. Run the next cell to load our weights. (By training a model for several minutes, you should be able to obtain a model of similar accuracy, but loading our model will save you time.) 1model.load_weights('models/model.h5') You can now see the results on new examples. 1234567891011EXAMPLES = ['3 May 1979', '5 April 09', '21th of August 2016', 'Tue 10 Jul 2007', 'Saturday May 9 2018', 'March 3 2001', 'March 3rd 2001', '1 March 2001']for example in EXAMPLES: source = string_to_int(example, Tx, human_vocab) source = np.array(list(map(lambda x: to_categorical(x, num_classes=len(human_vocab)), source))).swapaxes(0,1) prediction = model.predict([source, s0, c0]) prediction = np.argmax(prediction, axis = -1) output = [inv_machine_vocab[int(i)] for i in prediction] print("source:", example) print("output:", ''.join(output)) source: 3 May 1979 output: 1979-05-03 source: 5 April 09 output: 2009-05-05 source: 21th of August 2016 output: 2016-08-21 source: Tue 10 Jul 2007 output: 2007-07-10 source: Saturday May 9 2018 output: 2018-05-09 source: March 3 2001 output: 2001-03-03 source: March 3rd 2001 output: 2001-03-03 source: 1 March 2001 output: 2001-03-01 You can also change these examples to test with your own examples. The next part will give you a better sense on what the attention mechanism is doing--i.e., what part of the input the network is paying attention to when generating a particular output character. 3 - Visualizing Attention (Optional / Ungraded) Since the problem has a fixed output length of 10, it is also possible to carry out this task using 10 different softmax units to generate the 10 characters of the output. But one advantage of the attention model is that each part of the output (say the month) knows it needs to depend only on a small part of the input (the characters in the input giving the month). We can visualize what part of the output is looking at what part of the input. Consider the task of translating "Saturday 9 May 2018" to "2018-05-09". If we visualize the computed \(\alpha^{\langle t, t&#39; \rangle}\) we get this: Figure 8: Full Attention Map Notice how the output ignores the "Saturday" portion of the input. None of the output timesteps are paying much attention to that portion of the input. We see also that 9 has been translated as 09 and May has been correctly translated into 05, with the output paying attention to the parts of the input it needs to to make the translation. The year mostly requires it to pay attention to the input's "18" in order to generate "2018." 3.1 - Getting the activations from the network Lets now visualize the attention values in your network. We'll propagate an example through the network, then visualize the values of \(\alpha^{\langle t, t&#39; \rangle}\). To figure out where the attention values are located, let's start by printing a summary of the model . 1model.summary() Navigate through the output of model.summary() above. You can see that the layer named attention_weights outputs the alphas of shape (m, 30, 1) before dot_2 computes the context vector for every time step \(t = 0, \ldots, T_y-1\). Lets get the activations from this layer. The function attention_map() pulls out the attention values from your model and plots them. 1attention_map = plot_attention_map(model, human_vocab, inv_machine_vocab, "Tuesday 09 Oct 1993", num = 7, n_s = 64) On the generated plot you can observe the values of the attention weights for each character of the predicted output. Examine this plot and check that where the network is paying attention makes sense to you. In the date translation application, you will observe that most of the time attention helps predict the year, and hasn't much impact on predicting the day/month. Congratulations! You have come to the end of this assignment Here's what you should remember from this notebook: Machine translation models can be used to map from one sequence to another. They are useful not just for translating human languages (like French-&gt;English) but also for tasks like date format translation. An attention mechanism allows a network to focus on the most relevant parts of the input when producing a specific part of the output. A network using an attention mechanism can translate from inputs of length \(T_x\) to outputs of length \(T_y\), where \(T_x\) and \(T_y\) can be different. You can visualize attention weights \(\alpha^{\langle t,t&#39; \rangle}\) to see what the network is paying attention to while generating each output. Congratulations on finishing this assignment! You are now able to implement an attention model and use it to learn complex mappings from one sequence to another.]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Project</tag>
        <tag>Sequence Models</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Emojify]]></title>
    <url>%2FEmojify%2F2019%2F03%2F28%2F</url>
    <content type="text"><![CDATA[Emojify! Welcome to the second assignment of Week 2. You are going to use word vector representations to build an Emojifier. Have you ever wanted to make your text messages more expressive? Your emojifier app will help you do that. So rather than writing "Congratulations on the promotion! Lets get coffee and talk. Love you!" the emojifier can automatically turn this into "Congratulations on the promotion! 👍 Lets get coffee and talk. ☕️ Love you! ❤️" You will implement a model which inputs a sentence (such as "Let's go see the baseball game tonight!") and finds the most appropriate emoji to be used with this sentence (⚾️). In many emoji interfaces, you need to remember that ❤️ is the "heart" symbol rather than the "love" symbol. But using word vectors, you'll see that even if your training set explicitly relates only a few words to a particular emoji, your algorithm will be able to generalize and associate words in the test set to the same emoji even if those words don't even appear in the training set. This allows you to build an accurate classifier mapping from sentences to emojis, even using a small training set. In this exercise, you'll start with a baseline model (Emojifier-V1) using word embeddings, then build a more sophisticated model (Emojifier-V2) that further incorporates an LSTM. Lets get started! Run the following cell to load the package you are going to use. 123456import numpy as npfrom emo_utils import *import emojiimport matplotlib.pyplot as plt%matplotlib inline 1 - Baseline model: Emojifier-V1 1.1 - Dataset EMOJISET Let's start by building a simple baseline classifier. You have a tiny dataset (X, Y) where: - X contains 127 sentences (strings) - Y contains a integer label between 0 and 4 corresponding to an emoji for each sentence Figure 1: EMOJISET - a classification problem with 5 classes. A few examples of sentences are given here. Let's load the dataset using the code below. We split the dataset between training (127 examples) and testing (56 examples). 12X_train, Y_train = read_csv('data/train_emoji.csv')X_test, Y_test = read_csv('data/tesss.csv') 1maxLen = len(max(X_train, key=len).split()) Run the following cell to print sentences from X_train and corresponding labels from Y_train. Change index to see different examples. Because of the font the iPython notebook uses, the heart emoji may be colored black rather than red. 12index = 1print(X_train[index], label_to_emoji(Y_train[index])) I am proud of your achievements 😄 1.2 - Overview of the Emojifier-V1 In this part, you are going to implement a baseline model called "Emojifier-v1". Figure 2: Baseline model (Emojifier-V1). The input of the model is a string corresponding to a sentence (e.g. "I love you). In the code, the output will be a probability vector of shape (1,5), that you then pass in an argmax layer to extract the index of the most likely emoji output. To get our labels into a format suitable for training a softmax classifier, lets convert \(Y\) from its current shape current shape \((m, 1)\) into a "one-hot representation" \((m, 5)\), where each row is a one-hot vector giving the label of one example, You can do so using this next code snipper. Here, Y_oh stands for "Y-one-hot" in the variable names Y_oh_train and Y_oh_test: 12Y_oh_train = convert_to_one_hot(Y_train, C = 5)Y_oh_test = convert_to_one_hot(Y_test, C = 5) Let's see what convert_to_one_hot() did. Feel free to change index to print out different values. 12index = 50print(Y_train[index], "is converted into one hot", Y_oh_train[index]) 0 is converted into one hot [ 1. 0. 0. 0. 0.] All the data is now ready to be fed into the Emojify-V1 model. Let's implement the model! 1.3 - Implementing Emojifier-V1 As shown in Figure (2), the first step is to convert an input sentence into the word vector representation, which then get averaged together. Similar to the previous exercise, we will use pretrained 50-dimensional GloVe embeddings. Run the following cell to load the word_to_vec_map, which contains all the vector representations. 1word_to_index, index_to_word, word_to_vec_map = read_glove_vecs('../../readonly/glove.6B.50d.txt') You've loaded: - word_to_index: dictionary mapping from words to their indices in the vocabulary (400,001 words, with the valid indices ranging from 0 to 400,000) - index_to_word: dictionary mapping from indices to their corresponding words in the vocabulary - word_to_vec_map: dictionary mapping words to their GloVe vector representation. Run the following cell to check if it works. 1234word = "cucumber"index = 289846print("the index of", word, "in the vocabulary is", word_to_index[word])print("the", str(index) + "th word in the vocabulary is", index_to_word[index]) the index of cucumber in the vocabulary is 113317 the 289846th word in the vocabulary is potatos Exercise: Implement sentence_to_avg(). You will need to carry out two steps: 1. Convert every sentence to lower-case, then split the sentence into a list of words. X.lower() and X.split() might be useful. 2. For each word in the sentence, access its GloVe representation. Then, average all these values. 123456789101112131415161718192021222324252627282930# GRADED FUNCTION: sentence_to_avgdef sentence_to_avg(sentence, word_to_vec_map): """ Converts a sentence (string) into a list of words (strings). Extracts the GloVe representation of each word and averages its value into a single vector encoding the meaning of the sentence. Arguments: sentence -- string, one training example from X word_to_vec_map -- dictionary mapping every word in a vocabulary into its 50-dimensional vector representation Returns: avg -- average vector encoding information about the sentence, numpy-array of shape (50,) """ ### START CODE HERE ### # Step 1: Split sentence into list of lower case words (≈ 1 line) words = [word.strip().lower() for word in sentence.split()] # Initialize the average word vector, should have the same shape as your word vectors. avg = np.zeros((50,)) # Step 2: average the word vectors. You can loop over the words in the list "words". for w in words: avg += word_to_vec_map[w] avg = avg/len(words) ### END CODE HERE ### return avg 12avg = sentence_to_avg("Morrocan couscous is my favorite dish", word_to_vec_map)print("avg = ", avg) avg = [-0.008005 0.56370833 -0.50427333 0.258865 0.55131103 0.03104983 -0.21013718 0.16893933 -0.09590267 0.141784 -0.15708967 0.18525867 0.6495785 0.38371117 0.21102167 0.11301667 0.02613967 0.26037767 0.05820667 -0.01578167 -0.12078833 -0.02471267 0.4128455 0.5152061 0.38756167 -0.898661 -0.535145 0.33501167 0.68806933 -0.2156265 1.797155 0.10476933 -0.36775333 0.750785 0.10282583 0.348925 -0.27262833 0.66768 -0.10706167 -0.283635 0.59580117 0.28747333 -0.3366635 0.23393817 0.34349183 0.178405 0.1166155 -0.076433 0.1445417 0.09808667] Expected Output: avg= [-0.008005 0.56370833 -0.50427333 0.258865 0.55131103 0.03104983 -0.21013718 0.16893933 -0.09590267 0.141784 -0.15708967 0.18525867 0.6495785 0.38371117 0.21102167 0.11301667 0.02613967 0.26037767 0.05820667 -0.01578167 -0.12078833 -0.02471267 0.4128455 0.5152061 0.38756167 -0.898661 -0.535145 0.33501167 0.68806933 -0.2156265 1.797155 0.10476933 -0.36775333 0.750785 0.10282583 0.348925 -0.27262833 0.66768 -0.10706167 -0.283635 0.59580117 0.28747333 -0.3366635 0.23393817 0.34349183 0.178405 0.1166155 -0.076433 0.1445417 0.09808667] Model You now have all the pieces to finish implementing the model() function. After using sentence_to_avg() you need to pass the average through forward propagation, compute the cost, and then backpropagate to update the softmax's parameters. Exercise: Implement the model() function described in Figure (2). Assuming here that \(Yoh\) ("Y one hot") is the one-hot encoding of the output labels, the equations you need to implement in the forward pass and to compute the cross-entropy cost are: \[ z^{(i)} = W . avg^{(i)} + b\] \[ a^{(i)} = softmax(z^{(i)})\] \[ \mathcal{L}^{(i)} = - \sum_{k = 0}^{n_y - 1} Yoh^{(i)}_k * log(a^{(i)}_k)\] It is possible to come up with a more efficient vectorized implementation. But since we are using a for-loop to convert the sentences one at a time into the avg^{(i)} representation anyway, let's not bother this time. We provided you a function softmax(). 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263# GRADED FUNCTION: modeldef model(X, Y, word_to_vec_map, learning_rate = 0.01, num_iterations = 400): """ Model to train word vector representations in numpy. Arguments: X -- input data, numpy array of sentences as strings, of shape (m, 1) Y -- labels, numpy array of integers between 0 and 7, numpy-array of shape (m, 1) word_to_vec_map -- dictionary mapping every word in a vocabulary into its 50-dimensional vector representation learning_rate -- learning_rate for the stochastic gradient descent algorithm num_iterations -- number of iterations Returns: pred -- vector of predictions, numpy-array of shape (m, 1) W -- weight matrix of the softmax layer, of shape (n_y, n_h) b -- bias of the softmax layer, of shape (n_y,) """ np.random.seed(1) # Define number of training examples m = Y.shape[0] # number of training examples n_y = 5 # number of classes n_h = 50 # dimensions of the GloVe vectors # Initialize parameters using Xavier initialization W = np.random.randn(n_y, n_h) / np.sqrt(n_h) b = np.zeros((n_y,)) # Convert Y to Y_onehot with n_y classes Y_oh = convert_to_one_hot(Y, C = n_y) # Optimization loop for t in range(num_iterations): # Loop over the number of iterations for i in range(m): # Loop over the training examples ### START CODE HERE ### (≈ 4 lines of code) # Average the word vectors of the words from the i'th training example avg = sentence_to_avg(X[i], word_to_vec_map) # Forward propagate the avg through the softmax layer z = np.dot(W,avg) + b a = softmax(z) # Compute cost using the i'th training label's one hot representation and "A" (the output of the softmax) cost = - np.sum(Y_oh[i] * np.log(a)) ### END CODE HERE ### # Compute gradients dz = a - Y_oh[i] dW = np.dot(dz.reshape(n_y,1), avg.reshape(1, n_h)) db = dz # Update parameters with Stochastic Gradient Descent W = W - learning_rate * dW b = b - learning_rate * db if t % 100 == 0: print("Epoch: " + str(t) + " --- cost = " + str(cost)) pred = predict(X, Y, W, b, word_to_vec_map) return pred, W, b 123456789101112131415161718192021print(X_train.shape)print(Y_train.shape)print(np.eye(5)[Y_train.reshape(-1)].shape)print(X_train[0])print(type(X_train))Y = np.asarray([5,0,0,5, 4, 4, 4, 6, 6, 4, 1, 1, 5, 6, 6, 3, 6, 3, 4, 4])print(Y.shape)X = np.asarray(['I am going to the bar tonight', 'I love you', 'miss you my dear', 'Lets go party and drinks','Congrats on the new job','Congratulations', 'I am so happy for you', 'Why are you feeling bad', 'What is wrong with you', 'You totally deserve this prize', 'Let us go play football', 'Are you down for football this afternoon', 'Work hard play harder', 'It is suprising how people can be dumb sometimes', 'I am very disappointed','It is the best day in my life', 'I think I will end up alone','My life is so boring','Good job', 'Great so awesome'])print(X.shape)print(np.eye(5)[Y_train.reshape(-1)].shape)print(type(X_train)) (132,) (132,) (132, 5) never talk to me again &lt;class 'numpy.ndarray'&gt; (20,) (20,) (132, 5) &lt;class 'numpy.ndarray'&gt; Run the next cell to train your model and learn the softmax parameters (W,b). 12pred, W, b = model(X_train, Y_train, word_to_vec_map)print(pred) Epoch: 0 --- cost = 1.95204988128 Accuracy: 0.348484848485 Epoch: 100 --- cost = 0.0797181872601 Accuracy: 0.931818181818 Epoch: 200 --- cost = 0.0445636924368 Accuracy: 0.954545454545 Epoch: 300 --- cost = 0.0343226737879 Accuracy: 0.969696969697 [[ 3.] [ 2.] [ 3.] [ 0.] [ 4.] [ 0.] [ 3.] [ 2.] [ 3.] [ 1.] [ 3.] [ 3.] [ 1.] [ 3.] [ 2.] [ 3.] [ 2.] [ 3.] [ 1.] [ 2.] [ 3.] [ 0.] [ 2.] [ 2.] [ 2.] [ 1.] [ 4.] [ 3.] [ 3.] [ 4.] [ 0.] [ 3.] [ 4.] [ 2.] [ 0.] [ 3.] [ 2.] [ 2.] [ 3.] [ 4.] [ 2.] [ 2.] [ 0.] [ 2.] [ 3.] [ 0.] [ 3.] [ 2.] [ 4.] [ 3.] [ 0.] [ 3.] [ 3.] [ 3.] [ 4.] [ 2.] [ 1.] [ 1.] [ 1.] [ 2.] [ 3.] [ 1.] [ 0.] [ 0.] [ 0.] [ 3.] [ 4.] [ 4.] [ 2.] [ 2.] [ 1.] [ 2.] [ 0.] [ 3.] [ 2.] [ 2.] [ 0.] [ 3.] [ 3.] [ 1.] [ 2.] [ 1.] [ 2.] [ 2.] [ 4.] [ 3.] [ 3.] [ 2.] [ 4.] [ 0.] [ 0.] [ 3.] [ 3.] [ 3.] [ 3.] [ 2.] [ 0.] [ 1.] [ 2.] [ 3.] [ 0.] [ 2.] [ 2.] [ 2.] [ 3.] [ 2.] [ 2.] [ 2.] [ 4.] [ 1.] [ 1.] [ 3.] [ 3.] [ 4.] [ 1.] [ 2.] [ 1.] [ 1.] [ 3.] [ 1.] [ 0.] [ 4.] [ 0.] [ 3.] [ 3.] [ 4.] [ 4.] [ 1.] [ 4.] [ 3.] [ 0.] [ 2.]] Expected Output (on a subset of iterations): Epoch: 0 cost = 1.95204988128 Accuracy: 0.348484848485 Epoch: 100 cost = 0.0797181872601 Accuracy: 0.931818181818 Epoch: 200 cost = 0.0445636924368 Accuracy: 0.954545454545 Epoch: 300 cost = 0.0343226737879 Accuracy: 0.969696969697 Great! Your model has pretty high accuracy on the training set. Lets now see how it does on the test set. 1.4 - Examining test set performance 1234print("Training set:")pred_train = predict(X_train, Y_train, W, b, word_to_vec_map)print('Test set:')pred_test = predict(X_test, Y_test, W, b, word_to_vec_map) Training set: Accuracy: 0.977272727273 Test set: Accuracy: 0.857142857143 Expected Output: Train set accuracy 97.7 Test set accuracy 85.7 Random guessing would have had 20% accuracy given that there are 5 classes. This is pretty good performance after training on only 127 examples. In the training set, the algorithm saw the sentence "I love you" with the label ❤️. You can check however that the word "adore" does not appear in the training set. Nonetheless, lets see what happens if you write "I adore you." 12345X_my_sentences = np.array(["i adore you", "i love you", "funny lol", "lets play with a ball", "food is ready", "not feeling happy"])Y_my_labels = np.array([[0], [0], [2], [1], [4],[3]])pred = predict(X_my_sentences, Y_my_labels , W, b, word_to_vec_map)print_predictions(X_my_sentences, pred) Accuracy: 0.833333333333 i adore you ❤️ i love you ❤️ funny lol 😄 lets play with a ball ⚾ food is ready 🍴 not feeling happy 😄 Amazing! Because adore has a similar embedding as love, the algorithm has generalized correctly even to a word it has never seen before. Words such as heart, dear, beloved or adore have embedding vectors similar to love, and so might work too---feel free to modify the inputs above and try out a variety of input sentences. How well does it work? Note though that it doesn't get "not feeling happy" correct. This algorithm ignores word ordering, so is not good at understanding phrases like "not happy." Printing the confusion matrix can also help understand which classes are more difficult for your model. A confusion matrix shows how often an example whose label is one class ("actual" class) is mislabeled by the algorithm with a different class ("predicted" class). 1234print(Y_test.shape)print(' '+ label_to_emoji(0)+ ' ' + label_to_emoji(1) + ' ' + label_to_emoji(2)+ ' ' + label_to_emoji(3)+' ' + label_to_emoji(4))print(pd.crosstab(Y_test, pred_test.reshape(56,), rownames=['Actual'], colnames=['Predicted'], margins=True))plot_confusion_matrix(Y_test, pred_test) (56,) ❤️ ⚾ 😄 😞 🍴 Predicted 0.0 1.0 2.0 3.0 4.0 All Actual 0 6 0 0 1 0 7 1 0 8 0 0 0 8 2 2 0 16 0 0 18 3 1 1 2 12 0 16 4 0 0 1 0 6 7 All 9 9 19 13 6 56 png What you should remember from this part: - Even with a 127 training examples, you can get a reasonably good model for Emojifying. This is due to the generalization power word vectors gives you. - Emojify-V1 will perform poorly on sentences such as "This movie is not good and not enjoyable" because it doesn't understand combinations of words--it just averages all the words' embedding vectors together, without paying attention to the ordering of words. You will build a better algorithm in the next part. 2 - Emojifier-V2: Using LSTMs in Keras: Let's build an LSTM model that takes as input word sequences. This model will be able to take word ordering into account. Emojifier-V2 will continue to use pre-trained word embeddings to represent words, but will feed them into an LSTM, whose job it is to predict the most appropriate emoji. Run the following cell to load the Keras packages. 12345678import numpy as npnp.random.seed(0)from keras.models import Modelfrom keras.layers import Dense, Input, Dropout, LSTM, Activationfrom keras.layers.embeddings import Embeddingfrom keras.preprocessing import sequencefrom keras.initializers import glorot_uniformnp.random.seed(1) Using TensorFlow backend. 2.1 - Overview of the model Here is the Emojifier-v2 you will implement: Figure 3: Emojifier-V2. A 2-layer LSTM sequence classifier. 2.2 Keras and mini-batching In this exercise, we want to train Keras using mini-batches. However, most deep learning frameworks require that all sequences in the same mini-batch have the same length. This is what allows vectorization to work: If you had a 3-word sentence and a 4-word sentence, then the computations needed for them are different (one takes 3 steps of an LSTM, one takes 4 steps) so it's just not possible to do them both at the same time. The common solution to this is to use padding. Specifically, set a maximum sequence length, and pad all sequences to the same length. For example, of the maximum sequence length is 20, we could pad every sentence with "0"s so that each input sentence is of length 20. Thus, a sentence "i love you" would be represented as \((e_{i}, e_{love}, e_{you}, \vec{0}, \vec{0}, \ldots, \vec{0})\). In this example, any sentences longer than 20 words would have to be truncated. One simple way to choose the maximum sequence length is to just pick the length of the longest sentence in the training set. 2.3 - The Embedding layer In Keras, the embedding matrix is represented as a "layer", and maps positive integers (indices corresponding to words) into dense vectors of fixed size (the embedding vectors). It can be trained or initialized with a pretrained embedding. In this part, you will learn how to create an Embedding() layer in Keras, initialize it with the GloVe 50-dimensional vectors loaded earlier in the notebook. Because our training set is quite small, we will not update the word embeddings but will instead leave their values fixed. But in the code below, we'll show you how Keras allows you to either train or leave fixed this layer. The Embedding() layer takes an integer matrix of size (batch size, max input length) as input. This corresponds to sentences converted into lists of indices (integers), as shown in the figure below. Figure 4: Embedding layer. This example shows the propagation of two examples through the embedding layer. Both have been zero-padded to a length of max_len=5. The final dimension of the representation is (2,max_len,50) because the word embeddings we are using are 50 dimensional. The largest integer (i.e. word index) in the input should be no larger than the vocabulary size. The layer outputs an array of shape (batch size, max input length, dimension of word vectors). The first step is to convert all your training sentences into lists of indices, and then zero-pad all these lists so that their length is the length of the longest sentence. Exercise: Implement the function below to convert X (array of sentences as strings) into an array of indices corresponding to words in the sentences. The output shape should be such that it can be given to Embedding() (described in Figure 4). 12345678910111213141516171819202122232425262728293031323334353637383940# GRADED FUNCTION: sentences_to_indicesdef sentences_to_indices(X, word_to_index, max_len): """ Converts an array of sentences (strings) into an array of indices corresponding to words in the sentences. The output shape should be such that it can be given to `Embedding()` (described in Figure 4). Arguments: X -- array of sentences (strings), of shape (m, 1) word_to_index -- a dictionary containing the each word mapped to its index max_len -- maximum number of words in a sentence. You can assume every sentence in X is no longer than this. Returns: X_indices -- array of indices corresponding to words in the sentences from X, of shape (m, max_len) """ m = X.shape[0] # number of training examples ### START CODE HERE ### # Initialize X_indices as a numpy matrix of zeros and the correct shape (≈ 1 line) X_indices = np.zeros((m,max_len)) for i in range(m): # loop over training examples # Convert the ith training sentence in lower case and split is into words. You should get a list of words. sentence_words = list(word.strip().lower() for word in X[i].split()) # Initialize j to 0 j = 0 # Loop over the words of sentence_words for w in sentence_words: # Set the (i,j)th entry of X_indices to the index of the correct word. X_indices[i, j] = word_to_index[w] # Increment j to j + 1 j += 1 ### END CODE HERE ### return X_indices Run the following cell to check what sentences_to_indices() does, and check your results. 1234X1 = np.array(["funny lol", "lets play baseball", "food is ready for you"])X1_indices = sentences_to_indices(X1,word_to_index, max_len = 5)print("X1 =", X1)print("X1_indices =", X1_indices) X1 = ['funny lol' 'lets play baseball' 'food is ready for you'] X1_indices = [[ 155345. 225122. 0. 0. 0.] [ 220930. 286375. 69714. 0. 0.] [ 151204. 192973. 302254. 151349. 394475.]] Expected Output: X1 = ['funny lol' 'lets play football' 'food is ready for you'] X1_indices = [[ 155345. 225122. 0. 0. 0.] [ 220930. 286375. 151266. 0. 0.] [ 151204. 192973. 302254. 151349. 394475.]] Let's build the Embedding() layer in Keras, using pre-trained word vectors. After this layer is built, you will pass the output of sentences_to_indices() to it as an input, and the Embedding() layer will return the word embeddings for a sentence. Exercise: Implement pretrained_embedding_layer(). You will need to carry out the following steps: 1. Initialize the embedding matrix as a numpy array of zeroes with the correct shape. 2. Fill in the embedding matrix with all the word embeddings extracted from word_to_vec_map. 3. Define Keras embedding layer. Use Embedding(). Be sure to make this layer non-trainable, by setting trainable = False when calling Embedding(). If you were to set trainable = True, then it will allow the optimization algorithm to modify the values of the word embeddings. 4. Set the embedding weights to be equal to the embedding matrix 123456789101112131415161718192021222324252627282930313233343536# GRADED FUNCTION: pretrained_embedding_layerdef pretrained_embedding_layer(word_to_vec_map, word_to_index): """ Creates a Keras Embedding() layer and loads in pre-trained GloVe 50-dimensional vectors. Arguments: word_to_vec_map -- dictionary mapping words to their GloVe vector representation. word_to_index -- dictionary mapping from words to their indices in the vocabulary (400,001 words) Returns: embedding_layer -- pretrained layer Keras instance """ vocab_len = len(word_to_index) + 1 # adding 1 to fit Keras embedding (requirement) emb_dim = word_to_vec_map["cucumber"].shape[0] # define dimensionality of your GloVe word vectors (= 50) ### START CODE HERE ### # Initialize the embedding matrix as a numpy array of zeros of shape (vocab_len, dimensions of word vectors = emb_dim) emb_matrix = np.zeros((vocab_len,emb_dim)) # Set each row "index" of the embedding matrix to be the word vector representation of the "index"th word of the vocabulary for word, index in word_to_index.items(): emb_matrix[index, :] = word_to_vec_map[word] # Define Keras embedding layer with the correct output/input sizes, make it trainable. Use Embedding(...). Make sure to set trainable=False. embedding_layer = Embedding(input_dim=vocab_len, output_dim=emb_dim, trainable = False) ### END CODE HERE ### # Build the embedding layer, it is required before setting the weights of the embedding layer. Do not modify the "None". embedding_layer.build((None,)) # Set the weights of the embedding layer to the embedding matrix. Your layer is now pretrained. embedding_layer.set_weights([emb_matrix]) return embedding_layer 12embedding_layer = pretrained_embedding_layer(word_to_vec_map, word_to_index)print("weights[0][1][3] =", embedding_layer.get_weights()[0][1][3]) weights[0][1][3] = -0.3403 Expected Output: weights[0][1][3] = -0.3403 2.3 Building the Emojifier-V2 Lets now build the Emojifier-V2 model. You will do so using the embedding layer you have built, and feed its output to an LSTM network. Figure 3: Emojifier-v2. A 2-layer LSTM sequence classifier. Exercise: Implement Emojify_V2(), which builds a Keras graph of the architecture shown in Figure 3. The model takes as input an array of sentences of shape (m, max_len, ) defined by input_shape. It should output a softmax probability vector of shape (m, C = 5). You may need Input(shape = ..., dtype = '...'), LSTM(), Dropout(), Dense(), and Activation(). 12345678910111213141516171819202122232425262728293031323334353637383940414243444546# GRADED FUNCTION: Emojify_V2def Emojify_V2(input_shape, word_to_vec_map, word_to_index): """ Function creating the Emojify-v2 model's graph. Arguments: input_shape -- shape of the input, usually (max_len,) word_to_vec_map -- dictionary mapping every word in a vocabulary into its 50-dimensional vector representation word_to_index -- dictionary mapping from words to their indices in the vocabulary (400,001 words) Returns: model -- a model instance in Keras """ ### START CODE HERE ### # Define sentence_indices as the input of the graph, it should be of shape input_shape and dtype 'int32' (as it contains indices). sentence_indices = Input(shape=input_shape, dtype=np.int32) # Create the embedding layer pretrained with GloVe Vectors (≈1 line) embedding_layer = pretrained_embedding_layer(word_to_vec_map, word_to_index) # Propagate sentence_indices through your embedding layer, you get back the embeddings embeddings = embedding_layer(sentence_indices) # Propagate the embeddings through an LSTM layer with 128-dimensional hidden state # Be careful, the returned output should be a batch of sequences. X = LSTM(128, return_sequences=True)(embeddings) # Add dropout with a probability of 0.5 X = Dropout(0.5)(X) # Propagate X trough another LSTM layer with 128-dimensional hidden state # Be careful, the returned output should be a single hidden state, not a batch of sequences. X = LSTM(128)(X) # Add dropout with a probability of 0.5 X = Dropout(0.5)(X) # Propagate X through a Dense layer with softmax activation to get back a batch of 5-dimensional vectors. X = Dense(5)(X) # Add a softmax activation X = Activation("softmax")(X) # Create Model instance which converts sentence_indices into X. model = Model(sentence_indices, X) ### END CODE HERE ### return model Run the following cell to create your model and check its summary. Because all sentences in the dataset are less than 10 words, we chose max_len = 10. You should see your architecture, it uses "20,223,927" parameters, of which 20,000,050 (the word embeddings) are non-trainable, and the remaining 223,877 are. Because our vocabulary size has 400,001 words (with valid indices from 0 to 400,000) there are 400,001*50 = 20,000,050 non-trainable parameters. 12model = Emojify_V2((maxLen,), word_to_vec_map, word_to_index)model.summary() Layer (type) Output Shape Param # ================================================================= input_8 (InputLayer) (None, 10) 0 _________________________________________________________________ embedding_12 (Embedding) (None, 10, 50) 20000050 _________________________________________________________________ lstm_7 (LSTM) (None, 10, 128) 91648 _________________________________________________________________ dropout_7 (Dropout) (None, 10, 128) 0 _________________________________________________________________ lstm_8 (LSTM) (None, 128) 131584 _________________________________________________________________ dropout_8 (Dropout) (None, 128) 0 _________________________________________________________________ dense_4 (Dense) (None, 5) 645 _________________________________________________________________ activation_2 (Activation) (None, 5) 0 ================================================================= Total params: 20,223,927 Trainable params: 223,877 Non-trainable params: 20,000,050 _________________________________________________________________ As usual, after creating your model in Keras, you need to compile it and define what loss, optimizer and metrics your are want to use. Compile your model using categorical_crossentropy loss, adam optimizer and ['accuracy'] metrics: 1model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy']) It's time to train your model. Your Emojifier-V2 model takes as input an array of shape (m, max_len) and outputs probability vectors of shape (m, number of classes). We thus have to convert X_train (array of sentences as strings) to X_train_indices (array of sentences as list of word indices), and Y_train (labels as indices) to Y_train_oh (labels as one-hot vectors). 12X_train_indices = sentences_to_indices(X_train, word_to_index, maxLen)Y_train_oh = convert_to_one_hot(Y_train, C = 5) Fit the Keras model on X_train_indices and Y_train_oh. We will use epochs = 50 and batch_size = 32. 1model.fit(X_train_indices, Y_train_oh, epochs = 50, batch_size = 32, shuffle=True) Epoch 1/50 132/132 [==============================] - 2s - loss: 1.5849 - acc: 0.2803 Epoch 2/50 132/132 [==============================] - 1s - loss: 1.5141 - acc: 0.3561 Epoch 3/50 132/132 [==============================] - 1s - loss: 1.4491 - acc: 0.4015 Epoch 4/50 132/132 [==============================] - 1s - loss: 1.3842 - acc: 0.4697 Epoch 5/50 132/132 [==============================] - 1s - loss: 1.2707 - acc: 0.5682 Epoch 6/50 132/132 [==============================] - 1s - loss: 1.1938 - acc: 0.6061 Epoch 7/50 132/132 [==============================] - 1s - loss: 1.0537 - acc: 0.6288 Epoch 8/50 132/132 [==============================] - 1s - loss: 0.8624 - acc: 0.7197 Epoch 9/50 132/132 [==============================] - 1s - loss: 0.7310 - acc: 0.7652 Epoch 10/50 132/132 [==============================] - 1s - loss: 0.7352 - acc: 0.7424 Epoch 11/50 132/132 [==============================] - 1s - loss: 0.6254 - acc: 0.7727 Epoch 12/50 132/132 [==============================] - 1s - loss: 0.6052 - acc: 0.7652 Epoch 13/50 132/132 [==============================] - 1s - loss: 0.4912 - acc: 0.8182 Epoch 14/50 132/132 [==============================] - 2s - loss: 0.5649 - acc: 0.7955 Epoch 15/50 132/132 [==============================] - 1s - loss: 0.4459 - acc: 0.8106 Epoch 16/50 132/132 [==============================] - 1s - loss: 0.4127 - acc: 0.8485 Epoch 17/50 132/132 [==============================] - 1s - loss: 0.4326 - acc: 0.8409 Epoch 18/50 132/132 [==============================] - 1s - loss: 0.3347 - acc: 0.8864 Epoch 19/50 132/132 [==============================] - 1s - loss: 0.3094 - acc: 0.8788 Epoch 20/50 132/132 [==============================] - 1s - loss: 0.3379 - acc: 0.8864 Epoch 21/50 132/132 [==============================] - 1s - loss: 0.2688 - acc: 0.9091 Epoch 22/50 132/132 [==============================] - 1s - loss: 0.2411 - acc: 0.8864 Epoch 23/50 132/132 [==============================] - 1s - loss: 0.2875 - acc: 0.8939 Epoch 24/50 132/132 [==============================] - 1s - loss: 0.2610 - acc: 0.9091 Epoch 25/50 132/132 [==============================] - 1s - loss: 0.2013 - acc: 0.9242 Epoch 26/50 132/132 [==============================] - 1s - loss: 0.2356 - acc: 0.9167 Epoch 27/50 132/132 [==============================] - 1s - loss: 0.2242 - acc: 0.9318 Epoch 28/50 132/132 [==============================] - 1s - loss: 0.2021 - acc: 0.9242 Epoch 29/50 132/132 [==============================] - 1s - loss: 0.1653 - acc: 0.9394 Epoch 30/50 132/132 [==============================] - 1s - loss: 0.1255 - acc: 0.9545 Epoch 31/50 132/132 [==============================] - 1s - loss: 0.1019 - acc: 0.9697 Epoch 32/50 132/132 [==============================] - 1s - loss: 0.0817 - acc: 0.9697 Epoch 33/50 132/132 [==============================] - 1s - loss: 0.0716 - acc: 0.9773 Epoch 34/50 132/132 [==============================] - 1s - loss: 0.0623 - acc: 0.9848 Epoch 35/50 132/132 [==============================] - 1s - loss: 0.0860 - acc: 0.9697 Epoch 36/50 132/132 [==============================] - 1s - loss: 0.0378 - acc: 0.9924 Epoch 37/50 132/132 [==============================] - 1s - loss: 0.0587 - acc: 0.9848 Epoch 38/50 132/132 [==============================] - 1s - loss: 0.0995 - acc: 0.9621 Epoch 39/50 132/132 [==============================] - 1s - loss: 0.1803 - acc: 0.9394 Epoch 40/50 132/132 [==============================] - 1s - loss: 0.1462 - acc: 0.9545 Epoch 41/50 132/132 [==============================] - 1s - loss: 0.1343 - acc: 0.9773 Epoch 42/50 132/132 [==============================] - 1s - loss: 0.1418 - acc: 0.9470 Epoch 43/50 132/132 [==============================] - 1s - loss: 0.1431 - acc: 0.9621 Epoch 44/50 132/132 [==============================] - 1s - loss: 0.2848 - acc: 0.8939 Epoch 45/50 132/132 [==============================] - 1s - loss: 0.2080 - acc: 0.9318 Epoch 46/50 132/132 [==============================] - 1s - loss: 0.1823 - acc: 0.9242 Epoch 47/50 132/132 [==============================] - 1s - loss: 0.0987 - acc: 0.9773 Epoch 48/50 132/132 [==============================] - 1s - loss: 0.1035 - acc: 0.9697 Epoch 49/50 132/132 [==============================] - 1s - loss: 0.0678 - acc: 0.9924 Epoch 50/50 132/132 [==============================] - 1s - loss: 0.0584 - acc: 1.0000 &lt;keras.callbacks.History at 0x7fca9faba2e8&gt; Your model should perform close to 100% accuracy on the training set. The exact accuracy you get may be a little different. Run the following cell to evaluate your model on the test set. 12345X_test_indices = sentences_to_indices(X_test, word_to_index, max_len = maxLen)Y_test_oh = convert_to_one_hot(Y_test, C = 5)loss, acc = model.evaluate(X_test_indices, Y_test_oh)print()print("Test accuracy = ", acc) 56/56 [==============================] - 0s Test accuracy = 0.875 You should get a test accuracy between 80% and 95%. Run the cell below to see the mislabelled examples. 12345678910# This code allows you to see the mislabelled examplesC = 5y_test_oh = np.eye(C)[Y_test.reshape(-1)]X_test_indices = sentences_to_indices(X_test, word_to_index, maxLen)pred = model.predict(X_test_indices)for i in range(len(X_test)): x = X_test_indices num = np.argmax(pred[i]) if(num != Y_test[i]): print('Expected emoji:'+ label_to_emoji(Y_test[i]) + ' prediction: '+ X_test[i] + label_to_emoji(num).strip()) Expected emoji:😞 prediction: This girl is messing with me ❤️ Expected emoji:😞 prediction: work is horrible 😄 Expected emoji:❤️ prediction: I love taking breaks 😞 Expected emoji:😞 prediction: she is a bully 😄 Expected emoji:⚾ prediction: he can pitch really well 😄 Expected emoji:😞 prediction: go away ⚾ Expected emoji:❤️ prediction: family is all I have 😞 Now you can try it on your own example. Write your own sentence below. 1234# Change the sentence below to see your prediction. Make sure all the words are in the Glove embeddings. x_test = np.array(['not feeling happy'])X_test_indices = sentences_to_indices(x_test, word_to_index, maxLen)print(x_test[0] +' '+ label_to_emoji(np.argmax(model.predict(X_test_indices)))) not feeling happy 😞 Previously, Emojify-V1 model did not correctly label "not feeling happy," but our implementation of Emojiy-V2 got it right. (Keras' outputs are slightly random each time, so you may not have obtained the same result.) The current model still isn't very robust at understanding negation (like "not happy") because the training set is small and so doesn't have a lot of examples of negation. But if the training set were larger, the LSTM model would be much better than the Emojify-V1 model at understanding such complex sentences. Congratulations! You have completed this notebook! ❤️❤️❤️ What you should remember: - If you have an NLP task where the training set is small, using word embeddings can help your algorithm significantly. Word embeddings allow your model to work on words in the test set that may not even have appeared in your training set. - Training sequence models in Keras (and in most other deep learning frameworks) requires a few important details: - To use mini-batches, the sequences need to be padded so that all the examples in a mini-batch have the same length. - An Embedding() layer can be initialized with pretrained values. These values can be either fixed or trained further on your dataset. If however your labeled dataset is small, it's usually not worth trying to train a large pre-trained set of embeddings. - LSTM() has a flag called return_sequences to decide if you would like to return every hidden states or only the last one. - You can use Dropout() right after LSTM() to regularize your network. Congratulations on finishing this assignment and building an Emojifier. We hope you're happy with what you've accomplished in this notebook! 😀😀😀😀😀😀 Acknowledgments Thanks to Alison Darcy and the Woebot team for their advice on the creation of this assignment. Woebot is a chatbot friend that is ready to speak with you 24/7. As part of Woebot's technology, it uses word embeddings to understand the emotions of what you say. You can play with it by going to http://woebot.io]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Project</tag>
        <tag>Sequence Models</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Operations on word vectors - Debiasing]]></title>
    <url>%2FOperations-on-word-vectors-Debiasing%2F2019%2F03%2F28%2F</url>
    <content type="text"><![CDATA[Operations on word vectors Welcome to your first assignment of this week! Because word embeddings are very computionally expensive to train, most ML practitioners will load a pre-trained set of embeddings. After this assignment you will be able to: Load pre-trained word vectors, and measure similarity using cosine similarity Use word embeddings to solve word analogy problems such as Man is to Woman as King is to ______. Modify word embeddings to reduce their gender bias Let's get started! Run the following cell to load the packages you will need. 12import numpy as npfrom w2v_utils import * Using TensorFlow backend. Next, lets load the word vectors. For this assignment, we will use 50-dimensional GloVe vectors to represent words. Run the following cell to load the word_to_vec_map. 1words, word_to_vec_map = read_glove_vecs('../../readonly/glove.6B.50d.txt') You've loaded: - words: set of words in the vocabulary. - word_to_vec_map: dictionary mapping words to their GloVe vector representation. You've seen that one-hot vectors do not do a good job cpaturing what words are similar. GloVe vectors provide much more useful information about the meaning of individual words. Lets now see how you can use GloVe vectors to decide how similar two words are. 1 - Cosine similarity To measure how similar two words are, we need a way to measure the degree of similarity between two embedding vectors for the two words. Given two vectors \(u\) and \(v\), cosine similarity is defined as follows: \[\text{CosineSimilarity(u, v)} = \frac {u . v} {||u||_2 ||v||_2} = cos(\theta) \tag{1}\] where \(u.v\) is the dot product (or inner product) of two vectors, \(||u||_2\) is the norm (or length) of the vector \(u\), and \(\theta\) is the angle between \(u\) and \(v\). This similarity depends on the angle between \(u\) and \(v\). If \(u\) and \(v\) are very similar, their cosine similarity will be close to 1; if they are dissimilar, the cosine similarity will take a smaller value. Figure 1: The cosine of the angle between two vectors is a measure of how similar they are Exercise: Implement the function cosine_similarity() to evaluate similarity between word vectors. Reminder: The norm of \(u\) is defined as $ ||u||_2 = $ 1234567891011121314151617181920212223242526272829# GRADED FUNCTION: cosine_similaritydef cosine_similarity(u, v): """ Cosine similarity reflects the degree of similariy between u and v Arguments: u -- a word vector of shape (n,) v -- a word vector of shape (n,) Returns: cosine_similarity -- the cosine similarity between u and v defined by the formula above. """ distance = 0.0 ### START CODE HERE ### # Compute the dot product between u and v (≈1 line) dot = np.dot(u,v) # Compute the L2 norm of u (≈1 line) norm_u = np.sqrt(np.sum(u ** 2)) # Compute the L2 norm of v (≈1 line) norm_v = np.linalg.norm(v) # Compute the cosine similarity defined by formula (1) (≈1 line) cosine_similarity = dot / (norm_u * norm_v) ### END CODE HERE ### return cosine_similarity 123456789101112father = word_to_vec_map["father"]mother = word_to_vec_map["mother"]ball = word_to_vec_map["ball"]crocodile = word_to_vec_map["crocodile"]france = word_to_vec_map["france"]italy = word_to_vec_map["italy"]paris = word_to_vec_map["paris"]rome = word_to_vec_map["rome"]print("cosine_similarity(father, mother) = ", cosine_similarity(father, mother))print("cosine_similarity(ball, crocodile) = ",cosine_similarity(ball, crocodile))print("cosine_similarity(france - paris, rome - italy) = ",cosine_similarity(france - paris, rome - italy)) cosine_similarity(father, mother) = 0.890903844289 cosine_similarity(ball, crocodile) = 0.274392462614 cosine_similarity(france - paris, rome - italy) = -0.675147930817 Expected Output: cosine_similarity(father, mother) = 0.890903844289 cosine_similarity(ball, crocodile) = 0.274392462614 cosine_similarity(france - paris, rome - italy) = -0.675147930817 After you get the correct expected output, please feel free to modify the inputs and measure the cosine similarity between other pairs of words! Playing around the cosine similarity of other inputs will give you a better sense of how word vectors behave. 2 - Word analogy task In the word analogy task, we complete the sentence "a is to b as c is to ____". An example is 'man is to woman as king is to queen' . In detail, we are trying to find a word d, such that the associated word vectors \(e_a, e_b, e_c, e_d\) are related in the following manner: \(e_b - e_a \approx e_d - e_c\). We will measure the similarity between \(e_b - e_a\) and \(e_d - e_c\) using cosine similarity. Exercise: Complete the code below to be able to perform word analogies! 12345678910111213141516171819202122232425262728293031323334353637383940414243444546# GRADED FUNCTION: complete_analogydef complete_analogy(word_a, word_b, word_c, word_to_vec_map): """ Performs the word analogy task as explained above: a is to b as c is to ____. Arguments: word_a -- a word, string word_b -- a word, string word_c -- a word, string word_to_vec_map -- dictionary that maps words to their corresponding vectors. Returns: best_word -- the word such that v_b - v_a is close to v_best_word - v_c, as measured by cosine similarity """ # convert words to lower case word_a, word_b, word_c = word_a.lower(), word_b.lower(), word_c.lower() ### START CODE HERE ### # Get the word embeddings v_a, v_b and v_c (≈1-3 lines) e_a, e_b, e_c = word_to_vec_map[word_a],word_to_vec_map[word_b],word_to_vec_map[word_c] ### END CODE HERE ### words = word_to_vec_map.keys() max_cosine_sim = -100 # Initialize max_cosine_sim to a large negative number best_word = None # Initialize best_word with None, it will help keep track of the word to output # loop over the whole word vector set for w in words: # to avoid best_word being one of the input words, pass on them. if w in [word_a, word_b, word_c] : continue ### START CODE HERE ### # Compute cosine similarity between the vector (e_b - e_a) and the vector ((w's vector representation) - e_c) (≈1 line) cosine_sim = cosine_similarity(e_b - e_a, word_to_vec_map[w] - e_c) # If the cosine_sim is more than the max_cosine_sim seen so far, # then: set the new max_cosine_sim to the current cosine_sim and the best_word to the current word (≈3 lines) if cosine_sim &gt; max_cosine_sim: max_cosine_sim = cosine_sim best_word = w ### END CODE HERE ### return best_word Run the cell below to test your code, this may take 1-2 minutes. 123triads_to_try = [('italy', 'italian', 'spain'), ('india', 'delhi', 'japan'), ('man', 'woman', 'boy'), ('small', 'smaller', 'large')]for triad in triads_to_try: print ('&#123;&#125; -&gt; &#123;&#125; :: &#123;&#125; -&gt; &#123;&#125;'.format( *triad, complete_analogy(*triad,word_to_vec_map))) italy -&gt; italian :: spain -&gt; spanish india -&gt; delhi :: japan -&gt; tokyo man -&gt; woman :: boy -&gt; girl small -&gt; smaller :: large -&gt; larger Expected Output: italy -&gt; italian :: spain -&gt; spanish india -&gt; delhi :: japan -&gt; tokyo man -&gt; woman :: boy -&gt; girl small -&gt; smaller :: large -&gt; larger Once you get the correct expected output, please feel free to modify the input cells above to test your own analogies. Try to find some other analogy pairs that do work, but also find some where the algorithm doesn't give the right answer: For example, you can try small-&gt;smaller as big-&gt;?. Congratulations! You've come to the end of this assignment. Here are the main points you should remember: Cosine similarity a good way to compare similarity between pairs of word vectors. (Though L2 distance works too.) For NLP applications, using a pre-trained set of word vectors from the internet is often a good way to get started. Even though you have finished the graded portions, we recommend you take a look too at the rest of this notebook. Congratulations on finishing the graded portions of this notebook! 3 - Debiasing word vectors (OPTIONAL/UNGRADED) In the following exercise, you will examine gender biases that can be reflected in a word embedding, and explore algorithms for reducing the bias. In addition to learning about the topic of debiasing, this exercise will also help hone your intuition about what word vectors are doing. This section involves a bit of linear algebra, though you can probably complete it even without being expert in linear algebra, and we encourage you to give it a shot. This portion of the notebook is optional and is not graded. Lets first see how the GloVe word embeddings relate to gender. You will first compute a vector \(g = e_{woman}-e_{man}\), where \(e_{woman}\) represents the word vector corresponding to the word woman, and \(e_{man}\) corresponds to the word vector corresponding to the word man. The resulting vector \(g\) roughly encodes the concept of "gender". (You might get a more accurate representation if you compute \(g_1 = e_{mother}-e_{father}\), \(g_2 = e_{girl}-e_{boy}\), etc. and average over them. But just using \(e_{woman}-e_{man}\) will give good enough results for now.) 12g = word_to_vec_map['woman'] - word_to_vec_map['man']print(g) [-0.087144 0.2182 -0.40986 -0.03922 -0.1032 0.94165 -0.06042 0.32988 0.46144 -0.35962 0.31102 -0.86824 0.96006 0.01073 0.24337 0.08193 -1.02722 -0.21122 0.695044 -0.00222 0.29106 0.5053 -0.099454 0.40445 0.30181 0.1355 -0.0606 -0.07131 -0.19245 -0.06115 -0.3204 0.07165 -0.13337 -0.25068714 -0.14293 -0.224957 -0.149 0.048882 0.12191 -0.27362 -0.165476 -0.20426 0.54376 -0.271425 -0.10245 -0.32108 0.2516 -0.33455 -0.04371 0.01258 ] Now, you will consider the cosine similarity of different words with \(g\). Consider what a positive value of similarity means vs a negative cosine similarity. 1234567print ('List of names and their similarities with constructed vector:')# girls and boys namename_list = ['john', 'marie', 'sophie', 'ronaldo', 'priya', 'rahul', 'danielle', 'reza', 'katy', 'yasmin']for w in name_list: print (w, cosine_similarity(word_to_vec_map[w], g)) List of names and their similarities with constructed vector: john -0.23163356146 marie 0.315597935396 sophie 0.318687898594 ronaldo -0.312447968503 priya 0.17632041839 rahul -0.169154710392 danielle 0.243932992163 reza -0.079304296722 katy 0.283106865957 yasmin 0.233138577679 As you can see, female first names tend to have a positive cosine similarity with our constructed vector \(g\), while male first names tend to have a negative cosine similarity. This is not suprising, and the result seems acceptable. But let's try with some other words. 12345print('Other words and their similarities:')word_list = ['lipstick', 'guns', 'science', 'arts', 'literature', 'warrior','doctor', 'tree', 'receptionist', 'technology', 'fashion', 'teacher', 'engineer', 'pilot', 'computer', 'singer']for w in word_list: print (w, cosine_similarity(word_to_vec_map[w], g)) Other words and their similarities: lipstick 0.276919162564 guns -0.18884855679 science -0.0608290654093 arts 0.00818931238588 literature 0.0647250443346 warrior -0.209201646411 doctor 0.118952894109 tree -0.0708939917548 receptionist 0.330779417506 technology -0.131937324476 fashion 0.0356389462577 teacher 0.179209234318 engineer -0.0803928049452 pilot 0.00107644989919 computer -0.103303588739 singer 0.185005181365 Do you notice anything surprising? It is astonishing how these results reflect certain unhealthy gender stereotypes. For example, "computer" is closer to "man" while "literature" is closer to "woman". Ouch! We'll see below how to reduce the bias of these vectors, using an algorithm due to Boliukbasi et al., 2016. Note that some word pairs such as "actor"/"actress" or "grandmother"/"grandfather" should remain gender specific, while other words such as "receptionist" or "technology" should be neutralized, i.e. not be gender-related. You will have to treat these two type of words differently when debiasing. 3.1 - Neutralize bias for non-gender specific words The figure below should help you visualize what neutralizing does. If you're using a 50-dimensional word embedding, the 50 dimensional space can be split into two parts: The bias-direction \(g\), and the remaining 49 dimensions, which we'll call \(g_{\perp}\). In linear algebra, we say that the 49 dimensional \(g_{\perp}\) is perpendicular (or "othogonal") to \(g\), meaning it is at 90 degrees to \(g\). The neutralization step takes a vector such as \(e_{receptionist}\) and zeros out the component in the direction of \(g\), giving us \(e_{receptionist}^{debiased}\). Even though \(g_{\perp}\) is 49 dimensional, given the limitations of what we can draw on a screen, we illustrate it using a 1 dimensional axis below. Figure 2: The word vector for "receptionist" represented before and after applying the neutralize operation. Exercise: Implement neutralize() to remove the bias of words such as "receptionist" or "scientist". Given an input embedding \(e\), you can use the following formulas to compute \(e^{debiased}\): \[e^{bias\_component} = \frac{e \cdot g}{||g||_2^2} * g\tag{2}\] \[e^{debiased} = e - e^{bias\_component}\tag{3}\] If you are an expert in linear algebra, you may recognize \(e^{bias\_component}\) as the projection of \(e\) onto the direction \(g\). If you're not an expert in linear algebra, don't worry about this. 123456789101112131415161718192021222324252627def neutralize(word, g, word_to_vec_map): """ Removes the bias of "word" by projecting it on the space orthogonal to the bias axis. This function ensures that gender neutral words are zero in the gender subspace. Arguments: word -- string indicating the word to debias g -- numpy-array of shape (50,), corresponding to the bias axis (such as gender) word_to_vec_map -- dictionary mapping words to their corresponding vectors. Returns: e_debiased -- neutralized word vector representation of the input "word" """ ### START CODE HERE ### # Select word vector representation of "word". Use word_to_vec_map. (≈ 1 line) e = word_to_vec_map[word] # Compute e_biascomponent using the formula give above. (≈ 1 line) e_biascomponent = np.dot(e, g) / np.linalg.norm(g) * g # Neutralize e by substracting e_biascomponent from it # e_debiased should be equal to its orthogonal projection. (≈ 1 line) e_debiased = e - e_biascomponent ### END CODE HERE ### return e_debiased 12345e = "receptionist"print("cosine similarity between " + e + " and g, before neutralizing: ", cosine_similarity(word_to_vec_map["receptionist"], g))e_debiased = neutralize("receptionist", g, word_to_vec_map)print("cosine similarity between " + e + " and g, after neutralizing: ", cosine_similarity(e_debiased, g)) cosine similarity between receptionist and g, before neutralizing: 0.330779417506 cosine similarity between receptionist and g, after neutralizing: -0.48975521526 Expected Output: The second result is essentially 0, up to numerical roundof (on the order of \(10^{-17}\)). cosine similarity between receptionist and g, before neutralizing: : 0.330779417506 cosine similarity between receptionist and g, after neutralizing: : -3.26732746085e-17 3.2 - Equalization algorithm for gender-specific words Next, lets see how debiasing can also be applied to word pairs such as "actress" and "actor." Equalization is applied to pairs of words that you might want to have differ only through the gender property. As a concrete example, suppose that "actress" is closer to "babysit" than "actor." By applying neutralizing to "babysit" we can reduce the gender-stereotype associated with babysitting. But this still does not guarantee that "actor" and "actress" are equidistant from "babysit." The equalization algorithm takes care of this. The key idea behind equalization is to make sure that a particular pair of words are equi-distant from the 49-dimensional \(g_\perp\). The equalization step also ensures that the two equalized steps are now the same distance from \(e_{receptionist}^{debiased}\), or from any other work that has been neutralized. In pictures, this is how equalization works: The derivation of the linear algebra to do this is a bit more complex. (See Bolukbasi et al., 2016 for details.) But the key equations are: \[ \mu = \frac{e_{w1} + e_{w2}}{2}\tag{4}\] \[ \mu_{B} = \frac {\mu \cdot \text{bias_axis}}{||\text{bias_axis}||_2^2} *\text{bias_axis} \tag{5}\] \[\mu_{\perp} = \mu - \mu_{B} \tag{6}\] \[ e_{w1B} = \frac {e_{w1} \cdot \text{bias_axis}}{||\text{bias_axis}||_2^2} *\text{bias_axis} \tag{7}\] \[ e_{w2B} = \frac {e_{w2} \cdot \text{bias_axis}}{||\text{bias_axis}||_2^2} *\text{bias_axis} \tag{8}\] \[e_{w1B}^{corrected} = \sqrt{ |{1 - ||\mu_{\perp} ||^2_2} |} * \frac{e_{\text{w1B}} - \mu_B} {|(e_{w1} - \mu_{\perp}) - \mu_B)|} \tag{9}\] \[e_{w2B}^{corrected} = \sqrt{ |{1 - ||\mu_{\perp} ||^2_2} |} * \frac{e_{\text{w2B}} - \mu_B} {|(e_{w2} - \mu_{\perp}) - \mu_B)|} \tag{10}\] \[e_1 = e_{w1B}^{corrected} + \mu_{\perp} \tag{11}\] \[e_2 = e_{w2B}^{corrected} + \mu_{\perp} \tag{12}\] Exercise: Implement the function below. Use the equations above to get the final equalized version of the pair of words. Good luck! 1234567891011121314151617181920212223242526272829303132333435363738394041def equalize(pair, bias_axis, word_to_vec_map): """ Debias gender specific words by following the equalize method described in the figure above. Arguments: pair -- pair of strings of gender specific words to debias, e.g. ("actress", "actor") bias_axis -- numpy-array of shape (50,), vector corresponding to the bias axis, e.g. gender word_to_vec_map -- dictionary mapping words to their corresponding vectors Returns e_1 -- word vector corresponding to the first word e_2 -- word vector corresponding to the second word """ ### START CODE HERE ### # Step 1: Select word vector representation of "word". Use word_to_vec_map. (≈ 2 lines) w1, w2 = None e_w1, e_w2 = None # Step 2: Compute the mean of e_w1 and e_w2 (≈ 1 line) mu = None # Step 3: Compute the projections of mu over the bias axis and the orthogonal axis (≈ 2 lines) mu_B = None mu_orth = None # Step 4: Use equations (7) and (8) to compute e_w1B and e_w2B (≈2 lines) e_w1B = None e_w2B = None # Step 5: Adjust the Bias part of e_w1B and e_w2B using the formulas (9) and (10) given above (≈2 lines) corrected_e_w1B = None corrected_e_w2B = None # Step 6: Debias by equalizing e1 and e2 to the sum of their corrected projections (≈2 lines) e1 = None e2 = None ### END CODE HERE ### return e1, e2 12345678print("cosine similarities before equalizing:")print("cosine_similarity(word_to_vec_map[\"man\"], gender) = ", cosine_similarity(word_to_vec_map["man"], g))print("cosine_similarity(word_to_vec_map[\"woman\"], gender) = ", cosine_similarity(word_to_vec_map["woman"], g))print()e1, e2 = equalize(("man", "woman"), g, word_to_vec_map)print("cosine similarities after equalizing:")print("cosine_similarity(e1, gender) = ", cosine_similarity(e1, g))print("cosine_similarity(e2, gender) = ", cosine_similarity(e2, g)) Expected Output: cosine similarities before equalizing: cosine_similarity(word_to_vec_map["man"], gender) = -0.117110957653 cosine_similarity(word_to_vec_map["woman"], gender) = 0.356666188463 cosine similarities after equalizing: cosine_similarity(u1, gender) = -0.700436428931 cosine_similarity(u2, gender) = 0.700436428931 Please feel free to play with the input words in the cell above, to apply equalization to other pairs of words. These debiasing algorithms are very helpful for reducing bias, but are not perfect and do not eliminate all traces of bias. For example, one weakness of this implementation was that the bias direction \(g\) was defined using only the pair of words woman and man. As discussed earlier, if \(g\) were defined by computing \(g_1 = e_{woman} - e_{man}\); \(g_2 = e_{mother} - e_{father}\); \(g_3 = e_{girl} - e_{boy}\); and so on and averaging over them, you would obtain a better estimate of the "gender" dimension in the 50 dimensional word embedding space. Feel free to play with such variants as well. Congratulations You have come to the end of this notebook, and have seen a lot of the ways that word vectors can be used as well as modified. Congratulations on finishing this notebook! References: - The debiasing algorithm is from Bolukbasi et al., 2016, Man is to Computer Programmer as Woman is to Homemaker? Debiasing Word Embeddings - The GloVe word embeddings were due to Jeffrey Pennington, Richard Socher, and Christopher D. Manning. (https://nlp.stanford.edu/projects/glove/)]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Project</tag>
        <tag>Sequence Models</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Improvise a Jazz Solo with an LSTM Network]]></title>
    <url>%2FImprovise-a-Jazz-Solo-with-an-LSTM-Network%2F2019%2F03%2F28%2F</url>
    <content type="text"><![CDATA[Improvise a Jazz Solo with an LSTM Network Welcome to your final programming assignment of this week! In this notebook, you will implement a model that uses an LSTM to generate music. You will even be able to listen to your own music at the end of the assignment. You will learn to: - Apply an LSTM to music generation. - Generate your own jazz music with deep learning. Please run the following cell to load all the packages required in this assignment. This may take a few minutes. 12345678910111213141516from __future__ import print_functionimport IPythonimport sysfrom music21 import *import numpy as npfrom grammar import *from qa import *from preprocess import * from music_utils import *from data_utils import *from keras.models import load_model, Modelfrom keras.layers import Dense, Activation, Dropout, Input, LSTM, Reshape, Lambda, RepeatVectorfrom keras.initializers import glorot_uniformfrom keras.utils import to_categoricalfrom keras.optimizers import Adamfrom keras import backend as K 1 - Problem statement You would like to create a jazz music piece specially for a friend's birthday. However, you don't know any instruments or music composition. Fortunately, you know deep learning and will solve this problem using an LSTM netwok. You will train a network to generate novel jazz solos in a style representative of a body of performed work. 1.1 - Dataset You will train your algorithm on a corpus of Jazz music. Run the cell below to listen to a snippet of the audio from the training set: 1IPython.display.Audio('./data/30s_seq.mp3') We have taken care of the preprocessing of the musical data to render it in terms of musical "values." You can informally think of each "value" as a note, which comprises a pitch and a duration. For example, if you press down a specific piano key for 0.5 seconds, then you have just played a note. In music theory, a "value" is actually more complicated than this--specifically, it also captures the information needed to play multiple notes at the same time. For example, when playing a music piece, you might press down two piano keys at the same time (playng multiple notes at the same time generates what's called a "chord"). But we don't need to worry about the details of music theory for this assignment. For the purpose of this assignment, all you need to know is that we will obtain a dataset of values, and will learn an RNN model to generate sequences of values. Our music generation system will use 78 unique values. Run the following code to load the raw music data and preprocess it into values. This might take a few minutes. 123456X, Y, n_values, indices_values = load_music_utils()print('shape of X:', X.shape)print('number of training examples:', X.shape[0])print('Tx (length of sequence):', X.shape[1])print('total # of unique values:', n_values)print('Shape of Y:', Y.shape) shape of X: (60, 30, 78) number of training examples: 60 Tx (length of sequence): 30 total # of unique values: 78 Shape of Y: (30, 60, 78) You have just loaded the following: X: This is an (m, \(T_x\), 78) dimensional array. We have m training examples, each of which is a snippet of \(T_x =30\) musical values. At each time step, the input is one of 78 different possible values, represented as a one-hot vector. Thus for example, X[i,t,:] is a one-hot vector representating the value of the i-th example at time t. Y: This is essentially the same as X, but shifted one step to the left (to the past). Similar to the dinosaurus assignment, we're interested in the network using the previous values to predict the next value, so our sequence model will try to predict \(y^{\langle t \rangle}\) given \(x^{\langle 1\rangle}, \ldots, x^{\langle t \rangle}\). However, the data in Y is reordered to be dimension \((T_y, m, 78)\), where \(T_y = T_x\). This format makes it more convenient to feed to the LSTM later. n_values: The number of unique values in this dataset. This should be 78. indices_values: python dictionary mapping from 0-77 to musical values. 1.2 - Overview of our model Here is the architecture of the model we will use. This is similar to the Dinosaurus model you had used in the previous notebook, except that in you will be implementing it in Keras. The architecture is as follows: We will be training the model on random snippets of 30 values taken from a much longer piece of music. Thus, we won't bother to set the first input \(x^{\langle 1 \rangle} = \vec{0}\), which we had done previously to denote the start of a dinosaur name, since now most of these snippets of audio start somewhere in the middle of a piece of music. We are setting each of the snippts to have the same length \(T_x = 30\) to make vectorization easier. 2 - Building the model In this part you will build and train a model that will learn musical patterns. To do so, you will need to build a model that takes in X of shape \((m, T_x, 78)\) and Y of shape \((T_y, m, 78)\). We will use an LSTM with 64 dimensional hidden states. Lets set n_a = 64. 1n_a = 64 Here's how you can create a Keras model with multiple inputs and outputs. If you're building an RNN where even at test time entire input sequence \(x^{\langle 1 \rangle}, x^{\langle 2 \rangle}, \ldots, x^{\langle T_x \rangle}\) were given in advance, for example if the inputs were words and the output was a label, then Keras has simple built-in functions to build the model. However, for sequence generation, at test time we don't know all the values of \(x^{\langle t\rangle}\) in advance; instead we generate them one at a time using \(x^{\langle t\rangle} = y^{\langle t-1 \rangle}\). So the code will be a bit more complicated, and you'll need to implement your own for-loop to iterate over the different time steps. The function djmodel() will call the LSTM layer \(T_x\) times using a for-loop, and it is important that all \(T_x\) copies have the same weights. I.e., it should not re-initiaiize the weights every time---the \(T_x\) steps should have shared weights. The key steps for implementing layers with shareable weights in Keras are: 1. Define the layer objects (we will use global variables for this). 2. Call these objects when propagating the input. We have defined the layers objects you need as global variables. Please run the next cell to create them. Please check the Keras documentation to make sure you understand what these layers are: Reshape(), LSTM(), Dense(). 123reshapor = Reshape((1, 78)) # Used in Step 2.B of djmodel(), belowLSTM_cell = LSTM(n_a, return_state = True) # Used in Step 2.Cdensor = Dense(n_values, activation='softmax') # Used in Step 2.D Each of reshapor, LSTM_cell and densor are now layer objects, and you can use them to implement djmodel(). In order to propagate a Keras tensor object X through one of these layers, use layer_object(X) (or layer_object([X,Y]) if it requires multiple inputs.). For example, reshapor(X) will propagate X through the Reshape((1,78)) layer defined above. Exercise: Implement djmodel(). You will need to carry out 2 steps: Create an empty list "outputs" to save the outputs of the LSTM Cell at every time step. Loop for \(t \in 1, \ldots, T_x\): A. Select the "t"th time-step vector from X. The shape of this selection should be (78,). To do so, create a custom Lambda layer in Keras by using this line of code: 123456789 x = Lambda(lambda x: X[:,t,:])(X)``` Look over the Keras documentation to figure out what this does. It is creating a &quot;temporary&quot; or &quot;unnamed&quot; function (that&apos;s what Lambda functions are) that extracts out the appropriate one-hot vector, and making this function a Keras `Layer` object to apply to `X`. B. Reshape x to be (1,78). You may find the `reshapor()` layer (defined below) helpful. C. Run x through one step of LSTM_cell. Remember to initialize the LSTM_cell with the previous step&apos;s hidden state $a$ and cell state $c$. Use the following formatting:```pythona, _, c = LSTM_cell(input_x, initial_state=[previous hidden state, previous cell state]) D. Propagate the LSTM's output activation value through a dense+softmax layer using densor. E. Append the predicted value to the list of "outputs" 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748# GRADED FUNCTION: djmodeldef djmodel(Tx, n_a, n_values): """ Implement the model Arguments: Tx -- length of the sequence in a corpus n_a -- the number of activations used in our model n_values -- number of unique values in the music data Returns: model -- a keras model with the """ # Define the input of your model with a shape X = Input(shape=(Tx, n_values)) # Define s0, initial hidden state for the decoder LSTM a0 = Input(shape=(n_a,), name='a0') c0 = Input(shape=(n_a,), name='c0') a = a0 c = c0 ### START CODE HERE ### # Step 1: Create empty list to append the outputs while you iterate (≈1 line) outputs = [] # Step 2: Loop for t in range(Tx): # Step 2.A: select the "t"th time step vector from X. x = Lambda(lambda x: X[:,t,:])(X) # Step 2.B: Use reshapor to reshape x to be (1, n_values) (≈1 line) x = reshapor(x) # Step 2.C: Perform one step of the LSTM_cell a, _, c = LSTM_cell(x, initial_state=[a, c]) # Step 2.D: Apply densor to the hidden state output of LSTM_Cell out = densor(a) # Step 2.E: add the output to "outputs" outputs.append(out) # Step 3: Create model instance model = Model(inputs=[X, a0, c0], outputs=outputs) ### END CODE HERE ### return model Run the following cell to define your model. We will use Tx=30, n_a=64 (the dimension of the LSTM activations), and n_values=78. This cell may take a few seconds to run. 1model = djmodel(Tx = 30 , n_a = 64, n_values = 78) You now need to compile your model to be trained. We will Adam and a categorical cross-entropy loss. 123opt = Adam(lr=0.01, beta_1=0.9, beta_2=0.999, decay=0.01)model.compile(optimizer=opt, loss='categorical_crossentropy', metrics=['accuracy']) Finally, lets initialize a0 and c0 for the LSTM's initial state to be zero. 123m = 60a0 = np.zeros((m, n_a))c0 = np.zeros((m, n_a)) Lets now fit the model! We will turn Y to a list before doing so, since the cost function expects Y to be provided in this format (one list item per time-step). So list(Y) is a list with 30 items, where each of the list items is of shape (60,78). Lets train for 100 epochs. This will take a few minutes. 1model.fit([X, a0, c0], list(Y), epochs=100) You should see the model loss going down. Now that you have trained a model, lets go on the the final section to implement an inference algorithm, and generate some music! 3 - Generating music You now have a trained model which has learned the patterns of the jazz soloist. Lets now use this model to synthesize new music. 3.1 - Predicting &amp; Sampling At each step of sampling, you will take as input the activation a and cell state c from the previous state of the LSTM, forward propagate by one step, and get a new output activation as well as cell state. The new activation a can then be used to generate the output, using densor as before. To start off the model, we will initialize x0 as well as the LSTM activation and and cell value a0 and c0 to be zeros. Exercise: Implement the function below to sample a sequence of musical values. Here are some of the key steps you'll need to implement inside the for-loop that generates the \(T_y\) output characters: Step 2.A: Use LSTM_Cell, which inputs the previous step's c and a to generate the current step's c and a. Step 2.B: Use densor (defined previously) to compute a softmax on a to get the output for the current step. Step 2.C: Save the output you have just generated by appending it to outputs. Step 2.D: Sample x to the be "out"'s one-hot version (the prediction) so that you can pass it to the next LSTM's step. We have already provided this line of code, which uses a Lambda function. 1x = Lambda(one_hot)(out) [Minor technical note: Rather than sampling a value at random according to the probabilities in out, this line of code actually chooses the single most likely note at each step using an argmax.] 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354# GRADED FUNCTION: music_inference_modeldef music_inference_model(LSTM_cell, densor, n_values = 78, n_a = 64, Ty = 100): """ Uses the trained "LSTM_cell" and "densor" from model() to generate a sequence of values. Arguments: LSTM_cell -- the trained "LSTM_cell" from model(), Keras layer object densor -- the trained "densor" from model(), Keras layer object n_values -- integer, umber of unique values n_a -- number of units in the LSTM_cell Ty -- integer, number of time steps to generate Returns: inference_model -- Keras model instance """ # Define the input of your model with a shape x0 = Input(shape=(1, n_values)) # Define s0, initial hidden state for the decoder LSTM a0 = Input(shape=(n_a,), name='a0') c0 = Input(shape=(n_a,), name='c0') a = a0 c = c0 x = x0 ### START CODE HERE ### # Step 1: Create an empty list of "outputs" to later store your predicted values (≈1 line) outputs = [] # Step 2: Loop over Ty and generate a value at every time step for t in range(Ty): # Step 2.A: Perform one step of LSTM_cell (≈1 line) a, _, c = LSTM_cell(x, initial_state=[a, c]) # Step 2.B: Apply Dense layer to the hidden state output of the LSTM_cell (≈1 line) out = densor(a) # Step 2.C: Append the prediction "out" to "outputs". out.shape = (None, 78) (≈1 line) outputs.append(out) # Step 2.D: Select the next value according to "out", and set "x" to be the one-hot representation of the # selected value, which will be passed as the input to LSTM_cell on the next step. We have provided # the line of code you need to do this. x = Lambda(one_hot)(out) # Step 3: Create model instance with the correct "inputs" and "outputs" (≈1 line) inference_model = Model([x0, a0, c0], outputs) ### END CODE HERE ### return inference_model Run the cell below to define your inference model. This model is hard coded to generate 50 values. 1inference_model = music_inference_model(LSTM_cell, densor, n_values = 78, n_a = 64, Ty = 50) Finally, this creates the zero-valued vectors you will use to initialize x and the LSTM state variables a and c. 123x_initializer = np.zeros((1, 1, 78))a_initializer = np.zeros((1, n_a))c_initializer = np.zeros((1, n_a)) Exercise: Implement predict_and_sample(). This function takes many arguments including the inputs [x_initializer, a_initializer, c_initializer]. In order to predict the output corresponding to this input, you will need to carry-out 3 steps: 1. Use your inference model to predict an output given your set of inputs. The output pred should be a list of length \(T_y\) where each element is a numpy-array of shape (1, n_values). 2. Convert pred into a numpy array of \(T_y\) indices. Each index corresponds is computed by taking the argmax of an element of the pred list. Hint. 3. Convert the indices into their one-hot vector representations. Hint. 1234567891011121314151617181920212223242526272829# GRADED FUNCTION: predict_and_sampledef predict_and_sample(inference_model, x_initializer = x_initializer, a_initializer = a_initializer, c_initializer = c_initializer): """ Predicts the next value of values using the inference model. Arguments: inference_model -- Keras model instance for inference time x_initializer -- numpy array of shape (1, 1, 78), one-hot vector initializing the values generation a_initializer -- numpy array of shape (1, n_a), initializing the hidden state of the LSTM_cell c_initializer -- numpy array of shape (1, n_a), initializing the cell state of the LSTM_cel Returns: results -- numpy-array of shape (Ty, 78), matrix of one-hot vectors representing the values generated indices -- numpy-array of shape (Ty, 1), matrix of indices representing the values generated """ ### START CODE HERE ### # Step 1: Use your inference model to predict an output sequence given x_initializer, a_initializer and c_initializer. pred = inference_model.predict([x_initializer, a_initializer, c_initializer]) # Step 2: Convert "pred" into an np.array() of indices with the maximum probabilities #indices = np.array([np.argmax(item) for item in pred]) indices = np.argmax(pred, 2) # Step 3: Convert indices to one-hot vectors, the shape of the results should be (1, ) results = to_categorical(indices,num_classes=None) ### END CODE HERE ### return results, indices 1234results, indices = predict_and_sample(inference_model, x_initializer, a_initializer, c_initializer)print("np.argmax(results[12]) =", np.argmax(results[12]))print("np.argmax(results[17]) =", np.argmax(results[17]))print("list(indices[12:18]) =", list(indices[12:18])) np.argmax(results[12]) = 40 np.argmax(results[17]) = 1 list(indices[12:18]) = [array([40]), array([1]), array([4]), array([5]), array([40]), array([1])] Expected Output: Your results may differ because Keras' results are not completely predictable. However, if you have trained your LSTM_cell with model.fit() for exactly 100 epochs as described above, you should very likely observe a sequence of indices that are not all identical. Moreover, you should observe that: np.argmax(results[12]) is the first element of list(indices[12:18]) and np.argmax(results[17]) is the last element of list(indices[12:18]). np.argmax(results[12]) = 1 np.argmax(results[12]) = 42 list(indices[12:18]) = [array([1]), array([42]), array([54]), array([17]), array([1]), array([42])] 3.3 - Generate music Finally, you are ready to generate music. Your RNN generates a sequence of values. The following code generates music by first calling your predict_and_sample() function. These values are then post-processed into musical chords (meaning that multiple values or notes can be played at the same time). Most computational music algorithms use some post-processing because it is difficult to generate music that sounds good without such post-processing. The post-processing does things such as clean up the generated audio by making sure the same sound is not repeated too many times, that two successive notes are not too far from each other in pitch, and so on. One could argue that a lot of these post-processing steps are hacks; also, a lot the music generation literature has also focused on hand-crafting post-processors, and a lot of the output quality depends on the quality of the post-processing and not just the quality of the RNN. But this post-processing does make a huge difference, so lets use it in our implementation as well. Lets make some music! Run the following cell to generate music and record it into your out_stream. This can take a couple of minutes. 1out_stream = generate_music(inference_model) Predicting new values for different set of chords. Generated 51 sounds using the predicted values for the set of chords ("1") and after pruning Generated 51 sounds using the predicted values for the set of chords ("2") and after pruning Generated 51 sounds using the predicted values for the set of chords ("3") and after pruning Generated 51 sounds using the predicted values for the set of chords ("4") and after pruning Generated 51 sounds using the predicted values for the set of chords ("5") and after pruning Your generated music is saved in output/my_music.midi To listen to your music, click File-&gt;Open... Then go to "output/" and download "my_music.midi". Either play it on your computer with an application that can read midi files if you have one, or use one of the free online "MIDI to mp3" conversion tools to convert this to mp3. As reference, here also is a 30sec audio clip we generated using this algorithm. 1IPython.display.Audio('./data/30s_trained_model.mp3') Congratulations! You have come to the end of the notebook. Here's what you should remember: - A sequence model can be used to generate musical values, which are then post-processed into midi music. - Fairly similar models can be used to generate dinosaur names or to generate music, with the major difference being the input fed to the model. - In Keras, sequence generation involves defining layers with shared weights, which are then repeated for the different time steps \(1, \ldots, T_x\). Congratulations on completing this assignment and generating a jazz solo! References The ideas presented in this notebook came primarily from three computational music papers cited below. The implementation here also took significant inspiration and used many components from Ji-Sung Kim's github repository. Ji-Sung Kim, 2016, deepjazz Jon Gillick, Kevin Tang and Robert Keller, 2009. Learning Jazz Grammars Robert Keller and David Morrison, 2007, A Grammatical Approach to Automatic Improvisation François Pachet, 1999, Surprising Harmonies We're also grateful to François Germain for valuable feedback.]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Project</tag>
        <tag>Sequence Models</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Character-level language model]]></title>
    <url>%2FCharacter-level-language-model%2F2019%2F03%2F28%2F</url>
    <content type="text"><![CDATA[Character level language model - Dinosaurus land Welcome to Dinosaurus Island! 65 million years ago, dinosaurs existed, and in this assignment they are back. You are in charge of a special task. Leading biology researchers are creating new breeds of dinosaurs and bringing them to life on earth, and your job is to give names to these dinosaurs. If a dinosaur does not like its name, it might go beserk, so choose wisely! Luckily you have learned some deep learning and you will use it to save the day. Your assistant has collected a list of all the dinosaur names they could find, and compiled them into this dataset. (Feel free to take a look by clicking the previous link.) To create new dinosaur names, you will build a character level language model to generate new names. Your algorithm will learn the different name patterns, and randomly generate new names. Hopefully this algorithm will keep you and your team safe from the dinosaurs' wrath! By completing this assignment you will learn: How to store text data for processing using an RNN How to synthesize data, by sampling predictions at each time step and passing it to the next RNN-cell unit How to build a character-level text generation recurrent neural network Why clipping the gradients is important We will begin by loading in some functions that we have provided for you in rnn_utils. Specifically, you have access to functions such as rnn_forward and rnn_backward which are equivalent to those you've implemented in the previous assignment. 123import numpy as npfrom utils import *import random 1 - Problem Statement 1.1 - Dataset and Preprocessing Run the following cell to read the dataset of dinosaur names, create a list of unique characters (such as a-z), and compute the dataset and vocabulary size. 12345data = open('dinos.txt', 'r').read()data= data.lower()chars = list(set(data))data_size, vocab_size = len(data), len(chars)print('There are %d total characters and %d unique characters in your data.' % (data_size, vocab_size)) There are 19909 total characters and 27 unique characters in your data. The characters are a-z (26 characters) plus the "" (or newline character), which in this assignment plays a role similar to the &lt;EOS&gt; (or "End of sentence") token we had discussed in lecture, only here it indicates the end of the dinosaur name rather than the end of a sentence. In the cell below, we create a python dictionary (i.e., a hash table) to map each character to an index from 0-26. We also create a second python dictionary that maps each index back to the corresponding character character. This will help you figure out what index corresponds to what character in the probability distribution output of the softmax layer. Below, char_to_ix and ix_to_char are the python dictionaries. 123char_to_ix = &#123; ch:i for i,ch in enumerate(sorted(chars)) &#125;ix_to_char = &#123; i:ch for i,ch in enumerate(sorted(chars)) &#125;print(ix_to_char) {0: &#39;\n&#39;, 1: &#39;a&#39;, 2: &#39;b&#39;, 3: &#39;c&#39;, 4: &#39;d&#39;, 5: &#39;e&#39;, 6: &#39;f&#39;, 7: &#39;g&#39;, 8: &#39;h&#39;, 9: &#39;i&#39;, 10: &#39;j&#39;, 11: &#39;k&#39;, 12: &#39;l&#39;, 13: &#39;m&#39;, 14: &#39;n&#39;, 15: &#39;o&#39;, 16: &#39;p&#39;, 17: &#39;q&#39;, 18: &#39;r&#39;, 19: &#39;s&#39;, 20: &#39;t&#39;, 21: &#39;u&#39;, 22: &#39;v&#39;, 23: &#39;w&#39;, 24: &#39;x&#39;, 25: &#39;y&#39;, 26: &#39;z&#39;} 1.2 - Overview of the model Your model will have the following structure: Initialize parameters Run the optimization loop Forward propagation to compute the loss function Backward propagation to compute the gradients with respect to the loss function Clip the gradients to avoid exploding gradients Using the gradients, update your parameter with the gradient descent update rule. Return the learned parameters Figure 1: Recurrent Neural Network, similar to what you had built in the previous notebook "Building a RNN - Step by Step". At each time-step, the RNN tries to predict what is the next character given the previous characters. The dataset \(X = (x^{\langle 1 \rangle}, x^{\langle 2 \rangle}, ..., x^{\langle T_x \rangle})\) is a list of characters in the training set, while \(Y = (y^{\langle 1 \rangle}, y^{\langle 2 \rangle}, ..., y^{\langle T_x \rangle})\) is such that at every time-step \(t\), we have \(y^{\langle t \rangle} = x^{\langle t+1 \rangle}\). 2 - Building blocks of the model In this part, you will build two important blocks of the overall model: - Gradient clipping: to avoid exploding gradients - Sampling: a technique used to generate characters You will then apply these two functions to build the model. 2.1 - Clipping the gradients in the optimization loop In this section you will implement the clip function that you will call inside of your optimization loop. Recall that your overall loop structure usually consists of a forward pass, a cost computation, a backward pass, and a parameter update. Before updating the parameters, you will perform gradient clipping when needed to make sure that your gradients are not "exploding," meaning taking on overly large values. In the exercise below, you will implement a function clip that takes in a dictionary of gradients and returns a clipped version of gradients if needed. There are different ways to clip gradients; we will use a simple element-wise clipping procedure, in which every element of the gradient vector is clipped to lie between some range [-N, N]. More generally, you will provide a maxValue (say 10). In this example, if any component of the gradient vector is greater than 10, it would be set to 10; and if any component of the gradient vector is less than -10, it would be set to -10. If it is between -10 and 10, it is left alone. Figure 2: Visualization of gradient descent with and without gradient clipping, in a case where the network is running into slight "exploding gradient" problems. Exercise: Implement the function below to return the clipped gradients of your dictionary gradients. Your function takes in a maximum threshold and returns the clipped versions of your gradients. You can check out this hint for examples of how to clip in numpy. You will need to use the argument out = .... 12345678910111213141516171819202122232425### GRADED FUNCTION: clipdef clip(gradients, maxValue): ''' Clips the gradients' values between minimum and maximum. Arguments: gradients -- a dictionary containing the gradients "dWaa", "dWax", "dWya", "db", "dby" maxValue -- everything above this number is set to this number, and everything less than -maxValue is set to -maxValue Returns: gradients -- a dictionary with the clipped gradients. ''' dWaa, dWax, dWya, db, dby = gradients['dWaa'], gradients['dWax'], gradients['dWya'], gradients['db'], gradients['dby'] ### START CODE HERE ### # clip to mitigate exploding gradients, loop over [dWax, dWaa, dWya, db, dby]. (≈2 lines) for gradient in [dWax, dWaa, dWya, db, dby]: np.clip(a = gradient, a_min = -maxValue, a_max = maxValue, out = gradient) ### END CODE HERE ### gradients = &#123;"dWaa": dWaa, "dWax": dWax, "dWya": dWya, "db": db, "dby": dby&#125; return gradients 12345678910111213np.random.seed(3)dWax = np.random.randn(5,3)*10dWaa = np.random.randn(5,5)*10dWya = np.random.randn(2,5)*10db = np.random.randn(5,1)*10dby = np.random.randn(2,1)*10gradients = &#123;"dWax": dWax, "dWaa": dWaa, "dWya": dWya, "db": db, "dby": dby&#125;gradients = clip(gradients, 10)print("gradients[\"dWaa\"][1][2] =", gradients["dWaa"][1][2])print("gradients[\"dWax\"][3][1] =", gradients["dWax"][3][1])print("gradients[\"dWya\"][1][2] =", gradients["dWya"][1][2])print("gradients[\"db\"][4] =", gradients["db"][4])print("gradients[\"dby\"][1] =", gradients["dby"][1]) gradients[&quot;dWaa&quot;][1][2] = 10.0 gradients[&quot;dWax&quot;][3][1] = -10.0 gradients[&quot;dWya&quot;][1][2] = 0.29713815361 gradients[&quot;db&quot;][4] = [ 10.] gradients[&quot;dby&quot;][1] = [ 8.45833407] ** Expected output:** gradients["dWaa"][1][2] 10.0 gradients["dWax"][3][1] -10.0 gradients["dWya"][1][2] 0.29713815361 gradients["db"][4] [ 10.] gradients["dby"][1] [ 8.45833407] 2.2 - Sampling Now assume that your model is trained. You would like to generate new text (characters). The process of generation is explained in the picture below: Figure 3: In this picture, we assume the model is already trained. We pass in \(x^{\langle 1\rangle} = \vec{0}\) at the first time step, and have the network then sample one character at a time. Exercise: Implement the sample function below to sample characters. You need to carry out 4 steps: Step 1: Pass the network the first "dummy" input \(x^{\langle 1 \rangle} = \vec{0}\) (the vector of zeros). This is the default input before we've generated any characters. We also set \(a^{\langle 0 \rangle} = \vec{0}\) Step 2: Run one step of forward propagation to get \(a^{\langle 1 \rangle}\) and \(\hat{y}^{\langle 1 \rangle}\). Here are the equations: \[ a^{\langle t+1 \rangle} = \tanh(W_{ax} x^{\langle t \rangle } + W_{aa} a^{\langle t \rangle } + b)\tag{1}\] \[ z^{\langle t + 1 \rangle } = W_{ya} a^{\langle t + 1 \rangle } + b_y \tag{2}\] \[ \hat{y}^{\langle t+1 \rangle } = softmax(z^{\langle t + 1 \rangle })\tag{3}\] Note that \(\hat{y}^{\langle t+1 \rangle }\) is a (softmax) probability vector (its entries are between 0 and 1 and sum to 1). \(\hat{y}^{\langle t+1 \rangle}_i\) represents the probability that the character indexed by "i" is the next character. We have provided a softmax() function that you can use. Step 3: Carry out sampling: Pick the next character's index according to the probability distribution specified by \(\hat{y}^{\langle t+1 \rangle }\). This means that if \(\hat{y}^{\langle t+1 \rangle }_i = 0.16\), you will pick the index "i" with 16% probability. To implement it, you can use np.random.choice. Here is an example of how to use np.random.choice(): 123np.random.seed(0)p = np.array([0.1, 0.0, 0.7, 0.2])index = np.random.choice([0, 1, 2, 3], p = p.ravel()) This means that you will pick the index according to the distribution: \(P(index = 0) = 0.1, P(index = 1) = 0.0, P(index = 2) = 0.7, P(index = 3) = 0.2\). Step 4: The last step to implement in sample() is to overwrite the variable x, which currently stores \(x^{\langle t \rangle }\), with the value of \(x^{\langle t + 1 \rangle }\). You will represent \(x^{\langle t + 1 \rangle }\) by creating a one-hot vector corresponding to the character you've chosen as your prediction. You will then forward propagate \(x^{\langle t + 1 \rangle }\) in Step 1 and keep repeating the process until you get a "" character, indicating you've reached the end of the dinosaur name. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677# GRADED FUNCTION: sampledef sample(parameters, char_to_ix, seed): """ Sample a sequence of characters according to a sequence of probability distributions output of the RNN Arguments: parameters -- python dictionary containing the parameters Waa, Wax, Wya, by, and b. char_to_ix -- python dictionary mapping each character to an index. seed -- used for grading purposes. Do not worry about it. Returns: indices -- a list of length n containing the indices of the sampled characters. """ # Retrieve parameters and relevant shapes from "parameters" dictionary Waa, Wax, Wya, by, b = parameters['Waa'], parameters['Wax'], parameters['Wya'], parameters['by'], parameters['b'] # print(Waa.shape)# print(Wax.shape)# print(Wya.shape)# print(by.shape) vocab_size = by.shape[0] n_a = Waa.shape[1] ### START CODE HERE ### # Step 1: Create the one-hot vector x for the first character (initializing the sequence generation). (≈1 line) x = np.zeros((vocab_size,1)) # Step 1': Initialize a_prev as zeros (≈1 line) a_prev = np.zeros((n_a,1)) # Create an empty list of indices, this is the list which will contain the list of indices of the characters to generate (≈1 line) indices = [] # Idx is a flag to detect a newline character, we initialize it to -1 idx = -1 # Loop over time-steps t. At each time-step, sample a character from a probability distribution and append # its index to "indices". We'll stop if we reach 50 characters (which should be very unlikely with a well # trained model), which helps debugging and prevents entering an infinite loop. counter = 0 newline_character = char_to_ix['\n'] while (idx != newline_character and counter != 50): # Step 2: Forward propagate x using the equations (1), (2) and (3) a = np.tanh(np.dot(Wax,x) + np.dot(Waa,a_prev)+b) z = np.dot(Wya,a) + by y = softmax(z) # for grading purposes np.random.seed(counter+seed) # Step 3: Sample the index of a character within the vocabulary from the probability distribution y idx = np.random.choice(list(range(y.shape[0])), p = y.ravel()) # Append the index to "indices" indices.append(idx) # Step 4: Overwrite the input character as the one corresponding to the sampled index. x = np.zeros((vocab_size,1)) x[idx] = 1 # Update "a_prev" to be "a" a_prev = a # for grading purposes seed += 1 counter +=1 ### END CODE HERE ### if (counter == 50): indices.append(char_to_ix['\n']) return indices 1234567891011np.random.seed(2)_, n_a = 20, 100Wax, Waa, Wya = np.random.randn(n_a, vocab_size), np.random.randn(n_a, n_a), np.random.randn(vocab_size, n_a)b, by = np.random.randn(n_a, 1), np.random.randn(vocab_size, 1)parameters = &#123;"Wax": Wax, "Waa": Waa, "Wya": Wya, "b": b, "by": by&#125;indices = sample(parameters, char_to_ix, 0)print("Sampling:")print("list of sampled indices:", indices)print("list of sampled characters:", [ix_to_char[i] for i in indices]) Sampling: list of sampled indices: [12, 17, 24, 14, 13, 9, 10, 22, 24, 6, 13, 11, 12, 6, 21, 15, 21, 14, 3, 2, 1, 21, 18, 24, 7, 25, 6, 25, 18, 10, 16, 2, 3, 8, 15, 12, 11, 7, 1, 12, 10, 2, 7, 7, 11, 5, 6, 12, 25, 0, 0] list of sampled characters: [&#39;l&#39;, &#39;q&#39;, &#39;x&#39;, &#39;n&#39;, &#39;m&#39;, &#39;i&#39;, &#39;j&#39;, &#39;v&#39;, &#39;x&#39;, &#39;f&#39;, &#39;m&#39;, &#39;k&#39;, &#39;l&#39;, &#39;f&#39;, &#39;u&#39;, &#39;o&#39;, &#39;u&#39;, &#39;n&#39;, &#39;c&#39;, &#39;b&#39;, &#39;a&#39;, &#39;u&#39;, &#39;r&#39;, &#39;x&#39;, &#39;g&#39;, &#39;y&#39;, &#39;f&#39;, &#39;y&#39;, &#39;r&#39;, &#39;j&#39;, &#39;p&#39;, &#39;b&#39;, &#39;c&#39;, &#39;h&#39;, &#39;o&#39;, &#39;l&#39;, &#39;k&#39;, &#39;g&#39;, &#39;a&#39;, &#39;l&#39;, &#39;j&#39;, &#39;b&#39;, &#39;g&#39;, &#39;g&#39;, &#39;k&#39;, &#39;e&#39;, &#39;f&#39;, &#39;l&#39;, &#39;y&#39;, &#39;\n&#39;, &#39;\n&#39;] ** Expected output:** list of sampled indices: [12, 17, 24, 14, 13, 9, 10, 22, 24, 6, 13, 11, 12, 6, 21, 15, 21, 14, 3, 2, 1, 21, 18, 24, 7, 25, 6, 25, 18, 10, 16, 2, 3, 8, 15, 12, 11, 7, 1, 12, 10, 2, 7, 7, 11, 5, 6, 12, 25, 0, 0] list of sampled characters: ['l', 'q', 'x', 'n', 'm', 'i', 'j', 'v', 'x', 'f', 'm', 'k', 'l', 'f', 'u', 'o', 'u', 'n', 'c', 'b', 'a', 'u', 'r', 'x', 'g', 'y', 'f', 'y', 'r', 'j', 'p', 'b', 'c', 'h', 'o', 'l', 'k', 'g', 'a', 'l', 'j', 'b', 'g', 'g', 'k', 'e', 'f', 'l', 'y', '', ''] 3 - Building the language model It is time to build the character-level language model for text generation. 3.1 - Gradient descent In this section you will implement a function performing one step of stochastic gradient descent (with clipped gradients). You will go through the training examples one at a time, so the optimization algorithm will be stochastic gradient descent. As a reminder, here are the steps of a common optimization loop for an RNN: Forward propagate through the RNN to compute the loss Backward propagate through time to compute the gradients of the loss with respect to the parameters Clip the gradients if necessary Update your parameters using gradient descent Exercise: Implement this optimization process (one step of stochastic gradient descent). We provide you with the following functions: 12345678910111213141516def rnn_forward(X, Y, a_prev, parameters): """ Performs the forward propagation through the RNN and computes the cross-entropy loss. It returns the loss' value as well as a "cache" storing values to be used in the backpropagation.""" .... return loss, cache def rnn_backward(X, Y, parameters, cache): """ Performs the backward propagation through time to compute the gradients of the loss with respect to the parameters. It returns also all the hidden states.""" ... return gradients, adef update_parameters(parameters, gradients, learning_rate): """ Updates parameters using the Gradient Descent Update Rule.""" ... return parameters 123456789101112131415161718192021222324252627282930313233343536373839404142434445# GRADED FUNCTION: optimizedef optimize(X, Y, a_prev, parameters, learning_rate = 0.01): """ Execute one step of the optimization to train the model. Arguments: X -- list of integers, where each integer is a number that maps to a character in the vocabulary. Y -- list of integers, exactly the same as X but shifted one index to the left. a_prev -- previous hidden state. parameters -- python dictionary containing: Wax -- Weight matrix multiplying the input, numpy array of shape (n_a, n_x) Waa -- Weight matrix multiplying the hidden state, numpy array of shape (n_a, n_a) Wya -- Weight matrix relating the hidden-state to the output, numpy array of shape (n_y, n_a) b -- Bias, numpy array of shape (n_a, 1) by -- Bias relating the hidden-state to the output, numpy array of shape (n_y, 1) learning_rate -- learning rate for the model. Returns: loss -- value of the loss function (cross-entropy) gradients -- python dictionary containing: dWax -- Gradients of input-to-hidden weights, of shape (n_a, n_x) dWaa -- Gradients of hidden-to-hidden weights, of shape (n_a, n_a) dWya -- Gradients of hidden-to-output weights, of shape (n_y, n_a) db -- Gradients of bias vector, of shape (n_a, 1) dby -- Gradients of output bias vector, of shape (n_y, 1) a[len(X)-1] -- the last hidden state, of shape (n_a, 1) """ ### START CODE HERE ### # Forward propagate through time (≈1 line) loss, cache = rnn_forward(X, Y, a_prev, parameters) # Backpropagate through time (≈1 line) gradients, a = rnn_backward(X, Y, parameters, cache) # Clip your gradients between -5 (min) and 5 (max) (≈1 line) gradients = clip(gradients, 5) # Update parameters (≈1 line) parameters = update_parameters(parameters, gradients, learning_rate) ### END CODE HERE ### return loss, gradients, a[len(X)-1] 1234567891011121314151617np.random.seed(1)vocab_size, n_a = 27, 100a_prev = np.random.randn(n_a, 1)Wax, Waa, Wya = np.random.randn(n_a, vocab_size), np.random.randn(n_a, n_a), np.random.randn(vocab_size, n_a)b, by = np.random.randn(n_a, 1), np.random.randn(vocab_size, 1)parameters = &#123;"Wax": Wax, "Waa": Waa, "Wya": Wya, "b": b, "by": by&#125;X = [12,3,5,11,22,3]Y = [4,14,11,22,25, 26]loss, gradients, a_last = optimize(X, Y, a_prev, parameters, learning_rate = 0.01)print("Loss =", loss)print("gradients[\"dWaa\"][1][2] =", gradients["dWaa"][1][2])print("np.argmax(gradients[\"dWax\"]) =", np.argmax(gradients["dWax"]))print("gradients[\"dWya\"][1][2] =", gradients["dWya"][1][2])print("gradients[\"db\"][4] =", gradients["db"][4])print("gradients[\"dby\"][1] =", gradients["dby"][1])print("a_last[4] =", a_last[4]) Loss = 126.503975722 gradients["dWaa"][1][2] = 0.194709315347 np.argmax(gradients["dWax"]) = 93 gradients["dWya"][1][2] = -0.007773876032 gradients["db"][4] = [-0.06809825] gradients["dby"][1] = [ 0.01538192] a_last[4] = [-1.] ** Expected output:** Loss 126.503975722 gradients["dWaa"][1][2] 0.194709315347 np.argmax(gradients["dWax"]) 93 gradients["dWya"][1][2] -0.007773876032 gradients["db"][4] [-0.06809825] gradients["dby"][1] [ 0.01538192] a_last[4] [-1.] 3.2 - Training the model Given the dataset of dinosaur names, we use each line of the dataset (one name) as one training example. Every 100 steps of stochastic gradient descent, you will sample 10 randomly chosen names to see how the algorithm is doing. Remember to shuffle the dataset, so that stochastic gradient descent visits the examples in random order. Exercise: Follow the instructions and implement model(). When examples[index] contains one dinosaur name (string), to create an example (X, Y), you can use this: 123index = j % len(examples)X = [None] + [char_to_ix[ch] for ch in examples[index]] Y = X[1:] + [char_to_ix["\n"]] Note that we use: index= j % len(examples), where j = 1....num_iterations, to make sure that examples[index] is always a valid statement (index is smaller than len(examples)). The first entry of X being None will be interpreted by rnn_forward() as setting \(x^{\langle 0 \rangle} = \vec{0}\). Further, this ensures that Y is equal to X but shifted one step to the left, and with an additional "" appended to signify the end of the dinosaur name. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677# GRADED FUNCTION: modeldef model(data, ix_to_char, char_to_ix, num_iterations = 35000, n_a = 50, dino_names = 7, vocab_size = 27): """ Trains the model and generates dinosaur names. Arguments: data -- text corpus ix_to_char -- dictionary that maps the index to a character char_to_ix -- dictionary that maps a character to an index num_iterations -- number of iterations to train the model for n_a -- number of units of the RNN cell dino_names -- number of dinosaur names you want to sample at each iteration. vocab_size -- number of unique characters found in the text, size of the vocabulary Returns: parameters -- learned parameters """ # Retrieve n_x and n_y from vocab_size n_x, n_y = vocab_size, vocab_size # Initialize parameters parameters = initialize_parameters(n_a, n_x, n_y) # Initialize loss (this is required because we want to smooth our loss, don't worry about it) loss = get_initial_loss(vocab_size, dino_names) # Build list of all dinosaur names (training examples). with open("dinos.txt") as f: examples = f.readlines() examples = [x.lower().strip() for x in examples] # Shuffle list of all dinosaur names np.random.seed(0) np.random.shuffle(examples) # Initialize the hidden state of your LSTM a_prev = np.zeros((n_a, 1)) # Optimization loop for j in range(num_iterations): ### START CODE HERE ### # Use the hint above to define one training example (X,Y) (≈ 2 lines) index = j % len(examples) X = [None] + [char_to_ix[ch] for ch in examples[index]] Y = X[1:] + [char_to_ix["\n"]] # Perform one optimization step: Forward-prop -&gt; Backward-prop -&gt; Clip -&gt; Update parameters # Choose a learning rate of 0.01 curr_loss, gradients, a_prev = optimize(X, Y, a_prev, parameters,learning_rate = 0.01) ### END CODE HERE ### # Use a latency trick to keep the loss smooth. It happens here to accelerate the training. loss = smooth(loss, curr_loss) # Every 2000 Iteration, generate "n" characters thanks to sample() to check if the model is learning properly if j % 2000 == 0: print('Iteration: %d, Loss: %f' % (j, loss) + '\n') # The number of dinosaur names to print seed = 0 for name in range(dino_names): # Sample indices and print them sampled_indices = sample(parameters, char_to_ix, seed) print_sample(sampled_indices, ix_to_char) seed += 1 # To get the same result for grading purposed, increment the seed by one. print('\n') return parameters Run the following cell, you should observe your model outputting random-looking characters at the first iteration. After a few thousand iterations, your model should learn to generate reasonable-looking names. 1parameters = model(data, ix_to_char, char_to_ix) Iteration: 0, Loss: 23.087336 Nkzxwtdmfqoeyhsqwasjkjvu Kneb Kzxwtdmfqoeyhsqwasjkjvu Neb Zxwtdmfqoeyhsqwasjkjvu Eb Xwtdmfqoeyhsqwasjkjvu Iteration: 2000, Loss: 27.884160 Liusskeomnolxeros Hmdaairus Hytroligoraurus Lecalosapaus Xusicikoraurus Abalpsamantisaurus Tpraneronxeros Iteration: 4000, Loss: 25.901815 Mivrosaurus Inee Ivtroplisaurus Mbaaisaurus Wusichisaurus Cabaselachus Toraperlethosdarenitochusthiamamumamaon Iteration: 6000, Loss: 24.608779 Onwusceomosaurus Lieeaerosaurus Lxussaurus Oma Xusteonosaurus Eeahosaurus Toreonosaurus Iteration: 8000, Loss: 24.070350 Onxusichepriuon Kilabersaurus Lutrodon Omaaerosaurus Xutrcheps Edaksoje Trodiktonus Iteration: 10000, Loss: 23.844446 Onyusaurus Klecalosaurus Lustodon Ola Xusodonia Eeaeosaurus Troceosaurus Iteration: 12000, Loss: 23.291971 Onyxosaurus Kica Lustrepiosaurus Olaagrraiansaurus Yuspangosaurus Eealosaurus Trognesaurus Iteration: 14000, Loss: 23.382339 Meutromodromurus Inda Iutroinatorsaurus Maca Yusteratoptititan Ca Troclosaurus Iteration: 16000, Loss: 23.288447 Meuspsangosaurus Ingaa Iusosaurus Macalosaurus Yushanis Daalosaurus Trpandon Iteration: 18000, Loss: 22.823526 Phytrolonhonyg Mela Mustrerasaurus Peg Ytronorosaurus Ehalosaurus Trolomeehus Iteration: 20000, Loss: 23.041871 Nousmofonosaurus Loma Lytrognatiasaurus Ngaa Ytroenetiaudostarmilus Eiafosaurus Troenchulunosaurus Iteration: 22000, Loss: 22.728849 Piutyrangosaurus Midaa Myroranisaurus Pedadosaurus Ytrodon Eiadosaurus Trodoniomusitocorces Iteration: 24000, Loss: 22.683403 Meutromeisaurus Indeceratlapsaurus Jurosaurus Ndaa Yusicheropterus Eiaeropectus Trodonasaurus Iteration: 26000, Loss: 22.554523 Phyusaurus Liceceron Lyusichenodylus Pegahus Yustenhtonthosaurus Elagosaurus Trodontonsaurus Iteration: 28000, Loss: 22.484472 Onyutimaerihus Koia Lytusaurus Ola Ytroheltorus Eiadosaurus Trofiashates Iteration: 30000, Loss: 22.774404 Phytys Lica Lysus Pacalosaurus Ytrochisaurus Eiacosaurus Trochesaurus Iteration: 32000, Loss: 22.209473 Mawusaurus Jica Lustoia Macaisaurus Yusolenqtesaurus Eeaeosaurus Trnanatrax Iteration: 34000, Loss: 22.396744 Mavptokekus Ilabaisaurus Itosaurus Macaesaurus Yrosaurus Eiaeosaurus Trodon Conclusion You can see that your algorithm has started to generate plausible dinosaur names towards the end of the training. At first, it was generating random characters, but towards the end you could see dinosaur names with cool endings. Feel free to run the algorithm even longer and play with hyperparameters to see if you can get even better results. Our implemetation generated some really cool names like maconucon, marloralus and macingsersaurus. Your model hopefully also learned that dinosaur names tend to end in saurus, don, aura, tor, etc. If your model generates some non-cool names, don't blame the model entirely--not all actual dinosaur names sound cool. (For example, dromaeosauroides is an actual dinosaur name and is in the training set.) But this model should give you a set of candidates from which you can pick the coolest! This assignment had used a relatively small dataset, so that you could train an RNN quickly on a CPU. Training a model of the english language requires a much bigger dataset, and usually needs much more computation, and could run for many hours on GPUs. We ran our dinosaur name for quite some time, and so far our favoriate name is the great, undefeatable, and fierce: Mangosaurus! 4 - Writing like Shakespeare The rest of this notebook is optional and is not graded, but we hope you'll do it anyway since it's quite fun and informative. A similar (but more complicated) task is to generate Shakespeare poems. Instead of learning from a dataset of Dinosaur names you can use a collection of Shakespearian poems. Using LSTM cells, you can learn longer term dependencies that span many characters in the text--e.g., where a character appearing somewhere a sequence can influence what should be a different character much much later in ths sequence. These long term dependencies were less important with dinosaur names, since the names were quite short. Let's become poets! We have implemented a Shakespeare poem generator with Keras. Run the following cell to load the required packages and models. This may take a few minutes. 12345678910from __future__ import print_functionfrom keras.callbacks import LambdaCallbackfrom keras.models import Model, load_model, Sequentialfrom keras.layers import Dense, Activation, Dropout, Input, Maskingfrom keras.layers import LSTMfrom keras.utils.data_utils import get_filefrom keras.preprocessing.sequence import pad_sequencesfrom shakespeare_utils import *import sysimport io To save you some time, we have already trained a model for ~1000 epochs on a collection of Shakespearian poems called "The Sonnets". Let's train the model for one more epoch. When it finishes training for an epoch---this will also take a few minutes---you can run generate_output, which will prompt asking you for an input (&lt;40 characters). The poem will start with your sentence, and our RNN-Shakespeare will complete the rest of the poem for you! For example, try "Forsooth this maketh no sense " (don't enter the quotation marks). Depending on whether you include the space at the end, your results might also differ--try it both ways, and try other inputs as well. 123print_callback = LambdaCallback(on_epoch_end=on_epoch_end)model.fit(x, y, batch_size=128, epochs=1, callbacks=[print_callback]) 12# Run this cell to try with different inputs without having to re-train the model generate_output() The RNN-Shakespeare model is very similar to the one you have built for dinosaur names. The only major differences are: - LSTMs instead of the basic RNN to capture longer-range dependencies - The model is a deeper, stacked LSTM model (2 layer) - Using Keras instead of python to simplify the code If you want to learn more, you can also check out the Keras Team's text generation implementation on GitHub: https://github.com/keras-team/keras/blob/master/examples/lstm_text_generation.py. Congratulations on finishing this notebook! References: - This exercise took inspiration from Andrej Karpathy's implementation: https://gist.github.com/karpathy/d4dee566867f8291f086. To learn more about text generation, also check out Karpathy's blog post. - For the Shakespearian poem generator, our implementation was based on the implementation of an LSTM text generator by the Keras team: https://github.com/keras-team/keras/blob/master/examples/lstm_text_generation.py 12]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Project</tag>
        <tag>Sequence Models</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RNN Implementation]]></title>
    <url>%2FRNN-Implementation%2F2019%2F03%2F28%2F</url>
    <content type="text"><![CDATA[Building your Recurrent Neural Network - Step by Step Welcome to Course 5's first assignment! In this assignment, you will implement your first Recurrent Neural Network in numpy. Recurrent Neural Networks (RNN) are very effective for Natural Language Processing and other sequence tasks because they have "memory". They can read inputs \(x^{\langle t \rangle}\) (such as words) one at a time, and remember some information/context through the hidden layer activations that get passed from one time-step to the next. This allows a uni-directional RNN to take information from the past to process later inputs. A bidirection RNN can take context from both the past and the future. Notation: - Superscript \([l]\) denotes an object associated with the \(l^{th}\) layer. - Example: \(a^{[4]}\) is the \(4^{th}\) layer activation. \(W^{[5]}\) and \(b^{[5]}\) are the \(5^{th}\) layer parameters. Superscript \((i)\) denotes an object associated with the \(i^{th}\) example. Example: \(x^{(i)}\) is the \(i^{th}\) training example input. Superscript \(\langle t \rangle\) denotes an object at the \(t^{th}\) time-step. Example: \(x^{\langle t \rangle}\) is the input x at the \(t^{th}\) time-step. \(x^{(i)\langle t \rangle}\) is the input at the \(t^{th}\) timestep of example \(i\). Lowerscript \(i\) denotes the \(i^{th}\) entry of a vector. Example: \(a^{[l]}_i\) denotes the \(i^{th}\) entry of the activations in layer \(l\). We assume that you are already familiar with numpy and/or have completed the previous courses of the specialization. Let's get started! Let's first import all the packages that you will need during this assignment. 12import numpy as npfrom rnn_utils import * 1 - Forward propagation for the basic Recurrent Neural Network Later this week, you will generate music using an RNN. The basic RNN that you will implement has the structure below. In this example, \(T_x = T_y\). Figure 1: Basic RNN model Here's how you can implement an RNN: Steps: 1. Implement the calculations needed for one time-step of the RNN. 2. Implement a loop over \(T_x\) time-steps in order to process all the inputs, one at a time. Let's go! 1.1 - RNN cell A Recurrent neural network can be seen as the repetition of a single cell. You are first going to implement the computations for a single time-step. The following figure describes the operations for a single time-step of an RNN cell. Figure 2: Basic RNN cell. Takes as input \(x^{\langle t \rangle}\) (current input) and \(a^{\langle t - 1\rangle}\) (previous hidden state containing information from the past), and outputs \(a^{\langle t \rangle}\) which is given to the next RNN cell and also used to predict \(y^{\langle t \rangle}\) Exercise: Implement the RNN-cell described in Figure (2). Instructions: 1. Compute the hidden state with tanh activation: \(a^{\langle t \rangle} = \tanh(W_{aa} a^{\langle t-1 \rangle} + W_{ax} x^{\langle t \rangle} + b_a)\). 2. Using your new hidden state \(a^{\langle t \rangle}\), compute the prediction \(\hat{y}^{\langle t \rangle} = softmax(W_{ya} a^{\langle t \rangle} + b_y)\). We provided you a function: softmax. 3. Store \((a^{\langle t \rangle}, a^{\langle t-1 \rangle}, x^{\langle t \rangle}, parameters)\) in cache 4. Return \(a^{\langle t \rangle}\) , \(y^{\langle t \rangle}\) and cache We will vectorize over \(m\) examples. Thus, \(x^{\langle t \rangle}\) will have dimension \((n_x,m)\), and \(a^{\langle t \rangle}\) will have dimension \((n_a,m)\). 123456789101112131415161718192021222324252627282930313233343536373839# GRADED FUNCTION: rnn_cell_forwarddef rnn_cell_forward(xt, a_prev, parameters): """ Implements a single forward step of the RNN-cell as described in Figure (2) Arguments: xt -- your input data at timestep "t", numpy array of shape (n_x, m). a_prev -- Hidden state at timestep "t-1", numpy array of shape (n_a, m) parameters -- python dictionary containing: Wax -- Weight matrix multiplying the input, numpy array of shape (n_a, n_x) Waa -- Weight matrix multiplying the hidden state, numpy array of shape (n_a, n_a) Wya -- Weight matrix relating the hidden-state to the output, numpy array of shape (n_y, n_a) ba -- Bias, numpy array of shape (n_a, 1) by -- Bias relating the hidden-state to the output, numpy array of shape (n_y, 1) Returns: a_next -- next hidden state, of shape (n_a, m) yt_pred -- prediction at timestep "t", numpy array of shape (n_y, m) cache -- tuple of values needed for the backward pass, contains (a_next, a_prev, xt, parameters) """ # Retrieve parameters from "parameters" Wax = parameters["Wax"] Waa = parameters["Waa"] Wya = parameters["Wya"] ba = parameters["ba"] by = parameters["by"] ### START CODE HERE ### (≈2 lines) # compute next activation state using the formula given above a_next = np.tanh(np.dot(Wax,xt) + np.dot(Waa,a_prev) + ba) # compute output of the current cell using the formula given above yt_pred = softmax(np.dot(Wya,a_next)+by) ### END CODE HERE ### # store values you need for backward propagation in cache cache = (a_next, a_prev, xt, parameters) return a_next, yt_pred, cache 12345678910111213141516np.random.seed(1)xt = np.random.randn(3,10)a_prev = np.random.randn(5,10)Waa = np.random.randn(5,5)Wax = np.random.randn(5,3)Wya = np.random.randn(2,5)ba = np.random.randn(5,1)by = np.random.randn(2,1)parameters = &#123;"Waa": Waa, "Wax": Wax, "Wya": Wya, "ba": ba, "by": by&#125;a_next, yt_pred, cache = rnn_cell_forward(xt, a_prev, parameters)print("a_next[4] = ", a_next[4])print("a_next.shape = ", a_next.shape)print("yt_pred[1] =", yt_pred[0])print("yt_pred.shape = ", yt_pred.shape) a_next[4] = [ 0.59584544 0.18141802 0.61311866 0.99808218 0.85016201 0.99980978 -0.18887155 0.99815551 0.6531151 0.82872037] a_next.shape = (5, 10) yt_pred[1] = [ 0.0111839 0.98317979 0.78859101 0.63182533 0.01011613 0.11054788 0.63079776 0.0033688 0.0017441 0.82253474] yt_pred.shape = (2, 10) Expected Output: a_next[4]: [ 0.59584544 0.18141802 0.61311866 0.99808218 0.85016201 0.99980978 -0.18887155 0.99815551 0.6531151 0.82872037] a_next.shape: (5, 10) yt[1]: [ 0.9888161 0.01682021 0.21140899 0.36817467 0.98988387 0.88945212 0.36920224 0.9966312 0.9982559 0.17746526] yt.shape: (2, 10) 1.2 - RNN forward pass You can see an RNN as the repetition of the cell you've just built. If your input sequence of data is carried over 10 time steps, then you will copy the RNN cell 10 times. Each cell takes as input the hidden state from the previous cell (\(a^{\langle t-1 \rangle}\)) and the current time-step's input data (\(x^{\langle t \rangle}\)). It outputs a hidden state (\(a^{\langle t \rangle}\)) and a prediction (\(y^{\langle t \rangle}\)) for this time-step. Figure 3: Basic RNN. The input sequence \(x = (x^{\langle 1 \rangle}, x^{\langle 2 \rangle}, ..., x^{\langle T_x \rangle})\) is carried over \(T_x\) time steps. The network outputs \(y = (y^{\langle 1 \rangle}, y^{\langle 2 \rangle}, ..., y^{\langle T_x \rangle})\). Exercise: Code the forward propagation of the RNN described in Figure (3). Instructions: 1. Create a vector of zeros (\(a\)) that will store all the hidden states computed by the RNN. 2. Initialize the "next" hidden state as \(a_0\) (initial hidden state). 3. Start looping over each time step, your incremental index is \(t\) : - Update the "next" hidden state and the cache by running rnn_cell_forward - Store the "next" hidden state in \(a\) (\(t^{th}\) position) - Store the prediction in y - Add the cache to the list of caches 4. Return \(a\), \(y\) and caches 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455# GRADED FUNCTION: rnn_forwarddef rnn_forward(x, a0, parameters): """ Implement the forward propagation of the recurrent neural network described in Figure (3). Arguments: x -- Input data for every time-step, of shape (n_x, m, T_x). a0 -- Initial hidden state, of shape (n_a, m) parameters -- python dictionary containing: Waa -- Weight matrix multiplying the hidden state, numpy array of shape (n_a, n_a) Wax -- Weight matrix multiplying the input, numpy array of shape (n_a, n_x) Wya -- Weight matrix relating the hidden-state to the output, numpy array of shape (n_y, n_a) ba -- Bias numpy array of shape (n_a, 1) by -- Bias relating the hidden-state to the output, numpy array of shape (n_y, 1) Returns: a -- Hidden states for every time-step, numpy array of shape (n_a, m, T_x) y_pred -- Predictions for every time-step, numpy array of shape (n_y, m, T_x) caches -- tuple of values needed for the backward pass, contains (list of caches, x) """ # Initialize "caches" which will contain the list of all caches caches = [] # Retrieve dimensions from shapes of x and parameters["Wya"] n_x, m, T_x = x.shape n_y, n_a = parameters["Wya"].shape ### START CODE HERE ### # initialize "a" and "y" with zeros (≈2 lines) a = np.zeros((n_a,m,T_x)) # x -&gt; (n_x, m) waa -&gt; (n_a,n_x) a -&gt; (na,m) y_pred = np.zeros((n_y,m,T_x)) # hidden layer n_a, output layer n_y Wya -&gt; (n_y,n_a) y_pred -&gt; (n_y,m) # Initialize a_next (≈1 line) a_next = a0 # loop over all time-steps for t in range(x.shape[2]): # Update next hidden state, compute the prediction, get the cache (≈1 line) a_next, yt_pred, cache = rnn_cell_forward(x[:,:,t], a_next, parameters) # Save the value of the new "next" hidden state in a (≈1 line) a[:,:,t] = a_next # Save the value of the prediction in y (≈1 line) y_pred[:,:,t] = yt_pred # Append "cache" to "caches" (≈1 line) caches.append(cache) ### END CODE HERE ### # store values needed for backward propagation in cache caches = (caches, x) return a, y_pred, caches 1234567891011121314151617np.random.seed(1)x = np.random.randn(3,10,4)a0 = np.random.randn(5,10)Waa = np.random.randn(5,5)Wax = np.random.randn(5,3)Wya = np.random.randn(2,5)ba = np.random.randn(5,1)by = np.random.randn(2,1)parameters = &#123;"Waa": Waa, "Wax": Wax, "Wya": Wya, "ba": ba, "by": by&#125;a, y_pred, caches = rnn_forward(x, a0, parameters)print("a[4][1] = ", a[4][1])print("a.shape = ", a.shape)print("y_pred[1][3] =", y_pred[1][3])print("y_pred.shape = ", y_pred.shape)print("caches[1][1][3] =", caches[1][1][3])print("len(caches) = ", len(caches)) a[4][1] = [-0.99999375 0.77911235 -0.99861469 -0.99833267] a.shape = (5, 10, 4) y_pred[1][3] = [ 0.79560373 0.86224861 0.11118257 0.81515947] y_pred.shape = (2, 10, 4) caches[1][1][3] = [-1.1425182 -0.34934272 -0.20889423 0.58662319] len(caches) = 2 Expected Output: a[4][1]: [-0.99999375 0.77911235 -0.99861469 -0.99833267] a.shape: (5, 10, 4) y[1][3]: [ 0.79560373 0.86224861 0.11118257 0.81515947] y.shape: (2, 10, 4) cache[1][1][3]: [-1.1425182 -0.34934272 -0.20889423 0.58662319] len(cache): 2 Congratulations! You've successfully built the forward propagation of a recurrent neural network from scratch. This will work well enough for some applications, but it suffers from vanishing gradient problems. So it works best when each output \(y^{\langle t \rangle}\) can be estimated using mainly "local" context (meaning information from inputs \(x^{\langle t&#39; \rangle}\) where \(t&#39;\) is not too far from \(t\)). In the next part, you will build a more complex LSTM model, which is better at addressing vanishing gradients. The LSTM will be better able to remember a piece of information and keep it saved for many timesteps. 2 - Long Short-Term Memory (LSTM) network This following figure shows the operations of an LSTM-cell. Figure 4: LSTM-cell. This tracks and updates a "cell state" or memory variable \(c^{\langle t \rangle}\) at every time-step, which can be different from \(a^{\langle t \rangle}\). Similar to the RNN example above, you will start by implementing the LSTM cell for a single time-step. Then you can iteratively call it from inside a for-loop to have it process an input with \(T_x\) time-steps. About the gates - Forget gate For the sake of this illustration, lets assume we are reading words in a piece of text, and want use an LSTM to keep track of grammatical structures, such as whether the subject is singular or plural. If the subject changes from a singular word to a plural word, we need to find a way to get rid of our previously stored memory value of the singular/plural state. In an LSTM, the forget gate lets us do this: \[\Gamma_f^{\langle t \rangle} = \sigma(W_f[a^{\langle t-1 \rangle}, x^{\langle t \rangle}] + b_f)\tag{1} \] Here, \(W_f\) are weights that govern the forget gate's behavior. We concatenate \([a^{\langle t-1 \rangle}, x^{\langle t \rangle}]\) and multiply by \(W_f\). The equation above results in a vector \(\Gamma_f^{\langle t \rangle}\) with values between 0 and 1. This forget gate vector will be multiplied element-wise by the previous cell state \(c^{\langle t-1 \rangle}\). So if one of the values of \(\Gamma_f^{\langle t \rangle}\) is 0 (or close to 0) then it means that the LSTM should remove that piece of information (e.g. the singular subject) in the corresponding component of \(c^{\langle t-1 \rangle}\). If one of the values is 1, then it will keep the information. - Update gate Once we forget that the subject being discussed is singular, we need to find a way to update it to reflect that the new subject is now plural. Here is the formulat for the update gate: \[\Gamma_u^{\langle t \rangle} = \sigma(W_u[a^{\langle t-1 \rangle}, x^{\{t\}}] + b_u)\tag{2} \] Similar to the forget gate, here \(\Gamma_u^{\langle t \rangle}\) is again a vector of values between 0 and 1. This will be multiplied element-wise with \(\tilde{c}^{\langle t \rangle}\), in order to compute \(c^{\langle t \rangle}\). - Updating the cell To update the new subject we need to create a new vector of numbers that we can add to our previous cell state. The equation we use is: \[ \tilde{c}^{\langle t \rangle} = \tanh(W_c[a^{\langle t-1 \rangle}, x^{\langle t \rangle}] + b_c)\tag{3} \] Finally, the new cell state is: \[ c^{\langle t \rangle} = \Gamma_f^{\langle t \rangle}* c^{\langle t-1 \rangle} + \Gamma_u^{\langle t \rangle} *\tilde{c}^{\langle t \rangle} \tag{4} \] - Output gate To decide which outputs we will use, we will use the following two formulas: \[ \Gamma_o^{\langle t \rangle}= \sigma(W_o[a^{\langle t-1 \rangle}, x^{\langle t \rangle}] + b_o)\tag{5}\] \[ a^{\langle t \rangle} = \Gamma_o^{\langle t \rangle}* \tanh(c^{\langle t \rangle})\tag{6} \] Where in equation 5 you decide what to output using a sigmoid function and in equation 6 you multiply that by the \(\tanh\) of the previous state. 2.1 - LSTM cell Exercise: Implement the LSTM cell described in the Figure (3). Instructions: 1. Concatenate \(a^{\langle t-1 \rangle}\) and \(x^{\langle t \rangle}\) in a single matrix: \(concat = \begin{bmatrix} a^{\langle t-1 \rangle} \\ x^{\langle t \rangle} \end{bmatrix}\) 2. Compute all the formulas 1-6. You can use sigmoid() (provided) and np.tanh(). 3. Compute the prediction \(y^{\langle t \rangle}\). You can use softmax() (provided). 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970# GRADED FUNCTION: lstm_cell_forwarddef lstm_cell_forward(xt, a_prev, c_prev, parameters): """ Implement a single forward step of the LSTM-cell as described in Figure (4) Arguments: xt -- your input data at timestep "t", numpy array of shape (n_x, m). a_prev -- Hidden state at timestep "t-1", numpy array of shape (n_a, m) c_prev -- Memory state at timestep "t-1", numpy array of shape (n_a, m) parameters -- python dictionary containing: Wf -- Weight matrix of the forget gate, numpy array of shape (n_a, n_a + n_x) bf -- Bias of the forget gate, numpy array of shape (n_a, 1) Wi -- Weight matrix of the update gate, numpy array of shape (n_a, n_a + n_x) bi -- Bias of the update gate, numpy array of shape (n_a, 1) Wc -- Weight matrix of the first "tanh", numpy array of shape (n_a, n_a + n_x) bc -- Bias of the first "tanh", numpy array of shape (n_a, 1) Wo -- Weight matrix of the output gate, numpy array of shape (n_a, n_a + n_x) bo -- Bias of the output gate, numpy array of shape (n_a, 1) Wy -- Weight matrix relating the hidden-state to the output, numpy array of shape (n_y, n_a) by -- Bias relating the hidden-state to the output, numpy array of shape (n_y, 1) Returns: a_next -- next hidden state, of shape (n_a, m) c_next -- next memory state, of shape (n_a, m) yt_pred -- prediction at timestep "t", numpy array of shape (n_y, m) cache -- tuple of values needed for the backward pass, contains (a_next, c_next, a_prev, c_prev, xt, parameters) Note: ft/it/ot stand for the forget/update/output gates, cct stands for the candidate value (c tilde), c stands for the memory value """ # Retrieve parameters from "parameters" Wf = parameters["Wf"] bf = parameters["bf"] Wi = parameters["Wi"] bi = parameters["bi"] Wc = parameters["Wc"] bc = parameters["bc"] Wo = parameters["Wo"] bo = parameters["bo"] Wy = parameters["Wy"] by = parameters["by"] # Retrieve dimensions from shapes of xt and Wy n_x, m = xt.shape n_y, n_a = Wy.shape ### START CODE HERE ### # Concatenate a_prev and xt (≈3 lines) concat = np.zeros((a_prev.shape[0] + xt.shape[0],xt.shape[1])) concat[: n_a, :] = a_prev concat[n_a :, :] = xt # Compute values for ft, it, cct, c_next, ot, a_next using the formulas given figure (4) (≈6 lines) ft = sigmoid(np.dot(Wf,concat) + bf) it = sigmoid(np.dot(Wi,concat) + bi) cct = np.tanh(np.dot(Wc,concat) + bc) c_next = ft * c_prev + it * cct ot = sigmoid(np.dot(Wo,concat) + bo) a_next = ot * np.tanh(c_next) # Compute prediction of the LSTM cell (≈1 line) yt_pred = softmax(np.dot(Wy,a_next)+ by) ### END CODE HERE ### # store values needed for backward propagation in cache cache = (a_next, c_next, a_prev, c_prev, ft, it, cct, ot, xt, parameters) return a_next, c_next, yt_pred, cache 1234567891011121314151617181920212223242526np.random.seed(1)xt = np.random.randn(3,10)a_prev = np.random.randn(5,10)c_prev = np.random.randn(5,10)Wf = np.random.randn(5, 5+3)bf = np.random.randn(5,1)Wi = np.random.randn(5, 5+3)bi = np.random.randn(5,1)Wo = np.random.randn(5, 5+3)bo = np.random.randn(5,1)Wc = np.random.randn(5, 5+3)bc = np.random.randn(5,1)Wy = np.random.randn(2,5)by = np.random.randn(2,1)parameters = &#123;"Wf": Wf, "Wi": Wi, "Wo": Wo, "Wc": Wc, "Wy": Wy, "bf": bf, "bi": bi, "bo": bo, "bc": bc, "by": by&#125;a_next, c_next, yt, cache = lstm_cell_forward(xt, a_prev, c_prev, parameters)print("a_next[4] = ", a_next[4])print("a_next.shape = ", c_next.shape)print("c_next[2] = ", c_next[2])print("c_next.shape = ", c_next.shape)print("yt[1] =", yt[1])print("yt.shape = ", yt.shape)print("cache[1][3] =", cache[1][3])print("len(cache) = ", len(cache)) a_next[4] = [-0.66408471 0.0036921 0.02088357 0.22834167 -0.85575339 0.00138482 0.76566531 0.34631421 -0.00215674 0.43827275] a_next.shape = (5, 10) c_next[2] = [ 0.63267805 1.00570849 0.35504474 0.20690913 -1.64566718 0.11832942 0.76449811 -0.0981561 -0.74348425 -0.26810932] c_next.shape = (5, 10) yt[1] = [ 0.79913913 0.15986619 0.22412122 0.15606108 0.97057211 0.31146381 0.00943007 0.12666353 0.39380172 0.07828381] yt.shape = (2, 10) cache[1][3] = [-0.16263996 1.03729328 0.72938082 -0.54101719 0.02752074 -0.30821874 0.07651101 -1.03752894 1.41219977 -0.37647422] len(cache) = 10 Expected Output: a_next[4]: [-0.66408471 0.0036921 0.02088357 0.22834167 -0.85575339 0.00138482 0.76566531 0.34631421 -0.00215674 0.43827275] a_next.shape: (5, 10) c_next[2]: [ 0.63267805 1.00570849 0.35504474 0.20690913 -1.64566718 0.11832942 0.76449811 -0.0981561 -0.74348425 -0.26810932] c_next.shape: (5, 10) yt[1]: [ 0.79913913 0.15986619 0.22412122 0.15606108 0.97057211 0.31146381 0.00943007 0.12666353 0.39380172 0.07828381] yt.shape: (2, 10) cache[1][3]: [-0.16263996 1.03729328 0.72938082 -0.54101719 0.02752074 -0.30821874 0.07651101 -1.03752894 1.41219977 -0.37647422] len(cache): 10 2.2 - Forward pass for LSTM Now that you have implemented one step of an LSTM, you can now iterate this over this using a for-loop to process a sequence of \(T_x\) inputs. Figure 4: LSTM over multiple time-steps. Exercise: Implement lstm_forward() to run an LSTM over \(T_x\) time-steps. Note: \(c^{\langle 0 \rangle}\) is initialized with zeros. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263# GRADED FUNCTION: lstm_forwarddef lstm_forward(x, a0, parameters): """ Implement the forward propagation of the recurrent neural network using an LSTM-cell described in Figure (3). Arguments: x -- Input data for every time-step, of shape (n_x, m, T_x). a0 -- Initial hidden state, of shape (n_a, m) parameters -- python dictionary containing: Wf -- Weight matrix of the forget gate, numpy array of shape (n_a, n_a + n_x) bf -- Bias of the forget gate, numpy array of shape (n_a, 1) Wi -- Weight matrix of the update gate, numpy array of shape (n_a, n_a + n_x) bi -- Bias of the update gate, numpy array of shape (n_a, 1) Wc -- Weight matrix of the first "tanh", numpy array of shape (n_a, n_a + n_x) bc -- Bias of the first "tanh", numpy array of shape (n_a, 1) Wo -- Weight matrix of the output gate, numpy array of shape (n_a, n_a + n_x) bo -- Bias of the output gate, numpy array of shape (n_a, 1) Wy -- Weight matrix relating the hidden-state to the output, numpy array of shape (n_y, n_a) by -- Bias relating the hidden-state to the output, numpy array of shape (n_y, 1) Returns: a -- Hidden states for every time-step, numpy array of shape (n_a, m, T_x) y -- Predictions for every time-step, numpy array of shape (n_y, m, T_x) caches -- tuple of values needed for the backward pass, contains (list of all the caches, x) """ # Initialize "caches", which will track the list of all the caches caches = [] ### START CODE HERE ### # Retrieve dimensions from shapes of x and parameters['Wy'] (≈2 lines) n_x, m, T_x = x.shape n_y, n_a = parameters['Wy'].shape # initialize "a", "c" and "y" with zeros (≈3 lines) a = np.zeros((n_a, m, T_x)) c = np.zeros((n_a, m, T_x)) y = np.zeros((n_y, m, T_x)) # Initialize a_next and c_next (≈2 lines) a_next = a0 c_next = np.zeros(a0.shape) # loop over all time-steps for t in range(T_x): # Update next hidden state, next memory state, compute the prediction, get the cache (≈1 line) a_next, c_next, yt, cache = lstm_cell_forward(x[:,:,t], a_next, c_next, parameters) # Save the value of the new "next" hidden state in a (≈1 line) a[:,:,t] = a_next # Save the value of the prediction in y (≈1 line) y[:,:,t] = yt # Save the value of the next cell state (≈1 line) c[:,:,t] = c_next # Append the cache into caches (≈1 line) caches.append(cache) ### END CODE HERE ### # store values needed for backward propagation in cache caches = (caches, x) return a, y, c, caches 123456789101112131415161718192021222324np.random.seed(1)x = np.random.randn(3,10,7)a0 = np.random.randn(5,10)Wf = np.random.randn(5, 5+3)bf = np.random.randn(5,1)Wi = np.random.randn(5, 5+3)bi = np.random.randn(5,1)Wo = np.random.randn(5, 5+3)bo = np.random.randn(5,1)Wc = np.random.randn(5, 5+3)bc = np.random.randn(5,1)Wy = np.random.randn(2,5)by = np.random.randn(2,1)parameters = &#123;"Wf": Wf, "Wi": Wi, "Wo": Wo, "Wc": Wc, "Wy": Wy, "bf": bf, "bi": bi, "bo": bo, "bc": bc, "by": by&#125;a, y, c, caches = lstm_forward(x, a0, parameters)print("a[4][3][6] = ", a[4][3][6])print("a.shape = ", a.shape)print("y[1][4][3] =", y[1][4][3])print("y.shape = ", y.shape)print("caches[1][1[1]] =", caches[1][1][1])print("c[1][2][1]", c[1][2][1])print("len(caches) = ", len(caches)) a[4][3][6] = 0.172117767533 a.shape = (5, 10, 7) y[1][4][3] = 0.95087346185 y.shape = (2, 10, 7) caches[1][1[1]] = [ 0.82797464 0.23009474 0.76201118 -0.22232814 -0.20075807 0.18656139 0.41005165] c[1][2][1] -0.855544916718 len(caches) = 2 Expected Output: a[4][3][6] = 0.172117767533 a.shape = (5, 10, 7) y[1][4][3] = 0.95087346185 y.shape = (2, 10, 7) caches[1][1][1] = [ 0.82797464 0.23009474 0.76201118 -0.22232814 -0.20075807 0.18656139 0.41005165] c[1][2][1] = -0.855544916718 len(caches) = 2 Congratulations! You have now implemented the forward passes for the basic RNN and the LSTM. When using a deep learning framework, implementing the forward pass is sufficient to build systems that achieve great performance. The rest of this notebook is optional, and will not be graded. 3 - Backpropagation in recurrent neural networks (OPTIONAL / UNGRADED) In modern deep learning frameworks, you only have to implement the forward pass, and the framework takes care of the backward pass, so most deep learning engineers do not need to bother with the details of the backward pass. If however you are an expert in calculus and want to see the details of backprop in RNNs, you can work through this optional portion of the notebook. When in an earlier course you implemented a simple (fully connected) neural network, you used backpropagation to compute the derivatives with respect to the cost to update the parameters. Similarly, in recurrent neural networks you can to calculate the derivatives with respect to the cost in order to update the parameters. The backprop equations are quite complicated and we did not derive them in lecture. However, we will briefly present them below. 3.1 - Basic RNN backward pass We will start by computing the backward pass for the basic RNN-cell. Figure 5: RNN-cell's backward pass. Just like in a fully-connected neural network, the derivative of the cost function \(J\) backpropagates through the RNN by following the chain-rule from calculas. The chain-rule is also used to calculate \((\frac{\partial J}{\partial W_{ax}},\frac{\partial J}{\partial W_{aa}},\frac{\partial J}{\partial b})\) to update the parameters \((W_{ax}, W_{aa}, b_a)\). Deriving the one step backward functions: To compute the rnn_cell_backward you need to compute the following equations. It is a good exercise to derive them by hand. The derivative of \(\tanh\) is \(1-\tanh(x)^2\). You can find the complete proof here. Note that: $ (x)^2 = 1 - (x)^2$ Similarly for \(\frac{ \partial a^{\langle t \rangle} } {\partial W_{ax}}, \frac{ \partial a^{\langle t \rangle} } {\partial W_{aa}}, \frac{ \partial a^{\langle t \rangle} } {\partial b}\), the derivative of \(\tanh(u)\) is \((1-\tanh(u)^2)du\). The final two equations also follow same rule and are derived using the \(\tanh\) derivative. Note that the arrangement is done in a way to get the same dimensions to match. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748def rnn_cell_backward(da_next, cache): """ Implements the backward pass for the RNN-cell (single time-step). Arguments: da_next -- Gradient of loss with respect to next hidden state cache -- python dictionary containing useful values (output of rnn_cell_forward()) Returns: gradients -- python dictionary containing: dx -- Gradients of input data, of shape (n_x, m) da_prev -- Gradients of previous hidden state, of shape (n_a, m) dWax -- Gradients of input-to-hidden weights, of shape (n_a, n_x) dWaa -- Gradients of hidden-to-hidden weights, of shape (n_a, n_a) dba -- Gradients of bias vector, of shape (n_a, 1) """ # Retrieve values from cache (a_next, a_prev, xt, parameters) = cache # Retrieve values from parameters Wax = parameters["Wax"] Waa = parameters["Waa"] Wya = parameters["Wya"] ba = parameters["ba"] by = parameters["by"] ### START CODE HERE ### # compute the gradient of tanh with respect to a_next (≈1 line) dtanh = None # compute the gradient of the loss with respect to Wax (≈2 lines) dxt = None dWax = None # compute the gradient with respect to Waa (≈2 lines) da_prev = None dWaa = None # compute the gradient with respect to b (≈1 line) dba = None ### END CODE HERE ### # Store the gradients in a python dictionary gradients = &#123;"dxt": dxt, "da_prev": da_prev, "dWax": dWax, "dWaa": dWaa, "dba": dba&#125; return gradients 123456789101112131415161718192021222324np.random.seed(1)xt = np.random.randn(3,10)a_prev = np.random.randn(5,10)Wax = np.random.randn(5,3)Waa = np.random.randn(5,5)Wya = np.random.randn(2,5)b = np.random.randn(5,1)by = np.random.randn(2,1)parameters = &#123;"Wax": Wax, "Waa": Waa, "Wya": Wya, "ba": ba, "by": by&#125;a_next, yt, cache = rnn_cell_forward(xt, a_prev, parameters)da_next = np.random.randn(5,10)gradients = rnn_cell_backward(da_next, cache)print("gradients[\"dxt\"][1][2] =", gradients["dxt"][1][2])print("gradients[\"dxt\"].shape =", gradients["dxt"].shape)print("gradients[\"da_prev\"][2][3] =", gradients["da_prev"][2][3])print("gradients[\"da_prev\"].shape =", gradients["da_prev"].shape)print("gradients[\"dWax\"][3][1] =", gradients["dWax"][3][1])print("gradients[\"dWax\"].shape =", gradients["dWax"].shape)print("gradients[\"dWaa\"][1][2] =", gradients["dWaa"][1][2])print("gradients[\"dWaa\"].shape =", gradients["dWaa"].shape)print("gradients[\"dba\"][4] =", gradients["dba"][4])print("gradients[\"dba\"].shape =", gradients["dba"].shape) Expected Output: gradients["dxt"][1][2] = -0.460564103059 gradients["dxt"].shape = (3, 10) gradients["da_prev"][2][3] = 0.0842968653807 gradients["da_prev"].shape = (5, 10) gradients["dWax"][3][1] = 0.393081873922 &lt;tr&gt; &lt;td&gt; **gradients[&quot;dWax&quot;].shape** = &lt;/td&gt; &lt;td&gt; (5, 3) &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; **gradients[&quot;dWaa&quot;][1][2]** = &lt;/td&gt; &lt;td&gt; -0.28483955787 &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; **gradients[&quot;dWaa&quot;].shape** = &lt;/td&gt; &lt;td&gt; (5, 5) &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; **gradients[&quot;dba&quot;][4]** = &lt;/td&gt; &lt;td&gt; [ 0.80517166] &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; **gradients[&quot;dba&quot;].shape** = &lt;/td&gt; &lt;td&gt; (5, 1) &lt;/td&gt; &lt;/tr&gt; Backward pass through the RNN Computing the gradients of the cost with respect to \(a^{\langle t \rangle}\) at every time-step \(t\) is useful because it is what helps the gradient backpropagate to the previous RNN-cell. To do so, you need to iterate through all the time steps starting at the end, and at each step, you increment the overall \(db_a\), \(dW_{aa}\), \(dW_{ax}\) and you store \(dx\). Instructions: Implement the rnn_backward function. Initialize the return variables with zeros first and then loop through all the time steps while calling the rnn_cell_backward at each time timestep, update the other variables accordingly. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455def rnn_backward(da, caches): """ Implement the backward pass for a RNN over an entire sequence of input data. Arguments: da -- Upstream gradients of all hidden states, of shape (n_a, m, T_x) caches -- tuple containing information from the forward pass (rnn_forward) Returns: gradients -- python dictionary containing: dx -- Gradient w.r.t. the input data, numpy-array of shape (n_x, m, T_x) da0 -- Gradient w.r.t the initial hidden state, numpy-array of shape (n_a, m) dWax -- Gradient w.r.t the input's weight matrix, numpy-array of shape (n_a, n_x) dWaa -- Gradient w.r.t the hidden state's weight matrix, numpy-arrayof shape (n_a, n_a) dba -- Gradient w.r.t the bias, of shape (n_a, 1) """ ### START CODE HERE ### # Retrieve values from the first cache (t=1) of caches (≈2 lines) (caches, x) = None (a1, a0, x1, parameters) = None # Retrieve dimensions from da's and x1's shapes (≈2 lines) n_a, m, T_x = None n_x, m = None # initialize the gradients with the right sizes (≈6 lines) dx = None dWax = None dWaa = None dba = None da0 = None da_prevt = None # Loop through all the time steps for t in reversed(range(None)): # Compute gradients at time step t. Choose wisely the "da_next" and the "cache" to use in the backward propagation step. (≈1 line) gradients = None # Retrieve derivatives from gradients (≈ 1 line) dxt, da_prevt, dWaxt, dWaat, dbat = gradients["dxt"], gradients["da_prev"], gradients["dWax"], gradients["dWaa"], gradients["dba"] # Increment global derivatives w.r.t parameters by adding their derivative at time-step t (≈4 lines) dx[:, :, t] = None dWax += None dWaa += None dba += None # Set da0 to the gradient of a which has been backpropagated through all time-steps (≈1 line) da0 = None ### END CODE HERE ### # Store the gradients in a python dictionary gradients = &#123;"dx": dx, "da0": da0, "dWax": dWax, "dWaa": dWaa,"dba": dba&#125; return gradients 1234567891011121314151617181920212223np.random.seed(1)x = np.random.randn(3,10,4)a0 = np.random.randn(5,10)Wax = np.random.randn(5,3)Waa = np.random.randn(5,5)Wya = np.random.randn(2,5)ba = np.random.randn(5,1)by = np.random.randn(2,1)parameters = &#123;"Wax": Wax, "Waa": Waa, "Wya": Wya, "ba": ba, "by": by&#125;a, y, caches = rnn_forward(x, a0, parameters)da = np.random.randn(5, 10, 4)gradients = rnn_backward(da, caches)print("gradients[\"dx\"][1][2] =", gradients["dx"][1][2])print("gradients[\"dx\"].shape =", gradients["dx"].shape)print("gradients[\"da0\"][2][3] =", gradients["da0"][2][3])print("gradients[\"da0\"].shape =", gradients["da0"].shape)print("gradients[\"dWax\"][3][1] =", gradients["dWax"][3][1])print("gradients[\"dWax\"].shape =", gradients["dWax"].shape)print("gradients[\"dWaa\"][1][2] =", gradients["dWaa"][1][2])print("gradients[\"dWaa\"].shape =", gradients["dWaa"].shape)print("gradients[\"dba\"][4] =", gradients["dba"][4])print("gradients[\"dba\"].shape =", gradients["dba"].shape) Expected Output: gradients["dx"][1][2] = [-2.07101689 -0.59255627 0.02466855 0.01483317] gradients["dx"].shape = (3, 10, 4) gradients["da0"][2][3] = -0.314942375127 gradients["da0"].shape = (5, 10) gradients["dWax"][3][1] = 11.2641044965 gradients["dWax"].shape = (5, 3) gradients["dWaa"][1][2] = 2.30333312658 gradients["dWaa"].shape = (5, 5) gradients["dba"][4] = [-0.74747722] gradients["dba"].shape = (5, 1) 3.2 - LSTM backward pass 3.2.1 One Step backward The LSTM backward pass is slighltly more complicated than the forward one. We have provided you with all the equations for the LSTM backward pass below. (If you enjoy calculus exercises feel free to try deriving these from scratch yourself.) 3.2.2 gate derivatives \[d \Gamma_o^{\langle t \rangle} = da_{next}*\tanh(c_{next}) * \Gamma_o^{\langle t \rangle}*(1-\Gamma_o^{\langle t \rangle})\tag{7}\] \[d\tilde c^{\langle t \rangle} = dc_{next}*\Gamma_u^{\langle t \rangle}+ \Gamma_o^{\langle t \rangle} (1-\tanh(c_{next})^2) * i_t * da_{next} * \tilde c^{\langle t \rangle} * (1-\tanh(\tilde c)^2) \tag{8}\] \[d\Gamma_u^{\langle t \rangle} = dc_{next}*\tilde c^{\langle t \rangle} + \Gamma_o^{\langle t \rangle} (1-\tanh(c_{next})^2) * \tilde c^{\langle t \rangle} * da_{next}*\Gamma_u^{\langle t \rangle}*(1-\Gamma_u^{\langle t \rangle})\tag{9}\] \[d\Gamma_f^{\langle t \rangle} = dc_{next}*\tilde c_{prev} + \Gamma_o^{\langle t \rangle} (1-\tanh(c_{next})^2) * c_{prev} * da_{next}*\Gamma_f^{\langle t \rangle}*(1-\Gamma_f^{\langle t \rangle})\tag{10}\] 3.2.3 parameter derivatives \[ dW_f = d\Gamma_f^{\langle t \rangle} * \begin{pmatrix} a_{prev} \\ x_t\end{pmatrix}^T \tag{11} \] \[ dW_u = d\Gamma_u^{\langle t \rangle} * \begin{pmatrix} a_{prev} \\ x_t\end{pmatrix}^T \tag{12} \] \[ dW_c = d\tilde c^{\langle t \rangle} * \begin{pmatrix} a_{prev} \\ x_t\end{pmatrix}^T \tag{13} \] \[ dW_o = d\Gamma_o^{\langle t \rangle} * \begin{pmatrix} a_{prev} \\ x_t\end{pmatrix}^T \tag{14}\] To calculate \(db_f, db_u, db_c, db_o\) you just need to sum across the horizontal (axis= 1) axis on \(d\Gamma_f^{\langle t \rangle}, d\Gamma_u^{\langle t \rangle}, d\tilde c^{\langle t \rangle}, d\Gamma_o^{\langle t \rangle}\) respectively. Note that you should have the keep_dims = True option. Finally, you will compute the derivative with respect to the previous hidden state, previous memory state, and input. \[ da_{prev} = W_f^T*d\Gamma_f^{\langle t \rangle} + W_u^T * d\Gamma_u^{\langle t \rangle}+ W_c^T * d\tilde c^{\langle t \rangle} + W_o^T * d\Gamma_o^{\langle t \rangle} \tag{15}\] Here, the weights for equations 13 are the first n_a, (i.e. \(W_f = W_f[:n_a,:]\) etc...) \[ dc_{prev} = dc_{next}\Gamma_f^{\langle t \rangle} + \Gamma_o^{\langle t \rangle} * (1- \tanh(c_{next})^2)*\Gamma_f^{\langle t \rangle}*da_{next} \tag{16}\] \[ dx^{\langle t \rangle} = W_f^T*d\Gamma_f^{\langle t \rangle} + W_u^T * d\Gamma_u^{\langle t \rangle}+ W_c^T * d\tilde c_t + W_o^T * d\Gamma_o^{\langle t \rangle}\tag{17} \] where the weights for equation 15 are from n_a to the end, (i.e. \(W_f = W_f[n_a:,:]\) etc...) Exercise: Implement lstm_cell_backward by implementing equations \(7-17\) below. Good luck! :) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465def lstm_cell_backward(da_next, dc_next, cache): """ Implement the backward pass for the LSTM-cell (single time-step). Arguments: da_next -- Gradients of next hidden state, of shape (n_a, m) dc_next -- Gradients of next cell state, of shape (n_a, m) cache -- cache storing information from the forward pass Returns: gradients -- python dictionary containing: dxt -- Gradient of input data at time-step t, of shape (n_x, m) da_prev -- Gradient w.r.t. the previous hidden state, numpy array of shape (n_a, m) dc_prev -- Gradient w.r.t. the previous memory state, of shape (n_a, m, T_x) dWf -- Gradient w.r.t. the weight matrix of the forget gate, numpy array of shape (n_a, n_a + n_x) dWi -- Gradient w.r.t. the weight matrix of the update gate, numpy array of shape (n_a, n_a + n_x) dWc -- Gradient w.r.t. the weight matrix of the memory gate, numpy array of shape (n_a, n_a + n_x) dWo -- Gradient w.r.t. the weight matrix of the output gate, numpy array of shape (n_a, n_a + n_x) dbf -- Gradient w.r.t. biases of the forget gate, of shape (n_a, 1) dbi -- Gradient w.r.t. biases of the update gate, of shape (n_a, 1) dbc -- Gradient w.r.t. biases of the memory gate, of shape (n_a, 1) dbo -- Gradient w.r.t. biases of the output gate, of shape (n_a, 1) """ # Retrieve information from "cache" (a_next, c_next, a_prev, c_prev, ft, it, cct, ot, xt, parameters) = cache ### START CODE HERE ### # Retrieve dimensions from xt's and a_next's shape (≈2 lines) n_x, m = None n_a, m = None # Compute gates related derivatives, you can find their values can be found by looking carefully at equations (7) to (10) (≈4 lines) dot = None dcct = None dit = None dft = None # Code equations (7) to (10) (≈4 lines) dit = None dft = None dot = None dcct = None # Compute parameters related derivatives. Use equations (11)-(14) (≈8 lines) dWf = None dWi = None dWc = None dWo = None dbf = None dbi = None dbc = None dbo = None # Compute derivatives w.r.t previous hidden state, previous memory state and input. Use equations (15)-(17). (≈3 lines) da_prev = None dc_prev = None dxt = None ### END CODE HERE ### # Save gradients in dictionary gradients = &#123;"dxt": dxt, "da_prev": da_prev, "dc_prev": dc_prev, "dWf": dWf,"dbf": dbf, "dWi": dWi,"dbi": dbi, "dWc": dWc,"dbc": dbc, "dWo": dWo,"dbo": dbo&#125; return gradients 1234567891011121314151617181920212223242526272829303132333435363738394041424344np.random.seed(1)xt = np.random.randn(3,10)a_prev = np.random.randn(5,10)c_prev = np.random.randn(5,10)Wf = np.random.randn(5, 5+3)bf = np.random.randn(5,1)Wi = np.random.randn(5, 5+3)bi = np.random.randn(5,1)Wo = np.random.randn(5, 5+3)bo = np.random.randn(5,1)Wc = np.random.randn(5, 5+3)bc = np.random.randn(5,1)Wy = np.random.randn(2,5)by = np.random.randn(2,1)parameters = &#123;"Wf": Wf, "Wi": Wi, "Wo": Wo, "Wc": Wc, "Wy": Wy, "bf": bf, "bi": bi, "bo": bo, "bc": bc, "by": by&#125;a_next, c_next, yt, cache = lstm_cell_forward(xt, a_prev, c_prev, parameters)da_next = np.random.randn(5,10)dc_next = np.random.randn(5,10)gradients = lstm_cell_backward(da_next, dc_next, cache)print("gradients[\"dxt\"][1][2] =", gradients["dxt"][1][2])print("gradients[\"dxt\"].shape =", gradients["dxt"].shape)print("gradients[\"da_prev\"][2][3] =", gradients["da_prev"][2][3])print("gradients[\"da_prev\"].shape =", gradients["da_prev"].shape)print("gradients[\"dc_prev\"][2][3] =", gradients["dc_prev"][2][3])print("gradients[\"dc_prev\"].shape =", gradients["dc_prev"].shape)print("gradients[\"dWf\"][3][1] =", gradients["dWf"][3][1])print("gradients[\"dWf\"].shape =", gradients["dWf"].shape)print("gradients[\"dWi\"][1][2] =", gradients["dWi"][1][2])print("gradients[\"dWi\"].shape =", gradients["dWi"].shape)print("gradients[\"dWc\"][3][1] =", gradients["dWc"][3][1])print("gradients[\"dWc\"].shape =", gradients["dWc"].shape)print("gradients[\"dWo\"][1][2] =", gradients["dWo"][1][2])print("gradients[\"dWo\"].shape =", gradients["dWo"].shape)print("gradients[\"dbf\"][4] =", gradients["dbf"][4])print("gradients[\"dbf\"].shape =", gradients["dbf"].shape)print("gradients[\"dbi\"][4] =", gradients["dbi"][4])print("gradients[\"dbi\"].shape =", gradients["dbi"].shape)print("gradients[\"dbc\"][4] =", gradients["dbc"][4])print("gradients[\"dbc\"].shape =", gradients["dbc"].shape)print("gradients[\"dbo\"][4] =", gradients["dbo"][4])print("gradients[\"dbo\"].shape =", gradients["dbo"].shape) Expected Output: gradients["dxt"][1][2] = 3.23055911511 gradients["dxt"].shape = (3, 10) gradients["da_prev"][2][3] = -0.0639621419711 gradients["da_prev"].shape = (5, 10) gradients["dc_prev"][2][3] = 0.797522038797 gradients["dc_prev"].shape = (5, 10) gradients["dWf"][3][1] = -0.147954838164 gradients["dWf"].shape = (5, 8) gradients["dWi"][1][2] = 1.05749805523 gradients["dWi"].shape = (5, 8) gradients["dWc"][3][1] = 2.30456216369 gradients["dWc"].shape = (5, 8) gradients["dWo"][1][2] = 0.331311595289 gradients["dWo"].shape = (5, 8) gradients["dbf"][4] = [ 0.18864637] gradients["dbf"].shape = (5, 1) gradients["dbi"][4] = [-0.40142491] gradients["dbi"].shape = (5, 1) gradients["dbc"][4] = [ 0.25587763] gradients["dbc"].shape = (5, 1) gradients["dbo"][4] = [ 0.13893342] gradients["dbo"].shape = (5, 1) 3.3 Backward pass through the LSTM RNN This part is very similar to the rnn_backward function you implemented above. You will first create variables of the same dimension as your return variables. You will then iterate over all the time steps starting from the end and call the one step function you implemented for LSTM at each iteration. You will then update the parameters by summing them individually. Finally return a dictionary with the new gradients. Instructions: Implement the lstm_backward function. Create a for loop starting from \(T_x\) and going backward. For each step call lstm_cell_backward and update the your old gradients by adding the new gradients to them. Note that dxt is not updated but is stored. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071def lstm_backward(da, caches): """ Implement the backward pass for the RNN with LSTM-cell (over a whole sequence). Arguments: da -- Gradients w.r.t the hidden states, numpy-array of shape (n_a, m, T_x) dc -- Gradients w.r.t the memory states, numpy-array of shape (n_a, m, T_x) caches -- cache storing information from the forward pass (lstm_forward) Returns: gradients -- python dictionary containing: dx -- Gradient of inputs, of shape (n_x, m, T_x) da0 -- Gradient w.r.t. the previous hidden state, numpy array of shape (n_a, m) dWf -- Gradient w.r.t. the weight matrix of the forget gate, numpy array of shape (n_a, n_a + n_x) dWi -- Gradient w.r.t. the weight matrix of the update gate, numpy array of shape (n_a, n_a + n_x) dWc -- Gradient w.r.t. the weight matrix of the memory gate, numpy array of shape (n_a, n_a + n_x) dWo -- Gradient w.r.t. the weight matrix of the save gate, numpy array of shape (n_a, n_a + n_x) dbf -- Gradient w.r.t. biases of the forget gate, of shape (n_a, 1) dbi -- Gradient w.r.t. biases of the update gate, of shape (n_a, 1) dbc -- Gradient w.r.t. biases of the memory gate, of shape (n_a, 1) dbo -- Gradient w.r.t. biases of the save gate, of shape (n_a, 1) """ # Retrieve values from the first cache (t=1) of caches. (caches, x) = caches (a1, c1, a0, c0, f1, i1, cc1, o1, x1, parameters) = caches[0] ### START CODE HERE ### # Retrieve dimensions from da's and x1's shapes (≈2 lines) n_a, m, T_x = None n_x, m = None # initialize the gradients with the right sizes (≈12 lines) dx = None da0 = None da_prevt = None dc_prevt = None dWf = None dWi = None dWc = None dWo = None dbf = None dbi = None dbc = None dbo = None # loop back over the whole sequence for t in reversed(range(None)): # Compute all gradients using lstm_cell_backward gradients = None # Store or add the gradient to the parameters' previous step's gradient dx[:,:,t] = None dWf = None dWi = None dWc = None dWo = None dbf = None dbi = None dbc = None dbo = None # Set the first activation's gradient to the backpropagated gradient da_prev. da0 = None ### END CODE HERE ### # Store the gradients in a python dictionary gradients = &#123;"dx": dx, "da0": da0, "dWf": dWf,"dbf": dbf, "dWi": dWi,"dbi": dbi, "dWc": dWc,"dbc": dbc, "dWo": dWo,"dbo": dbo&#125; return gradients 123456789101112131415161718192021222324252627282930313233343536373839np.random.seed(1)x = np.random.randn(3,10,7)a0 = np.random.randn(5,10)Wf = np.random.randn(5, 5+3)bf = np.random.randn(5,1)Wi = np.random.randn(5, 5+3)bi = np.random.randn(5,1)Wo = np.random.randn(5, 5+3)bo = np.random.randn(5,1)Wc = np.random.randn(5, 5+3)bc = np.random.randn(5,1)parameters = &#123;"Wf": Wf, "Wi": Wi, "Wo": Wo, "Wc": Wc, "Wy": Wy, "bf": bf, "bi": bi, "bo": bo, "bc": bc, "by": by&#125;a, y, c, caches = lstm_forward(x, a0, parameters)da = np.random.randn(5, 10, 4)gradients = lstm_backward(da, caches)print("gradients[\"dx\"][1][2] =", gradients["dx"][1][2])print("gradients[\"dx\"].shape =", gradients["dx"].shape)print("gradients[\"da0\"][2][3] =", gradients["da0"][2][3])print("gradients[\"da0\"].shape =", gradients["da0"].shape)print("gradients[\"dWf\"][3][1] =", gradients["dWf"][3][1])print("gradients[\"dWf\"].shape =", gradients["dWf"].shape)print("gradients[\"dWi\"][1][2] =", gradients["dWi"][1][2])print("gradients[\"dWi\"].shape =", gradients["dWi"].shape)print("gradients[\"dWc\"][3][1] =", gradients["dWc"][3][1])print("gradients[\"dWc\"].shape =", gradients["dWc"].shape)print("gradients[\"dWo\"][1][2] =", gradients["dWo"][1][2])print("gradients[\"dWo\"].shape =", gradients["dWo"].shape)print("gradients[\"dbf\"][4] =", gradients["dbf"][4])print("gradients[\"dbf\"].shape =", gradients["dbf"].shape)print("gradients[\"dbi\"][4] =", gradients["dbi"][4])print("gradients[\"dbi\"].shape =", gradients["dbi"].shape)print("gradients[\"dbc\"][4] =", gradients["dbc"][4])print("gradients[\"dbc\"].shape =", gradients["dbc"].shape)print("gradients[\"dbo\"][4] =", gradients["dbo"][4])print("gradients[\"dbo\"].shape =", gradients["dbo"].shape) Expected Output: gradients["dx"][1][2] = [-0.00173313 0.08287442 -0.30545663 -0.43281115] gradients["dx"].shape = (3, 10, 4) gradients["da0"][2][3] = -0.095911501954 gradients["da0"].shape = (5, 10) gradients["dWf"][3][1] = -0.0698198561274 gradients["dWf"].shape = (5, 8) gradients["dWi"][1][2] = 0.102371820249 gradients["dWi"].shape = (5, 8) gradients["dWc"][3][1] = -0.0624983794927 gradients["dWc"].shape = (5, 8) gradients["dWo"][1][2] = 0.0484389131444 gradients["dWo"].shape = (5, 8) gradients["dbf"][4] = [-0.0565788] gradients["dbf"].shape = (5, 1) gradients["dbi"][4] = [-0.06997391] gradients["dbi"].shape = (5, 1) gradients["dbc"][4] = [-0.27441821] gradients["dbc"].shape = (5, 1) gradients["dbo"][4] = [ 0.16532821] gradients["dbo"].shape = (5, 1) Congratulations ! Congratulations on completing this assignment. You now understand how recurrent neural networks work! Lets go on to the next exercise, where you'll use an RNN to build a character-level language model.]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Project</tag>
        <tag>Sequence Models</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Convolutional Neural Networks]]></title>
    <url>%2FConvolutional-Neural-Networks%2F2019%2F03%2F27%2F</url>
    <content type="text"><![CDATA[Reference from lecture slides of Andrew Ng and github repo from DeepLearning.ai-Summary Convolutional Neural Networks This is the forth course of the deep learning specialization at Coursera which is moderated by DeepLearning.ai. The course is taught by Andrew Ng. Table of contents Convolutional Neural Networks Table of contents Course summary Foundations of CNNs Computer vision Edge detection example Padding Strided convolution Convolutions over volumes One Layer of a Convolutional Network A simple convolution network example Pooling layers Convolutional neural network example Why convolutions? Deep convolutional models: case studies Why look at case studies? Classic networks Residual Networks (ResNets) Why ResNets work Network in Network and 1×1 convolutions Inception network motivation Inception network (GoogleNet) Using Open-Source Implementation Transfer Learning Data Augmentation State of Computer Vision Object detection Object Localization Landmark Detection Object Detection Convolutional Implementation of Sliding Windows Bounding Box Predictions Intersection Over Union Non-max Suppression Anchor Boxes YOLO Algorithm Region Proposals (R-CNN) Special applications: Face recognition &amp; Neural style transfer Face Recognition What is face recognition? One Shot Learning Siamese Network Triplet Loss Face Verification and Binary Classification Neural Style Transfer What is neural style transfer? What are deep ConvNets learning? Cost Function Content Cost Function Style Cost Function 1D and 3D Generalizations Extras Keras Course summary Here is the course summary as given on the course link: This course will teach you how to build convolutional neural networks and apply it to image data. Thanks to deep learning, computer vision is working far better than just two years ago, and this is enabling numerous exciting applications ranging from safe autonomous driving, to accurate face recognition, to automatic reading of radiology images. You will: - Understand how to build a convolutional neural network, including recent variations such as residual networks. - Know how to apply convolutional networks to visual detection and recognition tasks. - Know to use neural style transfer to generate art. - Be able to apply these algorithms to a variety of image, video, and other 2D or 3D data. This is the fourth course of the Deep Learning Specialization. Foundations of CNNs Learn to implement the foundational layers of CNNs (pooling, convolutions) and to stack them properly in a deep network to solve multi-class image classification problems. Computer vision Computer vision is one of the applications that are rapidly active thanks to deep learning. Some of the applications of computer vision that are using deep learning includes: Self driving cars. Face recognition. Deep learning is also enabling new types of art to be created. Rapid changes to computer vision are making new applications that weren't possible a few years ago. Computer vision deep leaning techniques are always evolving making a new architectures which can help us in other areas other than computer vision. For example, Andrew Ng took some ideas of computer vision and applied it in speech recognition. Examples of a computer vision problems includes: Image classification. Object detection. Detect object and localize them. Neural style transfer Changes the style of an image using another image. One of the challenges of computer vision problem that images can be so large and we want a fast and accurate algorithm to work with that. For example, a 1000x1000 image will represent 3 million feature/input to the full connected neural network. If the following hidden layer contains 1000, then we will want to learn weights of the shape [1000, 3 million] which is 3 billion parameter only in the first layer and thats so computationally expensive! One of the solutions is to build this using convolution layers instead of the fully connected layers. Edge detection example The convolution operation is one of the fundamentals blocks of a CNN. One of the examples about convolution is the image edge detection operation. Early layers of CNN might detect edges then the middle layers will detect parts of objects and the later layers will put the these parts together to produce an output. In an image we can detect vertical edges, horizontal edges, or full edge detector. Vertical edge detection: An example of convolution operation to detect vertical edges: In the last example a 6x6 matrix convolved with 3x3 filter/kernel gives us a 4x4 matrix. If you make the convolution operation in TensorFlow you will find the function tf.nn.conv2d. In keras you will find Conv2d function. The vertical edge detection filter will find a 3x3 place in an image where there are a bright region followed by a dark region. If we applied this filter to a white region followed by a dark region, it should find the edges in between the two colors as a positive value. But if we applied the same filter to a dark region followed by a white region it will give us negative values. To solve this we can use the abs function to make it positive. Horizontal edge detection Filter would be like this 1231 1 10 0 0-1 -1 -1 There are a lot of ways we can put number inside the horizontal or vertical edge detections. For example here are the vertical Sobel filter (The idea is taking care of the middle row): 1231 0 -12 0 -21 0 -1 Also something called Scharr filter (The idea is taking great care of the middle row): 1233 0 -310 0 -103 0 -3 What we learned in the deep learning is that we don't need to hand craft these numbers, we can treat them as weights and then learn them. It can learn horizontal, vertical, angled, or any edge type automatically rather than getting them by hand. Padding In order to to use deep neural networks we really need to use paddings. In the last section we saw that a 6x6 matrix convolved with 3x3 filter/kernel gives us a 4x4 matrix. To give it a general rule, if a matrix nxn is convolved with fxf filter/kernel give us n-f+1,n-f+1 matrix. The convolution operation shrinks the matrix if f&gt;1. We want to apply convolution operation multiple times, but if the image shrinks we will lose a lot of data on this process. Also the edges pixels are used less than other pixels in an image. So the problems with convolutions are: Shrinks output. throwing away a lot of information that are in the edges. To solve these problems we can pad the input image before convolution by adding some rows and columns to it. We will call the padding amount P the number of row/columns that we will insert in top, bottom, left and right of the image. In almost all the cases the padding values are zeros. The general rule now, if a matrix nxn is convolved with fxf filter/kernel and padding p give us n+2p-f+1,n+2p-f+1 matrix. If n = 6, f = 3, and p = 1 Then the output image will have n+2p-f+1 = 6+2-3+1 = 6. We maintain the size of the image. Same convolutions is a convolution with a pad so that output size is the same as the input size. Its given by the equation: 1P = (f-1) / 2 In computer vision f is usually odd. Some of the reasons is that its have a center value. Strided convolution Strided convolution is another piece that are used in CNNs. We will call stride S. When we are making the convolution operation we used S to tell us the number of pixels we will jump when we are convolving filter/kernel. The last examples we described S was 1. Now the general rule are: if a matrix nxn is convolved with fxf filter/kernel and padding p and stride s it give us (n+2p-f)/s + 1,(n+2p-f)/s + 1 matrix. In case (n+2p-f)/s + 1 is fraction we can take floor of this value. In math textbooks the conv operation is filpping the filter before using it. What we were doing is called cross-correlation operation but the state of art of deep learning is using this as conv operation. Same convolutions is a convolution with a padding so that output size is the same as the input size. Its given by the equation: 12p = (n*s - n + f - s) / 2When s = 1 ==&gt; P = (f-1) / 2 Convolutions over volumes We see how convolution works with 2D images, now lets see if we want to convolve 3D images (RGB image) We will convolve an image of height, width, # of channels with a filter of a height, width, same # of channels. Hint that the image number channels and the filter number of channels are the same. We can call this as stacked filters for each channel! Example: Input image: 6x6x3 Filter: 3x3x3 Result image: 4x4x1 In the last result p=0, s=1 Hint the output here is only 2D. We can use multiple filters to detect multiple features or edges. Example. Input image: 6x6x3 10 Filters: 3x3x3 Result image: 4x4x10 In the last result p=0, s=1 One Layer of a Convolutional Network First we convolve some filters to a given input and then add a bias to each filter output and then get RELU of the result. Example: Input image: 6x6x3 # a0 10 Filters: 3x3x3 #W1 Result image: 4x4x10 #W1a0 Add b (bias) with 10x1 will get us : 4x4x10 image #W1a0 + b Apply RELU will get us: 4x4x10 image #A1 = RELU(W1a0 + b) In the last result p=0, s=1 Hint number of parameters here are: (3x3x3x10) + 10 = 280 The last example forms a layer in the CNN. Hint: no matter the size of the input, the number of the parameters is same if filter size is same. That makes it less prone to overfitting. Here are some notations we will use. If layer l is a conv layer: 1234567891011121314151617Hyperparametersf[l] = filter sizep[l] = padding # Default is zeros[l] = stridenc[l] = number of filtersInput: n[l-1] x n[l-1] x nc[l-1] Or nH[l-1] x nW[l-1] x nc[l-1]Output: n[l] x n[l] x nc[l] Or nH[l] x nW[l] x nc[l]Where n[l] = (n[l-1] + 2p[l] - f[l] / s[l]) + 1Each filter is: f[l] x f[l] x nc[l-1]Activations: a[l] is nH[l] x nW[l] x nc[l] A[l] is m x nH[l] x nW[l] x nc[l] # In batch or minbatch training Weights: f[l] * f[l] * nc[l-1] * nc[l]bias: (1, 1, 1, nc[l]) A simple convolution network example Lets build a big example. Input Image are: a0 = 39x39x3 n0 = 39 and nc0 = 3 First layer (Conv layer): f1 = 3, s1 = 1, and p1 = 0 number of filters = 10 Then output are a1 = 37x37x10 n1 = 37 and nc1 = 10 Second layer (Conv layer): f2 = 5, s2 = 2, p2 = 0 number of filters = 20 The output are a2 = 17x17x20 n2 = 17, nc2 = 20 Hint shrinking goes much faster because the stride is 2 Third layer (Conv layer): f3 = 5, s3 = 2, p2 = 0 number of filters = 40 The output are a3 = 7x7x40 n3 = 7, nc3 = 40 Forth layer (Fully connected Softmax) a3 = 7x7x40 = 1960 as a vector.. In the last example you seen that the image are getting smaller after each layer and thats the trend now. Types of layer in a convolutional network: Convolution. #Conv Pooling #Pool Fully connected #FC Pooling layers Other than the conv layers, CNNs often uses pooling layers to reduce the size of the inputs, speed up computation, and to make some of the features it detects more robust. Max pooling example: This example has f = 2, s = 2, and p = 0 hyperparameters The max pooling is saying, if the feature is detected anywhere in this filter then keep a high number. But the main reason why people are using pooling because its works well in practice and reduce computations. Max pooling has no parameters to learn. Example of Max pooling on 3D input: Input: 4x4x10 Max pooling size = 2 and stride = 2 Output: 2x2x10 Average pooling is taking the averages of the values instead of taking the max values. Max pooling is used more often than average pooling in practice. If stride of pooling equals the size, it will then apply the effect of shrinking. Hyperparameters summary f : filter size. s : stride. Padding are rarely uses here. Max or average pooling. Convolutional neural network example Now we will deal with a full CNN example. This example is something like the LeNet-5 that was invented by Yann Lecun. Input Image are: a0 = 32x32x3 n0 = 32 and nc0 = 3 First layer (Conv layer): #Conv1 f1 = 5, s1 = 1, and p1 = 0 number of filters = 6 Then output are a1 = 28x28x6 n1 = 28 and nc1 = 6 Then apply (Max pooling): #Pool1 f1p = 2, and s1p = 2 The output are a1 = 14x14x6 Second layer (Conv layer): #Conv2 f2 = 5, s2 = 1, p2 = 0 number of filters = 16 The output are a2 = 10x10x16 n2 = 10, nc2 = 16 Then apply (Max pooling): #Pool2 f1p = 2, and s1p = 2 The output are a2 = 5x5x16 Third layer (Fully connected) #FC3 Number of neurons are 120 The output a3 = 120 x 1 . 400 came from 5x5x16 Forth layer (Fully connected) #FC4 Number of neurons are 84 The output a4 = 84 x 1 . Fifth layer (Softmax) Number of neurons is 10 if we need to identify for example the 10 digits. Hint a Conv1 and Pool1 is treated as one layer. Some statistics about the last example: Hyperparameters are a lot. For choosing the value of each you should follow the guideline that we will discuss later or check the literature and takes some ideas and numbers from it. Usually the input size decreases over layers while the number of filters increases. A CNN usually consists of one or more convolution (Not just one as the shown examples) followed by a pooling. Fully connected layers has the most parameters in the network. To consider using these blocks together you should look at other working examples firsts to get some intuitions. Why convolutions? Two main advantages of Convs are: Parameter sharing. A feature detector (such as a vertical edge detector) that's useful in one part of the image is probably useful in another part of the image. sparsity of connections. In each layer, each output value depends only on a small number of inputs which makes it translation invariance. Putting it all together: Deep convolutional models: case studies Learn about the practical tricks and methods used in deep CNNs straight from the research papers. Why look at case studies? We learned about Conv layer, pooling layer, and fully connected layers. It turns out that computer vision researchers spent the past few years on how to put these layers together. To get some intuitions you have to see the examples that has been made. Some neural networks architecture that works well in some tasks can also work well in other tasks. Here are some classical CNN networks: LeNet-5 AlexNet VGG The best CNN architecture that won the last ImageNet competition is called ResNet and it has 152 layers! There are also an architecture called Inception that was made by Google that are very useful to learn and apply to your tasks. Reading and trying the mentioned models can boost you and give you a lot of ideas to solve your task. Classic networks In this section we will talk about classic networks which are LeNet-5, AlexNet, and VGG. LeNet-5 The goal for this model was to identify handwritten digits in a 32x32x1 gray image. Here are the drawing of it: This model was published in 1998. The last layer wasn't using softmax back then. It has 60k parameters. The dimensions of the image decreases as the number of channels increases. Conv ==&gt; Pool ==&gt; Conv ==&gt; Pool ==&gt; FC ==&gt; FC ==&gt; softmax this type of arrangement is quite common. The activation function used in the paper was Sigmoid and Tanh. Modern implementation uses RELU in most of the cases. [LeCun et al., 1998. Gradient-based learning applied to document recognition] AlexNet Named after Alex Krizhevsky who was the first author of this paper. The other authors includes Jeoffery Hinton. The goal for the model was the ImageNet challenge which classifies images into 1000 classes. Here are the drawing of the model: Summary: 1Conv =&gt; Max-pool =&gt; Conv =&gt; Max-pool =&gt; Conv =&gt; Conv =&gt; Conv =&gt; Max-pool ==&gt; Flatten ==&gt; FC ==&gt; FC ==&gt; Softmax Similar to LeNet-5 but bigger. Has 60 Million parameter compared to 60k parameter of LeNet-5. It used the RELU activation function. The original paper contains Multiple GPUs and Local Response normalization (RN). Multiple GPUs were used because the GPUs were not so fast back then. Researchers proved that Local Response normalization doesn't help much so for now don't bother yourself for understanding or implementing it. This paper convinced the computer vision researchers that deep learning is so important. [Krizhevsky et al., 2012. ImageNet classification with deep convolutional neural networks] VGG-16 A modification for AlexNet. Instead of having a lot of hyperparameters lets have some simpler network. Focus on having only these blocks: CONV = 3 X 3 filter, s = 1, same MAX-POOL = 2 X 2 , s = 2 Here are the architecture: This network is large even by modern standards. It has around 138 million parameters. Most of the parameters are in the fully connected layers. It has a total memory of 96MB per image for only forward propagation! Most memory are in the earlier layers. Number of filters increases from 64 to 128 to 256 to 512. 512 was made twice. Pooling was the only one who is responsible for shrinking the dimensions. There are another version called VGG-19 which is a bigger version. But most people uses the VGG-16 instead of the VGG-19 because it does the same. VGG paper is attractive it tries to make some rules regarding using CNNs. [Simonyan &amp; Zisserman 2015. Very deep convolutional networks for large-scale image recognition] Residual Networks (ResNets) Very, very deep NNs are difficult to train because of vanishing and exploding gradients problems. In this section we will learn about skip connection which makes you take the activation from one layer and suddenly feed it to another layer even much deeper in NN which allows you to train large NNs even with layers greater than 100. Residual block ResNets are built out of some Residual blocks. They add a shortcut/skip connection before the second activation. The authors of this block find that you can train a deeper NNs using stacking this block. [He et al., 2015. Deep residual networks for image recognition] Residual Network Are a NN that consists of some Residual blocks. These networks can go deeper without hurting the performance. In the normal NN - Plain networks - the theory tell us that if we go deeper we will get a better solution to our problem, but because of the vanishing and exploding gradients problems the performance of the network suffers as it goes deeper. Thanks to Residual Network we can go deeper as we want now. On the left is the normal NN and on the right are the ResNet. As you can see the performance of ResNet increases as the network goes deeper. In some cases going deeper won't effect the performance and that depends on the problem on your hand. Some people are trying to train 1000 layer now which isn't used in practice. [He et al., 2015. Deep residual networks for image recognition] Why ResNets work Lets see some example that illustrates why resNet work. We have a big NN as the following: X --&gt; Big NN --&gt; a[l] Lets add two layers to this network as a residual block: X --&gt; Big NN --&gt; a[l] --&gt; Layer1 --&gt; Layer2 --&gt; a[l+2] And a[l] has a direct connection to a[l+2] Suppose we are using RELU activations. Then: 12a[l+2] = g( z[l+2] + a[l] ) = g( W[l+2] a[l+1] + b[l+2] + a[l] ) Then if we are using L2 regularization for example, W[l+2] will be zero. Lets say that b[l+2] will be zero too. Then a[l+2] = g( a[l] ) = a[l] with no negative values. This show that identity function is easy for a residual block to learn. And that why it can train deeper NNs. Also that the two layers we added doesn't hurt the performance of big NN we made. Hint: dimensions of z[l+2] and a[l] have to be the same in resNets. In case they have different dimensions what we put a matrix parameters (Which can be learned or fixed) a[l+2] = g( z[l+2] + ws * a[l] ) # The added Ws should make the dimentions equal ws also can be a zero padding. Using a skip-connection helps the gradient to backpropagate and thus helps you to train deeper networks Lets take a look at ResNet on images. Here are the architecture of ResNet-34: All the 3x3 Conv are same Convs. Keep it simple in design of the network. spatial size /2 =&gt; # filters x2 No FC layers, No dropout is used. Two main types of blocks are used in a ResNet, depending mainly on whether the input/output dimensions are same or different. You are going to implement both of them. The dotted lines is the case when the dimensions are different. To solve then they down-sample the input by 2 and then pad zeros to match the two dimensions. There's another trick which is called bottleneck which we will explore later. Useful concept (Spectrum of Depth): Taken from icml.cc/2016/tutorials/icml2016_tutorial_deep_residual_networks_kaiminghe.pdf Residual blocks types: Identity block: Hint the conv is followed by a batch norm BN before RELU. Dimensions here are same. This skip is over 2 layers. The skip connection can jump n connections where n&gt;2 This drawing represents Keras layers. The convolutional block: The conv can be bottleneck 1 x 1 conv Network in Network and 1 X 1 convolutions A 1 x 1 convolution - We also call it Network in Network- is so useful in many CNN models. What does a 1 X 1 convolution do? Isn't it just multiplying by a number? Lets first consider an example: Input: 6x6x1 Conv: 1x1x1 one filter. # The 1 x 1 Conv Output: 6x6x1 Another example: Input: 6x6x32 Conv: 1x1x32 5 filters. # The 1 x 1 Conv Output: 6x6x5 The Network in Network is proposed in [Lin et al., 2013. Network in network] It has been used in a lot of modern CNN implementations like ResNet and Inception models. A 1 x 1 convolution is useful when: We want to shrink the number of channels. We also call this feature transformation. In the second discussed example above we have shrinked the input from 32 to 5 channels. We will later see that by shrinking it we can save a lot of computations. If we have specified the number of 1 x 1 Conv filters to be the same as the input number of channels then the output will contain the same number of channels. Then the 1 x 1 Conv will act like a non linearity and will learn non linearity operator. Replace fully connected layers with 1 x 1 convolutions as Yann LeCun believes they are the same. In Convolutional Nets, there is no such thing as "fully-connected layers". There are only convolution layers with 1x1 convolution kernels and a full connection table. Yann LeCun [Lin et al., 2013. Network in network] Inception network motivation When you design a CNN you have to decide all the layers yourself. Will you pick a 3 x 3 Conv or 5 x 5 Conv or maybe a max pooling layer. You have so many choices. What inception tells us is, Why not use all of them at once? Inception module, naive version: Hint that max-pool are same here. Input to the inception module are 28 x 28 x 192 and the output are 28 x 28 x 256 We have done all the Convs and pools we might want and will let the NN learn and decide which it want to use most. [Szegedy et al. 2014. Going deeper with convolutions] The problem of computational cost in Inception model: If we have just focused on a 5 x 5 Conv that we have done in the last example. There are 32 same filters of 5 x 5, and the input are 28 x 28 x 192. Output should be 28 x 28 x 32 The total number of multiplications needed here are: Number of outputs * Filter size * Filter size * Input dimensions Which equals: 28 * 28 * 32 * 5 * 5 * 192 = 120 Mil 120 Mil multiply operation still a problem in the modern day computers. Using a 1 x 1 convolution we can reduce 120 mil to just 12 mil. Lets see how. Using 1 X 1 convolution to reduce computational cost: The new architecture are: X0 shape is (28, 28, 192) We then apply 16 (1 x 1 Convolution) That produces X1 of shape (28, 28, 16) Hint, we have reduced the dimensions here. Then apply 32 (5 x 5 Convolution) That produces X2 of shape (28, 28, 32) Now lets calculate the number of multiplications: For the first Conv: 28 * 28 * 16 * 1 * 1 * 192 = 2.5 Mil For the second Conv: 28 * 28 * 32 * 5 * 5 * 16 = 10 Mil So the total number are 12.5 Mil approx. which is so good compared to 120 Mil A 1 x 1 Conv here is called Bottleneck BN. It turns out that the 1 x 1 Conv won't hurt the performance. Inception module, dimensions reduction version: Example of inception model in Keras: Inception network (GoogleNet) The inception network consist of concatenated blocks of the Inception module. The name inception was taken from a meme image which was taken from Inception movie Here are the full model: Some times a Max-Pool block is used before the inception module to reduce the dimensions of the inputs. There are a 3 Sofmax branches at different positions to push the network toward its goal. and helps to ensure that the intermediate features are good enough to the network to learn and it turns out that softmax0 and sofmax1 gives regularization effect. Since the development of the Inception module, the authors and the others have built another versions of this network. Like inception v2, v3, and v4. Also there is a network that has used the inception module and the ResNet together. [Szegedy et al., 2014, Going Deeper with Convolutions] Using Open-Source Implementation We have learned a lot of NNs and ConvNets architectures. It turns out that a lot of these NN are difficult to replicated. because there are some details that may not presented on its papers. There are some other reasons like: Learning decay. Parameter tuning. A lot of deep learning researchers are opening sourcing their code into Internet on sites like Github. If you see a research paper and you want to build over it, the first thing you should do is to look for an open source implementation for this paper. Some advantage of doing this is that you might download the network implementation along with its parameters/weights. The author might have used multiple GPUs and spent some weeks to reach this result and its right in front of you after you download it. Transfer Learning If you are using a specific NN architecture that has been trained before, you can use this pretrained parameters/weights instead of random initialization to solve your problem. It can help you boost the performance of the NN. The pretrained models might have trained on a large datasets like ImageNet, Ms COCO, or pascal and took a lot of time to learn those parameters/weights with optimized hyperparameters. This can save you a lot of time. Lets see an example: Lets say you have a cat classification problem which contains 3 classes Tigger, Misty and neither. You don't have much a lot of data to train a NN on these images. Andrew recommends to go online and download a good NN with its weights, remove the softmax activation layer and put your own one and make the network learn only the new layer while other layer weights are fixed/frozen. Frameworks have options to make the parameters frozen in some layers using trainable = 0 or freeze = 0 One of the tricks that can speed up your training, is to run the pretrained NN without final softmax layer and get an intermediate representation of your images and save them to disk. And then use these representation to a shallow NN network. This can save you the time needed to run an image through all the layers. Its like converting your images into vectors. Another example: What if in the last example you have a lot of pictures for your cats. One thing you can do is to freeze few layers from the beginning of the pretrained network and learn the other weights in the network. Some other idea is to throw away the layers that aren't frozen and put your own layers there. Another example: If you have enough data, you can fine tune all the layers in your pretrained network but don't random initialize the parameters, leave the learned parameters as it is and learn from there. Data Augmentation If data is increased, your deep NN will perform better. Data augmentation is one of the techniques that deep learning uses to increase the performance of deep NN. The majority of computer vision applications needs more data right now. Some data augmentation methods that are used for computer vision tasks includes: Mirroring. Random cropping. The issue with this technique is that you might take a wrong crop. The solution is to make your crops big enough. Rotation. Shearing. Local warping. Color shifting. For example, we add to R, G, and B some distortions that will make the image identified as the same for the human but is different for the computer. In practice the added value are pulled from some probability distribution and these shifts are some small. Makes your algorithm more robust in changing colors in images. There are an algorithm which is called PCA color augmentation that decides the shifts needed automatically. Implementing distortions during training: You can use a different CPU thread to make you a distorted mini batches while you are training your NN. Data Augmentation has also some hyperparameters. A good place to start is to find an open source data augmentation implementation and then use it or fine tune these hyperparameters. State of Computer Vision For a specific problem we may have a little data for it or a lots of data. Speech recognition problems for example has a big amount of data, while image recognition has a medium amount of data and the object detection has a small amount of data nowadays. If your problem has a large amount of data, researchers are tend to use: Simpler algorithms. Less hand engineering. If you don't have that much data people tend to try more hand engineering for the problem "Hacks". Like choosing a more complex NN architecture. Because we haven't got that much data in a lot of computer vision problems, it relies a lot on hand engineering. We will see in the next chapter that because the object detection has less data, a more complex NN architectures will be presented. Tips for doing well on benchmarks/winning competitions: Ensembling. Train several networks independently and average their outputs. Merging down some classifiers. After you decide the best architecture for your problem, initialize some of that randomly and train them independently. This can give you a push by 2% But this will slow down your production by the number of the ensembles. Also it takes more memory as it saves all the models in the memory. People use this in competitions but few uses this in a real production. Multi-crop at test time. Run classifier on multiple versions of test versions and average results. There is a technique called 10 crops that uses this. This can give you a better result in the production. Use open source code Use architectures of networks published in the literature. Use open source implementations if possible. Use pretrained models and fine-tune on your dataset. Object detection Learn how to apply your knowledge of CNNs to one of the toughest but hottest field of computer vision: Object detection. Object Localization Object detection is one of the areas in which deep learning is doing great in the past two years. What are localization and detection? Image Classification: Classify an image to a specific class. The whole image represents one class. We don't want to know exactly where are the object. Usually only one object is presented. Classification with localization: Given an image we want to learn the class of the image and where are the class location in the image. We need to detect a class and a rectangle of where that object is. Usually only one object is presented. Object detection: Given an image we want to detect all the object in the image that belong to a specific classes and give their location. An image can contain more than one object with different classes. Semantic Segmentation: We want to Label each pixel in the image with a category label. Semantic Segmentation Don't differentiate instances, only care about pixels. It detects no objects just pixels. If there are two objects of the same class is intersected, we won't be able to separate them. Instance Segmentation This is like the full problem. Rather than we want to predict the bounding box, we want to know which pixel label but also distinguish them. To make image classification we use a Conv Net with a Softmax attached to the end of it. To make classification with localization we use a Conv Net with a softmax attached to the end of it and a four numbers bx, by, bh, and bw to tell you the location of the class in the image. The dataset should contain this four numbers with the class too. Defining the target label Y in classification with localization problem: 12345678910Y = [ Pc # Probability of an object is presented bx # Bounding box by # Bounding box bh # Bounding box bw # Bounding box c1 # The classes c2 ...] Example (Object is present): 12345678910Y = [ 1 # Object is present 0 0 100 100 0 1 0] Example (When object isn't presented): 12345678910Y = [ 0 # Object isn&apos;t presented ? # ? means we dont care with other values ? ? ? ? ? ?] The loss function for the Y we have created (Example of the square error): 1234L(y&apos;,y) = &#123; (y1&apos;-y1)^2 + (y2&apos;-y2)^2 + ... if y1 = 1 (y1&apos;-y1)^2 if y1 = 0 &#125; In practice we use logistic regression for pc, log likely hood loss for classes, and squared error for the bounding box. Landmark Detection In some of the computer vision problems you will need to output some points. That is called landmark detection. For example, if you are working in a face recognition problem you might want some points on the face like corners of the eyes, corners of the mouth, and corners of the nose and so on. This can help in a lot of application like detecting the pose of the face. Y shape for the face recognition problem that needs to output 64 landmarks: 12345678Y = [ THereIsAface # Probability of face is presented 0 or 1 l1x, l1y, ...., l64x, l64y] Another application is when you need to get the skeleton of the person using different landmarks/points in the person which helps in some applications. Hint, in your labeled data, if l1x,l1y is the left corner of left eye, all other l1x,l1y of the other examples has to be the same. Object Detection We will use a Conv net to solve the object detection problem using a technique called the sliding windows detection algorithm. For example lets say we are working on Car object detection. The first thing, we will train a Conv net on cropped car images and non car images. After we finish training of this Conv net we will then use it with the sliding windows technique. Sliding windows detection algorithm: Decide a rectangle size. Split your image into rectangles of the size you picked. Each region should be covered. You can use some strides. For each rectangle feed the image into the Conv net and decide if its a car or not. Pick larger/smaller rectangles and repeat the process from 2 to 3. Store the rectangles that contains the cars. If two or more rectangles intersects choose the rectangle with the best accuracy. Disadvantage of sliding window is the computation time. In the era of machine learning before deep learning, people used a hand crafted linear classifiers that classifies the object and then use the sliding window technique. The linear classier make it a cheap computation. But in the deep learning era that is so computational expensive due to the complexity of the deep learning model. To solve this problem, we can implement the sliding windows with a Convolutional approach. One other idea is to compress your deep learning model. Convolutional Implementation of Sliding Windows Turning FC layer into convolutional layers (predict image class from four classes): As you can see in the above image, we turned the FC layer into a Conv layer using a convolution with the width and height of the filter is the same as the width and height of the input. Convolution implementation of sliding windows: First lets consider that the Conv net you trained is like this (No FC all is conv layers): Say now we have a 16 x 16 x 3 image that we need to apply the sliding windows in. By the normal implementation that have been mentioned in the section before this, we would run this Conv net four times each rectangle size will be 16 x 16. The convolution implementation will be as follows: Simply we have feed the image into the same Conv net we have trained. The left cell of the result "The blue one" will represent the the first sliding window of the normal implementation. The other cells will represent the others. Its more efficient because it now shares the computations of the four times needed. Another example would be: This example has a total of 16 sliding windows that shares the computation together. [Sermanet et al., 2014, OverFeat: Integrated recognition, localization and detection using convolutional networks] The weakness of the algorithm is that the position of the rectangle wont be so accurate. Maybe none of the rectangles is exactly on the object you want to recognize. In red, the rectangle we want and in blue is the required car rectangle. Bounding Box Predictions A better algorithm than the one described in the last section is the YOLO algorithm. YOLO stands for you only look once and was developed back in 2015. Yolo Algorithm: Lets say we have an image of 100 X 100 Place a 3 x 3 grid on the image. For more smother results you should use 19 x 19 for the 100 x 100 Apply the classification and localization algorithm we discussed in a previous section to each section of the grid. bx and by will represent the center point of the object in each grid and will be relative to the box so the range is between 0 and 1 while bh and bw will represent the height and width of the object which can be greater than 1.0 but still a floating point value. Do everything at once with the convolution sliding window. If Y shape is 1 x 8 as we discussed before then the output of the 100 x 100 image should be 3 x 3 x 8 which corresponds to 9 cell results. Merging the results using predicted localization mid point. We have a problem if we have found more than one object in one grid box. One of the best advantages that makes the YOLO algorithm popular is that it has a great speed and a Conv net implementation. How is YOLO different from other Object detectors? YOLO uses a single CNN network for both classification and localizing the object using bounding boxes. In the next sections we will see some ideas that can make the YOLO algorithm better. Intersection Over Union Intersection Over Union is a function used to evaluate the object detection algorithm. It computes size of intersection and divide it by the union. More generally, IoU is a measure of the overlap between two bounding boxes. For example: The red is the labeled output and the purple is the predicted output. To compute Intersection Over Union we first compute the union area of the two rectangles which is "the first rectangle + second rectangle" Then compute the intersection area between these two rectangles. Finally IOU = intersection area / Union area If IOU &gt;=0.5 then its good. The best answer will be 1. The higher the IOU the better is the accuracy. Non-max Suppression One of the problems we have addressed in YOLO is that it can detect an object multiple times. Non-max Suppression is a way to make sure that YOLO detects the object just once. For example: Each car has two or more detections with different probabilities. This came from some of the grids that thinks that this is the center point of the object. Non-max suppression algorithm: Lets assume that we are targeting one class as an output class. Y shape should be [Pc, bx, by, bh, hw] Where Pc is the probability if that object occurs. Discard all boxes with Pc &lt; 0.6 While there are any remaining boxes: Pick the box with the largest Pc Output that as a prediction. Discard any remaining box with IoU &gt; 0.5 with that box output in the previous step i.e any box with high overlap(greater than overlap threshold of 0.5). If there are multiple classes/object types c you want to detect, you should run the Non-max suppression c times, once for every output class. Anchor Boxes In YOLO, a grid only detects one object. What if a grid cell wants to detect multiple object? Car and person grid is same here. In practice this happens rarely. The idea of Anchor boxes helps us solving this issue. If Y = [Pc, bx, by, bh, bw, c1, c2, c3] Then to use two anchor boxes like this: Y = [Pc, bx, by, bh, bw, c1, c2, c3, Pc, bx, by, bh, bw, c1, c2, c3] We simply have repeated the one anchor Y. The two anchor boxes you choose should be known as a shape: So Previously, each object in training image is assigned to grid cell that contains that object's midpoint. With two anchor boxes, Each object in training image is assigned to grid cell that contains object's midpoint and anchor box for the grid cell with highest IoU. You have to check where your object should be based on its rectangle closest to which anchor box. Example of data: Where the car was near the anchor 2 than anchor 1. You may have two or more anchor boxes but you should know their shapes. how do you choose the anchor boxes and people used to just choose them by hand. Maybe five or ten anchor box shapes that spans a variety of shapes that cover the types of objects you seem to detect frequently. You may also use a k-means algorithm on your dataset to specify that. Anchor boxes allows your algorithm to specialize, means in our case to easily detect wider images or taller ones. YOLO Algorithm YOLO is a state-of-the-art object detection model that is fast and accurate Lets sum up and introduce the whole YOLO algorithm given an example. Suppose we need to do object detection for our autonomous driver system.It needs to identify three classes: Pedestrian (Walks on ground). Car. Motorcycle. We decided to choose two anchor boxes, a taller one and a wide one. Like we said in practice they use five or more anchor boxes hand made or generated using k-means. Our labeled Y shape will be [Ny, HeightOfGrid, WidthOfGrid, 16], where Ny is number of instances and each row (of size 16) is as follows: [Pc, bx, by, bh, bw, c1, c2, c3, Pc, bx, by, bh, bw, c1, c2, c3] Your dataset could be an image with a multiple labels and a rectangle for each label, we should go to your dataset and make the shape and values of Y like we agreed. An example: We first initialize all of them to zeros and ?, then for each label and rectangle choose its closest grid point then the shape to fill it and then the best anchor point based on the IOU. so that the shape of Y for one image should be [HeightOfGrid, WidthOfGrid,16] Train the labeled images on a Conv net. you should receive an output of [HeightOfGrid, WidthOfGrid,16] for our case. To make predictions, run the Conv net on an image and run Non-max suppression algorithm for each class you have in our case there are 3 classes. You could get something like that: Total number of generated boxes are grid_width * grid_height * no_of_anchors = 3 x 3 x 2 By removing the low probability predictions you should have: Then get the best probability followed by the IOU filtering: YOLO are not good at detecting smaller object. YOLO9000 Better, faster, stronger Summary: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158________________________________________________________________________________________Layer (type) Output Shape Param # Connected to ========================================================================================input_1 (InputLayer) (None, 608, 608, 3) 0 ________________________________________________________________________________________conv2d_1 (Conv2D) (None, 608, 608, 32) 864 input_1[0][0] ________________________________________________________________________________________batch_normalization_1 (BatchNorm (None, 608, 608, 32) 128 conv2d_1[0][0] ________________________________________________________________________________________leaky_re_lu_1 (LeakyReLU) (None, 608, 608, 32) 0 batch_normalization_1[0][0] ________________________________________________________________________________________max_pooling2d_1 (MaxPooling2D) (None, 304, 304, 32) 0 leaky_re_lu_1[0][0] ________________________________________________________________________________________conv2d_2 (Conv2D) (None, 304, 304, 64) 18432 max_pooling2d_1[0][0] ________________________________________________________________________________________batch_normalization_2 (BatchNorm (None, 304, 304, 64) 256 conv2d_2[0][0] ________________________________________________________________________________________leaky_re_lu_2 (LeakyReLU) (None, 304, 304, 64) 0 batch_normalization_2[0][0] _______________________________________________________________________________________max_pooling2d_2 (MaxPooling2D) (None, 152, 152, 64) 0 leaky_re_lu_2[0][0] ________________________________________________________________________________________conv2d_3 (Conv2D) (None, 152, 152, 128) 73728 max_pooling2d_2[0][0] ________________________________________________________________________________________batch_normalization_3 (BatchNorm (None, 152, 152, 128) 512 conv2d_3[0][0] ________________________________________________________________________________________leaky_re_lu_3 (LeakyReLU) (None, 152, 152, 128) 0 batch_normalization_3[0][0] ________________________________________________________________________________________conv2d_4 (Conv2D) (None, 152, 152, 64) 8192 leaky_re_lu_3[0][0] ________________________________________________________________________________________batch_normalization_4 (BatchNorm (None, 152, 152, 64) 256 conv2d_4[0][0] ________________________________________________________________________________________leaky_re_lu_4 (LeakyReLU) (None, 152, 152, 64) 0 batch_normalization_4[0][0] ________________________________________________________________________________________conv2d_5 (Conv2D) (None, 152, 152, 128) 73728 leaky_re_lu_4[0][0] ________________________________________________________________________________________batch_normalization_5 (BatchNorm (None, 152, 152, 128) 512 conv2d_5[0][0] ________________________________________________________________________________________leaky_re_lu_5 (LeakyReLU) (None, 152, 152, 128) 0 batch_normalization_5[0][0] ________________________________________________________________________________________max_pooling2d_3 (MaxPooling2D) (None, 76, 76, 128) 0 leaky_re_lu_5[0][0] ________________________________________________________________________________________conv2d_6 (Conv2D) (None, 76, 76, 256) 294912 max_pooling2d_3[0][0] _______________________________________________________________________________________batch_normalization_6 (BatchNorm (None, 76, 76, 256) 1024 conv2d_6[0][0] ________________________________________________________________________________________leaky_re_lu_6 (LeakyReLU) (None, 76, 76, 256) 0 batch_normalization_6[0][0] _______________________________________________________________________________________conv2d_7 (Conv2D) (None, 76, 76, 128) 32768 leaky_re_lu_6[0][0] ________________________________________________________________________________________batch_normalization_7 (BatchNorm (None, 76, 76, 128) 512 conv2d_7[0][0] _______________________________________________________________________________________leaky_re_lu_7 (LeakyReLU) (None, 76, 76, 128) 0 batch_normalization_7[0][0] ________________________________________________________________________________________conv2d_8 (Conv2D) (None, 76, 76, 256) 294912 leaky_re_lu_7[0][0] ________________________________________________________________________________________batch_normalization_8 (BatchNorm (None, 76, 76, 256) 1024 conv2d_8[0][0] ________________________________________________________________________________________leaky_re_lu_8 (LeakyReLU) (None, 76, 76, 256) 0 batch_normalization_8[0][0] ________________________________________________________________________________________max_pooling2d_4 (MaxPooling2D) (None, 38, 38, 256) 0 leaky_re_lu_8[0][0] ________________________________________________________________________________________conv2d_9 (Conv2D) (None, 38, 38, 512) 1179648 max_pooling2d_4[0][0] ________________________________________________________________________________________batch_normalization_9 (BatchNorm (None, 38, 38, 512) 2048 conv2d_9[0][0] ________________________________________________________________________________________leaky_re_lu_9 (LeakyReLU) (None, 38, 38, 512) 0 batch_normalization_9[0][0] ________________________________________________________________________________________conv2d_10 (Conv2D) (None, 38, 38, 256) 131072 leaky_re_lu_9[0][0] ________________________________________________________________________________________batch_normalization_10 (BatchNor (None, 38, 38, 256) 1024 conv2d_10[0][0] ________________________________________________________________________________________leaky_re_lu_10 (LeakyReLU) (None, 38, 38, 256) 0 batch_normalization_10[0][0]________________________________________________________________________________________conv2d_11 (Conv2D) (None, 38, 38, 512) 1179648 leaky_re_lu_10[0][0] ________________________________________________________________________________________batch_normalization_11 (BatchNor (None, 38, 38, 512) 2048 conv2d_11[0][0] ________________________________________________________________________________________leaky_re_lu_11 (LeakyReLU) (None, 38, 38, 512) 0 batch_normalization_11[0][0]_______________________________________________________________________________________conv2d_12 (Conv2D) (None, 38, 38, 256) 131072 leaky_re_lu_11[0][0] ________________________________________________________________________________________batch_normalization_12 (BatchNor (None, 38, 38, 256) 1024 conv2d_12[0][0] ________________________________________________________________________________________leaky_re_lu_12 (LeakyReLU) (None, 38, 38, 256) 0 batch_normalization_12[0][0]________________________________________________________________________________________conv2d_13 (Conv2D) (None, 38, 38, 512) 1179648 leaky_re_lu_12[0][0] ________________________________________________________________________________________batch_normalization_13 (BatchNor (None, 38, 38, 512) 2048 conv2d_13[0][0] ________________________________________________________________________________________leaky_re_lu_13 (LeakyReLU) (None, 38, 38, 512) 0 batch_normalization_13[0][0]________________________________________________________________________________________max_pooling2d_5 (MaxPooling2D) (None, 19, 19, 512) 0 leaky_re_lu_13[0][0] _______________________________________________________________________________________conv2d_14 (Conv2D) (None, 19, 19, 1024) 4718592 max_pooling2d_5[0][0] ________________________________________________________________________________________batch_normalization_14 (BatchNor (None, 19, 19, 1024) 4096 conv2d_14[0][0] ________________________________________________________________________________________leaky_re_lu_14 (LeakyReLU) (None, 19, 19, 1024) 0 batch_normalization_14[0][0]________________________________________________________________________________________conv2d_15 (Conv2D) (None, 19, 19, 512) 524288 leaky_re_lu_14[0][0] ________________________________________________________________________________________batch_normalization_15 (BatchNor (None, 19, 19, 512) 2048 conv2d_15[0][0] ________________________________________________________________________________________leaky_re_lu_15 (LeakyReLU) (None, 19, 19, 512) 0 batch_normalization_15[0][0]________________________________________________________________________________________conv2d_16 (Conv2D) (None, 19, 19, 1024) 4718592 leaky_re_lu_15[0][0] ________________________________________________________________________________________batch_normalization_16 (BatchNor (None, 19, 19, 1024) 4096 conv2d_16[0][0] ________________________________________________________________________________________leaky_re_lu_16 (LeakyReLU) (None, 19, 19, 1024) 0 batch_normalization_16[0][0]________________________________________________________________________________________conv2d_17 (Conv2D) (None, 19, 19, 512) 524288 leaky_re_lu_16[0][0] ________________________________________________________________________________________batch_normalization_17 (BatchNor (None, 19, 19, 512) 2048 conv2d_17[0][0] ________________________________________________________________________________________leaky_re_lu_17 (LeakyReLU) (None, 19, 19, 512) 0 batch_normalization_17[0][0]_______________________________________________________________________________________conv2d_18 (Conv2D) (None, 19, 19, 1024) 4718592 leaky_re_lu_17[0][0] ________________________________________________________________________________________batch_normalization_18 (BatchNor (None, 19, 19, 1024) 4096 conv2d_18[0][0] ________________________________________________________________________________________leaky_re_lu_18 (LeakyReLU) (None, 19, 19, 1024) 0 batch_normalization_18[0][0]________________________________________________________________________________________conv2d_19 (Conv2D) (None, 19, 19, 1024) 9437184 leaky_re_lu_18[0][0] ________________________________________________________________________________________batch_normalization_19 (BatchNor (None, 19, 19, 1024) 4096 conv2d_19[0][0] ________________________________________________________________________________________conv2d_21 (Conv2D) (None, 38, 38, 64) 32768 leaky_re_lu_13[0][0]________________________________________________________________________________________leaky_re_lu_19 (LeakyReLU) (None, 19, 19, 1024) 0 batch_normalization_19[0][0]________________________________________________________________________________________batch_normalization_21 (BatchNor (None, 38, 38, 64) 256 conv2d_21[0][0] ________________________________________________________________________________________conv2d_20 (Conv2D) (None, 19, 19, 1024) 9437184 leaky_re_lu_19[0][0]________________________________________________________________________________________leaky_re_lu_21 (LeakyReLU) (None, 38, 38, 64) 0 batch_normalization_21[0][0]________________________________________________________________________________________batch_normalization_20 (BatchNor (None, 19, 19, 1024) 4096 conv2d_20[0][0] ________________________________________________________________________________________space_to_depth_x2 (Lambda) (None, 19, 19, 256) 0 leaky_re_lu_21[0][0] ________________________________________________________________________________________leaky_re_lu_20 (LeakyReLU) (None, 19, 19, 1024) 0 batch_normalization_20[0][0]________________________________________________________________________________________concatenate_1 (Concatenate) (None, 19, 19, 1280) 0 space_to_depth_x2[0][0] leaky_re_lu_20[0][0] ________________________________________________________________________________________conv2d_22 (Conv2D) (None, 19, 19, 1024) 11796480 concatenate_1[0][0] ________________________________________________________________________________________batch_normalization_22 (BatchNor (None, 19, 19, 1024) 4096 conv2d_22[0][0] ________________________________________________________________________________________leaky_re_lu_22 (LeakyReLU) (None, 19, 19, 1024) 0 batch_normalization_22[0][0]________________________________________________________________________________________conv2d_23 (Conv2D) (None, 19, 19, 425) 435625 leaky_re_lu_22[0][0] ===============================================================================================Total params: 50,983,561Trainable params: 50,962,889Non-trainable params: 20,672_______________________________________________________________________________________________ You can find implementations for YOLO here: https://github.com/allanzelener/YAD2K https://github.com/thtrieu/darkflow https://pjreddie.com/darknet/yolo/ Region Proposals (R-CNN) R-CNN is an algorithm that also makes an object detection. Yolo tells that its faster: Our model has several advantages over classifier-based systems. It looks at the whole image at test time so its predictions are informed by global context in the image. It also makes predictions with a single network evaluation unlike systems like R-CNN which require thousands for a single image. This makes it extremely fast, more than 1000x faster than R-CNN and 100x faster than Fast R-CNN. See our paper for more details on the full system. But one of the downsides of YOLO that it process a lot of areas where no objects are present. R-CNN stands for regions with Conv Nets. R-CNN tries to pick a few windows and run a Conv net (your confident classifier) on top of them. The algorithm R-CNN uses to pick windows is called a segmentation algorithm. Outputs something like this: If for example the segmentation algorithm produces 2000 blob then we should run our classifier/CNN on top of these blobs. There has been a lot of work regarding R-CNN tries to make it faster: R-CNN: Propose regions. Classify proposed regions one at a time. Output label + bounding box. Downside is that its slow. [Girshik et. al, 2013. Rich feature hierarchies for accurate object detection and semantic segmentation] Fast R-CNN: Propose regions. Use convolution implementation of sliding windows to classify all the proposed regions. [Girshik, 2015. Fast R-CNN] Faster R-CNN: Use convolutional network to propose regions. [Ren et. al, 2016. Faster R-CNN: Towards real-time object detection with region proposal networks] Mask R-CNN: https://arxiv.org/abs/1703.06870 Most of the implementation of faster R-CNN are still slower than YOLO. Andew Ng thinks that the idea behind YOLO is better than R-CNN because you are able to do all the things in just one time instead of two times. Other algorithms that uses one shot to get the output includes SSD and MultiBox. [Wei Liu, et. al 2015 SSD: Single Shot MultiBox Detector] R-FCN is similar to Faster R-CNN but more efficient. [Jifeng Dai, et. al 2016 R-FCN: Object Detection via Region-based Fully Convolutional Networks ] Special applications: Face recognition &amp; Neural style transfer Discover how CNNs can be applied to multiple fields, including art generation and face recognition. Implement your own algorithm to generate art and recognize faces! Face Recognition What is face recognition? Face recognition system identifies a person's face. It can work on both images or videos. Liveness detection within a video face recognition system prevents the network from identifying a face in an image. It can be learned by supervised deep learning using a dataset for live human and in-live human and sequence learning. Face verification vs. face recognition: Verification: Input: image, name/ID. (1 : 1) Output: whether the input image is that of the claimed person. "is this the claimed person?" Recognition: Has a database of K persons Get an input image Output ID if the image is any of the K persons (or not recognized) "who is this person?" We can use a face verification system to make a face recognition system. The accuracy of the verification system has to be high (around 99.9% or more) to be use accurately within a recognition system because the recognition system accuracy will be less than the verification system given K persons. One Shot Learning One of the face recognition challenges is to solve one shot learning problem. One Shot Learning: A recognition system is able to recognize a person, learning from one image. Historically deep learning doesn't work well with a small number of data. Instead to make this work, we will learn a similarity function: d( img1, img2 ) = degree of difference between images. We want d result to be low in case of the same faces. We use tau T as a threshold for d: If d( img1, img2 ) &lt;= T Then the faces are the same. Similarity function helps us solving the one shot learning. Also its robust to new inputs. Siamese Network We will implement the similarity function using a type of NNs called Siamease Network in which we can pass multiple inputs to the two or more networks with the same architecture and parameters. Siamese network architecture are as the following: We make 2 identical conv nets which encodes an input image into a vector. In the above image the vector shape is (128, ) The loss function will be d(x1, x2) = || f(x1) - f(x2) ||^2 If X1, X2 are the same person, we want d to be low. If they are different persons, we want d to be high. [Taigman et. al., 2014. DeepFace closing the gap to human level performance] Triplet Loss Triplet Loss is one of the loss functions we can use to solve the similarity distance in a Siamese network. Our learning objective in the triplet loss function is to get the distance between an Anchor image and a positive or a negative image. Positive means same person, while negative means different person. The triplet name came from that we are comparing an anchor A with a positive P and a negative N image. Formally we want: Positive distance to be less than negative distance ||f(A) - f(P)||^2 &lt;= ||f(A) - f(N)||^2 Then ||f(A) - f(P)||^2 - ||f(A) - f(N)||^2 &lt;= 0 To make sure the NN won't get an output of zeros easily: ||f(A) - f(P)||^2 - ||f(A) - f(N)||^2 &lt;= -alpha Alpha is a small number. Sometimes its called the margin. Then ||f(A) - f(P)||^2 - ||f(A) - f(N)||^2 + alpha &lt;= 0 Final Loss function: Given 3 images (A, P, N) L(A, P, N) = max (||f(A) - f(P)||^2 - ||f(A) - f(N)||^2 + alpha , 0) J = Sum(L(A[i], P[i], N[i]) , i) for all triplets of images. You need multiple images of the same person in your dataset. Then get some triplets out of your dataset. Dataset should be big enough. Choosing the triplets A, P, N: During training if A, P, N are chosen randomly (Subjet to A and P are the same and A and N aren't the same) then one of the problems this constrain is easily satisfied d(A, P) + alpha &lt;= d (A, N) So the NN wont learn much What we want to do is choose triplets that are hard to train on. So for all the triplets we want this to be satisfied: d(A, P) + alpha &lt;= d (A, N) This can be achieved by for example same poses! Find more at the paper. Details are in this paper [Schroff et al.,2015, FaceNet: A unified embedding for face recognition and clustering] Commercial recognition systems are trained on a large datasets like 10/100 million images. There are a lot of pretrained models and parameters online for face recognition. Face Verification and Binary Classification Triplet loss is one way to learn the parameters of a conv net for face recognition there's another way to learn these parameters as a straight binary classification problem. Learning the similarity function another way: The final layer is a sigmoid layer. Y' = wi * Sigmoid ( f(x(i)) - f(x(j)) ) + b where the subtraction is the Manhattan distance between f(x(i)) and f(x(j)) Some other similarities can be Euclidean and Ki square similarity. The NN here is Siamese means the top and bottom convs has the same parameters. The paper for this work: [Taigman et. al., 2014. DeepFace closing the gap to human level performance] A good performance/deployment trick: Pre-compute all the images that you are using as a comparison to the vector f(x(j)) When a new image that needs to be compared, get its vector f(x(i)) then put it with all the pre computed vectors and pass it to the sigmoid function. This version works quite as well as the triplet loss function. Available implementations for face recognition using deep learning includes: Openface FaceNet DeepFace Neural Style Transfer What is neural style transfer? Neural style transfer is one of the application of Conv nets. Neural style transfer takes a content image C and a style image S and generates the content image G with the style of style image. In order to implement this you need to look at the features extracted by the Conv net at the shallower and deeper layers. It uses a previously trained convolutional network like VGG, and builds on top of that. The idea of using a network trained on a different task and applying it to a new task is called transfer learning. What are deep ConvNets learning? Visualizing what a deep network is learning: Given this AlexNet like Conv net: Pick a unit in layer l. Find the nine image patches that maximize the unit's activation. Notice that a hidden unit in layer one will see relatively small portion of NN, so if you plotted it it will match a small image in the shallower layers while it will get larger image in deeper layers. Repeat for other units and layers. It turns out that layer 1 are learning the low level representations like colors and edges. You will find out that each layer are learning more complex representations. The first layer was created using the weights of the first layer. Other images are generated using the receptive field in the image that triggered the neuron to be max. [Zeiler and Fergus., 2013, Visualizing and understanding convolutional networks] A good explanation on how to get receptive field given a layer: From A guide to receptive field arithmetic for Convolutional Neural Networks Cost Function We will define a cost function for the generated image that measures how good it is. Give a content image C, a style image S, and a generated image G: J(G) = alpha * J(C,G) + beta * J(S,G) J(C, G) measures how similar is the generated image to the Content image. J(S, G) measures how similar is the generated image to the Style image. alpha and beta are relative weighting to the similarity and these are hyperparameters. Find the generated image G: Initiate G randomly For example G: 100 X 100 X 3 Use gradient descent to minimize J(G) G = G - dG We compute the gradient image and use gradient decent to minimize the cost function. The iterations might be as following image: To Generate this: You will go through this: Content Cost Function In the previous section we showed that we need a cost function for the content image and the style image to measure how similar is them to each other. Say you use hidden layer l to compute content cost. If we choose l to be small (like layer 1), we will force the network to get similar output to the original content image. In practice l is not too shallow and not too deep but in the middle. Use pre-trained ConvNet. (E.g., VGG network) Let a(c)[l] and a(G)[l] be the activation of layer l on the images. If a(c)[l] and a(G)[l] are similar then they will have the same content J(C, G) at a layer l = 1/2 || a(c)[l] - a(G)[l] ||^2 Style Cost Function Meaning of the style of an image: Say you are using layer l's activation to measure style. Define style as correlation between activations across channels. That means given an activation like this: How correlate is the orange channel with the yellow channel? Correlated means if a value appeared in a specific channel a specific value will appear too (Depends on each other). Uncorrelated means if a value appeared in a specific channel doesn't mean that another value will appear (Not depend on each other) The correlation tells you how a components might occur or not occur together in the same image. The correlation of style image channels should appear in the generated image channels. Style matrix (Gram matrix): Let a(l)[i, j, k] be the activation at l with (i=H, j=W, k=C) Also G(l)(s) is matrix of shape nc(l) x nc(l) We call this matrix style matrix or Gram matrix. In this matrix each cell will tell us how correlated is a channel to another channel. To populate the matrix we use these equations to compute style matrix of the style image and the generated image. As it appears its the sum of the multiplication of each member in the matrix. To compute gram matrix efficiently: Reshape activation from H X W X C to HW X C Name the reshaped activation F. G[l] = F * F.T Finally the cost function will be as following: J(S, G) at layer l = (1/ 2 * H * W * C) || G(l)(s) - G(l)(G) || And if you have used it from some layers J(S, G) = Sum (lamda[l]*J(S, G)[l], for all layers) Steps to be made if you want to create a tensorflow model for neural style transfer: Create an Interactive Session. Load the content image. Load the style image Randomly initialize the image to be generated Load the VGG16 model Build the TensorFlow graph: Run the content image through the VGG16 model and compute the content cost Run the style image through the VGG16 model and compute the style cost Compute the total cost Define the optimizer and the learning rate Initialize the TensorFlow graph and run it for a large number of iterations, updating the generated image at every step. 1D and 3D Generalizations So far we have used the Conv nets for images which are 2D. Conv nets can work with 1D and 3D data as well. An example of 1D convolution: Input shape (14, 1) Applying 16 filters with F = 5 , S = 1 Output shape will be 10 X 16 Applying 32 filters with F = 5, S = 1 Output shape will be 6 X 32 The general equation (N - F)/S + 1 can be applied here but here it gives a vector rather than a 2D matrix. 1D data comes from a lot of resources such as waves, sounds, heartbeat signals. In most of the applications that uses 1D data we use Recurrent Neural Network RNN. 3D data also are available in some applications like CT scan: Example of 3D convolution: Input shape (14, 14,14, 1) Applying 16 filters with F = 5 , S = 1 Output shape (10, 10, 10, 16) Applying 32 filters with F = 5, S = 1 Output shape will be (6, 6, 6, 32) Extras Keras Keras is a high-level neural networks API (programming framework), written in Python and capable of running on top of several lower-level frameworks including TensorFlow, Theano, and CNTK. Keras was developed to enable deep learning engineers to build and experiment with different models very quickly. Just as TensorFlow is a higher-level framework than Python, Keras is an even higher-level framework and provides additional abstractions. Keras will work fine for many common models. Layers in Keras: Dense (Fully connected layers). A linear function followed by a non linear function. Convolutional layer. Pooling layer. Normalisation layer. A batch normalization layer. Flatten layer Flatten a matrix into vector. Activation layer Different activations include: relu, tanh, sigmoid, and softmax. To train and test a model in Keras there are four steps: Create the model. Compile the model by calling model.compile(optimizer = "...", loss = "...", metrics = ["accuracy"]) Train the model on train data by calling model.fit(x = ..., y = ..., epochs = ..., batch_size = ...) You can add a validation set while training too. Test the model on test data by calling model.evaluate(x = ..., y = ...) Summarize of step in Keras: Create-&gt;Compile-&gt;Fit/Train-&gt;Evaluate/Test Model.summary() gives a lot of useful informations regarding your model including each layers inputs, outputs, and number of parameters at each layer. To choose the Keras backend you should go to $HOME/.keras/keras.json and change the file to the desired backend like Theano or Tensorflow or whatever backend you want. After you create the model you can run it in a tensorflow session without compiling, training, and testing capabilities. You can save your model with model_save and load your model using model_load This will save your whole trained model to disk with the trained weights. These Notes were made by Mahmoud Badry @2017]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Convolutional Neural Networks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Sequence Models]]></title>
    <url>%2FSequence-Models%2F2019%2F03%2F27%2F</url>
    <content type="text"><![CDATA[Reference from lecture slides of Andrew Ng and github repo from DeepLearning.ai-Summary Sequence Models This is the fifth and final course of the deep learning specialization at Coursera which is moderated by deeplearning.ai. The course is taught by Andrew Ng. Table of contents Sequence Models Table of contents Course summary Recurrent Neural Networks Why sequence models Notation Recurrent Neural Network Model Backpropagation through time Different types of RNNs Language model and sequence generation Sampling novel sequences Vanishing gradients with RNNs Gated Recurrent Unit (GRU) Long Short Term Memory (LSTM) Bidirectional RNN Deep RNNs Back propagation with RNNs Natural Language Processing &amp; Word Embeddings Introduction to Word Embeddings Word Representation Using word embeddings Properties of word embeddings Embedding matrix Learning Word Embeddings: Word2vec &amp; GloVe Learning word embeddings Word2Vec Negative Sampling GloVe word vectors Applications using Word Embeddings Sentiment Classification Debiasing word embeddings Sequence models &amp; Attention mechanism Various sequence to sequence architectures Basic Models Picking the most likely sentence Beam Search Refinements to Beam Search Error analysis in beam search BLEU Score Attention Model Intuition Attention Model Speech recognition - Audio data Speech recognition Trigger Word Detection Extras Machine translation attention model (From notebooks) Course summary Here are the course summary as its given on the course link: This course will teach you how to build models for natural language, audio, and other sequence data. Thanks to deep learning, sequence algorithms are working far better than just two years ago, and this is enabling numerous exciting applications in speech recognition, music synthesis, chatbots, machine translation, natural language understanding, and many others. You will: - Understand how to build and train Recurrent Neural Networks (RNNs), and commonly-used variants such as GRUs and LSTMs. - Be able to apply sequence models to natural language problems, including text synthesis. - Be able to apply sequence models to audio applications, including speech recognition and music synthesis. This is the fifth and final course of the Deep Learning Specialization. Recurrent Neural Networks Learn about recurrent neural networks. This type of model has been proven to perform extremely well on temporal data. It has several variants including LSTMs, GRUs and Bidirectional RNNs, which you are going to learn about in this section. Why sequence models Sequence Models like RNN and LSTMs have greatly transformed learning on sequences in the past few years. Examples of sequence data in applications: Speech recognition (Sequence to sequence): X: Wave sequence Y: Text sequence Music generation (one to sequence): X: (Can be nothing or an integer) Y: Wave sequence Sentiment classification (sequence to one): X: Text sequence Y: Integer rating from one to five DNA sequence analysis (sequence to sequence): X: DNA sequence Y: DNA Labels Machine translation (sequence to sequence): X: Text sequence (In a language) Y: Text sequence (In other language) Video activity recognition (Sequence to one): X: Video frames Y: Label (Activity) Name entity recognition (Sequence to sequence): X: Text sequence Y: Label sequence Can be used by seach engines to index different type of words inside a text. As you can see there are different data with different input and outputs - sequence or one - that can be learned by supervised learning models. There are different ways and models to tackle different sequence problem. Notation In this section we will discuss the notations that we will use through the course. Motivating example: In the content of name entity recognition application let: X: "Harry Potter and Hermoine Granger invented a new spell." Y: 1 1 0 1 1 0 0 0 0 Both elements has a shape of 9. 1 means its a name, while 0 means its not a name. We will index the first element of X by X&lt;1&gt;, the second X&lt;2&gt; and so on. X&lt;1&gt; = Harry X&lt;2&gt; = Potter Similarly, we will index the first element of Y by Y&lt;1&gt;, the second Y&lt;2&gt; and so on. Y&lt;1&gt; = 1 Y&lt;2&gt; = 1 X&lt;t&gt; gets an element by index t. Tx is the size of the input sequence and Ty is the size of the output sequence. Tx = Ty = 9 in the last example although they can be different in other problems than name entity one. X(i)&lt;t&gt; is the element t of the sequence i in the training. Similarly for Y Tx (i) is the size of the input sequence i. It can be different across the sets. Similarly for Y Representing words: We will now work in this course with NLP which stands for nature language processing. One of the challenges of NLP is how can we represent a word? The first thing we need a vocabulary list that contains all the words in our target sets. Example: [a ... And ... Harry ... Potter ... Zulu ] Each word will have a unique index that it can be represented with. The sorting here is by alphabetic order. Vocabulary sizes in modern applications are from 30,000 to 50,000. 100,000 is not uncommon. Some of the bigger companies uses a million. To build vocabulary list, you can read all the text you have and get m words with the most occurrence, or search online for m most occurrence words. The next step is to create a one hot encoding sequence for each word in your dataset given the vocabulary you have created. While converting, what if you meet a word thats not in your dictionary? Well you can add a token in the vocabulary &lt;UNK&gt; which stands for unknown text and use its index in filling your one hot vector. Full example can be found here: Recurrent Neural Network Model Why not a standard network for sequence problems? There are two problems: Inputs, outputs can be different lengths in different examples! This can be solved in normal NNs by paddings with the maximum lengths but its not a good solution. Doesn't share features learned across different positions of text/sequence. Using a feature sharing like in CNNs can significantly reduce the number of parameters in your model. Thats what we will do in RNNs. Recurrent neural networks doesn't have the two mentioned problems. Lets build a RNN that solves name entity recognition task: In this problem Tx = Ty. In other problems where they aren't equal, the RNN architecture may be different. a&lt;0&gt; is usually initialized with zeros, but some others may initialize it randomly in some cases. There are three weight matrices here: Wax, Waa, and Wya with shapes: Wax: (NoOfHiddenNeurons, nx) Waa: (NoOfHiddenNeurons, NoOfHiddenNeurons) Wya: (ny, NoOfHiddenNeurons) The weight matrix Waa is the memory the RNN is trying to maintain from the previous layers. A lot of papers and books write the same architecture this way: Its harder to interpreter. Its easier to roll this drawings to the unrolled version we have descried. In the discussed RNN architecture, the current output y^&lt;t&gt; depends on the previous inputs and activations. Lets have this example ' He Said, "Teddy Roosevelt was a great president" '. In this example Teddy is a person name but we know that from the word President that came after Teddy not from He and said that is before it. So limitation of the discussed architecture is that it can not learn from behind. To address this problem we will later discuss Bidirectional RNNs (BRNNs). Now lets discuss the forward propagation equations on the discussed architecture: The activation function of a is usually tanh or RELU and for y depends on your task choosing some activation functions like sigmoid and softmax. In name entity recognition task we are solving, we will use Sigmoid because we only have two classes. In order to help us develop complex RNN architectures, the last equations needs to be simplified a bit. Simplified RNN notation: wa shape: (NoOfHiddenNeurons, NoOfHiddenNeurons + nx) [a, xt] shape: (NoOfHiddenNeurons + nx, 1) ### Backpropagation through time Lets see how backpropagation works with the RNN architecture we have developed. Often, Deep learning frameworks do backpropagation automatically for you. But its useful to know how it works especially in RNNs. Here is the graph: Where wa, ba, wy, and by are shared across each element in a sequence. We will use the cross entropy loss function: Where the first equation is the loss for one element and the loss for the whole sequence is given by the summation over all the calculated values. Graph with losses: The backpropagation here is called backpropagation through time because of the passed activation a from one sequence element to another. ### Different types of RNNs So far we have seen only one RNN architecture in which Tx equals TY always. In some other problems, they may not equal so we need different architectures. The ideas in this section was inspired by Andrej Karpathy blog. Mainly this image has all types: The architecture we have descried before is called Many to Many. In sentiment analysis problem, X is a text while Y is an integer that rangers from 1 to 5. The RNN architecture for that is Many to One as in Andrej Karpathy image. A One to Many architecture application would be music generation. Note that starting the second layer we are feeding the generated output back to the network. There are another interesting architecture in Many To Many. Applications like machine translation inputs and outputs sequences have different lengths in most of the cases. So an alternative Many To Many architecture that fits the translation would be as follows: There are an encoder and a decoder in the architecture. The encoder encodes the input sequence into one matrix and feed it to the decoder to generate the outputs. Encoder and decoder have different weight matrices. There are another architecture which is the attention architecture which we will talk about in chapter 3. ### Language model and sequence generation RNNs do very well in language model problems. In this section we will build a language model using RNNs. What is a language model Lets say we are solving a speech recognition problem and some one says a sentence that can be interpreted into to two sentences: The apple and pair salad The apple and pear salad Pair and pear sounds exactly the same, so how would a speech recognition application choose from the two. Thats where the language models comes. It gives a probability for the two sentences and the application decides the best based on this probability. The job of a language model is giving a probability of any given sentence .Also the probability of the next sentence. How to build language modeling with RNNs? The first thing is to get a training set: Large corpus of target language text. Then tokenize this training set by getting the vocabulary and then one-hot each word. Put an end of sentence token &lt;EOS&gt; with the vocabulary and include it with each converted sentence. Also like we have mentioned before use the token &lt;UNK&gt; for the unknown words. Given the sentence "Cats average 15 hours of sleep a day. &lt;EOS&gt;" In training time we will use this: We pass to 0 vector - One hot - to the first layer. The loss function is defined by cross entropy loss: i is for all elements in the training set. To use this model: For predicting the chance of next word, we feed the sentence to the RNN and then get the final y^&lt;t&gt; hot vector and sort it by maximum probability. For taking the probability of a sentence, we compute this: p(y&lt;1&gt;, y&lt;2&gt;, y&lt;3&gt;) = p(y&lt;1&gt;) * p(y&lt;2&gt; | y&lt;1&gt;) * p(y&lt;3&gt; | y&lt;1&gt;, y&lt;2&gt;) This is simply feeding the sentence to the RNN and multiply the probability for the given word in all the output hot encoded. ### Sampling novel sequences After a sequence model is trained on a language model, to check what the model has learned you can apply it on a sample novel sequence. Lets see the steps of how we can sample a novel sequence from a trained sequence language model: Given this model: We first pass a&lt;0&gt; = zeros vector, and x&lt;1&gt; = zeros vector. Then we choose a prediction from y^&lt;1&gt; using random distribution. For example it could be "The". In Numpy this can be made using: numpy.random.choice This is the line where you get a random sentences each time you run a novel sequence. We pass the last predicted word with the calculated a&lt;1&gt; We keep doing 3 &amp; 4 steps for a fixed length or until we get the &lt;EOS&gt; token. You can reject any &lt;UNK&gt; token if you mind finding it in you output. So far we have build a word level language model. A character level language model also can be made. In the character level language model the vocabulary will contain [a-zA-Z0-9], space, and some special characters. Cons of character level language model compared to the word level language model: There will be no &lt;UNK&gt; token. It can deal with any word. But main disadvantage you will have a larger sequences! and also more computationally expensive and harder to train. ### Vanishing gradients with RNNs One of the problems with naive RNNs that it runs into vanishing gradient problems. An RNN that process a sequence data with the size of 10,000 time sets, has 10,000 deep layers which is so hard to optimize. To address the problem lets take an example. Suppose we are working with language modeling problem and there are two sequences that it tries to learn: "The cat, which already ate ........................, was full" "The cats, which already ate ........................, were full" The dots represents many words What we need to learn here that "was" came with "cat" and that "were" came with "cats". The naive RNN will find it hard to get this relation. As we have discussed in Deep neural networks, deeper networks are luckily to get into the vanishing gradient problem. In deep nets to compute the weights of the earlier layers you have to compute all the weights after these weights which causes the gradient to vanish. That also happens with RNNs with a long sequence size. - For computing the word "Was", we need to compute the gradient for everything behind. Multiplying by fractions tends to vanish the gradient, while multiplication of large number tends to explode it. Therefore half of your weights may not be updated properly! In the problem we descried it means that its hard for the network to memorize "was" word all over back to "cat". So in this case, the network won't be identify the singular/plural words so that it give it the right grammar word. The conclusion is that RNNs aren't good in long term dependencies. In theory, RNNs are absolutely capable of handling such “long-term dependencies.” A human could carefully pick parameters for them to solve toy problems of this form. Sadly, in practice, RNNs don’t seem to be able to learn them. http://colah.github.io/posts/2015-08-Understanding-LSTMs/ Vanishing gradients is tends to be the bigger problems with RNNs than the Exploding gradients problem. We will discuss how to solve it in the next sections. Exploding gradients can be easily seen when your weight values become NAN . So one of the ways solve exploding gradient is to apply gradient clipping means if your gradient is more than a threshold deal with the gradient as a fixed value. Extra: Solution for the Exploding gradient problem: Truncated back propagation. Not to update all the weights in the way back. Not optimal. You won't update all the weights. Gradient clipping. Solution for the Vanishing gradient problem: Weight initialization. Like he initialization. Echo state networks. Use LSTM/GRU networks. Most popular. We will discuss it next. ### Gated Recurrent Unit (GRU) GRU is an RNN type that can help solve the vanishing gradient problem and can remember the long term dependencies. The basic RNN unit can be visualized to be like this: We will represent the GRU with a similar drawings. Each layer in GRUs has a new variable C which is the memory cell. It can tell to wether memorize a something or not. In GRUs, C&lt;t&gt; = a&lt;t&gt; Equations of the GRUs: The update gate is between 0 and 1 To understand GRUs imagine that the update gate is either 0 or 1 most of the time. So we update the memory cell based on the update cell and the previous cell. Lets take the cat sentence example and apply it to understand this equations: Sentence: "The cat, which already ate ........................, was full" We will suppose that U is 0 or 1 and is a bit that tells us if a singular word needs to be memorized. Splitting the words and get values of C and U at each place: Word Update gate(U) Cell memory (C) The 0 val cat 1 newVal which 0 newVal already 0 newVal ... 0 newVal was 1 (I dont need it anymore) newerVal full .. .. Drawing for the GRUs Drawings like in http://colah.github.io/posts/2015-08-Understanding-LSTMs/ is so popular and makes it easier to understand GRUs and LSTMs. But Andrew Ng finds its better to look at the equations. Because the update gate U is usually a small number like 0.00001, GRUs doesn't suffer the vanishing gradient problem. In the equation this makes C&lt;t&gt; = C&lt;t-1&gt; in a lot of cases. Shapes: a&lt;t&gt; shape is (NoOfHiddenNeurons, 1) c&lt;t&gt; is the same as a&lt;t&gt; c~&lt;t&gt; is the same as a&lt;t&gt; u&lt;t&gt; is also the same dimensions of a&lt;t&gt; The multiplication in the equations are element wise multiplication. What has been descried so var is the Simplified GRU unit. Lets now describe the full one: The full GRU contains a new gate that is used with to calculate the candidate C. The gate tells you how relevance is C&lt;t-1&gt; to C&lt;t&gt; Equations: Shapes are the same So why we use these architectures, why don't we change them, how we know they will work, why not add another gate, why not use the simpler GRU instead of the full GRU; well researchers has experimented over years all the various types of these architectures with many many different versions and also addressing the vanishing gradient problem. They have found that full GRUs are one of the best RNN architectures to be used for many different problems. You can make your design but put in mind that GRUs and LSTMs are standards. Long Short Term Memory (LSTM) Other unit that can make you do long term dependences is an LSTM unit and its more powerful and general than GRUs. In LSTMs , C&lt;t&gt; != a&lt;t&gt; Here are the equations of an LSTM unit: In GRUs we have an update gate U, a relevance gate r, and a candidate cell variables C~&lt;t&gt; while in LSTMs we have an update gate U - Sometimes its called Input gate I -, a forget gate F, an output gate O, and a candidate cell variables C~&lt;t&gt; Drawings - which is inspired from http://colah.github.io/posts/2015-08-Understanding-LSTMs/ -: Some Variants on LSTMs includes: LSTM with peephole connections. The normal LSTM with C&lt;t-1&gt; included with every gate. There isn't a universal superior in choosing between LSTMs and its variants. Some win and some problems and some don't. One of the advantages of GRUs is that its simpler and can be used to build much bigger network but the LSTM is more powerful and general as we said. ### Bidirectional RNN There are still some ideas to make a powerful sequence model. One of them is bidirectional RNNs and another is Deep RNNs. As we saw before, here are an example on Name entity recognition: The name Teddy cannot be learned from He and said, but can be learned from bears. BRNNs fixes this issue. Here are BRNNs architecture: Hint that BRNNs are acyclic graph! The forward propagation goes from left to right, and from right to left. It learns from both sides. To make predictions we use y^&lt;t&gt; by using the two activations that comes from left and right. The blocks here can be any RNN block including the basic RNNs, LSTMs, or GRUs. For a lot of NLP or text processing problems, a BRNN with LSTM appears to be commonly used. The disadvantage of BRNNs that you need the entire sequence before you can process it. For example in live speech recognition if you used BRNNs you will need to wait for the person who speaks to stop to take the entire sequence and then make your predictions. ### Deep RNNs In a lot of cases the standard one layer RNNs will solve your problem. But in some problems its useful to stack some RNN layers to make a deeper network. For example, a deep RNN with 3 layers would look like this: In feed forward deep nets we can have till 100 or 200 layer and this would be a so big network. In deep RNNs stacking 3 layers is considered deep and already expensive. In some cases you might see a deep network that are connected after recurrent cell. Back propagation with RNNs In modern deep learning frameworks, you only have to implement the forward pass, and the framework takes care of the backward pass, so most deep learning engineers do not need to bother with the details of the backward pass. If however you are an expert in calculus and want to see the details of backprop in RNNs, you can work through this optional portion of the notebook. The quote is taken from this notebook. If you want the details of the back propagation with programming notes look at the linked notebook. Natural Language Processing &amp; Word Embeddings Natural language processing with deep learning is an important combination. Using word vector representations and embedding layers you can train recurrent neural networks with outstanding performances in a wide variety of industries. Examples of applications are sentiment analysis, named entity recognition and machine translation. Introduction to Word Embeddings Word Representation NLP has been revolutionized by deep learning and especially be RNNs and deep RNNs. Word embeddings is a way of representing words. It lets your algorithm automatically understand the analogies between words like "king" and "queen". So far we have defined our language by a vocabulary. Then represented our words with one hot vector that represent the word in the vocabulary. An image example would be: We will use the annotation O idx for any word that is represented with one hot like in the image. One of the weaknesses of this representation is that it treats a word as a thing that itself and it doesn't allow an algorithm to generalize across words. For example: "I want a glass of orange ______" , a model should predict the next word as Juice. A similar example "I want a glass of apple ______" , a model won't easily predict juice here if it doesn't trained on it. And if so the two examples aren't related although orange and apple are similar. Inner product between any hot encoding word is zero. Also the distances between them are the same. So, instead of a one-hot presentation, won't it be nice if we can learn a featurized representation with each of these words: Man, Woman, King, Queen, Apple, and orange? - Each word will have a 300 features with type of float point number for example. Each word column will be 300 dimensional vector which will be the representation. We will use the notation e5391 to describe Man word features vector. Now if we went to the examples we descried again: "I want a glass of orange ______" I want a glass of apple ______ Orange and apple now shares a lot of similar features which makes it easier for an algorithm to generalize between them. We call this representation Word embeddings. To visualize word embeddings we use t-SNE algorithm to reduce the features to 2 dimensions which makes it easy to visualize. You will get a sense that more related words distance are smaller than other distances. The word embeddings came from that we need to embed a unique vector inside an n dimensions. Using word embeddings Lets see how we can take the feature representation we have extracted from each word and apply it in Name entity recognition problem. Given this example - From named entity recognition - : Sally Johnson is a persons name. After training on this sentence the model should find out that the sentence "Robert Lin is an apple farmer" contains Robert Lin as a name, as apple and orange has near representations. Now if you have tested your model with this sentence "Mahmoud Badry is a durian cultivator" the network should learn the name even if it hasn't seen the word durian before. Thats the power of word representations. The algorithms that are used to learn word embeddings can exterminate billions of unlabeled text - for example 100 billion- words and learn the representation from them. Transfer learning and word embeddings: Learn word embeddings from large text corpus. say 100 billion word Or download pre-trained embedding online. Transfer embeddings to new task with smaller training set. say 100k word. Optimal: Continue to finetune the word embeddings with new data. This can be done if your smaller training set are big enough. Also one of the advantages of using word embeddings is that it reduces the size of the input! 10,000 one hot compared to 300 features vector. Word embeddings has an interesting relationship to the face recognition task: In this problem we encode each face into a vector and then check how similar is these vectors. The word encode and embeddings has a similar meaning here. In the word embeddings task, we are getting a vector say from e1 to e300 for each word in our vocabulary. We will discuss the algorithm in the next sections. Properties of word embeddings One of the most fascinating properties of word embeddings is that they can also help with analogy reasoning. Analogy reasoning is one of the most important applications of NLP. Analogies example: Given this word embeddings table: Can we conclude this relation: Man ==&gt; Woman King ==&gt; ?? Lets subtract eMan from eWoman. This will equal the vector [-2 0 0 0] Similar eKing - eQueen = [-2 0 0 0] So the difference is about the gender in both. This vector represents the gender. This drawing is 2D visualization of the 4D vector that has been extracted by t-SNE algorithm. It was drawing for just clarification! Don't rely on t-SNE algorithm in finding parallels. So we can reformulate the problem to find: eMan - eWoman ≈ eKing - e?? It can also represented mathematically by: It turns out that eQueen is the best solution here that gets the the similar vector. Cosine similarity: Equation: \[\text{CosineSimilarity(u, v)} = \frac {u . v} {||u||_2 ||v||_2} = cos(\theta)\] The top part represents the inner product of u and v vectors. That will be large if the vectors are so similar. We can use this equation to calculate the similarities between word embeddings and on the analogy problem where u = ew and v = eking - eman + ewoman Embedding matrix When you implement an algorithm to learn a word embedding, what you end up learning is an embedding matrix. Lets take an example: Suppose we are using 10,000 words as our vocabulary. The algorithm should extract a matrix E of the shape (300, 10,000) in case we are extracting 300 features. (300, 10,001) if we have &lt;UNK&gt; token. If O6257 is the one hot encoding of the word orange, then E. O6257 equals e6257 which shape is (300, 1) Generally E. Oj = ej In the next sections you will see that we first initialize E randomly and then try to learn all the parameters of this matrix. In practice its not efficient to use a dot multiplication when you are trying to extract the embeddings of a specific word, instead we will use slicing to slice a specific column. In keras there are a embedding layer that extracts this column with no multiplications! Learning Word Embeddings: Word2vec &amp; GloVe Learning word embeddings Lets start learning some algorithms that learns the word embeddings. At start, word embeddings algorithms - with deep learning - were complex but then it started to be simpler and simpler. We will start by learning the complex examples to make more sense. Neural language model: Lets start by example: We want to build a language model so that we can predict the next word. So we use this neural network to learn the language model We get ej by E. oj NN layer has parameters W1 and b1 while softmax layer has parameters W2 and b2 Input dimension is (300*6, 1) if we the window size is 6. Here we are optimizing E matrix and layers parameters. We need to maximize the likelihood in our training set. This model was build on 2003 and tends to work very well to get the embeddings. In the last example we took a window of 6 words that fall behind the word that we want to predict. There are other choices when we are trying to learn word embeddings. Suppose we have the example: "I want a glass of orange juice to go along with my cereal" To learn juice, Choices of Context are: Last 4 words. We use a window of last 4 words - 4 is the best -, "a glass of orange" and try to predict the next word from it. 4 words on the left and on the right. "a glass of orange" and "to go along with" Last 1 word. "orange" Nearby 1 word. "glass" word is near juice The idea of skip grams model. The idea is so simpler and works remarkably well. We will talk about this in the next section. Word2Vec Before presenting Word2Vec, lets talk about Skip-grams: For example if we have the sentence: "I want a glass of orange juice to go along with my cereal" We will choose Context and target. The target is chosen randomly basing on a window with a specific size. Context Target How far orange juice +1 orange glass -2 orange my +6 We have converted the problem into a supervised problem. This is not an easy learning problem because within -10/+10 words for example is hard. We want to learn this to get our word embeddings model. Word2Vec model: Vocabulary size = 10,000 word Lets say that the context word are c and the target word are t We want to learn c to t we get ec by E. oc We then use a softmax layer to get P(t|c) which is y^ Also we will use the cross-entropy loss function. This model is called skip-grams model. The last model has a problem with the softmax classifier: Here we are summing 10,000 numbers which corresponds to the number of words in our vocabulary. If this number is larger say 1 million, the computation will become so slow. The solution for the past problem is to use "Hierarchical softmax classifier" which works as a tree classifier. In practice the hierarchical softmax classifier doesn't use a balanced tree like the drawn one. Common words are in the top and less common are in the bottom. How to sample the context c? One way is to choose the context by random from your corpus. If you have done it that way, there will be frequent words like "the, of, a, and, to, .." that can dominate other words like "orange, apple, Mahmoud,..." So in practice, we don't take the context uniformly random, instead there are some heuristics to balance the common words and the non-common words. Negative Sampling Negative sampling allows you to do something similar to the Skip-Gram model, but with a much more efficient learning algorithm. We will create a different learning problem Given this example: "I want a glass of orange juice to go along with my cereal" The sampling will look like this: Context Word target orange juice 1 orange king 0 orange book 0 orange the 0 orange of 0 We get positive example by using the same skip-grams technique, a fixed window that goes around. To generate a negative example, we pick a word randomly from the vocabulary. Notice that we got "of" although it was appeared in the same sentence. So the steps to generate the samples are: Pick a positive context Pick a k negative contexts from the dictionary. K is recommended to be from 5 to 20 in small datasets. For larger ones 2 to 5. We will have a k negative examples to 1 positive ones in the data we are collecting. Now lets define the model that will learn this supervised learning problem: Lets say that the context word are c and the word are t and y is the target. We will apply the simple logistic regression model. The logistic regression model can be drawn like this: So we are like having 10,000 binary classification problem, and we only train k+1 classifier of them in each iteration. Now how to select negative samples: We can sample according to empirical frequencies in words corpus which means according to how often different words appears. But the problem with that is that we will have more frequent words like the, of, and.. The best is to sample with this equation - According to authors - : GloVe word vectors GloVe is another algorithm for learning the word embeddings, Its the simplest of them. This is not used much as word2vec or gram models, but it has some enthusiasts because of its simplicity. GloVe stands for Global vectors for word presentation. Given this example: "I want a glass of orange juice to go along with my cereal" We will choose a context and a target from the choices we have mentioned in the previous sections. Then we will calculate this for every pair, Xct = # times t appears in context of c Xct = Xtc if we choose a window pair, but they will not equal if we choose the previous words for example. In GloVe they use a window which means they are equal The model is defined like this: f(x) -the weighting term- is used for many reasons which includes: The log(0) problem, which might occur if there are no pairs for the given target and context values. Giving low weights for stop words like "is", "the", and "this" because they occurs a lot. Giving low weights for words that doesn't occur so much. ceta and e are symmetric which helps getting the final word embedding. Conclusion on word embeddings: If this is your first try, you should try to download a pretrained model that has been made and actually works best. If you have enough data, you can try to implement one of the available algorithms. Because word embeddings are very computationally expensive to train, most ML practitioners will load a pre-trained set of embeddings. A final note that you can't guarantee that the axis used to represent the features will be well-aligned with what might be easily humanly interpretable axis like gender, and royal, and age. Applications using Word Embeddings Sentiment Classification As we have discussed before, Sentiment classification is the process of finding if a text has a positive or a negative review. Its so useful in NLP and is used in so many applications. An example would be: One of the challenges with it, is that you might haven't a huge labeled training data for it, but using word embeddings can help getting rid of this. The common dataset sizes varies from 10,000 to 100,000 words. A simple sentiment classification model would be like this: The embedding matrix may have been trained on say 100 billion words. Number of features given a word is 300. We can use sum or average given all the words then pass it to a softmax classifier. That makes this classifier works for short or long sentences. One of the problems with this simple model is that it ignores words order! for example "Completely lacking in good taste, good service, and good ambience" has the word good 3 times but its a negative review! A better model uses an RNN for solving this problem: And so if you train this algorithm, you end up with a pretty decent sentiment classification algorithm. Also it will generalize even if words aren't in your dataset, for example the sentencte "Completely absent of good taste, good service, and good ambience" will be the same as the trained word! Debiasing word embeddings We want to make sure that our word embeddings free from undesirable forms of bias, such as gender bias, ethnicity bias and so on. A horrifying result on a trained word embeddings in the context of Analogies: Man : Computer_programmer as Woman : Homemaker Father : Doctor as Mother : Nurse Word embeddings can reflect gender, ethnicity, age, sexual orientation, and other biases of text used to train the model. Learning algorithms by general is making an important decision and it mustn't be biased. Andrew thinks we actually have better ideas for quickly reducing the bias in AI than for quickly reducing the bias in the human race, although it still needs a lot of work to be done. Addressing bias in word embeddings steps: Idea is by paper: https://arxiv.org/abs/1607.06520 Given this learned embeddings: We need to solve the gender bias here. The steps we will discuss can help solve any bias problem but we are focusing here on gender bias. Here are the steps: Identify the direction: Calculate the difference between: ehe - eshe emale - efemale .... Choose some k differences and average them. This will help you find this: By that we have found the bias direction which is 1D vector and the non-bias vector which is 299D vector. Neutralize: For every word that is not definitional, project to get rid of bias. Babysitter and doctor needs to be neutral so we project them on nonbias with the direction of the bias: After that they will be equal in the term of gender. - To do this the authors of the paper trained a classifier to tell the words that they need to be neutralized or not. Equalize pairs We want each pair to have difference only in gender. Like: Grandfather - Grandmother - He - She - Boy - Girl We want to do this because the distance between grandfather and babysitter is bigger than babysitter and grandmother: To do that, we move grandfather and grandmother to a point where they will be in the middle of the non-bias axis. There are some words you need to do this for in your steps. The size of these words are relatively small. Sequence models &amp; Attention mechanism Sequence models can be augmented using an attention mechanism. This algorithm will help your model understand where it should focus its attention given a sequence of inputs. This week, you will also learn about speech recognition and how to deal with audio data. Various sequence to sequence architectures Basic Models In this section we will learn about sequence to sequence - Many to Many - models which are useful in various applications including machine translation and speech recognition. Lets start by the basic model: Given this machine translation problem in which X is a French sequence and Y is an English sequence. Our architecture will include encoder and decoder. The encoder is built with RNNs - LSTM or GRU are included - and takes the input sequence and then outputs a vector that should represent the whole input. After that the decoder network, are also built with RNNs and outputs the output sequence using the vector that has been built by the encoder. These ideas are from these papers: [Sutskever et al., 2014. Sequence to sequence learning with neural networks] [Cho et al., 2014. Learning phrase representations using RNN encoder-decoder for statistical machine translation] With an architecture similar to the one previously mentioned works for image captioning problem: In this problem X is an image, while Y is a sentence. The model architecture image: The architecture uses a CNN pretrained AlexNet as an encoder for the image, and the decoder is an RNN. The ideas are from these papers (They share similar ideas): [Maoet. al., 2014. Deep captioning with multimodal recurrent neural networks] [Vinyalset. al., 2014. Show and tell: Neural image caption generator] [Karpathy and Li, 2015. Deep visual-semantic alignments for generating imagedescriptions] Picking the most likely sentence There are some similarities between the language model we have learned previously, and the machine translation model we have just discussed, but there are some differences as well. The language model we have learned as so similar to the decoder of the machined translation model, except for a0 The problems formations also are different: In language model: P(y&lt;1&gt;, ....y&lt;Ty&gt;) In machine translation: P(y&lt;1&gt;, ....y&lt;Ty&gt; | x&lt;1&gt;, ....x&lt;Tx&gt;) What we don't want in machine translation model, is not to sample the output at random. This may provide some choices as an output. Sometimes you may sample a bad output. Example: X = "Jane visite l’Afrique en septembre." Y may be: Jane is visiting Africa in September. Jane is going to be visiting Africa in September. In September, Jane will visit Africa. So we need to get the best output, this can be take by the equation: The most common algorithm is the beam search, which we will explain in the next section. Why not use greedy search? Why not get the best choices each time? It turns out that this approach doesn't really work! Lets explain it with an example: The best output for the example we talked about is "Jane is visiting Africa in September." Suppose that you when you are choosing with greedy approach, the first two words were "Jane is", the word that may come after that will be "going" as "going" is the most common word that comes after "Noun is" so the result may look like this: "Jane is going to be visiting Africa in September." and that isn't the best/optimal solution. So what is better than greedy approach, is trying to get an approximate solution, that will try to maximize the output. Beam Search Beam search is the most widely used algorithm to get the best output sequence. Its a heuristic search algorithm. To illustrate the algorithm we will be stick with the example from the previous section. We need Y = "Jane is visiting Africa in September." The algorithm has a parameter B which is the beam width. Lets take B = 3 which means the algorithm will get 3 outputs at a time. For the first step you will get ["in", "jane", "september"] words that are the best candidates. Then for each word in the first output, get B words from the 3 where the best are the result of multiplying both probabilities. Se we will have then ["In September", "jane is", "jane visit"]. Notice that we automatically ignored September. Repeat the same process and get the best B words for ["September", "is", "visit"] and so so. In this algorithm, keep only B instances of your network. If B = 1 this will become the greedy search. Refinements to Beam Search In the previous section we have discussed the basic beam search. In this section we will try to do some refinements to it to work even better. The first thing is Length optimization In beam search we are trying to optimize: And to do that we multiply: P(y&lt;1&gt; | x) * P(y&lt;2&gt; | x, y&lt;1&gt;) * ..... P(y&lt;t&gt; | x, y&lt;y(t-1)&gt;) Each probability is a fraction. Also maybe a small fraction. Multiplying small fractions will cause a numerical overflow! Meaning that it's too small for the floating part representation in your computer to store accurately. So in practice we use summing logs instead of multiplying directly. But theres another problem. The two optimization functions we have mentions tends to find small sequences! Because multiplying a lot of fractions gives a smaller value. So theres another change , by dividing by the number of elements in the sequence. alpha is a hyper parameter to tune. If alpha = 0, Then its like we do nothing. If alpha = 1, Then its like we are using full sequence length. In practice alpha = 0.7 is a good thing. The second thing is who can we choose best B? The larger B, the larger possibilities, the better are the results. But it will be more computationally expensive. In practice, you might see a in the production sentence B=10 B=100, B=1000 are uncommon. Unlike exact search algorithms like BFS (Breadth First Search) or DFS (Depth First Search), Beam Search runs faster but is not guaranteed to find exact solution. Error analysis in beam search We have talked before on Error analysis in Structuring Machine Learning Projects chapter. We will apply these concepts to improve our beam search algorithm. We will use error analysis to figure out if the B hyperparameter of the beam search is the problem - because it doesn't get an optimal solution - or to in other hyperparameters like the RNN parameters. Lets take an example: Our examples information: x = "Jane visite l’Afrique en septembre." y* = "Jane visits Africa in September." y^ = "Jane visited Africa last September." Our model that has produced a sentence that are different in meaning because of the word "last" We now want to know who to blame, the RNN or the beam search. To do that, we calculate P(y* | X) and P(y^ | X). There are two cases: Case 1 (P(y* | X) &gt; P(y^ | X)): Conclusion: Beam search is at fault. Case 2 (P(y* | X) &lt;= P(y^ | X)): Conclusion: RNN model is at fault. The error analysis process is as following: You choose N error examples and make the following table: B for beam search, R is for the RNN. Get counts and decide. BLEU Score One of the challenges of machine translation, is that given a sentence in a language there are one or more possible good translation in another language. So how do we evaluate our results? The way we do this is by using BLEU score. BLEU stands for bilingual evaluation understudy. The intuition is so long as the machine generated translation is pretty close to any of the references provided by humans, then it will get a high BLEU score. Lets take an example: X = "Le chat est sur le tapis." Y1 = "The cat is on the mat." Y2 = "There is a cat on the mat." Suppose that the machine outputs: "the the the the the the the." One way to evaluate the machine output is to look at each word in the output and check it in the references. This is called precision: precision = 7/7 because the appeared in Y1 or Y2 This is not a useful measure! We can use a modified precision in which we are looking for the reference with the maximum number of a particular word and set the maximum appearing of this word to this number. So: modified precision = 2/7 because the max is 2 in Y1 We clipped the 7 times by the max which is 2. The problem here is that we are looking at one word at a time, we may need to look at pairs Another example (BLEU score on bigrams) The n-grams typically are collected from a text or speech corpus. When the items are words, n-grams may also be called shingles. An n-gram of size 1 is referred to as a "unigram"; size 2 is a "bigram" (or, less commonly, a "digram"); size 3 is a "trigram". X = "Le chat est sur le tapis." Y1 = "The cat is on the mat." Y2 = "There is a cat on the mat." Suppose that the machine outputs: "The cat the cat on the mat." The bigrams in the machine output: Pairs Count Count clip the cat 2 1 (Y1) cat the 1 0 cat on 1 1 (Y2) on the 1 1 (Y1) the mat 1 1 (Y1) Totals 6 4 Score = Count clip / Count = 4/6 So here are the equations for the n-grams: Lets put this together to formalize the BLEU score: Pn = Bleu score on n-grams only Combined Bleu score equation: For example if we want Bleu for 4, we compute P1, P2, P3, P4 and then average them and take the exp. Another equation is BP penalty which stands for brevity penalty. It turns out that if a machine outputs a small number of words it will get a better score so we need to handle that. Blue score is has several open source implementations and used in variety of systems like machine translation and image captioning. Attention Model Intuition So far we are using sequence to sequence models with an encoder and decoders. There are a technique called attention which makes these models even better. The attention algorithm, the attention idea has been one of the most influential ideas in deep learning. The problem of long sequences: Given this model, inputs, and outputs. The encoder should memorize this long sequence into one vector, and the decoder has to process this vector to generate the translation. If a human would translate this sentence, he wouldn't read the whole sentence and memorize it then try to translate it. He translates a part at a time. The performance of this model decreases if a sentence is so long. We will discuss the attention model that works like a human that looks at parts at a time. That will significantly increase the accuracy even with bigger sequence: Blue is the normal model, while green is the model with attention mechanism. In this section we will give just some intuitions about the attention model and in the next section we will discuss its details. At first the attention model was developed for machine translation but then other applications used it like computer vision and new architectures like Neural Turing machine. The attention model was descried in this paper: [Bahdanau et. al., 2014. Neural machine translation by jointly learning to align and translate] Now for the intuition: Suppose that our decoder is a bidirectional RNN: We gave the French sentence to the encoder and it should generate a vector that represents the inputs. Now to generate the first word in English which is "Jane" we will make another RNN which is the decoder. attention weights are used to specify which words are needed when to generate a word. So to generate "jane" we will look at "jane", "visite", "l'Afrique" alpha1,1, alpha1,2, and alpha1,3 are the attention weights used. And so to generate any word there will be a set of attention weights that controls which words we are looking at right now. ​ Attention Model Lets formalize the intuition from the last section into the exact details on how this can be implemented. First we will have an bidirectional RNN - most common is LSTMs - that encodes French language: For learning purposes, lets assume that a&lt;t&gt; will include the both directions. We will have an RNN to extract the output using a context c which is computer using the attention weights. This denotes how much information do it needs to look in a&lt;t&gt; Sum of the attention weights for each element in the sequence should be 1: Also the context c are calculated using this equation: Lets see how can we compute the attention weights: So alpha&lt;t, t'&gt; = amount of attention y&lt;t&gt; should pay to a&lt;t'&gt; Like for example we payed attention to the first three words through alpha&lt;1,1&gt;, alpha&lt;1,2&gt;, alpha&lt;1,3&gt; We are going to softmax the attention weights so that their sum is 1: Now we need to know how to calculate e&lt;t, t'&gt;. We will compute e using a small neural network: s&lt;t-1&gt; is the hidden state of the RNN s, and a&lt;t'&gt; is the activation of the other bidirectional RNN. One of the disadvantages of this algorithm is that it takes quadratic time or quadratic cost to run. One fun way to see how attention works is by visualizing the attention weights: Speech recognition - Audio data Speech recognition The rise of accurate speech recognition was the most exciting work done in sequence to sequence deep learning models. Lets define the speech recognition problem: X: audio clip Y: transcript If you plot an audio clip it should look like this: The horizontal axis is time while the vertical is changes in air pressure. What really is an audio recording? A microphone records little variations in air pressure over time, and it is these little variations in air pressure that your ear also perceives as sound. You can think of an audio recording is a long list of numbers measuring the little air pressure changes detected by the microphone. We will use audio sampled at 44100 Hz (or 44100 Hertz). This means the microphone gives us 44100 numbers per second. Thus, a 10 second audio clip is represented by 441000 numbers (= \(10 \times 44100\)). It is quite difficult to work with "raw" representation of audio. Because even human ear doesn't process raw wave forms, the human ear can process different frequencies. There's a common preprocessing step for an audio to generate a spectrogram which works similarly to human ears. The horizontal axis is time while the vertical is frequencies. Intensity of different colors shows the amount of energy. A spectrogram is computed by sliding a window over the raw audio signal, and calculates the most active frequencies in each window using a Fourier transform. In the past days, speech recognition systems was built with phonemes that are a hand engineered basic units of sound. Linguists use to hypothesize any writing down audio in terms of phonemes which they thought would be the best way to do speech recognition. End to end deep learning found that phonemes was no longer needed. One of the things that made this possible is the large audio datasets. Research papers has 300 - 3000 hours while the best commercial systems are now trained on over 100,000 hours of audio. You can build an accurate speech recognition system using the attention model that we have descried in the previous section: One of the methods that seem to work well is CTC cost which stands for "Connectionist temporal classification" To explain this lets say that Y = "the quick brown fox" We are going to use an RNN with input, output structure: Hint: this is a bidirectional RNN, but it practice a bidirectional RNN are used. Notice that the number of inputs and number of outputs are the same here, but in speech recognition problem X tends to be a lot larger than Y. 10 seconds of audio gives us X with shape (1000, ). This 10 seconds can't have 1000 character! The CTC cost function allows the RNN to output something like this: ttt_h_eee\&lt;SPC&gt;___\&lt;SPC&gt;qqq___ This covers from "The quick". The _ is a special character called blank and &lt;SPC&gt; is for space character. So the 19 character in our Y can be generated into 1000 character output using CTC and its special blanks. The ideas were taken from this paper: [Graves et al., 2006. Connectionist Temporal Classification: Labeling unsegmented sequence data with recurrent neural networks] This paper also are used by baidue deep speech. Both options attention models and CTC cost can give you an accurate speech recognition system. Trigger Word Detection With the rise of deep learning speech recognition, there are a lot of devices that can be waked up by saying some words with your voice. These systems are called trigger word systems. For example, Alexa - a smart device made by amazon - can answer your call "Alexa, What time is it" and then Alexa will reply you. Trigger word detection system includes: Now the trigger word detection literature is still evolving so there actually isn't a single universally agreed on algorithm for trigger word detection yet. But lets discuss an algorithm that can be used. Lets now build a model that can solve this problem: X: audio clip X has been preprocessed and spectrogram features has been returned of X X&lt;1&gt;, X&lt;2&gt;, ... , X&lt;t&gt; Y will be labels 0 or 1. 0 represents the non trigger word, while 1 is that trigger word that we need to detect. The model architecture can be like this: The vertical lines in the audio clip represents the trigger words. The corresponding to this will be 1. One disadvantage of this is the imbalanced dataset outputs. There will be a lot of zeros and little ones. A hack to solve this is to make an output a few ones for several times or for a fixed period of time before reverting back to zero. ​ Extras Machine translation attention model (From notebooks) The model is built with keras layers. The attention model. There are two separate LSTMs in this model. Because the one at the bottom of the picture is a Bi-directional LSTM and comes before the attention mechanism, we will call it pre-attention Bi-LSTM. The LSTM at the top of the diagram comes after the attention mechanism, so we will call it the post-attention LSTM. The pre-attention Bi-LSTM goes through \(T_x\) time steps; the post-attention LSTM goes through \(T_y\) time steps. The post-attention LSTM passes \(s^{\langle t \rangle}, c^{\langle t \rangle}\) from one time step to the next. In the lecture videos, we were using only a basic RNN for the post-activation sequence model, so the state captured by the RNN output activations \(s^{\langle t\rangle}\). But since we are using an LSTM here, the LSTM has both the output activation \(s^{\langle t\rangle}\) and the hidden cell state \(c^{\langle t\rangle}\). However, unlike previous text generation examples (such as Dinosaurus in week 1), in this model the post-activation LSTM at time \(t\) does will not take the specific generated \(y^{\langle t-1 \rangle}\) as input; it only takes \(s^{\langle t\rangle}\) and \(c^{\langle t\rangle}\) as input. We have designed the model this way, because (unlike language generation where adjacent characters are highly correlated) there isn't as strong a dependency between the previous character and the next character in a YYYY-MM-DD date. What one "Attention" step does to calculate the attention variables \(\alpha^{\langle t, t&#39; \rangle}\), which are used to compute the context variable \(context^{\langle t \rangle}\) for each timestep in the output (\(t=1, \ldots, T_y\)). The diagram uses a RepeatVector node to copy \(s^{\langle t-1 \rangle}\)'s value \(T_x\) times, and then Concatenation to concatenate \(s^{\langle t-1 \rangle}\) and \(a^{\langle t \rangle}\) to compute \(e^{\langle t, t&#39;}\), which is then passed through a softmax to compute \(\alpha^{\langle t, t&#39; \rangle}\). These Notes were made by Mahmoud Badry @2018]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Course Note</tag>
        <tag>Sequence Models</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Machine Learning Yarning(part two)]]></title>
    <url>%2FMachine-Learning-Yarning-part-two%2F2019%2F03%2F20%2F</url>
    <content type="text"><![CDATA[Bias and Variance Techniques for reducing avoidable bias If your learning algorithm suffers from high avoidable bias, you might try the following techniques: - Increase the model size ​(such as number of neurons/layers): This technique reduces bias, since it should allow you to fit the training set better. If you find that this increases variance, then use regularization, which will usually eliminate the increase in variance. Modify input features based on insights from error analysis​: Say your error analysis inspires you to create additional features that help the algorithm eliminate a particular category of errors. (We discuss this further in the next chapter.) These new features could help with both bias and variance. In theory, adding more features could increase the variance; but if you find this to be the case, then use regularization, which will usually eliminate the increase in variance. Reduce or eliminate regularization​ (L2 regularization, L1 regularization, dropout): This will reduce avoidable bias, but increase variance. Modify model architecture​ (such as neural network architecture) so that it is more suitable for your problem: This technique can affect both bias and variance. One method that is not helpful: Add more training data​: This technique helps with variance problems, but it usually has no significant effect on bias. In addition to the techniques described earlier to address high bias, I sometimes also carry out an error analysis on the ​training data,​ following a protocol similar to error analysis on the Eyeball dev set. This can be useful if your algorithm has high bias—i.e., if it is not fitting the training set well. Techniques for reducing variance If your learning algorithm suffers from high variance, you might try the following techniques: - Add more training data​: This is the simplest and most reliable way to address variance, so long as you have access to significantly more data and enough computational power to process the data. Add regularization​ (L2 regularization, L1 regularization, dropout): This technique reduces variance but increases bias. Add early stopping​ (i.e., stop gradient descent early, based on dev set error): This technique reduces variance but increases bias. Early stopping behaves a lot like regularization methods, and some authors call it a regularization technique. Feature selection to decrease number/type of input features:​ This technique might help with variance problems, but it might also increase bias. Reducing the number of features slightly (say going from 1,000 features to 900) is unlikely to have a huge effect on bias. Reducing it significantly (say going from 1,000 features to 100—a 10x reduction) is more likely to have a significant effect, so long as you are not excluding too many useful features. In modern deep learning, when data is plentiful, there has been a shift away from feature selection, and we are now more likely to give all the features we have to the algorithm and let the algorithm sort out which ones to use based on the data. But when your training set is small, feature selection can be very useful. Decrease the model size ​(such as number of neurons/layers): ​Use with caution.​ This technique could decrease variance, while possibly increasing bias. However, I don’t recommend this technique for addressing variance. Adding regularization usually gives better classification performance. The advantage of reducing the model size is reducing your computational cost and thus speeding up how quickly you can train models. If speeding up model training is useful, then by all means consider decreasing the model size. But if your goal is to reduce variance, and you are not concerned about the computational cost, consider adding regularization instead. Here are two additional tactics, repeated from the previous chapter on addressing bias: Modify input features based on insights from error analysis​: Say your error analysis inspires you to create additional features that help the algorithm to eliminate a particular category of errors. These new features could help with both bias and variance. In Page 53 Machine Learning Yearning-Draft Andrew Ng theory, adding more features could increase the variance; but if you find this to be the case, then use regularization, which will usually eliminate the increase in variance. Modify model architecture​ (such as neural network architecture) so that it is more suitable for your problem: This technique can affect both bias and variance.]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Book Note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Machine Learning Yarning(part one)]]></title>
    <url>%2FMachine-Learning-Yarning-part-one%2F2019%2F03%2F20%2F</url>
    <content type="text"><![CDATA[Reference from Machine Learning Yarning by Andrew Ng Setting up development and test sets Choose dev and test sets from a distribution that reflects what data you expect to get in the future and want to do well on. This may not be the same as your training data’s distribution. Choose dev and test sets from the same distribution if possible. Choose a single-number evaluation metric for your team to optimize. If there are multiple goals that you care about, consider combining them into a single formula (such as averaging multiple error metrics) or defining satisficing and optimizing metrics. Machine learning is a highly iterative process: You may try many dozens of ideas before finding one that you’re satisfied with. Having dev/test sets and a single-number evaluation metric helps you quickly evaluate algorithms, and therefore iterate faster. When starting out on a brand new application, try to establish dev/test sets and a metric quickly, say in less than a week. It might be okay to take longer on mature applications. The old heuristic of a 70%/30% train/test split does not apply for problems where you have a lot of data; the dev and test sets can be much less than 30% of the data. Your dev set should be large enough to detect meaningful changes in the accuracy of your algorithm, but not necessarily much larger. Your test set should be big enough to give you a confident estimate of the final performance of your system. If your dev set and metric are no longer pointing your team in the right direction, quickly change them: If you had overfit the dev set, get more dev set data. If the actual distribution you care about is different from the dev/test set distribution, get new dev/test set data. If your metric is no longer measuring what is most important to you, change the metric. Basic Error Analysis When you start a new project, especially if it is in an area in which you are not an expert, it is hard to correctly guess the most promising directions. So don’t start off trying to design and build the perfect system. Instead build and train a basic system as quickly as possible—perhaps in a few days. Then use error analysis to help you identify the most promising directions and iteratively improve your algorithm from there. Carry out error analysis by manually examining ~100 dev set examples the algorithm misclassifies and counting the major categories of errors. Use this information to prioritize what types of errors to work on fixing. Consider splitting the dev set into an Eyeball dev set, which you will manually examine, and a Blackbox dev set, which you will not manually examine. If performance on the Eyeball dev set is much better than the Blackbox dev set, you have overfit the Eyeball dev set and should consider acquiring more data for it. Why do we explicitly separate the dev set into Eyeball and Blackbox dev sets? Since you will gain intuition about the examples in the Eyeball dev set, you will start to overfit the Eyeball dev set faster. If you see the performance on the Eyeball dev set improving much more rapidly than the performance on the Blackbox dev set, you have overfit the Eyeball dev set. In this case, you might need to discard it and find a new Eyeball dev set by moving more examples from the Blackbox dev set into the Eyeball dev set or by acquiring new labeled data. If you are working on a task that even humans cannot do well, then the exercise of examining an Eyeball dev set will not be as helpful because it is harder to figure out why the algorithm didn’t classify an example correctly The Eyeball dev set should be big enough so that your algorithm misclassifies enough examples for you to analyze. A Blackbox dev set of 1,000-10,000 examples is sufficient for many applications. If your dev set is not big enough to split this way, just use the entire dev set as an Eyeball dev set for manual error analysis, model selection, and hyperparameter tuning.]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Book Note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Matrix Algebra for Engineers (part two)]]></title>
    <url>%2FMatrix-Algebra-for-Engineers-part-two%2F2019%2F03%2F17%2F</url>
    <content type="text"><![CDATA[reference from Matrix Algebra for Engineers by Jeffrey R. Chasnov Vector spaces A vector space consists of a set of vectors and a set of scalars. For the set of vectors and scalars to form a vector space, the set of vectors must be closed under vector addition and scalar multiplication. That is, when you multiply any two vectors in the set by real numbers and add them, the resulting vector must still be in the set. As an example: \[ \begin{pmatrix} \mu_{1} \\ \mu_{2} \\ \mu_{3} \\ \end{pmatrix}, \begin{pmatrix} \nu_{1} \\ \nu_{2} \\ \nu_{3} \\ \end{pmatrix} \] then \[ w = a\mu + b\nu = \begin{pmatrix} a\mu_{1} + b\nu_{1} \\ a\mu_{2} + b\nu_{2} \\ a\mu_{3} + b\nu_{3} \\ \end{pmatrix} \] so that the set of all three-by-one matrices (together with the set of real numbers) is a vector space. This space is usually called . Linear independence The set of vectors, \({u_{1}, u_{2}, . . . , u_{n}}\), are linearly independent if for any scalars \(c_{1}, c_{2}, . . . , c_{n}\), the equation \[c_{1}u_{1}+c_{2}u_{2}+···+c_{n}u_{n} = 0\] has only the solution \(c_{1} = c_{2} = ··· = c_{n} = 0\) Span, basis and dimension Span Given a set of vectors, one can generate a vector space by forming all linear combinations of that set of vectors. The span of the set of vectors \({v_{1}, v_{2}, . . . , v_{n}}\) is the vector space consisting of all linear combinations of \(v_{1}, v_{2}, . . . , v_{n}\). We say that a set of vectors spans a vector space. basis The smallest set of vectors needed to span a vector space forms a basis for that vector space dimension The number of vectors in a basis gives the dimension of the vector space Gram-Schmidt process Given any basis for a vector space, we can use an algorithm called the Gram-Schmidt process to construct an orthonormal basis for that space Let the vectors \(v_{1}, v_{2}, . . . , v_{n}\) be a basis for some n- dimensional vector space. We will assume here that these vectors are column matrices, but this process also applies more generally. We will construct an orthogonal basis \(u_{1}, u_{2}, . . . , u_{n}\), and then normalize each vector to obtain an orthonormal basis. First, define \(u_{1} = v_{1}\), To find the next orthogonal basis vector, define \[ u_{2} = v_{2} - \frac{(u_{1}^{T}v_{2})u_{1}}{u_{1}^{T}u_{1}} \] The next orthogonal vector in the new basis can be found from \[ u_{3} = v_{3} - \frac{(u_{1}^{T}v_{3})u_{1}}{u_{1}^{T}u_{1}} - \frac{(u_{2}^{T}v_{3})u_{2}}{u_{2}^{T}u_{2}} \] We can continue in this fashion to construct n orthogonal basis vectors. These vectors can then be normalized via \[ \hat{u_{1}} = \frac{u_{1}}{(u_{1}^{T}u_{1})^{\frac{1}{2}}} \] Null space The null space of a matrix A, which we denote as Null(A), is the vector space spanned by all column vectors x that satisfy the matrix equation \[Ax = 0\] To find a basis for the null space of a noninvertible matrix, we bring A to reduced row echelon form. \[ A = \begin{pmatrix} -3 &amp; 6 &amp; -1 &amp; 1 &amp; -1 \\ 1 &amp; -2 &amp; 2 &amp; 3 &amp; -1 \\ 2 &amp; -4 &amp; 5 &amp; 8 &amp; -4 \\ \end{pmatrix} \rightarrow A = \begin{pmatrix} 1 &amp; -2 &amp; 0 &amp; -1 &amp; 3 \\ 0 &amp; 0 &amp; 1 &amp; 2 &amp; -2 \\ 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\ \end{pmatrix} \] We call the variables associated with the pivot columns, x1 and x3, basic variables, and the variables associated with the non-pivot columns, x2, x4 and x5, free variables. Writing the basic variables on the left-hand side of the \(Ax = 0\) equations, we have from the first and second rows \[ \begin{align*} x_{1} = 2x_{2} + x_{4} - 3x_{5}, \\ x_{3} = -2x_{4} + 2x_{5}, \\ \end{align*} \] Eliminating x1 and x3, we can write the general solution for vectors in Null(A) as \[ \begin{pmatrix} 2x_{2} + x_{4} - 3x_{5} \\ x_{2} \\ -2x_{4} + 2x_{5} \\ x_{4} \\ x_{5} \\ \end{pmatrix} = x_{2} \begin{pmatrix} 2 \\ 1 \\ 0 \\ 0 \\ 0 \\ \end{pmatrix} + x_{4} \begin{pmatrix} 1 \\ 0 \\ -2 \\ 1 \\ 0 \\ \end{pmatrix} + x_{5} \begin{pmatrix} -3 \\ 0 \\ 2 \\ 0 \\ 1 \\ \end{pmatrix} \] where the free variables \(x_{2}\), \(x_{4}\), and \(x_{5}\) can take any values. By writing the null space in this form, a basis for Null(A) is made evident, and is given by \[ \left\{ \begin{pmatrix} 2 \\ 1 \\ 0 \\ 0 \\ 0 \\ \end{pmatrix}, \begin{pmatrix} 1 \\ 0 \\ -2 \\ 1 \\ 0 \\ \end{pmatrix}, \begin{pmatrix} -3 \\ 0 \\ 2 \\ 0 \\ 1 \\ \end{pmatrix} \right\} \] Application of the null space An underdetermined system of linear equations \(Ax = b\) with more unknowns than equations may not have a unique solution If u is the general form of a vector in the null space of A, and v is any vector that satisfies \(Av = b\), then \(x = u+v\) satisfies \(Ax = A(u+v) = Au+Av = 0+b = b\). The general solution of \(Ax = b\) can therefore be written as the sum of a general vector in Null(A) and a particular vector that satisfies the underdetermined system. As an example, \[ \begin{align*} 2x_{1} + 2x_{2} + x_{3} = 0, \\ 2x_{1} − 2x_{2} − x_{3} = 1, \\ \end{align*} \] We first bring the augmented matrix to reduced row echelon form: \[ \begin{pmatrix} 2 &amp; 2 &amp; 1 &amp; 0 \\ 2 &amp; -2 &amp; -1 &amp; 1 \\ \end{pmatrix} \rightarrow \begin{pmatrix} 1 &amp; 0 &amp; 0 &amp; \frac{1}{4} \\ 0 &amp; 1 &amp; \frac{1}{2} &amp; -\frac{1}{4} \\ \end{pmatrix} \] The null space is determined from \(x_{1} = 0\) and \(x_{2} = −\frac{x_{3}}{2}\), and we can write \[ Null(A) = span \left\{ \begin{pmatrix} 0 \\ -1 \\ 2 \end{pmatrix}\right\} \] The general solution to the original underdetermined linear system is the sum of the null space and the particular solution and is given by \[ \begin{pmatrix} x_{1} \\ x_{2} \\ x_{3} \\ \end{pmatrix} = a \begin{pmatrix} 0 \\ -1 \\ 2 \\ \end{pmatrix} + \frac{1}{4} \begin{pmatrix} 1 \\ -1 \\ 0 \\ \end{pmatrix} \] Column space The column space of a matrix is the vector space spanned by the columns of the matrix. When a matrix is multiplied by a column vector, the resulting vector is in the column space of the matrix, as can be seen from \[ \begin{pmatrix} a &amp; b \\ c &amp; d \\ \end{pmatrix} \begin{pmatrix} x \\ y \\ \end{pmatrix} = \begin{pmatrix} ax + by \\ cx + dy \\ \end{pmatrix} = x \begin{pmatrix} a \\ c \\ \end{pmatrix} + y \begin{pmatrix} b \\ d \\ \end{pmatrix} \] Recall that the dimension of the null space is the number of non-pivot columns—equal to the number of free variables—so that the sum of the dimensions of the null space and the column space is equal to the total number of columns—equal \[dim(Col(A)) + dim(Null(A)) = n.\] Row space, left null space and rank In addition to the column space and the null space, a matrix A has two more vector spaces associated with it, namely the column space and null space of \(A^{T}\), which are called the row space and the left null space. Furthermore, the dimension of the column space of A is also equal to the number of pivot columns, so that the dimensions of the column space and the row space of a matrix are equal. We have \[dim(Col(A)) = dim(Row(A)).\] We call this dimension the rank of the matrix A Orthogonal projections Suppose that V is an n-dimensional vector space and W is a p-dimensional subspace of V. In general, the orthogonal projection of v onto W is given by \[ v_{proj_{W}} = (v^{T}s_{1})s_{1} + (v^{T}s_{2})s_{2} + · · · + (v^{T}s_{p})s_{p}; \] and we can write \[v=v_{proj_{W}} +(v−v_{proj_{W}})\] \(v_{proj_{W}}\) is closer to v than any other vector in W The least-squares problem linear.png These equations constitute a system of n equations in the two unknowns \(\beta_{0}\) and \(\beta_{1}\). The corresponding matrix equation is given by: \[ \begin{pmatrix} 1 &amp; x_{1} \\ 1 &amp; x_{2} \\ \vdots \\ 1 &amp; x_{n} \\ \end{pmatrix} \begin{pmatrix} \beta{0} \\ \beta{1} \\ \end{pmatrix} = \begin{pmatrix} y_{1} \\ y_{2} \\ \vdots \\ y_{n} \end{pmatrix} \] This is an overdetermined system of equations with no solution. The problem of least squares is to find the best solution. We can generalize this problem as follows. Suppose we are given a matrix equation, \(Ax = b\), that has no solution because b is not in the column space of A. So instead we solve \(Ax = b_{projCol(A)}\) , where \(b_{projCol(A)}\) is the projection of b onto the column space of A. The solution is then called the least-squares solution for x. \[b_{projCol(A)} = A(A^{T}A)^{−1}A^{T}b.\] Laplace expansion \[ \begin{vmatrix} a &amp; b &amp; c \\ d &amp; e &amp; f \\ g &amp; h &amp; i \\ \end{vmatrix} = aei+bfg+cdh−ceg−bdi−afh = a(ei− fh)−b(di− fg)+c(dh−eg) \\ \] which can be written suggestively as \[ \begin{vmatrix} a &amp; b &amp; c \\ d &amp; e &amp; f \\ g &amp; h &amp; i \\ \end{vmatrix} = a \begin{vmatrix} e &amp; f \\ h &amp; i \\ \end{vmatrix} - b \begin{vmatrix} d &amp; f \\ g &amp; i \\ \end{vmatrix} + c \begin{vmatrix} d &amp; e \\ g &amp; h \\ \end{vmatrix} \] Properties of a determinant Property 1: The determinant of the identity matrix is one; Property 2: The determinant changes sign under row interchange; Property 3: The determinant is a linear function of the first row, holding all other rows fixed. The eigenvalue problem Let A be a square matrix, x a column vector, and λ a scalar. The eigenvalue problem for A solves \[Ax = \lambda x\] for eigenvalues \(\lambda_{i}\) with corresponding eigenvectors \(x_{i}\). Making use of the identity matrix I, the eigenvalue problem can be rewritten as \[(A−\lambda I)x = 0\] For there to be nonzero eigenvectors, the matrix \((A − \lambda I)\) must be singular, that is, \[det(A−\lambda I) = 0.\] Matrix diagonalization For concreteness, consider a two-by-two matrix A with eigenvalues and eigenvectors given by \[ \lambda_{1}, x_{1} = \begin{pmatrix} x_{11}\\ x_{21}\\ \end{pmatrix} ; \lambda_{2}, x_{2} = \begin{pmatrix} x_{12}\\ x_{22}\\ \end{pmatrix} \] And consider the matrix product and factorization given by \[ A \begin{pmatrix} x_{11} &amp; x_{12} \\ x_{21} &amp; x_{22} \\ \end{pmatrix} = \begin{pmatrix} \lambda_{1}x_{11} &amp; \lambda_{2}x_{12} \\ \lambda_{1}x_{21} &amp; \lambda_{2}x_{22} \\ \end{pmatrix} = \begin{pmatrix} x_{11} &amp; x_{12} \\ x_{21} &amp; x_{22} \\ \end{pmatrix} \begin{pmatrix} \lambda_{1} &amp; 0 \\ 0 &amp; \lambda_{2} \\ \end{pmatrix} \] Generalizing, we define S to be the matrix whose columns are the eigenvectors of A, and Λ to be the diagonal matrix with eigenvalues down the diagonal. Then for any n-by-n matrix with n linearly independent eigenvectors, we have \[AS = SΛ\] where S is an invertible matrix. Multiplying both sides on the right or the left by \(S^{−1}\), we derive the relations \[A = SΛS^{−1} \quad or \quad Λ = S^{−1}AS.\] Powers of a matrix Suppose that A is diagonalizable, and consider \[A^{p} = (SΛS^{−1})(SΛS^{−1}) = SΛ^{p}S^{−1}\] \[ \begin{pmatrix} \lambda_{1} &amp; 0 \\ 0 &amp; \lambda_{2} \\ \end{pmatrix} \begin{pmatrix} \lambda_{1} &amp; 0 \\ 0 &amp; \lambda_{2} \\ \end{pmatrix} = \begin{pmatrix} \lambda_{1}^{2} &amp; 0 \\ 0 &amp; \lambda_{2}^{2} \\ \end{pmatrix} \]]]></content>
      <categories>
        <category>Linear Algebra</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Matrix Algebra for Engineers (part one)]]></title>
    <url>%2FMatrix-Algebra-for-Engineers-part-one%2F2019%2F03%2F17%2F</url>
    <content type="text"><![CDATA[reference from Matrix Algebra for Engineers by Jeffrey R. Chasnov Inner and outer products The inner product (or dot product or scalar product) between two vectors is obtained from the ma- trix product of a row vector times a column vector \[ \mu^{T}\nu = ( \mu_{1} \quad \mu_{2} \quad \mu_{3} ) \begin{pmatrix} \nu_{1} \\ \nu_{2} \\ \nu_{3} \end{pmatrix} = \mu_{1}\nu_{1} + \mu_{2}\nu_{2} + \mu_{3}\nu_{3}. \] If the inner product between two vectors is zero, we say that the vectors are orthogonal. The norm of a vector is defined by \[ \lVert \mu \rVert = (\mu^{T}\mu) = ( \mu_{1}^{2} + \mu_{2}^{2} + \mu_{3}^{2} )^{\frac{1}{2}} \] If the norm of a vector is equal to one, we say that the vector is normalized. If a set of vectors are mutually orthogonal and normalized, we say that these vectors are orthonormal. An outer product is also defined, and is used in some applications. The outer product between u and v is given by \[ \mu\nu^{T} = \begin{pmatrix} \mu_{1} \\ \mu_{2} \\ \mu_{3} \end{pmatrix} ( \nu_{1} \quad \nu_{2} \quad \nu_{3} ) = \begin{pmatrix} \mu_{1}\nu_{1} &amp; \mu_{1}\nu_{2} &amp; \mu_{1}\nu_{3} \\ \mu_{2}\nu_{1} &amp; \mu_{2}\nu_{2} &amp; \mu_{2}\nu_{3} \\ \mu_{3}\nu_{1} &amp; \mu_{3}\nu_{2} &amp; \mu_{3}\nu_{3} \\ \end{pmatrix} \] Inverse matrix Square matrices may have inverses. When a matrix A has an inverse, we say it is invertible and denote its inverse by \(A^{−1}\). The inverse matrix satisfies \[AA^{−1} = A^{−1}A = I.\] \[A^{-1} = \frac{1}{ad-bc} \begin{pmatrix} d &amp; -b \\ -c &amp; a \\ \end{pmatrix} \] \[ det \ A = \begin{vmatrix} a &amp; b \\ c &amp; d \\ \end{vmatrix} = ad - bc \] The determinant of a two-by-two matrix is the product of the diagonals minus the product of the off-diagonals. Evidently, A is invertible only if \(det \quad A \neq 0.\) Notice that the inverse of a two-by-two matrix, in words, is found by switching the diagonal elements of the matrix, negating the off-diagonal elements, and dividing by the determinant. Later, we will show that an n-by-n matrix is invertible if and only if its determinant is nonzero. This will require a more general definition of determinant. Orthogonal matrices A square matrix Q with real entries that satisfies \[Q^{−1} = Q^{T}\] is called an orthogonal matrix. Since the columns of \(Q^{T}\) are just the rows of Q, and \(QQ^{T}\) = I, the row vectors that form Q must be orthonormal. Similarly, since the rows of \(Q^{T}\) are just the columns of Q, and \(Q^{T}Q\) = I, the column vectors that form Q must also be orthonormal. Rotation matrices Rotating.png Writing the equations for \(x&#39;\) and \(y&#39;\) in matrix form, we have \[ \begin{pmatrix} x&#39; \\ y&#39; \\ \end{pmatrix} = \begin{pmatrix} cos\theta &amp; -sin\theta \\ sin\theta &amp; cos\theta \\ \end{pmatrix} = \begin{pmatrix} x \\ y \\ \end{pmatrix} \] The above two-by-two matrix is a rotation matrix and we will denote it by \(R_{θ}\). Observe that the rows and columns of \(R_{θ}\) are orthonormal and that the inverse of \(R_{θ}\) is just its transpose. The inverse of \(R_{θ}\) rotates a vector by −θ. Permutation matrices Another type of orthogonal matrix is a permutation matrix. An n-by-n permutation matrix, when multiplying on the left permutes the rows of a matrix, and when multiplying on the right permutes the columns. Clearly, permuting the rows of a column vector will not change its norm. \[ \begin{pmatrix} 0 &amp; 1 \\ 1 &amp; 0 \\ \end{pmatrix} \begin{pmatrix} a &amp; b \\ c &amp; d \\ \end{pmatrix} = \begin{pmatrix} c &amp; d \\ a &amp; b \\ \end{pmatrix} \] \[ \begin{pmatrix} a &amp; b \\ c &amp; d \\ \end{pmatrix} \begin{pmatrix} 0 &amp; 1 \\ 1 &amp; 0 \\ \end{pmatrix} = \begin{pmatrix} b &amp; a \\ d &amp; c \\ \end{pmatrix} \] Gaussian elimination \[ \begin{align*} −3x_{1} + 2x_{2} − x_{3} = −1 \\ 6x_{1} − 6x_{2} + 7x_{3} = −7, \\ 3x_{1} − 4x_{2} + 4x_{3} = −6, \\ \end{align*} \] which can be written in matrix form as \[ \begin{pmatrix} -3 &amp; 2 &amp; -1 &amp; -1 \\ 6 &amp; -6 &amp; 7 &amp; -7 \\ 3 &amp; -4 &amp; 4 &amp; -6 \\ \end{pmatrix} \] Row reduction is then performed on this augmented matrix. Allowed operations are (1) interchange the order of any rows, (2) multiply any row by a constant, (3) add a multiple of one row to another row. These three operations do not change the solution of the original equations. The goal here is to convert the matrix A into upper-triangular form, and then use this form to quickly solve for the unknowns x. We first form what is called an augmented matrix by combining the matrix A with the column vector b \[ \begin{pmatrix} -3 &amp; 2 &amp; -1 &amp; -1 \\ 0 &amp; -2 &amp; 5 &amp; -9 \\ 0 &amp; -2 &amp; 3 &amp; -7 \\ \end{pmatrix} \] These equations can be solved by back substitution, starting from the last equation and working backwards. We have \[ \begin{align*} &amp; x_{3} = −1, \\ &amp; x_{2} = −\frac{1}{2}(−9−5x_{3})=2, \\ &amp; x_{1} = −\frac{1}{3}(−1+x_{3}−2x_{2})=2. \\ \end{align*} \] We have thus found the solution \[ \begin{pmatrix} x_{1} \\ x_{2} \\ x_{3} \\ \end{pmatrix} = \begin{pmatrix} 2 \\ 2 \\ -1 \\ \end{pmatrix} \] When performing Gaussian elimination, the diagonal element that is used during the elimination procedure is called the pivot Reduced row echelon form If we continue the row elimination procedure so that all the pivots are one, and all the entries above and below the pivots are eliminated, then we say that the resulting matrix is in reduced row echelon form \[ \begin{pmatrix} 1 &amp; 2 &amp; 3 &amp; 4 \\ 4 &amp; 5 &amp; 6 &amp; 7 \\ 6 &amp; 7 &amp; 8 &amp; 9 \\ \end{pmatrix} \\ \] \[ rref(A) = \begin{pmatrix} 1 &amp; 0 &amp; -1 &amp; -2 \\ 0 &amp; 1 &amp; 2 &amp; 3 \\ 0 &amp; 0 &amp; 0 &amp; 0 \\ \end{pmatrix} \] Computing inverses \[(A | E) \rightarrow (E | A^{-1})\] Because: \[\begin{align*} &amp; p_{1}p_{2}p_{3}p_{4}...p_{n}A \rightarrow E \\ &amp; p_{1}p_{2}p_{3}p_{4}...p_{n} = A^{-1} \\ &amp; p_{1}p_{2}p_{3}p_{4}...p_{n}E \rightarrow A^{-1} \\ \end{align*}\] \[ \begin{pmatrix} -3 &amp; -2 &amp; -1 &amp; 1 &amp; 0 &amp; 0 \\ 6 &amp; -6 &amp; 7 &amp; 0 &amp; 1 &amp; 0\\ 3 &amp; -4 &amp; 4 &amp; 0 &amp; 0 &amp; 1 \\ \end{pmatrix}\rightarrow \begin{pmatrix} 1 &amp; 0 &amp; 0 &amp; -\frac{1}{3} &amp; \frac{1}{3} &amp; -\frac{2}{3} \\ 0 &amp; 1 &amp; 0 &amp; \frac{1}{4} &amp; \frac{3}{4} &amp; -\frac{5}{4} \\ 0 &amp; 0 &amp; 1 &amp; \frac{1}{2} &amp; \frac{1}{2} &amp; -\frac{1}{2} \\ \end{pmatrix} \] LU decomposition row reduction of a matrix A can be written as \[M_{3}M_{2}M_{1}A = U\] where U is upper triangular. Upon inverting the elementary matrices, we have \[A = M_{3}^{-1}M_{2}^{-1}M_{1}^{-1}U\] Therefore, \[L = M_{3}^{-1}M_{2}^{-1}M_{1}^{-1}\] Our LU decomposition of A is therefore: \[ \begin{pmatrix} -3 &amp; -2 &amp; -1\\ 6 &amp; -6 &amp; 7\\ 3 &amp; -4 &amp; 4\\ \end{pmatrix} = \begin{pmatrix} 1 &amp; 0 &amp; 0\\ -2 &amp; 1 &amp; 0\\ -1 &amp; 1 &amp; 1\\ \end{pmatrix} \begin{pmatrix} -3 &amp; 2 &amp; -1\\ 0 &amp; -2 &amp; 5\\ 0 &amp; 0 &amp; -2\\ \end{pmatrix} \] Solving (LU)x = b The LU decomposition is useful when one needs to solve Ax = b for many right-hand-sides. With the LU decomposition in hand, one writes \[(LU)x = L(Ux) = b\]]]></content>
      <categories>
        <category>Linear Algebra</category>
      </categories>
      <tags>
        <tag>Course Note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Fluent Python]]></title>
    <url>%2FFluent-Python%2F2019%2F03%2F05%2F</url>
    <content type="text"><![CDATA[字典 ##泛映射类型 Mapping 和 MutableMapping 这两个抽象基类，提供形式化接口 什么是可散列数据？ 原子不可变数据类型（str，bytes 和 number） 在生命周期类，散列值不变的类型。需要有_hash_ 和 _qe_ 方法 元组类型需要元组里每一个值都是可散列类型 12a = ("a","b",("c","d")) #-&gt;hashablea = ("a","b",["c","d"]) #-&gt; not hashable 用户自定义的对象都是可散列的，因为散列值就是id()函数的值。如果自定义对象实现了__eq__方法，并且这个用到了这个对象的内部状态的话，内部状态必须不可变。 字典推导 可以从任何键值对作为作为元素的可迭代对象中推导 123data = [("zhang",23),["li",23],["ding",24],&#123;"huang",24&#125;]data_dict = &#123;name:age for name,age in data&#125;print(data_dict) #-&gt; &#123;'zhang': 23, 'li': 23, 'ding': 24, 24: 'huang'&#125; 常用的映射方法 d.clear() _contains_(k) d.copy() #潜赋值 d._delitem_(k) d.get(k, default) d.items() d._iter_() d.keys() d._len_() d.pop(k) d.popitem() d._reversed_() #仅针对 OrdereDidic d.setdefault(k,[default]) #如果存在键k,将对应的值设置为default,然后返回.如果没有，d[k] = default. d._setitem_(k,v) d.values() ###setdefault 用法 12345my_dict.setdefault(key,[]).append(value) #效率更高if ket not in my_dict: my_dict[key] = []my_dict[key].append(new_value) 映射的弹性查询 defaultdict 12from collections import defaultdicta = defaultdict(list) list可调用对象存储在default_factory中，当a[k]，k不存在时，a._getitem_ 会调用 _miss_ 方法（只会在__getitem__里调用），然后利用default_factory生成返回值。 自己创建继承 dict 类型，然后充血__miss__方法 1234567891011121314151617181920class StrDict(dict): def __missing__(self, key): if isinstance(key, str): return KeyError(key) else: return self[str(key)] def get(self, key, default=None): try: return self[key] except keyError: return default def __contains__(self, key): return key in self.keys() or str(key) in self.keys()if __name__ == '__main__': a = StrDict(&#123;"1": 2&#125;) print(a[1]) k in my_dict.keys() (.items(), .values())这种操作很快，因为返回的是视图，类似集合。 ##字典的变种 - collections.OrderedDict 添加元素时会保持顺序，popitem默认返回最后一个元素，popitem(last=False)默认返回第一个元素 - collections.ChainMap 容纳多个不同的映射对象，在键查找时，会当做整体查找。 1234import builtinsfrom collections import ChainMappylookup = ChainMap(locals(),globals(),vars(builtins))print(pylookup) collections.Counter 给每个键会准备一个计数器 1234567891011from collections import Countera = Counter("aabbccdd")print(a)a.update("aacc")print(a)print(a.most_common(1))#output#Counter(&#123;'a': 2, 'b': 2, 'c': 2, 'd': 2&#125;)#Counter(&#123;'a': 4, 'c': 4, 'b': 2, 'd': 2&#125;)#[('a', 4)] ##子类化 UserDict 含有data属性，是dict实例，是存储数据的地方. 123456789101112131415161718192021222324class StrDict(dict): def __missing__(self, key): if isinstance(key, str): return KeyError(key) else: return self[str(key)] def get(self, key, default=None): try: return self[key] except keyError: return default def __setitem__(self, key,item): self.data[str(key)] = item def __contains__(self, key): return str(key) in self.dataif __name__ == '__main__': a = StrDict(&#123;"1": 2&#125;) print(a[1]) 不可变的映射类型 MappingProxyType 返回动态内存视图，不能靠视图改变原对象，但是原对象的更改可以由视图表现出来 1234567from types import MappingProxyTyped = &#123;1:'A'&#125;d_proxy = MappingProxyType(d)print(d_proxy[1])#d_proxy[2] = 'B' #-&gt;errord[2] = 'B'print(d_proxy) 集合论 set 对象中的元素必须是可散列的，但是 set 对象本身是不可散列的，frozenset是可散列的对象。 合集 - 差集 &amp; 交集 创建空集合要用set(), 如果用{}则是创建空字典 集合推导 1&#123;char(i) for i range(100)&#125; 集合的运算 ###集合的比较运算 ##dict set list效率比较 查找元素，dict 和 set 有强大的散列表做支撑，速度非常快 ##散列表原理 my_dict[key], 现根据 hash(key)， 根据最低几位去散列表里查找表元。如为空，返回 error；若有表元，则表元中存在 foundkey:foundvalue. 若 foundkey == key, 返回 foundvalue。若不等，取 hash(key)的高几位再去找。循环。 ##dict conclusion - 键必须是可散列的 一个可散列的对象必须满足 - _hash_()方法返回的值不变 - _eq_()可做相等判断 - a == b， 则 hash(a) == hash(b) - 字典内存开销巨大 字典使用散列表，散列表是稀疏的。 - 键查询很快 空间换时间 - 添加新键可能会改变已有的顺序 set conclusion 集合元素必须是可散列的 一个可散列的对象必须满足 _hash_()方法返回的值不变 _eq_()可做相等判断 a == b， 则 hash(a) == hash(b) 集合内存开销巨大 字典使用散列表，散列表是稀疏的。 高效判断是否包含 空间换时间 添加新元素可能会改变已有的顺序 序列模型 分类 容器序列 list, tuple, collections.deque 等，存放对象的引用 扁平序列 str, bytes, bytearray, memoryview, array.array 实际是一段连续的内存空间 或者 可变序列 list, bytearray, array.array, collection.deque, memeoryview 不可变序列 tuple, str, bytes. Screen Shot 2018-09-28 at 11.39.07.png ##列表推倒与生成器 列表推倒 不存在变量泄露的问题 可对元素过滤和加工 类似 map/filter 的功能 可计算笛卡尔积 12345678s = 'a'symbols = "abcde"beyond_ascii = [ord(s) for s in symbols if ord(s) &gt; 10]print(s) # s = 'a'colors = ['b','w']sizes = ['S','M','L']tshirts = [(color,size) for color in colors for size in sizes] 生成器表达式 跟列表推倒差不多，把方括号换成圆括号 生成器表达式遵守迭代器协议，可以逐个产出元素，节省内存 1234colors = ['b','w']sizes = ['S','M','L']for tshirt in ((color,size) for color in colors for size in sizes): print(tshirt) 生成器表达式逐个产出元素，内存中不会一次性产出6个 tshirt 的列表 元组 元组与记录 元组其实是没有字段名的记录，元组中的每个元素都存放了记录中一个字段的数据 1city,year,pop,cha,area = ('Tokyo',2003,32450,0.66,8014) 元组拆包 元组拆包可以运用到任何可迭代的对象上，唯一的要求是可迭代对象的元素数量必须与接收这些元素的变量数量一致。 可用*来表示忽略多余的元组 1a,b,*rest = range(5) *运算可以把可迭代对象拆开作为函数的参数 123divmod(20,8) #-&gt;(2,4)t = (20,8)divmod(*t) #-&gt;(2,4) 嵌套拆包 123metro_areas = [('Tokyo','JP',36.933,(35.689,139.691)),('Beijing','CH',36.933,(35.689,139.691))]for name,cc,pop,(lat,long) in metro_areas: print(name) 具名元组 collections.namedtuple 是一个工厂函数,可以用来创建一个带字段名的元组和一个有名字的类,该类的实例所消耗的内存和元组是一样的,因为字段名都被存在对应的类里面。比普通的类消耗的内存要小. - 具名元组具有专有的属性和方法，如_fields类属性，类方法_make(iterable),实例方法_asdict(). 123456from collections import namedtuplePerson = namedtuple('P',['name','sex'])print(Person._fields)iterable = ("zhangruochi","male")me = Person._make(iterable)print(me._asdict()) 作为不可变列表的元组 元组除了没有列表元素的增减方法，支持列表的其他所有方法 切片 切片忽略最后一个元素的好处 - 最后一个元素时, 只有通过最后一个元素直接看出切片区间里有几个元素 - 起始和结束元素都可见时， stop - start 快速计算出区间元素的个数 - 通过一个元素直接把列表分成两段a[:x],a[x:] 对象切片 seq[start:stop:step] -&gt; seq._getitem_(slice(start,stop,end)) 因此可以自定义切片对象: 123my_slice = slice(1,2)seq = range(10)sub_seq = seq[my_slice] 多维切片 内置的序列类型只支持一维的索引，外部库 numpy 之类的可以支持二维索引 12a[i,j]a[:,i:j] 切片赋值 把切片放在负值语句的左边，就可以对切片进行操作 123l = list(range(10))l[2:5] = [20,30]del l[5:7] 对序列对象使用+和* +和*都遵守不修改原对象，而构建新对象的规律 注意： 用[[]]*3来初始化由列表组成的列表，但是列表里其实包含的是3个对同意对象的引用 12345678a = [["_"]*3]*3a[1][2] = "x"print(a) #-&gt; [['_', '_', 'x'], ['_', '_', 'x'], ['_', '_', 'x']]#正确写法a = [["_"]*3 for i in range(3)]a[1][2] = "x"print(a) #-&gt; [['_', '_', '_'], ['_', '_', 'x'], ['_', '_', '_']] 序列的增量赋值 += 背后的特殊方法是_iadd_(就地加发)， 但是如果这个类没有实现__iadd__时，Python解释器会退而使用_add_ - 对于可变序列a, a+=b 等同于 a.extend(b) - 对于不可变序列a, a+=b 等同于 a = a+b 对不可变对象进行重复拼接操作会导致效率低下，因为每次都有新对象生成，还要复制元素到新对象 一个 += 的谜题 12t = (&quot;a&quot;,&quot;b&quot;,[&quot;c&quot;])t[2] += [&quot;d&quot;] 既抛出异常又修改了t 教训： - 不要把可变对象放在不可变对象里面 - 增量赋值不是原子操作 序列对象的排序 就地排序和负值排序 list.sort()就地排序 sorted(list) 会赋值一份新的序列对像 Python排序算法Timsort的时间复杂度为nlog(n) 参数 reverse, 如设定为True, 被排序的对象会以降序输出 key, 以函数为参数，这个函数会应用在每个元素上 1sorted(list,key = len, reverse = True) 利用bisect 管理已排序的序列 bisect 利用二分查找插入元素的位置 insort 利用 bisect 查找位置然后插入元素 123456789101112from bisect import *a = [1,2,3,4,5,6,7]#bisect = bisect_leftindex_left = bisect_left(a,3)index_right = bisect_right(a,3.0)print(index_left,index_right) #-&gt; 2 3#insort = insort_leftinsort_left(a,3)insort_right(a,3.0)print(a) #-&gt;[1, 2, 3, 3, 3.0, 4, 5, 6, 7] list的可替换对象 array.array Python数组跟 C 语言数组一样精简, 如果我们需要一个只包含数字的列表,用 array.array会比list 效率更高，且array支持所有可变序列的操作. array.array需要类型码作为参数来表示底层的 C 语言需要存放怎样的数据. 如'b'表示有符号的字符. 数组还提供更多的读取文件和存入文件的方法 12345from array import arrayfrom random import randomfloats = array('d',(random() for i in range(10**7)))print(floats[-1])floats.tofile("floats.bin","wb") pickle.dump 也可以快速序列化数字类型，速度与 array.tofile()几乎一样快, pickle 还支持其他的数据类型 但是从Python3.4开始, 数组不再支持就地排序, 如果排序需要新建数组 a = array(a.typecode,sorted(array)) 内存视图 memoryview 能够让你在不复制内存的条件下,在数据结构之间共享内存 123456789101112131415161718192021222324252627import timefor n in (100000, 200000, 300000, 400000): data = 'x'*n start = time.time() b = data while b: b = b[1:] print 'bytes', n, time.time()-startfor n in (100000, 200000, 300000, 400000): data = 'x'*n start = time.time() b = memoryview(data) while b: b = b[1:] print 'memoryview', n, time.time()-start """outputbytes 100000 0.240149021149bytes 200000 1.04921603203bytes 300000 2.66688489914bytes 400000 4.83206987381memoryview 100000 0.011647939682memoryview 200000 0.0258820056915memoryview 300000 0.0385529994965memoryview 400000 0.0550448894501""" memoryview.cast 可以利用不同的方式读写同一块内存 12345678910import arraynumbers = array.array("h",[-2,-1,0,1,2])memv = memoryview(numbers)print(memv[0]) #-&gt; -2memv_oct = memv.cast('B')print(memv_oct.tolist()) #-&gt; [254, 255, 255, 255, 0, 0, 1, 0, 2, 0memv_oct[4] = 1print(numbers) #-&gt; array('h', [-2, -1, 1, 1, 2])print(array.array('H', [1]).tostring()) #-&gt; b'\x01\x00' python使用大端法，取高字节数据存放在低地址 计算机存储的大端法和小端法 &gt; 在计算机内存中，通常是以字节（Byte），也就是 8 个位（Bit）为基本存储单元（也有以 16 位为基本存储单元的）。对于跨越多个字节的数据类型（比如 int 长 4 个字节），如何在内存中对这些字节进行排序有两种常见的方法：大端法（Big-endian）和小端法（Little-endian）。 不管是大端法还是小端法存储，计算机在内存中存放数据的顺序都是从低地址到高地址，所不同的是首先取低字节的数据存放在低地址还是取高字节数据存放在低地址。 若首先取高字节的数据存放在低地址，则是大端法； 若首先取低字节的数据存放在低地址，则是小端法。 双向队列和其他形式的队列 collections.deque 利用 append 和 pop(0) 的方法, 我们可以把 list 当做 stack 来使用. 但是 pop(0) 的时间复杂度为n，效率低下. collections.deque类是一个线程安全，可以快速从两段添加或者删除元素的数据类型. 对stackd的模拟 123456789from collections import dequearray = deque(range(10),maxlen = 10)array.rotate(3)print(array) #-&gt; deque([7, 8, 9, 0, 1, 2, 3, 4, 5, 6], maxlen=10)array.append(-1) #-&gt; deque([8, 9, 0, 1, 2, 3, 4, 5, 6, -1], maxlen=10)print(array)array.popleft() #-&gt; deque([9, 0, 1, 2, 3, 4, 5, 6, -1], maxlen=10)print(array) queue 提供了同步(线程安全)类 Queue, LifoQueue 和 PriorityQueue, 不同线程可以利用这些数据来交换信息。具有 maxsize参数，超出容量时queue会被锁住. heapq 让用户可以把可变序列当做堆队列或者优先队列使用. 函数 一等对象 编程语言里一等对象的定义: 1. 运行时创建 2. 能赋值给变量或数据结构中的元素 3. 能作为参数传递 4. 能作为函数返回值 123456789101112def factorial(n): '''return n!''' return 1 if n&lt;2 else n * factorial(n-1)print(factorial.__doc__) # -&gt; return n!print(type(factorial)) # -&gt; &lt;class 'function'&gt;fact = factorialprint(fact(5)) #-&gt; 120print(list(map(fact,[1,2,3]))) #-&gt; [1, 2, 6] 高阶函数 介绍函数为参数，或者把函数作为返回结果的函数就是高阶函数 123456789fruits = ["apple","pear","cherry","fig"]# 长度排序print(sorted(fruits,key = len)) #-&gt; ['fig', 'pear', 'apple', 'cherry']# 逆序def reverse(word): return word[::-1]print(sorted(fruits,key = reverse)) #-&gt; ['apple', 'fig', 'pear', 'cherry'] map,filter,reduce 极其替代品 列表推导式比map与filter连用更清晰易懂 12print(list(map(fact,filter(lambda x : x%2, range(6))))) # -&gt; [1, 6, 120]print([fact(i) for i in range(6) if i % 2]) # -&gt; [1, 6, 120] sum 比 reduce(add,[]) 更易懂 any,all也是内置的规约函数 12print(all([True,True,False])) # -&gt; Falseprint(any([True,False,True])) # -&gt; True lambda 表达式 在 Python内创建匿名函数 12fruits = ["apple","pear","cherry","fig"]print(sorted(fruits,key = lambda word: word[::-1])) 七种可调用对象 自定义可调用对象 12345678910111213141516import randomclass CallableTest: def __init__(self,items): self.items = list(items) def pick(self,n): random.shuffle(self.items) return self.items[0:n] def __call__(self,n): return self.pick(n)test = CallableTest([1,2,3])print(test(2)) # -&gt; [1,3] 函数内省 函数有而自定义对象没有的属性 ['annotations', 'call', 'closure', 'code', 'defaults', 'get', 'globals', 'kwdefaults', 'name', 'qualname'] 12345class C: passobj = C() print(sorted(set(dir(fact)) - set(dir(obj)))) 参数传递 1234567891011def parameters(name,*content, cls = "first_name", **attr): print(name) # -&gt; 1 print(content) # -&gt; (2, 3, 4) print(cls) # -&gt; zhang print(attr) # -&gt; &#123;'face': 'handsome', 'built': 'awesome'&#125;parameters(1,2,3,4,cls = "zhang", face = "handsome",built = "awesome") print(parameters.__defaults__) # -&gt; Noneprint(parameters.__kwdefaults__) # -&gt; &#123;'cls': 'first_name'&#125;print(parameters.__annotations__) # -&gt; &#123;'return': 'test parameters'&#125;print(parameters.__doc__) # -&gt; just for testing parameters 函数式编程 operator 模块 和 functools 模块 reduce itemgetter 从序列或者对象中读取元素或者属性 methodcaller 自行函数，然后再调用对象上使用参数指定的方法(可以冻结参数) 1234from operator import methodcallersplit_and_replace = methodcaller('replace',' ','_')name = "ZHAN RUO CHI"print(split_and_replace(name)) # -&gt; ZHAN_RUO_CHI partial 创建一个新的可调用对象，冻结原有对象的某些参数 1234from operator import mulfrom functools import partialtriple = partial(mul,3)print(triple(7)) #-&gt; 21 数据模型 python 解释器在碰到特殊的句法时，会使用特殊方法去激活一些基本的对象操作。例如 len(x) 在调用时，如果 x 是内置对象，速度回非常快，因为 CPthon 会直接从一个 C 结构体里读取对象的长度。如果 x 不是内置对象，len(x) 会读取对象内部的__len__方法。这种处理方法在保持内置类型的效率和语言一致性之间找到平衡点。 不能让特例特殊到开始破快既定规则 --zon of python 12345678910111213141516171819202122232425262728293031323334import collectionsCard = collections.namedtuple("Card",["rank","suit"])class FrenchDeck: ranks = [str(n) for n in range(2,11)] + list("JQKA") suits = "spades diamonds clubs hearts".split() def __init__(self): self.__cards = [Card(rank,suit) for suit in FrenchDeck.suits for rank in FrenchDeck.ranks] def __len__(self): return len(self.__cards) def __getitem__(self,index): return self.__cards[index]if __name__ == '__main__': deck = FrenchDeck() # 可以使用 len() 函数查看一共多少张纸牌 print(len(deck)) # 可以使用索引和切片 print(deck[-1]) print(deck[1:3]) # 可以随机抽取纸牌 from random import choice print(choice(deck)) # 支持迭代 for card in deck: print(card) 两个好处 - 类的用户不用再去记标准操作的名称 - 更加方便的利用 python 标准库 1234567891011121314151617181920212223242526272829303132from math import hypotclass Vector: def __init__(self,x,y): self.x = x self.y = y def __repr__(self): return 'Vector(&#123;&#125;,&#123;&#125;)'.format(self.x,self.y) def __abs__(self): return hypot(self.x,self.y) def __bool__(self): return bool(abs(self)) #return bool(self.x or self.y) def __add__(self,other): x = self.x + other.x y = self.y + other.y return Vector(x,y) def __mul__(self,scalar): return Vector(self.x*scalar, self.y*scalar)if __name__ == '__main__': print(Vector(3,4)) print(abs(Vector(3,4))) _reper_ 反对对象的字符串表示，__str__只有在调用 str()或者print()时才会调用，_repr_ 是更好的选择，因为如果一个对象没有__str__函数，python 又需要调用它时，解释器会调用 _repr_ 作为替代. 任何对象都可以用于需要布尔值的上下文中，为了判定一个值 x 的真假，Python 会调用bool(x), 其背后是调用 x._bool_()的结果;如果不存在该方法，那么 bool(x)会尝试调用 x._len_()。 若返回0，则 bool 会返回 False，否则返回 True。 12if([]) #Falseif(0) #false 文本和字节序列 字符的问题 Python3中，str 对象中获取的元素是 unicode 字符 unicode 标准把字符做了如下区分 - 字符的标识，在 unicode 标准中以4~6个十六进制的数字，然后加前缀 U+. 如A的码位是U+0041 - 字符的具体表述取决于所用的编码. - 编码是在码位与字节序列之间的转换. 如 A 在 UTF8中编码成单个字节41 二进制序列类型 分为不可变 bytes 类型和 bytearray 类型 - bytes对象可以从str 对象使用给定的编码构建 1cafe = bytes('cafe',encoding="utf8") 字节序列的切片还是字节序列 my_bytes[0] 是整数 my_bytes[:1] 是字节序列 二进制序列其实是整数序列，但是它们各个字节的值可能会用如下三种表示法 可打印 ASCII 范围内的字节使用ASCII字符本身 制表符,换行符,回车符和... 其他字节的值，使用使用十六进制转义序列 如 b'caf39' 前三个字节b'caf'在可打印的 ASCII 范围内，后两个字节则不然. 1234import arraynumbers = array.array('h',[-2,-1,0,1,2])octets = bytes(numbers)print(octets) ##编码中遇到的问题 12345my_str = "Português"print(my_str.encode("utf8"))# print(my_str.encode("ascii")) #-&gt; 报错print(my_str.encode("ascii",errors='ignore')) #-&gt; b'Portugus'print(my_str.encode("ascii",errors='replace')) #-&gt; b'Portugu?s' ##处理文本文件 ### 最佳方式，unicode 三明治 - 尽早把输入(比如读取文件时)的字节序列转化为字符串 - 只操作字符串 - 尽量晚地把字符串转化为字节序列 12345my_str = "Português"open("cafe.txt",'w',encoding='utf8').write(my_str)print(open("cafe.txt").read()) #-&gt;报错print(open("cafe.txt",encoding = "utf8").read()) #-&gt; 正确print(open("cafe.txt",'rb').read()) #-&gt; b'Portugu\xc3\xaas', 以二进制方式读取文件，没有问题 ##为了正确比较而规范化字符串 unicode有组合字符(变音符号和附加到前一个字符上的记号，打印时作为一个整体),所以字符串比较起来很复杂。 1234567#已解决该问题？my_str1 = "Portugués"my_str2 = "Portugue\u0301s"print(my_str1)print(my_str2)print(my_str1 == my_str2) #-&gt; Trueprint(len(my_str1) == len(my_str2)) #-&gt; True 去掉所有重音符号 - NFD 拆解组合字符为基字符和单独的组合字符 - NFC 使用最小的码位构成组合字符串 12345from unicodedata import normalizefrom unicodedata import combiningmy_str = &quot;Portugués&quot;new_str = &quot;&quot;.join(c for c in normalize(&quot;NFD&quot;,my_str) if not combining(c))print(new_str) 生成器与迭代器 可迭代的原因 实现了__iter__函数 内置的 iter 函数有以下作用 检查对象是否实现__iter__函数，如果实现，返回迭代器 没有实现可迭代对象，如果现实__getitem__方法，python 返回一个迭代器，尝试从索引0开始迭代 尝试失败，跑出 TypeError 异常 12345678910111213s = "zhangruochi"for chr in s: print(chr) print("-------")it = iter(s)while True: try: print(next(it)) except: del it break 迭代器与可迭代对象之间的关系 可迭代对象实现__iter__方法，返回一个迭代器实例 迭代器实现_iter_ 方法，返回自己，为了通过 issubclass(iterator,abc.Iterator) 测试 迭代器还要实现__next__方法，每次返回一个元素 可迭代对象一定不能是自身的迭代器，也就是不能包含_next_ 方法 生成器函数 12345678910111213141516171819import reRE_WORD = re.compile("\w+")class Sentence: def __init__(self, text): self.text = text self.words = RE_WORD.findall(text) def __iter__(self): for word in self.words: yield words = "zhang ruo chi"sentence = Sentence(s)for word in sentence: print(word) 生成器对象也是迭代器，利用iter方法返回一个生成器对象，可以不用再单独定义迭代器 包含yield关键词的函数是生成器函数，调用生成器函数时，会返回一个生成器对象，也就是说，生成器函数是生成器工厂 把生成器传递给 next()函数时，生成器会向前运行，遇到 yield 关键词会停止并返回产出的值 静态类和静态方法 example 123456789101112131415161718192021class Date(object): def __init__(self, day=0, month=0, year=0): self.day = day self.month = month self.year = year @classmethod def from_string(cls, date_as_string): day, month, year = map(int, date_as_string.split('-')) date1 = cls(day, month, year) return date1 @staticmethod def is_date_valid(date_as_string): day, month, year = map(int, date_as_string.split('-')) return day &lt;= 31 and month &lt;= 12 and year &lt;= 3999 if __name__ == 'main': date2 = Date.from_string('11-09-2012') is_date = Date.is_date_valid('11-09-2012') class method 我们在一个方法中实现了功能，因此它是可重用的。 这里的封装处理的不错（如果你发现还可以在代码的任意地方添加一个不属于 Date 的函数来实现类似的功能，那很显然上面的办法更符合 OOP 规范）。 cls 是一个保存了 class 的对象（所有的一切都是对象）。 更妙的是， Date 类的衍生类都会具有 from_string 这个有用的方法。 static method 从静态方法的使用中可以看出，我们不会访问到 class 本身 – 它基本上只是一个函数，在语法上就像一个方法一样，但是没有访问对象和它的内部（字段和其他方法），相反 classmethod 会访问 cls， instancemethod 会访问 self。]]></content>
      <categories>
        <category>Programming Language</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Book Note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Bigtable: A Distributed Storage System for Structured Data]]></title>
    <url>%2FBigtable-A-Distributed-Storage-System-for-Structured-Data%2F2019%2F02%2F28%2F</url>
    <content type="text"><![CDATA[Abstract Bigtable is a distributed storage system for managing structured data that is designed to scale to a very large size Data Model A Bigtable is a sparse, distributed, persistent multi- dimensional sorted map. The map is indexed by a row key, column key, and a timestamp; each value in the map is an uninterpreted array of bytes. (row:string, column:string, time:int64) → string Rows The row keys in a table are arbitrary strings Every read or write of data under a single row key is atomic makes it easier for concurrent updates to the same row. The row range for a table is dynamically partitioned. Each row range is called a tablet, which is the unit of dis- tribution and load balancing Column Families Column keys are grouped into sets called column fami- lies, which form the basic unit of access control All data stored in a column family is usually of the same type A column family must be created before data can be stored under any column key in that family; after a family has been created, any column key within the family can be used Timestamps Each cell in a Bigtable can contain multiple versions of the same data; these versions are indexed by timestamp API The Bigtable API provides functions for creating and deleting tables and column families. It also provides functions for changing cluster, table, and column family metadata, such as access control rights. Bigtable can be used with MapReduce, a framework for running large-scale parallel computations de- veloped at Google. We have written a set of wrappers that allow a Bigtable to be used both as an input source and as an output target for MapReduce jobs. Building Blocks Bigtable is built on several other pieces of Google infrastructure. Bigtable uses the distributed Google File System (GFS) to store log and data files. A Bigtable cluster typically operates in a shared pool of machines that run a wide variety of other distributed applications, and Bigtable processes often share the same machines with processes from other applications. Bigtable de- pends on a cluster management system for scheduling jobs, managing resources on shared machines, dealing with machine failures, and monitoring machine status. The Google SSTable file format is used internally to store Bigtable data Bigtable relies on a highly-available and persistent distributed lock service called Chubby Implementation The Bigtable implementation has three major compo- nents: - a library that is linked into every client - one master server - many tablet servers A Bigtable cluster stores a number of tables. Each table consists of a set of tablets, and each tablet contains all data associated with a row range. Initially, each table consists of just one tablet. As a table grows, it is auto- matically split into multiple tablets, each approximately 100-200 MB in size by default. Tablet Location We use a three-level hierarchy analogous to that of a B+- tree to store tablet location information Tablet Assignment Each tablet is assigned to one tablet server at a time - The master keeps track of the set of live tablet servers - Bigtable uses Chubby to keep track of tablet servers - The master is responsible for detecting when a tablet server is no longer serving its tablets, and for reassigning those tablets as soon as possible - When a master is started by the cluster management system, it needs to discover the current tablet assign- ments before it can change them Tablet Serving Updates are committed to a commit log that stores redo records the recently committed ones are stored in memory in a sorted buffer called a memtable the older updates are stored in a sequence of SSTables To recover a tablet, a tablet server reads its metadata from the METADATA table. This meta- data contains the list of SSTables that comprise a tablet and a set of a redo points, which are pointers into any commit logs that may contain data for the tablet Refinements Locality groups Clients can group multiple column families together into a locality group Compression Clients can control whether or not the SSTables for a locality group are compressed, and if so, which compression format is used Caching for read performance To improve read performance, tablet servers use two levels of caching. The Scan Cache is a higher-level cache that caches the key-value pairs returned by the SSTable interface to the tablet server code. The Block Cache is a lower-level cache that caches SSTables blocks that were read from GFS Bloom filters a read operation has to read from all SSTables that make up the state of a tablet Commit-log implementation we append mutations to a single commit log per tablet server, co-mingling mutations for different tablets in the same physical log file Speeding up tablet recovery If the master moves a tablet from one tablet server to another, the source tablet server first does a minor compaction on that tablet Exploiting immutability Besides the SSTable caches, various other parts of the Bigtable system have been simplified by the fact that all of the SSTables that we generate are immutable Lesson large distributed sys- tems are vulnerable to many types of failures, not just the standard network partitions and fail-stop failures as- sumed in many distributed protocols it is important to delay adding new features until it is clear how the new features will be used the importance of proper system-level monitoring The most important lesson we learned is the value of simple designs]]></content>
      <categories>
        <category>Paper Note</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[AI for Everyone]]></title>
    <url>%2FAI-for-Everyone%2F2019%2F02%2F28%2F</url>
    <content type="text"><![CDATA[Thanks Andrew Ng for providing the amazing course. Reference From Ai for Everyone Here is my course certificate:]]></content>
      <categories>
        <category>Artificial Intelligence</category>
      </categories>
      <tags>
        <tag>Course Note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[What is P-Value?]]></title>
    <url>%2FWhat-is-P-Value%2F2019%2F02%2F24%2F</url>
    <content type="text"><![CDATA[Why it is so successful in science? In some sense it offers a first line of defense against being fooled by randomness, separating signal from noise. Definition p-values tell you how surprising the data is, assuming there is no effect. formal definition: A p-value is the probability of getting the observed or more extreme data, assuming the null hypothesis is true. 在假设原假设（H0）正确时，出现观察到的现状或更差的情况的概率 Example Does driving while calling increase the risk of a car accident? 设计实验，一组司机开车打电话，一组司机开车不打电话，然后对比发生事故的概率。 The difference is never exactly zero. A difference of e.g., 0.11 means: Probably just random noise. Probably a real difference Null hypthesis 假设零假设为真，即符合中心为0的正态分布。 Assuming null hypthesis is true， means most of the data will fall between these two critical values. Important notes A p-value is the probability of the data, not the probability of a theory. You can’t get the probability the null hypothesis is true, given the data, from a p-value. \[P(D*|H) ≠ P(H|D)\] A single p-value is not enough to declare a scientific discovery; only when we can repeatedly observe something, we can consider it a reliable observation. How to use pValue correctly? Use p-values as a rule to guide behavior in the long run. 不能说，因为\(p &lt; x\),所以理论正确。应该说，因为\(p &lt; x\),所以结果符合预期。 Hwo to calculate pValue? 以抛硬币实验为例完成假设检验 - 假设：硬币是公平的 - 检验：认为假设是成立的，然后扔十次，看结果与假设是否相符 反复扔硬币符合二项分布），也就是： \[X\sim B(n,\mu)\] 其中， n代表扔硬币的次数，\(\mu\)代表“花”朝上的概率。 在我们认为硬币是公平的前提下，扔1000次硬币应该符合以下分布： \[X\sim B(1000, 0.5)\] Screen Shot 2018-09-23 at 14.19.13.png 若1000次抛硬币实验结果为正面朝上530次，则pVlue取530以及更极端的点组成组成区间。 什么是显著水平\(\alpha\)? 抛一千次硬币，我们认为出现530次正面之后，硬币是不公平的，还是出现580次正面之后，硬币是不公平的，这是一个主观标准。 我们一般认为: \[\text {p-value}\leq 0.05\] 就可以认为假设是不正确的。 表示出来如下图所示: 我们可以认为刚开始的假设错的很“显著”，也就是“硬币是不公平的”。]]></content>
      <categories>
        <category>Statistics</category>
      </categories>
      <tags>
        <tag>Concept</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Understanding Logistic Regression]]></title>
    <url>%2FUnderstanding-Logistic-Regression%2F2019%2F02%2F24%2F</url>
    <content type="text"><![CDATA[逻辑回归的输出是什么？ \[h_{\theta} = P(y = 1| x;\theta)\] 也就是给定x和在参数theta下，y=1(default)的概率 逻辑回归的输入是什么？ \[ y_{\theta} = \beta_{0} + \beta_{1}x_{1} + \beta_{2}x_{2} .... \] 也就是线性回归 所以Logistic Regression的决策边界是线性回归 逻辑回归的本质还是线性回归，也会看到有一些文章说在特征到结果的映射中多加了一层函数映射 我们用什么把输入与输出联系起来？ Logit function: \[Logit(p) = ln(odds) = ln(\frac{p}{1-p})\] logit 定义域为[0,1], 值域为R. 将上述方程取反函数，得到sigmoid函数，定义域为R, y为P, 值域为[0,1]. \[Sigmoid(\alpha) = logit^{-1}(\alpha) = \frac{1}{1+e^{-\alpha}}\] sigmoid Maximum likelihood estimation 来估计参数theta的值 \[L(\theta) = \prod_{i:y_{i}=1}p(x_{i})\prod_{i^{\prime}:y_{i^{\prime}}=0}(1-p(x_{i^{\prime}}))\] Get coefficients that maximizes the likelihood, then use them for predictions Maximizing the likelihood function is equivalent to minimizing the cost function \(J(\theta)\) \[J(\theta) = - \sum_{i=1}^{n}[y_{i}log(P(y_{i} = 1 | x)) + (1 - y_{i})log(1 - P(y_{i}=1|x))]\]]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Machine Learning Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[INFSCI 2595:Machine Learning(part one)]]></title>
    <url>%2FINFSCI-2595-Machine-Learning-part-one%2F2019%2F02%2F23%2F</url>
    <content type="text"><![CDATA[Reference from some lecture slides of INFSCI 2595 lectured by Dr. Mai Abdelhakim Introduction What is Machine Learning? Subfield of artificial intelligence Field of study that gives computers the ability to learn without being explicitly programmed How can we build computer system that learn and improve with experience? Statistics make conclusions from data, and estimate reliability of conclusions Optimization and computing power to solve problems Machine learns with respect to a particular task T, performance metric P and experience E, if the performance P on task T improves with experience E. Why Machine Learning is Important Provide solution to complex problems that cannot be easily programmed Can adapt to new data Helps us to understand complicated phenomena Can outperform human performance Machine Learning Algorithms Supervised Learning Learn using labeled data (correct answers are given in learning phase) make predictions of previously unseen data Two types of problems Regression: Target values (Y) are continuous/quantitative Classification: Target values (Y) are discrete/finite/qualitative Unsupervised Learning Clustering analysis Finding groups of similar users Detecting abnormal patterns Machine Learning Models and Trade-offs Why do we need a model? Why estimate f? Predictions: Make predictions for new inputs/features Inference: understand the way Y is affected by each features Which feature has stronger impact on the response? Is relation positive or negative Is the relationship linear or more complicated How to estimate f? Parametric Approach First,assume function form Second, use training to fit the model Non-Parametric Approach No explicit form of function f is assumed Seek to estimate f as close as possible to the data points Trade-off: Model Flexibility vs Model Interpretability interpretability Model Accuracy In regression setting, a common measure is mean squared error(MSE) \[MSE = \frac{1}{n}\sum_{i=1}^{n}(y_{i} - \hat{f(x_{i})})^{2}\] Overfitting and Underfitting Two thing we need to avoid: - Overfitting: Building a model that is too complex, fits training data very well, but fail to generalize to new data (e.g. large test MSE) - Underfitting: build simple model that is unable to capture variability in data Simple models may not capture the variability in the data Complex models may not generalize Bias-Variance Tradeoff \[E(y_{0} - \hat{f(x_{0})})^2 = Var(\hat{f(x_{0})}) + [Bias(\hat{f(x_{0})})]^{2} + Var(\epsilon)\] Variance: amount by which \(\hat{f}\) changes if we made the estimation by different training set Bias: Errors from approximating real-life problems by a simpler model Classification Setting \(\hat{y_{0}} = \hat{f(x_{0})}\) is the predicted output class Test error rate: \[Average(I(y_{0} \neq \hat{y_{0}}))\] Bayes classifier Bayes classifier assigns each observation to the most likely class given the feature values. Assign \(x_{0}\) to class ! that has largest \(Pr(Y= j|X = x_{0})\) K-Nearest Neighbors Define a positive integer K For each test observation \(x_{0}\) , identify K points in the training data that are closest to \(x_{0}\) referred to as \(N_{0}\) Estimate the conditional probability for class j as fraction of points in \(N_{0}\) whose response values equal to j \[Pr(Y = j | X = x_{0}) = \frac{1}{k}\sum_{i \in N_{0}}I(y_{i} == j)\] knn]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Course Note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[An overview of gradient descent optimization algorithms]]></title>
    <url>%2FAn-overview-of-gradient-descent-optimization-algorithms%2F2019%2F02%2F23%2F</url>
    <content type="text"><![CDATA[Reference from An overview of gradient descent optimization algorithms Batch gradient descent \[\theta = \theta - \eta * \triangledown_{\theta}J(\theta)\] 123for i in range(nb_epochs): params_grad = evaluate_gradient(loss_function, data, params) params = params - learning_rate * params_grad Batch gradient descent is guaranteed to converge to the global minimum for convex error surfaces and to a local minimum for non-convex surfaces. Stochastic gradient descent \[\theta = \theta - \eta * \triangledown_{\theta}J(\theta; x^{i};y^{i})\] 12345for i in range(nb_epochs): np.random.shuffle(data) for example in data: params_grad = evaluate_gradient(loss_function, example, params) params = params - learning_rate * params_grad SGD performs frequent updates with a high variance that cause the objective function to fluctuate heavily as in Image 1. SGD shows the same convergence behaviour as batch gradient descent, almost certainly converging to a local or the global minimum for non-convex and convex optimization respectively. Mini-batch gradient descent \[\theta = \theta - \eta * \triangledown_{\theta}J(\theta; x^{i:i+n};y^{i:i+n})\] 12345for i in range(nb_epochs): np.random.shuffle(data) for batch in get_batches(data, batch_size=50): params_grad = evaluate_gradient(loss_function, batch, params) params = params - learning_rate * params_grad Common mini-batch sizes range between 50 and 256, but can vary for different applications Mini-batch gradient descent is typically the algorithm of choice when training a neural network and the term SGD usually is employed also when mini-batches are used Challenges Choosing a proper learning rate can be difficult the same learning rate applies to all parameter updates Learning rate schedules ry to adjust the learning rate during training by e.g. annealing reducing the learning rate according to a pre-defined schedule or when the change in objective between epochs falls below a threshold Another key challenge of minimizing highly non-convex error functions common for neural networks is avoiding getting trapped in their numerous suboptimal local minima Momentum Momentum is a method that helps accelerate SGD in the relevant direction and dampens oscillations as can be seen in Image 3. It does this by adding a fraction of the update vector of the past time step to the current update vector: \[\begin{align*} &amp; v_{t} = \gamma v_{t-1} + \eta * \triangledown_{\theta}J(\theta) \\ &amp; \theta = \theta - v_{t}\\ \end{align*}\] The momentum term \(\gamma\) is usually set to 0.9 or a similar value. The ball accumulates momentum as it rolls downhill, becoming faster and faster on the way Nesterov accelerated gradient \[\begin{align*} &amp; v_{t} = \gamma v_{t-1} + \eta * \triangledown_{\theta}J(\theta - \gamma * m) \\ &amp; \theta = \theta - v_{t}\\ \end{align*}\] 既然参数要沿着 \(\theta - \gamma * m\)更新，那就先先计算未来位置的梯度 This anticipatory update prevents us from going too fast and results in increased responsiveness, which has significantly increased the performance of RNNs on a number of tasks Adagrad \[\begin{align*} &amp; s = s + \triangledown J(\theta) \bigodot \triangledown J(\theta) \\ &amp; \theta = \theta - \frac{\eta}{\sqrt{s + \epsilon}} \bigodot \triangledown J(\theta) \\ \end{align*}\] One of Adagrad's main benefits is that it eliminates the need to manually tune the learning rate Adagrad modifies the general learning rate \(\gamma\) at each time step t for every parameter \(\theta_{i}\) based on the past gradients that have been computed for \(\theta_{i}\) RMSprop \[\begin{align*} &amp; v_{t} = \gamma v_{t-1} + (1-\gamma) * \triangledown J(\theta) \bigodot \triangledown J(\theta) \\ &amp; \theta = \theta - v_{t} \\ \end{align*}\] 1tf.train.RMSPropOptimizer(learning_rate=learning_rate, momentum=0.9, decay=0.9, epsilon=1e-10) 加入Momentum，主要是解决学习速率过快衰减的问题 RMSprop as well divides the learning rate by an exponentially decaying average of squared gradients. Hinton suggests \(\gamma\) to be set to 0.9, while a good default value for the learning rate \(\eta\) is 0.001. Adaptive moment estimation (Adam) \[\begin{align*} &amp; m = \beta_{1} * m + (1-\beta_{1}) * \triangledown J(\theta) \\ &amp; s = \beta_{2} * s + (1-\beta_{2}) * \triangledown J(\theta) \bigodot \triangledown J(\theta) \\ &amp; m = \frac{m}{1-\beta^{t}_{1}} \\ &amp; s = \frac{s}{1-\beta^{t}_{2}} \\ &amp; \theta = \theta - \frac{\eta}{\sqrt{s + \epsilon}} \bigodot m \end{align*}\] 其结合了Momentum和RMSprop算法的思想。相比Momentum算法，其学习速率是自适应的，而相比RMSprop，其增加了冲量项, 第三和第四项主要是为了放大它们 The authors propose default values of 0.9 for \(\beta1\), 0.9999 for \(\beta2\) and \(10^{-8}\) for \(\epsilon\)]]></content>
      <categories>
        <category>Paper Note</category>
      </categories>
      <tags>
        <tag>Machine Learning Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linear models, Optimization]]></title>
    <url>%2FLinear-models-Optimization%2F2019%2F02%2F22%2F</url>
    <content type="text"><![CDATA[Programming assignment (Linear models, Optimization) In this programming assignment you will implement a linear classifier and train it using stochastic gradient descent modifications and numpy. 123import numpy as np%matplotlib inlineimport matplotlib.pyplot as plt 12345import syssys.path.append("..")import gradinggrader = grading.Grader(assignment_key="UaHtvpEFEee0XQ6wjK-hZg", all_parts=["xU7U4", "HyTF6", "uNidL", "ToK7N", "GBdgZ", "dLdHG"]) 123# token expires every 30 minCOURSERA_TOKEN = "TmANlFkR4a4doLvg"COURSERA_EMAIL = "lvduzhen@gmail.com" Two-dimensional classification To make things more intuitive, let's solve a 2D classification problem with synthetic data. 12345678with open('train.npy', 'rb') as fin: X = np.load(fin) with open('target.npy', 'rb') as fin: y = np.load(fin)plt.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.Paired, s=20)plt.show() png Task Features As you can notice the data above isn't linearly separable. Since that we should add features (or use non-linear model). Note that decision line between two classes have form of circle, since that we can add quadratic features to make the problem linearly separable. The idea under this displayed on image below: 1print(X) [[ 1.20798057 0.0844994 ] [ 0.76121787 0.72510869] [ 0.55256189 0.51937292] ..., [-1.22224754 0.45743421] [ 0.43973452 -1.47275142] [ 1.4928118 1.15683375]] 123456789101112131415161718192021def expand(X): """ Adds quadratic features. This expansion allows your linear model to make non-linear separation. For each sample (row in matrix), compute an expanded row: [feature0, feature1, feature0^2, feature1^2, feature0*feature1, 1] :param X: matrix of features, shape [n_samples,2] :returns: expanded features of shape [n_samples,6] """ X_expanded = np.zeros((X.shape[0], 6)) X_expanded[:,0] = X[:,0] X_expanded[:,1] = X[:,1] X_expanded[:,2] = np.square(X[:,0]) X_expanded[:,3] = np.square(X[:,1]) X_expanded[:,4] = X[:,0] * X[:,1] X_expanded[:,5] = 1 return X_expanded # TODO:&lt;your code here&gt; 1X_expanded = expand(X) 1X_expanded array([[ 1.20798057, 0.0844994 , 1.45921706, 0.00714015, 0.10207364, 1. ], [ 0.76121787, 0.72510869, 0.57945265, 0.52578261, 0.5519657 , 1. ], [ 0.55256189, 0.51937292, 0.30532464, 0.26974823, 0.28698568, 1. ], ..., [-1.22224754, 0.45743421, 1.49388906, 0.20924606, -0.55909785, 1. ], [ 0.43973452, -1.47275142, 0.19336645, 2.16899674, -0.64761963, 1. ], [ 1.4928118 , 1.15683375, 2.22848708, 1.33826433, 1.72693508, 1. ]]) Here are some tests for your implementation of expand function. 123456789101112131415161718192021222324# simple test on random numbersdummy_X = np.array([ [0,0], [1,0], [2.61,-1.28], [-0.59,2.1] ])# call your expand functiondummy_expanded = expand(dummy_X)# what it should have returned: x0 x1 x0^2 x1^2 x0*x1 1dummy_expanded_ans = np.array([[ 0. , 0. , 0. , 0. , 0. , 1. ], [ 1. , 0. , 1. , 0. , 0. , 1. ], [ 2.61 , -1.28 , 6.8121, 1.6384, -3.3408, 1. ], [-0.59 , 2.1 , 0.3481, 4.41 , -1.239 , 1. ]])#testsassert isinstance(dummy_expanded,np.ndarray), "please make sure you return numpy array"assert dummy_expanded.shape == dummy_expanded_ans.shape, "please make sure your shape is correct"assert np.allclose(dummy_expanded,dummy_expanded_ans,1e-3), "Something's out of order with features"print("Seems legit!") Seems legit! Logistic regression To classify objects we will obtain probability of object belongs to class '1'. To predict probability we will use output of linear model and logistic function: \[ a(x; w) = \langle w, x \rangle \] \[ P( y=1 \; \big| \; x, \, w) = \dfrac{1}{1 + \exp(- \langle w, x \rangle)} = \sigma(\langle w, x \rangle)\] 123456789101112131415def probability(X, w): """ Given input features and weights return predicted probabilities of y==1 given x, P(y=1|x), see description above Don't forget to use expand(X) function (where necessary) in this and subsequent functions. :param X: feature matrix X of shape [n_samples,6] (expanded) :param w: weight vector w of shape [6] for each of the expanded features :returns: an array of predicted probabilities in [0,1] interval. """ w = w.reshape((w.shape[0],1)) return 1/(1 + np.exp(-np.dot(X,w))) # TODO:&lt;your code here&gt; 12dummy_weights = np.linspace(-1, 1, 6)ans_part1 = probability(X_expanded[:1, :], dummy_weights)[0] 12## GRADED PART, DO NOT CHANGE!grader.set_answer("xU7U4", ans_part1) 12# you can make submission with answers so far to check yourself at this stagegrader.submit(COURSERA_EMAIL, COURSERA_TOKEN) Submitted to Coursera platform. See results on assignment page! In logistic regression the optimal parameters \(w\) are found by cross-entropy minimization: Loss for one sample: \[ l(x_i, y_i, w) = - \left[ {y_i \cdot log P(y_i = 1 \, | \, x_i,w) + (1-y_i) \cdot log (1-P(y_i = 1\, | \, x_i,w))}\right] \] Loss for many samples: \[ L(X, \vec{y}, w) = {1 \over \ell} \sum_{i=1}^\ell l(x_i, y_i, w) \] 123456789def compute_loss(X, y, w): """ Given feature matrix X [n_samples,6], target vector [n_samples] of 1/0, and weight vector w [6], compute scalar loss function L using formula above. Keep in mind that our loss is averaged over all samples (rows) in X. """ y = y.reshape((y.shape[0],1)) return -np.mean(y*np.log(probability(X,w)) + (1-y)*np.log(1-probability(X,w))) # TODO:&lt;your code here&gt; 12# use output of this cell to fill answer field ans_part2 = compute_loss(X_expanded, y, dummy_weights) 12## GRADED PART, DO NOT CHANGE!grader.set_answer("HyTF6", ans_part2) 12# you can make submission with answers so far to check yourself at this stagegrader.submit(COURSERA_EMAIL, COURSERA_TOKEN) Submitted to Coursera platform. See results on assignment page! Since we train our model with gradient descent, we should compute gradients. To be specific, we need a derivative of loss function over each weight [6 of them]. \[ \nabla_w L = {1 \over \ell} \sum_{i=1}^\ell \nabla_w l(x_i, y_i, w) \] We won't be giving you the exact formula this time — instead, try figuring out a derivative with pen and paper. As usual, we've made a small test for you, but if you need more, feel free to check your math against finite differences (estimate how \(L\) changes if you shift \(w\) by \(10^{-5}\) or so). 12345678def compute_grad(X, y, w): """ Given feature matrix X [n_samples,6], target vector [n_samples] of 1/0, and weight vector w [6], compute vector [6] of derivatives of L over each weights. Keep in mind that our loss is averaged over all samples (rows) in X. """ y = y.reshape((y.shape[0],1)) return np.mean(X*(probability(X,w) - y),axis = 0) 12# use output of this cell to fill answer field ans_part3 = np.linalg.norm(compute_grad(X_expanded, y, dummy_weights)) 12## GRADED PART, DO NOT CHANGE!grader.set_answer("uNidL", ans_part3) 12# you can make submission with answers so far to check yourself at this stagegrader.submit(COURSERA_EMAIL, COURSERA_TOKEN) Submitted to Coursera platform. See results on assignment page! Here's an auxiliary function that visualizes the predictions: 123456789101112131415161718192021222324from IPython import displayh = 0.01x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))def visualize(X, y, w, history): """draws classifier prediction with matplotlib magic""" Z = probability(expand(np.c_[xx.ravel(), yy.ravel()]), w) Z = Z.reshape(xx.shape) plt.subplot(1, 2, 1) plt.contourf(xx, yy, Z, alpha=0.8) plt.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.Paired) plt.xlim(xx.min(), xx.max()) plt.ylim(yy.min(), yy.max()) plt.subplot(1, 2, 2) plt.plot(history) plt.grid() ymin, ymax = plt.ylim() plt.ylim(0, ymax) display.clear_output(wait=True) plt.show() 1visualize(X, y, dummy_weights, [0.5, 0.5, 0.25]) png Training In this section we'll use the functions you wrote to train our classifier using stochastic gradient descent. You can try change hyperparameters like batch size, learning rate and so on to find the best one, but use our hyperparameters when fill answers. Mini-batch SGD Stochastic gradient descent just takes a random batch of \(m\) samples on each iteration, calculates a gradient of the loss on it and makes a step: \[ w_t = w_{t-1} - \eta \dfrac{1}{m} \sum_{j=1}^m \nabla_w l(x_{i_j}, y_{i_j}, w_t) \] 12345678910111213141516171819202122232425# please use np.random.seed(42), eta=0.1, n_iter=100 and batch_size=4 for deterministic resultsnp.random.seed(42)w = np.array([0, 0, 0, 0, 0, 1])eta= 0.1 # learning raten_iter = 100batch_size = 4loss = np.zeros(n_iter)plt.figure(figsize=(12, 5))for i in range(n_iter): ind = np.random.choice(X_expanded.shape[0], batch_size) loss[i] = compute_loss(X_expanded, y, w) if i % 10 == 0: visualize(X_expanded[ind, :], y[ind], w, loss) # Keep in mind that compute_grad already does averaging over batch for you! # TODO:&lt;your code here&gt; random_index = np.random.randint(0,X_expanded.shape[0],batch_size) w = w - eta * compute_grad(X_expanded[random_index,:],y[random_index],w)visualize(X, y, w, loss)plt.clf() png &lt;matplotlib.figure.Figure at 0x7fdbbfafb908&gt; 12# use output of this cell to fill answer field ans_part4 = compute_loss(X_expanded, y, w) 12## GRADED PART, DO NOT CHANGE!grader.set_answer("ToK7N", ans_part4) 12# you can make submission with answers so far to check yourself at this stagegrader.submit(COURSERA_EMAIL, COURSERA_TOKEN) Submitted to Coursera platform. See results on assignment page! SGD with momentum Momentum is a method that helps accelerate SGD in the relevant direction and dampens oscillations as can be seen in image below. It does this by adding a fraction \(\alpha\) of the update vector of the past time step to the current update vector. \[ \nu_t = \alpha \nu_{t-1} + \eta\dfrac{1}{m} \sum_{j=1}^m \nabla_w l(x_{i_j}, y_{i_j}, w_t) \] \[ w_t = w_{t-1} - \nu_t\] 1234567891011121314151617181920212223242526# please use np.random.seed(42), eta=0.05, alpha=0.9, n_iter=100 and batch_size=4 for deterministic resultsnp.random.seed(42)w = np.array([0, 0, 0, 0, 0, 1])eta = 0.05 # learning ratealpha = 0.9 # momentumnu = np.zeros_like(w)n_iter = 100batch_size = 4loss = np.zeros(n_iter)plt.figure(figsize=(12, 5))for i in range(n_iter): ind = np.random.choice(X_expanded.shape[0], batch_size) loss[i] = compute_loss(X_expanded, y, w) if i % 10 == 0: visualize(X_expanded[ind, :], y[ind], w, loss) # TODO:&lt;your code here&gt; random_index = np.random.randint(0,X_expanded.shape[0],batch_size) nu = alpha*nu + eta * compute_grad(X_expanded[random_index,:],y[random_index],w) w = w - nuvisualize(X, y, w, loss)plt.clf() png &lt;matplotlib.figure.Figure at 0x7fdbba216e10&gt; 123# use output of this cell to fill answer field ans_part5 = compute_loss(X_expanded, y, w) 12## GRADED PART, DO NOT CHANGE!grader.set_answer("GBdgZ", ans_part5) 12# you can make submission with answers so far to check yourself at this stagegrader.submit(COURSERA_EMAIL, COURSERA_TOKEN) Submitted to Coursera platform. See results on assignment page! RMSprop Implement RMSPROP algorithm, which use squared gradients to adjust learning rate: \[ G_j^t = \alpha G_j^{t-1} + (1 - \alpha) g_{tj}^2 \] \[ w_j^t = w_j^{t-1} - \dfrac{\eta}{\sqrt{G_j^t + \varepsilon}} g_{tj} \] 1234567891011121314151617181920212223242526272829# please use np.random.seed(42), eta=0.1, alpha=0.9, n_iter=100 and batch_size=4 for deterministic resultsnp.random.seed(42)w = np.array([0, 0, 0, 0, 0, 1.])eta = 0.1 # learning ratealpha = 0.9 # moving average of gradient norm squaredg2 = None # we start with None so that you can update this value correctly on the first iterationeps = 1e-8G = 0n_iter = 100batch_size = 4loss = np.zeros(n_iter)plt.figure(figsize=(12,5))for i in range(n_iter): ind = np.random.choice(X_expanded.shape[0], batch_size) loss[i] = compute_loss(X_expanded, y, w) if i % 10 == 0: visualize(X_expanded[ind, :], y[ind], w, loss) # TODO:&lt;your code here&gt; random_index = np.random.randint(0,X_expanded.shape[0],batch_size) g2 = np.square(compute_grad(X_expanded[random_index,:],y[random_index],w)) G = alpha*G + (1-alpha) * g2 w = w - eta/np.sqrt(G + eps) * g2 visualize(X, y, w, loss)plt.clf() png &lt;matplotlib.figure.Figure at 0x7fdbba944f98&gt; 12# use output of this cell to fill answer field ans_part6 = compute_loss(X_expanded, y, w) 12## GRADED PART, DO NOT CHANGE!grader.set_answer("dLdHG", ans_part6) 1grader.submit(COURSERA_EMAIL, COURSERA_TOKEN) Submitted to Coursera platform. See results on assignment page! 12]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Project</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Master Computer Science]]></title>
    <url>%2FMaster-Computer-Science%2F2019%2F02%2F20%2F</url>
    <content type="text"><![CDATA[table th:first-of-type { width: 30%; } MATH Course Institute Rating Type Status Commnet Improving your statistical inferences Eindhoven University of Technology 4.9 Statistical Matrix Algebra for Engineers The Hong Kong University of Science and Technology Linear Algebra completed Easy but useful Mathematical Thinking in Computer Science UCSanDiego Discrete Mathematics Mathematics for Machine Learning Specialization Imperail London University 4.5 Math ARCHIVED Convex Optimization Standford Optimization Statistical Learning Standford Probability and Statistics Probability and Statistics Standford Probability and Statistics Mathematics for Computer Science MIT Math Basic Modeling for Discrete Optimization The Chinese University of Hong Kong Optimization Advanced Modeling for Discrete Optimization The Chinese University of Hong Kong Optimization Discrete Mathematics Generality Pking University 4.7 Discrete Mathematics Methods and Statistics in Social Sciences University of Amsterdam Statistics Introduction to Discrete Mathematics for Computer Science UCSanDiego 4.5 Discrete Mathematics Bayesian Statistics: From Concept to Data Analysis UCSantaCruz Statistics Introduction to Mathematical Thinking Standford Math 18.06 Linear Algebra MIT Linear Algebra Calculus Applied! Harvard Calculus Probability and Statistics in Data Science using Python UCSanDiego Probability and Statistics Introduction to Probability Harvard Probability and Statistics Calculus 1A: Differentiation MIT Calculus Calculus 1B: Integration MIT Calculus Calculus 1C: Coordinate Systems &amp; Infinite Series MIT Calculus Linear Algebra - Foundations to Frontiers UT Austin Linear Algebra Computer Scicence Course Institute Rating Type Status Commnet Cloud Computing Specialization UIUC 4.4 Cloud Computing Data Structures and Algorithms UCSanDiego 4.6 Algorithm and Data Structure Algorithm Part1 Priceton 4.9 Algorithm and Data Structure Algorithm Part2 Priceton 4.9 Algorithm and Data Structure Nand to Tetris Part I Hebrew University of Jerusalem 5 System Nand to Tetris Part II Hebrew University of Jerusalem 5 System Algorithms Specialization Standford Algorithm and Data Structure An Introduction to Programming the Internet of Things (IOT) Specialization University of California, Irvine 4.6 Hardware Functional Programming in Scala École Polytechnique Fédérale de Lausanne 4.5 Programming Language Analysis of Algorithms Priceton Algorithm and Data Structure Parallel, Concurrent, and Distributed Programming in Java Rice University 4.5 Programming Language Probabilistic Graphical Models Specialization Standford 4.7 Graphical Model Bitcoin and Cryptocurrency Technologies Priceton Bitcoin Computer Science: Algorithms, Theory, and Machines Princeton University System CS 61A: Structure and Interpretation of Computer Programs UCBerkeley System CS161: Algorithm Standford Algorithm and Data Structure CS224n: Natural Language Processing with Deep Learning Stanford Natural Language Processing Operating Systems Design and Implementation Standford Operating Systems Operating System Engineering MIT Operating Systems 6.006 Introduction to Algorithms MIT Algorithm and Data Structure Machine Learning Course Institute Rating Type Status Commnet Machine Learning Foundations University of Washington Machine Learning Advanced Machine Learning Specialization National Research University Higher School of Economics Deep Learning Advanced Machine Learning with TensorFlow on Google Cloud Platform Specialization Google 4.6 Machine Learning Machine Learning Standford 4.9 Machine Learning Deep Learning deeplearning.ai 4.9 Deep Learning Self-Driving Cars Specialization University of Toronto 5 Self-Driving Self-Driving Cars Teach-Out University of Michigan 4.9 Self-Driving 機器學習基石上 National Taiwan University 4.9 Machine Learning 機器學習基石下 National Taiwan University 4.9 Machine Learning Recommender Systems Specialization University of Minnesota Recommender Systems CS224n: Natural Language Processing with Deep Learning Stanford Natural Language Processing CS231n: Convolutional Neural Networks for Visual Recognition Standford Computer Vision 11-785 Introduction to Deep Learning Standford Deep Learning Artificial Intelligence Course Institute Rating Type Status Commnet AI for Everyone deeplearning.ai 5 Artificial Intelligence completed good course for AI from business perspective Artificial Intelligence UCBerkeley Artificial Intelligence Data Mining Specialization UIUC Data Mining Data Systems Specialization ASU 4.0 Database I love MOOCs and MOOCs love me]]></content>
      <categories>
        <category>Gossip</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[INFSCI 2160 DATA MINING(PART ONE)]]></title>
    <url>%2FINFSCI-2160-DATA-MINING-PART-ONE%2F2019%2F02%2F18%2F</url>
    <content type="text"><![CDATA[Reference from some lecture slides of INFSCI 2160 DATA MINING lectured by Matt Berezo Introduction What is Artificial Intelligence? The goal of machine learning/AI/data mining is to develop an algorithm that performs well on new, unseen inputs. The ability to perform well on previously unobserved inputs is called generalization Data Mining process Business undertanding is important Data understranding is important Regression Simple linear regression involves 2 variables: A predictor variable, x A response variable, y \[\hat{y_{i}} = \hat{\alpha} + \hat{\beta_{i}}X_{i}\] - \(\hat{y_{i}}\) = Estimated prediction of y - \(\hat{\alpha}\) = Intercept - \(\hat{\beta_{i}}\) = coefficient/parameter Goal: Obtain coefficient estimates that the linear model fits the available data well, and will also perform well (generalize) on unseen data The least square approach \[\begin{align*} &amp; \hat{\beta_{1}} = \frac{\sum_{i=1}^{n}{(x_{i}-\bar{x})(y_{i}-\bar{y})}}{\sum_{i=1}^{n}{(x_{i} - \bar{x})^{2}}}\\ &amp; \hat{\beta_{0}} = \bar{y} - \hat{\beta_{1}}\bar{x} \end{align*} \] Coefficient Accuracy We can compute the standard error of our coefficients what is SE (standaed error)? If the purpose is Descriptive, use standard Deviation; if the purpose is Estimation, use standard Error. 很容易混淆,我们拿到一个样本,对样本观察值离散程度的量化是\(SD:sd(x)\); 而我们可以从很多个样本中得到很多个均值，这些均值的离散度用SE来量化,也就是\(SE=sd(\bar{x})\) 1234567891011## generate 1000 sample with sample size 100a = sapply(rep(100, 1000), rnorm)a.mean = colMeans(a)## estimate SEM by simulationsd(a.mean)## estimate SEM by sigma/sqrt(n), sigma = 11/sqrt(100)## estimate SEM by sample 1sd(a[, 1])/sqrt(100) We have established that the average of \(\hat{\mu}\) over many data sets will be very close to \(\mu\), but that a single estimate \(\hat{\mu}\) may be a substantial underestimate or overestimate of \(\mu\). How far off will that single estimate of \(\hat{\mu}\) be? \[\begin{align*} &amp; SE(\hat{\beta_{0}})^{2} = \sigma^{2}\lbrack\frac{1}{n} + \frac{\bar{x}^{2}}{\sum_{i=1}^{n}{(x_{i} - \bar{x})^{2}}}\rbrack\\ &amp; SE(\hat{\beta_{1}})^{2} = \frac{\sigma^{2}}{\sum_{i=1}^{n}{(x_{i} - \bar{x})^{2}}}\\ \end{align*}\] When we get the SE of parameters, we can calculate the 95% confidence interval \[\hat{B_{i}} = +/- 2 * SE(\hat{B_{i}})\] Standard errors can also be used to perform hypothesis tests on the coefficients. The most common hypothesis test involves testing the null hypothesis Null hypothesis(H0): there is no relationship between x and y Alternative hypothesis(Ha): there is a relationship between x and y Mathematically, this corresponds to testing \[\begin{align*} H_{0}: \beta_{1} = 0 \\ H_{a}: \beta_{1} \ne 0 \\ \end{align*}\] To test the null hypothesis, we need to determine whether \(\hat{β_{1}}\), our estimate for \(\hat{β_{1}}\) , is sufficiently far from zero that we can be confident that \(\hat{β_{1}}\) is non-zero \[t = \frac{\hat{β_{1}} - 0}{SE(\hat{\beta_{1}})}\] Model Accuracy RSS: Residual Sum of Squares \[e_{1}^{2} + e_{2}^{2} + e_{3}^{2} + .....\] RSE: Residual standard error \[\sqrt\frac{RSS}{(N-2)}\] R squared How much better does your model do than simply using the mean, in terms of SSE? \[R^{2} = 1 - (\frac{\sum{(y_{i} - \hat{y}_{i})^{2}}}{\sum{(y_{i} - \overline{y}_{i})^{2}}})\] R-square takes form of a proportion and gives a value between 0 and 1 (1 = perfect model) Multiple Linear Regression F-stat If the F-stat is larger than 1 and the p-value is &lt;= 0.05, we can determine that our predictors and model have a relationship with the response variable \[\frac{TSS - RSS}{p} / \frac{RSS}{n-p-1}\] - Where p = our number of predictors - N = number of observations IMG_0310.jpg R-squared \[R^{2} = 1 - \frac{\sum{(y_{i} - \hat{y}_{i})^{2}} / (n-d-1)}{\sum{(y_{i} - \overline{y}_{i})^{2}}/(n-d)}\] Feature Selection Stepwise Procedures Backward Elimination This is the simplest of all variable selection procedures and can be easily implemented without special software. In situations where there is a complex hierarchy, backward elimination can be run manually while taking account of what variables are eligible for removal. Start with all the predictors in the model Remove the predictor with highest p-value greater than \(\alpha\) Refit the model and goto 2 Stop when all p-values are less than \(\alpha\) Forward Selection This just reverses the backward method. Start with no variables in the model. For all predictors not in the model, check their p-value if they are added to the model. Choose the one with lowest p-value less than αcrit . Continue until no new predictors can be added. Ridge regression (i.e., L2 norm regulizar) Ridge looks to minimize: \[RSS + \lambda\sum_{j=1}^{p}{\beta_{j}^{2}}\] \(\lambda\) is a tuning parameter Bias vs. Variance Trade-off Ideally, we want to derive a model that has low bias, low variance, and low MSE on test data Local Polynomial Regression The fitted value changes with x in a nonparametric manner Define a weight function so that only values within a smoothing window [𝑥0 - h(𝑥0 ), 𝑥0 + h(𝑥0 )] will be considered in the estimate of \(\hat{y}\) Model Performance Cross-validation The goal of cross-validation is to test the model’s ability to predict new data that was not used in estimating it, in order to flag problems like overfitting or selection bias[6] and to give an insight on how the model will generalize to an independent dataset (i.e., an unknown dataset, for instance from a real problem). Advantages of LOOCV Advantages of LOOCV: - Works well on small datasets - Meticulously tests the data Disadvantages of LOOCV: - Computationally expensive on “big data” sets - Can result in high variability since model is only tested on one observation Overfitting Use cross-validation Ensemble/combine models together Use regularization techniques to penalize models that are too complex Non-parametric Methods Advantages of Non-parametric Methods: - Do not assume an explicit form of f(x), so the model is more "flexible" Disadvantages of Non-Parametric Methods: - Often are more complex and thus more difficult to interpret K Nearest-Neighbors KNN is a non-parametric method, vs. linear and logistic regression which are parametric approaches since they assume a linear functional form for f(x) Accuracy and Error Rate 1234567891011import numpy as npfrom sklearn import metricsy = np.array([1, 1, 2, 2])scores = np.array([0.1, 0.4, 0.35, 0.8])fpr, tpr, thresholds = metrics.roc_curve(y, scores, pos_label=2)&gt;&gt;&gt; fprarray([0. , 0. , 0.5, 0.5, 1. ])&gt;&gt;&gt; tprarray([0. , 0.5, 0.5, 1. , 1. ])&gt;&gt;&gt; thresholdsarray([1.8 , 0.8 , 0.4 , 0.35, 0.1 ]) Classification Naïve Bayes a Naïve Bayes classifier assumes independence between features Naïve Bayes assumes that the continuous variables are normally distributed For continuous random variables, probabilities are areas under the curve Decision Trees Constructing Decision Trees for Regression 1. First, we divide the predictor space into distinct and non-overlapping regions (𝑅1, 𝑅2,𝑅3 ... 𝑅𝑛) 2. To make a prediction, we typically use the mean of the training data in the region to which it belongs How do we construct R1 and R2? The goal is to find regions that minimize the residual sum of squares (RSS) Decision trees can get too complex, memorize the training data, and overfit on test data - It is advised to first build a very large tree and then prune it back to obtain a subtree - Given a subtree, we can estimate the test error rate using cross-validation - Cost complexity pruning i.e., weakest link pruning gives us the most efficient way to choose our subset of trees Decision Trees Advantages and Disadvantages Advantages: - Trees are easy to explain and are intuitive - Trees can be displayed graphically and are easy to interpret - Trees can handle qualitative predictors without dummy variables Disadvantages: - Trees to not usually have the same level of predictive accuracy as other regression and classification methods - Trees can be non-robust, i.e., a small change in the data can cause a large change in the tree Bagging and Random Forests Bootstrap aggregation, also known as bagging, is a procedure of reducing the variance of a statistical learning method - This is a good way to reduce variance→by taking many training sets from the population and build separate learning methods using each set - We can then calculate f1,f2,f3... and average them in order to obtain a low-variance statistical model - We can do this by bootstrapping, or taking repeated random samples from the training set Ensemble learning is a machine learning paradigm where multiple learners are trained to solve the same problem Random forests provide an improvement over bagged trees by decorrelating them - Like bagging, decision trees are made on bootstrapped training samples - Random forests are an ensemble method for decision trees - The difference is, each time a split in the tree is considered, a random sample of predictors is chosen as split candidates from the full set of predictors. So, at each split of the tree, the algorithm can’t even consider a majority of the predictors Support Vector Machines SVM’s use a classifying tool called maximum margin classifier maximum margin classifiers can’t be applied to most datasets because they require the classes to be separated by a linear boundary Support vector classifiers are an extension of maximum margin classifiers that can be applied to a broader range of datasets hyperplane A hyperplane is a flat subspace in p-dimensional space with p – 1 dimensions parameters C = a nonnegative tuning parameter C can be thought of as a budget for the amount the margin can be violated by n observations. If C = 0, there is no budget for violations to the margin large C, Overfitting small C, underfitting What if the decision boundary for the two classes is not linear? enlarging the feature space with kernels A kernel is a function that quantifies the similarity between two observations Multinomial Logistic Regression Similar to binary logistic regression, all probabilities in the output will sum to 1 This is just an extension of the same math from logistic regression Drawbacks Models involve many parameters, which makes their interpretation tedious Maximum-likelihood estimation can encounter numerical problems if the data is separable and if the predicted probabilities are close to either 0 or 1 XGBoost overview Advantages of XGBoost: Scalability: XGBoost system runs 10x faster than existing popular solutions on a single machine XGBoost accepts null values: users don’t have to impute missing values, drop records, etc. Less time spent on feature selection and more time spent on hyperparametric tuning Typically, one tree is not as strong as an ensemble/combination of other trees. XGBoost uses an ensemble method to gather information from other trees. Objective Function and Regularization The additive function fixes what we have already learned, and adds one new tree at a time But how do we choose which tree we want at each step? &gt; We pick the one that optimizes our objective function! This is known as an additive function Objective Functions Linear: Continuous numeric prediction Binary: logistic,binary classification Multi:softmax: multiclassification Tree Boosting Parameters Reference from https://www.cnblogs.com/sarahp/p/6900572.html Eta (i.e., learning rate): Step shrinkage use in update to prevent overfitting. After each boosting step, we can get the weights of new features. Eta shrinks the weights to make the boosting process more conservative Gamma: Minimum loss reduction required to make a further partition on a leaf node of a tree. Larger gamma = more conservative model (这个指定了一个结点被分割时，所需要的最小损失函数减小的大小) Max depth: Maximum depth of a tree. Increasing this value will make the model more complex (树的最大深度，值越大，树越复杂) Minimum child weight: Minimum sum of instance weight needed in a child. If the tree partition step results in a leaf node with the sum of instance weight less than this set parameter, the building process will stop partitioning. Larger weight = more conservative model (定义了一个子集的所有观察值的最小权重和) Subsample: A subsample ratio of the training instances. Setting to 0.5 would make XGBoost randomly sample half of the training data prior to growing trees and will help prevent overfitting (样本的采样率，如果设置成0.5，那么Xgboost会随机选择一般的样本作为训练集) Column sample by tree: Subsample ratio of columns when constructing a tree Column sample by level: Subsample ratio of columns for each level of the tree Column sample by node: Subsample ratio of columns for each node (split) Lambda: L2 regularization Alpha: L1 regularization Scale positive weight: Control the balance of positive and negative weights REVIEW What is the difference between boost, ensemble, bootstrap and bagging? Reference from https://www.quora.com/What-is-the-difference-between-boost-ensemble-bootstrap-and-bagging Boosting is the idea of training iteratively the same “weak” classifier, so that at each iteration, the i-th classifier is supposed to correct the mistakes made by the previous classifier (i-1). It is done by weighting more the misclassified observations. The final classifier is calculated by a weighted mean of all the “weak” classifiers, the weights being close to the accuracies calculated for each classifier. Ensembling is quite general and encompasses simple methods like Averaging, and more complicated ones like Boosting, Bagging, Stacking, etc. Bootstrapping means taking a sample of a population by drawing with replacement. It is one of the main ideas behind Bagging (which stands for Bootstrap AGGregatING). Bagging means training the same classifier on different subsets (that may be overlapping) of one dataset. You do so with bootstrap. RF vs XGBoost Reference from https://www.cnblogs.com/sarahp/p/6900572.html RF use bagging: 种集成学习算法，基于bootstrap sampling 自助采样法，重复性有放回的随机采用部分样本进行训练最后再将结果 voting 或者 averaging 它是并行式算法，因为不同基学习器是独立 训练一个bagging集成学习器时间复杂度与基学习器同阶（n倍，n为基学习器个数）。 bagging可以用于二分类／多分类／回归 每个基学习器的未用作训练样本可用来做包外估计，评价泛化性能。 bagging主要关注降低方差 两个步骤 1. 抽样训练（采样样本，采样特征） 2 融合 XGBoost use boosting(Gradient Boosting Decision Tree): gbdt的基本原理是boost 里面的 boosting tree（提升树），并使用 gradient boost。 Gradient Boosting是一种Boosting的方法，其与传统的Boosting的区别是，每一次的计算是为了减少上一次的残差(residual)，而为了消除残差，可以在残差减少的梯度(Gradient)方向上建立一个新的模型。所以说，在Gradient Boosting中，每个新的模型的建立是为了使得之前模型的残差往梯度方向减少，与传统Boosting对正确、错误样本进行加权有着很大的区别。这个梯度代表上一轮学习器损失函数对预测值求导。 与Boosting Tree的区别：Boosting Tree的适合于损失函数为平方损失或者指数损失。而Gradient Boosting适合各类损失函数（损失函数为：平方损失则相当于Boosting Tree拟合残差、损失函数为：使用指数损失则可以近似于Adaboost，但树是回归树）]]></content>
      <categories>
        <category>Data Mining</category>
      </categories>
      <tags>
        <tag>Course Note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Machine Learning Assignment1(Upitt)]]></title>
    <url>%2FMachine-Learning-Assignment1-upitt%2F2019%2F02%2F17%2F</url>
    <content type="text"><![CDATA[Enter password to read. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Project</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Machine Learning (Andrew Ng)]]></title>
    <url>%2FMachine-Learning-Andraw-Ng%2F2019%2F02%2F15%2F</url>
    <content type="text"><![CDATA[Reference From Coursera Course Machine Learning. I am also really sorry that I did not write down some sources when I cite from the web. I was too young and did not get any academic training when I wrote these notes. Let me thank Ng first. This course Changed me. I still remember that afternoon when I was just a sophomore. I discovered the Machine Learning course lectured by Andrew Ng on Coursera and was fascinated by the underlying algorithms. It was amazing to see that a simple yet elegant mathematical model could make predictions on new data after being trained with large amounts of training sets for analysis and fitting. I spent several days on the assignments and developed a classifier to filter spam emails and an Optical Character Recognition program. Never expecting that I could program the machine to gain the cognitive ability, I was so thrilled and resolved to advance my knowledge in this area. About two years later, I took this course again and reviewed some important concepts to prapare the interviews. I wrote down notes and paid for the course this time This is my course certificate. I really want all of guys who want to dive into the area of machine learning to take this course on Coursera. certificate What is Machine Learning? Two definitions of Machine Learning are offered. + Arthur Samuel described it as: "the field of study that gives computers the ability to learn without being explicitly programmed." This is an older, informal definition. Tom Mitchell provides a more modern definition: "A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P, if its performance at tasks in T, as measured by P, improves with experience E." Example: playing checkers. E = the experience of playing many games of checkers T = the task of playing checkers. P = the probability that the program will win the next game. In general, any machine learning problem can be assigned to one of two broad classifications: Supervised learning and Unsupervised learning. Supervised Learning In supervised learning, we are given a data set and already know what our correct output should look like, having the idea that there is a relationship between the input and the output. Supervised learning problems are categorized into "regression" and "classification" problems. In a regression problem, we are trying to predict results within a continuous output, meaning that we are trying to map input variables to some continuous function. In a classification problem, we are instead trying to predict results in a discrete output. In other words, we are trying to map input variables into discrete categories. Example 1: Given data about the size of houses on the real estate market, try to predict their price. Price as a function of size is a continuous output, so this is a regression problem. Screen Shot 2018-03-02 at 15.22.36.png We could turn this example into a classification problem by instead making our output about whether the house "sells for more or less than the asking price." Here we are classifying the houses based on price into two discrete categories. Example 2: Regression - Given a picture of a person, we have to predict their age on the basis of the given picture Classification - Given a patient with a tumor, we have to predict whether the tumor is malignant or benign. Screen Shot 2018-03-02 at 15.22.51.png Unsupervised Learning Unsupervised learning allows us to approach problems with little or no idea what our results should look like. We can derive structure from data where we don't necessarily know the effect of the variables. We can derive this structure by clustering the data based on relationships among the variables in the data. With unsupervised learning there is no feedback based on the prediction results. Screen Shot 2018-03-02 at 15.26.13.png Example: Clustering: Take a collection of 1,000,000 different genes, and find a way to automatically group these genes into groups that are somehow similar or related by different variables, such as lifespan, location, roles, and so on. Model Representation To establish notation for future use, we’ll use x(i) to denote the “input” variables (living area in this example), also called input features, and y(i) to denote the “output” or target variable that we are trying to predict (price). A pair (x(i),y(i)) is called a training example, and the dataset that we’ll be using to learn—a list of m training examples (x(i),y(i));i=1,...,m—is called a training set. Note that the superscript “(i)” in the notation is simply an index into the training set, and has nothing to do with exponentiation. We will also use X to denote the space of input values, and Y to denote the space of output values. In this example, X = Y = ℝ. To describe the supervised learning problem slightly more formally, our goal is, given a training set, to learn a function h : X → Y so that h(x) is a “good” predictor for the corresponding value of y. For historical reasons, this function h is called a hypothesis. Seen pictorially, the process is therefore like this: Screen Shot 2018-03-02 at 16.13.42.png When the target variable that we’re trying to predict is continuous, such as in our housing example, we call the learning problem a regression problem. When y can take on only a small number of discrete values (such as if, given the living area, we wanted to predict if a dwelling is a house or an apartment, say), we call it a classification problem. Linear Regression with Multiple Variables Cost Function We can measure the accuracy of our hypothesis function by using a cost function. This takes an average difference (actually a fancier version of an average) of all the results of the hypothesis with inputs from x's and the actual output y's. \[J(θ_0,θ_1)=\frac{1}{2m}\sum_{i=1}^m(\hat{y}_i−y_i)^2=\frac{1}{2m}\sum_{i=1}^m(h_θ(x_i)−y_i)^2\] To break it apart, it is \(\frac{1}{2}\bar{x}\) where \(\bar{x}\) is the mean of the squares of \(h_θ(x_i)−y_i\) , or the difference between the predicted value and the actual value. This function is otherwise called the "Squared error function", or "Mean squared error". The mean is halved (\(\frac{1}{2}\)) as a convenience for the computation of the gradient descent, as the derivative term of the square function will cancel out the \(\frac{1}{2}\) term. The following image summarizes what the cost function does: Cost Function - Intuition I If we try to think of it in visual terms, our training data set is scattered on the x-y plane. We are trying to make a straight line (defined by \(h_θ(x)\)) which passes through these scattered data points. Our objective is to get the best possible line. The best possible line will be such so that the average squared vertical distances of the scattered points from the line will be the least. Ideally, the line should pass through all the points of our training data set. In such a case, the value of \(J(θ_0,θ_1)\) will be 0. The following example shows the ideal situation where we have a cost function of 0. Screen Shot 2018-03-02 at 17.18.45.png When \(θ_1=1\), we get a slope of 1 which goes through every single data point in our model. Conversely, when θ1=0.5, we see the vertical distance from our fit to the data points increase. Screen Shot 2018-03-02 at 17.19.16.png This increases our cost function to 0.58. Plotting several other points yields to the following graph: Screen Shot 2018-03-02 at 17.19.50.png Thus as a goal, we should try to minimize the cost function. In this case, \(θ_1=1\) is our global minimum. Cost Function - Intuition II A contour plot is a graph that contains many contour lines. A contour line of a two variable function has a constant value at all points of the same line. An example of such a graph is the one to the right below. Taking any color and going along the 'circle', one would expect to get the same value of the cost function. For example, the three green points found on the green line above have the same value for \(J(θ_0,θ_1)\) and as a result, they are found along the same line. The circled x displays the value of the cost function for the graph on the left when \(θ_0 = 800\) and \(θ_1= -0.15\). Taking another h(x) and plotting its contour plot, one gets the following graphs: When \(θ_0 = 360\) and \(θ_1 = 0\), the value of \(J(θ_0,θ_1)\) in the contour plot gets closer to the center thus reducing the cost function error. Now giving our hypothesis function a slightly positive slope results in a better fit of the data. Screen Shot 2018-03-02 at 17.42.31.png The graph above minimizes the cost function as much as possible and consequently, the result of \(θ_1\) and \(θ_0\) tend to be around 0.12 and 250 respectively. Plotting those values on our graph to the right seems to put our point in the center of the inner most 'circle'. Gradient Descent So we have our hypothesis function and we have a way of measuring how well it fits into the data. Now we need to estimate the parameters in the hypothesis function. That's where gradient descent comes in. Imagine that we graph our hypothesis function based on its fields \(θ_0\) and \(θ_1\) (actually we are graphing the cost function as a function of the parameter estimates). We are not graphing x and y itself, but the parameter range of our hypothesis function and the cost resulting from selecting a particular set of parameters. We put \(θ_0\) on the x axis and \(θ_1\) on the y axis, with the cost function on the vertical z axis. The points on our graph will be the result of the cost function using our hypothesis with those specific theta parameters. The graph below depicts such a setup. Screen Shot 2018-03-02 at 17.46.49.png We will know that we have succeeded when our cost function is at the very bottom of the pits in our graph, i.e. when its value is the minimum. The red arrows show the minimum points in the graph. The way we do this is by taking the derivative (the tangential line to a function) of our cost function. The slope of the tangent is the derivative at that point and it will give us a direction to move towards. We make steps down the cost function in the direction with the steepest descent. The size of each step is determined by the parameter α, which is called the learning rate. For example, the distance between each 'star' in the graph above represents a step determined by our parameter α. A smaller α would result in a smaller step and a larger α results in a larger step. The direction in which the step is taken is determined by the partial derivative of \(J(θ_0,θ_1)\). Depending on where one starts on the graph, one could end up at different points. The image above shows us two different starting points that end up in two different places. The gradient descent algorithm is: repeat until convergence: \[ θ_j:=θ_j−α\frac{∂}{∂θj}J(θ_0,θ_1) \] where j=0,1 represents the feature index number. At each iteration j, one should simultaneously update the parameters \(θ_1\),\(θ_2\),...,\(θ_n\). Updating a specific parameter prior to calculating another one on the \(j^{(th)}\) iteration would yield to a wrong implementation. Screen Shot 2018-03-03 at 00.47.36.png Gradient Descent Intuition In this video we explored the scenario where we used one parameter \(θ_s1\) and plotted its cost function to implement a gradient descent. Our sformula for a single parameter was: Repeat until convergence: \[θ_1 := θ_1 − α\frac{d}{dθ_1}J(θ_1)\] Regardless of the slope's sign for J(θ_1), \(θ_1\) eventually converges to its minimum value. The following graph shows that when the slope is negative, the value of \(θ_1\) increases and when it is positive, the value of θ1 decreases. Screen Shot 2018-03-03 at 00.54.26.png On a side note, we should adjust our parameter α to ensure that the gradient descent algorithm converges in a reasonable time. Failure to converge or too much time to obtain the minimum value imply that our step size is wrong. Screen Shot 2018-03-03 at 00.55.16.png How does gradient descent converge with a fixed step size α? The intuition behind the convergence is that \(\frac{d}{dθ_1}J(θ_1)\) approaches 0 as we approach the bottom of our convex function. At the minimum, the derivative will always be 0 and thus we get: \[θ_1 := θ_1 − α∗0\] Screen Shot 2018-03-03 at 01.01.10.png Gradient Descent For Linear Regression When specifically applied to the case of linear regression, a new form of the gradient descent equation can be derived. We can substitute our actual cost function and our actual hypothesis function and modify the equation to : IMG_0190.jpg repeat until convergence:{ \[ \begin{align*} &amp; θ_0:=θ_0−α\frac{1}{m}\sum_{i=1}^m(h_θ(x_i)−y_i) \\ &amp; θ_1:=θ_1−α\frac{1}{m}\sum_{i=1}^m((h_θ(x_i)−y_i)x_i) \end{align*} \] } where m is the size of the training set, \(θ_0\) a constant that will be changing simultaneously with θ1 and xi,yiare values of the given training set (data). Note that we have separated out the two cases for \(θ_j\) into separate equations for \(θ_0\) and \(θ_1\); and that for \(θ_1\) we are multiplying \(x_i\) at the end due to the derivative. The following is a derivation of \(\frac{∂}{∂θ_j}J(θ)\) for a single example : Screen Shot 2018-03-03 at 09.20.14.png The point of all this is that if we start with a guess for our hypothesis and then repeatedly apply these gradient descent equations, our hypothesis will become more and more accurate. So, this is simply gradient descent on the original cost function J. This method looks at every example in the entire training set on every step, and is called batch gradient descent. Note that, while gradient descent can be susceptible to local minima in general, the optimization problem we have posed here for linear regression has only one global, and no other local, optima; thus gradient descent always converges (assuming the learning rate α is not too large) to the global minimum. Indeed, J is a convex quadratic function. Here is an example of gradient descent as it is run to minimize a quadratic function. Screen Shot 2018-03-03 at 09.35.27.png The ellipses shown above are the contours of a quadratic function. Also shown is the trajectory taken by gradient descent, which was initialized at (48,30). The x’s in the figure (joined by straight lines) mark the successive values of θ that gradient descent went through as it converged to its minimum. Matrices and Vectors Matrices are 2-dimensional arrays: \[ \begin{pmatrix} a &amp; b &amp; c \\ d &amp; e &amp; f \\ g &amp; h &amp; i \\ j &amp; k &amp; l \\ \end{pmatrix} \] The above matrix has four rows and three columns, so it is a 4 x 3 matrix. A vector is a matrix with one column and many rows: \[ \begin{bmatrix} a \\ b \\ c \\ d \\ e \\ \end{bmatrix} \] So vectors are a subset of matrices. The above vector is a 4 x 1 matrix. Notation and terms: \(A_{ij}\) refers to the element in the ith row and jth column of matrix A. A vector with 'n' rows is referred to as an 'n'-dimensional vector. \(v_i\) refers to the element in the ith row of the vector. In general, all our vectors and matrices will be 1-indexed. Note that for some programming languages, the arrays are 0-indexed. Matrices are usually denoted by uppercase names while vectors are lowercase. "Scalar" means that an object is a single value, not a vector or matrix. ℝ refers to the set of scalar real numbers. ℝ𝕟 refers to the set of n-dimensional vectors of real numbers. 1234567891011121314151617% The ; denotes we are going back to a new row.A = [1, 2, 3; 4, 5, 6; 7, 8, 9; 10, 11, 12]% Initialize a vector v = [1;2;3] % Get the dimension of the matrix A where m = rows and n = columns[m,n] = size(A)% You could also store it this waydim_A = size(A)% Get the dimension of the vector v dim_v = size(v)% Now let's index into the 2nd row 3rd column of matrix AA_23 = A(2,3) Addition and Scalar Multiplication Addition and subtraction are element-wise, so you simply add or subtract each corresponding element: \[ \begin{equation} \begin{bmatrix} a &amp; b \\ c &amp; d \\ \end{bmatrix} + \begin{bmatrix} w &amp; x \\ y &amp; z \\ \end{bmatrix} = \begin{bmatrix} a+w &amp; b+x \\ c+y &amp; d+z \\ \end{bmatrix} \end{equation} \] Subtracting Matrices: \[ \begin{equation} \begin{bmatrix} a &amp; b \\ c &amp; d \\ \end{bmatrix} - \begin{bmatrix} w &amp; x \\ y &amp; z \\ \end{bmatrix} = \begin{bmatrix} a-w &amp; b-x \\ c-y &amp; d-z \\ \end{bmatrix} \end{equation} \] To add or subtract two matrices, their dimensions must be the same. In scalar multiplication, we simply multiply every element by the scalar value: \[ \begin{equation} \begin{bmatrix} a &amp; b \\ c &amp; d \\ \end{bmatrix} * x = \begin{bmatrix} a*x &amp; b*x \\ c*x &amp; d*x \\ \end{bmatrix} \end{equation} \] In scalar division, we simply divide every element by the scalar value: \[ \begin{equation} \begin{bmatrix} a &amp; b \\ c &amp; d \\ \end{bmatrix} / x = \begin{bmatrix} a/x &amp; b/x \\ c/x &amp; d/x \\ \end{bmatrix} \end{equation} \] Experiment below with the Octave/Matlab commands for matrix addition and scalar multiplication. Feel free to try out different commands. Try to write out your answers for each command before running the cell below. 123456789101112131415161718192021% Initialize matrix A and B A = [1, 2, 4; 5, 3, 2]B = [1, 3, 4; 1, 1, 1]% Initialize constant s s = 2% See how element-wise addition worksadd_AB = A + B % See how element-wise subtraction workssub_AB = A - B% See how scalar multiplication worksmult_As = A * s% Divide A by sdiv_As = A / s% What happens if we have a Matrix + scalar?add_As = A + s Matrix-Vector Multiplication \[ \begin{equation} \begin{bmatrix} a &amp; b\\ c &amp; d\\ e &amp; f\\ \end{bmatrix} *\begin{bmatrix} x \\ y \\ \end{bmatrix} = \begin{bmatrix} a*x &amp; b*y\\ c*x &amp; d*y\\ e*x &amp; f*y\\ \end{bmatrix} \end{equation} \] Below is an example of a matrix-vector multiplication. Make sure you understand how the multiplication works. Feel free to try different matrix-vector multiplications. 12345678% Initialize matrix A A = [1, 2, 3; 4, 5, 6;7, 8, 9] % Initialize vector v v = [1; 1; 1] % Multiply A * vAv = A * v Matrix-Matrix Multiplication We multiply two matrices by breaking it into several vector multiplications and concatenating the result. \[ \begin{equation} \begin{bmatrix} a &amp; b\\ c &amp; d\\ e &amp; f\\ \end{bmatrix} *\begin{bmatrix} w &amp; x \\ y &amp; z \\ \end{bmatrix} = \begin{bmatrix} a∗w+b∗y &amp; a∗x+b∗z \\ c∗w+d∗y &amp; c∗x+d∗z \\ e∗w+f∗y &amp; e∗x+f∗z \\ \end{bmatrix} \end{equation} \] An m x n matrix multiplied by an n x o matrix results in an m x o matrix. In the above example, a 3 x 2 matrix times a 2 x 2 matrix resulted in a 3 x 2 matrix. To multiply two matrices, the number of columns of the first matrix must equal the number of rows of the second matrix. For example: 12345678910% Initialize a 3 by 2 matrix A = [1, 2; 3, 4;5, 6]% Initialize a 2 by 1 matrix B = [1; 2] % We expect a resulting matrix of (3 by 2)*(2 by 1) = (3 by 1) mult_AB = A*B% Make sure you understand why we got that result Matrix Multiplication Properties Matrices are not commutative: A∗B≠B∗A Matrices are associative: (A∗B)∗C=A∗(B∗C) The identity matrix, when multiplied by any matrix of the same dimensions, results in the original matrix. It's just like multiplying numbers by 1. The identity matrix simply has 1's on the diagonal (upper left to lower right diagonal) and 0's elsewhere. \[ \begin{bmatrix} 1 &amp; 0 &amp; 0 \\ 0 &amp; 1 &amp; 0 \\ 0 &amp; 0 &amp; 1 \\ \end{bmatrix} \] When multiplying the identity matrix after some matrix (A∗I), the square identity matrix's dimension should match the other matrix's columns. When multiplying the identity matrix before some other matrix (I∗A), the square identity matrix's dimension should match the other matrix's rows. 12345678910111213141516171819202122% Initialize random matrices A and B A = [1,2;4,5]B = [1,1;0,2]% Initialize a 2 by 2 identity matrixI = eye(2)% The above notation is the same as I = [1,0;0,1]% What happens when we multiply I*A ? IA = I*A % How about A*I ? AI = A*I % Compute A*B AB = A*B % Is it equal to B*A? BA = B*A % Note that IA = AI but AB != BA Inverse and Transpose \[ \begin{equation} A = \begin{bmatrix} a &amp; b\\ c &amp; d\\ e &amp; f\\ \end{bmatrix} \end{equation} \] In other words: \[A_{ij}=A^T_{ji}\] 1234567891011% Initialize matrix A A = [1,2,0;0,5,6;7,0,9]% Transpose A A_trans = A' % Take the inverse of A A_inv = inv(A)% What is A^(-1)*A? A_invA = inv(A)*A multivariate Linear Analytically Multiple Features Linear regression with multiple variables is also known as "multivariate linear regression". We now introduce notation for equations where we can have any number of input variables. \(x^{(i)}_j\) = value of feature j in the \(i^{th}\) training example \(x^{(i)}\) =the input (features) of the \(i^{th}\) training example m = the number of training examples n = the number of features The multivariable form of the hypothesis function accommodating these multiple features is as follows: \[h_θ(x)=θ_0+θ_1x1+θ_2x_2+θ_3x_3+\cdots+θ_nx_n\] In order to develop intuition about this function, we can think about θ0 as the basic price of a house, θ1 as the price per square meter, θ2 as the price per floor, etc. x1 will be the number of square meters in the house, x2 the number of floors, etc. Using the definition of matrix multiplication, our multivariable hypothesis function can be concisely represented as: \[ \begin{equation} h_θ(x) = \left[ \begin{array}{ccc} θ_0 &amp; θ_1 &amp; \cdots &amp; θ_n \end{array} \right] \left[ \begin{array}{ccc} θ_0 \\ θ_1 \\ \vdots \\ θ_n \end{array} \right] = θ^Tx \end{equation} \] This is a vectorization of our hypothesis function for one training example; see the lessons on vectorization to learn more. Remark: Note that for convenience reasons in this course we assume \(x^{(i)}_0=1\) for (i∈1,…,m). This allows us to do matrix operations with theta and x. Hence making the two vectors 'θ' and \(x^{(i)}\) match each other element-wise (that is, have the same number of elements: n+1).] Gradient Descent For Multiple Variables The gradient descent equation itself is generally the same form; we just have to repeat it for our 'n' features: repeat until convergence:{ \[ \begin{align*} &amp; θ_0:=θ_0−α\frac{1}{m}\sum_{i=1}^m(h_θ(x^{(i)})−y^{(i)}) \cdot{x^{(i)}_0}\\ &amp; θ_1:=θ_1−α\frac{1}{m}\sum_{i=1}^m(h_θ(x^{(i)})−y^{(i)}) \cdot{x^{(i)}_1}\\ &amp; θ_2:=θ_2−α\frac{1}{m}\sum_{i=1}^m(h_θ(x^{(i)})−y^{(i)}) \cdot{x^{(i)}_2}\\ &amp; \cdots \end{align*} \] } In other words: repeat until convergence: { $$ θ_j:=θ_0−α_{i=1}m(h_θ(x{(i)})−y^{(i)}) for j := 0n $$ } The following image compares gradient descent with one variable to gradient descent with multiple variables: Screen Shot 2018-03-04 at 18.10.50.png Gradient Descent in Practice I - Feature Scaling We can speed up gradient descent by having each of our input values in roughly the same range. This is because θ will descend quickly on small ranges and slowly on large ranges, and so will oscillate inefficiently down to the optimum when the variables are very uneven. The way to prevent this is to modify the ranges of our input variables so that they are all roughly the same. Ideally: \[−1 ≤ x_{(i)} ≤ 1\] or \[−0.5 ≤ x_{(i)} ≤ 0.5\] These aren't exact requirements; we are only trying to speed things up. The goal is to get all input variables into roughly one of these ranges, give or take a few. Two techniques to help with this are feature scaling and mean normalization. Feature scaling involves dividing the input values by the range (i.e. the maximum value minus the minimum value) of the input variable, resulting in a new range of just 1. Mean normalization involves subtracting the average value for an input variable from the values for that input variable resulting in a new average value for the input variable of just zero. To implement both of these techniques, adjust your input values as shown in this formula: \[x_i:=\frac{x_i−μ_i}{si}\] Where μi is the average of all the values for feature (i) and si is the range of values (max - min), or si is the standard deviation. For example, if xi represents housing prices with a range of 100 to 2000 and a mean value of 1000, then, \(x_i:=\frac{price−1000}{1900}\). Gradient Descent in Practice II - Learning Rate Debugging gradient descent. Make a plot with number of iterations on the x-axis. Now plot the cost function, \(J_{(θ)}\) over the number of iterations of gradient descent. If \(J_{(θ)}\) ever increases, then you probably need to decrease α. Automatic convergence test. Declare convergence if \(J_{(θ)}\) decreases by less than E in one iteration, where E is some small value such as 10−3. However in practice it's difficult to choose this threshold value. Screen Shot 2018-03-04 at 18.28.02.png It has been proven that if learning rate α is sufficiently small, then \(J_{(θ)}\) will decrease on every iteration. Screen Shot 2018-03-04 at 18.28.12.png To summarize: If α is too small: slow convergence. If α is too large: may not decrease on every iteration and thus may not converge. Features and Polynomial Regression We can improve our features and the form of our hypothesis function in a couple different ways. We can combine multiple features into one. For example, we can combine \(x_1\) and \(x_2\) into a new feature x3 by taking \(x_1⋅x_2\). Polynomial Regression Our hypothesis function need not be linear (a straight line) if that does not fit the data well. We can change the behavior or curve of our hypothesis function by making it a quadratic, cubic or square root function (or any other form). For example, if our hypothesis function is \(h_θ(x)=θ_0+θ_1x_1\) then we can create additional features based on x1, to get the quadratic function \(h_θ(x)=θ_0+θ_1x_1+θ_2x^2_1\) or the cubic function \(hθ(x)=θ_0+θ_1x_1+θ_2x^2_1+θ_3x^3_1\) In the cubic version, we have created new features \(x_2\) and \(x_3\) where \(x_2=x^2_1\) and \(x_3=x^3_1\). To make it a square root function, we could do: \(h_θ(x)=θ_0+θ_1x_1+θ_2\sqrt{x_1}\) One important thing to keep in mind is, if you choose your features this way then feature scaling becomes very important. eg. if \(x_1\) has range 1 - 1000 then range of \(x^2_1\) becomes 1 - 1000000 and that of \(x^3_1\) becomes 1 - 1000000000 Normal Equation Gradient descent gives one way of minimizing J. Let’s discuss a second way of doing so, this time performing the minimization explicitly and without resorting to an iterative algorithm. In the "Normal Equation" method, we will minimize J by explicitly taking its derivatives with respect to the θj ’s, and setting them to zero. This allows us to find the optimum theta without iteration. The normal equation formula is given below: \[θ=(X^TX)^{−1}X^Ty\] Screen Shot 2018-03-04 at 18.43.29.png There is no need to do feature scaling with the normal equation. The following is a comparison of gradient descent and the normal equation: |Gradient Descent|Normal Equation| |:---|:---| |Need to choose alpha| No need to choose alpha| |Needs many iterations| No need to iterate| |\(O(kn^2)\)|\(O(n^3)\) | need to calculate inverse of \(X^TX\)| |Works well when n is large|Slow if n is very large| With the normal equation, computing the inversion has complexity \(O(n^3)\). So if we have a very large number of features, the normal equation will be slow. In practice, when n exceeds 10,000 it might be a good time to go from a normal solution to an iterative process. Normal Equation Noninvertibility When implementing the normal equation in octave we want to use the 'pinv' function rather than 'inv.' The 'pinv' function will give you a value of θ even if \(X^TX\) is not invertible. If \(X^TX\) is noninvertible, the common causes might be having : - Redundant features, where two features are very closely related (i.e. they are linearly dependent) - Too many features (e.g. m ≤ n). In this case, delete some features or use "regularization" (to be explained in a later lesson). Solutions to the above problems include deleting a feature that is linearly dependent with another or deleting one or more features when there are too many features. Logistic Regression Classification To attempt classification, one method is to use linear regression and map all predictions greater than 0.5 as a 1 and all less than 0.5 as a 0. However, this method doesn't work well because classification is not actually a linear function. The classification problem is just like the regression problem, except that the values we now want to predict take on only a small number of discrete values. For now, we will focus on the binary classification problem in which y can take on only two values, 0 and 1. (Most of what we say here will also generalize to the multiple-class case.) For instance, if we are trying to build a spam classifier for email, then \(x^{(i)}\) may be some features of a piece of email, and y may be 1 if it is a piece of spam mail, and 0 otherwise. Hence, y∈{0,1}. 0 is also called the negative class, and 1 the positive class, and they are sometimes also denoted by the symbols “-” and “+.” Given \(x^{(i)}\), the corresponding \(y^{(i)}\) is also called the label for the training example. Hypothesis Representation We could approach the classification problem ignoring the fact that y is discrete-valued, and use our old linear regression algorithm to try to predict y given x. However, it is easy to construct examples where this method performs very poorly. Intuitively, it also doesn’t make sense for hθ(x) to take values larger than 1 or smaller than 0 when we know that y ∈ {0, 1}. To fix this, let’s change the form for our hypotheses \(h_θ(x)\) to satisfy \(0≤h_θ(x)≤1\). This is accomplished by plugging \(θ^Tx\) into the Logistic Function. Our new form uses the "Sigmoid Function," also called the "Logistic Function": \[ \begin{align*} &amp; h_θ(x)=g(θ^Tx) \\ &amp; z=θ^Tx \\ &amp; g(z)=\frac{1}{1+e^{−z}} \\ \end{align*} \] The following image shows us what the sigmoid function looks like: Screen Shot 2018-03-04 at 21.58.35.png The function g(z), shown here, maps any real number to the (0, 1) interval, making it useful for transforming an arbitrary-valued function into a function better suited for classification. hθ(x) will give us the probability that our output is 1. For example, \(h_θ(x)=0.7\) gives us a probability of 70% that our output is 1. Our probability that our prediction is 0 is just the complement of our probability that it is 1 (e.g. if probability that it is 1 is 70%, then the probability that it is 0 is 30%). \[ \begin{align*} &amp; h_θ(x)=P(y=1|x;θ)=1−P(y=0|x;θ)\\ &amp; P(y=0|x;θ)+P(y=1|x;θ)=1 \end{align*} \] Decision Boundary In order to get our discrete 0 or 1 classification, we can translate the output of the hypothesis function as follows: \[ \begin{align*} &amp; hθ(x)≥0.5 \rightarrow y=1 \\ &amp; hθ(x)&lt;0.5 \rightarrow y=0 \end{align*} \] The way our logistic function g behaves is that when its input is greater than or equal to zero, its output is greater than or equal to 0.5: \[ \begin{align*} &amp; g(z) \ge 0.5 \\ &amp; when \ z \ge 0 \\ \end{align*} \] Remember. \[ \begin{align*} &amp; z=0,e^0=1 \Rightarrow g(z) = \frac{1}{2} \\ &amp; z \rightarrow \infty,e^{−\infty}→0 \Rightarrow g(z)=1 \\ &amp; z \rightarrow −\infty,e^{\infty} \rightarrow \infty \Rightarrow g(z)=0 \\ \end{align*} \] Again, the input to the sigmoid function g(z) (e.g. θTX) doesn't need to be linear, and could be a function that describes a circle (e.g. \(z=θ_0+θ_1x_2^1+θ_2x_2^2\)) or any shape to fit our data. Cost Function We cannot use the same cost function that we use for linear regression because the Logistic Function will cause the output to be wavy, causing many local optima. In other words, it will not be a convex function. Instead, our cost function for logistic regression looks like: \[ \begin{align*} &amp; J(\theta) = \frac{1}{m}\sum_{i=1}^{m}Cost(h_\theta(x^{(i)}),y^{(i)}) \\ &amp; Cost(hθ(x),y)=−log(h_θ(x)) &amp; \qquad if\ y = 1 \\ &amp; Cost(hθ(x),y)=−log(1−h_θ(x)) &amp; \qquad if\ y = 0 \\ \end{align*} \] When y = 1, we get the following plot for \(J(θ)\) vs \(h_θ(x)\): Screen Shot 2018-03-05 at 16.30.57.png Similarly, when y = 0, we get the following plot for \(J(θ)\) vs \(h_θ(x)\): Screen Shot 2018-03-05 at 16.31.25.png If our correct answer 'y' is 0, then the cost function will be 0 if our hypothesis function also outputs 0. If our hypothesis approaches 1, then the cost function will approach infinity. If our correct answer 'y' is 1, then the cost function will be 0 if our hypothesis function outputs 1. If our hypothesis approaches 0, then the cost function will approach infinity. Screen Shot 2018-03-05 at 16.38.30.png Note that writing the cost function in this way guarantees that J(θ) is convex for logistic regression. Simplified Cost Function and Gradient Descent We can compress our cost function's two conditional cases into one case: \[Cost(h_θ(x),y)=−ylog(h_θ(x))−(1−y)log(1−h_θ(x))\] Notice that when y is equal to 1, then the second term \((1−y)log(1−h_θ(x))\) will be zero and will not affect the result. If y is equal to 0, then the first term \(−ylog(h_θ(x))\) will be zero and will not affect the result. We can fully write out our entire cost function as follows: \[J(θ)=−\frac{1}{m}\sum_{i=1}^{m}[y^{(i)}log(h_θ(x^{(i)}))+(1−y^{(i)})log(1−h_θ(x^{(i)}))]\] Gradient Descent Remember that the general form of gradient descent is: \[Repeat \left\{ \theta_i := \theta_j - \alpha\frac{\partial}{\partial\theta_j}J(\theta)\right\} \] We can work out the derivative part using calculus to get: \[Repeat \left\{ \theta_i := \theta_j - \frac{\alpha}{m}\sum^m_{i=1}(h_\theta(x^{(i)})-y^{(i)})x_j^{(i)} \right\} \] Multiclass Classification: One-vs-all Now we will approach the classification of data when we have more than two categories. Instead of y = {0,1} we will expand our definition so that y = {0,1...n}. Since y = {0,1...n}, we divide our problem into n+1 (+1 because the index starts at 0) binary classification problems; in each one, we predict the probability that 'y' is a member of one of our classes. \[ \begin{align*} &amp;y \in \left\{0,1...n\right\} \\ &amp;h^{(0)}_θ(x)=P(y=0|x;θ) \\ &amp; h^{(1)}_θ(x)=P(y=1|x;θ) \\ &amp; \cdots \\ &amp; h^{(n)}_θ(x)=P(y=n|x;θ) \\ &amp; prediction = \max\limits_{i}(h^{(i)}_θ(x)) \end{align*} \] We are basically choosing one class and then lumping all the others into a single second class. We do this repeatedly, applying binary logistic regression to each case, and then use the hypothesis that returned the highest value as our prediction. The following image shows how one could classify 3 classes: Screen Shot 2018-03-05 at 16.59.52.png To summarize: Train a logistic regression classifier \(h_θ(x)\) for each class to predict the probability that y = i, To make a prediction on a new x, pick the class that maximizes \(h_θ(x)\). Solving the problem of Overfitting The Problem of Overfitting Consider the problem of predicting y from \(x \in R\). The leftmost figure below shows the result of fitting a \(y = θ_0+θ_1x\) to a dataset. We see that the data doesn’t really lie on straight line, and so the fit is not very good. Screen Shot 2018-03-05 at 17.05.11.png Instead, if we had added an extra feature \(x_2\) , and fit \(y=θ_0+θ_1x+θ_2x_2\) , then we obtain a slightly better fit to the data (See middle figure). Naively, it might seem that the more features we add, the better. However, there is also a danger in adding too many features: The rightmost figure is the result of fitting a 5th order polynomial \(y=\sum^5_{j=0}θ_jx_j\). We see that even though the fitted curve passes through the data perfectly, we would not expect this to be a very good predictor of, say, housing prices (y) for different living areas (x). Without formally defining what these terms mean, we’ll say the figure on the left shows an instance of underfitting—in which the data clearly shows structure not captured by the model—and the figure on the right is an example of overfitting. Underfitting, or high bias, is when the form of our hypothesis function h maps poorly to the trend of the data. It is usually caused by a function that is too simple or uses too few features. Overfitting, or high variance, is caused by a hypothesis function that fits the available data but does not generalize well to predict new data. It is usually caused by a complicated function that creates a lot of unnecessary curves and angles unrelated to the data. This terminology is applied to both linear and logistic regression. There are two main options to address the issue of overfitting: - Reduce the number of features: + Manually select which features to keep. + Use a model selection algorithm (studied later in the course). - Regularization + Keep all the features, but reduce the magnitude of parameters \(θ_j\). + Regularization works well when we have a lot of slightly useful features. Cost Function If we have overfitting from our hypothesis function, we can reduce the weight that some of the terms in our function carry by increasing their cost. Say we wanted to make the following function more quadratic: \[θ_0+θ_1x+θ_2x_2+θ_3x_3+θ_4x_4\] We'll want to eliminate the influence of \(θ_3x_3\) and \(θ_4x_4\) . Without actually getting rid of these features or changing the form of our hypothesis, we can instead modify our cost function: \[min_θ\frac{1}{2m}\sum^m_{i=1}(h_θ(x^{(i)})−y^{(i)})^2+1000\cdotθ^2_3+1000\cdotθ^2_4\] We've added two extra terms at the end to inflate the cost of \(θ_3\) and \(θ_4\). Now, in order for the cost function to get close to zero, we will have to reduce the values of \(θ_3\) and \(θ_4\) to near zero. This will in turn greatly reduce the values of \(θ_3x^3\) and \(θ_4x^4\) in our hypothesis function. As a result, we see that the new hypothesis (depicted by the pink curve) looks like a quadratic function but fits the data better due to the extra small terms \(θ_3x^3\) and \(θ_4x^4\). Screen Shot 2018-03-05 at 17.50.15.png We could also regularize all of our theta parameters in a single summation as: \[min_θ\frac{1}{2m}\left[\sum^m_{i=1}(h_θ(x^{(i)})−y^{(i)})^2+\lambda\sum_{j=1}^{n}\theta_j^2\right]\] The λ, or lambda, is the regularization parameter. It determines how much the costs of our theta parameters are inflated. Using the above cost function with the extra summation, we can smooth the output of our hypothesis function to reduce overfitting. If lambda is chosen to be too large, it may smooth out the function too much and cause underfitting. Hence, what would happen if λ=0 or is too small ? Regularized Linear Regression We can apply regularization to both linear regression and logistic regression. We will approach linear regression first. Gradient Descent We will modify our gradient descent function to separate out \(θ_0\) from the rest of the parameters because we do not want to penalize \(θ_0\). repeat until convergence:{ \[ \begin{align*} &amp; θ_0:=θ_0−α\frac{1}{m}\sum_{i=1}^m(h_θ(x^{(i)})−y^{(i)})x_0^{(i)} \\ &amp; θ_j:=θ_j−α\left[\left(\frac{1}{m}\sum_{i=1}^m(h_θ(x^{(i)})−y^{(i)})x_j^{(i)}\right) + \frac{\lambda}{m}\theta_j\right] \qquad j \in \left\{1,2...n\right\} \end{align*} \] } The term \(\frac{λ}{m}θ_j\) performs our regularization. With some manipulation our update rule can also be represented as: \[θ_j:=θ_j(1−α\frac{λ}{m})−α\frac{1}{m}\sum^m_{i=1}(h_θ(x^{(i)})−y^{(i)})x^{(i)}_j\] The first term in the above equation,\(1−α\frac{λ}{m}\) will always be less than 1. Intuitively you can see it as reducing the value of \(θ_j\) by some amount on every update. Notice that the second term is now exactly the same as it was before. Normal Equation Now let's approach regularization using the alternate method of the non-iterative normal equation. To add in regularization, the equation is the same as our original, except that we add another term inside the parentheses: \[ \begin{align*} &amp; \theta = \left( X^TX + \lambda \cdot L\right)^{(-1)}X^Ty \\ &amp; where \ L = \begin{bmatrix} 0 &amp; \\ &amp; 1 \\ &amp; &amp; 1 \\ &amp; &amp; &amp; \ddots \\ &amp; &amp; &amp; &amp; 1 \\ \end{bmatrix} \end{align*} \] L is a matrix with 0 at the top left and 1's down the diagonal, with 0's everywhere else. It should have dimension (n+1)×(n+1). Intuitively, this is the identity matrix (though we are not including \(x_0\)), multiplied with a single real number . Recall that if m &lt; n, then \(X^TX\) is non-invertible. However, when we add the term \(\lambda \cdot l\), then \(X^TX + \lambda⋅L\) becomes invertible. Regularized Logistic Regression We can regularize logistic regression in a similar way that we regularize linear regression. As a result, we can avoid overfitting. The following image shows how the regularized function, displayed by the pink line, is less likely to overfit than the non-regularized function represented by the blue line: Screen Shot 2018-03-05 at 20.01.22.png Cost Function Recall that our cost function for logistic regression was: \[J(θ)=−\frac{1}{m}\sum_{i=1}^{m}[y^{(i)}log(h_θ(x^{(i)}))+(1−y^{(i)})log(1−h_θ(x^{(i)}))]\] We can regularize this equation by adding a term to the end: \[J(θ)=−\frac{1}{m}\sum_{i=1}^{m}[y^{(i)}log(h_θ(x^{(i)}))+(1−y^{(i)})log(1−h_θ(x^{(i)}))] + \frac{\lambda}{2m}\sum_{j=1}^{n}\theta_j^2\] he second sum,\(\sum^n_{j=1}θ^2_j\) means to explicitly exclude the bias term, \(θ_0\). I.e. the θ vector is indexed from 0 to n (holding n+1 values, \(θ_0\) through \(θ_n\)), and this sum explicitly skips \(θ_0\), by running from 1 to n, skipping 0. Thus, when computing the equation, we should continuously update the two following equations: Screen Shot 2018-03-05 at 22.47.16.png Neural Networks Model Representation Model Representation I Let's examine how we will represent a hypothesis function using neural networks. At a very simple level, neurons are basically computational units that take inputs (dendrites) as electrical inputs (called "spikes") that are channeled to outputs (axons). In our model, our dendrites are like the input features \(x_1 \dots x_n\), and the output is the result of our hypothesis function. In this model our \(x_0\) input node is sometimes called the "bias unit." It is always equal to 1. In neural networks, we use the same logistic function as in classification, \(\frac{1}{1+e^{−θ^Tx}}\), yet we sometimes call it a sigmoid (logistic) activation function. In this situation, our "theta" parameters are sometimes called "weights". Visually, a simplistic representation looks like: \[ \begin{equation} \begin{bmatrix} x_0\\ x_1\\ x_2\\ x_3\\ \end{bmatrix} \rightarrow\begin{bmatrix} a_1^{(2)}\\ a_2^{(2)}\\ a_3^{(2)}\\ \end{bmatrix}\rightarrow h_\theta(x) \end{equation} \] The values for each of the "activation" nodes is obtained as follows: \[ \begin{align*} &amp; a^{(2)}_1=g(Θ^{(1)}_{10}x_0+Θ^{(1)}_{11}x_1+Θ^{(1)}_{12}x_2+Θ^{(1)}_{13}x_3) \\ &amp; a^{(2)}_2=g(Θ^{(1)}_{20}x_0+Θ^{(1)}_{21}x_1+Θ^{(1)}_{22}x_2+Θ^{(1)}_{23}x_3) \\ &amp; a^{(2)}_3=g(Θ^{(1)}_{30}x_0+Θ^{(1)}_{31}x_1+Θ^{(1)}_{32}x_2+Θ^{(1)}_{33}x_3) \\ &amp; h_Θ(x)=a^{(3)}_1=g(Θ^{(2)}_{10}a^{(2)}_0+Θ^{(2)}_{11}a^{(2)}_1+Θ^{(2)}_{12}a^{(2)}_2+Θ^{(2)}_{13}a^{(2)}_3) \end{align*} \] This is saying that we compute our activation nodes by using a 3×4 matrix of parameters. We apply each row of the parameters to our inputs to obtain the value for one activation node. Our hypothesis output is the logistic function applied to the sum of the values of our activation nodes, which have been multiplied by yet another parameter matrix \(Θ^{(2)}\) containing the weights for our second layer of nodes. Each layer gets its own matrix of weights, \(Θ^{(j)}\). The dimensions of these matrices of weights is determined as follows: If network has \(s_j\) units in layer j and \(s_{j+1}\) units in layer j+1, then \(Θ^{(j)}\) will be of dimension \(s_{j+1}×(s_j+1)\). The +1 comes from the addition in \(Θ^{(j)}\) of the "bias nodes," \(x_0\) and \(Θ^{(j)}_0\). In other words the output nodes will not include the bias nodes while the inputs will. The following image summarizes our model representation: Screen Shot 2018-03-05 at 23.27.21.png Example: If layer 1 has 2 input nodes and layer 2 has 4 activation nodes. Dimension of \(Θ^{(1)}\) is going to be 4×3 where \(s_j=2\) and \(s_{j+1}=4\), so \(s_{j+1}×(s_j+1)=4×3\). Examples and Intuitions I A simple example of applying neural networks is by predicting x1 AND x2, which is the logical 'and' operator and is only true if both x1 and x2 are 1. The graph of our functions will look like: \[ \begin{equation} \begin{bmatrix} x_0\\ x_1\\ x_2\\ x_3\\ \end{bmatrix} \rightarrow\begin{bmatrix} g(z^{(2)})\\ \end{bmatrix}\rightarrow h_\theta(x) \end{equation} \] Remember that x0 is our bias variable and is always 1. Let's set our first theta matrix as: \[\theta^{(1)} = \left[ -30 \quad 20 \quad 20 \right]\] This will cause the output of our hypothesis to only be positive if both \(x_1\) and \(x_2\) are 1. In other words: \[ \begin{align*} &amp; hΘ(x)=g(−30+20x1+20x2)\\ &amp; x1=0 \ and \ x2=0 \ then \ g(−30) \approx 0 \\ &amp; x1=0 \ and \ x2=1 \ then \ g(−10) \approx 0 \\ &amp; x1=1 \ and \ x2=0 \ then \ g(−10) \approx 0 \\ &amp; x1=1 \ and \ x2=1 \ then \ g(10) \approx 1 \\ \end{align*} \] So we have constructed one of the fundamental operations in computers by using a small neural network rather than using an actual AND gate. Neural networks can also be used to simulate all the other logical gates. The following is an example of the logical operator 'OR', meaning either \(x_1\) is true or \(x_2\) is true, or both: Screen Shot 2018-03-06 at 00.16.18.png Screen Shot 2018-03-06 at 00.16.24.png Examples and Intuitions II The \(Θ^{(1)}\) matrices for AND, NOR, and OR are: \[ \begin{align*} &amp; AND: &amp; \theta^{(1)} = \left[ -30 \quad 20 \quad 20 \right] \\ &amp; NOR: &amp;\theta^{(1)} = \left[ 10 \quad -20 \quad -20 \right] \\ &amp; OR: &amp; \theta^{(1)} = \left[ -10 \quad 20 \quad 20 \right] \\ \end{align*} \] We can combine these to get the XNOR logical operator (which gives 1 if x1 and x2 are both 0 or both 1). \[ \begin{equation} \begin{bmatrix} x_0\\ x_1\\ x_2\\ \end{bmatrix} \rightarrow\begin{bmatrix} a_1^{(2)}\\ a_2^{(2)}\\ \end{bmatrix}\rightarrow\begin{bmatrix} a^{(3)}\\ \end{bmatrix} \rightarrow h_\theta(x) \end{equation} \] For the transition between the first and second layer, we'll use a \(Θ^(1)\) matrix that combines the values for AND and NOR: \[ \begin{equation} \theta^{(1)} = \begin{bmatrix} &amp; -30 &amp; 20 &amp; 20\\ &amp; 10 &amp; -20 &amp; -20\\ \end{bmatrix} \end{equation} \] For the transition between the second and third layer, we'll use a \(Θ^(2)\) matrix that uses the value for OR: \[ \begin{equation} \theta^{(1)} = \begin{bmatrix} &amp; -10 &amp; 20 &amp; 20\\ \end{bmatrix} \end{equation} \] Let's write out the values for all our nodes: \[ \begin{align*} &amp; a^{(2)}=g(Θ^{(1)}\cdot x) \\ &amp; a^{(3)}=g(Θ(2)\cdot a^{(2)}) \\ &amp; h_Θ^{(x)}=a^{(3)} \end{align*} \] And there we have the XNOR operator using a hidden layer with two nodes! The following summarizes the above algorithm: Multiclass Classification To classify data into multiple classes, we let our hypothesis function return a vector of values. Say we wanted to classify our data into one of four categories. We will use the following example to see how this classification is done. This algorithm takes as input an image and classifies it accordingly: Screen Shot 2018-03-06 at 00.36.26.png We can define our set of resulting classes as y: Each \(y^{(i)}\) represents a different image corresponding to either a car, pedestrian, truck, or motorcycle. The inner layers, each provide us with some new information which leads to our final hypothesis function. The setup looks like: Screen Shot 2018-03-06 at 00.36.39.png Our resulting hypothesis for one set of inputs may look like: In which case our resulting class is the third one down, or \(h_Θ(x)_3\), which represents the motorcycle. Cost Function Let's first define a few variables that we will need to use: - L = total number of layers in the network - \(s_l\) = number of units (not counting bias unit) in layer l - K = number of output units/classes Recall that in neural networks, we may have many output nodes. We denote \(h_Θ(x)_k\) as being a hypothesis that results in the kth output. Our cost function for neural networks is going to be a generalization of the one we used for logistic regression. Recall that the cost function for regularized logistic regression was: \[J(θ)=−\frac{1}{m}\sum_{i=1}^{m}[y^{(i)}log(h_θ(x^{(i)}))+(1−y^{(i)})log(1−h_θ(x^{(i)}))] + \frac{\lambda}{2m}\sum_{j=1}^{n}\theta_j^2\] For neural networks, it is going to be slightly more complicated: \[J(θ)=−\frac{1}{m}\sum_{i=1}^{m}\sum_{k=1}^{k}\left[y^{(i)}log(h_θ(x^{(i)}))+(1−y^{(i)})log(1−h_θ(x^{(i)}))\right] + \frac{\lambda}{2m}\sum_{j=1}^{L-1}\sum_{i=1}^{s_j}\sum_{j=1}^{s_j+1}\left(\Theta_{j,i}^{(l)} \right)\] We have added a few nested summations to account for our multiple output nodes. In the first part of the equation, before the square brackets, we have an additional nested summation that loops through the number of output nodes. In the regularization part, after the square brackets, we must account for multiple theta matrices. The number of columns in our current theta matrix is equal to the number of nodes in our current layer (including the bias unit). The number of rows in our current theta matrix is equal to the number of nodes in the next layer (excluding the bias unit). As before with logistic regression, we square every term. Note: the double sum simply adds up the logistic regression costs calculated for each cell in the output layer the triple sum simply adds up the squares of all the individual Θs in the entire network. the i in the triple sum does not refer to training example i 反向传播算法 ####引入delta 利用链式法则来更新权重你会发现其实这个方法简单，但过于冗长。由于更新的过程可以看做是从网络的输入层到输出层从前往后更新，每次更新的时候都需要重新计算节点的误差，因此会存在一些不必要的重复计算。其实对于已经计算完毕的节点我们完全可以直接拿来用，因此我们可以重新看待这个问题，从后往前更新。先更新后边的权重，之后再在此基础上利用更新后边的权重产生的中间值来更新较靠前的参数。这个中间变量就是下文要介绍的delta变量，一来简化公式，二来减少计算量，有点动态规划的赶脚。 接下来用事实说话，大家仔细观察一下在第四部分链式求导部分误差对于输出层的w11以及隐藏层的w11求偏导以及偏置的求偏导的过程，你会发现，三个公式存在相同的部分，同时隐藏层参数求偏导的过程会用到输出层参数求偏导的部分公式，这正是引入了中间变量delta的原因（其实红框的公式就是delta的定义）。 大家看一下经典书籍《神经网络与深度学习》中对于delta的描述为在第l层第j个神经元上的误差，定义为误差对于当前带权输入求偏导，数学公式如下： Screen Shot 2018-03-07 at 01.06.05.png Advice for Applying Machine Learning Evaluating a Hypothesis Once we have done some trouble shooting for errors in our predictions by: Getting more training examples Trying smaller sets of features Trying additional features Trying polynomial features Increasing or decreasing λ We can move on to evaluate our new hypothesis. A hypothesis may have a low error for the training examples but still be inaccurate (because of overfitting). Thus, to evaluate a hypothesis, given a dataset of training examples, we can split up the data into two sets: a training set and a test set. Typically, the training set consists of 70% of your data and the test set is the remaining 30%. The new procedure using these two sets is then: Learn Θ and minimize \(J_{train}(Θ)\) using the training set Compute the test set error \(J_{test}(Θ)\) The test set error For linear regression: \[J_{test}(Θ)=\frac{1}{2m_{test}}\sum^{m_{test}}_{i=1}(h_Θ(x^{(i)}_{test})−y^{(i)}_{test})^2\] For classification ~ Misclassification error (aka 0/1 misclassification error): \[ \begin{equation} err(h_Θ(x),y)= \left\{ \begin{aligned} \overset{.} 1 &amp; \quad if \ h_Θ(x)≥0.5 \ and \ y=0 \ or \ h_Θ(x)&lt;0.5 \ and \ y=1 \\ 0 &amp; \quad otherwise \end{aligned} \right. \end{equation} \] This gives us a binary 0 or 1 error result based on a misclassification. The average test error for the test set is: \[Test Error)=\frac{1}{m_{test}}\sum^{m_{test}}_{i=1}err(h_Θ(x^{(i)}_{test}),y^{(i)}_{test})^2\] This gives us the proportion of the test data that was misclassified. Model Selection and Train/Validation/Test Sets Just because a learning algorithm fits a training set well, that does not mean it is a good hypothesis. It could over fit and as a result your predictions on the test set would be poor. The error of your hypothesis as measured on the data set with which you trained the parameters will be lower than the error on any other data set. Given many models with different polynomial degrees, we can use a systematic approach to identify the 'best' function. In order to choose the model of your hypothesis, you can test each degree of polynomial and look at the error result. One way to break down our dataset into the three sets is: - Training set: 60% - Cross validation set: 20% - Test set: 20% We can now calculate three separate error values for the three different sets using the following method: Optimize the parameters in Θ using the training set for each polynomial degree. Find the polynomial degree d with the least error using the cross validation set. Estimate the generalization error using the test set with \(J_{test}(Θ^{(d)})\), (d = theta from polynomial with lower error); This way, the degree of the polynomial d has not been trained using the test set. Diagnosing Bias vs. Variance In this section we examine the relationship between the degree of the polynomial d and the underfitting or overfitting of our hypothesis. We need to distinguish whether bias or variance is the problem contributing to bad predictions. High bias is underfitting and high variance is overfitting. Ideally, we need to find a golden mean between these two. The training error will tend to decrease as we increase the degree d of the polynomial. At the same time, the cross validation error will tend to decrease as we increase d up to a point, and then it will increase as d is increased, forming a convex curve. High bias (underfitting): both \(J_{train}(Θ)\) and \(J_{CV}(Θ)\) will be high. Also, \(J_{CV}(Θ) \approx J_{train}(Θ)\). High variance (overfitting): \(J_{train}(Θ)\) will be low and \(J_{CV}(Θ)\) will be much greater than \(J_{train}(Θ)\). The is summarized in the figure below: Regularization and Bias/Variance In the figure above, we see that as λ increases, our fit becomes more rigid. On the other hand, as λ approaches 0, we tend to over overfit the data. So how do we choose our parameter λ to get it 'just right' ? In order to choose the model and the regularization term λ, we need to: Create a list of lambdas (i.e. \(λ \in \left\{0,0.01,0.02,0.04,0.08,0.16,0.32,0.64,1.28,2.56,5.12,10.24\right\}\)); Create a set of models with different degrees or any other variants. Iterate through the λs and for each λ go through all the models to learn some Θ. Compute the cross validation error using the learned Θ (computed with λ) on the \(J_{CV}(Θ)\) without regularization or λ = 0. Select the best combo that produces the lowest error on the cross validation set. Using the best combo Θ and λ, apply it on \(J_{test}(Θ)\) to see if it has a good generalization of the problem. Learning Curves Training an algorithm on a very few number of data points (such as 1, 2 or 3) will easily have 0 errors because we can always find a quadratic curve that touches exactly those number of points. Hence: - As the training set gets larger, the error for a quadratic function increases. - The error value will plateau out after a certain m, or training set size. Experiencing high bias: Low training set size: causes \(J_{train}(Θ)\) to be low and \(J_{CV}(Θ)\) to be high. Large training set size: causes both \(J_{train}(Θ)\) and \(J_CV(Θ)\) to be high with \(J_{train}(Θ) \approx J_{CV}(Θ)\). If a learning algorithm is suffering from high bias, getting more training data will not (by itself) help much. Screen Shot 2018-03-07 at 02.48.32.png Experiencing high variance: Low training set size: causes \(J_{train}(Θ)\) to be low and \(J_{CV}(Θ)\) to be high. Large training set size: \(J_{train}(Θ)\) increases with training set size and \(J_{CV}(Θ)\) continues to decrease without leveling off. Also, \(J_{train}(Θ) &lt; J_{CV}(Θ)\) but the difference between them remains significant. If a learning algorithm is suffering from high variance, getting more training data is likely to help. Deciding What to Do Next Revisited Our decision process can be broken down as follows: Getting more training examples: Fixes high variance Trying smaller sets of features: Fixes high variance Adding features: Fixes high bias Adding polynomial features: Fixes high bias Decreasing λ: Fixes high bias Increasing λ: Fixes high variance. Diagnosing Neural Networks A neural network with fewer parameters is prone to underfitting. It is also computationally cheaper. A large neural network with more parameters is prone to overfitting. It is also computationally expensive. In this case you can use regularization (increase λ) to address the overfitting. Using a single hidden layer is a good starting default. You can train your neural network on a number of hidden layers using your cross validation set. You can then select the one that performs best. Support Vector Machines from logistic to SVM Screen Shot 2018-03-07 at 11.30.56.png ###Cost Function recall the cost function of logistic Regression: \[\min_{\theta}−\frac{1}{m}\sum_{i=1}^{m}[y^{(i)}log(h_θ(x^{(i)}))+(1−y^{(i)})log(1−h_θ(x^{(i)}))] + \frac{\lambda}{2m}\sum_{j=1}^{n}\theta_j^2\] We replace some terms with new terms and delete some terms which will not influence the results: \[\min_{\theta}C\sum_{i=1}^{m}[y^{(i)}cost_1(\theta^Tx^{(i)}))+(1−y^{(i)})cost_0(\theta^Tx^{(i)})] + \frac{1}{2}\sum_{i=1}^{n}\theta_j^2\] Hypothesis \[ \begin{equation} h_{\theta} = \left\{ \begin{aligned} &amp; 0 \quad if \ \theta^TX &gt; 0 \\ &amp; 1 \quad otherwise \end{aligned} \right. \end{equation} \] Large Margin Intuion Vector inner product kernel 低维线性不可分到高维线性可分的简单例子 Screen Shot 2018-03-07 at 15.39.51.png 一个核函数把低维空间映射到高维空间的例子 下面这张图位于第一、二象限内。我们关注红色的门，以及“北京四合院”这几个字下面的紫色的字母。我们把红色的门上的点看成是“+”数据，紫色字母上的点看成是“-”数据，它们的横、纵坐标是两个特征。显然，在这个二维空间内，“+”“-”两类数据不是线性可分的。 我们现在考虑核函数，即“内积平方”。这里面是二维空间中的两个点。这个核函数对应着一个二维空间到三维空间的映射，它的表达式是：可以验证，在P这个映射下，原来二维空间中的图在三维空间中的像是这个样子： (前后轴为x轴，左右轴为y轴，上下轴为z轴）注意到绿色的平面可以完美地分割红色和紫色，也就是说，两类数据在三维空间中变成线性可分的了。而三维中的这个判决边界，再映射回二维空间中是这样的： 这是一条双曲线，它不是线性的。 核函数的作用就是隐含着一个从低维空间到高维空间的映射，而这个映射可以把低维空间中线性不可分的两类点变成线性可分的。当然，我举的这个具体例子强烈地依赖于数据在原始空间中的位置。事实中使用的核函数往往比这个例子复杂得多。它们对应的映射并不一定能够显式地表达出来；它们映射到的高维空间的维数也比我举的例子（三维）高得多，甚至是无穷维的。这样，就可以期待原来并不线性可分的两类点变成线性可分的了。 SVM or Logistic Regression Screen Shot 2018-03-07 at 15.42.11.png 如果特征维数很高，往往线性可分（SVM解决非线性分类问题的思路就是将样本映射到更高维的特征空间中），可以采用LR或者线性核的SVM； 如果样本数量很多，由于求解最优化问题的时候，目标函数涉及两两样本计算内积，使用高斯核明显计算量会大于线性核，所以手动添加一些特征，使得线性可分，然后可以用LR或者线性核的SVM； 如果不满足上述两点，即特征维数少，样本数量正常，可以使用高斯核的SVM。 Clustering K-means algorithm K-means算是一个很简单的聚类算法，而聚类与决策树、SVM等不同，是一种无监督的学习，所谓无监督学习（Unsupervised learning）是和监督学习相对应的，不同于监督学习，无监督学习所给的训练集是不包含标签的，所有数据集都只包括特征xi 而没有标签yi 。 聚类的主要目的就是将这些没有标签的数据分为N个簇(cluster)，其主要的应用有市场划分、社交网络分析、天文学中的数据分析等等。 K-Means的描述如下： 先对参数进行说明： \(x^{(i)}\)为第i个数据点； \(c^{(i)}\) 为x^{(i)}的簇； \(u_j\)为第j个簇的质心点； 在对算法进行说明： 首先需要初始化质心点，在K-Means中，通常采用随机的方法对质心点进行初始化。更好的办法是：随机选择m(m&gt;k)个数据，再从中选择k个数据点作为质心点； 第一个for循环主要用于给数据点\(x^{(i)}\)赋值\(c^{(i)}\)，称为 cluster assignment steps，对每一个数据点，都会计算她与所有质心点的距离，而后将数据点分配到与它距离最近的簇； 第二个for循环主要用于更新质心点的位置，称为move centroid steps，而\(u_j\)这里的计算公式所代表的意思就是，分母：统计所有\(c_i=j\)的点的个数；分子是所有\(c_i=j\)的点的坐标和。那整体的意思就很明确了，就是求这些点的平均值，作为新的质心点的位置。 当c和u收敛之后，就可以结束整个迭代过程。下面看一个实例： 优化目标 在上一部分中，我们说最终的目的是要达到一个收敛，那我们就用一个失真函数（distortion function）来衡量。 J(c,u)实际上是一个单调递减的函数，且是一个非凸函数，只要我们能找到拐点，那我们就已经达到了收敛，又称这种方法为elbow function。偶尔也有可能陷入局部最优情况，或出现震荡情况，这样一定是有问题了。 Screen Shot 2018-03-07 at 16.23.13.png ####总结 K-Means虽然简单，容易实现，但是也会收敛到局部最小值，这种情况下可以采用K-Means的改进算法：二分K-均值算法。算法的思想就是：首先将所有点做为一个簇，然后将该簇一分为二。之后选择其中一个簇进行继续划分，选择哪一个簇进行划分则取决于对其划分是否可以最大程度降低SSE的值，不断划分直到达到用户所指定的K值。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#! /usr/bin/env python# -*-coding:utf8 -*-from numpy import *def loadDataSet(fileName): dataMat = [] fr = open(fileName) for line in fr.readlines(): curLine = line.strip().split('/t') fltLine = map(float, curLine) dataMat.append(fltLine) return dataMatdef distEclud(vecA, vecB): return sqrt(sum(power(vecA - vecB), 2))def randCent(dataSet, k): n = shape(dataSet)[1] centroids = mat(zeros(k,n)) for j in range(n): minJ = min(dataSet[:, j]) rangeJ = float(max(dataSet[:, j]) - minJ) centroids[:, j] = minJ + rangeJ*random.rand(k, 1) return centroidsdef kMeans(dataSet, k, distMeas = distEclud, createCent = randCent): # 确定数据集的大小 m = shape(dataSet)[0] # 建立矩阵来存储c(i)和x(i)距离u(c(i))的值 clusterAssment = mat(zeros(m,2)) #随机初始化质心 centroids= createCent(dataSet, k) # 设置标志位 clusterChanged = True while clusterChanged: clusterChanged = False for i in range(m): minDist = inf; minIndex = -1 for j in range(k): distJI = distMeas(centroids[k, :], dataSet[i, :]) if distJI &lt; minDist : minDist = distJI; minIndex = j if clusterAssment[i, 0] != minIndex: clusterChanged = True clusterAssment[i, :] = minIndex,minDist**2 print centroids for cent in range(k): ptsInClust = dataSet[nonzero(clusterAssment[:, 0].A == cent)[0]] centroids[cent, :] = mean(ptsInClust, axis=0) return centroids, clusterAssment Dimensionality Reducion why we need to do Dimensionality Reducion? - data compression - visually ###PCA实例 现在假设有一组数据如下： 行代表了样例，列代表特征，这里有10个样例，每个样例两个特征。可以这样认为，有10篇文档，x是10篇文档中“learn”出现的TF-IDF，y是10篇文档中“study”出现的TF-IDF。 分别求x和y的平均值，然后对于所有的样例，都减去对应的均值。这里x的均值是1.81，y的均值是1.91，那么一个样例减去均值后即为（0.69,0.49），得到 求特征协方差矩阵，如果数据是3维，那么协方差矩阵是： 这里只有x和y，求解得 对角线上分别是x和y的方差，非对角线上是协方差。协方差是衡量两个变量同时变化的变化程度。协方差大于0表示x和y若一个增，另一个也增；小于0表示一个增，一个减。如果ｘ和ｙ是统计独立的，那么二者之间的协方差就是０；但是协方差是０，并不能说明ｘ和ｙ是独立的。协方差绝对值越大，两者对彼此的影响越大，反之越小。协方差是没有单位的量，因此，如果同样的两个变量所采用的量纲发生变化，它们的协方差也会产生树枝上的变化。 求协方差的特征值和特征向量，得到： 上面是两个特征值，下面是对应的特征向量，特征值0.0490833989对应特征向量为，这里的特征向量都归一化为单位向量。 将特征值按照从大到小的顺序排序，选择其中最大的k个，然后将其对应的k个特征向量分别作为列向量组成特征向量矩阵。这里特征值只有两个，我们选择其中最大的那个，这里是1.28402771，对应的特征向量是(-0.677873399, -0.735178656)T。 第五步，将样本点投影到选取的特征向量上。假设样例数为m，特征数为n，减去均值后的样本矩阵为DataAdjust(mn)，协方差矩阵是nn，选取的k个特征向量组成的矩阵为EigenVectors(n*k)。那么投影后的数据FinalData为 FinalData(101) = DataAdjust(102矩阵) x 特征向量(-0.677873399, -0.735178656)T 得到的结果是： 这样，就将原始样例的n维特征变成了k维，这k维就是原始特征在k维上的投影。 上面的数据可以认为是learn和study特征融合为一个新的特征叫做LS特征，该特征基本上代表了这两个特征。上述过程如下图2描述： 正号表示预处理后的样本点，斜着的两条线就分别是正交的特征向量（由于协方差矩阵是对称的，因此其特征向量正交），最后一步的矩阵乘法就是将原始样本点分别往特征向量对应的轴上做投影。 pca的理解 Screen Shot 2018-03-07 at 17.48.06.png 在第一部分中，我们举了一个学生成绩的例子，里面的数据点是六维的，即每个观测值是6维空间中的一个点。我们希望将6维空间用低维空间表示。 先假定只有二维，即只有两个变量，它们由横坐标和纵坐标所代表；因此每个观测值都有相应于这两个坐标轴的两个坐标值；如果这些数据形成一个椭圆形状的点阵，那么这个椭圆有一个长轴和一个短轴。在短轴方向上，数据变化很少；在极端的情况，短轴如果退化成一点，那只有在长轴的方向才能够解释这些点的变化了；这样，由二维到一维的降维就自然完成了。 上图中，u1就是主成分方向，然后在二维空间中取和u1方向正交的方向，就是u2的方向。则n个数据在u1轴的离散程度最大（方差最大），数据在u1上的投影代表了原始数据的绝大部分信息，即使不考虑u2，信息损失也不多。而且，u1、u2不相关。只考虑u1时，二维降为一维。 椭圆的长短轴相差得越大，降维也越有道理。 PCA 算法的应用 Screen Shot 2018-03-07 at 17.39.44.png Screen Shot 2018-03-07 at 17.39.40.png Anomaly detection Gaussian (Normal) distribution Algorithm Algorithm evaluation Screen Shot 2018-03-08 at 10.46.44.png Anomaly detection VS. Supervised learning Choosing what features to use 主要思路是将非高斯分布的特征经过变换转换成高斯分布的特征 \[ eg. x \rightarrow log(x) \] Screen Shot 2018-03-08 at 10.54.55.png Error analysis for anomaly detection 利用误差分析寻找新特征 ##Recommender Systems 已知电影的特征\(x_1,x_2\)，对每一个用户拟合线性回归模型\(\theta^TX\), 此时每个电影是一个样本，优化目标是电影的评分。 已知用户对电影类型的喜好 \(\theta\), 对每一个用户，拟合线性回归模型 \(\theta^TX\), 优化目标是用户对电影的评分，因此可以求得X,即电影的特征 Collaborative filtering algorithm 根据用户之间的相似度来推荐 ##Large scale machine learning Stochastic gradient descent 每次只用一个样本来计算梯度 o ### Mini-batch gradient descent 每次利用 n 个样本来计算梯度 Online learning 抛弃固有数据集的概念，每次用新来的样本来更新梯度，然后抛弃这个样本。]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Course Note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Feasibility of Learning]]></title>
    <url>%2FFeasibility-of-Learning%2F2019%2F02%2F15%2F</url>
    <content type="text"><![CDATA[Feasibility of Learning 我们希望找到无限逼近实际函数f的假设函数g \(g(hypothesis) \approx f(real function)\) inside \(D\): sure! \(g(hypothesis) \approx f(real function)\) outside \(D\): No! (what we want) Hoeffding’s Inequality \[P(| \nu-\mu| &gt; \epsilon) \leqslant 2e^{-2\epsilon^{2}N}\] valid for all N and \(\epsilon\) does not depend on \(\mu\), no need to know \(\mu\) larger sample size N or looser gap \(\epsilon\) =&gt; higher probability for \(\nu \approx \mu\) Connection to Learning if large N, can probably infer unknow \(\| h(x) \neq f(x) \|\) by know \(\| h(x_{n} \neq y_n)\|\) \(E_{in}(h)\): 在已知的样本里，假设函数与实际函数不相等的概率。\(E_{out}(h)\): 在所有样本里，上述二者不相等的概率。 \[[|E_{in}(h) - E_{out}(h)| &gt; \epsilon] \leqslant 2e^{-2\epsilon^{2}N}\] \(E_{in}(h)\) small is a good choice, but \(E_{in}(h)\) is not always small. multiple h 掷硬币，求出现反面的概率。 bad sample 掷骰子150次，每次掷5下，有超过99%的概率会出现连续5次都是正面。 这就是一个bad sample，因为其使得\(E_{in}(h)\) far away \(E_{out}(h)\) \(E_{in}(h)\) = 0 \(E_{out}(h)\) = \(1/2\) 对于M个假设函数，出现 bad sample 的概率: 所有假设函数都是安全的 最优P为lowest \(E_{in}(h_{m})\)]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Course Note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Types of Learning]]></title>
    <url>%2FTypes-of-Learning%2F2019%2F02%2F15%2F</url>
    <content type="text"><![CDATA[Learning with Different Output Space \(\gamma\) Binary classification Y = {−1, +1} binary classification Multiclass Classification classify US coins (1c, 5c, 10c, 25c) by (size, mass) \(\gamma = {1c,5c,10c,25c}\),or \(\gamma = {1,2,··· ,K}\) (abstractly) binary classification: special case with K =2 Regression \(\gamma = \mathbb{R}\) or \(\gamma = [lower, upper] \subset \mathbb{R}\) (bounded regression) Structured Learning: Sequence Tagging Problem a fancy but complicated learning problem sentence -&gt; structure (class of each word) \(\gamma = \{PVN,PVP,NVN,PV,···\}\), not including VVVVV huge multiclass classification problem (\(structure \equiv hyperclass\)) without explicit class definition Learning with Different Data Label \(y_n\) Supervised learning every \(x_n\) comes with corresponding \(y_n\) Unsupervised learning clustering articles -&gt; topics consumer profiles -&gt; consumer groups density estimation: {xn} -&gt; density(x) i.e. traffic reports with location -&gt; dangerous areas outlier detection: {xn} -&gt; unusual(x) i.e. Internet logs -&gt; intrusion alert Semi-supervised learning leverage unlabeled data to avoid expensive labeling Reinforcement Learning Teach Your Dog: Say Sit Down cannot easily show the dog that \(y_n\) = sit when \(x_n\) = sit down but can punish to say \(\hat{y_n}\) = pee is wrong but can reward to say \(\hat{y_n}\) = sit is good learn with partial/implicit information (often sequentially) Learning with different Protocol \(f \rightarrow (x_n,y_n)\) Batch Learning batch supervised multiclass classification: learn from all known data Online Learning: hypothesis improves through receiving data instances sequentially Active Learning: Learning by ‘Asking’ improve hypothesis with fewer labels (hopefully) by asking questions strategically Learning with different Input Space \(\chi\) concrete features: each dimension of \(\chi \in \mathbb{R}\) represents sophisticated physical meaning Raw Features simple physical meaning; thus more difficult for ML than concrete features often need human or machines to convert to concrete ones Abstract Features: again need feature conversion/extraction/construction]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Course Note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Learning to answer Yes or No]]></title>
    <url>%2FLearning-to-answer-Yes-or-No%2F2019%2F02%2F15%2F</url>
    <content type="text"><![CDATA[What hypothesis set can we use? question.png A Simple Hypothesis Set: the "Perceptron" Perceptron in \(\mathbb{R}^2\) \[h(x) = sign(w_0 + w_1x_1 + w_2x_2)\] features x: points on the plane (or points in \(\mathbb{R}^d\) ) labels y: (+1), × (-1) hypothesis h: lines (or hyperplanes in \(\mathbb{R}^d\) ),positive on one side of a line, negative on the other side different line classifies simples differently perceptrons &lt;=&gt; linear (binary) classifiers Select g from \(\mathscr{H}\) want: \(g \approx f\) (hard when f unknown) almost necessary: \(g \approx f\) on D, ideally \(g(x_n) = f(x_n) = y_n\) difficult: H is of infinite size idea: start from some \(g_0\), and correct its mistakes on \(D\) Perceptron Learning Algorithm if PLA halts (i.e. no more mistakes), (necessary condition) \(D\) allows some w to make no mistake call such \(D\) linear separable as long as linear separable and correct by mistake inner product of \(w_f\) and \(w_t\) grows fast; length of wt grows slowly PLA ‘lines’ are more and more aligned with \(w_f \rightarrow halts\) Line with Noise Tolerance \(D\) is not linear separable? not linear separable Pocket Algorithm Find the best weights in pocket until enough iterations pocket algorithm Question Since we do not know whether D is linear separable in advance, we may decide to just go with pocket instead of PLA. If D is actually linear separable, what’s the difference between the two? 1 pocket on D is slower than PLA 2 pocket on D is faster than PLA 3 pocket on D returns a better g in approximating f than PLA 4 pocket on D returns a worse g in approximating f than PLA answer: Because pocket need to check whether \(w_{t+1}\) is better than \(\hat{w}\) in each iteration, it is slower than PLA. On linear separable D, \(w_{POCKET}\) is the same as \(w_{PLA}\), both making no mistakes.]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Course Note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[The Learning Problems]]></title>
    <url>%2FThe%20Learning%20Problems%2F2019%2F02%2F14%2F</url>
    <content type="text"><![CDATA[The Learning Problems When Can Machines Learn? (illustrative + technical) Why Can Machines Learn? (theoretical + illustrative) How Can Machines Learn? (technical + practical) How Can Machines Learn Better? (practical + theoretical) When Can Machines Learn? Some definitions Learning: acquiring skill with experience accumulated from observations Machine learning: acquiring skill with experience accumulated/computed from data data -----&gt; ML ------&gt; sklill Skill: improve some performance measure (e.g. prediction accuracy) data -----&gt; ML ------&gt; improved performance measure The Machine Learning Route ML: an alternative route to build complicated systems Give a computer a fish, you feed it for a day; teach it how to fish, you feed it for a lifetime Key Essence of Machine Learning Improving some performance measure with experience computed from data exists some underlying pattern to be learned but no programmable (easy) definition omehow there is data about the pattern Formalize the Learning Problem inputs: \(x \in \chi\) outputs:\(y\in \gamma\) unknown pattern to be learned &lt;=&gt; target function \[f: \chi \rightarrow \gamma\] data &lt;=&gt; training examples \[D = \{(x_1,y_1),(x_2,y_2),......(x_N,y_N)\}\] hypothesis &lt;=&gt; skill with hopefully good performance \[g: \chi \rightarrow \gamma\] Learning Flow Learning Model.png Learning Model Learning Flow.png Practical Definition of Machine Learning Machine Learning: use data to compute hypothesis g that approximates target f Relationships between Machine Learnig, Data Mining, Artifical Intelligence and Statics Machine Learning use data to compute hypothesis g that approximates target f Data Mining use (huge) data to find property that is interesting Artifical Intelligence compute something that shows intelligent behavior ML can realize AI, among other routes \(g \approx f\) is something that shows intelligent behavior Statics use data to make inference about an unknown process statistics is a useful tool for ML]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Course Note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Introduction to Cloud Computing]]></title>
    <url>%2FIntroduction-to-Cloud-Computing%2F2019%2F02%2F14%2F</url>
    <content type="text"><![CDATA[Overview Why this course is about distributed system comcepts in cloud? clouds are distributed system Cloud examples MapReduce and Hadoops Introduction Customers save money and time Two categories of cloud public provide service to any paying customer private accessbile only to company employees What is a cloud? Informal definition &gt; lots of storage + compute circle nearby Components a single-site cloud Compute nodes (grouped into racks) (servers) Switches, connecting the racks A network topology, e.g. hierarchical Storage(backend) nodes, connecting to the network Front-end for submiting jobs and receiveing client requests Software services a geographically distributed cloud Mutiple such sites Each site perhaps with different structures and services Four major characteristics Distinguish today's clouds from previous generations of distributed computing systems and problems Massive scale Massive-scale essentially means that data centers are very large. They contain tens of thousands, sometimes hundreds of thousands of servers and you could run your computation across as many servers as you want and as many servers as your application will scale On-demand access Pay-as-you-go, no upfront commitment. Anyone can access it HaaS: Hardware as a Service IaaS: Infrastructure as a Service(Ex: Amazon Web Services (AWS: EC2 and S3)) PaaS: Platform as a Service(You get access to flexible computing and storage infrastructure, coupled with a software platform (often tightly), Ex: Google’s AppEngine (Python, Java, Go)) SaaS: Software as a Service(You get access to software services, when you need them. Often said to subsume SOA (Service Oriented Architectures), Ex: Google docs, MS Office on demand) Data-intensive Nature Typically store data at datacenters Use compute nodes nearby Compute nodes run computation services In data-intensive computing, the focus shifts from computation to the data: CPU utilization no longer the most important resource metric, instead I/O is (disk and/or network) New Cloud Programming Paradigms MapReduce/Hadoop, NoSQL/Cassandra/MongoDB and many others. Easy to write and run highly parallel programs in new cloud programming paradigms: A cloud is a distribyted system A cloud consists of Hundreds to thousands of machines in a datacenter (server side) Thousands to millions of machines accessing these services (client side) Servers communicate amongst one another Distributed System Essentially a cluster! Clients communicate with servers Also a distributed system! Clients also communicate with each other Also a distributed system! Four Features of Clouds = All Distributed Systems Features Cloud = A Fancy Word for a Distributed System Economics of clouds What is a distributed system A distributed system is a collection of independent computers that appear to the users of the system as a single computer.[Andrew Tanenbaum] A distributed system is several computers doing something together. Thus, a distributed system has three primary characteristics: multiple computers, interconnections, and shared state. [Michael Schroeder] A distributed system is a collection of entities, each of which is autonomous, programmable, asynchronous and failure- prone, and which communicate through an unreliable communication medium. programmable,Eliminates “Humans Interacting with each other” asynchronous, Distinguishes distributed systems from parallel systems (e.g., multiprocessor systems) Our interest in distributed systems involves algorithmics design and implementation maintenance, study MapReduce paradigm (map square (1,2,3,4)) output: (1,4,9,16) process each record sequentially and independently (reduce + (1,4,9,16)) (+16 (+9 (+4))) output: 30 process set of all records in batches Map Map task processes each record sequentially and independently Parallelly process different map tasks Reduce Reduce process set of all records in batches Parallelly process by partitioning records MapReduce Scheduling 1.Externally, for the user: 1. write map program, write reduce program 2. submit job; wait for result 3. need to know nothing about parallel programming Internally, for the paradigm and scheduler Parallelize Map each Map task is independent all Map output records with teh same key should assign to the same Reducer Transfer data from Map to Reduce Parallelize Reduce each Reduce task is independent use partition function Implement Storage for Map input, Map output, Reduce input, Reduce output Map input: DFS Map output: local disk Reduce input: remote disk Reduce output: DFS The YARN SCHEDULER Used in Hadoop 2.x + YARN = Yet Another Resource Negotiator Treats each server as a collection of containers Container = some CPU + some memory Has 3 main components Global Resource Manager (RM) scheduling Per-server Node Manager (NM) Daemon and server-specific functions Per-application (job) Application Master (AM) Container negotiation with RM and NMs Detecting task failures of that job MapReduce Example Fault tolerance Server failure NM,AM heartbeats to RM NM keep track of each task running at its server RM failure use old checkpoints and bring up secondary RM stragglers the slowest machine slows the entire job speculative exection: backup execction of straggler task Locality Reference from some slides from Coursera course Cloud Computing]]></content>
      <categories>
        <category>Cloud Computing</category>
      </categories>
      <tags>
        <tag>Course Note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Gossip,Member,Grid]]></title>
    <url>%2FGossip-Member-Grid%2F2019%2F02%2F14%2F</url>
    <content type="text"><![CDATA[Gossip Tree-Based Multicast Protocol Build a spanning tree among the processes of the multicast group Use spanning tree to disseminate multicasts Use either acknowledgments (ACKs) or negative acknowledgements (NAKs) to repair multicasts not received SRM (Scalable Reliable Multicast) Uses NAKs But adds random delays, and uses exponential backoff to avoid NAK storms RMTP (Reliable Multicast Transport Protocol) Uses ACKs But ACKs only sent to designated receivers, which then re-transmit missing multicasts These protocols still cause an O(N) ACK/NAK overhead Epidemic Multicast Push gossip Once you have a multicast message, you start gossiping about it Multiple messages? Gossip a random subset of them, or recently-received ones, or higher priority ones Pull gossip Periodically poll a few randomly selected processes for new multicast messages that you haven’t received Get those messages Hybrid variant: Push-Pull As the name suggests Topology-Aware Gossip Network topology is hierachical Random gossip target selection =&gt; core routers face O(N) load In subnet i, which contains \(n_i\) nodes, pick gossip target in your subnet with probability \(\frac{1}{n_i}\) Router \(load=O(1)\) Dissemination \(time=O(log(N))\) Member two sub-protocals Failure Detection Dissemination Failure Detection some process find out the failure process quickly Desirable propertities Completeness (most important) Accuracy Speed Scale Gossip Style Failure Detection Could use mylti-level Gossip Swim Failure Detection Two choice for the \(P_j\)(failure process) Directed ping to \(P_j\) and indirected ping to \(P_j\) (Randomly select another process and then send ping to \(P_j\)) Constant time =&gt; \(O(1)\) Dissemination Multicast Dissemination(Hardware/IP) unreliable Point-to-Point expensive Infection style Dissemination Suspicion Mechanism Suspect a process before declaring it as failed in the group Grid gossip_member_grid09.png two level scheduling infrastructure Inter-site protol Globus No single entity controls the entire infrastructure(federate) Reference from some slides from Coursera course Cloud Computing]]></content>
      <categories>
        <category>Cloud Computing</category>
      </categories>
      <tags>
        <tag>Course Note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[P2P System]]></title>
    <url>%2FP2P-System%2F2019%2F02%2F14%2F</url>
    <content type="text"><![CDATA[Why Study Peer-to-Peer Systems? First distributed systems that seriously focused on scalability with respect to number of nodes P2P techniques abound in cloud computing systems Napster (创始人Sean Parker, 看Social Network时有讲到，哈哈) Napster Structure p2p01.png Client Connect to a Napster server Upload list of music files that you want to share Server maintains list of &lt;filename, ip_address, port_num&gt; tuples. Server stores no files. Search Send server keywords to search with Server searches its list with the keywords Server returns a list of hosts – &lt;ip_address, portnum&gt; tuples – to client Client pings each host in the list to find transfer rates Client fetches file from best host All communication uses TCP (Transmission Control Protocol) Reliable and ordered networking protocol Joining a P2P system Send an http request to well-known url for that P2P service - http://www.myp2pservice.com Message routed (after lookup in DNS) to introducer, a well known server that keeps track of some recently joined nodes in p2p system Introducer initializes new peers’ neighbor table Gnutella Eliminate the servers Client machines search and retrieve amongst themselves Clients act as servers too, called servents Gnutella protocol has 5 main message types Query (search) QueryHit (response to query) Ping (to probe network for other peers) Pong (reply to ping, contains address of another peer) Push (used to initiate file transfer) Gnutella Structure - Connected in an overlay graph Search Avoiding excessive traffic To avoid duplicate transmissions, each peer maintains a list of recently received messages Query forwarded to all neighbors except peer from which received Each Query (identified by DescriptorID) forwarded only once QueryHit routed back only to peer from which Query received with same DescriptorID Duplicates with same DescriptorID and Payload descriptor (msg type) are dropped QueryHit with DescriptorID for which Query not seen is dropped After receiving QueryHit messages Requestor chooses “best” QueryHit responder 1234GET /get/&lt;File Index&gt;/&lt;File Name&gt;/HTTP/1.0\r\nConnection: Keep-Alive\r\n Range: bytes=0-\r\n User-Agent: Gnutella\r\n \r\n Responder then replies with file packets after this message: 12345HTTP 200 OK\r\nServer: Gnutella\r\n Content-type:application/binary\r\n Content-length: 1024 \r\n\r\n Dealing with Firewalls Requestor sends Push to responder asking for file transfer Responder establishes a TCP connection at ip_address, port specified. Requestor then sends GET to responder (as before) and file is transferred as explained earlier Ping-Pong Peers initiate Ping’s periodically Ping’s flooded out like Query’s, Pong’s routed along reverse path like QueryHit’s Pong replies used to update set of neighboring peers To keep neighbor lists fresh in spite of peers joining, leaving and failing Gnutella Summary No servers Peers/servents maintain “neighbors,” this forms an overlay graph Peers store their own files Queries flooded out, ttl restricted QueryHit (replies) reverse path routed Supports file transfer through firewalls Periodic ping-pong to continuously refresh neighbor lists FastTrack Hybrid between Gnutella and Napster FastTrack Structure - A supernode stores a directory listing a subset of nearby (&lt;filename,peer pointer&gt;), similar to Napster servers - Supernode membership changes over time - Any peer can become (and stay) a supernode, provided it has earned enough reputation - A peer searches by contacting a nearby supernode BitTorrent BitTorrent Structure - File split into blocks (32 KB – 256 KB) - Download Local Rarest First block policy: prefer early download of blocks that are least replicated among neighbors - Tit for tat bandwidth usage: Provide blocks to neighbors that provided it the best download rates - Choking: Limit number of neighbors to which concurrent uploads &lt;= a number (5), i.e., the “best” neighbors BitTorrent 原理简述 Reference from https://jaminzhang.github.io/p2p/BitTorrent-Principle-Introduction/ 与传统客户端/服务器网络通信模式不同，对等方到对等方（P2P）通信模式在近年来越来越流行起来。 在 P2P 模式中，服务和资源分布化，资源不集中存储在某些设备上，而是分散存储在运行 P2P 程序的设备上， 每一个对等方都可以为其他对等方提供服务。 BitTorrent（中文全称比特流，简称 BT）是一个网络文件传输协议，是能够实现点对点文件分享的技术。 在大多数人感觉中与 P2P 成了对等的一组概念，而它也将 P2P 技术发展到了近乎完美的地步。 研究 BitTorrent 协议对我们深入把握 P2P 技术，了解 Interent 网络发展的未来走向有很大的意义。 BitTorrent 协议是架构于 TCP/IP 协议之上的一个 P2P 文件传输协议，处于 TCP/IP 结构的应用层。 BitTorrent 协议本身也包含了很多具体的内容协议和扩展协议，并在不断扩充中。 如果有多个下载者并发的下载同一个文件，则每个下载者也同时为其它下载者上传文件， 这样，文件源可以支持大量的用户进行下载，而只带来适当的负载的增长。 BitTorrent 协议把提供下载的文件虚拟分成大小相等的块，块大小必须为 2k 的整数次方 （由于是虚拟分块，硬盘上并不产生各个块文件），并把每个块的索引信息和 Hash 验证码 写入 .torrent 文件（即种子文件，也简称为“种子”）中，作为被下载文件的“索引”。 下载者要下载文件内容，需要先得到相应的 .torrent 文件，然后使用 BT 客户端软件进行下载。 下载时，BT 客户端首先解析 .torrent 文件得到 Tracker 地址，然后连接 Tracker 服务器。 Tracker 服务器回应下载者的请求，提供下载者其他下载者（包括发布者）的 IP。 或者，BT客户端也可解析 .torrent 文件得到 nodes 路由表，然后连接路由表中的有效节点， 由网络节点提供下载者其他下载者的 IP。 下载者再连接其他下载者，根据 .torrent 文件，两者分别对方告知自己已经有的块， 然后交换对方没有的数据。此时不需要其他服务器参或者其他网络节点的参与， 分散了单个线路上的数据流量，因此减轻了服务器负担。 下载者每得到一个块，需要算出下载块的 Hash 验证码与 .torrent 文件中的对比， 如果一样则说明块正确，不一样则需要重新下载这个块。 因此，下载的人越多，提供的带宽也越多，种子也会越来越多，下载速度就越快。 从 BT 客户端角度考虑，下载原理分为以下几步： 一．根据 BitTorrent 协议，文件发布者会根据要发布的文件生成提供一个 .torrent 文件。 客户端可从 Web 服务器上下载种子文件，并从中得到 Tracker 服务器 URL 和 DHT 网络 nodes 等信息。 二．根据 Tracker URL 与 Tracker 服务器建立连接，并从服务器上得到 Peers 信息。 或者根据 nodes 与 DHT 网络中节点通信，并从节点上得到 Peers 信息。 三．根据 Peers 信息与一个 Peer 建立连接，依据 Peer wire 协议完成握手， 并从 Peer 端下载数据文件。同时监听 Peer 的连接，并给 Peer 上传数据文件。 依据得到 Peers 信息的途径的不同，可分为使用 Tracker 服务器和使用 Trackerless DHT 网络两种方式。 基于 HTTP 的 Tracker 协议， 基于 UDP 的 Trackerless 协议， 基于 TCP 的 Peer wire 协议。 Chord Uses Consistent Hashing on node’s (peer’s) address - SHA-1(ip_address,port) -&gt; 160 bit string - Truncated to m bits - Called peer id (number between 0 and 2m −1 ) - Not unique but id conflicts very unlikely - Can then map peers to one of 2m logical points on a circle Comparative Performance p2p10.png Chord Structure Tow pointers successors #### finger tables Files Filenames also mapped using same consistent hash function - SHA-1(filename)-&gt;160 bit string (key) - File is stored at first peer with id greater than its key(mod 2^m) - Consistent Hashing =&gt; with K keys and N peers, each peer stores O(K/N) keys Search At node n, send query for key k to largest successor/finger entry &lt;= k if none exist, send query to successor(n) Search takes O(log(N)) time O(log(N)) search time holds for file insertions too (in general for routing to any key) Failure in Chord maintain r multiple successor entries replicate file/key at r successors and predecessors Dynamic changes New peers joining Introducer directs N40 to N45 (and N32) N32 updates successor to N40 N40 initializes successor to N45, and inits fingers from it N40 periodically talks to neighbors to update finger table N40 may need to copy some files/keys from N45 (files with fileid between 32 and 40) A new peer affects O(log(N)) other finger entries in the system, on average Stabilization Protocol Concurrent peer joins, leaves, failures might cause loopiness of pointers and failure of lookups Chord peers periodically run a stabilization algorithm that checks and updates pointers and keys Virtual Nodes Hash can get non-uniform -&gt; Bad load balancing - Treat each node as multiple virtual nodes behaving independently - Each joins the system - Reduces variance of load imbalance Pastry Assigns ids to nodes, just like Chord (using a virtual ring) Leaf Set – Each node knows its successor(s) and predecessor(s) Routing tables based prefix matching(Routing is thus based on prefix matching and is thus log(N)) Pastry Locality For each prefix, say 011, among all potential neighbors with a matching prefix, the neighbor with the shortest round-trip time is selected Since shorter prefixes have many more candidates (spread out throughout the Internet), the neighbors for shorter prefixes are likely to be closer than the neighbors for longer prefixes Thus, in the prefix routing, early hops are short and later hops are longer Kelips A 1 hop Lookup DHT Kelips Structure - k “affinity groups” k ~ sqrt(N) - Each node hashed to a group (hash mod k) - Node’s neighbors - (Almost) all other nodes in its own affinity group - One contact node per foreign affinity group - File can be stored at any (few) node(s) - Decouple file replication/location (outside Kelips) from file querying (in Kelips) - Each filename hashed to a group - All nodes in the group replicate pointer information, i.e., &lt;filename, file location&gt; - Affinity group does not store files - Lookup - Find file affinity group - Go to your contact for the file affinity group - Failing that try another of your neighbors to find a contact Reference from some slides from Coursera course Cloud Computing]]></content>
      <categories>
        <category>Cloud Computing</category>
      </categories>
      <tags>
        <tag>Course Note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Dive into blog]]></title>
    <url>%2FDive-into-blog%2F2019%2F02%2F13%2F</url>
    <content type="text"><![CDATA[前天为了搭建 hadoop 集群，被网络上语言含糊不清的教程搞得精疲力尽，于是萌发了自己写技术博客的想法。 开始搭建了 Hexo做博客框架不错，就它了。于是我纠结了两个小时选什么主题。Next肯定是第一个排除的，因为用的人太多了，我要不一样。Daily也不错，简洁大方，符合我的气质，就它吧。我去，Daily连个打赏系统都没集成啊，这不妨碍我赚钱吗。算了，还是Next吧。嗯，真香。 部署就选Github Page，没必要额外买服务器。 zhangruochi.github.io的域名不行，看上去不高端，散发着程序猿气质。于是我去买了zhangruochi.com，Godaddy上买的，二十多刀，很便宜。 第一个要做的功能必须是打赏系统，比较顺利，Next已经集成了。 评论系统纠结了很久, 后来发现没什么好纠结的。基本上要么被墙要么停止服务。什么，你说gitment？ 那也不考虑，我的博客怎么能局限于程序猿圈呢。就来必力吧，你看名字多可爱。 分享系统用自带的BaiduShare，虽然丑了点。 差不多可以上线了 因为Github不会将站点信息提交给搜索引擎，Dore's blog作为一个技术博客，baidu, google什么的都搜索不到，这不行，这么有价值的博文不是写给我自己看的。于是开始做seo优化。首先是验证站点，google和baidu两者都验证通不过，不管是文件验证 还是html标签验证。折腾了几个小时，发现文件验证不通过的原因是Hexo生成网站时会修改google和baidu提供的验证文件。这好办，在验证文件开头加上 layout: false。 生成sitemap, 提交sitemap，测试robots.txt，比较顺利。 终于能搜索到了 不对啊，打开网站经常会显示website coming soon页面，但是多刷新几次又没问题，这是什么磨人的小bug。而且现在网站是http协议，不是https, Chorme总是显示Not Secure。去Github Page页面修改强行使用https，然而选择不了。折腾一圈发现是在 Godaddy上添加了一个多余的DNS解析，删除之后可以选择强制https了。 我去，强制https之后safari和chorme都显示网站不被信任, 进不去了。又找了一圈方案，说要购买ssl证书,然而Github Page不支持上传证书。后来找到解决方案，使用DNSPod解析DNS, 修改DNSPod为default nameserver. 终于能正常登陆了 然而，分享系统又不能用了，原来是因为BaiduShare不支持https. 我为什么要用百度家的产品? 想起小恶魔的台词，“Next time I have an idea like that, just punch me in the face.” 于是使用ShareSDK, 本地测试没问题，但是联网会出错。发现是https限制http的外链接。好的，修改一下src tag，可以了。但是ShareSDK长得丑啊，于是又来了一顿操作，添加新的css和js。 基本满意了 我更加精疲力尽，写什么博客，Next time I have an idea like that, just punch me in the face。]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>My Blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[值得期待的一块零一分 --鹿麒序]]></title>
    <url>%2FHello-Blog%2F2019%2F02%2F12%2F</url>
    <content type="text"><![CDATA[那天一句玩笑说建好博客让鹿总给我写个序，今天终于看到了。挺不好意思的。别人一夸我，我就扭捏，总担心别人夸得还不够😝。以下是序的正文。 狄更斯说，这是最好的时代，这是最坏的时代；有人直上天堂，有人直下地狱。所以当下的这个时代给予我们的到底是什么，我觉得这是一个很难回答的问题。 应该是从大三开始，在即将面临社会的时候我产生了更多的自我怀疑，经常问自己“你到底想做什么，你以后会做什么呢”。那个时候我很羡慕两种人。一种是从来不会认真思考这个问题，随遇而安的人，另一种是有着明确的目标，并为之不断努力的人。老实说，其实这是两种极端，前一种人说得难听的可以是“不思进取”，但是往往他们也容易满足，能在自己的世界里过得很幸福。后一种人可以说是“野心太大”，但是这样的人也容易充实自己。反观我，就是那种不尴不尬，不上不下的一类。不满足于现在的生活可是也没有明确的目标。 也是在这种情况下，我选择出国留学，觉得对我来说这也是逃避社会逃避现实的好的方式。圈子广了，接触的人多了，但是大部分人也还是可以按照上面说的道理分成三种。张若驰（以下称为张老师，叫他全名实在有点不习惯）就是我说的目标明确并且不断努力的人。 其实张老师让我写序，我也不知道写点啥，于是打算讲讲我对他的看法。 张老师是这样一种人：他从来不避讳自己取得的一些成绩，也从来不会夸大自己的成就。也可能是他真的太厉害，所以不管他在生活里还是朋友圈里怎么讲自己，我的第一反应总是“牛逼，不愧是张老师”。其实，跟他相处的时候只要你好好留意，就会发现他是个很有目标性的人。比如说，他吃饭的时候很快，往往我吃了一半还不到，他已经差不多了。他等你的这个时候，大部分时间里他都是一个人在沉思或者跟你讲讲他对自己未来有什么规划。因为和国内的时差，他也经常性会在半夜开会。为了自己项目里的问题或者刷题，在图书馆熬夜，通宵也是常有的事。打开他的linkedin，上面也写满了他发的论文和上过的有分量的课。可能也是为什么我发现他的眼眶下面是青黑的原因吧。 说实话，这样的生活如果安在我身上，那我多半受不了。但是我也没有问过他累不累，因为每次这种时候我都会想到之前问我发小“一直这么努力不会觉得很辛苦吗”，她当时回答我“习惯了就不觉得了”。 张老师跟许多程序员不一样的是，通过跟他的接触，你会发现他是一个读过很多书，对这个社会很有想法的文化人。同时，张老师跟许多人不一样的是，大家都知道自己是被生活推着走，但是他在被推着走的时候，也在思考怎样最大化发挥自己的价值去影响这个世界。 写到这儿我顿悟了。一开始他自己写这个blog我只觉得这是文化人和处女座对于一些完美事物的执着，但是现在我明白了，这个blog或许也是他的一种知识输出，是一种他用来影响别人的方式。而我，作为一个被用来测试网站的小白羊，对张老师的blog充满了自信。刚起步的时候，张老师的知识分享也都是比较浅显的东西，但这几天我每天睡醒都会看到他半夜给我发的告诉我他又做了哪方面的改进。虽然现在我只花了一块零一分，但这样我也算是入股了吧，等到以后这个blog真的开始发挥它的价值的时候，我觉得我的一块零一分的价值也会乘十乘百乘千乘万乘亿地增长。 和它一起的，我相信也一定是张老师之于这个社会，这个时代的价值。 所以，只要够主动够幸运够优秀，这个时代给予我们的东西，总有一天是能通过自己的身体力行去感知的。 最后，我想代表我们大家对张老师说一句：“苟富贵，勿相忘。”]]></content>
      <categories>
        <category>Gossip</category>
      </categories>
      <tags>
        <tag>Gossip</tag>
      </tags>
  </entry>
</search>
