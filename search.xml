<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Emojify</title>
      <link href="/Emojify/2019/03/28/"/>
      <url>/Emojify/2019/03/28/</url>
      
        <content type="html"><![CDATA[<h1 id="emojify">Emojify!</h1><p>Welcome to the second assignment of Week 2. You are going to use word vector representations to build an Emojifier.</p><p>Have you ever wanted to make your text messages more expressive? Your emojifier app will help you do that. So rather than writing "Congratulations on the promotion! Lets get coffee and talk. Love you!" the emojifier can automatically turn this into "Congratulations on the promotion! üëç Lets get coffee and talk. ‚òïÔ∏è Love you! ‚ù§Ô∏è"</p><p>You will implement a model which inputs a sentence (such as "Let's go see the baseball game tonight!") and finds the most appropriate emoji to be used with this sentence (‚öæÔ∏è). In many emoji interfaces, you need to remember that ‚ù§Ô∏è is the "heart" symbol rather than the "love" symbol. But using word vectors, you'll see that even if your training set explicitly relates only a few words to a particular emoji, your algorithm will be able to generalize and associate words in the test set to the same emoji even if those words don't even appear in the training set. This allows you to build an accurate classifier mapping from sentences to emojis, even using a small training set.</p><p>In this exercise, you'll start with a baseline model (Emojifier-V1) using word embeddings, then build a more sophisticated model (Emojifier-V2) that further incorporates an LSTM.</p><p>Lets get started! Run the following cell to load the package you are going to use.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> emo_utils <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> emoji</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><h2 id="baseline-model-emojifier-v1">1 - Baseline model: Emojifier-V1</h2><h3 id="dataset-emojiset">1.1 - Dataset EMOJISET</h3><p>Let's start by building a simple baseline classifier.</p><p>You have a tiny dataset (X, Y) where: - X contains 127 sentences (strings) - Y contains a integer label between 0 and 4 corresponding to an emoji for each sentence</p><img src="images/data_set.png" style="width:700px;height:300px;"><caption><center><strong>Figure 1</strong>: EMOJISET - a classification problem with 5 classes. A few examples of sentences are given here.</center></caption><p>Let's load the dataset using the code below. We split the dataset between training (127 examples) and testing (56 examples).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X_train, Y_train = read_csv(<span class="string">'data/train_emoji.csv'</span>)</span><br><span class="line">X_test, Y_test = read_csv(<span class="string">'data/tesss.csv'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maxLen = len(max(X_train, key=len).split())</span><br></pre></td></tr></table></figure><p>Run the following cell to print sentences from X_train and corresponding labels from Y_train. Change <code>index</code> to see different examples. Because of the font the iPython notebook uses, the heart emoji may be colored black rather than red.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">index = <span class="number">1</span></span><br><span class="line">print(X_train[index], label_to_emoji(Y_train[index]))</span><br></pre></td></tr></table></figure><pre><code>I am proud of your achievements üòÑ</code></pre><h3 id="overview-of-the-emojifier-v1">1.2 - Overview of the Emojifier-V1</h3><p>In this part, you are going to implement a baseline model called "Emojifier-v1".</p><center><img src="images/image_1.png" style="width:900px;height:300px;"><caption><center><strong>Figure 2</strong>: Baseline model (Emojifier-V1).</center></caption></center><p>The input of the model is a string corresponding to a sentence (e.g. "I love you). In the code, the output will be a probability vector of shape (1,5), that you then pass in an argmax layer to extract the index of the most likely emoji output.</p><p>To get our labels into a format suitable for training a softmax classifier, lets convert <span class="math inline">\(Y\)</span> from its current shape current shape <span class="math inline">\((m, 1)\)</span> into a "one-hot representation" <span class="math inline">\((m, 5)\)</span>, where each row is a one-hot vector giving the label of one example, You can do so using this next code snipper. Here, <code>Y_oh</code> stands for "Y-one-hot" in the variable names <code>Y_oh_train</code> and <code>Y_oh_test</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Y_oh_train = convert_to_one_hot(Y_train, C = <span class="number">5</span>)</span><br><span class="line">Y_oh_test = convert_to_one_hot(Y_test, C = <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>Let's see what <code>convert_to_one_hot()</code> did. Feel free to change <code>index</code> to print out different values.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">index = <span class="number">50</span></span><br><span class="line">print(Y_train[index], <span class="string">"is converted into one hot"</span>, Y_oh_train[index])</span><br></pre></td></tr></table></figure><pre><code>0 is converted into one hot [ 1.  0.  0.  0.  0.]</code></pre><p>All the data is now ready to be fed into the Emojify-V1 model. Let's implement the model!</p><h3 id="implementing-emojifier-v1">1.3 - Implementing Emojifier-V1</h3><p>As shown in Figure (2), the first step is to convert an input sentence into the word vector representation, which then get averaged together. Similar to the previous exercise, we will use pretrained 50-dimensional GloVe embeddings. Run the following cell to load the <code>word_to_vec_map</code>, which contains all the vector representations.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">word_to_index, index_to_word, word_to_vec_map = read_glove_vecs(<span class="string">'../../readonly/glove.6B.50d.txt'</span>)</span><br></pre></td></tr></table></figure><p>You've loaded: - <code>word_to_index</code>: dictionary mapping from words to their indices in the vocabulary (400,001 words, with the valid indices ranging from 0 to 400,000) - <code>index_to_word</code>: dictionary mapping from indices to their corresponding words in the vocabulary - <code>word_to_vec_map</code>: dictionary mapping words to their GloVe vector representation.</p><p>Run the following cell to check if it works.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">word = <span class="string">"cucumber"</span></span><br><span class="line">index = <span class="number">289846</span></span><br><span class="line">print(<span class="string">"the index of"</span>, word, <span class="string">"in the vocabulary is"</span>, word_to_index[word])</span><br><span class="line">print(<span class="string">"the"</span>, str(index) + <span class="string">"th word in the vocabulary is"</span>, index_to_word[index])</span><br></pre></td></tr></table></figure><pre><code>the index of cucumber in the vocabulary is 113317the 289846th word in the vocabulary is potatos</code></pre><p><strong>Exercise</strong>: Implement <code>sentence_to_avg()</code>. You will need to carry out two steps: 1. Convert every sentence to lower-case, then split the sentence into a list of words. <code>X.lower()</code> and <code>X.split()</code> might be useful. 2. For each word in the sentence, access its GloVe representation. Then, average all these values.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: sentence_to_avg</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sentence_to_avg</span><span class="params">(sentence, word_to_vec_map)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Converts a sentence (string) into a list of words (strings). Extracts the GloVe representation of each word</span></span><br><span class="line"><span class="string">    and averages its value into a single vector encoding the meaning of the sentence.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    sentence -- string, one training example from X</span></span><br><span class="line"><span class="string">    word_to_vec_map -- dictionary mapping every word in a vocabulary into its 50-dimensional vector representation</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    avg -- average vector encoding information about the sentence, numpy-array of shape (50,)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    <span class="comment"># Step 1: Split sentence into list of lower case words (‚âà 1 line)</span></span><br><span class="line">    words = [word.strip().lower() <span class="keyword">for</span> word <span class="keyword">in</span> sentence.split()]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Initialize the average word vector, should have the same shape as your word vectors.</span></span><br><span class="line">    avg = np.zeros((<span class="number">50</span>,))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Step 2: average the word vectors. You can loop over the words in the list "words".</span></span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> words:</span><br><span class="line">        avg += word_to_vec_map[w]</span><br><span class="line">    avg = avg/len(words)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> avg</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">avg = sentence_to_avg(<span class="string">"Morrocan couscous is my favorite dish"</span>, word_to_vec_map)</span><br><span class="line">print(<span class="string">"avg = "</span>, avg)</span><br></pre></td></tr></table></figure><pre><code>avg =  [-0.008005    0.56370833 -0.50427333  0.258865    0.55131103  0.03104983 -0.21013718  0.16893933 -0.09590267  0.141784   -0.15708967  0.18525867  0.6495785   0.38371117  0.21102167  0.11301667  0.02613967  0.26037767  0.05820667 -0.01578167 -0.12078833 -0.02471267  0.4128455   0.5152061  0.38756167 -0.898661   -0.535145    0.33501167  0.68806933 -0.2156265  1.797155    0.10476933 -0.36775333  0.750785    0.10282583  0.348925 -0.27262833  0.66768    -0.10706167 -0.283635    0.59580117  0.28747333 -0.3366635   0.23393817  0.34349183  0.178405    0.1166155  -0.076433  0.1445417   0.09808667]</code></pre><p><strong>Expected Output</strong>:</p><table><tr><td><strong>avg= </strong></td><td>[-0.008005 0.56370833 -0.50427333 0.258865 0.55131103 0.03104983 -0.21013718 0.16893933 -0.09590267 0.141784 -0.15708967 0.18525867 0.6495785 0.38371117 0.21102167 0.11301667 0.02613967 0.26037767 0.05820667 -0.01578167 -0.12078833 -0.02471267 0.4128455 0.5152061 0.38756167 -0.898661 -0.535145 0.33501167 0.68806933 -0.2156265 1.797155 0.10476933 -0.36775333 0.750785 0.10282583 0.348925 -0.27262833 0.66768 -0.10706167 -0.283635 0.59580117 0.28747333 -0.3366635 0.23393817 0.34349183 0.178405 0.1166155 -0.076433 0.1445417 0.09808667]</td></tr></table><h4 id="model">Model</h4><p>You now have all the pieces to finish implementing the <code>model()</code> function. After using <code>sentence_to_avg()</code> you need to pass the average through forward propagation, compute the cost, and then backpropagate to update the softmax's parameters.</p><p><strong>Exercise</strong>: Implement the <code>model()</code> function described in Figure (2). Assuming here that <span class="math inline">\(Yoh\)</span> ("Y one hot") is the one-hot encoding of the output labels, the equations you need to implement in the forward pass and to compute the cross-entropy cost are: <span class="math display">\[ z^{(i)} = W . avg^{(i)} + b\]</span> <span class="math display">\[ a^{(i)} = softmax(z^{(i)})\]</span> <span class="math display">\[ \mathcal{L}^{(i)} = - \sum_{k = 0}^{n_y - 1} Yoh^{(i)}_k * log(a^{(i)}_k)\]</span></p><p>It is possible to come up with a more efficient vectorized implementation. But since we are using a for-loop to convert the sentences one at a time into the avg^{(i)} representation anyway, let's not bother this time.</p><p>We provided you a function <code>softmax()</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: model</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">model</span><span class="params">(X, Y, word_to_vec_map, learning_rate = <span class="number">0.01</span>, num_iterations = <span class="number">400</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Model to train word vector representations in numpy.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    X -- input data, numpy array of sentences as strings, of shape (m, 1)</span></span><br><span class="line"><span class="string">    Y -- labels, numpy array of integers between 0 and 7, numpy-array of shape (m, 1)</span></span><br><span class="line"><span class="string">    word_to_vec_map -- dictionary mapping every word in a vocabulary into its 50-dimensional vector representation</span></span><br><span class="line"><span class="string">    learning_rate -- learning_rate for the stochastic gradient descent algorithm</span></span><br><span class="line"><span class="string">    num_iterations -- number of iterations</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    pred -- vector of predictions, numpy-array of shape (m, 1)</span></span><br><span class="line"><span class="string">    W -- weight matrix of the softmax layer, of shape (n_y, n_h)</span></span><br><span class="line"><span class="string">    b -- bias of the softmax layer, of shape (n_y,)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    np.random.seed(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Define number of training examples</span></span><br><span class="line">    m = Y.shape[<span class="number">0</span>]                          <span class="comment"># number of training examples</span></span><br><span class="line">    n_y = <span class="number">5</span>                                 <span class="comment"># number of classes  </span></span><br><span class="line">    n_h = <span class="number">50</span>                                <span class="comment"># dimensions of the GloVe vectors </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Initialize parameters using Xavier initialization</span></span><br><span class="line">    W = np.random.randn(n_y, n_h) / np.sqrt(n_h)</span><br><span class="line">    b = np.zeros((n_y,))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Convert Y to Y_onehot with n_y classes</span></span><br><span class="line">    Y_oh = convert_to_one_hot(Y, C = n_y) </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Optimization loop</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> range(num_iterations):                       <span class="comment"># Loop over the number of iterations</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m):                                <span class="comment"># Loop over the training examples</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">### START CODE HERE ### (‚âà 4 lines of code)</span></span><br><span class="line">            <span class="comment"># Average the word vectors of the words from the i'th training example</span></span><br><span class="line">            avg = sentence_to_avg(X[i], word_to_vec_map)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Forward propagate the avg through the softmax layer</span></span><br><span class="line">            z = np.dot(W,avg) + b</span><br><span class="line">            a = softmax(z)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Compute cost using the i'th training label's one hot representation and "A" (the output of the softmax)</span></span><br><span class="line">            cost = - np.sum(Y_oh[i] * np.log(a))</span><br><span class="line">            <span class="comment">### END CODE HERE ###</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># Compute gradients </span></span><br><span class="line">            dz = a - Y_oh[i]</span><br><span class="line">            dW = np.dot(dz.reshape(n_y,<span class="number">1</span>), avg.reshape(<span class="number">1</span>, n_h))</span><br><span class="line">            db = dz</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Update parameters with Stochastic Gradient Descent</span></span><br><span class="line">            W = W - learning_rate * dW</span><br><span class="line">            b = b - learning_rate * db</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> t % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">"Epoch: "</span> + str(t) + <span class="string">" --- cost = "</span> + str(cost))</span><br><span class="line">            pred = predict(X, Y, W, b, word_to_vec_map)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pred, W, b</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">print(X_train.shape)</span><br><span class="line">print(Y_train.shape)</span><br><span class="line">print(np.eye(<span class="number">5</span>)[Y_train.reshape(<span class="number">-1</span>)].shape)</span><br><span class="line">print(X_train[<span class="number">0</span>])</span><br><span class="line">print(type(X_train))</span><br><span class="line">Y = np.asarray([<span class="number">5</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">5</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>])</span><br><span class="line">print(Y.shape)</span><br><span class="line"></span><br><span class="line">X = np.asarray([<span class="string">'I am going to the bar tonight'</span>, <span class="string">'I love you'</span>, <span class="string">'miss you my dear'</span>,</span><br><span class="line"> <span class="string">'Lets go party and drinks'</span>,<span class="string">'Congrats on the new job'</span>,<span class="string">'Congratulations'</span>,</span><br><span class="line"> <span class="string">'I am so happy for you'</span>, <span class="string">'Why are you feeling bad'</span>, <span class="string">'What is wrong with you'</span>,</span><br><span class="line"> <span class="string">'You totally deserve this prize'</span>, <span class="string">'Let us go play football'</span>,</span><br><span class="line"> <span class="string">'Are you down for football this afternoon'</span>, <span class="string">'Work hard play harder'</span>,</span><br><span class="line"> <span class="string">'It is suprising how people can be dumb sometimes'</span>,</span><br><span class="line"> <span class="string">'I am very disappointed'</span>,<span class="string">'It is the best day in my life'</span>,</span><br><span class="line"> <span class="string">'I think I will end up alone'</span>,<span class="string">'My life is so boring'</span>,<span class="string">'Good job'</span>,</span><br><span class="line"> <span class="string">'Great so awesome'</span>])</span><br><span class="line"></span><br><span class="line">print(X.shape)</span><br><span class="line">print(np.eye(<span class="number">5</span>)[Y_train.reshape(<span class="number">-1</span>)].shape)</span><br><span class="line">print(type(X_train))</span><br></pre></td></tr></table></figure><p>(132,) (132,) (132, 5) never talk to me again &lt;class 'numpy.ndarray'&gt; (20,) (20,) (132, 5) &lt;class 'numpy.ndarray'&gt;</p><p>Run the next cell to train your model and learn the softmax parameters (W,b).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pred, W, b = model(X_train, Y_train, word_to_vec_map)</span><br><span class="line">print(pred)</span><br></pre></td></tr></table></figure><p>Epoch: 0 --- cost = 1.95204988128 Accuracy: 0.348484848485 Epoch: 100 --- cost = 0.0797181872601 Accuracy: 0.931818181818 Epoch: 200 --- cost = 0.0445636924368 Accuracy: 0.954545454545 Epoch: 300 --- cost = 0.0343226737879 Accuracy: 0.969696969697 [[ 3.] [ 2.] [ 3.] [ 0.] [ 4.] [ 0.] [ 3.] [ 2.] [ 3.] [ 1.] [ 3.] [ 3.] [ 1.] [ 3.] [ 2.] [ 3.] [ 2.] [ 3.] [ 1.] [ 2.] [ 3.] [ 0.] [ 2.] [ 2.] [ 2.] [ 1.] [ 4.] [ 3.] [ 3.] [ 4.] [ 0.] [ 3.] [ 4.] [ 2.] [ 0.] [ 3.] [ 2.] [ 2.] [ 3.] [ 4.] [ 2.] [ 2.] [ 0.] [ 2.] [ 3.] [ 0.] [ 3.] [ 2.] [ 4.] [ 3.] [ 0.] [ 3.] [ 3.] [ 3.] [ 4.] [ 2.] [ 1.] [ 1.] [ 1.] [ 2.] [ 3.] [ 1.] [ 0.] [ 0.] [ 0.] [ 3.] [ 4.] [ 4.] [ 2.] [ 2.] [ 1.] [ 2.] [ 0.] [ 3.] [ 2.] [ 2.] [ 0.] [ 3.] [ 3.] [ 1.] [ 2.] [ 1.] [ 2.] [ 2.] [ 4.] [ 3.] [ 3.] [ 2.] [ 4.] [ 0.] [ 0.] [ 3.] [ 3.] [ 3.] [ 3.] [ 2.] [ 0.] [ 1.] [ 2.] [ 3.] [ 0.] [ 2.] [ 2.] [ 2.] [ 3.] [ 2.] [ 2.] [ 2.] [ 4.] [ 1.] [ 1.] [ 3.] [ 3.] [ 4.] [ 1.] [ 2.] [ 1.] [ 1.] [ 3.] [ 1.] [ 0.] [ 4.] [ 0.] [ 3.] [ 3.] [ 4.] [ 4.] [ 1.] [ 4.] [ 3.] [ 0.] [ 2.]]</p><p><strong>Expected Output</strong> (on a subset of iterations):</p><table><tr><td><strong>Epoch: 0</strong></td><td>cost = 1.95204988128</td><td>Accuracy: 0.348484848485</td></tr><tr><td><strong>Epoch: 100</strong></td><td>cost = 0.0797181872601</td><td>Accuracy: 0.931818181818</td></tr><tr><td><strong>Epoch: 200</strong></td><td>cost = 0.0445636924368</td><td>Accuracy: 0.954545454545</td></tr><tr><td><strong>Epoch: 300</strong></td><td>cost = 0.0343226737879</td><td>Accuracy: 0.969696969697</td></tr></table><p>Great! Your model has pretty high accuracy on the training set. Lets now see how it does on the test set.</p><h3 id="examining-test-set-performance">1.4 - Examining test set performance</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"Training set:"</span>)</span><br><span class="line">pred_train = predict(X_train, Y_train, W, b, word_to_vec_map)</span><br><span class="line">print(<span class="string">'Test set:'</span>)</span><br><span class="line">pred_test = predict(X_test, Y_test, W, b, word_to_vec_map)</span><br></pre></td></tr></table></figure><p>Training set: Accuracy: 0.977272727273 Test set: Accuracy: 0.857142857143</p><p><strong>Expected Output</strong>:</p><table><tr><td><strong>Train set accuracy</strong></td><td>97.7</td></tr><tr><td><strong>Test set accuracy</strong></td><td>85.7</td></tr></table><p>Random guessing would have had 20% accuracy given that there are 5 classes. This is pretty good performance after training on only 127 examples.</p><p>In the training set, the algorithm saw the sentence "<em>I love you</em>" with the label ‚ù§Ô∏è. You can check however that the word "adore" does not appear in the training set. Nonetheless, lets see what happens if you write "<em>I adore you</em>."</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">X_my_sentences = np.array([<span class="string">"i adore you"</span>, <span class="string">"i love you"</span>, <span class="string">"funny lol"</span>, <span class="string">"lets play with a ball"</span>, <span class="string">"food is ready"</span>, <span class="string">"not feeling happy"</span>])</span><br><span class="line">Y_my_labels = np.array([[<span class="number">0</span>], [<span class="number">0</span>], [<span class="number">2</span>], [<span class="number">1</span>], [<span class="number">4</span>],[<span class="number">3</span>]])</span><br><span class="line"></span><br><span class="line">pred = predict(X_my_sentences, Y_my_labels , W, b, word_to_vec_map)</span><br><span class="line">print_predictions(X_my_sentences, pred)</span><br></pre></td></tr></table></figure><p>Accuracy: 0.833333333333</p><p>i adore you ‚ù§Ô∏è i love you ‚ù§Ô∏è funny lol üòÑ lets play with a ball ‚öæ food is ready üç¥ not feeling happy üòÑ</p><p>Amazing! Because <em>adore</em> has a similar embedding as <em>love</em>, the algorithm has generalized correctly even to a word it has never seen before. Words such as <em>heart</em>, <em>dear</em>, <em>beloved</em> or <em>adore</em> have embedding vectors similar to <em>love</em>, and so might work too---feel free to modify the inputs above and try out a variety of input sentences. How well does it work?</p><p>Note though that it doesn't get "not feeling happy" correct. This algorithm ignores word ordering, so is not good at understanding phrases like "not happy."</p><p>Printing the confusion matrix can also help understand which classes are more difficult for your model. A confusion matrix shows how often an example whose label is one class ("actual" class) is mislabeled by the algorithm with a different class ("predicted" class).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(Y_test.shape)</span><br><span class="line">print(<span class="string">'           '</span>+ label_to_emoji(<span class="number">0</span>)+ <span class="string">'    '</span> + label_to_emoji(<span class="number">1</span>) + <span class="string">'    '</span> +  label_to_emoji(<span class="number">2</span>)+ <span class="string">'    '</span> + label_to_emoji(<span class="number">3</span>)+<span class="string">'   '</span> + label_to_emoji(<span class="number">4</span>))</span><br><span class="line">print(pd.crosstab(Y_test, pred_test.reshape(<span class="number">56</span>,), rownames=[<span class="string">'Actual'</span>], colnames=[<span class="string">'Predicted'</span>], margins=<span class="keyword">True</span>))</span><br><span class="line">plot_confusion_matrix(Y_test, pred_test)</span><br></pre></td></tr></table></figure><p>(56,) ‚ù§Ô∏è ‚öæ üòÑ üòû üç¥ Predicted 0.0 1.0 2.0 3.0 4.0 All Actual<br>0 6 0 0 1 0 7 1 0 8 0 0 0 8 2 2 0 16 0 0 18 3 1 1 2 12 0 16 4 0 0 1 0 6 7 All 9 9 19 13 6 56</p><figure><img src="output_34_1.png" alt="png"><figcaption>png</figcaption></figure><p><font color="blue"> <strong>What you should remember from this part</strong>: - Even with a 127 training examples, you can get a reasonably good model for Emojifying. This is due to the generalization power word vectors gives you. - Emojify-V1 will perform poorly on sentences such as <em>"This movie is not good and not enjoyable"</em> because it doesn't understand combinations of words--it just averages all the words' embedding vectors together, without paying attention to the ordering of words. You will build a better algorithm in the next part.</font></p><h2 id="emojifier-v2-using-lstms-in-keras">2 - Emojifier-V2: Using LSTMs in Keras:</h2><p>Let's build an LSTM model that takes as input word sequences. This model will be able to take word ordering into account. Emojifier-V2 will continue to use pre-trained word embeddings to represent words, but will feed them into an LSTM, whose job it is to predict the most appropriate emoji.</p><p>Run the following cell to load the Keras packages.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Model</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense, Input, Dropout, LSTM, Activation</span><br><span class="line"><span class="keyword">from</span> keras.layers.embeddings <span class="keyword">import</span> Embedding</span><br><span class="line"><span class="keyword">from</span> keras.preprocessing <span class="keyword">import</span> sequence</span><br><span class="line"><span class="keyword">from</span> keras.initializers <span class="keyword">import</span> glorot_uniform</span><br><span class="line">np.random.seed(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>Using TensorFlow backend.</p><h3 id="overview-of-the-model">2.1 - Overview of the model</h3><p>Here is the Emojifier-v2 you will implement:</p><img src="images/emojifier-v2.png" style="width:700px;height:400px;"> <br><caption><center><strong>Figure 3</strong>: Emojifier-V2. A 2-layer LSTM sequence classifier.</center></caption><h3 id="keras-and-mini-batching">2.2 Keras and mini-batching</h3><p>In this exercise, we want to train Keras using mini-batches. However, most deep learning frameworks require that all sequences in the same mini-batch have the same length. This is what allows vectorization to work: If you had a 3-word sentence and a 4-word sentence, then the computations needed for them are different (one takes 3 steps of an LSTM, one takes 4 steps) so it's just not possible to do them both at the same time.</p><p>The common solution to this is to use padding. Specifically, set a maximum sequence length, and pad all sequences to the same length. For example, of the maximum sequence length is 20, we could pad every sentence with "0"s so that each input sentence is of length 20. Thus, a sentence "i love you" would be represented as <span class="math inline">\((e_{i}, e_{love}, e_{you}, \vec{0}, \vec{0}, \ldots, \vec{0})\)</span>. In this example, any sentences longer than 20 words would have to be truncated. One simple way to choose the maximum sequence length is to just pick the length of the longest sentence in the training set.</p><h3 id="the-embedding-layer">2.3 - The Embedding layer</h3><p>In Keras, the embedding matrix is represented as a "layer", and maps positive integers (indices corresponding to words) into dense vectors of fixed size (the embedding vectors). It can be trained or initialized with a pretrained embedding. In this part, you will learn how to create an <a href="https://keras.io/layers/embeddings/" target="_blank" rel="noopener">Embedding()</a> layer in Keras, initialize it with the GloVe 50-dimensional vectors loaded earlier in the notebook. Because our training set is quite small, we will not update the word embeddings but will instead leave their values fixed. But in the code below, we'll show you how Keras allows you to either train or leave fixed this layer.</p><p>The <code>Embedding()</code> layer takes an integer matrix of size (batch size, max input length) as input. This corresponds to sentences converted into lists of indices (integers), as shown in the figure below.</p><img src="images/embedding1.png" style="width:700px;height:250px;"><caption><center><strong>Figure 4</strong>: Embedding layer. This example shows the propagation of two examples through the embedding layer. Both have been zero-padded to a length of <code>max_len=5</code>. The final dimension of the representation is <code>(2,max_len,50)</code> because the word embeddings we are using are 50 dimensional.</center></caption><p>The largest integer (i.e. word index) in the input should be no larger than the vocabulary size. The layer outputs an array of shape (batch size, max input length, dimension of word vectors).</p><p>The first step is to convert all your training sentences into lists of indices, and then zero-pad all these lists so that their length is the length of the longest sentence.</p><p><strong>Exercise</strong>: Implement the function below to convert X (array of sentences as strings) into an array of indices corresponding to words in the sentences. The output shape should be such that it can be given to <code>Embedding()</code> (described in Figure 4).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: sentences_to_indices</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sentences_to_indices</span><span class="params">(X, word_to_index, max_len)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Converts an array of sentences (strings) into an array of indices corresponding to words in the sentences.</span></span><br><span class="line"><span class="string">    The output shape should be such that it can be given to `Embedding()` (described in Figure 4). </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    X -- array of sentences (strings), of shape (m, 1)</span></span><br><span class="line"><span class="string">    word_to_index -- a dictionary containing the each word mapped to its index</span></span><br><span class="line"><span class="string">    max_len -- maximum number of words in a sentence. You can assume every sentence in X is no longer than this. </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    X_indices -- array of indices corresponding to words in the sentences from X, of shape (m, max_len)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    m = X.shape[<span class="number">0</span>]                                   <span class="comment"># number of training examples</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    <span class="comment"># Initialize X_indices as a numpy matrix of zeros and the correct shape (‚âà 1 line)</span></span><br><span class="line">    X_indices = np.zeros((m,max_len))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(m):                               <span class="comment"># loop over training examples</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Convert the ith training sentence in lower case and split is into words. You should get a list of words.</span></span><br><span class="line">        sentence_words = list(word.strip().lower() <span class="keyword">for</span> word <span class="keyword">in</span> X[i].split())</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Initialize j to 0</span></span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Loop over the words of sentence_words</span></span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> sentence_words:</span><br><span class="line">            <span class="comment"># Set the (i,j)th entry of X_indices to the index of the correct word.</span></span><br><span class="line">            X_indices[i, j] = word_to_index[w]</span><br><span class="line">            <span class="comment"># Increment j to j + 1</span></span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> X_indices</span><br></pre></td></tr></table></figure><p>Run the following cell to check what <code>sentences_to_indices()</code> does, and check your results.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">X1 = np.array([<span class="string">"funny lol"</span>, <span class="string">"lets play baseball"</span>, <span class="string">"food is ready for you"</span>])</span><br><span class="line">X1_indices = sentences_to_indices(X1,word_to_index, max_len = <span class="number">5</span>)</span><br><span class="line">print(<span class="string">"X1 ="</span>, X1)</span><br><span class="line">print(<span class="string">"X1_indices ="</span>, X1_indices)</span><br></pre></td></tr></table></figure><p>X1 = ['funny lol' 'lets play baseball' 'food is ready for you'] X1_indices = [[ 155345. 225122. 0. 0. 0.] [ 220930. 286375. 69714. 0. 0.] [ 151204. 192973. 302254. 151349. 394475.]]</p><p><strong>Expected Output</strong>:</p><table><tr><td><strong>X1 =</strong></td><td>['funny lol' 'lets play football' 'food is ready for you']</td></tr><tr><td><strong>X1_indices =</strong></td><td>[[ 155345. 225122. 0. 0. 0.] <br> [ 220930. 286375. 151266. 0. 0.] <br> [ 151204. 192973. 302254. 151349. 394475.]]</td></tr></table><p>Let's build the <code>Embedding()</code> layer in Keras, using pre-trained word vectors. After this layer is built, you will pass the output of <code>sentences_to_indices()</code> to it as an input, and the <code>Embedding()</code> layer will return the word embeddings for a sentence.</p><p><strong>Exercise</strong>: Implement <code>pretrained_embedding_layer()</code>. You will need to carry out the following steps: 1. Initialize the embedding matrix as a numpy array of zeroes with the correct shape. 2. Fill in the embedding matrix with all the word embeddings extracted from <code>word_to_vec_map</code>. 3. Define Keras embedding layer. Use <a href="https://keras.io/layers/embeddings/" target="_blank" rel="noopener">Embedding()</a>. Be sure to make this layer non-trainable, by setting <code>trainable = False</code> when calling <code>Embedding()</code>. If you were to set <code>trainable = True</code>, then it will allow the optimization algorithm to modify the values of the word embeddings. 4. Set the embedding weights to be equal to the embedding matrix</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: pretrained_embedding_layer</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pretrained_embedding_layer</span><span class="params">(word_to_vec_map, word_to_index)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Creates a Keras Embedding() layer and loads in pre-trained GloVe 50-dimensional vectors.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    word_to_vec_map -- dictionary mapping words to their GloVe vector representation.</span></span><br><span class="line"><span class="string">    word_to_index -- dictionary mapping from words to their indices in the vocabulary (400,001 words)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    embedding_layer -- pretrained layer Keras instance</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    vocab_len = len(word_to_index) + <span class="number">1</span>                  <span class="comment"># adding 1 to fit Keras embedding (requirement)</span></span><br><span class="line">    emb_dim = word_to_vec_map[<span class="string">"cucumber"</span>].shape[<span class="number">0</span>]      <span class="comment"># define dimensionality of your GloVe word vectors (= 50)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    <span class="comment"># Initialize the embedding matrix as a numpy array of zeros of shape (vocab_len, dimensions of word vectors = emb_dim)</span></span><br><span class="line">    emb_matrix = np.zeros((vocab_len,emb_dim))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Set each row "index" of the embedding matrix to be the word vector representation of the "index"th word of the vocabulary</span></span><br><span class="line">    <span class="keyword">for</span> word, index <span class="keyword">in</span> word_to_index.items():</span><br><span class="line">        emb_matrix[index, :] = word_to_vec_map[word]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Define Keras embedding layer with the correct output/input sizes, make it trainable. Use Embedding(...). Make sure to set trainable=False. </span></span><br><span class="line">    embedding_layer = Embedding(input_dim=vocab_len, output_dim=emb_dim, trainable = <span class="keyword">False</span>)</span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Build the embedding layer, it is required before setting the weights of the embedding layer. Do not modify the "None".</span></span><br><span class="line">    embedding_layer.build((<span class="keyword">None</span>,))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Set the weights of the embedding layer to the embedding matrix. Your layer is now pretrained.</span></span><br><span class="line">    embedding_layer.set_weights([emb_matrix])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> embedding_layer</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">embedding_layer = pretrained_embedding_layer(word_to_vec_map, word_to_index)</span><br><span class="line">print(<span class="string">"weights[0][1][3] ="</span>, embedding_layer.get_weights()[<span class="number">0</span>][<span class="number">1</span>][<span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>weights[0][1][3] = -0.3403</p><p><strong>Expected Output</strong>:</p><table><tr><td><strong>weights[0][1][3] =</strong></td><td>-0.3403</td></tr></table><h2 id="building-the-emojifier-v2">2.3 Building the Emojifier-V2</h2><p>Lets now build the Emojifier-V2 model. You will do so using the embedding layer you have built, and feed its output to an LSTM network.</p><img src="images/emojifier-v2.png" style="width:700px;height:400px;"> <br><caption><center><strong>Figure 3</strong>: Emojifier-v2. A 2-layer LSTM sequence classifier.</center></caption><p><strong>Exercise:</strong> Implement <code>Emojify_V2()</code>, which builds a Keras graph of the architecture shown in Figure 3. The model takes as input an array of sentences of shape (<code>m</code>, <code>max_len</code>, ) defined by <code>input_shape</code>. It should output a softmax probability vector of shape (<code>m</code>, <code>C = 5</code>). You may need <code>Input(shape = ..., dtype = '...')</code>, <a href="https://keras.io/layers/recurrent/#lstm" target="_blank" rel="noopener">LSTM()</a>, <a href="https://keras.io/layers/core/#dropout" target="_blank" rel="noopener">Dropout()</a>, <a href="https://keras.io/layers/core/#dense" target="_blank" rel="noopener">Dense()</a>, and <a href="https://keras.io/activations/" target="_blank" rel="noopener">Activation()</a>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: Emojify_V2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Emojify_V2</span><span class="params">(input_shape, word_to_vec_map, word_to_index)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Function creating the Emojify-v2 model's graph.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    input_shape -- shape of the input, usually (max_len,)</span></span><br><span class="line"><span class="string">    word_to_vec_map -- dictionary mapping every word in a vocabulary into its 50-dimensional vector representation</span></span><br><span class="line"><span class="string">    word_to_index -- dictionary mapping from words to their indices in the vocabulary (400,001 words)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    model -- a model instance in Keras</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    <span class="comment"># Define sentence_indices as the input of the graph, it should be of shape input_shape and dtype 'int32' (as it contains indices).</span></span><br><span class="line">    sentence_indices = Input(shape=input_shape, dtype=np.int32)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Create the embedding layer pretrained with GloVe Vectors (‚âà1 line)</span></span><br><span class="line">    embedding_layer = pretrained_embedding_layer(word_to_vec_map, word_to_index)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Propagate sentence_indices through your embedding layer, you get back the embeddings</span></span><br><span class="line">    embeddings = embedding_layer(sentence_indices)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Propagate the embeddings through an LSTM layer with 128-dimensional hidden state</span></span><br><span class="line">    <span class="comment"># Be careful, the returned output should be a batch of sequences.</span></span><br><span class="line">    X = LSTM(<span class="number">128</span>, return_sequences=<span class="keyword">True</span>)(embeddings)</span><br><span class="line">    <span class="comment"># Add dropout with a probability of 0.5</span></span><br><span class="line">    X = Dropout(<span class="number">0.5</span>)(X)</span><br><span class="line">    <span class="comment"># Propagate X trough another LSTM layer with 128-dimensional hidden state</span></span><br><span class="line">    <span class="comment"># Be careful, the returned output should be a single hidden state, not a batch of sequences.</span></span><br><span class="line">    X = LSTM(<span class="number">128</span>)(X)</span><br><span class="line">    <span class="comment"># Add dropout with a probability of 0.5</span></span><br><span class="line">    X = Dropout(<span class="number">0.5</span>)(X)</span><br><span class="line">    <span class="comment"># Propagate X through a Dense layer with softmax activation to get back a batch of 5-dimensional vectors.</span></span><br><span class="line">    X = Dense(<span class="number">5</span>)(X)</span><br><span class="line">    <span class="comment"># Add a softmax activation</span></span><br><span class="line">    X = Activation(<span class="string">"softmax"</span>)(X)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Create Model instance which converts sentence_indices into X.</span></span><br><span class="line">    model = Model(sentence_indices, X)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> model</span><br></pre></td></tr></table></figure><p>Run the following cell to create your model and check its summary. Because all sentences in the dataset are less than 10 words, we chose <code>max_len = 10</code>. You should see your architecture, it uses "20,223,927" parameters, of which 20,000,050 (the word embeddings) are non-trainable, and the remaining 223,877 are. Because our vocabulary size has 400,001 words (with valid indices from 0 to 400,000) there are 400,001*50 = 20,000,050 non-trainable parameters.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model = Emojify_V2((maxLen,), word_to_vec_map, word_to_index)</span><br><span class="line">model.summary()</span><br></pre></td></tr></table></figure><hr><p>Layer (type) Output Shape Param #<br>================================================================= input_8 (InputLayer) (None, 10) 0<br>_________________________________________________________________ embedding_12 (Embedding) (None, 10, 50) 20000050<br>_________________________________________________________________ lstm_7 (LSTM) (None, 10, 128) 91648<br>_________________________________________________________________ dropout_7 (Dropout) (None, 10, 128) 0<br>_________________________________________________________________ lstm_8 (LSTM) (None, 128) 131584<br>_________________________________________________________________ dropout_8 (Dropout) (None, 128) 0<br>_________________________________________________________________ dense_4 (Dense) (None, 5) 645<br>_________________________________________________________________ activation_2 (Activation) (None, 5) 0<br>================================================================= Total params: 20,223,927 Trainable params: 223,877 Non-trainable params: 20,000,050 _________________________________________________________________</p><p>As usual, after creating your model in Keras, you need to compile it and define what loss, optimizer and metrics your are want to use. Compile your model using <code>categorical_crossentropy</code> loss, <code>adam</code> optimizer and <code>['accuracy']</code> metrics:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.compile(loss=<span class="string">'categorical_crossentropy'</span>, optimizer=<span class="string">'adam'</span>, metrics=[<span class="string">'accuracy'</span>])</span><br></pre></td></tr></table></figure><p>It's time to train your model. Your Emojifier-V2 <code>model</code> takes as input an array of shape (<code>m</code>, <code>max_len</code>) and outputs probability vectors of shape (<code>m</code>, <code>number of classes</code>). We thus have to convert X_train (array of sentences as strings) to X_train_indices (array of sentences as list of word indices), and Y_train (labels as indices) to Y_train_oh (labels as one-hot vectors).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X_train_indices = sentences_to_indices(X_train, word_to_index, maxLen)</span><br><span class="line">Y_train_oh = convert_to_one_hot(Y_train, C = <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>Fit the Keras model on <code>X_train_indices</code> and <code>Y_train_oh</code>. We will use <code>epochs = 50</code> and <code>batch_size = 32</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.fit(X_train_indices, Y_train_oh, epochs = <span class="number">50</span>, batch_size = <span class="number">32</span>, shuffle=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>Epoch 1/50 132/132 [==============================] - 2s - loss: 1.5849 - acc: 0.2803<br>Epoch 2/50 132/132 [==============================] - 1s - loss: 1.5141 - acc: 0.3561<br>Epoch 3/50 132/132 [==============================] - 1s - loss: 1.4491 - acc: 0.4015<br>Epoch 4/50 132/132 [==============================] - 1s - loss: 1.3842 - acc: 0.4697<br>Epoch 5/50 132/132 [==============================] - 1s - loss: 1.2707 - acc: 0.5682<br>Epoch 6/50 132/132 [==============================] - 1s - loss: 1.1938 - acc: 0.6061<br>Epoch 7/50 132/132 [==============================] - 1s - loss: 1.0537 - acc: 0.6288<br>Epoch 8/50 132/132 [==============================] - 1s - loss: 0.8624 - acc: 0.7197<br>Epoch 9/50 132/132 [==============================] - 1s - loss: 0.7310 - acc: 0.7652<br>Epoch 10/50 132/132 [==============================] - 1s - loss: 0.7352 - acc: 0.7424<br>Epoch 11/50 132/132 [==============================] - 1s - loss: 0.6254 - acc: 0.7727<br>Epoch 12/50 132/132 [==============================] - 1s - loss: 0.6052 - acc: 0.7652<br>Epoch 13/50 132/132 [==============================] - 1s - loss: 0.4912 - acc: 0.8182<br>Epoch 14/50 132/132 [==============================] - 2s - loss: 0.5649 - acc: 0.7955<br>Epoch 15/50 132/132 [==============================] - 1s - loss: 0.4459 - acc: 0.8106<br>Epoch 16/50 132/132 [==============================] - 1s - loss: 0.4127 - acc: 0.8485<br>Epoch 17/50 132/132 [==============================] - 1s - loss: 0.4326 - acc: 0.8409<br>Epoch 18/50 132/132 [==============================] - 1s - loss: 0.3347 - acc: 0.8864<br>Epoch 19/50 132/132 [==============================] - 1s - loss: 0.3094 - acc: 0.8788<br>Epoch 20/50 132/132 [==============================] - 1s - loss: 0.3379 - acc: 0.8864<br>Epoch 21/50 132/132 [==============================] - 1s - loss: 0.2688 - acc: 0.9091<br>Epoch 22/50 132/132 [==============================] - 1s - loss: 0.2411 - acc: 0.8864<br>Epoch 23/50 132/132 [==============================] - 1s - loss: 0.2875 - acc: 0.8939<br>Epoch 24/50 132/132 [==============================] - 1s - loss: 0.2610 - acc: 0.9091<br>Epoch 25/50 132/132 [==============================] - 1s - loss: 0.2013 - acc: 0.9242<br>Epoch 26/50 132/132 [==============================] - 1s - loss: 0.2356 - acc: 0.9167<br>Epoch 27/50 132/132 [==============================] - 1s - loss: 0.2242 - acc: 0.9318<br>Epoch 28/50 132/132 [==============================] - 1s - loss: 0.2021 - acc: 0.9242<br>Epoch 29/50 132/132 [==============================] - 1s - loss: 0.1653 - acc: 0.9394<br>Epoch 30/50 132/132 [==============================] - 1s - loss: 0.1255 - acc: 0.9545<br>Epoch 31/50 132/132 [==============================] - 1s - loss: 0.1019 - acc: 0.9697<br>Epoch 32/50 132/132 [==============================] - 1s - loss: 0.0817 - acc: 0.9697<br>Epoch 33/50 132/132 [==============================] - 1s - loss: 0.0716 - acc: 0.9773<br>Epoch 34/50 132/132 [==============================] - 1s - loss: 0.0623 - acc: 0.9848<br>Epoch 35/50 132/132 [==============================] - 1s - loss: 0.0860 - acc: 0.9697<br>Epoch 36/50 132/132 [==============================] - 1s - loss: 0.0378 - acc: 0.9924<br>Epoch 37/50 132/132 [==============================] - 1s - loss: 0.0587 - acc: 0.9848<br>Epoch 38/50 132/132 [==============================] - 1s - loss: 0.0995 - acc: 0.9621<br>Epoch 39/50 132/132 [==============================] - 1s - loss: 0.1803 - acc: 0.9394<br>Epoch 40/50 132/132 [==============================] - 1s - loss: 0.1462 - acc: 0.9545<br>Epoch 41/50 132/132 [==============================] - 1s - loss: 0.1343 - acc: 0.9773<br>Epoch 42/50 132/132 [==============================] - 1s - loss: 0.1418 - acc: 0.9470<br>Epoch 43/50 132/132 [==============================] - 1s - loss: 0.1431 - acc: 0.9621<br>Epoch 44/50 132/132 [==============================] - 1s - loss: 0.2848 - acc: 0.8939<br>Epoch 45/50 132/132 [==============================] - 1s - loss: 0.2080 - acc: 0.9318<br>Epoch 46/50 132/132 [==============================] - 1s - loss: 0.1823 - acc: 0.9242<br>Epoch 47/50 132/132 [==============================] - 1s - loss: 0.0987 - acc: 0.9773<br>Epoch 48/50 132/132 [==============================] - 1s - loss: 0.1035 - acc: 0.9697<br>Epoch 49/50 132/132 [==============================] - 1s - loss: 0.0678 - acc: 0.9924<br>Epoch 50/50 132/132 [==============================] - 1s - loss: 0.0584 - acc: 1.0000</p><p>&lt;keras.callbacks.History at 0x7fca9faba2e8&gt;</p><p>Your model should perform close to <strong>100% accuracy</strong> on the training set. The exact accuracy you get may be a little different. Run the following cell to evaluate your model on the test set.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">X_test_indices = sentences_to_indices(X_test, word_to_index, max_len = maxLen)</span><br><span class="line">Y_test_oh = convert_to_one_hot(Y_test, C = <span class="number">5</span>)</span><br><span class="line">loss, acc = model.evaluate(X_test_indices, Y_test_oh)</span><br><span class="line">print()</span><br><span class="line">print(<span class="string">"Test accuracy = "</span>, acc)</span><br></pre></td></tr></table></figure><p>56/56 [==============================] - 0s</p><p>Test accuracy = 0.875</p><p>You should get a test accuracy between 80% and 95%. Run the cell below to see the mislabelled examples.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This code allows you to see the mislabelled examples</span></span><br><span class="line">C = <span class="number">5</span></span><br><span class="line">y_test_oh = np.eye(C)[Y_test.reshape(<span class="number">-1</span>)]</span><br><span class="line">X_test_indices = sentences_to_indices(X_test, word_to_index, maxLen)</span><br><span class="line">pred = model.predict(X_test_indices)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(X_test)):</span><br><span class="line">    x = X_test_indices</span><br><span class="line">    num = np.argmax(pred[i])</span><br><span class="line">    <span class="keyword">if</span>(num != Y_test[i]):</span><br><span class="line">        print(<span class="string">'Expected emoji:'</span>+ label_to_emoji(Y_test[i]) + <span class="string">' prediction: '</span>+ X_test[i] + label_to_emoji(num).strip())</span><br></pre></td></tr></table></figure><p>Expected emoji:üòû prediction: This girl is messing with me ‚ù§Ô∏è Expected emoji:üòû prediction: work is horrible üòÑ Expected emoji:‚ù§Ô∏è prediction: I love taking breaks üòû Expected emoji:üòû prediction: she is a bully üòÑ Expected emoji:‚öæ prediction: he can pitch really well üòÑ Expected emoji:üòû prediction: go away ‚öæ Expected emoji:‚ù§Ô∏è prediction: family is all I have üòû</p><p>Now you can try it on your own example. Write your own sentence below.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Change the sentence below to see your prediction. Make sure all the words are in the Glove embeddings.  </span></span><br><span class="line">x_test = np.array([<span class="string">'not feeling happy'</span>])</span><br><span class="line">X_test_indices = sentences_to_indices(x_test, word_to_index, maxLen)</span><br><span class="line">print(x_test[<span class="number">0</span>] +<span class="string">' '</span>+  label_to_emoji(np.argmax(model.predict(X_test_indices))))</span><br></pre></td></tr></table></figure><p>not feeling happy üòû</p><p>Previously, Emojify-V1 model did not correctly label "not feeling happy," but our implementation of Emojiy-V2 got it right. (Keras' outputs are slightly random each time, so you may not have obtained the same result.) The current model still isn't very robust at understanding negation (like "not happy") because the training set is small and so doesn't have a lot of examples of negation. But if the training set were larger, the LSTM model would be much better than the Emojify-V1 model at understanding such complex sentences.</p><h3 id="congratulations">Congratulations!</h3><p>You have completed this notebook! ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è</p><p><font color="blue"> <strong>What you should remember</strong>: - If you have an NLP task where the training set is small, using word embeddings can help your algorithm significantly. Word embeddings allow your model to work on words in the test set that may not even have appeared in your training set. - Training sequence models in Keras (and in most other deep learning frameworks) requires a few important details: - To use mini-batches, the sequences need to be padded so that all the examples in a mini-batch have the same length. - An <code>Embedding()</code> layer can be initialized with pretrained values. These values can be either fixed or trained further on your dataset. If however your labeled dataset is small, it's usually not worth trying to train a large pre-trained set of embeddings.<br>- <code>LSTM()</code> has a flag called <code>return_sequences</code> to decide if you would like to return every hidden states or only the last one. - You can use <code>Dropout()</code> right after <code>LSTM()</code> to regularize your network.</font></p><p>Congratulations on finishing this assignment and building an Emojifier. We hope you're happy with what you've accomplished in this notebook!</p><h1 id="section">üòÄüòÄüòÄüòÄüòÄüòÄ</h1><h2 id="acknowledgments">Acknowledgments</h2><p>Thanks to Alison Darcy and the Woebot team for their advice on the creation of this assignment. Woebot is a chatbot friend that is ready to speak with you 24/7. As part of Woebot's technology, it uses word embeddings to understand the emotions of what you say. You can play with it by going to http://woebot.io</p><p><img src="images/woebot.png" style="width:600px;height:300px;"></p>]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sequence Models </tag>
            
            <tag> Homework of Online Coueses </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Operations on word vectors - Debiasing</title>
      <link href="/Operations-on-word-vectors-Debiasing/2019/03/28/"/>
      <url>/Operations-on-word-vectors-Debiasing/2019/03/28/</url>
      
        <content type="html"><![CDATA[<h1 id="operations-on-word-vectors">Operations on word vectors</h1><p>Welcome to your first assignment of this week!</p><p>Because word embeddings are very computionally expensive to train, most ML practitioners will load a pre-trained set of embeddings.</p><p><strong>After this assignment you will be able to:</strong></p><ul><li>Load pre-trained word vectors, and measure similarity using cosine similarity</li><li>Use word embeddings to solve word analogy problems such as Man is to Woman as King is to ______.</li><li>Modify word embeddings to reduce their gender bias</li></ul><p>Let's get started! Run the following cell to load the packages you will need.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> w2v_utils <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><pre><code>Using TensorFlow backend.</code></pre><p>Next, lets load the word vectors. For this assignment, we will use 50-dimensional GloVe vectors to represent words. Run the following cell to load the <code>word_to_vec_map</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">words, word_to_vec_map = read_glove_vecs(<span class="string">'../../readonly/glove.6B.50d.txt'</span>)</span><br></pre></td></tr></table></figure><p>You've loaded: - <code>words</code>: set of words in the vocabulary. - <code>word_to_vec_map</code>: dictionary mapping words to their GloVe vector representation.</p><p>You've seen that one-hot vectors do not do a good job cpaturing what words are similar. GloVe vectors provide much more useful information about the meaning of individual words. Lets now see how you can use GloVe vectors to decide how similar two words are.</p><h1 id="cosine-similarity">1 - Cosine similarity</h1><p>To measure how similar two words are, we need a way to measure the degree of similarity between two embedding vectors for the two words. Given two vectors <span class="math inline">\(u\)</span> and <span class="math inline">\(v\)</span>, cosine similarity is defined as follows:</p><p><span class="math display">\[\text{CosineSimilarity(u, v)} = \frac {u . v} {||u||_2 ||v||_2} = cos(\theta)¬†\tag{1}\]</span></p><p>where <span class="math inline">\(u.v\)</span> is the dot product (or inner product) of two vectors, <span class="math inline">\(||u||_2\)</span> is the norm (or length) of the vector <span class="math inline">\(u\)</span>, and <span class="math inline">\(\theta\)</span> is the angle between <span class="math inline">\(u\)</span> and <span class="math inline">\(v\)</span>. This similarity depends on the angle between <span class="math inline">\(u\)</span> and <span class="math inline">\(v\)</span>. If <span class="math inline">\(u\)</span> and <span class="math inline">\(v\)</span> are very similar, their cosine similarity will be close to 1; if they are dissimilar, the cosine similarity will take a smaller value.</p><img src="images/cosine_sim.png" style="width:800px;height:250px;"><caption><center><strong>Figure 1</strong>: The cosine of the angle between two vectors is a measure of how similar they are</center></caption><p><strong>Exercise</strong>: Implement the function <code>cosine_similarity()</code> to evaluate similarity between word vectors.</p><p><strong>Reminder</strong>: The norm of <span class="math inline">\(u\)</span> is defined as $ ||u||_2 = $</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: cosine_similarity</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cosine_similarity</span><span class="params">(u, v)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Cosine similarity reflects the degree of similariy between u and v</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        u -- a word vector of shape (n,)          </span></span><br><span class="line"><span class="string">        v -- a word vector of shape (n,)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        cosine_similarity -- the cosine similarity between u and v defined by the formula above.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    distance = <span class="number">0.0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    <span class="comment"># Compute the dot product between u and v (‚âà1 line)</span></span><br><span class="line">    dot = np.dot(u,v)</span><br><span class="line">    <span class="comment"># Compute the L2 norm of u (‚âà1 line)</span></span><br><span class="line">    norm_u = np.sqrt(np.sum(u ** <span class="number">2</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Compute the L2 norm of v (‚âà1 line)</span></span><br><span class="line">    norm_v = np.linalg.norm(v)</span><br><span class="line">    <span class="comment"># Compute the cosine similarity defined by formula (1) (‚âà1 line)</span></span><br><span class="line">    cosine_similarity = dot / (norm_u * norm_v)</span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> cosine_similarity</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">father = word_to_vec_map[<span class="string">"father"</span>]</span><br><span class="line">mother = word_to_vec_map[<span class="string">"mother"</span>]</span><br><span class="line">ball = word_to_vec_map[<span class="string">"ball"</span>]</span><br><span class="line">crocodile = word_to_vec_map[<span class="string">"crocodile"</span>]</span><br><span class="line">france = word_to_vec_map[<span class="string">"france"</span>]</span><br><span class="line">italy = word_to_vec_map[<span class="string">"italy"</span>]</span><br><span class="line">paris = word_to_vec_map[<span class="string">"paris"</span>]</span><br><span class="line">rome = word_to_vec_map[<span class="string">"rome"</span>]</span><br><span class="line"></span><br><span class="line">print(<span class="string">"cosine_similarity(father, mother) = "</span>, cosine_similarity(father, mother))</span><br><span class="line">print(<span class="string">"cosine_similarity(ball, crocodile) = "</span>,cosine_similarity(ball, crocodile))</span><br><span class="line">print(<span class="string">"cosine_similarity(france - paris, rome - italy) = "</span>,cosine_similarity(france - paris, rome - italy))</span><br></pre></td></tr></table></figure><pre><code>cosine_similarity(father, mother) =  0.890903844289cosine_similarity(ball, crocodile) =  0.274392462614cosine_similarity(france - paris, rome - italy) =  -0.675147930817</code></pre><p><strong>Expected Output</strong>:</p><table><tr><td><strong>cosine_similarity(father, mother)</strong> =</td><td>0.890903844289</td></tr><tr><td><strong>cosine_similarity(ball, crocodile)</strong> =</td><td>0.274392462614</td></tr><tr><td><strong>cosine_similarity(france - paris, rome - italy)</strong> =</td><td>-0.675147930817</td></tr></table><p>After you get the correct expected output, please feel free to modify the inputs and measure the cosine similarity between other pairs of words! Playing around the cosine similarity of other inputs will give you a better sense of how word vectors behave.</p><h2 id="word-analogy-task">2 - Word analogy task</h2><p>In the word analogy task, we complete the sentence <font color="brown">"<em>a</em> is to <em>b</em> as <em>c</em> is to <strong>____</strong>"</font>. An example is <font color="brown"> '<em>man</em> is to <em>woman</em> as <em>king</em> is to <em>queen</em>' </font>. In detail, we are trying to find a word <em>d</em>, such that the associated word vectors <span class="math inline">\(e_a, e_b, e_c, e_d\)</span> are related in the following manner: <span class="math inline">\(e_b - e_a \approx e_d - e_c\)</span>. We will measure the similarity between <span class="math inline">\(e_b - e_a\)</span> and <span class="math inline">\(e_d - e_c\)</span> using cosine similarity.</p><p><strong>Exercise</strong>: Complete the code below to be able to perform word analogies!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: complete_analogy</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">complete_analogy</span><span class="params">(word_a, word_b, word_c, word_to_vec_map)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Performs the word analogy task as explained above: a is to b as c is to ____. </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    word_a -- a word, string</span></span><br><span class="line"><span class="string">    word_b -- a word, string</span></span><br><span class="line"><span class="string">    word_c -- a word, string</span></span><br><span class="line"><span class="string">    word_to_vec_map -- dictionary that maps words to their corresponding vectors. </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    best_word --  the word such that v_b - v_a is close to v_best_word - v_c, as measured by cosine similarity</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># convert words to lower case</span></span><br><span class="line">    word_a, word_b, word_c = word_a.lower(), word_b.lower(), word_c.lower()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    <span class="comment"># Get the word embeddings v_a, v_b and v_c (‚âà1-3 lines)</span></span><br><span class="line">    e_a, e_b, e_c = word_to_vec_map[word_a],word_to_vec_map[word_b],word_to_vec_map[word_c]</span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    words = word_to_vec_map.keys()</span><br><span class="line">    max_cosine_sim = <span class="number">-100</span>              <span class="comment"># Initialize max_cosine_sim to a large negative number</span></span><br><span class="line">    best_word = <span class="keyword">None</span>                  <span class="comment"># Initialize best_word with None, it will help keep track of the word to output</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># loop over the whole word vector set</span></span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> words:        </span><br><span class="line">        <span class="comment"># to avoid best_word being one of the input words, pass on them.</span></span><br><span class="line">        <span class="keyword">if</span> w <span class="keyword">in</span> [word_a, word_b, word_c] :</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">### START CODE HERE ###</span></span><br><span class="line">        <span class="comment"># Compute cosine similarity between the vector (e_b - e_a) and the vector ((w's vector representation) - e_c)  (‚âà1 line)</span></span><br><span class="line">        cosine_sim = cosine_similarity(e_b - e_a, word_to_vec_map[w] - e_c)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># If the cosine_sim is more than the max_cosine_sim seen so far,</span></span><br><span class="line">            <span class="comment"># then: set the new max_cosine_sim to the current cosine_sim and the best_word to the current word (‚âà3 lines)</span></span><br><span class="line">        <span class="keyword">if</span> cosine_sim &gt; max_cosine_sim:</span><br><span class="line">            max_cosine_sim = cosine_sim</span><br><span class="line">            best_word = w</span><br><span class="line">        <span class="comment">### END CODE HERE ###</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> best_word</span><br></pre></td></tr></table></figure><p>Run the cell below to test your code, this may take 1-2 minutes.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">triads_to_try = [(<span class="string">'italy'</span>, <span class="string">'italian'</span>, <span class="string">'spain'</span>), (<span class="string">'india'</span>, <span class="string">'delhi'</span>, <span class="string">'japan'</span>), (<span class="string">'man'</span>, <span class="string">'woman'</span>, <span class="string">'boy'</span>), (<span class="string">'small'</span>, <span class="string">'smaller'</span>, <span class="string">'large'</span>)]</span><br><span class="line"><span class="keyword">for</span> triad <span class="keyword">in</span> triads_to_try:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'&#123;&#125; -&gt; &#123;&#125; :: &#123;&#125; -&gt; &#123;&#125;'</span>.format( *triad, complete_analogy(*triad,word_to_vec_map)))</span><br></pre></td></tr></table></figure><p>italy -&gt; italian :: spain -&gt; spanish india -&gt; delhi :: japan -&gt; tokyo man -&gt; woman :: boy -&gt; girl small -&gt; smaller :: large -&gt; larger</p><p><strong>Expected Output</strong>:</p><table><tr><td><strong>italy -&gt; italian</strong> ::</td><td>spain -&gt; spanish</td></tr><tr><td><strong>india -&gt; delhi</strong> ::</td><td>japan -&gt; tokyo</td></tr><tr><td><strong>man -&gt; woman </strong> ::</td><td>boy -&gt; girl</td></tr><tr><td><strong>small -&gt; smaller </strong> ::</td><td>large -&gt; larger</td></tr></table><p>Once you get the correct expected output, please feel free to modify the input cells above to test your own analogies. Try to find some other analogy pairs that do work, but also find some where the algorithm doesn't give the right answer: For example, you can try small-&gt;smaller as big-&gt;?.</p><h3 id="congratulations">Congratulations!</h3><p>You've come to the end of this assignment. Here are the main points you should remember:</p><ul><li>Cosine similarity a good way to compare similarity between pairs of word vectors. (Though L2 distance works too.)</li><li>For NLP applications, using a pre-trained set of word vectors from the internet is often a good way to get started.</li></ul><p>Even though you have finished the graded portions, we recommend you take a look too at the rest of this notebook.</p><p>Congratulations on finishing the graded portions of this notebook!</p><h2 id="debiasing-word-vectors-optionalungraded">3 - Debiasing word vectors (OPTIONAL/UNGRADED)</h2><p>In the following exercise, you will examine gender biases that can be reflected in a word embedding, and explore algorithms for reducing the bias. In addition to learning about the topic of debiasing, this exercise will also help hone your intuition about what word vectors are doing. This section involves a bit of linear algebra, though you can probably complete it even without being expert in linear algebra, and we encourage you to give it a shot. This portion of the notebook is optional and is not graded.</p><p>Lets first see how the GloVe word embeddings relate to gender. You will first compute a vector <span class="math inline">\(g = e_{woman}-e_{man}\)</span>, where <span class="math inline">\(e_{woman}\)</span> represents the word vector corresponding to the word <em>woman</em>, and <span class="math inline">\(e_{man}\)</span> corresponds to the word vector corresponding to the word <em>man</em>. The resulting vector <span class="math inline">\(g\)</span> roughly encodes the concept of "gender". (You might get a more accurate representation if you compute <span class="math inline">\(g_1 = e_{mother}-e_{father}\)</span>, <span class="math inline">\(g_2 = e_{girl}-e_{boy}\)</span>, etc. and average over them. But just using <span class="math inline">\(e_{woman}-e_{man}\)</span> will give good enough results for now.)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g = word_to_vec_map[<span class="string">'woman'</span>] - word_to_vec_map[<span class="string">'man'</span>]</span><br><span class="line">print(g)</span><br></pre></td></tr></table></figure><p>[-0.087144 0.2182 -0.40986 -0.03922 -0.1032 0.94165 -0.06042 0.32988 0.46144 -0.35962 0.31102 -0.86824 0.96006 0.01073 0.24337 0.08193 -1.02722 -0.21122 0.695044 -0.00222 0.29106 0.5053 -0.099454 0.40445 0.30181 0.1355 -0.0606 -0.07131 -0.19245 -0.06115 -0.3204 0.07165 -0.13337 -0.25068714 -0.14293 -0.224957 -0.149 0.048882 0.12191 -0.27362 -0.165476 -0.20426 0.54376 -0.271425 -0.10245 -0.32108 0.2516 -0.33455 -0.04371 0.01258 ]</p><p>Now, you will consider the cosine similarity of different words with <span class="math inline">\(g\)</span>. Consider what a positive value of similarity means vs a negative cosine similarity.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (<span class="string">'List of names and their similarities with constructed vector:'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># girls and boys name</span></span><br><span class="line">name_list = [<span class="string">'john'</span>, <span class="string">'marie'</span>, <span class="string">'sophie'</span>, <span class="string">'ronaldo'</span>, <span class="string">'priya'</span>, <span class="string">'rahul'</span>, <span class="string">'danielle'</span>, <span class="string">'reza'</span>, <span class="string">'katy'</span>, <span class="string">'yasmin'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> name_list:</span><br><span class="line">    <span class="keyword">print</span> (w, cosine_similarity(word_to_vec_map[w], g))</span><br></pre></td></tr></table></figure><p>List of names and their similarities with constructed vector: john -0.23163356146 marie 0.315597935396 sophie 0.318687898594 ronaldo -0.312447968503 priya 0.17632041839 rahul -0.169154710392 danielle 0.243932992163 reza -0.079304296722 katy 0.283106865957 yasmin 0.233138577679</p><p>As you can see, female first names tend to have a positive cosine similarity with our constructed vector <span class="math inline">\(g\)</span>, while male first names tend to have a negative cosine similarity. This is not suprising, and the result seems acceptable.</p><p>But let's try with some other words.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'Other words and their similarities:'</span>)</span><br><span class="line">word_list = [<span class="string">'lipstick'</span>, <span class="string">'guns'</span>, <span class="string">'science'</span>, <span class="string">'arts'</span>, <span class="string">'literature'</span>, <span class="string">'warrior'</span>,<span class="string">'doctor'</span>, <span class="string">'tree'</span>, <span class="string">'receptionist'</span>, </span><br><span class="line">             <span class="string">'technology'</span>,  <span class="string">'fashion'</span>, <span class="string">'teacher'</span>, <span class="string">'engineer'</span>, <span class="string">'pilot'</span>, <span class="string">'computer'</span>, <span class="string">'singer'</span>]</span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> word_list:</span><br><span class="line">    <span class="keyword">print</span> (w, cosine_similarity(word_to_vec_map[w], g))</span><br></pre></td></tr></table></figure><p>Other words and their similarities: lipstick 0.276919162564 guns -0.18884855679 science -0.0608290654093 arts 0.00818931238588 literature 0.0647250443346 warrior -0.209201646411 doctor 0.118952894109 tree -0.0708939917548 receptionist 0.330779417506 technology -0.131937324476 fashion 0.0356389462577 teacher 0.179209234318 engineer -0.0803928049452 pilot 0.00107644989919 computer -0.103303588739 singer 0.185005181365</p><p>Do you notice anything surprising? It is astonishing how these results reflect certain unhealthy gender stereotypes. For example, "computer" is closer to "man" while "literature" is closer to "woman". Ouch!</p><p>We'll see below how to reduce the bias of these vectors, using an algorithm due to <a href="https://arxiv.org/abs/1607.06520" target="_blank" rel="noopener">Boliukbasi et al., 2016</a>. Note that some word pairs such as "actor"/"actress" or "grandmother"/"grandfather" should remain gender specific, while other words such as "receptionist" or "technology" should be neutralized, i.e. not be gender-related. You will have to treat these two type of words differently when debiasing.</p><h3 id="neutralize-bias-for-non-gender-specific-words">3.1 - Neutralize bias for non-gender specific words</h3><p>The figure below should help you visualize what neutralizing does. If you're using a 50-dimensional word embedding, the 50 dimensional space can be split into two parts: The bias-direction <span class="math inline">\(g\)</span>, and the remaining 49 dimensions, which we'll call <span class="math inline">\(g_{\perp}\)</span>. In linear algebra, we say that the 49 dimensional <span class="math inline">\(g_{\perp}\)</span> is perpendicular (or "othogonal") to <span class="math inline">\(g\)</span>, meaning it is at 90 degrees to <span class="math inline">\(g\)</span>. The neutralization step takes a vector such as <span class="math inline">\(e_{receptionist}\)</span> and zeros out the component in the direction of <span class="math inline">\(g\)</span>, giving us <span class="math inline">\(e_{receptionist}^{debiased}\)</span>.</p><p>Even though <span class="math inline">\(g_{\perp}\)</span> is 49 dimensional, given the limitations of what we can draw on a screen, we illustrate it using a 1 dimensional axis below.</p><img src="images/neutral.png" style="width:800px;height:300px;"><caption><center><strong>Figure 2</strong>: The word vector for "receptionist" represented before and after applying the neutralize operation.</center></caption><p><strong>Exercise</strong>: Implement <code>neutralize()</code> to remove the bias of words such as "receptionist" or "scientist". Given an input embedding <span class="math inline">\(e\)</span>, you can use the following formulas to compute <span class="math inline">\(e^{debiased}\)</span>:</p><p><span class="math display">\[e^{bias\_component} = \frac{e \cdot g}{||g||_2^2} * g\tag{2}\]</span> <span class="math display">\[e^{debiased} = e - e^{bias\_component}\tag{3}\]</span></p><p>If you are an expert in linear algebra, you may recognize <span class="math inline">\(e^{bias\_component}\)</span> as the projection of <span class="math inline">\(e\)</span> onto the direction <span class="math inline">\(g\)</span>. If you're not an expert in linear algebra, don't worry about this.</p><!-- **Reminder**: a vector $u$ can be split into two parts: its projection over a vector-axis $v_B$ and its projection over the axis orthogonal to $v$:$$u = u_B + u_{\perp}$$where : $u_B = $ and $ u_{\perp} = u - u_B $!--><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">neutralize</span><span class="params">(word, g, word_to_vec_map)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Removes the bias of "word" by projecting it on the space orthogonal to the bias axis. </span></span><br><span class="line"><span class="string">    This function ensures that gender neutral words are zero in the gender subspace.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        word -- string indicating the word to debias</span></span><br><span class="line"><span class="string">        g -- numpy-array of shape (50,), corresponding to the bias axis (such as gender)</span></span><br><span class="line"><span class="string">        word_to_vec_map -- dictionary mapping words to their corresponding vectors.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        e_debiased -- neutralized word vector representation of the input "word"</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    <span class="comment"># Select word vector representation of "word". Use word_to_vec_map. (‚âà 1 line)</span></span><br><span class="line">    e = word_to_vec_map[word]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Compute e_biascomponent using the formula give above. (‚âà 1 line)</span></span><br><span class="line">    e_biascomponent = np.dot(e, g) / np.linalg.norm(g) * g</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Neutralize e by substracting e_biascomponent from it </span></span><br><span class="line">    <span class="comment"># e_debiased should be equal to its orthogonal projection. (‚âà 1 line)</span></span><br><span class="line">    e_debiased = e - e_biascomponent</span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> e_debiased</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">e = <span class="string">"receptionist"</span></span><br><span class="line">print(<span class="string">"cosine similarity between "</span> + e + <span class="string">" and g, before neutralizing: "</span>, cosine_similarity(word_to_vec_map[<span class="string">"receptionist"</span>], g))</span><br><span class="line"></span><br><span class="line">e_debiased = neutralize(<span class="string">"receptionist"</span>, g, word_to_vec_map)</span><br><span class="line">print(<span class="string">"cosine similarity between "</span> + e + <span class="string">" and g, after neutralizing: "</span>, cosine_similarity(e_debiased, g))</span><br></pre></td></tr></table></figure><p>cosine similarity between receptionist and g, before neutralizing: 0.330779417506 cosine similarity between receptionist and g, after neutralizing: -0.48975521526</p><p><strong>Expected Output</strong>: The second result is essentially 0, up to numerical roundof (on the order of <span class="math inline">\(10^{-17}\)</span>).</p><table><tr><td><strong>cosine similarity between receptionist and g, before neutralizing:</strong> :</td><td>0.330779417506</td></tr><tr><td><strong>cosine similarity between receptionist and g, after neutralizing:</strong> :</td><td>-3.26732746085e-17</td></tr></table><h3 id="equalization-algorithm-for-gender-specific-words">3.2 - Equalization algorithm for gender-specific words</h3><p>Next, lets see how debiasing can also be applied to word pairs such as "actress" and "actor." Equalization is applied to pairs of words that you might want to have differ only through the gender property. As a concrete example, suppose that "actress" is closer to "babysit" than "actor." By applying neutralizing to "babysit" we can reduce the gender-stereotype associated with babysitting. But this still does not guarantee that "actor" and "actress" are equidistant from "babysit." The equalization algorithm takes care of this.</p><p>The key idea behind equalization is to make sure that a particular pair of words are equi-distant from the 49-dimensional <span class="math inline">\(g_\perp\)</span>. The equalization step also ensures that the two equalized steps are now the same distance from <span class="math inline">\(e_{receptionist}^{debiased}\)</span>, or from any other work that has been neutralized. In pictures, this is how equalization works:</p><p><img src="images/equalize10.png" style="width:800px;height:400px;"></p><p>The derivation of the linear algebra to do this is a bit more complex. (See Bolukbasi et al., 2016 for details.) But the key equations are:</p><p><span class="math display">\[ \mu = \frac{e_{w1} + e_{w2}}{2}\tag{4}\]</span></p><p><span class="math display">\[ \mu_{B} = \frac {\mu \cdot \text{bias_axis}}{||\text{bias_axis}||_2^2} *\text{bias_axis}\tag{5}\]</span></p><p><span class="math display">\[\mu_{\perp} = \mu - \mu_{B} \tag{6}\]</span></p><p><span class="math display">\[ e_{w1B} = \frac {e_{w1} \cdot \text{bias_axis}}{||\text{bias_axis}||_2^2} *\text{bias_axis}\tag{7}\]</span> <span class="math display">\[ e_{w2B} = \frac {e_{w2} \cdot \text{bias_axis}}{||\text{bias_axis}||_2^2} *\text{bias_axis}\tag{8}\]</span></p><p><span class="math display">\[e_{w1B}^{corrected} = \sqrt{ |{1 - ||\mu_{\perp} ||^2_2} |} * \frac{e_{\text{w1B}} - \mu_B} {|(e_{w1} - \mu_{\perp}) - \mu_B)|} \tag{9}\]</span></p><p><span class="math display">\[e_{w2B}^{corrected} = \sqrt{ |{1 - ||\mu_{\perp} ||^2_2} |} * \frac{e_{\text{w2B}} - \mu_B} {|(e_{w2} - \mu_{\perp}) - \mu_B)|} \tag{10}\]</span></p><p><span class="math display">\[e_1 = e_{w1B}^{corrected} + \mu_{\perp} \tag{11}\]</span> <span class="math display">\[e_2 = e_{w2B}^{corrected} + \mu_{\perp} \tag{12}\]</span></p><p><strong>Exercise</strong>: Implement the function below. Use the equations above to get the final equalized version of the pair of words. Good luck!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">equalize</span><span class="params">(pair, bias_axis, word_to_vec_map)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Debias gender specific words by following the equalize method described in the figure above.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    pair -- pair of strings of gender specific words to debias, e.g. ("actress", "actor") </span></span><br><span class="line"><span class="string">    bias_axis -- numpy-array of shape (50,), vector corresponding to the bias axis, e.g. gender</span></span><br><span class="line"><span class="string">    word_to_vec_map -- dictionary mapping words to their corresponding vectors</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns</span></span><br><span class="line"><span class="string">    e_1 -- word vector corresponding to the first word</span></span><br><span class="line"><span class="string">    e_2 -- word vector corresponding to the second word</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    <span class="comment"># Step 1: Select word vector representation of "word". Use word_to_vec_map. (‚âà 2 lines)</span></span><br><span class="line">    w1, w2 = <span class="keyword">None</span></span><br><span class="line">    e_w1, e_w2 = <span class="keyword">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Step 2: Compute the mean of e_w1 and e_w2 (‚âà 1 line)</span></span><br><span class="line">    mu = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Step 3: Compute the projections of mu over the bias axis and the orthogonal axis (‚âà 2 lines)</span></span><br><span class="line">    mu_B = <span class="keyword">None</span></span><br><span class="line">    mu_orth = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Step 4: Use equations (7) and (8) to compute e_w1B and e_w2B (‚âà2 lines)</span></span><br><span class="line">    e_w1B = <span class="keyword">None</span></span><br><span class="line">    e_w2B = <span class="keyword">None</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment"># Step 5: Adjust the Bias part of e_w1B and e_w2B using the formulas (9) and (10) given above (‚âà2 lines)</span></span><br><span class="line">    corrected_e_w1B = <span class="keyword">None</span></span><br><span class="line">    corrected_e_w2B = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Step 6: Debias by equalizing e1 and e2 to the sum of their corrected projections (‚âà2 lines)</span></span><br><span class="line">    e1 = <span class="keyword">None</span></span><br><span class="line">    e2 = <span class="keyword">None</span></span><br><span class="line">                                                                </span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> e1, e2</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"cosine similarities before equalizing:"</span>)</span><br><span class="line">print(<span class="string">"cosine_similarity(word_to_vec_map[\"man\"], gender) = "</span>, cosine_similarity(word_to_vec_map[<span class="string">"man"</span>], g))</span><br><span class="line">print(<span class="string">"cosine_similarity(word_to_vec_map[\"woman\"], gender) = "</span>, cosine_similarity(word_to_vec_map[<span class="string">"woman"</span>], g))</span><br><span class="line">print()</span><br><span class="line">e1, e2 = equalize((<span class="string">"man"</span>, <span class="string">"woman"</span>), g, word_to_vec_map)</span><br><span class="line">print(<span class="string">"cosine similarities after equalizing:"</span>)</span><br><span class="line">print(<span class="string">"cosine_similarity(e1, gender) = "</span>, cosine_similarity(e1, g))</span><br><span class="line">print(<span class="string">"cosine_similarity(e2, gender) = "</span>, cosine_similarity(e2, g))</span><br></pre></td></tr></table></figure><p><strong>Expected Output</strong>:</p>cosine similarities before equalizing:<table><tr><td><strong>cosine_similarity(word_to_vec_map["man"], gender)</strong> =</td><td>-0.117110957653</td></tr><tr><td><strong>cosine_similarity(word_to_vec_map["woman"], gender)</strong> =</td><td>0.356666188463</td></tr></table>cosine similarities after equalizing:<table><tr><td><strong>cosine_similarity(u1, gender)</strong> =</td><td>-0.700436428931</td></tr><tr><td><strong>cosine_similarity(u2, gender)</strong> =</td><td>0.700436428931</td></tr></table><p>Please feel free to play with the input words in the cell above, to apply equalization to other pairs of words.</p><p>These debiasing algorithms are very helpful for reducing bias, but are not perfect and do not eliminate all traces of bias. For example, one weakness of this implementation was that the bias direction <span class="math inline">\(g\)</span> was defined using only the pair of words <em>woman</em> and <em>man</em>. As discussed earlier, if <span class="math inline">\(g\)</span> were defined by computing <span class="math inline">\(g_1 = e_{woman} - e_{man}\)</span>; <span class="math inline">\(g_2 = e_{mother} - e_{father}\)</span>; <span class="math inline">\(g_3 = e_{girl} - e_{boy}\)</span>; and so on and averaging over them, you would obtain a better estimate of the "gender" dimension in the 50 dimensional word embedding space. Feel free to play with such variants as well.</p><h3 id="congratulations-1">Congratulations</h3><p>You have come to the end of this notebook, and have seen a lot of the ways that word vectors can be used as well as modified.</p><p>Congratulations on finishing this notebook!</p><p><strong>References</strong>: - The debiasing algorithm is from Bolukbasi et al., 2016, <a href="https://papers.nips.cc/paper/6228-man-is-to-computer-programmer-as-woman-is-to-homemaker-debiasing-word-embeddings.pdf" target="_blank" rel="noopener">Man is to Computer Programmer as Woman is to Homemaker? Debiasing Word Embeddings</a> - The GloVe word embeddings were due to Jeffrey Pennington, Richard Socher, and Christopher D. Manning. (https://nlp.stanford.edu/projects/glove/)</p>]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sequence Models </tag>
            
            <tag> Embedding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Improvise a Jazz Solo with an LSTM Network</title>
      <link href="/Improvise-a-Jazz-Solo-with-an-LSTM-Network/2019/03/28/"/>
      <url>/Improvise-a-Jazz-Solo-with-an-LSTM-Network/2019/03/28/</url>
      
        <content type="html"><![CDATA[<h1 id="improvise-a-jazz-solo-with-an-lstm-network">Improvise a Jazz Solo with an LSTM Network</h1><p>Welcome to your final programming assignment of this week! In this notebook, you will implement a model that uses an LSTM to generate music. You will even be able to listen to your own music at the end of the assignment.</p><p><strong>You will learn to:</strong> - Apply an LSTM to music generation. - Generate your own jazz music with deep learning.</p><p>Please run the following cell to load all the packages required in this assignment. This may take a few minutes.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> IPython</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> music21 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> grammar <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> qa <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> preprocess <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> music_utils <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> data_utils <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> load_model, Model</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense, Activation, Dropout, Input, LSTM, Reshape, Lambda, RepeatVector</span><br><span class="line"><span class="keyword">from</span> keras.initializers <span class="keyword">import</span> glorot_uniform</span><br><span class="line"><span class="keyword">from</span> keras.utils <span class="keyword">import</span> to_categorical</span><br><span class="line"><span class="keyword">from</span> keras.optimizers <span class="keyword">import</span> Adam</span><br><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> backend <span class="keyword">as</span> K</span><br></pre></td></tr></table></figure><h2 id="problem-statement">1 - Problem statement</h2><p>You would like to create a jazz music piece specially for a friend's birthday. However, you don't know any instruments or music composition. Fortunately, you know deep learning and will solve this problem using an LSTM netwok.</p><p>You will train a network to generate novel jazz solos in a style representative of a body of performed work.</p><p><img src="images/jazz.jpg" style="width:450;height:300px;"></p><h3 id="dataset">1.1 - Dataset</h3><p>You will train your algorithm on a corpus of Jazz music. Run the cell below to listen to a snippet of the audio from the training set:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IPython.display.Audio(<span class="string">'./data/30s_seq.mp3'</span>)</span><br></pre></td></tr></table></figure><p>We have taken care of the preprocessing of the musical data to render it in terms of musical "values." You can informally think of each "value" as a note, which comprises a pitch and a duration. For example, if you press down a specific piano key for 0.5 seconds, then you have just played a note. In music theory, a "value" is actually more complicated than this--specifically, it also captures the information needed to play multiple notes at the same time. For example, when playing a music piece, you might press down two piano keys at the same time (playng multiple notes at the same time generates what's called a "chord"). But we don't need to worry about the details of music theory for this assignment. For the purpose of this assignment, all you need to know is that we will obtain a dataset of values, and will learn an RNN model to generate sequences of values.</p><p>Our music generation system will use 78 unique values. Run the following code to load the raw music data and preprocess it into values. This might take a few minutes.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">X, Y, n_values, indices_values = load_music_utils()</span><br><span class="line">print(<span class="string">'shape of X:'</span>, X.shape)</span><br><span class="line">print(<span class="string">'number of training examples:'</span>, X.shape[<span class="number">0</span>])</span><br><span class="line">print(<span class="string">'Tx (length of sequence):'</span>, X.shape[<span class="number">1</span>])</span><br><span class="line">print(<span class="string">'total # of unique values:'</span>, n_values)</span><br><span class="line">print(<span class="string">'Shape of Y:'</span>, Y.shape)</span><br></pre></td></tr></table></figure><pre><code>shape of X: (60, 30, 78)number of training examples: 60Tx (length of sequence): 30total # of unique values: 78Shape of Y: (30, 60, 78)</code></pre><p>You have just loaded the following:</p><ul><li><p><code>X</code>: This is an (m, <span class="math inline">\(T_x\)</span>, 78) dimensional array. We have m training examples, each of which is a snippet of <span class="math inline">\(T_x =30\)</span> musical values. At each time step, the input is one of 78 different possible values, represented as a one-hot vector. Thus for example, X[i,t,:] is a one-hot vector representating the value of the i-th example at time t.</p></li><li><p><code>Y</code>: This is essentially the same as <code>X</code>, but shifted one step to the left (to the past). Similar to the dinosaurus assignment, we're interested in the network using the previous values to predict the next value, so our sequence model will try to predict <span class="math inline">\(y^{\langle t \rangle}\)</span> given <span class="math inline">\(x^{\langle 1\rangle}, \ldots, x^{\langle t \rangle}\)</span>. However, the data in <code>Y</code> is reordered to be dimension <span class="math inline">\((T_y, m, 78)\)</span>, where <span class="math inline">\(T_y = T_x\)</span>. This format makes it more convenient to feed to the LSTM later.</p></li><li><p><code>n_values</code>: The number of unique values in this dataset. This should be 78.</p></li><li><p><code>indices_values</code>: python dictionary mapping from 0-77 to musical values.</p></li></ul><h3 id="overview-of-our-model">1.2 - Overview of our model</h3><p>Here is the architecture of the model we will use. This is similar to the Dinosaurus model you had used in the previous notebook, except that in you will be implementing it in Keras. The architecture is as follows:</p><p><img src="images/music_generation.png" style="width:600;height:400px;"></p><!--<img src="images/djmodel.png" style="width:600;height:400px;"><br><caption><center> **Figure 1**: LSTM model. $X = (x^{\langle 1 \rangle}, x^{\langle 2 \rangle}, ..., x^{\langle T_x \rangle})$ is a window of size $T_x$ scanned over the musical corpus. Each $x^{\langle t \rangle}$ is an index corresponding to a value (ex: "A,0.250,< m2,P-4 >") while $\hat{y}$ is the prediction for the next value  </center></caption>!--><p>We will be training the model on random snippets of 30 values taken from a much longer piece of music. Thus, we won't bother to set the first input <span class="math inline">\(x^{\langle 1 \rangle} = \vec{0}\)</span>, which we had done previously to denote the start of a dinosaur name, since now most of these snippets of audio start somewhere in the middle of a piece of music. We are setting each of the snippts to have the same length <span class="math inline">\(T_x = 30\)</span> to make vectorization easier.</p><h2 id="building-the-model">2 - Building the model</h2><p>In this part you will build and train a model that will learn musical patterns. To do so, you will need to build a model that takes in X of shape <span class="math inline">\((m, T_x, 78)\)</span> and Y of shape <span class="math inline">\((T_y, m, 78)\)</span>. We will use an LSTM with 64 dimensional hidden states. Lets set <code>n_a = 64</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n_a = <span class="number">64</span></span><br></pre></td></tr></table></figure><p>Here's how you can create a Keras model with multiple inputs and outputs. If you're building an RNN where even at test time entire input sequence <span class="math inline">\(x^{\langle 1 \rangle}, x^{\langle 2 \rangle}, \ldots, x^{\langle T_x \rangle}\)</span> were <em>given in advance</em>, for example if the inputs were words and the output was a label, then Keras has simple built-in functions to build the model. However, for sequence generation, at test time we don't know all the values of <span class="math inline">\(x^{\langle t\rangle}\)</span> in advance; instead we generate them one at a time using <span class="math inline">\(x^{\langle t\rangle} = y^{\langle t-1 \rangle}\)</span>. So the code will be a bit more complicated, and you'll need to implement your own for-loop to iterate over the different time steps.</p><p>The function <code>djmodel()</code> will call the LSTM layer <span class="math inline">\(T_x\)</span> times using a for-loop, and it is important that all <span class="math inline">\(T_x\)</span> copies have the same weights. I.e., it should not re-initiaiize the weights every time---the <span class="math inline">\(T_x\)</span> steps should have shared weights. The key steps for implementing layers with shareable weights in Keras are: 1. Define the layer objects (we will use global variables for this). 2. Call these objects when propagating the input.</p><p>We have defined the layers objects you need as global variables. Please run the next cell to create them. Please check the Keras documentation to make sure you understand what these layers are: <a href="https://keras.io/layers/core/#reshape" target="_blank" rel="noopener">Reshape()</a>, <a href="https://keras.io/layers/recurrent/#lstm" target="_blank" rel="noopener">LSTM()</a>, <a href="https://keras.io/layers/core/#dense" target="_blank" rel="noopener">Dense()</a>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reshapor = Reshape((<span class="number">1</span>, <span class="number">78</span>))                        <span class="comment"># Used in Step 2.B of djmodel(), below</span></span><br><span class="line">LSTM_cell = LSTM(n_a, return_state = <span class="keyword">True</span>)         <span class="comment"># Used in Step 2.C</span></span><br><span class="line">densor = Dense(n_values, activation=<span class="string">'softmax'</span>)     <span class="comment"># Used in Step 2.D</span></span><br></pre></td></tr></table></figure><p>Each of <code>reshapor</code>, <code>LSTM_cell</code> and <code>densor</code> are now layer objects, and you can use them to implement <code>djmodel()</code>. In order to propagate a Keras tensor object X through one of these layers, use <code>layer_object(X)</code> (or <code>layer_object([X,Y])</code> if it requires multiple inputs.). For example, <code>reshapor(X)</code> will propagate X through the <code>Reshape((1,78))</code> layer defined above.</p><p><strong>Exercise</strong>: Implement <code>djmodel()</code>. You will need to carry out 2 steps:</p><ol type="1"><li>Create an empty list "outputs" to save the outputs of the LSTM Cell at every time step.</li><li><p>Loop for <span class="math inline">\(t \in 1, \ldots, T_x\)</span>:</p><p>A. Select the "t"th time-step vector from X. The shape of this selection should be (78,). To do so, create a custom <a href="https://keras.io/layers/core/#lambda" target="_blank" rel="noopener">Lambda</a> layer in Keras by using this line of code: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">           x = Lambda(lambda x: X[:,t,:])(X)</span><br><span class="line">``` </span><br><span class="line">Look over the Keras documentation to figure out what this does. It is creating a &quot;temporary&quot; or &quot;unnamed&quot; function (that&apos;s what Lambda functions are) that extracts out the appropriate one-hot vector, and making this function a Keras `Layer` object to apply to `X`. </span><br><span class="line"></span><br><span class="line">    B. Reshape x to be (1,78). You may find the `reshapor()` layer (defined below) helpful.</span><br><span class="line"></span><br><span class="line">    C. Run x through one step of LSTM_cell. Remember to initialize the LSTM_cell with the previous step&apos;s hidden state $a$ and cell state $c$. Use the following formatting:</span><br><span class="line">```python</span><br><span class="line">a, _, c = LSTM_cell(input_x, initial_state=[previous hidden state, previous cell state])</span><br></pre></td></tr></table></figure></p><p>D. Propagate the LSTM's output activation value through a dense+softmax layer using <code>densor</code>.</p><p>E. Append the predicted value to the list of "outputs"</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: djmodel</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">djmodel</span><span class="params">(Tx, n_a, n_values)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Implement the model</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    Tx -- length of the sequence in a corpus</span></span><br><span class="line"><span class="string">    n_a -- the number of activations used in our model</span></span><br><span class="line"><span class="string">    n_values -- number of unique values in the music data </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    model -- a keras model with the </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Define the input of your model with a shape </span></span><br><span class="line">    X = Input(shape=(Tx, n_values))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Define s0, initial hidden state for the decoder LSTM</span></span><br><span class="line">    a0 = Input(shape=(n_a,), name=<span class="string">'a0'</span>)</span><br><span class="line">    c0 = Input(shape=(n_a,), name=<span class="string">'c0'</span>)</span><br><span class="line">    a = a0</span><br><span class="line">    c = c0</span><br><span class="line">    </span><br><span class="line">    <span class="comment">### START CODE HERE ### </span></span><br><span class="line">    <span class="comment"># Step 1: Create empty list to append the outputs while you iterate (‚âà1 line)</span></span><br><span class="line">    outputs = []</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Step 2: Loop</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> range(Tx):</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Step 2.A: select the "t"th time step vector from X. </span></span><br><span class="line">        x = Lambda(<span class="keyword">lambda</span> x: X[:,t,:])(X)</span><br><span class="line">        <span class="comment"># Step 2.B: Use reshapor to reshape x to be (1, n_values) (‚âà1 line)</span></span><br><span class="line">        x = reshapor(x)</span><br><span class="line">        <span class="comment"># Step 2.C: Perform one step of the LSTM_cell</span></span><br><span class="line">        a, _, c = LSTM_cell(x, initial_state=[a, c])</span><br><span class="line">        <span class="comment"># Step 2.D: Apply densor to the hidden state output of LSTM_Cell</span></span><br><span class="line">        out = densor(a)</span><br><span class="line">        <span class="comment"># Step 2.E: add the output to "outputs"</span></span><br><span class="line">        outputs.append(out)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># Step 3: Create model instance</span></span><br><span class="line">    model = Model(inputs=[X, a0, c0], outputs=outputs)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> model</span><br></pre></td></tr></table></figure><p>Run the following cell to define your model. We will use <code>Tx=30</code>, <code>n_a=64</code> (the dimension of the LSTM activations), and <code>n_values=78</code>. This cell may take a few seconds to run.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model = djmodel(Tx = <span class="number">30</span> , n_a = <span class="number">64</span>, n_values = <span class="number">78</span>)</span><br></pre></td></tr></table></figure><p>You now need to compile your model to be trained. We will Adam and a categorical cross-entropy loss.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">opt = Adam(lr=<span class="number">0.01</span>, beta_1=<span class="number">0.9</span>, beta_2=<span class="number">0.999</span>, decay=<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line">model.compile(optimizer=opt, loss=<span class="string">'categorical_crossentropy'</span>, metrics=[<span class="string">'accuracy'</span>])</span><br></pre></td></tr></table></figure><p>Finally, lets initialize <code>a0</code> and <code>c0</code> for the LSTM's initial state to be zero.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">m = <span class="number">60</span></span><br><span class="line">a0 = np.zeros((m, n_a))</span><br><span class="line">c0 = np.zeros((m, n_a))</span><br></pre></td></tr></table></figure><p>Lets now fit the model! We will turn <code>Y</code> to a list before doing so, since the cost function expects <code>Y</code> to be provided in this format (one list item per time-step). So <code>list(Y)</code> is a list with 30 items, where each of the list items is of shape (60,78). Lets train for 100 epochs. This will take a few minutes.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.fit([X, a0, c0], list(Y), epochs=<span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>You should see the model loss going down. Now that you have trained a model, lets go on the the final section to implement an inference algorithm, and generate some music!</p><h2 id="generating-music">3 - Generating music</h2><p>You now have a trained model which has learned the patterns of the jazz soloist. Lets now use this model to synthesize new music.</p><h4 id="predicting-sampling">3.1 - Predicting &amp; Sampling</h4><p><img src="images/music_gen.png" style="width:600;height:400px;"></p><p>At each step of sampling, you will take as input the activation <code>a</code> and cell state <code>c</code> from the previous state of the LSTM, forward propagate by one step, and get a new output activation as well as cell state. The new activation <code>a</code> can then be used to generate the output, using <code>densor</code> as before.</p><p>To start off the model, we will initialize <code>x0</code> as well as the LSTM activation and and cell value <code>a0</code> and <code>c0</code> to be zeros.</p><!-- You are about to build a function that will do this inference for you. Your function takes in your previous model and the number of time steps `Ty` that you want to sample. It will return a keras model that would be able to generate sequences for you. Furthermore, the function takes in a dense layer of `78` units and the number of activations. !--><p><strong>Exercise:</strong> Implement the function below to sample a sequence of musical values. Here are some of the key steps you'll need to implement inside the for-loop that generates the <span class="math inline">\(T_y\)</span> output characters:</p><p>Step 2.A: Use <code>LSTM_Cell</code>, which inputs the previous step's <code>c</code> and <code>a</code> to generate the current step's <code>c</code> and <code>a</code>.</p><p>Step 2.B: Use <code>densor</code> (defined previously) to compute a softmax on <code>a</code> to get the output for the current step.</p><p>Step 2.C: Save the output you have just generated by appending it to <code>outputs</code>.</p><p>Step 2.D: Sample x to the be "out"'s one-hot version (the prediction) so that you can pass it to the next LSTM's step. We have already provided this line of code, which uses a <a href="https://keras.io/layers/core/#lambda" target="_blank" rel="noopener">Lambda</a> function. <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = Lambda(one_hot)(out)</span><br></pre></td></tr></table></figure></p><p>[Minor technical note: Rather than sampling a value at random according to the probabilities in <code>out</code>, this line of code actually chooses the single most likely note at each step using an argmax.]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: music_inference_model</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">music_inference_model</span><span class="params">(LSTM_cell, densor, n_values = <span class="number">78</span>, n_a = <span class="number">64</span>, Ty = <span class="number">100</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Uses the trained "LSTM_cell" and "densor" from model() to generate a sequence of values.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    LSTM_cell -- the trained "LSTM_cell" from model(), Keras layer object</span></span><br><span class="line"><span class="string">    densor -- the trained "densor" from model(), Keras layer object</span></span><br><span class="line"><span class="string">    n_values -- integer, umber of unique values</span></span><br><span class="line"><span class="string">    n_a -- number of units in the LSTM_cell</span></span><br><span class="line"><span class="string">    Ty -- integer, number of time steps to generate</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    inference_model -- Keras model instance</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Define the input of your model with a shape </span></span><br><span class="line">    x0 = Input(shape=(<span class="number">1</span>, n_values))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Define s0, initial hidden state for the decoder LSTM</span></span><br><span class="line">    a0 = Input(shape=(n_a,), name=<span class="string">'a0'</span>)</span><br><span class="line">    c0 = Input(shape=(n_a,), name=<span class="string">'c0'</span>)</span><br><span class="line">    a = a0</span><br><span class="line">    c = c0</span><br><span class="line">    x = x0</span><br><span class="line"></span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    <span class="comment"># Step 1: Create an empty list of "outputs" to later store your predicted values (‚âà1 line)</span></span><br><span class="line">    outputs = []</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Step 2: Loop over Ty and generate a value at every time step</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> range(Ty):</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Step 2.A: Perform one step of LSTM_cell (‚âà1 line)</span></span><br><span class="line">        a, _, c = LSTM_cell(x, initial_state=[a, c])</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Step 2.B: Apply Dense layer to the hidden state output of the LSTM_cell (‚âà1 line)</span></span><br><span class="line">        out = densor(a)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Step 2.C: Append the prediction "out" to "outputs". out.shape = (None, 78) (‚âà1 line)</span></span><br><span class="line">        outputs.append(out)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Step 2.D: Select the next value according to "out", and set "x" to be the one-hot representation of the</span></span><br><span class="line">        <span class="comment">#           selected value, which will be passed as the input to LSTM_cell on the next step. We have provided </span></span><br><span class="line">        <span class="comment">#           the line of code you need to do this. </span></span><br><span class="line">        x = Lambda(one_hot)(out)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># Step 3: Create model instance with the correct "inputs" and "outputs" (‚âà1 line)</span></span><br><span class="line">    inference_model = Model([x0, a0, c0], outputs)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> inference_model</span><br></pre></td></tr></table></figure><p>Run the cell below to define your inference model. This model is hard coded to generate 50 values.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inference_model = music_inference_model(LSTM_cell, densor, n_values = <span class="number">78</span>, n_a = <span class="number">64</span>, Ty = <span class="number">50</span>)</span><br></pre></td></tr></table></figure><p>Finally, this creates the zero-valued vectors you will use to initialize <code>x</code> and the LSTM state variables <code>a</code> and <code>c</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x_initializer = np.zeros((<span class="number">1</span>, <span class="number">1</span>, <span class="number">78</span>))</span><br><span class="line">a_initializer = np.zeros((<span class="number">1</span>, n_a))</span><br><span class="line">c_initializer = np.zeros((<span class="number">1</span>, n_a))</span><br></pre></td></tr></table></figure><p><strong>Exercise</strong>: Implement <code>predict_and_sample()</code>. This function takes many arguments including the inputs [x_initializer, a_initializer, c_initializer]. In order to predict the output corresponding to this input, you will need to carry-out 3 steps: 1. Use your inference model to predict an output given your set of inputs. The output <code>pred</code> should be a list of length <span class="math inline">\(T_y\)</span> where each element is a numpy-array of shape (1, n_values). 2. Convert <code>pred</code> into a numpy array of <span class="math inline">\(T_y\)</span> indices. Each index corresponds is computed by taking the <code>argmax</code> of an element of the <code>pred</code> list. <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.argmax.html" target="_blank" rel="noopener">Hint</a>. 3. Convert the indices into their one-hot vector representations. <a href="https://keras.io/utils/#to_categorical" target="_blank" rel="noopener">Hint</a>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: predict_and_sample</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict_and_sample</span><span class="params">(inference_model, x_initializer = x_initializer, a_initializer = a_initializer, </span></span></span><br><span class="line"><span class="function"><span class="params">                       c_initializer = c_initializer)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Predicts the next value of values using the inference model.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    inference_model -- Keras model instance for inference time</span></span><br><span class="line"><span class="string">    x_initializer -- numpy array of shape (1, 1, 78), one-hot vector initializing the values generation</span></span><br><span class="line"><span class="string">    a_initializer -- numpy array of shape (1, n_a), initializing the hidden state of the LSTM_cell</span></span><br><span class="line"><span class="string">    c_initializer -- numpy array of shape (1, n_a), initializing the cell state of the LSTM_cel</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    results -- numpy-array of shape (Ty, 78), matrix of one-hot vectors representing the values generated</span></span><br><span class="line"><span class="string">    indices -- numpy-array of shape (Ty, 1), matrix of indices representing the values generated</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    <span class="comment"># Step 1: Use your inference model to predict an output sequence given x_initializer, a_initializer and c_initializer.</span></span><br><span class="line">    pred = inference_model.predict([x_initializer, a_initializer, c_initializer])</span><br><span class="line">    <span class="comment"># Step 2: Convert "pred" into an np.array() of indices with the maximum probabilities</span></span><br><span class="line">    <span class="comment">#indices = np.array([np.argmax(item) for item in pred])</span></span><br><span class="line">    indices = np.argmax(pred, <span class="number">2</span>)</span><br><span class="line">    <span class="comment"># Step 3: Convert indices to one-hot vectors, the shape of the results should be (1, )</span></span><br><span class="line">    results = to_categorical(indices,num_classes=<span class="keyword">None</span>)</span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> results, indices</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">results, indices = predict_and_sample(inference_model, x_initializer, a_initializer, c_initializer)</span><br><span class="line">print(<span class="string">"np.argmax(results[12]) ="</span>, np.argmax(results[<span class="number">12</span>]))</span><br><span class="line">print(<span class="string">"np.argmax(results[17]) ="</span>, np.argmax(results[<span class="number">17</span>]))</span><br><span class="line">print(<span class="string">"list(indices[12:18]) ="</span>, list(indices[<span class="number">12</span>:<span class="number">18</span>]))</span><br></pre></td></tr></table></figure><pre><code>np.argmax(results[12]) = 40np.argmax(results[17]) = 1list(indices[12:18]) = [array([40]), array([1]), array([4]), array([5]), array([40]), array([1])]</code></pre><p><strong>Expected Output</strong>: Your results may differ because Keras' results are not completely predictable. However, if you have trained your LSTM_cell with model.fit() for exactly 100 epochs as described above, you should very likely observe a sequence of indices that are not all identical. Moreover, you should observe that: np.argmax(results[12]) is the first element of list(indices[12:18]) and np.argmax(results[17]) is the last element of list(indices[12:18]).</p><table><tr><td><strong>np.argmax(results[12])</strong> =</td><td>1</td></tr><tr><td><strong>np.argmax(results[12])</strong> =</td><td>42</td></tr><tr><td><strong>list(indices[12:18])</strong> =</td><td>[array([1]), array([42]), array([54]), array([17]), array([1]), array([42])]</td></tr></table><h4 id="generate-music">3.3 - Generate music</h4><p>Finally, you are ready to generate music. Your RNN generates a sequence of values. The following code generates music by first calling your <code>predict_and_sample()</code> function. These values are then post-processed into musical chords (meaning that multiple values or notes can be played at the same time).</p><p>Most computational music algorithms use some post-processing because it is difficult to generate music that sounds good without such post-processing. The post-processing does things such as clean up the generated audio by making sure the same sound is not repeated too many times, that two successive notes are not too far from each other in pitch, and so on. One could argue that a lot of these post-processing steps are hacks; also, a lot the music generation literature has also focused on hand-crafting post-processors, and a lot of the output quality depends on the quality of the post-processing and not just the quality of the RNN. But this post-processing does make a huge difference, so lets use it in our implementation as well.</p><p>Lets make some music!</p><p>Run the following cell to generate music and record it into your <code>out_stream</code>. This can take a couple of minutes.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">out_stream = generate_music(inference_model)</span><br></pre></td></tr></table></figure><p>Predicting new values for different set of chords. Generated 51 sounds using the predicted values for the set of chords ("1") and after pruning Generated 51 sounds using the predicted values for the set of chords ("2") and after pruning Generated 51 sounds using the predicted values for the set of chords ("3") and after pruning Generated 51 sounds using the predicted values for the set of chords ("4") and after pruning Generated 51 sounds using the predicted values for the set of chords ("5") and after pruning Your generated music is saved in output/my_music.midi</p><p>To listen to your music, click File-&gt;Open... Then go to "output/" and download "my_music.midi". Either play it on your computer with an application that can read midi files if you have one, or use one of the free online "MIDI to mp3" conversion tools to convert this to mp3.</p><p>As reference, here also is a 30sec audio clip we generated using this algorithm.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IPython.display.Audio(<span class="string">'./data/30s_trained_model.mp3'</span>)</span><br></pre></td></tr></table></figure><h3 id="congratulations">Congratulations!</h3><p>You have come to the end of the notebook.</p><p><font color="blue"> Here's what you should remember: - A sequence model can be used to generate musical values, which are then post-processed into midi music. - Fairly similar models can be used to generate dinosaur names or to generate music, with the major difference being the input fed to the model.<br>- In Keras, sequence generation involves defining layers with shared weights, which are then repeated for the different time steps <span class="math inline">\(1, \ldots, T_x\)</span>.</font></p><p>Congratulations on completing this assignment and generating a jazz solo!</p><p><strong>References</strong></p><p>The ideas presented in this notebook came primarily from three computational music papers cited below. The implementation here also took significant inspiration and used many components from Ji-Sung Kim's github repository.</p><ul><li>Ji-Sung Kim, 2016, <a href="https://github.com/jisungk/deepjazz" target="_blank" rel="noopener">deepjazz</a></li><li>Jon Gillick, Kevin Tang and Robert Keller, 2009. <a href="http://ai.stanford.edu/~kdtang/papers/smc09-jazzgrammar.pdf" target="_blank" rel="noopener">Learning Jazz Grammars</a></li><li>Robert Keller and David Morrison, 2007, <a href="http://smc07.uoa.gr/SMC07%20Proceedings/SMC07%20Paper%2055.pdf" target="_blank" rel="noopener">A Grammatical Approach to Automatic Improvisation</a></li><li>Fran√ßois Pachet, 1999, <a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.5.7473&amp;rep=rep1&amp;type=pdf" target="_blank" rel="noopener">Surprising Harmonies</a></li></ul><p>We're also grateful to Fran√ßois Germain for valuable feedback.</p>]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sequence Models </tag>
            
            <tag> Homework of Online Coueses </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Character-level language model</title>
      <link href="/Character-level-language-model/2019/03/28/"/>
      <url>/Character-level-language-model/2019/03/28/</url>
      
        <content type="html"><![CDATA[<h1 id="character-level-language-model---dinosaurus-land">Character level language model - Dinosaurus land</h1><p>Welcome to Dinosaurus Island! 65 million years ago, dinosaurs existed, and in this assignment they are back. You are in charge of a special task. Leading biology researchers are creating new breeds of dinosaurs and bringing them to life on earth, and your job is to give names to these dinosaurs. If a dinosaur does not like its name, it might go beserk, so choose wisely!</p><table><td><p><img src="images/dino.jpg" style="width:250;height:300px;"></p></td></table><p>Luckily you have learned some deep learning and you will use it to save the day. Your assistant has collected a list of all the dinosaur names they could find, and compiled them into this <a href="dinos.txt">dataset</a>. (Feel free to take a look by clicking the previous link.) To create new dinosaur names, you will build a character level language model to generate new names. Your algorithm will learn the different name patterns, and randomly generate new names. Hopefully this algorithm will keep you and your team safe from the dinosaurs' wrath!</p><p>By completing this assignment you will learn:</p><ul><li>How to store text data for processing using an RNN</li><li>How to synthesize data, by sampling predictions at each time step and passing it to the next RNN-cell unit</li><li>How to build a character-level text generation recurrent neural network</li><li>Why clipping the gradients is important</li></ul><p>We will begin by loading in some functions that we have provided for you in <code>rnn_utils</code>. Specifically, you have access to functions such as <code>rnn_forward</code> and <code>rnn_backward</code> which are equivalent to those you've implemented in the previous assignment.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br></pre></td></tr></table></figure><h2 id="problem-statement">1 - Problem Statement</h2><h3 id="dataset-and-preprocessing">1.1 - Dataset and Preprocessing</h3><p>Run the following cell to read the dataset of dinosaur names, create a list of unique characters (such as a-z), and compute the dataset and vocabulary size.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data = open(<span class="string">'dinos.txt'</span>, <span class="string">'r'</span>).read()</span><br><span class="line">data= data.lower()</span><br><span class="line">chars = list(set(data))</span><br><span class="line">data_size, vocab_size = len(data), len(chars)</span><br><span class="line">print(<span class="string">'There are %d total characters and %d unique characters in your data.'</span> % (data_size, vocab_size))</span><br></pre></td></tr></table></figure><pre><code>There are 19909 total characters and 27 unique characters in your data.</code></pre><p>The characters are a-z (26 characters) plus the "" (or newline character), which in this assignment plays a role similar to the <code>&lt;EOS&gt;</code> (or "End of sentence") token we had discussed in lecture, only here it indicates the end of the dinosaur name rather than the end of a sentence. In the cell below, we create a python dictionary (i.e., a hash table) to map each character to an index from 0-26. We also create a second python dictionary that maps each index back to the corresponding character character. This will help you figure out what index corresponds to what character in the probability distribution output of the softmax layer. Below, <code>char_to_ix</code> and <code>ix_to_char</code> are the python dictionaries.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">char_to_ix = &#123; ch:i <span class="keyword">for</span> i,ch <span class="keyword">in</span> enumerate(sorted(chars)) &#125;</span><br><span class="line">ix_to_char = &#123; i:ch <span class="keyword">for</span> i,ch <span class="keyword">in</span> enumerate(sorted(chars)) &#125;</span><br><span class="line">print(ix_to_char)</span><br></pre></td></tr></table></figure><pre><code>{0: &#39;\n&#39;, 1: &#39;a&#39;, 2: &#39;b&#39;, 3: &#39;c&#39;, 4: &#39;d&#39;, 5: &#39;e&#39;, 6: &#39;f&#39;, 7: &#39;g&#39;, 8: &#39;h&#39;, 9: &#39;i&#39;, 10: &#39;j&#39;, 11: &#39;k&#39;, 12: &#39;l&#39;, 13: &#39;m&#39;, 14: &#39;n&#39;, 15: &#39;o&#39;, 16: &#39;p&#39;, 17: &#39;q&#39;, 18: &#39;r&#39;, 19: &#39;s&#39;, 20: &#39;t&#39;, 21: &#39;u&#39;, 22: &#39;v&#39;, 23: &#39;w&#39;, 24: &#39;x&#39;, 25: &#39;y&#39;, 26: &#39;z&#39;}</code></pre><h3 id="overview-of-the-model">1.2 - Overview of the model</h3><p>Your model will have the following structure:</p><ul><li>Initialize parameters</li><li>Run the optimization loop<ul><li>Forward propagation to compute the loss function</li><li>Backward propagation to compute the gradients with respect to the loss function</li><li>Clip the gradients to avoid exploding gradients</li><li>Using the gradients, update your parameter with the gradient descent update rule.</li></ul></li><li>Return the learned parameters</li></ul><img src="images/rnn.png" style="width:450;height:300px;"><caption><center><strong>Figure 1</strong>: Recurrent Neural Network, similar to what you had built in the previous notebook "Building a RNN - Step by Step".</center></caption><p>At each time-step, the RNN tries to predict what is the next character given the previous characters. The dataset <span class="math inline">\(X = (x^{\langle 1 \rangle}, x^{\langle 2 \rangle}, ..., x^{\langle T_x \rangle})\)</span> is a list of characters in the training set, while <span class="math inline">\(Y = (y^{\langle 1 \rangle}, y^{\langle 2 \rangle}, ..., y^{\langle T_x \rangle})\)</span> is such that at every time-step <span class="math inline">\(t\)</span>, we have <span class="math inline">\(y^{\langle t \rangle} = x^{\langle t+1 \rangle}\)</span>.</p><h2 id="building-blocks-of-the-model">2 - Building blocks of the model</h2><p>In this part, you will build two important blocks of the overall model: - Gradient clipping: to avoid exploding gradients - Sampling: a technique used to generate characters</p><p>You will then apply these two functions to build the model.</p><h3 id="clipping-the-gradients-in-the-optimization-loop">2.1 - Clipping the gradients in the optimization loop</h3><p>In this section you will implement the <code>clip</code> function that you will call inside of your optimization loop. Recall that your overall loop structure usually consists of a forward pass, a cost computation, a backward pass, and a parameter update. Before updating the parameters, you will perform gradient clipping when needed to make sure that your gradients are not "exploding," meaning taking on overly large values.</p><p>In the exercise below, you will implement a function <code>clip</code> that takes in a dictionary of gradients and returns a clipped version of gradients if needed. There are different ways to clip gradients; we will use a simple element-wise clipping procedure, in which every element of the gradient vector is clipped to lie between some range [-N, N]. More generally, you will provide a <code>maxValue</code> (say 10). In this example, if any component of the gradient vector is greater than 10, it would be set to 10; and if any component of the gradient vector is less than -10, it would be set to -10. If it is between -10 and 10, it is left alone.</p><img src="images/clip.png" style="width:400;height:150px;"><caption><center><strong>Figure 2</strong>: Visualization of gradient descent with and without gradient clipping, in a case where the network is running into slight "exploding gradient" problems.</center></caption><p><strong>Exercise</strong>: Implement the function below to return the clipped gradients of your dictionary <code>gradients</code>. Your function takes in a maximum threshold and returns the clipped versions of your gradients. You can check out this <a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.clip.html" target="_blank" rel="noopener">hint</a> for examples of how to clip in numpy. You will need to use the argument <code>out = ...</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### GRADED FUNCTION: clip</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clip</span><span class="params">(gradients, maxValue)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    Clips the gradients' values between minimum and maximum.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    gradients -- a dictionary containing the gradients "dWaa", "dWax", "dWya", "db", "dby"</span></span><br><span class="line"><span class="string">    maxValue -- everything above this number is set to this number, and everything less than -maxValue is set to -maxValue</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns: </span></span><br><span class="line"><span class="string">    gradients -- a dictionary with the clipped gradients.</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    </span><br><span class="line">    dWaa, dWax, dWya, db, dby = gradients[<span class="string">'dWaa'</span>], gradients[<span class="string">'dWax'</span>], gradients[<span class="string">'dWya'</span>], gradients[<span class="string">'db'</span>], gradients[<span class="string">'dby'</span>]</span><br><span class="line">   </span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    <span class="comment"># clip to mitigate exploding gradients, loop over [dWax, dWaa, dWya, db, dby]. (‚âà2 lines)</span></span><br><span class="line">    <span class="keyword">for</span> gradient <span class="keyword">in</span> [dWax, dWaa, dWya, db, dby]:</span><br><span class="line">        np.clip(a = gradient, a_min = -maxValue, a_max = maxValue, out = gradient)</span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    gradients = &#123;<span class="string">"dWaa"</span>: dWaa, <span class="string">"dWax"</span>: dWax, <span class="string">"dWya"</span>: dWya, <span class="string">"db"</span>: db, <span class="string">"dby"</span>: dby&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> gradients</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(<span class="number">3</span>)</span><br><span class="line">dWax = np.random.randn(<span class="number">5</span>,<span class="number">3</span>)*<span class="number">10</span></span><br><span class="line">dWaa = np.random.randn(<span class="number">5</span>,<span class="number">5</span>)*<span class="number">10</span></span><br><span class="line">dWya = np.random.randn(<span class="number">2</span>,<span class="number">5</span>)*<span class="number">10</span></span><br><span class="line">db = np.random.randn(<span class="number">5</span>,<span class="number">1</span>)*<span class="number">10</span></span><br><span class="line">dby = np.random.randn(<span class="number">2</span>,<span class="number">1</span>)*<span class="number">10</span></span><br><span class="line">gradients = &#123;<span class="string">"dWax"</span>: dWax, <span class="string">"dWaa"</span>: dWaa, <span class="string">"dWya"</span>: dWya, <span class="string">"db"</span>: db, <span class="string">"dby"</span>: dby&#125;</span><br><span class="line">gradients = clip(gradients, <span class="number">10</span>)</span><br><span class="line">print(<span class="string">"gradients[\"dWaa\"][1][2] ="</span>, gradients[<span class="string">"dWaa"</span>][<span class="number">1</span>][<span class="number">2</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dWax\"][3][1] ="</span>, gradients[<span class="string">"dWax"</span>][<span class="number">3</span>][<span class="number">1</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dWya\"][1][2] ="</span>, gradients[<span class="string">"dWya"</span>][<span class="number">1</span>][<span class="number">2</span>])</span><br><span class="line">print(<span class="string">"gradients[\"db\"][4] ="</span>, gradients[<span class="string">"db"</span>][<span class="number">4</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dby\"][1] ="</span>, gradients[<span class="string">"dby"</span>][<span class="number">1</span>])</span><br></pre></td></tr></table></figure><pre><code>gradients[&quot;dWaa&quot;][1][2] = 10.0gradients[&quot;dWax&quot;][3][1] = -10.0gradients[&quot;dWya&quot;][1][2] = 0.29713815361gradients[&quot;db&quot;][4] = [ 10.]gradients[&quot;dby&quot;][1] = [ 8.45833407]</code></pre><p>** Expected output:**</p><table><tr><td><strong>gradients["dWaa"][1][2] </strong></td><td>10.0</td></tr><tr><td><strong>gradients["dWax"][3][1]</strong></td><td>-10.0</td></tr><tr><td><strong>gradients["dWya"][1][2]</strong></td><td>0.29713815361</td></tr><tr><td><strong>gradients["db"][4]</strong></td><td>[ 10.]</td></tr><tr><td><strong>gradients["dby"][1]</strong></td><td>[ 8.45833407]</td></tr></table><h3 id="sampling">2.2 - Sampling</h3><p>Now assume that your model is trained. You would like to generate new text (characters). The process of generation is explained in the picture below:</p><img src="images/dinos3.png" style="width:500;height:300px;"><caption><center><strong>Figure 3</strong>: In this picture, we assume the model is already trained. We pass in <span class="math inline">\(x^{\langle 1\rangle} = \vec{0}\)</span> at the first time step, and have the network then sample one character at a time.</center></caption><p><strong>Exercise</strong>: Implement the <code>sample</code> function below to sample characters. You need to carry out 4 steps:</p><ul><li><p><strong>Step 1</strong>: Pass the network the first "dummy" input <span class="math inline">\(x^{\langle 1 \rangle} = \vec{0}\)</span> (the vector of zeros). This is the default input before we've generated any characters. We also set <span class="math inline">\(a^{\langle 0 \rangle} = \vec{0}\)</span></p></li><li><p><strong>Step 2</strong>: Run one step of forward propagation to get <span class="math inline">\(a^{\langle 1 \rangle}\)</span> and <span class="math inline">\(\hat{y}^{\langle 1 \rangle}\)</span>. Here are the equations:</p></li></ul><p><span class="math display">\[ a^{\langle t+1 \rangle} = \tanh(W_{ax}  x^{\langle t \rangle } + W_{aa} a^{\langle t \rangle } + b)\tag{1}\]</span></p><p><span class="math display">\[ z^{\langle t + 1 \rangle } = W_{ya}  a^{\langle t + 1 \rangle } + b_y \tag{2}\]</span></p><p><span class="math display">\[ \hat{y}^{\langle t+1 \rangle } = softmax(z^{\langle t + 1 \rangle })\tag{3}\]</span></p><p>Note that <span class="math inline">\(\hat{y}^{\langle t+1 \rangle }\)</span> is a (softmax) probability vector (its entries are between 0 and 1 and sum to 1). <span class="math inline">\(\hat{y}^{\langle t+1 \rangle}_i\)</span> represents the probability that the character indexed by "i" is the next character. We have provided a <code>softmax()</code> function that you can use.</p><ul><li><strong>Step 3</strong>: Carry out sampling: Pick the next character's index according to the probability distribution specified by <span class="math inline">\(\hat{y}^{\langle t+1 \rangle }\)</span>. This means that if <span class="math inline">\(\hat{y}^{\langle t+1 \rangle }_i = 0.16\)</span>, you will pick the index "i" with 16% probability. To implement it, you can use <a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.random.choice.html" target="_blank" rel="noopener"><code>np.random.choice</code></a>.</li></ul><p>Here is an example of how to use <code>np.random.choice()</code>: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">p = np.array([<span class="number">0.1</span>, <span class="number">0.0</span>, <span class="number">0.7</span>, <span class="number">0.2</span>])</span><br><span class="line">index = np.random.choice([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], p = p.ravel())</span><br></pre></td></tr></table></figure></p><p>This means that you will pick the <code>index</code> according to the distribution: <span class="math inline">\(P(index = 0) = 0.1, P(index = 1) = 0.0, P(index = 2) = 0.7, P(index = 3) = 0.2\)</span>.</p><ul><li><strong>Step 4</strong>: The last step to implement in <code>sample()</code> is to overwrite the variable <code>x</code>, which currently stores <span class="math inline">\(x^{\langle t \rangle }\)</span>, with the value of <span class="math inline">\(x^{\langle t + 1 \rangle }\)</span>. You will represent <span class="math inline">\(x^{\langle t + 1 \rangle }\)</span> by creating a one-hot vector corresponding to the character you've chosen as your prediction. You will then forward propagate <span class="math inline">\(x^{\langle t + 1 \rangle }\)</span> in Step 1 and keep repeating the process until you get a "" character, indicating you've reached the end of the dinosaur name.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: sample</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sample</span><span class="params">(parameters, char_to_ix, seed)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Sample a sequence of characters according to a sequence of probability distributions output of the RNN</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    parameters -- python dictionary containing the parameters Waa, Wax, Wya, by, and b. </span></span><br><span class="line"><span class="string">    char_to_ix -- python dictionary mapping each character to an index.</span></span><br><span class="line"><span class="string">    seed -- used for grading purposes. Do not worry about it.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    indices -- a list of length n containing the indices of the sampled characters.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Retrieve parameters and relevant shapes from "parameters" dictionary</span></span><br><span class="line">    Waa, Wax, Wya, by, b = parameters[<span class="string">'Waa'</span>], parameters[<span class="string">'Wax'</span>], parameters[<span class="string">'Wya'</span>], parameters[<span class="string">'by'</span>], parameters[<span class="string">'b'</span>]</span><br><span class="line">    </span><br><span class="line"><span class="comment">#     print(Waa.shape)</span></span><br><span class="line"><span class="comment">#     print(Wax.shape)</span></span><br><span class="line"><span class="comment">#     print(Wya.shape)</span></span><br><span class="line"><span class="comment">#     print(by.shape)</span></span><br><span class="line">    </span><br><span class="line">    vocab_size = by.shape[<span class="number">0</span>]</span><br><span class="line">    n_a = Waa.shape[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    <span class="comment"># Step 1: Create the one-hot vector x for the first character (initializing the sequence generation). (‚âà1 line)</span></span><br><span class="line">    x = np.zeros((vocab_size,<span class="number">1</span>))</span><br><span class="line">    <span class="comment"># Step 1': Initialize a_prev as zeros (‚âà1 line)</span></span><br><span class="line">    a_prev = np.zeros((n_a,<span class="number">1</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Create an empty list of indices, this is the list which will contain the list of indices of the characters to generate (‚âà1 line)</span></span><br><span class="line">    indices = []</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Idx is a flag to detect a newline character, we initialize it to -1</span></span><br><span class="line">    idx = <span class="number">-1</span> </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Loop over time-steps t. At each time-step, sample a character from a probability distribution and append </span></span><br><span class="line">    <span class="comment"># its index to "indices". We'll stop if we reach 50 characters (which should be very unlikely with a well </span></span><br><span class="line">    <span class="comment"># trained model), which helps debugging and prevents entering an infinite loop. </span></span><br><span class="line">    counter = <span class="number">0</span></span><br><span class="line">    newline_character = char_to_ix[<span class="string">'\n'</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (idx != newline_character <span class="keyword">and</span> counter != <span class="number">50</span>):</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Step 2: Forward propagate x using the equations (1), (2) and (3)</span></span><br><span class="line">        a = np.tanh(np.dot(Wax,x) + np.dot(Waa,a_prev)+b)</span><br><span class="line">        z = np.dot(Wya,a) + by</span><br><span class="line">        y = softmax(z)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># for grading purposes</span></span><br><span class="line">        np.random.seed(counter+seed) </span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Step 3: Sample the index of a character within the vocabulary from the probability distribution y</span></span><br><span class="line">        idx = np.random.choice(list(range(y.shape[<span class="number">0</span>])), p = y.ravel())</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Append the index to "indices"</span></span><br><span class="line">        indices.append(idx)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Step 4: Overwrite the input character as the one corresponding to the sampled index.</span></span><br><span class="line">        x = np.zeros((vocab_size,<span class="number">1</span>))</span><br><span class="line">        x[idx] = <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Update "a_prev" to be "a"</span></span><br><span class="line">        a_prev = a</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># for grading purposes</span></span><br><span class="line">        seed += <span class="number">1</span></span><br><span class="line">        counter +=<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (counter == <span class="number">50</span>):</span><br><span class="line">        indices.append(char_to_ix[<span class="string">'\n'</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> indices</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(<span class="number">2</span>)</span><br><span class="line">_, n_a = <span class="number">20</span>, <span class="number">100</span></span><br><span class="line">Wax, Waa, Wya = np.random.randn(n_a, vocab_size), np.random.randn(n_a, n_a), np.random.randn(vocab_size, n_a)</span><br><span class="line">b, by = np.random.randn(n_a, <span class="number">1</span>), np.random.randn(vocab_size, <span class="number">1</span>)</span><br><span class="line">parameters = &#123;<span class="string">"Wax"</span>: Wax, <span class="string">"Waa"</span>: Waa, <span class="string">"Wya"</span>: Wya, <span class="string">"b"</span>: b, <span class="string">"by"</span>: by&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">indices = sample(parameters, char_to_ix, <span class="number">0</span>)</span><br><span class="line">print(<span class="string">"Sampling:"</span>)</span><br><span class="line">print(<span class="string">"list of sampled indices:"</span>, indices)</span><br><span class="line">print(<span class="string">"list of sampled characters:"</span>, [ix_to_char[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices])</span><br></pre></td></tr></table></figure><pre><code>Sampling:list of sampled indices: [12, 17, 24, 14, 13, 9, 10, 22, 24, 6, 13, 11, 12, 6, 21, 15, 21, 14, 3, 2, 1, 21, 18, 24, 7, 25, 6, 25, 18, 10, 16, 2, 3, 8, 15, 12, 11, 7, 1, 12, 10, 2, 7, 7, 11, 5, 6, 12, 25, 0, 0]list of sampled characters: [&#39;l&#39;, &#39;q&#39;, &#39;x&#39;, &#39;n&#39;, &#39;m&#39;, &#39;i&#39;, &#39;j&#39;, &#39;v&#39;, &#39;x&#39;, &#39;f&#39;, &#39;m&#39;, &#39;k&#39;, &#39;l&#39;, &#39;f&#39;, &#39;u&#39;, &#39;o&#39;, &#39;u&#39;, &#39;n&#39;, &#39;c&#39;, &#39;b&#39;, &#39;a&#39;, &#39;u&#39;, &#39;r&#39;, &#39;x&#39;, &#39;g&#39;, &#39;y&#39;, &#39;f&#39;, &#39;y&#39;, &#39;r&#39;, &#39;j&#39;, &#39;p&#39;, &#39;b&#39;, &#39;c&#39;, &#39;h&#39;, &#39;o&#39;, &#39;l&#39;, &#39;k&#39;, &#39;g&#39;, &#39;a&#39;, &#39;l&#39;, &#39;j&#39;, &#39;b&#39;, &#39;g&#39;, &#39;g&#39;, &#39;k&#39;, &#39;e&#39;, &#39;f&#39;, &#39;l&#39;, &#39;y&#39;, &#39;\n&#39;, &#39;\n&#39;]</code></pre>** Expected output:**<table><tr><td><strong>list of sampled indices:</strong></td><td>[12, 17, 24, 14, 13, 9, 10, 22, 24, 6, 13, 11, 12, 6, 21, 15, 21, 14, 3, 2, 1, 21, 18, 24, <br> 7, 25, 6, 25, 18, 10, 16, 2, 3, 8, 15, 12, 11, 7, 1, 12, 10, 2, 7, 7, 11, 5, 6, 12, 25, 0, 0]</td></tr><tr><td><strong>list of sampled characters:</strong></td><td>['l', 'q', 'x', 'n', 'm', 'i', 'j', 'v', 'x', 'f', 'm', 'k', 'l', 'f', 'u', 'o', <br> 'u', 'n', 'c', 'b', 'a', 'u', 'r', 'x', 'g', 'y', 'f', 'y', 'r', 'j', 'p', 'b', 'c', 'h', 'o', <br> 'l', 'k', 'g', 'a', 'l', 'j', 'b', 'g', 'g', 'k', 'e', 'f', 'l', 'y', '', '']</td></tr></table><h2 id="building-the-language-model">3 - Building the language model</h2><p>It is time to build the character-level language model for text generation.</p><h3 id="gradient-descent">3.1 - Gradient descent</h3><p>In this section you will implement a function performing one step of stochastic gradient descent (with clipped gradients). You will go through the training examples one at a time, so the optimization algorithm will be stochastic gradient descent. As a reminder, here are the steps of a common optimization loop for an RNN:</p><ul><li>Forward propagate through the RNN to compute the loss</li><li>Backward propagate through time to compute the gradients of the loss with respect to the parameters</li><li>Clip the gradients if necessary</li><li>Update your parameters using gradient descent</li></ul><p><strong>Exercise</strong>: Implement this optimization process (one step of stochastic gradient descent).</p><p>We provide you with the following functions:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rnn_forward</span><span class="params">(X, Y, a_prev, parameters)</span>:</span></span><br><span class="line">    <span class="string">""" Performs the forward propagation through the RNN and computes the cross-entropy loss.</span></span><br><span class="line"><span class="string">    It returns the loss' value as well as a "cache" storing values to be used in the backpropagation."""</span></span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">return</span> loss, cache</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rnn_backward</span><span class="params">(X, Y, parameters, cache)</span>:</span></span><br><span class="line">    <span class="string">""" Performs the backward propagation through time to compute the gradients of the loss with respect</span></span><br><span class="line"><span class="string">    to the parameters. It returns also all the hidden states."""</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> gradients, a</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_parameters</span><span class="params">(parameters, gradients, learning_rate)</span>:</span></span><br><span class="line">    <span class="string">""" Updates parameters using the Gradient Descent Update Rule."""</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> parameters</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: optimize</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">optimize</span><span class="params">(X, Y, a_prev, parameters, learning_rate = <span class="number">0.01</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Execute one step of the optimization to train the model.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    X -- list of integers, where each integer is a number that maps to a character in the vocabulary.</span></span><br><span class="line"><span class="string">    Y -- list of integers, exactly the same as X but shifted one index to the left.</span></span><br><span class="line"><span class="string">    a_prev -- previous hidden state.</span></span><br><span class="line"><span class="string">    parameters -- python dictionary containing:</span></span><br><span class="line"><span class="string">                        Wax -- Weight matrix multiplying the input, numpy array of shape (n_a, n_x)</span></span><br><span class="line"><span class="string">                        Waa -- Weight matrix multiplying the hidden state, numpy array of shape (n_a, n_a)</span></span><br><span class="line"><span class="string">                        Wya -- Weight matrix relating the hidden-state to the output, numpy array of shape (n_y, n_a)</span></span><br><span class="line"><span class="string">                        b --  Bias, numpy array of shape (n_a, 1)</span></span><br><span class="line"><span class="string">                        by -- Bias relating the hidden-state to the output, numpy array of shape (n_y, 1)</span></span><br><span class="line"><span class="string">    learning_rate -- learning rate for the model.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    loss -- value of the loss function (cross-entropy)</span></span><br><span class="line"><span class="string">    gradients -- python dictionary containing:</span></span><br><span class="line"><span class="string">                        dWax -- Gradients of input-to-hidden weights, of shape (n_a, n_x)</span></span><br><span class="line"><span class="string">                        dWaa -- Gradients of hidden-to-hidden weights, of shape (n_a, n_a)</span></span><br><span class="line"><span class="string">                        dWya -- Gradients of hidden-to-output weights, of shape (n_y, n_a)</span></span><br><span class="line"><span class="string">                        db -- Gradients of bias vector, of shape (n_a, 1)</span></span><br><span class="line"><span class="string">                        dby -- Gradients of output bias vector, of shape (n_y, 1)</span></span><br><span class="line"><span class="string">    a[len(X)-1] -- the last hidden state, of shape (n_a, 1)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Forward propagate through time (‚âà1 line)</span></span><br><span class="line">    loss, cache = rnn_forward(X, Y, a_prev, parameters)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Backpropagate through time (‚âà1 line)</span></span><br><span class="line">    gradients, a = rnn_backward(X, Y, parameters, cache)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Clip your gradients between -5 (min) and 5 (max) (‚âà1 line)</span></span><br><span class="line">    gradients = clip(gradients, <span class="number">5</span>)</span><br><span class="line">    <span class="comment"># Update parameters (‚âà1 line)</span></span><br><span class="line">    parameters = update_parameters(parameters, gradients, learning_rate)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> loss, gradients, a[len(X)<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(<span class="number">1</span>)</span><br><span class="line">vocab_size, n_a = <span class="number">27</span>, <span class="number">100</span></span><br><span class="line">a_prev = np.random.randn(n_a, <span class="number">1</span>)</span><br><span class="line">Wax, Waa, Wya = np.random.randn(n_a, vocab_size), np.random.randn(n_a, n_a), np.random.randn(vocab_size, n_a)</span><br><span class="line">b, by = np.random.randn(n_a, <span class="number">1</span>), np.random.randn(vocab_size, <span class="number">1</span>)</span><br><span class="line">parameters = &#123;<span class="string">"Wax"</span>: Wax, <span class="string">"Waa"</span>: Waa, <span class="string">"Wya"</span>: Wya, <span class="string">"b"</span>: b, <span class="string">"by"</span>: by&#125;</span><br><span class="line">X = [<span class="number">12</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">22</span>,<span class="number">3</span>]</span><br><span class="line">Y = [<span class="number">4</span>,<span class="number">14</span>,<span class="number">11</span>,<span class="number">22</span>,<span class="number">25</span>, <span class="number">26</span>]</span><br><span class="line"></span><br><span class="line">loss, gradients, a_last = optimize(X, Y, a_prev, parameters, learning_rate = <span class="number">0.01</span>)</span><br><span class="line">print(<span class="string">"Loss ="</span>, loss)</span><br><span class="line">print(<span class="string">"gradients[\"dWaa\"][1][2] ="</span>, gradients[<span class="string">"dWaa"</span>][<span class="number">1</span>][<span class="number">2</span>])</span><br><span class="line">print(<span class="string">"np.argmax(gradients[\"dWax\"]) ="</span>, np.argmax(gradients[<span class="string">"dWax"</span>]))</span><br><span class="line">print(<span class="string">"gradients[\"dWya\"][1][2] ="</span>, gradients[<span class="string">"dWya"</span>][<span class="number">1</span>][<span class="number">2</span>])</span><br><span class="line">print(<span class="string">"gradients[\"db\"][4] ="</span>, gradients[<span class="string">"db"</span>][<span class="number">4</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dby\"][1] ="</span>, gradients[<span class="string">"dby"</span>][<span class="number">1</span>])</span><br><span class="line">print(<span class="string">"a_last[4] ="</span>, a_last[<span class="number">4</span>])</span><br></pre></td></tr></table></figure><p>Loss = 126.503975722 gradients["dWaa"][1][2] = 0.194709315347 np.argmax(gradients["dWax"]) = 93 gradients["dWya"][1][2] = -0.007773876032 gradients["db"][4] = [-0.06809825] gradients["dby"][1] = [ 0.01538192] a_last[4] = [-1.]</p><p>** Expected output:**</p><table><tr><td><strong>Loss </strong></td><td>126.503975722</td></tr><tr><td><strong>gradients["dWaa"][1][2]</strong></td><td>0.194709315347</td></tr><tr><td><strong>np.argmax(gradients["dWax"])</strong></td><td>93</td></tr><tr><td><strong>gradients["dWya"][1][2]</strong></td><td>-0.007773876032</td></tr><tr><td><strong>gradients["db"][4]</strong></td><td>[-0.06809825]</td></tr><tr><td><strong>gradients["dby"][1]</strong></td><td>[ 0.01538192]</td></tr><tr><td><strong>a_last[4]</strong></td><td>[-1.]</td></tr></table><h3 id="training-the-model">3.2 - Training the model</h3><p>Given the dataset of dinosaur names, we use each line of the dataset (one name) as one training example. Every 100 steps of stochastic gradient descent, you will sample 10 randomly chosen names to see how the algorithm is doing. Remember to shuffle the dataset, so that stochastic gradient descent visits the examples in random order.</p><p><strong>Exercise</strong>: Follow the instructions and implement <code>model()</code>. When <code>examples[index]</code> contains one dinosaur name (string), to create an example (X, Y), you can use this: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">index = j % len(examples)</span><br><span class="line">X = [<span class="keyword">None</span>] + [char_to_ix[ch] <span class="keyword">for</span> ch <span class="keyword">in</span> examples[index]] </span><br><span class="line">Y = X[<span class="number">1</span>:] + [char_to_ix[<span class="string">"\n"</span>]]</span><br></pre></td></tr></table></figure></p><p>Note that we use: <code>index= j % len(examples)</code>, where <code>j = 1....num_iterations</code>, to make sure that <code>examples[index]</code> is always a valid statement (<code>index</code> is smaller than <code>len(examples)</code>). The first entry of <code>X</code> being <code>None</code> will be interpreted by <code>rnn_forward()</code> as setting <span class="math inline">\(x^{\langle 0 \rangle} = \vec{0}\)</span>. Further, this ensures that <code>Y</code> is equal to <code>X</code> but shifted one step to the left, and with an additional "" appended to signify the end of the dinosaur name.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: model</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">model</span><span class="params">(data, ix_to_char, char_to_ix, num_iterations = <span class="number">35000</span>, n_a = <span class="number">50</span>, dino_names = <span class="number">7</span>, vocab_size = <span class="number">27</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Trains the model and generates dinosaur names. </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    data -- text corpus</span></span><br><span class="line"><span class="string">    ix_to_char -- dictionary that maps the index to a character</span></span><br><span class="line"><span class="string">    char_to_ix -- dictionary that maps a character to an index</span></span><br><span class="line"><span class="string">    num_iterations -- number of iterations to train the model for</span></span><br><span class="line"><span class="string">    n_a -- number of units of the RNN cell</span></span><br><span class="line"><span class="string">    dino_names -- number of dinosaur names you want to sample at each iteration. </span></span><br><span class="line"><span class="string">    vocab_size -- number of unique characters found in the text, size of the vocabulary</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    parameters -- learned parameters</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Retrieve n_x and n_y from vocab_size</span></span><br><span class="line">    n_x, n_y = vocab_size, vocab_size</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Initialize parameters</span></span><br><span class="line">    parameters = initialize_parameters(n_a, n_x, n_y)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Initialize loss (this is required because we want to smooth our loss, don't worry about it)</span></span><br><span class="line">    loss = get_initial_loss(vocab_size, dino_names)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Build list of all dinosaur names (training examples).</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"dinos.txt"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        examples = f.readlines()</span><br><span class="line">    examples = [x.lower().strip() <span class="keyword">for</span> x <span class="keyword">in</span> examples]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Shuffle list of all dinosaur names</span></span><br><span class="line">    np.random.seed(<span class="number">0</span>)</span><br><span class="line">    np.random.shuffle(examples)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Initialize the hidden state of your LSTM</span></span><br><span class="line">    a_prev = np.zeros((n_a, <span class="number">1</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Optimization loop</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(num_iterations):</span><br><span class="line">        </span><br><span class="line">        <span class="comment">### START CODE HERE ###</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Use the hint above to define one training example (X,Y) (‚âà 2 lines)</span></span><br><span class="line">        index = j % len(examples)</span><br><span class="line">        X = [<span class="keyword">None</span>] + [char_to_ix[ch] <span class="keyword">for</span> ch <span class="keyword">in</span> examples[index]]</span><br><span class="line">        Y = X[<span class="number">1</span>:] + [char_to_ix[<span class="string">"\n"</span>]]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Perform one optimization step: Forward-prop -&gt; Backward-prop -&gt; Clip -&gt; Update parameters</span></span><br><span class="line">        <span class="comment"># Choose a learning rate of 0.01</span></span><br><span class="line">        curr_loss, gradients, a_prev = optimize(X, Y, a_prev, parameters,learning_rate =  <span class="number">0.01</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">### END CODE HERE ###</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Use a latency trick to keep the loss smooth. It happens here to accelerate the training.</span></span><br><span class="line">        loss = smooth(loss, curr_loss)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Every 2000 Iteration, generate "n" characters thanks to sample() to check if the model is learning properly</span></span><br><span class="line">        <span class="keyword">if</span> j % <span class="number">2000</span> == <span class="number">0</span>:</span><br><span class="line">            </span><br><span class="line">            print(<span class="string">'Iteration: %d, Loss: %f'</span> % (j, loss) + <span class="string">'\n'</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># The number of dinosaur names to print</span></span><br><span class="line">            seed = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> name <span class="keyword">in</span> range(dino_names):</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># Sample indices and print them</span></span><br><span class="line">                sampled_indices = sample(parameters, char_to_ix, seed)</span><br><span class="line">                print_sample(sampled_indices, ix_to_char)</span><br><span class="line">                </span><br><span class="line">                seed += <span class="number">1</span>  <span class="comment"># To get the same result for grading purposed, increment the seed by one. </span></span><br><span class="line">      </span><br><span class="line">            print(<span class="string">'\n'</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> parameters</span><br></pre></td></tr></table></figure><p>Run the following cell, you should observe your model outputting random-looking characters at the first iteration. After a few thousand iterations, your model should learn to generate reasonable-looking names.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parameters = model(data, ix_to_char, char_to_ix)</span><br></pre></td></tr></table></figure><p>Iteration: 0, Loss: 23.087336</p><p>Nkzxwtdmfqoeyhsqwasjkjvu Kneb Kzxwtdmfqoeyhsqwasjkjvu Neb Zxwtdmfqoeyhsqwasjkjvu Eb Xwtdmfqoeyhsqwasjkjvu</p><p>Iteration: 2000, Loss: 27.884160</p><p>Liusskeomnolxeros Hmdaairus Hytroligoraurus Lecalosapaus Xusicikoraurus Abalpsamantisaurus Tpraneronxeros</p><p>Iteration: 4000, Loss: 25.901815</p><p>Mivrosaurus Inee Ivtroplisaurus Mbaaisaurus Wusichisaurus Cabaselachus Toraperlethosdarenitochusthiamamumamaon</p><p>Iteration: 6000, Loss: 24.608779</p><p>Onwusceomosaurus Lieeaerosaurus Lxussaurus Oma Xusteonosaurus Eeahosaurus Toreonosaurus</p><p>Iteration: 8000, Loss: 24.070350</p><p>Onxusichepriuon Kilabersaurus Lutrodon Omaaerosaurus Xutrcheps Edaksoje Trodiktonus</p><p>Iteration: 10000, Loss: 23.844446</p><p>Onyusaurus Klecalosaurus Lustodon Ola Xusodonia Eeaeosaurus Troceosaurus</p><p>Iteration: 12000, Loss: 23.291971</p><p>Onyxosaurus Kica Lustrepiosaurus Olaagrraiansaurus Yuspangosaurus Eealosaurus Trognesaurus</p><p>Iteration: 14000, Loss: 23.382339</p><p>Meutromodromurus Inda Iutroinatorsaurus Maca Yusteratoptititan Ca Troclosaurus</p><p>Iteration: 16000, Loss: 23.288447</p><p>Meuspsangosaurus Ingaa Iusosaurus Macalosaurus Yushanis Daalosaurus Trpandon</p><p>Iteration: 18000, Loss: 22.823526</p><p>Phytrolonhonyg Mela Mustrerasaurus Peg Ytronorosaurus Ehalosaurus Trolomeehus</p><p>Iteration: 20000, Loss: 23.041871</p><p>Nousmofonosaurus Loma Lytrognatiasaurus Ngaa Ytroenetiaudostarmilus Eiafosaurus Troenchulunosaurus</p><p>Iteration: 22000, Loss: 22.728849</p><p>Piutyrangosaurus Midaa Myroranisaurus Pedadosaurus Ytrodon Eiadosaurus Trodoniomusitocorces</p><p>Iteration: 24000, Loss: 22.683403</p><p>Meutromeisaurus Indeceratlapsaurus Jurosaurus Ndaa Yusicheropterus Eiaeropectus Trodonasaurus</p><p>Iteration: 26000, Loss: 22.554523</p><p>Phyusaurus Liceceron Lyusichenodylus Pegahus Yustenhtonthosaurus Elagosaurus Trodontonsaurus</p><p>Iteration: 28000, Loss: 22.484472</p><p>Onyutimaerihus Koia Lytusaurus Ola Ytroheltorus Eiadosaurus Trofiashates</p><p>Iteration: 30000, Loss: 22.774404</p><p>Phytys Lica Lysus Pacalosaurus Ytrochisaurus Eiacosaurus Trochesaurus</p><p>Iteration: 32000, Loss: 22.209473</p><p>Mawusaurus Jica Lustoia Macaisaurus Yusolenqtesaurus Eeaeosaurus Trnanatrax</p><p>Iteration: 34000, Loss: 22.396744</p><p>Mavptokekus Ilabaisaurus Itosaurus Macaesaurus Yrosaurus Eiaeosaurus Trodon</p><h2 id="conclusion">Conclusion</h2><p>You can see that your algorithm has started to generate plausible dinosaur names towards the end of the training. At first, it was generating random characters, but towards the end you could see dinosaur names with cool endings. Feel free to run the algorithm even longer and play with hyperparameters to see if you can get even better results. Our implemetation generated some really cool names like <code>maconucon</code>, <code>marloralus</code> and <code>macingsersaurus</code>. Your model hopefully also learned that dinosaur names tend to end in <code>saurus</code>, <code>don</code>, <code>aura</code>, <code>tor</code>, etc.</p><p>If your model generates some non-cool names, don't blame the model entirely--not all actual dinosaur names sound cool. (For example, <code>dromaeosauroides</code> is an actual dinosaur name and is in the training set.) But this model should give you a set of candidates from which you can pick the coolest!</p><p>This assignment had used a relatively small dataset, so that you could train an RNN quickly on a CPU. Training a model of the english language requires a much bigger dataset, and usually needs much more computation, and could run for many hours on GPUs. We ran our dinosaur name for quite some time, and so far our favoriate name is the great, undefeatable, and fierce: Mangosaurus!</p><p><img src="images/mangosaurus.jpeg" style="width:250;height:300px;"></p><h2 id="writing-like-shakespeare">4 - Writing like Shakespeare</h2><p>The rest of this notebook is optional and is not graded, but we hope you'll do it anyway since it's quite fun and informative.</p><p>A similar (but more complicated) task is to generate Shakespeare poems. Instead of learning from a dataset of Dinosaur names you can use a collection of Shakespearian poems. Using LSTM cells, you can learn longer term dependencies that span many characters in the text--e.g., where a character appearing somewhere a sequence can influence what should be a different character much much later in ths sequence. These long term dependencies were less important with dinosaur names, since the names were quite short.</p><img src="images/shakespeare.jpg" style="width:500;height:400px;"><caption><center>Let's become poets!</center></caption><p>We have implemented a Shakespeare poem generator with Keras. Run the following cell to load the required packages and models. This may take a few minutes.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> keras.callbacks <span class="keyword">import</span> LambdaCallback</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Model, load_model, Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense, Activation, Dropout, Input, Masking</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> LSTM</span><br><span class="line"><span class="keyword">from</span> keras.utils.data_utils <span class="keyword">import</span> get_file</span><br><span class="line"><span class="keyword">from</span> keras.preprocessing.sequence <span class="keyword">import</span> pad_sequences</span><br><span class="line"><span class="keyword">from</span> shakespeare_utils <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> io</span><br></pre></td></tr></table></figure><p>To save you some time, we have already trained a model for ~1000 epochs on a collection of Shakespearian poems called <a href="shakespeare.txt"><em>"The Sonnets"</em></a>.</p><p>Let's train the model for one more epoch. When it finishes training for an epoch---this will also take a few minutes---you can run <code>generate_output</code>, which will prompt asking you for an input (<code>&lt;</code>40 characters). The poem will start with your sentence, and our RNN-Shakespeare will complete the rest of the poem for you! For example, try "Forsooth this maketh no sense " (don't enter the quotation marks). Depending on whether you include the space at the end, your results might also differ--try it both ways, and try other inputs as well.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print_callback = LambdaCallback(on_epoch_end=on_epoch_end)</span><br><span class="line"></span><br><span class="line">model.fit(x, y, batch_size=<span class="number">128</span>, epochs=<span class="number">1</span>, callbacks=[print_callback])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Run this cell to try with different inputs without having to re-train the model </span></span><br><span class="line">generate_output()</span><br></pre></td></tr></table></figure><p>The RNN-Shakespeare model is very similar to the one you have built for dinosaur names. The only major differences are: - LSTMs instead of the basic RNN to capture longer-range dependencies - The model is a deeper, stacked LSTM model (2 layer) - Using Keras instead of python to simplify the code</p><p>If you want to learn more, you can also check out the Keras Team's text generation implementation on GitHub: https://github.com/keras-team/keras/blob/master/examples/lstm_text_generation.py.</p><p>Congratulations on finishing this notebook!</p><p><strong>References</strong>: - This exercise took inspiration from Andrej Karpathy's implementation: https://gist.github.com/karpathy/d4dee566867f8291f086. To learn more about text generation, also check out Karpathy's <a href="http://karpathy.github.io/2015/05/21/rnn-effectiveness/" target="_blank" rel="noopener">blog post</a>. - For the Shakespearian poem generator, our implementation was based on the implementation of an LSTM text generator by the Keras team: https://github.com/keras-team/keras/blob/master/examples/lstm_text_generation.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sequence Models </tag>
            
            <tag> Homework of Online Coueses </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RNN Implementation</title>
      <link href="/RNN-Implementation/2019/03/28/"/>
      <url>/RNN-Implementation/2019/03/28/</url>
      
        <content type="html"><![CDATA[<h1 id="building-your-recurrent-neural-network---step-by-step">Building your Recurrent Neural Network - Step by Step</h1><p>Welcome to Course 5's first assignment! In this assignment, you will implement your first Recurrent Neural Network in numpy.</p><p>Recurrent Neural Networks (RNN) are very effective for Natural Language Processing and other sequence tasks because they have "memory". They can read inputs <span class="math inline">\(x^{\langle t \rangle}\)</span> (such as words) one at a time, and remember some information/context through the hidden layer activations that get passed from one time-step to the next. This allows a uni-directional RNN to take information from the past to process later inputs. A bidirection RNN can take context from both the past and the future.</p><p><strong>Notation</strong>: - Superscript <span class="math inline">\([l]\)</span> denotes an object associated with the <span class="math inline">\(l^{th}\)</span> layer. - Example: <span class="math inline">\(a^{[4]}\)</span> is the <span class="math inline">\(4^{th}\)</span> layer activation. <span class="math inline">\(W^{[5]}\)</span> and <span class="math inline">\(b^{[5]}\)</span> are the <span class="math inline">\(5^{th}\)</span> layer parameters.</p><ul><li>Superscript <span class="math inline">\((i)\)</span> denotes an object associated with the <span class="math inline">\(i^{th}\)</span> example.<ul><li>Example: <span class="math inline">\(x^{(i)}\)</span> is the <span class="math inline">\(i^{th}\)</span> training example input.</li></ul></li><li>Superscript <span class="math inline">\(\langle t \rangle\)</span> denotes an object at the <span class="math inline">\(t^{th}\)</span> time-step.<ul><li>Example: <span class="math inline">\(x^{\langle t \rangle}\)</span> is the input x at the <span class="math inline">\(t^{th}\)</span> time-step. <span class="math inline">\(x^{(i)\langle t \rangle}\)</span> is the input at the <span class="math inline">\(t^{th}\)</span> timestep of example <span class="math inline">\(i\)</span>.</li></ul></li><li>Lowerscript <span class="math inline">\(i\)</span> denotes the <span class="math inline">\(i^{th}\)</span> entry of a vector.<ul><li>Example: <span class="math inline">\(a^{[l]}_i\)</span> denotes the <span class="math inline">\(i^{th}\)</span> entry of the activations in layer <span class="math inline">\(l\)</span>.</li></ul></li></ul><p>We assume that you are already familiar with <code>numpy</code> and/or have completed the previous courses of the specialization. Let's get started!</p><p>Let's first import all the packages that you will need during this assignment.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> rnn_utils <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><h2 id="forward-propagation-for-the-basic-recurrent-neural-network">1 - Forward propagation for the basic Recurrent Neural Network</h2><p>Later this week, you will generate music using an RNN. The basic RNN that you will implement has the structure below. In this example, <span class="math inline">\(T_x = T_y\)</span>.</p><img src="images/RNN.png" style="width:500;height:300px;"><caption><center><strong>Figure 1</strong>: Basic RNN model</center></caption><p>Here's how you can implement an RNN:</p><p><strong>Steps</strong>: 1. Implement the calculations needed for one time-step of the RNN. 2. Implement a loop over <span class="math inline">\(T_x\)</span> time-steps in order to process all the inputs, one at a time.</p><p>Let's go!</p><h2 id="rnn-cell">1.1 - RNN cell</h2><p>A Recurrent neural network can be seen as the repetition of a single cell. You are first going to implement the computations for a single time-step. The following figure describes the operations for a single time-step of an RNN cell.</p><img src="images/rnn_step_forward.png" style="width:700px;height:300px;"><caption><center><strong>Figure 2</strong>: Basic RNN cell. Takes as input <span class="math inline">\(x^{\langle t \rangle}\)</span> (current input) and <span class="math inline">\(a^{\langle t - 1\rangle}\)</span> (previous hidden state containing information from the past), and outputs <span class="math inline">\(a^{\langle t \rangle}\)</span> which is given to the next RNN cell and also used to predict <span class="math inline">\(y^{\langle t \rangle}\)</span></center></caption><p><strong>Exercise</strong>: Implement the RNN-cell described in Figure (2).</p><p><strong>Instructions</strong>: 1. Compute the hidden state with tanh activation: <span class="math inline">\(a^{\langle t \rangle} = \tanh(W_{aa} a^{\langle t-1 \rangle} + W_{ax} x^{\langle t \rangle} + b_a)\)</span>. 2. Using your new hidden state <span class="math inline">\(a^{\langle t \rangle}\)</span>, compute the prediction <span class="math inline">\(\hat{y}^{\langle t \rangle} = softmax(W_{ya} a^{\langle t \rangle} + b_y)\)</span>. We provided you a function: <code>softmax</code>. 3. Store <span class="math inline">\((a^{\langle t \rangle}, a^{\langle t-1 \rangle}, x^{\langle t \rangle}, parameters)\)</span> in cache 4. Return <span class="math inline">\(a^{\langle t \rangle}\)</span> , <span class="math inline">\(y^{\langle t \rangle}\)</span> and cache</p><p>We will vectorize over <span class="math inline">\(m\)</span> examples. Thus, <span class="math inline">\(x^{\langle t \rangle}\)</span> will have dimension <span class="math inline">\((n_x,m)\)</span>, and <span class="math inline">\(a^{\langle t \rangle}\)</span> will have dimension <span class="math inline">\((n_a,m)\)</span>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: rnn_cell_forward</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rnn_cell_forward</span><span class="params">(xt, a_prev, parameters)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Implements a single forward step of the RNN-cell as described in Figure (2)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    xt -- your input data at timestep "t", numpy array of shape (n_x, m).</span></span><br><span class="line"><span class="string">    a_prev -- Hidden state at timestep "t-1", numpy array of shape (n_a, m)</span></span><br><span class="line"><span class="string">    parameters -- python dictionary containing:</span></span><br><span class="line"><span class="string">                        Wax -- Weight matrix multiplying the input, numpy array of shape (n_a, n_x)</span></span><br><span class="line"><span class="string">                        Waa -- Weight matrix multiplying the hidden state, numpy array of shape (n_a, n_a)</span></span><br><span class="line"><span class="string">                        Wya -- Weight matrix relating the hidden-state to the output, numpy array of shape (n_y, n_a)</span></span><br><span class="line"><span class="string">                        ba --  Bias, numpy array of shape (n_a, 1)</span></span><br><span class="line"><span class="string">                        by -- Bias relating the hidden-state to the output, numpy array of shape (n_y, 1)</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    a_next -- next hidden state, of shape (n_a, m)</span></span><br><span class="line"><span class="string">    yt_pred -- prediction at timestep "t", numpy array of shape (n_y, m)</span></span><br><span class="line"><span class="string">    cache -- tuple of values needed for the backward pass, contains (a_next, a_prev, xt, parameters)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Retrieve parameters from "parameters"</span></span><br><span class="line">    Wax = parameters[<span class="string">"Wax"</span>]</span><br><span class="line">    Waa = parameters[<span class="string">"Waa"</span>]</span><br><span class="line">    Wya = parameters[<span class="string">"Wya"</span>]</span><br><span class="line">    ba = parameters[<span class="string">"ba"</span>]</span><br><span class="line">    by = parameters[<span class="string">"by"</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment">### START CODE HERE ### (‚âà2 lines)</span></span><br><span class="line">    <span class="comment"># compute next activation state using the formula given above</span></span><br><span class="line">    a_next = np.tanh(np.dot(Wax,xt) + np.dot(Waa,a_prev) + ba)</span><br><span class="line">    <span class="comment"># compute output of the current cell using the formula given above</span></span><br><span class="line">    yt_pred = softmax(np.dot(Wya,a_next)+by)</span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># store values you need for backward propagation in cache</span></span><br><span class="line">    cache = (a_next, a_prev, xt, parameters)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> a_next, yt_pred, cache</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(<span class="number">1</span>)</span><br><span class="line">xt = np.random.randn(<span class="number">3</span>,<span class="number">10</span>)</span><br><span class="line">a_prev = np.random.randn(<span class="number">5</span>,<span class="number">10</span>)</span><br><span class="line">Waa = np.random.randn(<span class="number">5</span>,<span class="number">5</span>)</span><br><span class="line">Wax = np.random.randn(<span class="number">5</span>,<span class="number">3</span>)</span><br><span class="line">Wya = np.random.randn(<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line">ba = np.random.randn(<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line">by = np.random.randn(<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">parameters = &#123;<span class="string">"Waa"</span>: Waa, <span class="string">"Wax"</span>: Wax, <span class="string">"Wya"</span>: Wya, <span class="string">"ba"</span>: ba, <span class="string">"by"</span>: by&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a_next, yt_pred, cache = rnn_cell_forward(xt, a_prev, parameters)</span><br><span class="line">print(<span class="string">"a_next[4] = "</span>, a_next[<span class="number">4</span>])</span><br><span class="line">print(<span class="string">"a_next.shape = "</span>, a_next.shape)</span><br><span class="line">print(<span class="string">"yt_pred[1] ="</span>, yt_pred[<span class="number">0</span>])</span><br><span class="line">print(<span class="string">"yt_pred.shape = "</span>, yt_pred.shape)</span><br></pre></td></tr></table></figure><pre><code>a_next[4] =  [ 0.59584544  0.18141802  0.61311866  0.99808218  0.85016201  0.99980978 -0.18887155  0.99815551  0.6531151   0.82872037]a_next.shape =  (5, 10)yt_pred[1] = [ 0.0111839   0.98317979  0.78859101  0.63182533  0.01011613  0.11054788  0.63079776  0.0033688   0.0017441   0.82253474]yt_pred.shape =  (2, 10)</code></pre><p><strong>Expected Output</strong>:</p><table><tr><td><strong>a_next[4]</strong>:</td><td>[ 0.59584544 0.18141802 0.61311866 0.99808218 0.85016201 0.99980978 -0.18887155 0.99815551 0.6531151 0.82872037]</td></tr><tr><td><strong>a_next.shape</strong>:</td><td>(5, 10)</td></tr><tr><td><strong>yt[1]</strong>:</td><td>[ 0.9888161 0.01682021 0.21140899 0.36817467 0.98988387 0.88945212 0.36920224 0.9966312 0.9982559 0.17746526]</td></tr><tr><td><strong>yt.shape</strong>:</td><td>(2, 10)</td></tr></table><h2 id="rnn-forward-pass">1.2 - RNN forward pass</h2><p>You can see an RNN as the repetition of the cell you've just built. If your input sequence of data is carried over 10 time steps, then you will copy the RNN cell 10 times. Each cell takes as input the hidden state from the previous cell (<span class="math inline">\(a^{\langle t-1 \rangle}\)</span>) and the current time-step's input data (<span class="math inline">\(x^{\langle t \rangle}\)</span>). It outputs a hidden state (<span class="math inline">\(a^{\langle t \rangle}\)</span>) and a prediction (<span class="math inline">\(y^{\langle t \rangle}\)</span>) for this time-step.</p><img src="images/rnn_1.png" style="width:800px;height:300px;"><caption><center><strong>Figure 3</strong>: Basic RNN. The input sequence <span class="math inline">\(x = (x^{\langle 1 \rangle}, x^{\langle 2 \rangle}, ..., x^{\langle T_x \rangle})\)</span> is carried over <span class="math inline">\(T_x\)</span> time steps. The network outputs <span class="math inline">\(y = (y^{\langle 1 \rangle}, y^{\langle 2 \rangle}, ..., y^{\langle T_x \rangle})\)</span>.</center></caption><p><strong>Exercise</strong>: Code the forward propagation of the RNN described in Figure (3).</p><p><strong>Instructions</strong>: 1. Create a vector of zeros (<span class="math inline">\(a\)</span>) that will store all the hidden states computed by the RNN. 2. Initialize the "next" hidden state as <span class="math inline">\(a_0\)</span> (initial hidden state). 3. Start looping over each time step, your incremental index is <span class="math inline">\(t\)</span> : - Update the "next" hidden state and the cache by running <code>rnn_cell_forward</code> - Store the "next" hidden state in <span class="math inline">\(a\)</span> (<span class="math inline">\(t^{th}\)</span> position) - Store the prediction in y - Add the cache to the list of caches 4. Return <span class="math inline">\(a\)</span>, <span class="math inline">\(y\)</span> and caches</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: rnn_forward</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rnn_forward</span><span class="params">(x, a0, parameters)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Implement the forward propagation of the recurrent neural network described in Figure (3).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    x -- Input data for every time-step, of shape (n_x, m, T_x).</span></span><br><span class="line"><span class="string">    a0 -- Initial hidden state, of shape (n_a, m)</span></span><br><span class="line"><span class="string">    parameters -- python dictionary containing:</span></span><br><span class="line"><span class="string">                        Waa -- Weight matrix multiplying the hidden state, numpy array of shape (n_a, n_a)</span></span><br><span class="line"><span class="string">                        Wax -- Weight matrix multiplying the input, numpy array of shape (n_a, n_x)</span></span><br><span class="line"><span class="string">                        Wya -- Weight matrix relating the hidden-state to the output, numpy array of shape (n_y, n_a)</span></span><br><span class="line"><span class="string">                        ba --  Bias numpy array of shape (n_a, 1)</span></span><br><span class="line"><span class="string">                        by -- Bias relating the hidden-state to the output, numpy array of shape (n_y, 1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    a -- Hidden states for every time-step, numpy array of shape (n_a, m, T_x)</span></span><br><span class="line"><span class="string">    y_pred -- Predictions for every time-step, numpy array of shape (n_y, m, T_x)</span></span><br><span class="line"><span class="string">    caches -- tuple of values needed for the backward pass, contains (list of caches, x)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Initialize "caches" which will contain the list of all caches</span></span><br><span class="line">    caches = []</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Retrieve dimensions from shapes of x and parameters["Wya"]</span></span><br><span class="line">    n_x, m, T_x = x.shape</span><br><span class="line">    n_y, n_a = parameters[<span class="string">"Wya"</span>].shape</span><br><span class="line">    </span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># initialize "a" and "y" with zeros (‚âà2 lines)</span></span><br><span class="line">    a = np.zeros((n_a,m,T_x))  <span class="comment"># x -&gt; (n_x, m)   waa -&gt; (n_a,n_x)   a -&gt; (na,m)</span></span><br><span class="line">    y_pred = np.zeros((n_y,m,T_x)) <span class="comment"># hidden layer n_a, output layer n_y    Wya -&gt; (n_y,n_a)   y_pred -&gt; (n_y,m) </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Initialize a_next (‚âà1 line)</span></span><br><span class="line">    a_next = a0</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># loop over all time-steps</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> range(x.shape[<span class="number">2</span>]):</span><br><span class="line">        <span class="comment"># Update next hidden state, compute the prediction, get the cache (‚âà1 line)</span></span><br><span class="line">        a_next, yt_pred, cache = rnn_cell_forward(x[:,:,t], a_next, parameters)</span><br><span class="line">        <span class="comment"># Save the value of the new "next" hidden state in a (‚âà1 line)</span></span><br><span class="line">        a[:,:,t] = a_next</span><br><span class="line">        <span class="comment"># Save the value of the prediction in y (‚âà1 line)</span></span><br><span class="line">        y_pred[:,:,t] = yt_pred</span><br><span class="line">        <span class="comment"># Append "cache" to "caches" (‚âà1 line)</span></span><br><span class="line">        caches.append(cache)</span><br><span class="line">        </span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># store values needed for backward propagation in cache</span></span><br><span class="line">    caches = (caches, x)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> a, y_pred, caches</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(<span class="number">1</span>)</span><br><span class="line">x = np.random.randn(<span class="number">3</span>,<span class="number">10</span>,<span class="number">4</span>)</span><br><span class="line">a0 = np.random.randn(<span class="number">5</span>,<span class="number">10</span>)</span><br><span class="line">Waa = np.random.randn(<span class="number">5</span>,<span class="number">5</span>)</span><br><span class="line">Wax = np.random.randn(<span class="number">5</span>,<span class="number">3</span>)</span><br><span class="line">Wya = np.random.randn(<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line">ba = np.random.randn(<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line">by = np.random.randn(<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">parameters = &#123;<span class="string">"Waa"</span>: Waa, <span class="string">"Wax"</span>: Wax, <span class="string">"Wya"</span>: Wya, <span class="string">"ba"</span>: ba, <span class="string">"by"</span>: by&#125;</span><br><span class="line"></span><br><span class="line">a, y_pred, caches = rnn_forward(x, a0, parameters)</span><br><span class="line">print(<span class="string">"a[4][1] = "</span>, a[<span class="number">4</span>][<span class="number">1</span>])</span><br><span class="line">print(<span class="string">"a.shape = "</span>, a.shape)</span><br><span class="line">print(<span class="string">"y_pred[1][3] ="</span>, y_pred[<span class="number">1</span>][<span class="number">3</span>])</span><br><span class="line">print(<span class="string">"y_pred.shape = "</span>, y_pred.shape)</span><br><span class="line">print(<span class="string">"caches[1][1][3] ="</span>, caches[<span class="number">1</span>][<span class="number">1</span>][<span class="number">3</span>])</span><br><span class="line">print(<span class="string">"len(caches) = "</span>, len(caches))</span><br></pre></td></tr></table></figure><p>a[4][1] = [-0.99999375 0.77911235 -0.99861469 -0.99833267] a.shape = (5, 10, 4) y_pred[1][3] = [ 0.79560373 0.86224861 0.11118257 0.81515947] y_pred.shape = (2, 10, 4) caches[1][1][3] = [-1.1425182 -0.34934272 -0.20889423 0.58662319] len(caches) = 2</p><p><strong>Expected Output</strong>:</p><table><tr><td><strong>a[4][1]</strong>:</td><td>[-0.99999375 0.77911235 -0.99861469 -0.99833267]</td></tr><tr><td><strong>a.shape</strong>:</td><td>(5, 10, 4)</td></tr><tr><td><strong>y[1][3]</strong>:</td><td>[ 0.79560373 0.86224861 0.11118257 0.81515947]</td></tr><tr><td><strong>y.shape</strong>:</td><td>(2, 10, 4)</td></tr><tr><td><strong>cache[1][1][3]</strong>:</td><td>[-1.1425182 -0.34934272 -0.20889423 0.58662319]</td></tr><tr><td><strong>len(cache)</strong>:</td><td>2</td></tr></table><p>Congratulations! You've successfully built the forward propagation of a recurrent neural network from scratch. This will work well enough for some applications, but it suffers from vanishing gradient problems. So it works best when each output <span class="math inline">\(y^{\langle t \rangle}\)</span> can be estimated using mainly "local" context (meaning information from inputs <span class="math inline">\(x^{\langle t&#39; \rangle}\)</span> where <span class="math inline">\(t&#39;\)</span> is not too far from <span class="math inline">\(t\)</span>).</p><p>In the next part, you will build a more complex LSTM model, which is better at addressing vanishing gradients. The LSTM will be better able to remember a piece of information and keep it saved for many timesteps.</p><h2 id="long-short-term-memory-lstm-network">2 - Long Short-Term Memory (LSTM) network</h2><p>This following figure shows the operations of an LSTM-cell.</p><img src="images/LSTM.png" style="width:500;height:400px;"><caption><center><strong>Figure 4</strong>: LSTM-cell. This tracks and updates a "cell state" or memory variable <span class="math inline">\(c^{\langle t \rangle}\)</span> at every time-step, which can be different from <span class="math inline">\(a^{\langle t \rangle}\)</span>.</center></caption><p>Similar to the RNN example above, you will start by implementing the LSTM cell for a single time-step. Then you can iteratively call it from inside a for-loop to have it process an input with <span class="math inline">\(T_x\)</span> time-steps.</p><h3 id="about-the-gates">About the gates</h3><h4 id="forget-gate">- Forget gate</h4><p>For the sake of this illustration, lets assume we are reading words in a piece of text, and want use an LSTM to keep track of grammatical structures, such as whether the subject is singular or plural. If the subject changes from a singular word to a plural word, we need to find a way to get rid of our previously stored memory value of the singular/plural state. In an LSTM, the forget gate lets us do this:</p><p><span class="math display">\[\Gamma_f^{\langle t \rangle} = \sigma(W_f[a^{\langle t-1 \rangle}, x^{\langle t \rangle}] + b_f)\tag{1} \]</span></p><p>Here, <span class="math inline">\(W_f\)</span> are weights that govern the forget gate's behavior. We concatenate <span class="math inline">\([a^{\langle t-1 \rangle}, x^{\langle t \rangle}]\)</span> and multiply by <span class="math inline">\(W_f\)</span>. The equation above results in a vector <span class="math inline">\(\Gamma_f^{\langle t \rangle}\)</span> with values between 0 and 1. This forget gate vector will be multiplied element-wise by the previous cell state <span class="math inline">\(c^{\langle t-1 \rangle}\)</span>. So if one of the values of <span class="math inline">\(\Gamma_f^{\langle t \rangle}\)</span> is 0 (or close to 0) then it means that the LSTM should remove that piece of information (e.g. the singular subject) in the corresponding component of <span class="math inline">\(c^{\langle t-1 \rangle}\)</span>. If one of the values is 1, then it will keep the information.</p><h4 id="update-gate">- Update gate</h4><p>Once we forget that the subject being discussed is singular, we need to find a way to update it to reflect that the new subject is now plural. Here is the formulat for the update gate:</p><p><span class="math display">\[\Gamma_u^{\langle t \rangle} = \sigma(W_u[a^{\langle t-1 \rangle}, x^{\{t\}}] + b_u)\tag{2} \]</span></p><p>Similar to the forget gate, here <span class="math inline">\(\Gamma_u^{\langle t \rangle}\)</span> is again a vector of values between 0 and 1. This will be multiplied element-wise with <span class="math inline">\(\tilde{c}^{\langle t \rangle}\)</span>, in order to compute <span class="math inline">\(c^{\langle t \rangle}\)</span>.</p><h4 id="updating-the-cell">- Updating the cell</h4><p>To update the new subject we need to create a new vector of numbers that we can add to our previous cell state. The equation we use is:</p><p><span class="math display">\[ \tilde{c}^{\langle t \rangle} = \tanh(W_c[a^{\langle t-1 \rangle}, x^{\langle t \rangle}] + b_c)\tag{3} \]</span></p><p>Finally, the new cell state is:</p><p><span class="math display">\[ c^{\langle t \rangle} = \Gamma_f^{\langle t \rangle}* c^{\langle t-1 \rangle} + \Gamma_u^{\langle t \rangle} *\tilde{c}^{\langle t \rangle} \tag{4} \]</span></p><h4 id="output-gate">- Output gate</h4><p>To decide which outputs we will use, we will use the following two formulas:</p><p><span class="math display">\[ \Gamma_o^{\langle t \rangle}=  \sigma(W_o[a^{\langle t-1 \rangle}, x^{\langle t \rangle}] + b_o)\tag{5}\]</span> <span class="math display">\[ a^{\langle t \rangle} = \Gamma_o^{\langle t \rangle}* \tanh(c^{\langle t \rangle})\tag{6} \]</span></p><p>Where in equation 5 you decide what to output using a sigmoid function and in equation 6 you multiply that by the <span class="math inline">\(\tanh\)</span> of the previous state.</p><h3 id="lstm-cell">2.1 - LSTM cell</h3><p><strong>Exercise</strong>: Implement the LSTM cell described in the Figure (3).</p><p><strong>Instructions</strong>: 1. Concatenate <span class="math inline">\(a^{\langle t-1 \rangle}\)</span> and <span class="math inline">\(x^{\langle t \rangle}\)</span> in a single matrix: <span class="math inline">\(concat = \begin{bmatrix} a^{\langle t-1 \rangle} \\ x^{\langle t \rangle} \end{bmatrix}\)</span> 2. Compute all the formulas 1-6. You can use <code>sigmoid()</code> (provided) and <code>np.tanh()</code>. 3. Compute the prediction <span class="math inline">\(y^{\langle t \rangle}\)</span>. You can use <code>softmax()</code> (provided).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: lstm_cell_forward</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lstm_cell_forward</span><span class="params">(xt, a_prev, c_prev, parameters)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Implement a single forward step of the LSTM-cell as described in Figure (4)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    xt -- your input data at timestep "t", numpy array of shape (n_x, m).</span></span><br><span class="line"><span class="string">    a_prev -- Hidden state at timestep "t-1", numpy array of shape (n_a, m)</span></span><br><span class="line"><span class="string">    c_prev -- Memory state at timestep "t-1", numpy array of shape (n_a, m)</span></span><br><span class="line"><span class="string">    parameters -- python dictionary containing:</span></span><br><span class="line"><span class="string">                        Wf -- Weight matrix of the forget gate, numpy array of shape (n_a, n_a + n_x)</span></span><br><span class="line"><span class="string">                        bf -- Bias of the forget gate, numpy array of shape (n_a, 1)</span></span><br><span class="line"><span class="string">                        Wi -- Weight matrix of the update gate, numpy array of shape (n_a, n_a + n_x)</span></span><br><span class="line"><span class="string">                        bi -- Bias of the update gate, numpy array of shape (n_a, 1)</span></span><br><span class="line"><span class="string">                        Wc -- Weight matrix of the first "tanh", numpy array of shape (n_a, n_a + n_x)</span></span><br><span class="line"><span class="string">                        bc --  Bias of the first "tanh", numpy array of shape (n_a, 1)</span></span><br><span class="line"><span class="string">                        Wo -- Weight matrix of the output gate, numpy array of shape (n_a, n_a + n_x)</span></span><br><span class="line"><span class="string">                        bo --  Bias of the output gate, numpy array of shape (n_a, 1)</span></span><br><span class="line"><span class="string">                        Wy -- Weight matrix relating the hidden-state to the output, numpy array of shape (n_y, n_a)</span></span><br><span class="line"><span class="string">                        by -- Bias relating the hidden-state to the output, numpy array of shape (n_y, 1)</span></span><br><span class="line"><span class="string">                        </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    a_next -- next hidden state, of shape (n_a, m)</span></span><br><span class="line"><span class="string">    c_next -- next memory state, of shape (n_a, m)</span></span><br><span class="line"><span class="string">    yt_pred -- prediction at timestep "t", numpy array of shape (n_y, m)</span></span><br><span class="line"><span class="string">    cache -- tuple of values needed for the backward pass, contains (a_next, c_next, a_prev, c_prev, xt, parameters)</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Note: ft/it/ot stand for the forget/update/output gates, cct stands for the candidate value (c tilde),</span></span><br><span class="line"><span class="string">          c stands for the memory value</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Retrieve parameters from "parameters"</span></span><br><span class="line">    Wf = parameters[<span class="string">"Wf"</span>]</span><br><span class="line">    bf = parameters[<span class="string">"bf"</span>]</span><br><span class="line">    Wi = parameters[<span class="string">"Wi"</span>]</span><br><span class="line">    bi = parameters[<span class="string">"bi"</span>]</span><br><span class="line">    Wc = parameters[<span class="string">"Wc"</span>]</span><br><span class="line">    bc = parameters[<span class="string">"bc"</span>]</span><br><span class="line">    Wo = parameters[<span class="string">"Wo"</span>]</span><br><span class="line">    bo = parameters[<span class="string">"bo"</span>]</span><br><span class="line">    Wy = parameters[<span class="string">"Wy"</span>]</span><br><span class="line">    by = parameters[<span class="string">"by"</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Retrieve dimensions from shapes of xt and Wy</span></span><br><span class="line">    n_x, m = xt.shape</span><br><span class="line">    n_y, n_a = Wy.shape</span><br><span class="line"></span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    <span class="comment"># Concatenate a_prev and xt (‚âà3 lines)</span></span><br><span class="line">    concat = np.zeros((a_prev.shape[<span class="number">0</span>] + xt.shape[<span class="number">0</span>],xt.shape[<span class="number">1</span>]))</span><br><span class="line">    concat[: n_a, :] = a_prev</span><br><span class="line">    concat[n_a :, :] = xt</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Compute values for ft, it, cct, c_next, ot, a_next using the formulas given figure (4) (‚âà6 lines)</span></span><br><span class="line">    ft = sigmoid(np.dot(Wf,concat) + bf)</span><br><span class="line">    it = sigmoid(np.dot(Wi,concat) + bi)</span><br><span class="line">    cct = np.tanh(np.dot(Wc,concat) + bc)</span><br><span class="line">    c_next = ft * c_prev + it * cct</span><br><span class="line">    ot = sigmoid(np.dot(Wo,concat) + bo)</span><br><span class="line">    a_next = ot * np.tanh(c_next)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Compute prediction of the LSTM cell (‚âà1 line)</span></span><br><span class="line">    yt_pred = softmax(np.dot(Wy,a_next)+ by)</span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># store values needed for backward propagation in cache</span></span><br><span class="line">    cache = (a_next, c_next, a_prev, c_prev, ft, it, cct, ot, xt, parameters)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a_next, c_next, yt_pred, cache</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(<span class="number">1</span>)</span><br><span class="line">xt = np.random.randn(<span class="number">3</span>,<span class="number">10</span>)</span><br><span class="line">a_prev = np.random.randn(<span class="number">5</span>,<span class="number">10</span>)</span><br><span class="line">c_prev = np.random.randn(<span class="number">5</span>,<span class="number">10</span>)</span><br><span class="line">Wf = np.random.randn(<span class="number">5</span>, <span class="number">5</span>+<span class="number">3</span>)</span><br><span class="line">bf = np.random.randn(<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line">Wi = np.random.randn(<span class="number">5</span>, <span class="number">5</span>+<span class="number">3</span>)</span><br><span class="line">bi = np.random.randn(<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line">Wo = np.random.randn(<span class="number">5</span>, <span class="number">5</span>+<span class="number">3</span>)</span><br><span class="line">bo = np.random.randn(<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line">Wc = np.random.randn(<span class="number">5</span>, <span class="number">5</span>+<span class="number">3</span>)</span><br><span class="line">bc = np.random.randn(<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line">Wy = np.random.randn(<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line">by = np.random.randn(<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">parameters = &#123;<span class="string">"Wf"</span>: Wf, <span class="string">"Wi"</span>: Wi, <span class="string">"Wo"</span>: Wo, <span class="string">"Wc"</span>: Wc, <span class="string">"Wy"</span>: Wy, <span class="string">"bf"</span>: bf, <span class="string">"bi"</span>: bi, <span class="string">"bo"</span>: bo, <span class="string">"bc"</span>: bc, <span class="string">"by"</span>: by&#125;</span><br><span class="line"></span><br><span class="line">a_next, c_next, yt, cache = lstm_cell_forward(xt, a_prev, c_prev, parameters)</span><br><span class="line">print(<span class="string">"a_next[4] = "</span>, a_next[<span class="number">4</span>])</span><br><span class="line">print(<span class="string">"a_next.shape = "</span>, c_next.shape)</span><br><span class="line">print(<span class="string">"c_next[2] = "</span>, c_next[<span class="number">2</span>])</span><br><span class="line">print(<span class="string">"c_next.shape = "</span>, c_next.shape)</span><br><span class="line">print(<span class="string">"yt[1] ="</span>, yt[<span class="number">1</span>])</span><br><span class="line">print(<span class="string">"yt.shape = "</span>, yt.shape)</span><br><span class="line">print(<span class="string">"cache[1][3] ="</span>, cache[<span class="number">1</span>][<span class="number">3</span>])</span><br><span class="line">print(<span class="string">"len(cache) = "</span>, len(cache))</span><br></pre></td></tr></table></figure><p>a_next[4] = [-0.66408471 0.0036921 0.02088357 0.22834167 -0.85575339 0.00138482 0.76566531 0.34631421 -0.00215674 0.43827275] a_next.shape = (5, 10) c_next[2] = [ 0.63267805 1.00570849 0.35504474 0.20690913 -1.64566718 0.11832942 0.76449811 -0.0981561 -0.74348425 -0.26810932] c_next.shape = (5, 10) yt[1] = [ 0.79913913 0.15986619 0.22412122 0.15606108 0.97057211 0.31146381 0.00943007 0.12666353 0.39380172 0.07828381] yt.shape = (2, 10) cache[1][3] = [-0.16263996 1.03729328 0.72938082 -0.54101719 0.02752074 -0.30821874 0.07651101 -1.03752894 1.41219977 -0.37647422] len(cache) = 10</p><p><strong>Expected Output</strong>:</p><table><tr><td><strong>a_next[4]</strong>:</td><td>[-0.66408471 0.0036921 0.02088357 0.22834167 -0.85575339 0.00138482 0.76566531 0.34631421 -0.00215674 0.43827275]</td></tr><tr><td><strong>a_next.shape</strong>:</td><td>(5, 10)</td></tr><tr><td><strong>c_next[2]</strong>:</td><td>[ 0.63267805 1.00570849 0.35504474 0.20690913 -1.64566718 0.11832942 0.76449811 -0.0981561 -0.74348425 -0.26810932]</td></tr><tr><td><strong>c_next.shape</strong>:</td><td>(5, 10)</td></tr><tr><td><strong>yt[1]</strong>:</td><td>[ 0.79913913 0.15986619 0.22412122 0.15606108 0.97057211 0.31146381 0.00943007 0.12666353 0.39380172 0.07828381]</td></tr><tr><td><strong>yt.shape</strong>:</td><td>(2, 10)</td></tr><tr><td><strong>cache[1][3]</strong>:</td><td>[-0.16263996 1.03729328 0.72938082 -0.54101719 0.02752074 -0.30821874 0.07651101 -1.03752894 1.41219977 -0.37647422]</td></tr><tr><td><strong>len(cache)</strong>:</td><td>10</td></tr></table><h3 id="forward-pass-for-lstm">2.2 - Forward pass for LSTM</h3><p>Now that you have implemented one step of an LSTM, you can now iterate this over this using a for-loop to process a sequence of <span class="math inline">\(T_x\)</span> inputs.</p><img src="images/LSTM_rnn.png" style="width:500;height:300px;"><caption><center><strong>Figure 4</strong>: LSTM over multiple time-steps.</center></caption><p><strong>Exercise:</strong> Implement <code>lstm_forward()</code> to run an LSTM over <span class="math inline">\(T_x\)</span> time-steps.</p><p><strong>Note</strong>: <span class="math inline">\(c^{\langle 0 \rangle}\)</span> is initialized with zeros.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: lstm_forward</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lstm_forward</span><span class="params">(x, a0, parameters)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Implement the forward propagation of the recurrent neural network using an LSTM-cell described in Figure (3).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    x -- Input data for every time-step, of shape (n_x, m, T_x).</span></span><br><span class="line"><span class="string">    a0 -- Initial hidden state, of shape (n_a, m)</span></span><br><span class="line"><span class="string">    parameters -- python dictionary containing:</span></span><br><span class="line"><span class="string">                        Wf -- Weight matrix of the forget gate, numpy array of shape (n_a, n_a + n_x)</span></span><br><span class="line"><span class="string">                        bf -- Bias of the forget gate, numpy array of shape (n_a, 1)</span></span><br><span class="line"><span class="string">                        Wi -- Weight matrix of the update gate, numpy array of shape (n_a, n_a + n_x)</span></span><br><span class="line"><span class="string">                        bi -- Bias of the update gate, numpy array of shape (n_a, 1)</span></span><br><span class="line"><span class="string">                        Wc -- Weight matrix of the first "tanh", numpy array of shape (n_a, n_a + n_x)</span></span><br><span class="line"><span class="string">                        bc -- Bias of the first "tanh", numpy array of shape (n_a, 1)</span></span><br><span class="line"><span class="string">                        Wo -- Weight matrix of the output gate, numpy array of shape (n_a, n_a + n_x)</span></span><br><span class="line"><span class="string">                        bo -- Bias of the output gate, numpy array of shape (n_a, 1)</span></span><br><span class="line"><span class="string">                        Wy -- Weight matrix relating the hidden-state to the output, numpy array of shape (n_y, n_a)</span></span><br><span class="line"><span class="string">                        by -- Bias relating the hidden-state to the output, numpy array of shape (n_y, 1)</span></span><br><span class="line"><span class="string">                        </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    a -- Hidden states for every time-step, numpy array of shape (n_a, m, T_x)</span></span><br><span class="line"><span class="string">    y -- Predictions for every time-step, numpy array of shape (n_y, m, T_x)</span></span><br><span class="line"><span class="string">    caches -- tuple of values needed for the backward pass, contains (list of all the caches, x)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Initialize "caches", which will track the list of all the caches</span></span><br><span class="line">    caches = []</span><br><span class="line">    </span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    <span class="comment"># Retrieve dimensions from shapes of x and parameters['Wy'] (‚âà2 lines)</span></span><br><span class="line">    n_x, m, T_x = x.shape</span><br><span class="line">    n_y, n_a = parameters[<span class="string">'Wy'</span>].shape</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># initialize "a", "c" and "y" with zeros (‚âà3 lines)</span></span><br><span class="line">    a = np.zeros((n_a, m, T_x))</span><br><span class="line">    c = np.zeros((n_a, m, T_x))</span><br><span class="line">    y = np.zeros((n_y, m, T_x))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Initialize a_next and c_next (‚âà2 lines)</span></span><br><span class="line">    a_next = a0</span><br><span class="line">    c_next = np.zeros(a0.shape)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># loop over all time-steps</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> range(T_x):</span><br><span class="line">        <span class="comment"># Update next hidden state, next memory state, compute the prediction, get the cache (‚âà1 line)</span></span><br><span class="line">        a_next, c_next, yt, cache = lstm_cell_forward(x[:,:,t], a_next, c_next, parameters)</span><br><span class="line">        <span class="comment"># Save the value of the new "next" hidden state in a (‚âà1 line)</span></span><br><span class="line">        a[:,:,t] = a_next</span><br><span class="line">        <span class="comment"># Save the value of the prediction in y (‚âà1 line)</span></span><br><span class="line">        y[:,:,t] = yt</span><br><span class="line">        <span class="comment"># Save the value of the next cell state (‚âà1 line)</span></span><br><span class="line">        c[:,:,t]  = c_next</span><br><span class="line">        <span class="comment"># Append the cache into caches (‚âà1 line)</span></span><br><span class="line">        caches.append(cache)</span><br><span class="line">        </span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># store values needed for backward propagation in cache</span></span><br><span class="line">    caches = (caches, x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a, y, c, caches</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(<span class="number">1</span>)</span><br><span class="line">x = np.random.randn(<span class="number">3</span>,<span class="number">10</span>,<span class="number">7</span>)</span><br><span class="line">a0 = np.random.randn(<span class="number">5</span>,<span class="number">10</span>)</span><br><span class="line">Wf = np.random.randn(<span class="number">5</span>, <span class="number">5</span>+<span class="number">3</span>)</span><br><span class="line">bf = np.random.randn(<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line">Wi = np.random.randn(<span class="number">5</span>, <span class="number">5</span>+<span class="number">3</span>)</span><br><span class="line">bi = np.random.randn(<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line">Wo = np.random.randn(<span class="number">5</span>, <span class="number">5</span>+<span class="number">3</span>)</span><br><span class="line">bo = np.random.randn(<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line">Wc = np.random.randn(<span class="number">5</span>, <span class="number">5</span>+<span class="number">3</span>)</span><br><span class="line">bc = np.random.randn(<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line">Wy = np.random.randn(<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line">by = np.random.randn(<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">parameters = &#123;<span class="string">"Wf"</span>: Wf, <span class="string">"Wi"</span>: Wi, <span class="string">"Wo"</span>: Wo, <span class="string">"Wc"</span>: Wc, <span class="string">"Wy"</span>: Wy, <span class="string">"bf"</span>: bf, <span class="string">"bi"</span>: bi, <span class="string">"bo"</span>: bo, <span class="string">"bc"</span>: bc, <span class="string">"by"</span>: by&#125;</span><br><span class="line"></span><br><span class="line">a, y, c, caches = lstm_forward(x, a0, parameters)</span><br><span class="line">print(<span class="string">"a[4][3][6] = "</span>, a[<span class="number">4</span>][<span class="number">3</span>][<span class="number">6</span>])</span><br><span class="line">print(<span class="string">"a.shape = "</span>, a.shape)</span><br><span class="line">print(<span class="string">"y[1][4][3] ="</span>, y[<span class="number">1</span>][<span class="number">4</span>][<span class="number">3</span>])</span><br><span class="line">print(<span class="string">"y.shape = "</span>, y.shape)</span><br><span class="line">print(<span class="string">"caches[1][1[1]] ="</span>, caches[<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>])</span><br><span class="line">print(<span class="string">"c[1][2][1]"</span>, c[<span class="number">1</span>][<span class="number">2</span>][<span class="number">1</span>])</span><br><span class="line">print(<span class="string">"len(caches) = "</span>, len(caches))</span><br></pre></td></tr></table></figure><p>a[4][3][6] = 0.172117767533 a.shape = (5, 10, 7) y[1][4][3] = 0.95087346185 y.shape = (2, 10, 7) caches[1][1[1]] = [ 0.82797464 0.23009474 0.76201118 -0.22232814 -0.20075807 0.18656139 0.41005165] c[1][2][1] -0.855544916718 len(caches) = 2</p><p><strong>Expected Output</strong>:</p><table><tr><td><strong>a[4][3][6]</strong> =</td><td>0.172117767533</td></tr><tr><td><strong>a.shape</strong> =</td><td>(5, 10, 7)</td></tr><tr><td><strong>y[1][4][3]</strong> =</td><td>0.95087346185</td></tr><tr><td><strong>y.shape</strong> =</td><td>(2, 10, 7)</td></tr><tr><td><strong>caches[1][1][1]</strong> =</td><td>[ 0.82797464 0.23009474 0.76201118 -0.22232814 -0.20075807 0.18656139 0.41005165]</td></tr><tr><td><strong>c[1][2][1]</strong> =</td><td>-0.855544916718</td></tr><tr><td><strong>len(caches)</strong> =</td><td>2</td></tr></table><p>Congratulations! You have now implemented the forward passes for the basic RNN and the LSTM. When using a deep learning framework, implementing the forward pass is sufficient to build systems that achieve great performance.</p><p>The rest of this notebook is optional, and will not be graded.</p><h2 id="backpropagation-in-recurrent-neural-networks-optional-ungraded">3 - Backpropagation in recurrent neural networks (OPTIONAL / UNGRADED)</h2><p>In modern deep learning frameworks, you only have to implement the forward pass, and the framework takes care of the backward pass, so most deep learning engineers do not need to bother with the details of the backward pass. If however you are an expert in calculus and want to see the details of backprop in RNNs, you can work through this optional portion of the notebook.</p><p>When in an earlier course you implemented a simple (fully connected) neural network, you used backpropagation to compute the derivatives with respect to the cost to update the parameters. Similarly, in recurrent neural networks you can to calculate the derivatives with respect to the cost in order to update the parameters. The backprop equations are quite complicated and we did not derive them in lecture. However, we will briefly present them below.</p><h3 id="basic-rnn-backward-pass">3.1 - Basic RNN backward pass</h3><p>We will start by computing the backward pass for the basic RNN-cell.</p><img src="images/rnn_cell_backprop.png" style="width:500;height:300px;"> <br><caption><center><strong>Figure 5</strong>: RNN-cell's backward pass. Just like in a fully-connected neural network, the derivative of the cost function <span class="math inline">\(J\)</span> backpropagates through the RNN by following the chain-rule from calculas. The chain-rule is also used to calculate <span class="math inline">\((\frac{\partial J}{\partial W_{ax}},\frac{\partial J}{\partial W_{aa}},\frac{\partial J}{\partial b})\)</span> to update the parameters <span class="math inline">\((W_{ax}, W_{aa}, b_a)\)</span>.</center></caption><h4 id="deriving-the-one-step-backward-functions">Deriving the one step backward functions:</h4><p>To compute the <code>rnn_cell_backward</code> you need to compute the following equations. It is a good exercise to derive them by hand.</p><p>The derivative of <span class="math inline">\(\tanh\)</span> is <span class="math inline">\(1-\tanh(x)^2\)</span>. You can find the complete proof <a href="https://www.wyzant.com/resources/lessons/math/calculus/derivative_proofs/tanx" target="_blank" rel="noopener">here</a>. Note that: $ (x)^2 = 1 - (x)^2$</p><p>Similarly for <span class="math inline">\(\frac{ \partial a^{\langle t \rangle} } {\partial W_{ax}}, \frac{ \partial a^{\langle t \rangle} } {\partial W_{aa}}, \frac{ \partial a^{\langle t \rangle} } {\partial b}\)</span>, the derivative of <span class="math inline">\(\tanh(u)\)</span> is <span class="math inline">\((1-\tanh(u)^2)du\)</span>.</p><p>The final two equations also follow same rule and are derived using the <span class="math inline">\(\tanh\)</span> derivative. Note that the arrangement is done in a way to get the same dimensions to match.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rnn_cell_backward</span><span class="params">(da_next, cache)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Implements the backward pass for the RNN-cell (single time-step).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    da_next -- Gradient of loss with respect to next hidden state</span></span><br><span class="line"><span class="string">    cache -- python dictionary containing useful values (output of rnn_cell_forward())</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    gradients -- python dictionary containing:</span></span><br><span class="line"><span class="string">                        dx -- Gradients of input data, of shape (n_x, m)</span></span><br><span class="line"><span class="string">                        da_prev -- Gradients of previous hidden state, of shape (n_a, m)</span></span><br><span class="line"><span class="string">                        dWax -- Gradients of input-to-hidden weights, of shape (n_a, n_x)</span></span><br><span class="line"><span class="string">                        dWaa -- Gradients of hidden-to-hidden weights, of shape (n_a, n_a)</span></span><br><span class="line"><span class="string">                        dba -- Gradients of bias vector, of shape (n_a, 1)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Retrieve values from cache</span></span><br><span class="line">    (a_next, a_prev, xt, parameters) = cache</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Retrieve values from parameters</span></span><br><span class="line">    Wax = parameters[<span class="string">"Wax"</span>]</span><br><span class="line">    Waa = parameters[<span class="string">"Waa"</span>]</span><br><span class="line">    Wya = parameters[<span class="string">"Wya"</span>]</span><br><span class="line">    ba = parameters[<span class="string">"ba"</span>]</span><br><span class="line">    by = parameters[<span class="string">"by"</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    <span class="comment"># compute the gradient of tanh with respect to a_next (‚âà1 line)</span></span><br><span class="line">    dtanh = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># compute the gradient of the loss with respect to Wax (‚âà2 lines)</span></span><br><span class="line">    dxt = <span class="keyword">None</span></span><br><span class="line">    dWax = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># compute the gradient with respect to Waa (‚âà2 lines)</span></span><br><span class="line">    da_prev = <span class="keyword">None</span></span><br><span class="line">    dWaa = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># compute the gradient with respect to b (‚âà1 line)</span></span><br><span class="line">    dba = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Store the gradients in a python dictionary</span></span><br><span class="line">    gradients = &#123;<span class="string">"dxt"</span>: dxt, <span class="string">"da_prev"</span>: da_prev, <span class="string">"dWax"</span>: dWax, <span class="string">"dWaa"</span>: dWaa, <span class="string">"dba"</span>: dba&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> gradients</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(<span class="number">1</span>)</span><br><span class="line">xt = np.random.randn(<span class="number">3</span>,<span class="number">10</span>)</span><br><span class="line">a_prev = np.random.randn(<span class="number">5</span>,<span class="number">10</span>)</span><br><span class="line">Wax = np.random.randn(<span class="number">5</span>,<span class="number">3</span>)</span><br><span class="line">Waa = np.random.randn(<span class="number">5</span>,<span class="number">5</span>)</span><br><span class="line">Wya = np.random.randn(<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line">b = np.random.randn(<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line">by = np.random.randn(<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">parameters = &#123;<span class="string">"Wax"</span>: Wax, <span class="string">"Waa"</span>: Waa, <span class="string">"Wya"</span>: Wya, <span class="string">"ba"</span>: ba, <span class="string">"by"</span>: by&#125;</span><br><span class="line"></span><br><span class="line">a_next, yt, cache = rnn_cell_forward(xt, a_prev, parameters)</span><br><span class="line"></span><br><span class="line">da_next = np.random.randn(<span class="number">5</span>,<span class="number">10</span>)</span><br><span class="line">gradients = rnn_cell_backward(da_next, cache)</span><br><span class="line">print(<span class="string">"gradients[\"dxt\"][1][2] ="</span>, gradients[<span class="string">"dxt"</span>][<span class="number">1</span>][<span class="number">2</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dxt\"].shape ="</span>, gradients[<span class="string">"dxt"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"da_prev\"][2][3] ="</span>, gradients[<span class="string">"da_prev"</span>][<span class="number">2</span>][<span class="number">3</span>])</span><br><span class="line">print(<span class="string">"gradients[\"da_prev\"].shape ="</span>, gradients[<span class="string">"da_prev"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dWax\"][3][1] ="</span>, gradients[<span class="string">"dWax"</span>][<span class="number">3</span>][<span class="number">1</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dWax\"].shape ="</span>, gradients[<span class="string">"dWax"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dWaa\"][1][2] ="</span>, gradients[<span class="string">"dWaa"</span>][<span class="number">1</span>][<span class="number">2</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dWaa\"].shape ="</span>, gradients[<span class="string">"dWaa"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dba\"][4] ="</span>, gradients[<span class="string">"dba"</span>][<span class="number">4</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dba\"].shape ="</span>, gradients[<span class="string">"dba"</span>].shape)</span><br></pre></td></tr></table></figure><p><strong>Expected Output</strong>:</p><table><tr><td><strong>gradients["dxt"][1][2]</strong> =</td><td>-0.460564103059</td></tr><tr><td><strong>gradients["dxt"].shape</strong> =</td><td>(3, 10)</td></tr><tr><td><strong>gradients["da_prev"][2][3]</strong> =</td><td>0.0842968653807</td></tr><tr><td><strong>gradients["da_prev"].shape</strong> =</td><td>(5, 10)</td></tr><tr><td><strong>gradients["dWax"][3][1]</strong> =</td><td>0.393081873922</td></tr><pre><code>&lt;tr&gt;    &lt;td&gt;        **gradients[&quot;dWax&quot;].shape** =    &lt;/td&gt;    &lt;td&gt;       (5, 3)    &lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;    &lt;td&gt;        **gradients[&quot;dWaa&quot;][1][2]** =     &lt;/td&gt;    &lt;td&gt;       -0.28483955787    &lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;    &lt;td&gt;        **gradients[&quot;dWaa&quot;].shape** =    &lt;/td&gt;    &lt;td&gt;       (5, 5)    &lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;    &lt;td&gt;        **gradients[&quot;dba&quot;][4]** =     &lt;/td&gt;    &lt;td&gt;       [ 0.80517166]    &lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;    &lt;td&gt;        **gradients[&quot;dba&quot;].shape** =     &lt;/td&gt;    &lt;td&gt;       (5, 1)    &lt;/td&gt;&lt;/tr&gt;</code></pre></table><h4 id="backward-pass-through-the-rnn">Backward pass through the RNN</h4><p>Computing the gradients of the cost with respect to <span class="math inline">\(a^{\langle t \rangle}\)</span> at every time-step <span class="math inline">\(t\)</span> is useful because it is what helps the gradient backpropagate to the previous RNN-cell. To do so, you need to iterate through all the time steps starting at the end, and at each step, you increment the overall <span class="math inline">\(db_a\)</span>, <span class="math inline">\(dW_{aa}\)</span>, <span class="math inline">\(dW_{ax}\)</span> and you store <span class="math inline">\(dx\)</span>.</p><p><strong>Instructions</strong>:</p><p>Implement the <code>rnn_backward</code> function. Initialize the return variables with zeros first and then loop through all the time steps while calling the <code>rnn_cell_backward</code> at each time timestep, update the other variables accordingly.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rnn_backward</span><span class="params">(da, caches)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Implement the backward pass for a RNN over an entire sequence of input data.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    da -- Upstream gradients of all hidden states, of shape (n_a, m, T_x)</span></span><br><span class="line"><span class="string">    caches -- tuple containing information from the forward pass (rnn_forward)</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    gradients -- python dictionary containing:</span></span><br><span class="line"><span class="string">                        dx -- Gradient w.r.t. the input data, numpy-array of shape (n_x, m, T_x)</span></span><br><span class="line"><span class="string">                        da0 -- Gradient w.r.t the initial hidden state, numpy-array of shape (n_a, m)</span></span><br><span class="line"><span class="string">                        dWax -- Gradient w.r.t the input's weight matrix, numpy-array of shape (n_a, n_x)</span></span><br><span class="line"><span class="string">                        dWaa -- Gradient w.r.t the hidden state's weight matrix, numpy-arrayof shape (n_a, n_a)</span></span><br><span class="line"><span class="string">                        dba -- Gradient w.r.t the bias, of shape (n_a, 1)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Retrieve values from the first cache (t=1) of caches (‚âà2 lines)</span></span><br><span class="line">    (caches, x) = <span class="keyword">None</span></span><br><span class="line">    (a1, a0, x1, parameters) = <span class="keyword">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Retrieve dimensions from da's and x1's shapes (‚âà2 lines)</span></span><br><span class="line">    n_a, m, T_x = <span class="keyword">None</span></span><br><span class="line">    n_x, m = <span class="keyword">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># initialize the gradients with the right sizes (‚âà6 lines)</span></span><br><span class="line">    dx = <span class="keyword">None</span></span><br><span class="line">    dWax = <span class="keyword">None</span></span><br><span class="line">    dWaa = <span class="keyword">None</span></span><br><span class="line">    dba = <span class="keyword">None</span></span><br><span class="line">    da0 = <span class="keyword">None</span></span><br><span class="line">    da_prevt = <span class="keyword">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Loop through all the time steps</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> reversed(range(<span class="keyword">None</span>)):</span><br><span class="line">        <span class="comment"># Compute gradients at time step t. Choose wisely the "da_next" and the "cache" to use in the backward propagation step. (‚âà1 line)</span></span><br><span class="line">        gradients = <span class="keyword">None</span></span><br><span class="line">        <span class="comment"># Retrieve derivatives from gradients (‚âà 1 line)</span></span><br><span class="line">        dxt, da_prevt, dWaxt, dWaat, dbat = gradients[<span class="string">"dxt"</span>], gradients[<span class="string">"da_prev"</span>], gradients[<span class="string">"dWax"</span>], gradients[<span class="string">"dWaa"</span>], gradients[<span class="string">"dba"</span>]</span><br><span class="line">        <span class="comment"># Increment global derivatives w.r.t parameters by adding their derivative at time-step t (‚âà4 lines)</span></span><br><span class="line">        dx[:, :, t] = <span class="keyword">None</span></span><br><span class="line">        dWax += <span class="keyword">None</span></span><br><span class="line">        dWaa += <span class="keyword">None</span></span><br><span class="line">        dba += <span class="keyword">None</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment"># Set da0 to the gradient of a which has been backpropagated through all time-steps (‚âà1 line) </span></span><br><span class="line">    da0 = <span class="keyword">None</span></span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Store the gradients in a python dictionary</span></span><br><span class="line">    gradients = &#123;<span class="string">"dx"</span>: dx, <span class="string">"da0"</span>: da0, <span class="string">"dWax"</span>: dWax, <span class="string">"dWaa"</span>: dWaa,<span class="string">"dba"</span>: dba&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> gradients</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(<span class="number">1</span>)</span><br><span class="line">x = np.random.randn(<span class="number">3</span>,<span class="number">10</span>,<span class="number">4</span>)</span><br><span class="line">a0 = np.random.randn(<span class="number">5</span>,<span class="number">10</span>)</span><br><span class="line">Wax = np.random.randn(<span class="number">5</span>,<span class="number">3</span>)</span><br><span class="line">Waa = np.random.randn(<span class="number">5</span>,<span class="number">5</span>)</span><br><span class="line">Wya = np.random.randn(<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line">ba = np.random.randn(<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line">by = np.random.randn(<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">parameters = &#123;<span class="string">"Wax"</span>: Wax, <span class="string">"Waa"</span>: Waa, <span class="string">"Wya"</span>: Wya, <span class="string">"ba"</span>: ba, <span class="string">"by"</span>: by&#125;</span><br><span class="line">a, y, caches = rnn_forward(x, a0, parameters)</span><br><span class="line">da = np.random.randn(<span class="number">5</span>, <span class="number">10</span>, <span class="number">4</span>)</span><br><span class="line">gradients = rnn_backward(da, caches)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"gradients[\"dx\"][1][2] ="</span>, gradients[<span class="string">"dx"</span>][<span class="number">1</span>][<span class="number">2</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dx\"].shape ="</span>, gradients[<span class="string">"dx"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"da0\"][2][3] ="</span>, gradients[<span class="string">"da0"</span>][<span class="number">2</span>][<span class="number">3</span>])</span><br><span class="line">print(<span class="string">"gradients[\"da0\"].shape ="</span>, gradients[<span class="string">"da0"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dWax\"][3][1] ="</span>, gradients[<span class="string">"dWax"</span>][<span class="number">3</span>][<span class="number">1</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dWax\"].shape ="</span>, gradients[<span class="string">"dWax"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dWaa\"][1][2] ="</span>, gradients[<span class="string">"dWaa"</span>][<span class="number">1</span>][<span class="number">2</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dWaa\"].shape ="</span>, gradients[<span class="string">"dWaa"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dba\"][4] ="</span>, gradients[<span class="string">"dba"</span>][<span class="number">4</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dba\"].shape ="</span>, gradients[<span class="string">"dba"</span>].shape)</span><br></pre></td></tr></table></figure><p><strong>Expected Output</strong>:</p><table><tr><td><strong>gradients["dx"][1][2]</strong> =</td><td>[-2.07101689 -0.59255627 0.02466855 0.01483317]</td></tr><tr><td><strong>gradients["dx"].shape</strong> =</td><td>(3, 10, 4)</td></tr><tr><td><strong>gradients["da0"][2][3]</strong> =</td><td>-0.314942375127</td></tr><tr><td><strong>gradients["da0"].shape</strong> =</td><td>(5, 10)</td></tr><tr><td><strong>gradients["dWax"][3][1]</strong> =</td><td>11.2641044965</td></tr><tr><td><strong>gradients["dWax"].shape</strong> =</td><td>(5, 3)</td></tr><tr><td><strong>gradients["dWaa"][1][2]</strong> =</td><td>2.30333312658</td></tr><tr><td><strong>gradients["dWaa"].shape</strong> =</td><td>(5, 5)</td></tr><tr><td><strong>gradients["dba"][4]</strong> =</td><td>[-0.74747722]</td></tr><tr><td><strong>gradients["dba"].shape</strong> =</td><td>(5, 1)</td></tr></table><h2 id="lstm-backward-pass">3.2 - LSTM backward pass</h2><h3 id="one-step-backward">3.2.1 One Step backward</h3><p>The LSTM backward pass is slighltly more complicated than the forward one. We have provided you with all the equations for the LSTM backward pass below. (If you enjoy calculus exercises feel free to try deriving these from scratch yourself.)</p><h3 id="gate-derivatives">3.2.2 gate derivatives</h3><p><span class="math display">\[d \Gamma_o^{\langle t \rangle} = da_{next}*\tanh(c_{next}) * \Gamma_o^{\langle t \rangle}*(1-\Gamma_o^{\langle t \rangle})\tag{7}\]</span></p><p><span class="math display">\[d\tilde c^{\langle t \rangle} = dc_{next}*\Gamma_u^{\langle t \rangle}+ \Gamma_o^{\langle t \rangle} (1-\tanh(c_{next})^2) * i_t * da_{next} * \tilde c^{\langle t \rangle} * (1-\tanh(\tilde c)^2) \tag{8}\]</span></p><p><span class="math display">\[d\Gamma_u^{\langle t \rangle} = dc_{next}*\tilde c^{\langle t \rangle} + \Gamma_o^{\langle t \rangle} (1-\tanh(c_{next})^2) * \tilde c^{\langle t \rangle} * da_{next}*\Gamma_u^{\langle t \rangle}*(1-\Gamma_u^{\langle t \rangle})\tag{9}\]</span></p><p><span class="math display">\[d\Gamma_f^{\langle t \rangle} = dc_{next}*\tilde c_{prev} + \Gamma_o^{\langle t \rangle} (1-\tanh(c_{next})^2) * c_{prev} * da_{next}*\Gamma_f^{\langle t \rangle}*(1-\Gamma_f^{\langle t \rangle})\tag{10}\]</span></p><h3 id="parameter-derivatives">3.2.3 parameter derivatives</h3><p><span class="math display">\[ dW_f = d\Gamma_f^{\langle t \rangle} * \begin{pmatrix} a_{prev} \\ x_t\end{pmatrix}^T \tag{11} \]</span> <span class="math display">\[ dW_u = d\Gamma_u^{\langle t \rangle} * \begin{pmatrix} a_{prev} \\ x_t\end{pmatrix}^T \tag{12} \]</span> <span class="math display">\[ dW_c = d\tilde c^{\langle t \rangle} * \begin{pmatrix} a_{prev} \\ x_t\end{pmatrix}^T \tag{13} \]</span> <span class="math display">\[ dW_o = d\Gamma_o^{\langle t \rangle} * \begin{pmatrix} a_{prev} \\ x_t\end{pmatrix}^T \tag{14}\]</span></p><p>To calculate <span class="math inline">\(db_f, db_u, db_c, db_o\)</span> you just need to sum across the horizontal (axis= 1) axis on <span class="math inline">\(d\Gamma_f^{\langle t \rangle}, d\Gamma_u^{\langle t \rangle}, d\tilde c^{\langle t \rangle}, d\Gamma_o^{\langle t \rangle}\)</span> respectively. Note that you should have the <code>keep_dims = True</code> option.</p><p>Finally, you will compute the derivative with respect to the previous hidden state, previous memory state, and input.</p><p><span class="math display">\[ da_{prev} = W_f^T*d\Gamma_f^{\langle t \rangle} + W_u^T * d\Gamma_u^{\langle t \rangle}+ W_c^T * d\tilde c^{\langle t \rangle} + W_o^T * d\Gamma_o^{\langle t \rangle} \tag{15}\]</span> Here, the weights for equations 13 are the first n_a, (i.e. <span class="math inline">\(W_f = W_f[:n_a,:]\)</span> etc...)</p><p><span class="math display">\[ dc_{prev} = dc_{next}\Gamma_f^{\langle t \rangle} + \Gamma_o^{\langle t \rangle} * (1- \tanh(c_{next})^2)*\Gamma_f^{\langle t \rangle}*da_{next} \tag{16}\]</span> <span class="math display">\[ dx^{\langle t \rangle} = W_f^T*d\Gamma_f^{\langle t \rangle} + W_u^T * d\Gamma_u^{\langle t \rangle}+ W_c^T * d\tilde c_t + W_o^T * d\Gamma_o^{\langle t \rangle}\tag{17} \]</span> where the weights for equation 15 are from n_a to the end, (i.e. <span class="math inline">\(W_f = W_f[n_a:,:]\)</span> etc...)</p><p><strong>Exercise:</strong> Implement <code>lstm_cell_backward</code> by implementing equations <span class="math inline">\(7-17\)</span> below. Good luck! :)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lstm_cell_backward</span><span class="params">(da_next, dc_next, cache)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Implement the backward pass for the LSTM-cell (single time-step).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    da_next -- Gradients of next hidden state, of shape (n_a, m)</span></span><br><span class="line"><span class="string">    dc_next -- Gradients of next cell state, of shape (n_a, m)</span></span><br><span class="line"><span class="string">    cache -- cache storing information from the forward pass</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    gradients -- python dictionary containing:</span></span><br><span class="line"><span class="string">                        dxt -- Gradient of input data at time-step t, of shape (n_x, m)</span></span><br><span class="line"><span class="string">                        da_prev -- Gradient w.r.t. the previous hidden state, numpy array of shape (n_a, m)</span></span><br><span class="line"><span class="string">                        dc_prev -- Gradient w.r.t. the previous memory state, of shape (n_a, m, T_x)</span></span><br><span class="line"><span class="string">                        dWf -- Gradient w.r.t. the weight matrix of the forget gate, numpy array of shape (n_a, n_a + n_x)</span></span><br><span class="line"><span class="string">                        dWi -- Gradient w.r.t. the weight matrix of the update gate, numpy array of shape (n_a, n_a + n_x)</span></span><br><span class="line"><span class="string">                        dWc -- Gradient w.r.t. the weight matrix of the memory gate, numpy array of shape (n_a, n_a + n_x)</span></span><br><span class="line"><span class="string">                        dWo -- Gradient w.r.t. the weight matrix of the output gate, numpy array of shape (n_a, n_a + n_x)</span></span><br><span class="line"><span class="string">                        dbf -- Gradient w.r.t. biases of the forget gate, of shape (n_a, 1)</span></span><br><span class="line"><span class="string">                        dbi -- Gradient w.r.t. biases of the update gate, of shape (n_a, 1)</span></span><br><span class="line"><span class="string">                        dbc -- Gradient w.r.t. biases of the memory gate, of shape (n_a, 1)</span></span><br><span class="line"><span class="string">                        dbo -- Gradient w.r.t. biases of the output gate, of shape (n_a, 1)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Retrieve information from "cache"</span></span><br><span class="line">    (a_next, c_next, a_prev, c_prev, ft, it, cct, ot, xt, parameters) = cache</span><br><span class="line">    </span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    <span class="comment"># Retrieve dimensions from xt's and a_next's shape (‚âà2 lines)</span></span><br><span class="line">    n_x, m = <span class="keyword">None</span></span><br><span class="line">    n_a, m = <span class="keyword">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Compute gates related derivatives, you can find their values can be found by looking carefully at equations (7) to (10) (‚âà4 lines)</span></span><br><span class="line">    dot = <span class="keyword">None</span></span><br><span class="line">    dcct = <span class="keyword">None</span></span><br><span class="line">    dit = <span class="keyword">None</span></span><br><span class="line">    dft = <span class="keyword">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Code equations (7) to (10) (‚âà4 lines)</span></span><br><span class="line">    dit = <span class="keyword">None</span></span><br><span class="line">    dft = <span class="keyword">None</span></span><br><span class="line">    dot = <span class="keyword">None</span></span><br><span class="line">    dcct = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Compute parameters related derivatives. Use equations (11)-(14) (‚âà8 lines)</span></span><br><span class="line">    dWf = <span class="keyword">None</span></span><br><span class="line">    dWi = <span class="keyword">None</span></span><br><span class="line">    dWc = <span class="keyword">None</span></span><br><span class="line">    dWo = <span class="keyword">None</span></span><br><span class="line">    dbf = <span class="keyword">None</span></span><br><span class="line">    dbi = <span class="keyword">None</span></span><br><span class="line">    dbc = <span class="keyword">None</span></span><br><span class="line">    dbo = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Compute derivatives w.r.t previous hidden state, previous memory state and input. Use equations (15)-(17). (‚âà3 lines)</span></span><br><span class="line">    da_prev = <span class="keyword">None</span></span><br><span class="line">    dc_prev = <span class="keyword">None</span></span><br><span class="line">    dxt = <span class="keyword">None</span></span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Save gradients in dictionary</span></span><br><span class="line">    gradients = &#123;<span class="string">"dxt"</span>: dxt, <span class="string">"da_prev"</span>: da_prev, <span class="string">"dc_prev"</span>: dc_prev, <span class="string">"dWf"</span>: dWf,<span class="string">"dbf"</span>: dbf, <span class="string">"dWi"</span>: dWi,<span class="string">"dbi"</span>: dbi,</span><br><span class="line">                <span class="string">"dWc"</span>: dWc,<span class="string">"dbc"</span>: dbc, <span class="string">"dWo"</span>: dWo,<span class="string">"dbo"</span>: dbo&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> gradients</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(<span class="number">1</span>)</span><br><span class="line">xt = np.random.randn(<span class="number">3</span>,<span class="number">10</span>)</span><br><span class="line">a_prev = np.random.randn(<span class="number">5</span>,<span class="number">10</span>)</span><br><span class="line">c_prev = np.random.randn(<span class="number">5</span>,<span class="number">10</span>)</span><br><span class="line">Wf = np.random.randn(<span class="number">5</span>, <span class="number">5</span>+<span class="number">3</span>)</span><br><span class="line">bf = np.random.randn(<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line">Wi = np.random.randn(<span class="number">5</span>, <span class="number">5</span>+<span class="number">3</span>)</span><br><span class="line">bi = np.random.randn(<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line">Wo = np.random.randn(<span class="number">5</span>, <span class="number">5</span>+<span class="number">3</span>)</span><br><span class="line">bo = np.random.randn(<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line">Wc = np.random.randn(<span class="number">5</span>, <span class="number">5</span>+<span class="number">3</span>)</span><br><span class="line">bc = np.random.randn(<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line">Wy = np.random.randn(<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line">by = np.random.randn(<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">parameters = &#123;<span class="string">"Wf"</span>: Wf, <span class="string">"Wi"</span>: Wi, <span class="string">"Wo"</span>: Wo, <span class="string">"Wc"</span>: Wc, <span class="string">"Wy"</span>: Wy, <span class="string">"bf"</span>: bf, <span class="string">"bi"</span>: bi, <span class="string">"bo"</span>: bo, <span class="string">"bc"</span>: bc, <span class="string">"by"</span>: by&#125;</span><br><span class="line"></span><br><span class="line">a_next, c_next, yt, cache = lstm_cell_forward(xt, a_prev, c_prev, parameters)</span><br><span class="line"></span><br><span class="line">da_next = np.random.randn(<span class="number">5</span>,<span class="number">10</span>)</span><br><span class="line">dc_next = np.random.randn(<span class="number">5</span>,<span class="number">10</span>)</span><br><span class="line">gradients = lstm_cell_backward(da_next, dc_next, cache)</span><br><span class="line">print(<span class="string">"gradients[\"dxt\"][1][2] ="</span>, gradients[<span class="string">"dxt"</span>][<span class="number">1</span>][<span class="number">2</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dxt\"].shape ="</span>, gradients[<span class="string">"dxt"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"da_prev\"][2][3] ="</span>, gradients[<span class="string">"da_prev"</span>][<span class="number">2</span>][<span class="number">3</span>])</span><br><span class="line">print(<span class="string">"gradients[\"da_prev\"].shape ="</span>, gradients[<span class="string">"da_prev"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dc_prev\"][2][3] ="</span>, gradients[<span class="string">"dc_prev"</span>][<span class="number">2</span>][<span class="number">3</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dc_prev\"].shape ="</span>, gradients[<span class="string">"dc_prev"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dWf\"][3][1] ="</span>, gradients[<span class="string">"dWf"</span>][<span class="number">3</span>][<span class="number">1</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dWf\"].shape ="</span>, gradients[<span class="string">"dWf"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dWi\"][1][2] ="</span>, gradients[<span class="string">"dWi"</span>][<span class="number">1</span>][<span class="number">2</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dWi\"].shape ="</span>, gradients[<span class="string">"dWi"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dWc\"][3][1] ="</span>, gradients[<span class="string">"dWc"</span>][<span class="number">3</span>][<span class="number">1</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dWc\"].shape ="</span>, gradients[<span class="string">"dWc"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dWo\"][1][2] ="</span>, gradients[<span class="string">"dWo"</span>][<span class="number">1</span>][<span class="number">2</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dWo\"].shape ="</span>, gradients[<span class="string">"dWo"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dbf\"][4] ="</span>, gradients[<span class="string">"dbf"</span>][<span class="number">4</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dbf\"].shape ="</span>, gradients[<span class="string">"dbf"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dbi\"][4] ="</span>, gradients[<span class="string">"dbi"</span>][<span class="number">4</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dbi\"].shape ="</span>, gradients[<span class="string">"dbi"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dbc\"][4] ="</span>, gradients[<span class="string">"dbc"</span>][<span class="number">4</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dbc\"].shape ="</span>, gradients[<span class="string">"dbc"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dbo\"][4] ="</span>, gradients[<span class="string">"dbo"</span>][<span class="number">4</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dbo\"].shape ="</span>, gradients[<span class="string">"dbo"</span>].shape)</span><br></pre></td></tr></table></figure><p><strong>Expected Output</strong>:</p><table><tr><td><strong>gradients["dxt"][1][2]</strong> =</td><td>3.23055911511</td></tr><tr><td><strong>gradients["dxt"].shape</strong> =</td><td>(3, 10)</td></tr><tr><td><strong>gradients["da_prev"][2][3]</strong> =</td><td>-0.0639621419711</td></tr><tr><td><strong>gradients["da_prev"].shape</strong> =</td><td>(5, 10)</td></tr><tr><td><strong>gradients["dc_prev"][2][3]</strong> =</td><td>0.797522038797</td></tr><tr><td><strong>gradients["dc_prev"].shape</strong> =</td><td>(5, 10)</td></tr><tr><td><strong>gradients["dWf"][3][1]</strong> =</td><td>-0.147954838164</td></tr><tr><td><strong>gradients["dWf"].shape</strong> =</td><td>(5, 8)</td></tr><tr><td><strong>gradients["dWi"][1][2]</strong> =</td><td>1.05749805523</td></tr><tr><td><strong>gradients["dWi"].shape</strong> =</td><td>(5, 8)</td></tr><tr><td><strong>gradients["dWc"][3][1]</strong> =</td><td>2.30456216369</td></tr><tr><td><strong>gradients["dWc"].shape</strong> =</td><td>(5, 8)</td></tr><tr><td><strong>gradients["dWo"][1][2]</strong> =</td><td>0.331311595289</td></tr><tr><td><strong>gradients["dWo"].shape</strong> =</td><td>(5, 8)</td></tr><tr><td><strong>gradients["dbf"][4]</strong> =</td><td>[ 0.18864637]</td></tr><tr><td><strong>gradients["dbf"].shape</strong> =</td><td>(5, 1)</td></tr><tr><td><strong>gradients["dbi"][4]</strong> =</td><td>[-0.40142491]</td></tr><tr><td><strong>gradients["dbi"].shape</strong> =</td><td>(5, 1)</td></tr><tr><td><strong>gradients["dbc"][4]</strong> =</td><td>[ 0.25587763]</td></tr><tr><td><strong>gradients["dbc"].shape</strong> =</td><td>(5, 1)</td></tr><tr><td><strong>gradients["dbo"][4]</strong> =</td><td>[ 0.13893342]</td></tr><tr><td><strong>gradients["dbo"].shape</strong> =</td><td>(5, 1)</td></tr></table><h3 id="backward-pass-through-the-lstm-rnn">3.3 Backward pass through the LSTM RNN</h3><p>This part is very similar to the <code>rnn_backward</code> function you implemented above. You will first create variables of the same dimension as your return variables. You will then iterate over all the time steps starting from the end and call the one step function you implemented for LSTM at each iteration. You will then update the parameters by summing them individually. Finally return a dictionary with the new gradients.</p><p><strong>Instructions</strong>: Implement the <code>lstm_backward</code> function. Create a for loop starting from <span class="math inline">\(T_x\)</span> and going backward. For each step call <code>lstm_cell_backward</code> and update the your old gradients by adding the new gradients to them. Note that <code>dxt</code> is not updated but is stored.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lstm_backward</span><span class="params">(da, caches)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Implement the backward pass for the RNN with LSTM-cell (over a whole sequence).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    da -- Gradients w.r.t the hidden states, numpy-array of shape (n_a, m, T_x)</span></span><br><span class="line"><span class="string">    dc -- Gradients w.r.t the memory states, numpy-array of shape (n_a, m, T_x)</span></span><br><span class="line"><span class="string">    caches -- cache storing information from the forward pass (lstm_forward)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    gradients -- python dictionary containing:</span></span><br><span class="line"><span class="string">                        dx -- Gradient of inputs, of shape (n_x, m, T_x)</span></span><br><span class="line"><span class="string">                        da0 -- Gradient w.r.t. the previous hidden state, numpy array of shape (n_a, m)</span></span><br><span class="line"><span class="string">                        dWf -- Gradient w.r.t. the weight matrix of the forget gate, numpy array of shape (n_a, n_a + n_x)</span></span><br><span class="line"><span class="string">                        dWi -- Gradient w.r.t. the weight matrix of the update gate, numpy array of shape (n_a, n_a + n_x)</span></span><br><span class="line"><span class="string">                        dWc -- Gradient w.r.t. the weight matrix of the memory gate, numpy array of shape (n_a, n_a + n_x)</span></span><br><span class="line"><span class="string">                        dWo -- Gradient w.r.t. the weight matrix of the save gate, numpy array of shape (n_a, n_a + n_x)</span></span><br><span class="line"><span class="string">                        dbf -- Gradient w.r.t. biases of the forget gate, of shape (n_a, 1)</span></span><br><span class="line"><span class="string">                        dbi -- Gradient w.r.t. biases of the update gate, of shape (n_a, 1)</span></span><br><span class="line"><span class="string">                        dbc -- Gradient w.r.t. biases of the memory gate, of shape (n_a, 1)</span></span><br><span class="line"><span class="string">                        dbo -- Gradient w.r.t. biases of the save gate, of shape (n_a, 1)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Retrieve values from the first cache (t=1) of caches.</span></span><br><span class="line">    (caches, x) = caches</span><br><span class="line">    (a1, c1, a0, c0, f1, i1, cc1, o1, x1, parameters) = caches[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    <span class="comment"># Retrieve dimensions from da's and x1's shapes (‚âà2 lines)</span></span><br><span class="line">    n_a, m, T_x = <span class="keyword">None</span></span><br><span class="line">    n_x, m = <span class="keyword">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># initialize the gradients with the right sizes (‚âà12 lines)</span></span><br><span class="line">    dx = <span class="keyword">None</span></span><br><span class="line">    da0 = <span class="keyword">None</span></span><br><span class="line">    da_prevt = <span class="keyword">None</span></span><br><span class="line">    dc_prevt = <span class="keyword">None</span></span><br><span class="line">    dWf = <span class="keyword">None</span></span><br><span class="line">    dWi = <span class="keyword">None</span></span><br><span class="line">    dWc = <span class="keyword">None</span></span><br><span class="line">    dWo = <span class="keyword">None</span></span><br><span class="line">    dbf = <span class="keyword">None</span></span><br><span class="line">    dbi = <span class="keyword">None</span></span><br><span class="line">    dbc = <span class="keyword">None</span></span><br><span class="line">    dbo = <span class="keyword">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># loop back over the whole sequence</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> reversed(range(<span class="keyword">None</span>)):</span><br><span class="line">        <span class="comment"># Compute all gradients using lstm_cell_backward</span></span><br><span class="line">        gradients = <span class="keyword">None</span></span><br><span class="line">        <span class="comment"># Store or add the gradient to the parameters' previous step's gradient</span></span><br><span class="line">        dx[:,:,t] = <span class="keyword">None</span></span><br><span class="line">        dWf = <span class="keyword">None</span></span><br><span class="line">        dWi = <span class="keyword">None</span></span><br><span class="line">        dWc = <span class="keyword">None</span></span><br><span class="line">        dWo = <span class="keyword">None</span></span><br><span class="line">        dbf = <span class="keyword">None</span></span><br><span class="line">        dbi = <span class="keyword">None</span></span><br><span class="line">        dbc = <span class="keyword">None</span></span><br><span class="line">        dbo = <span class="keyword">None</span></span><br><span class="line">    <span class="comment"># Set the first activation's gradient to the backpropagated gradient da_prev.</span></span><br><span class="line">    da0 = <span class="keyword">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Store the gradients in a python dictionary</span></span><br><span class="line">    gradients = &#123;<span class="string">"dx"</span>: dx, <span class="string">"da0"</span>: da0, <span class="string">"dWf"</span>: dWf,<span class="string">"dbf"</span>: dbf, <span class="string">"dWi"</span>: dWi,<span class="string">"dbi"</span>: dbi,</span><br><span class="line">                <span class="string">"dWc"</span>: dWc,<span class="string">"dbc"</span>: dbc, <span class="string">"dWo"</span>: dWo,<span class="string">"dbo"</span>: dbo&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> gradients</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(<span class="number">1</span>)</span><br><span class="line">x = np.random.randn(<span class="number">3</span>,<span class="number">10</span>,<span class="number">7</span>)</span><br><span class="line">a0 = np.random.randn(<span class="number">5</span>,<span class="number">10</span>)</span><br><span class="line">Wf = np.random.randn(<span class="number">5</span>, <span class="number">5</span>+<span class="number">3</span>)</span><br><span class="line">bf = np.random.randn(<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line">Wi = np.random.randn(<span class="number">5</span>, <span class="number">5</span>+<span class="number">3</span>)</span><br><span class="line">bi = np.random.randn(<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line">Wo = np.random.randn(<span class="number">5</span>, <span class="number">5</span>+<span class="number">3</span>)</span><br><span class="line">bo = np.random.randn(<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line">Wc = np.random.randn(<span class="number">5</span>, <span class="number">5</span>+<span class="number">3</span>)</span><br><span class="line">bc = np.random.randn(<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">parameters = &#123;<span class="string">"Wf"</span>: Wf, <span class="string">"Wi"</span>: Wi, <span class="string">"Wo"</span>: Wo, <span class="string">"Wc"</span>: Wc, <span class="string">"Wy"</span>: Wy, <span class="string">"bf"</span>: bf, <span class="string">"bi"</span>: bi, <span class="string">"bo"</span>: bo, <span class="string">"bc"</span>: bc, <span class="string">"by"</span>: by&#125;</span><br><span class="line"></span><br><span class="line">a, y, c, caches = lstm_forward(x, a0, parameters)</span><br><span class="line"></span><br><span class="line">da = np.random.randn(<span class="number">5</span>, <span class="number">10</span>, <span class="number">4</span>)</span><br><span class="line">gradients = lstm_backward(da, caches)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"gradients[\"dx\"][1][2] ="</span>, gradients[<span class="string">"dx"</span>][<span class="number">1</span>][<span class="number">2</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dx\"].shape ="</span>, gradients[<span class="string">"dx"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"da0\"][2][3] ="</span>, gradients[<span class="string">"da0"</span>][<span class="number">2</span>][<span class="number">3</span>])</span><br><span class="line">print(<span class="string">"gradients[\"da0\"].shape ="</span>, gradients[<span class="string">"da0"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dWf\"][3][1] ="</span>, gradients[<span class="string">"dWf"</span>][<span class="number">3</span>][<span class="number">1</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dWf\"].shape ="</span>, gradients[<span class="string">"dWf"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dWi\"][1][2] ="</span>, gradients[<span class="string">"dWi"</span>][<span class="number">1</span>][<span class="number">2</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dWi\"].shape ="</span>, gradients[<span class="string">"dWi"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dWc\"][3][1] ="</span>, gradients[<span class="string">"dWc"</span>][<span class="number">3</span>][<span class="number">1</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dWc\"].shape ="</span>, gradients[<span class="string">"dWc"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dWo\"][1][2] ="</span>, gradients[<span class="string">"dWo"</span>][<span class="number">1</span>][<span class="number">2</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dWo\"].shape ="</span>, gradients[<span class="string">"dWo"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dbf\"][4] ="</span>, gradients[<span class="string">"dbf"</span>][<span class="number">4</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dbf\"].shape ="</span>, gradients[<span class="string">"dbf"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dbi\"][4] ="</span>, gradients[<span class="string">"dbi"</span>][<span class="number">4</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dbi\"].shape ="</span>, gradients[<span class="string">"dbi"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dbc\"][4] ="</span>, gradients[<span class="string">"dbc"</span>][<span class="number">4</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dbc\"].shape ="</span>, gradients[<span class="string">"dbc"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dbo\"][4] ="</span>, gradients[<span class="string">"dbo"</span>][<span class="number">4</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dbo\"].shape ="</span>, gradients[<span class="string">"dbo"</span>].shape)</span><br></pre></td></tr></table></figure><p><strong>Expected Output</strong>:</p><table><tr><td><strong>gradients["dx"][1][2]</strong> =</td><td>[-0.00173313 0.08287442 -0.30545663 -0.43281115]</td></tr><tr><td><strong>gradients["dx"].shape</strong> =</td><td>(3, 10, 4)</td></tr><tr><td><strong>gradients["da0"][2][3]</strong> =</td><td>-0.095911501954</td></tr><tr><td><strong>gradients["da0"].shape</strong> =</td><td>(5, 10)</td></tr><tr><td><strong>gradients["dWf"][3][1]</strong> =</td><td>-0.0698198561274</td></tr><tr><td><strong>gradients["dWf"].shape</strong> =</td><td>(5, 8)</td></tr><tr><td><strong>gradients["dWi"][1][2]</strong> =</td><td>0.102371820249</td></tr><tr><td><strong>gradients["dWi"].shape</strong> =</td><td>(5, 8)</td></tr><tr><td><strong>gradients["dWc"][3][1]</strong> =</td><td>-0.0624983794927</td></tr><tr><td><strong>gradients["dWc"].shape</strong> =</td><td>(5, 8)</td></tr><tr><td><strong>gradients["dWo"][1][2]</strong> =</td><td>0.0484389131444</td></tr><tr><td><strong>gradients["dWo"].shape</strong> =</td><td>(5, 8)</td></tr><tr><td><strong>gradients["dbf"][4]</strong> =</td><td>[-0.0565788]</td></tr><tr><td><strong>gradients["dbf"].shape</strong> =</td><td>(5, 1)</td></tr><tr><td><strong>gradients["dbi"][4]</strong> =</td><td>[-0.06997391]</td></tr><tr><td><strong>gradients["dbi"].shape</strong> =</td><td>(5, 1)</td></tr><tr><td><strong>gradients["dbc"][4]</strong> =</td><td>[-0.27441821]</td></tr><tr><td><strong>gradients["dbc"].shape</strong> =</td><td>(5, 1)</td></tr><tr><td><strong>gradients["dbo"][4]</strong> =</td><td>[ 0.16532821]</td></tr><tr><td><strong>gradients["dbo"].shape</strong> =</td><td>(5, 1)</td></tr></table><h3 id="congratulations">Congratulations !</h3><p>Congratulations on completing this assignment. You now understand how recurrent neural networks work!</p><p>Lets go on to the next exercise, where you'll use an RNN to build a character-level language model.</p>]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sequence Models </tag>
            
            <tag> Homework of Online Coueses </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Convolutional Neural Networks</title>
      <link href="/Convolutional-Neural-Networks/2019/03/27/"/>
      <url>/Convolutional-Neural-Networks/2019/03/27/</url>
      
        <content type="html"><![CDATA[<p><strong>Reference from lecture slides of Andrew Ng and github repo from <a href="https://github.com/mbadry1/DeepLearning.ai-Summary" target="_blank" rel="noopener">DeepLearning.ai-Summary</a></strong></p><h1 id="convolutional-neural-networks">Convolutional Neural Networks</h1><p>This is the forth course of the deep learning specialization at <a href="https://www.coursera.org/specializations/deep-learning" target="_blank" rel="noopener">Coursera</a> which is moderated by <a href="http://deeplearning.ai/" target="_blank" rel="noopener">DeepLearning.ai</a>. The course is taught by Andrew Ng.</p><h2 id="table-of-contents">Table of contents</h2><ul><li><a href="#convolutional-neural-networks">Convolutional Neural Networks</a><ul><li><a href="#table-of-contents">Table of contents</a></li><li><a href="#course-summary">Course summary</a></li><li><a href="#foundations-of-cnns">Foundations of CNNs</a><ul><li><a href="#computer-vision">Computer vision</a></li><li><a href="#edge-detection-example">Edge detection example</a></li><li><a href="#padding">Padding</a></li><li><a href="#strided-convolution">Strided convolution</a></li><li><a href="#convolutions-over-volumes">Convolutions over volumes</a></li><li><a href="#one-layer-of-a-convolutional-network">One Layer of a Convolutional Network</a></li><li><a href="#a-simple-convolution-network-example">A simple convolution network example</a></li><li><a href="#pooling-layers">Pooling layers</a></li><li><a href="#convolutional-neural-network-example">Convolutional neural network example</a></li><li><a href="#why-convolutions">Why convolutions?</a></li></ul></li><li><a href="#deep-convolutional-models-case-studies">Deep convolutional models: case studies</a><ul><li><a href="#why-look-at-case-studies">Why look at case studies?</a></li><li><a href="#classic-networks">Classic networks</a></li><li><a href="#residual-networks-resnets">Residual Networks (ResNets)</a></li><li><a href="#why-resnets-work">Why ResNets work</a></li><li><a href="#network-in-network-and-1-X-1-convolutions">Network in Network and 1√ó1 convolutions</a></li><li><a href="#inception-network-motivation">Inception network motivation</a></li><li><a href="#inception-network-googlenet">Inception network (GoogleNet)</a></li><li><a href="#using-open-source-implementation">Using Open-Source Implementation</a></li><li><a href="#transfer-learning">Transfer Learning</a></li><li><a href="#data-augmentation">Data Augmentation</a></li><li><a href="#state-of-computer-vision">State of Computer Vision</a></li></ul></li><li><a href="#object-detection">Object detection</a><ul><li><a href="#object-localization">Object Localization</a></li><li><a href="#landmark-detection">Landmark Detection</a></li><li><a href="#object-detection-1">Object Detection</a></li><li><a href="#convolutional-implementation-of-sliding-windows">Convolutional Implementation of Sliding Windows</a></li><li><a href="#bounding-box-predictions">Bounding Box Predictions</a></li><li><a href="#intersection-over-union">Intersection Over Union</a></li><li><a href="#non-max-suppression">Non-max Suppression</a></li><li><a href="#anchor-boxes">Anchor Boxes</a></li><li><a href="#yolo-algorithm">YOLO Algorithm</a></li><li><a href="#region-proposals-r-cnn">Region Proposals (R-CNN)</a></li></ul></li><li><a href="#special-applications-face-recognition--neural-style-transfer">Special applications: Face recognition &amp; Neural style transfer</a><ul><li><a href="#face-recognition">Face Recognition</a><ul><li><a href="#what-is-face-recognition">What is face recognition?</a></li><li><a href="#one-shot-learning">One Shot Learning</a></li><li><a href="#siamese-network">Siamese Network</a></li><li><a href="#triplet-loss">Triplet Loss</a></li><li><a href="#face-verification-and-binary-classification">Face Verification and Binary Classification</a></li></ul></li><li><a href="#neural-style-transfer">Neural Style Transfer</a><ul><li><a href="#what-is-neural-style-transfer">What is neural style transfer?</a></li><li><a href="#what-are-deep-convnets-learning">What are deep ConvNets learning?</a></li><li><a href="#cost-function">Cost Function</a></li><li><a href="#content-cost-function">Content Cost Function</a></li><li><a href="#style-cost-function">Style Cost Function</a></li><li><a href="#1d-and-3d-generalizations">1D and 3D Generalizations</a></li></ul></li></ul></li><li><a href="#extras">Extras</a><ul><li><a href="#keras">Keras</a></li></ul></li></ul></li></ul><h2 id="course-summary">Course summary</h2><p>Here is the course summary as given on the course <a href="https://www.coursera.org/learn/convolutional-neural-networks" target="_blank" rel="noopener">link</a>:</p><blockquote><p>This course will teach you how to build convolutional neural networks and apply it to image data. Thanks to deep learning, computer vision is working far better than just two years ago, and this is enabling numerous exciting applications ranging from safe autonomous driving, to accurate face recognition, to automatic reading of radiology images.</p><p>You will: - Understand how to build a convolutional neural network, including recent variations such as residual networks. - Know how to apply convolutional networks to visual detection and recognition tasks. - Know to use neural style transfer to generate art. - Be able to apply these algorithms to a variety of image, video, and other 2D or 3D data.</p><p>This is the fourth course of the Deep Learning Specialization.</p></blockquote><h2 id="foundations-of-cnns">Foundations of CNNs</h2><blockquote><p>Learn to implement the foundational layers of CNNs (pooling, convolutions) and to stack them properly in a deep network to solve multi-class image classification problems.</p></blockquote><h3 id="computer-vision">Computer vision</h3><ul><li>Computer vision is one of the applications that are rapidly active thanks to deep learning.</li><li>Some of the applications of computer vision that are using deep learning includes:<ul><li>Self driving cars.</li><li>Face recognition.</li></ul></li><li>Deep learning is also enabling new types of art to be created.</li><li>Rapid changes to computer vision are making new applications that weren't possible a few years ago.</li><li>Computer vision deep leaning techniques are always evolving making a new architectures which can help us in other areas other than computer vision.<ul><li>For example, Andrew Ng took some ideas of computer vision and applied it in speech recognition.</li></ul></li><li>Examples of a computer vision problems includes:<ul><li>Image classification.</li><li>Object detection.<ul><li>Detect object and localize them.</li></ul></li><li>Neural style transfer<ul><li>Changes the style of an image using another image.</li></ul></li></ul></li><li>One of the challenges of computer vision problem that images can be so large and we want a fast and accurate algorithm to work with that.<ul><li>For example, a <code>1000x1000</code> image will represent 3 million feature/input to the full connected neural network. If the following hidden layer contains 1000, then we will want to learn weights of the shape <code>[1000, 3 million]</code> which is 3 billion parameter only in the first layer and thats so computationally expensive!</li></ul></li><li>One of the solutions is to build this using <strong>convolution layers</strong> instead of the <strong>fully connected layers</strong>.</li></ul><h3 id="edge-detection-example">Edge detection example</h3><ul><li>The convolution operation is one of the fundamentals blocks of a CNN. One of the examples about convolution is the image edge detection operation.</li><li>Early layers of CNN might detect edges then the middle layers will detect parts of objects and the later layers will put the these parts together to produce an output.</li><li>In an image we can detect vertical edges, horizontal edges, or full edge detector.</li><li>Vertical edge detection:<ul><li>An example of convolution operation to detect vertical edges:<ul><li><img src="01.png"></li></ul></li><li>In the last example a <code>6x6</code> matrix convolved with <code>3x3</code> filter/kernel gives us a <code>4x4</code> matrix.</li><li>If you make the convolution operation in TensorFlow you will find the function <code>tf.nn.conv2d</code>. In keras you will find <code>Conv2d</code> function.</li><li>The vertical edge detection filter will find a <code>3x3</code> place in an image where there are a bright region followed by a dark region.</li><li>If we applied this filter to a white region followed by a dark region, it should find the edges in between the two colors as a positive value. But if we applied the same filter to a dark region followed by a white region it will give us negative values. To solve this we can use the abs function to make it positive.</li></ul></li><li>Horizontal edge detection<ul><li><p>Filter would be like this</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1   1   1</span><br><span class="line">0   0   0</span><br><span class="line">-1  -1  -1</span><br></pre></td></tr></table></figure></li></ul></li><li><p>There are a lot of ways we can put number inside the horizontal or vertical edge detections. For example here are the vertical <strong>Sobel</strong> filter (The idea is taking care of the middle row):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 0   -1</span><br><span class="line">2 0   -2</span><br><span class="line">1 0   -1</span><br></pre></td></tr></table></figure></li><li><p>Also something called <strong>Scharr</strong> filter (The idea is taking great care of the middle row):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3 0   -3</span><br><span class="line">10    0   -10</span><br><span class="line">3 0   -3</span><br></pre></td></tr></table></figure></li><li><p>What we learned in the deep learning is that we don't need to hand craft these numbers, we can treat them as weights and then learn them. It can learn horizontal, vertical, angled, or any edge type automatically rather than getting them by hand.</p></li></ul><h3 id="padding">Padding</h3><ul><li>In order to to use deep neural networks we really need to use <strong>paddings</strong>.</li><li>In the last section we saw that a <code>6x6</code> matrix convolved with <code>3x3</code> filter/kernel gives us a <code>4x4</code> matrix.</li><li>To give it a general rule, if a matrix <code>nxn</code> is convolved with <code>fxf</code> filter/kernel give us <code>n-f+1,n-f+1</code> matrix.</li><li>The convolution operation shrinks the matrix if f&gt;1.</li><li>We want to apply convolution operation multiple times, but if the image shrinks we will lose a lot of data on this process. Also the edges pixels are used less than other pixels in an image.</li><li>So the problems with convolutions are:<ul><li>Shrinks output.</li><li>throwing away a lot of information that are in the edges.</li></ul></li><li>To solve these problems we can pad the input image before convolution by adding some rows and columns to it. We will call the padding amount <code>P</code> the number of row/columns that we will insert in top, bottom, left and right of the image.</li><li>In almost all the cases the padding values are zeros.</li><li>The general rule now, if a matrix <code>nxn</code> is convolved with <code>fxf</code> filter/kernel and padding <code>p</code> give us <code>n+2p-f+1,n+2p-f+1</code> matrix.</li><li>If n = 6, f = 3, and p = 1 Then the output image will have <code>n+2p-f+1 = 6+2-3+1 = 6</code>. We maintain the size of the image.</li><li><p>Same convolutions is a convolution with a pad so that output size is the same as the input size. Its given by the equation:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">P = (f-1) / 2</span><br></pre></td></tr></table></figure></li><li><p>In computer vision f is usually odd. Some of the reasons is that its have a center value.</p></li></ul><h3 id="strided-convolution">Strided convolution</h3><ul><li><p>Strided convolution is another piece that are used in CNNs.</p></li><li><p>We will call stride <code>S</code>.</p></li><li><p>When we are making the convolution operation we used <code>S</code> to tell us the number of pixels we will jump when we are convolving filter/kernel. The last examples we described S was 1.</p></li><li>Now the general rule are:<ul><li>if a matrix <code>nxn</code> is convolved with <code>fxf</code> filter/kernel and padding <code>p</code> and stride <code>s</code> it give us <code>(n+2p-f)/s + 1,(n+2p-f)/s + 1</code> matrix.</li></ul></li><li><p>In case <code>(n+2p-f)/s + 1</code> is fraction we can take <strong>floor</strong> of this value.</p></li><li><p>In math textbooks the conv operation is filpping the filter before using it. What we were doing is called cross-correlation operation but the state of art of deep learning is using this as conv operation.</p></li><li><p>Same convolutions is a convolution with a padding so that output size is the same as the input size. Its given by the equation:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p = (n*s - n + f - s) / 2</span><br><span class="line">When s = 1 ==&gt; P = (f-1) / 2</span><br></pre></td></tr></table></figure></li></ul><h3 id="convolutions-over-volumes">Convolutions over volumes</h3><ul><li>We see how convolution works with 2D images, now lets see if we want to convolve 3D images (RGB image)</li><li>We will convolve an image of height, width, # of channels with a filter of a height, width, same # of channels. Hint that the image number channels and the filter number of channels are the same.</li><li>We can call this as stacked filters for each channel!</li><li>Example:<ul><li>Input image: <code>6x6x3</code></li><li>Filter: <code>3x3x3</code></li><li>Result image: <code>4x4x1</code></li><li>In the last result p=0, s=1</li></ul></li><li>Hint the output here is only 2D.</li><li>We can use multiple filters to detect multiple features or edges. Example.<ul><li>Input image: <code>6x6x3</code></li><li>10 Filters: <code>3x3x3</code></li><li>Result image: <code>4x4x10</code></li><li>In the last result p=0, s=1</li></ul></li></ul><h3 id="one-layer-of-a-convolutional-network">One Layer of a Convolutional Network</h3><ul><li>First we convolve some filters to a given input and then add a bias to each filter output and then get RELU of the result. Example:<ul><li>Input image: <code>6x6x3</code> <code># a0</code></li><li>10 Filters: <code>3x3x3</code> <code>#W1</code></li><li>Result image: <code>4x4x10</code> <code>#W1a0</code></li><li>Add b (bias) with <code>10x1</code> will get us : <code>4x4x10</code> image <code>#W1a0 + b</code></li><li>Apply RELU will get us: <code>4x4x10</code> image <code>#A1 = RELU(W1a0 + b)</code></li><li>In the last result p=0, s=1</li><li>Hint number of parameters here are: <code>(3x3x3x10) + 10 = 280</code></li></ul></li><li>The last example forms a layer in the CNN.</li><li>Hint: no matter the size of the input, the number of the parameters is same if filter size is same. That makes it less prone to overfitting.</li><li><p>Here are some notations we will use. If layer l is a conv layer:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Hyperparameters</span><br><span class="line">f[l] = filter size</span><br><span class="line">p[l] = padding    # Default is zero</span><br><span class="line">s[l] = stride</span><br><span class="line">nc[l] = number of filters</span><br><span class="line"></span><br><span class="line">Input:  n[l-1] x n[l-1] x nc[l-1] Or   nH[l-1] x nW[l-1] x nc[l-1]</span><br><span class="line">Output: n[l] x n[l] x nc[l]   Or   nH[l] x nW[l] x nc[l]</span><br><span class="line">Where n[l] = (n[l-1] + 2p[l] - f[l] / s[l]) + 1</span><br><span class="line"></span><br><span class="line">Each filter is: f[l] x f[l] x nc[l-1]</span><br><span class="line"></span><br><span class="line">Activations: a[l] is nH[l] x nW[l] x nc[l]</span><br><span class="line">           A[l] is m x nH[l] x nW[l] x nc[l]   # In batch or minbatch training</span><br><span class="line">           </span><br><span class="line">Weights: f[l] * f[l] * nc[l-1] * nc[l]</span><br><span class="line">bias:  (1, 1, 1, nc[l])</span><br></pre></td></tr></table></figure></li></ul><h3 id="a-simple-convolution-network-example">A simple convolution network example</h3><ul><li>Lets build a big example.<ul><li>Input Image are: <code>a0 = 39x39x3</code><ul><li><code>n0 = 39</code> and <code>nc0 = 3</code></li></ul></li><li>First layer (Conv layer):<ul><li><code>f1 = 3</code>, <code>s1 = 1</code>, and <code>p1 = 0</code></li><li><code>number of filters = 10</code></li><li>Then output are <code>a1 = 37x37x10</code><ul><li><code>n1 = 37</code> and <code>nc1 = 10</code></li></ul></li></ul></li><li>Second layer (Conv layer):<ul><li><code>f2 = 5</code>, <code>s2 = 2</code>, <code>p2 = 0</code></li><li><code>number of filters = 20</code></li><li>The output are <code>a2 = 17x17x20</code><ul><li><code>n2 = 17</code>, <code>nc2 = 20</code></li></ul></li><li>Hint shrinking goes much faster because the stride is 2</li></ul></li><li>Third layer (Conv layer):<ul><li><code>f3 = 5</code>, <code>s3 = 2</code>, <code>p2 = 0</code></li><li><code>number of filters = 40</code></li><li>The output are <code>a3 = 7x7x40</code><ul><li><code>n3 = 7</code>, <code>nc3 = 40</code></li></ul></li></ul></li><li>Forth layer (Fully connected Softmax)<ul><li><code>a3 = 7x7x40 = 1960</code> as a vector..</li></ul></li></ul></li><li>In the last example you seen that the image are getting smaller after each layer and thats the trend now.</li><li>Types of layer in a convolutional network:<ul><li>Convolution. <code>#Conv</code></li><li>Pooling <code>#Pool</code></li><li>Fully connected <code>#FC</code></li></ul></li></ul><h3 id="pooling-layers">Pooling layers</h3><ul><li>Other than the conv layers, CNNs often uses pooling layers to reduce the size of the inputs, speed up computation, and to make some of the features it detects more robust.</li><li>Max pooling example:<ul><li><img src="02.png"></li><li>This example has <code>f = 2</code>, <code>s = 2</code>, and <code>p = 0</code> hyperparameters</li></ul></li><li>The max pooling is saying, if the feature is detected anywhere in this filter then keep a high number. But the main reason why people are using pooling because its works well in practice and reduce computations.</li><li>Max pooling has no parameters to learn.</li><li>Example of Max pooling on 3D input:<ul><li>Input: <code>4x4x10</code></li><li><code>Max pooling size = 2</code> and <code>stride = 2</code></li><li>Output: <code>2x2x10</code></li></ul></li><li>Average pooling is taking the averages of the values instead of taking the max values.</li><li>Max pooling is used more often than average pooling in practice.</li><li>If stride of pooling equals the size, it will then apply the effect of shrinking.</li><li>Hyperparameters summary<ul><li>f : filter size.</li><li>s : stride.</li><li>Padding are rarely uses here.</li><li>Max or average pooling.</li></ul></li></ul><h3 id="convolutional-neural-network-example">Convolutional neural network example</h3><ul><li>Now we will deal with a full CNN example. This example is something like the <strong><em>LeNet-5</em></strong> that was invented by Yann Lecun.<ul><li>Input Image are: <code>a0 = 32x32x3</code><ul><li><code>n0 = 32</code> and <code>nc0 = 3</code></li></ul></li><li>First layer (Conv layer): <code>#Conv1</code><ul><li><code>f1 = 5</code>, <code>s1 = 1</code>, and <code>p1 = 0</code></li><li><code>number of filters = 6</code></li><li>Then output are <code>a1 = 28x28x6</code><ul><li><code>n1 = 28</code> and <code>nc1 = 6</code></li></ul></li><li>Then apply (Max pooling): <code>#Pool1</code><ul><li><code>f1p = 2</code>, and <code>s1p = 2</code></li><li>The output are <code>a1 = 14x14x6</code></li></ul></li></ul></li><li>Second layer (Conv layer): <code>#Conv2</code><ul><li><code>f2 = 5</code>, <code>s2 = 1</code>, <code>p2 = 0</code></li><li><code>number of filters = 16</code></li><li>The output are <code>a2 = 10x10x16</code><ul><li><code>n2 = 10</code>, <code>nc2 = 16</code></li></ul></li><li>Then apply (Max pooling): <code>#Pool2</code><ul><li><code>f1p = 2</code>, and <code>s1p = 2</code></li><li>The output are <code>a2 = 5x5x16</code></li></ul></li></ul></li><li>Third layer (Fully connected) <code>#FC3</code><ul><li>Number of neurons are 120</li><li>The output <code>a3 = 120 x 1</code> . 400 came from <code>5x5x16</code></li></ul></li><li>Forth layer (Fully connected) <code>#FC4</code><ul><li>Number of neurons are 84</li><li>The output <code>a4 = 84 x 1</code> .</li></ul></li><li>Fifth layer (Softmax)<ul><li>Number of neurons is 10 if we need to identify for example the 10 digits.</li></ul></li></ul></li><li>Hint a Conv1 and Pool1 is treated as one layer.</li><li>Some statistics about the last example:<ul><li><img src="03.png"></li></ul></li><li>Hyperparameters are a lot. For choosing the value of each you should follow the guideline that we will discuss later or check the literature and takes some ideas and numbers from it.</li><li>Usually the input size decreases over layers while the number of filters increases.</li><li>A CNN usually consists of one or more convolution (Not just one as the shown examples) followed by a pooling.</li><li>Fully connected layers has the most parameters in the network.</li><li>To consider using these blocks together you should look at other working examples firsts to get some intuitions.</li></ul><h3 id="why-convolutions">Why convolutions?</h3><ul><li>Two main advantages of Convs are:<ul><li>Parameter sharing.<ul><li>A feature detector (such as a vertical edge detector) that's useful in one part of the image is probably useful in another part of the image.</li></ul></li><li>sparsity of connections.<ul><li>In each layer, each output value depends only on a small number of inputs which makes it translation invariance.</li></ul></li></ul></li><li>Putting it all together:<ul><li><img src="04.png"></li></ul></li></ul><h2 id="deep-convolutional-models-case-studies">Deep convolutional models: case studies</h2><blockquote><p>Learn about the practical tricks and methods used in deep CNNs straight from the research papers.</p></blockquote><h3 id="why-look-at-case-studies">Why look at case studies?</h3><ul><li>We learned about Conv layer, pooling layer, and fully connected layers. It turns out that computer vision researchers spent the past few years on how to put these layers together.</li><li>To get some intuitions you have to see the examples that has been made.</li><li>Some neural networks architecture that works well in some tasks can also work well in other tasks.</li><li>Here are some classical CNN networks:<ul><li><strong>LeNet-5</strong></li><li><strong>AlexNet</strong></li><li><strong>VGG</strong></li></ul></li><li>The best CNN architecture that won the last ImageNet competition is called <strong>ResNet</strong> and it has 152 layers!</li><li>There are also an architecture called <strong>Inception</strong> that was made by Google that are very useful to learn and apply to your tasks.</li><li>Reading and trying the mentioned models can boost you and give you a lot of ideas to solve your task.</li></ul><h3 id="classic-networks">Classic networks</h3><ul><li><p>In this section we will talk about classic networks which are <strong>LeNet-5</strong>, <strong>AlexNet</strong>, and <strong>VGG</strong>.</p></li><li><p><strong>LeNet-5</strong></p><ul><li>The goal for this model was to identify handwritten digits in a <code>32x32x1</code> gray image. Here are the drawing of it:</li><li><img src="05.png"></li><li>This model was published in 1998. The last layer wasn't using softmax back then.</li><li>It has 60k parameters.</li><li>The dimensions of the image decreases as the number of channels increases.</li><li><code>Conv ==&gt; Pool ==&gt; Conv ==&gt; Pool ==&gt; FC ==&gt; FC ==&gt; softmax</code> this type of arrangement is quite common.</li><li>The activation function used in the paper was Sigmoid and Tanh. Modern implementation uses RELU in most of the cases.</li><li><a href="http://ieeexplore.ieee.org/document/726791/?reload=true" target="_blank" rel="noopener">[LeCun et al., 1998. Gradient-based learning applied to document recognition]</a></li></ul></li><li><p><strong>AlexNet</strong></p><ul><li><p>Named after Alex Krizhevsky who was the first author of this paper. The other authors includes Jeoffery Hinton.</p></li><li><p>The goal for the model was the ImageNet challenge which classifies images into 1000 classes. Here are the drawing of the model:</p></li><li><p><img src="06.png"></p></li><li><p>Summary:</p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Conv =&gt; Max-pool =&gt; Conv =&gt; Max-pool =&gt; Conv =&gt; Conv =&gt; Conv =&gt; Max-pool ==&gt; Flatten ==&gt; FC ==&gt; FC ==&gt; Softmax</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Similar to LeNet-5 but bigger.</p></li><li><p>Has 60 Million parameter compared to 60k parameter of LeNet-5.</p></li><li><p>It used the RELU activation function.</p></li><li><p>The original paper contains Multiple GPUs and Local Response normalization (RN).</p><ul><li>Multiple GPUs were used because the GPUs were not so fast back then.</li><li>Researchers proved that Local Response normalization doesn't help much so for now don't bother yourself for understanding or implementing it.</li></ul></li><li><p>This paper convinced the computer vision researchers that deep learning is so important.</p></li><li><p><a href="https://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks.pdf" target="_blank" rel="noopener">[Krizhevsky et al., 2012. ImageNet classification with deep convolutional neural networks]</a></p></li></ul></li><li><p><strong>VGG-16</strong></p><ul><li>A modification for AlexNet.</li><li>Instead of having a lot of hyperparameters lets have some simpler network.</li><li>Focus on having only these blocks:<ul><li>CONV = 3 X 3 filter, s = 1, same<br></li><li>MAX-POOL = 2 X 2 , s = 2</li></ul></li><li>Here are the architecture:<ul><li><img src="07.png"></li></ul></li><li>This network is large even by modern standards. It has around 138 million parameters.<ul><li>Most of the parameters are in the fully connected layers.</li></ul></li><li>It has a total memory of 96MB per image for only forward propagation!<ul><li>Most memory are in the earlier layers.</li></ul></li><li>Number of filters increases from 64 to 128 to 256 to 512. 512 was made twice.</li><li>Pooling was the only one who is responsible for shrinking the dimensions.</li><li>There are another version called <strong>VGG-19</strong> which is a bigger version. But most people uses the VGG-16 instead of the VGG-19 because it does the same.</li><li>VGG paper is attractive it tries to make some rules regarding using CNNs.</li><li><a href="https://arxiv.org/abs/1409.1556" target="_blank" rel="noopener">[Simonyan &amp; Zisserman 2015. Very deep convolutional networks for large-scale image recognition]</a></li></ul></li></ul><h3 id="residual-networks-resnets">Residual Networks (ResNets)</h3><ul><li>Very, very deep NNs are difficult to train because of vanishing and exploding gradients problems.</li><li>In this section we will learn about skip connection which makes you take the activation from one layer and suddenly feed it to another layer even much deeper in NN which allows you to train large NNs even with layers greater than 100.</li><li><strong>Residual block</strong><ul><li>ResNets are built out of some Residual blocks.</li><li><img src="08.png"></li><li>They add a shortcut/skip connection before the second activation.</li><li>The authors of this block find that you can train a deeper NNs using stacking this block.</li><li><a href="https://arxiv.org/abs/1512.03385" target="_blank" rel="noopener">[He et al., 2015. Deep residual networks for image recognition]</a></li></ul></li><li><strong>Residual Network</strong><ul><li>Are a NN that consists of some Residual blocks.</li><li><img src="09.png"></li><li>These networks can go deeper without hurting the performance. In the normal NN - Plain networks - the theory tell us that if we go deeper we will get a better solution to our problem, but because of the vanishing and exploding gradients problems the performance of the network suffers as it goes deeper. Thanks to Residual Network we can go deeper as we want now.</li><li><img src="10.png"></li><li>On the left is the normal NN and on the right are the ResNet. As you can see the performance of ResNet increases as the network goes deeper.</li><li>In some cases going deeper won't effect the performance and that depends on the problem on your hand.</li><li>Some people are trying to train 1000 layer now which isn't used in practice.</li><li>[He et al., 2015. Deep residual networks for image recognition]</li></ul></li></ul><h3 id="why-resnets-work">Why ResNets work</h3><ul><li><p>Lets see some example that illustrates why resNet work.</p><ul><li><p>We have a big NN as the following:</p><ul><li><code>X --&gt; Big NN --&gt; a[l]</code></li></ul></li><li><p>Lets add two layers to this network as a residual block:</p><ul><li><code>X --&gt; Big NN --&gt; a[l] --&gt; Layer1 --&gt; Layer2 --&gt; a[l+2]</code></li><li>And a<code>[l]</code> has a direct connection to <code>a[l+2]</code></li></ul></li><li><p>Suppose we are using RELU activations.</p></li><li><p>Then:</p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a[l+2] = g( z[l+2] + a[l] )</span><br><span class="line">     = g( W[l+2] a[l+1] + b[l+2] + a[l] )</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Then if we are using L2 regularization for example, <code>W[l+2]</code> will be zero. Lets say that <code>b[l+2]</code> will be zero too.</p></li><li><p>Then <code>a[l+2] = g( a[l] ) = a[l]</code> with no negative values.</p></li><li><p>This show that identity function is easy for a residual block to learn. And that why it can train deeper NNs.</p></li><li><p>Also that the two layers we added doesn't hurt the performance of big NN we made.</p></li><li><p>Hint: dimensions of z[l+2] and a[l] have to be the same in resNets. In case they have different dimensions what we put a matrix parameters (Which can be learned or fixed)</p><ul><li><code>a[l+2] = g( z[l+2] + ws * a[l] ) # The added Ws should make the dimentions equal</code></li><li>ws also can be a zero padding.</li></ul></li></ul></li><li><p>Using a skip-connection helps the gradient to backpropagate and thus helps you to train deeper networks</p></li><li><p>Lets take a look at ResNet on images.</p><ul><li>Here are the architecture of <strong>ResNet-34</strong>:</li><li><img src="resNet.jpg"></li><li>All the 3x3 Conv are same Convs.</li><li>Keep it simple in design of the network.</li><li>spatial size /2 =&gt; # filters x2</li><li>No FC layers, No dropout is used.</li><li>Two main types of blocks are used in a ResNet, depending mainly on whether the input/output dimensions are same or different. You are going to implement both of them.</li><li>The dotted lines is the case when the dimensions are different. To solve then they down-sample the input by 2 and then pad zeros to match the two dimensions. There's another trick which is called bottleneck which we will explore later.</li></ul></li><li><p>Useful concept (<strong>Spectrum of Depth</strong>):</p><ul><li><img src="12.png"></li><li>Taken from <a href="icml.cc/2016/tutorials/icml2016_tutorial_deep_residual_networks_kaiminghe.pdf">icml.cc/2016/tutorials/icml2016_tutorial_deep_residual_networks_kaiminghe.pdf</a></li></ul></li><li><p>Residual blocks types:</p><ul><li>Identity block:<ul><li><img src="16.png"></li><li>Hint the conv is followed by a batch norm <code>BN</code> before <code>RELU</code>. Dimensions here are same.</li><li>This skip is over 2 layers. The skip connection can jump n connections where n&gt;2</li><li>This drawing represents <a href="https://keras.io/" target="_blank" rel="noopener">Keras</a> layers.</li></ul></li><li>The convolutional block:<ul><li><img src="17.png"></li><li>The conv can be bottleneck 1 x 1 conv</li></ul></li></ul></li></ul><h3 id="network-in-network-and-1-x-1-convolutions">Network in Network and 1 X 1 convolutions</h3><ul><li><p>A 1 x 1 convolution - We also call it Network in Network- is so useful in many CNN models.</p></li><li><p>What does a 1 X 1 convolution do? Isn't it just multiplying by a number?</p><ul><li>Lets first consider an example:<ul><li>Input: <code>6x6x1</code></li><li>Conv: <code>1x1x1</code> one filter. <code># The 1 x 1 Conv</code></li><li>Output: <code>6x6x1</code></li></ul></li><li>Another example:<ul><li>Input: <code>6x6x32</code></li><li>Conv: <code>1x1x32</code> 5 filters. <code># The 1 x 1 Conv</code></li><li>Output: <code>6x6x5</code></li></ul></li></ul></li><li><p>The Network in Network is proposed in [Lin et al., 2013. Network in network]</p></li><li><p>It has been used in a lot of modern CNN implementations like ResNet and Inception models.</p></li><li><p>A 1 x 1 convolution is useful when:</p><ul><li>We want to shrink the number of channels. We also call this feature transformation.<ul><li>In the second discussed example above we have shrinked the input from 32 to 5 channels.</li></ul></li><li>We will later see that by shrinking it we can save a lot of computations.</li><li>If we have specified the number of 1 x 1 Conv filters to be the same as the input number of channels then the output will contain the same number of channels. Then the 1 x 1 Conv will act like a non linearity and will learn non linearity operator.</li></ul></li><li><p>Replace fully connected layers with 1 x 1 convolutions as Yann LeCun believes they are the same.</p><ul><li><blockquote><p>In Convolutional Nets, there is no such thing as "fully-connected layers". There are only convolution layers with 1x1 convolution kernels and a full connection table. <a href="https://www.facebook.com/yann.lecun/posts/10152820758292143" target="_blank" rel="noopener">Yann LeCun</a></p></blockquote></li></ul></li><li><p><a href="https://arxiv.org/abs/1312.4400" target="_blank" rel="noopener">[Lin et al., 2013. Network in network]</a></p></li></ul><h3 id="inception-network-motivation">Inception network motivation</h3><ul><li>When you design a CNN you have to decide all the layers yourself. Will you pick a 3 x 3 Conv or 5 x 5 Conv or maybe a max pooling layer. You have so many choices.</li><li>What <strong>inception</strong> tells us is, Why not use all of them at once?</li><li><strong>Inception module</strong>, naive version:<ul><li><img src="13.png"></li><li>Hint that max-pool are same here.</li><li>Input to the inception module are 28 x 28 x 192 and the output are 28 x 28 x 256</li><li>We have done all the Convs and pools we might want and will let the NN learn and decide which it want to use most.</li><li><a href="https://arxiv.org/abs/1409.4842" target="_blank" rel="noopener">[Szegedy et al. 2014. Going deeper with convolutions]</a></li></ul></li><li>The problem of computational cost in Inception model:<ul><li>If we have just focused on a 5 x 5 Conv that we have done in the last example.</li><li>There are 32 same filters of 5 x 5, and the input are 28 x 28 x 192.</li><li>Output should be 28 x 28 x 32</li><li>The total number of multiplications needed here are:<ul><li>Number of outputs * Filter size * Filter size * Input dimensions</li><li>Which equals: <code>28 * 28 * 32 * 5 * 5 * 192 = 120 Mil</code></li><li>120 Mil multiply operation still a problem in the modern day computers.</li></ul></li><li>Using a 1 x 1 convolution we can reduce 120 mil to just 12 mil. Lets see how.</li></ul></li><li>Using 1 X 1 convolution to reduce computational cost:<ul><li>The new architecture are:<ul><li>X0 shape is (28, 28, 192)</li><li>We then apply 16 (1 x 1 Convolution)</li><li>That produces X1 of shape (28, 28, 16)<ul><li>Hint, we have reduced the dimensions here.</li></ul></li><li>Then apply 32 (5 x 5 Convolution)</li><li>That produces X2 of shape (28, 28, 32)</li></ul></li><li>Now lets calculate the number of multiplications:<ul><li>For the first Conv: <code>28 * 28 * 16 * 1 * 1 * 192 = 2.5 Mil</code></li><li>For the second Conv: <code>28 * 28 * 32 * 5 * 5 * 16 = 10 Mil</code></li><li>So the total number are 12.5 Mil approx. which is so good compared to 120 Mil</li></ul></li></ul></li><li>A 1 x 1 Conv here is called Bottleneck <code>BN</code>.</li><li>It turns out that the 1 x 1 Conv won't hurt the performance.</li><li><strong>Inception module</strong>, dimensions reduction version:<ul><li><img src="14.png"></li></ul></li><li>Example of inception model in Keras:<ul><li><img src="inception_block1a.png"></li></ul></li></ul><h3 id="inception-network-googlenet">Inception network (GoogleNet)</h3><ul><li>The inception network consist of concatenated blocks of the Inception module.</li><li>The name inception was taken from a <em>meme</em> image which was taken from <strong>Inception movie</strong></li><li>Here are the full model:<ul><li><img src="15.png"></li></ul></li><li>Some times a Max-Pool block is used before the inception module to reduce the dimensions of the inputs.</li><li>There are a 3 Sofmax branches at different positions to push the network toward its goal. and helps to ensure that the intermediate features are good enough to the network to learn and it turns out that softmax0 and sofmax1 gives regularization effect.</li><li>Since the development of the Inception module, the authors and the others have built another versions of this network. Like inception v2, v3, and v4. Also there is a network that has used the inception module and the ResNet together.</li><li><a href="https://arxiv.org/abs/1409.4842" target="_blank" rel="noopener">[Szegedy et al., 2014, Going Deeper with Convolutions]</a></li></ul><h3 id="using-open-source-implementation">Using Open-Source Implementation</h3><ul><li>We have learned a lot of NNs and ConvNets architectures.</li><li>It turns out that a lot of these NN are difficult to replicated. because there are some details that may not presented on its papers. There are some other reasons like:<ul><li>Learning decay.</li><li>Parameter tuning.</li></ul></li><li>A lot of deep learning researchers are opening sourcing their code into Internet on sites like <a href="Github.com">Github</a>.</li><li>If you see a research paper and you want to build over it, the first thing you should do is to look for an open source implementation for this paper.</li><li>Some advantage of doing this is that you might download the network implementation along with its parameters/weights. The author might have used multiple GPUs and spent some weeks to reach this result and its right in front of you after you download it.</li></ul><h3 id="transfer-learning">Transfer Learning</h3><ul><li>If you are using a specific NN architecture that has been trained before, you can use this pretrained parameters/weights instead of random initialization to solve your problem.</li><li>It can help you boost the performance of the NN.</li><li>The pretrained models might have trained on a large datasets like ImageNet, Ms COCO, or pascal and took a lot of time to learn those parameters/weights with optimized hyperparameters. This can save you a lot of time.</li><li>Lets see an example:<ul><li>Lets say you have a cat classification problem which contains 3 classes Tigger, Misty and neither.</li><li>You don't have much a lot of data to train a NN on these images.</li><li>Andrew recommends to go online and download a good NN with its weights, remove the softmax activation layer and put your own one and make the network learn only the new layer while other layer weights are fixed/frozen.</li><li>Frameworks have options to make the parameters frozen in some layers using <code>trainable = 0</code> or <code>freeze = 0</code></li><li>One of the tricks that can speed up your training, is to run the pretrained NN without final softmax layer and get an intermediate representation of your images and save them to disk. And then use these representation to a shallow NN network. This can save you the time needed to run an image through all the layers.<ul><li>Its like converting your images into vectors.</li></ul></li></ul></li><li>Another example:<ul><li>What if in the last example you have a lot of pictures for your cats.</li><li>One thing you can do is to freeze few layers from the beginning of the pretrained network and learn the other weights in the network.</li><li>Some other idea is to throw away the layers that aren't frozen and put your own layers there.</li></ul></li><li>Another example:<ul><li>If you have enough data, you can fine tune all the layers in your pretrained network but don't random initialize the parameters, leave the learned parameters as it is and learn from there.</li></ul></li></ul><h3 id="data-augmentation">Data Augmentation</h3><ul><li>If data is increased, your deep NN will perform better. Data augmentation is one of the techniques that deep learning uses to increase the performance of deep NN.</li><li>The majority of computer vision applications needs more data right now.</li><li>Some data augmentation methods that are used for computer vision tasks includes:<ul><li>Mirroring.</li><li>Random cropping.<ul><li>The issue with this technique is that you might take a wrong crop.</li><li>The solution is to make your crops big enough.</li></ul></li><li>Rotation.</li><li>Shearing.</li><li>Local warping.</li><li>Color shifting.<ul><li>For example, we add to R, G, and B some distortions that will make the image identified as the same for the human but is different for the computer.</li><li>In practice the added value are pulled from some probability distribution and these shifts are some small.</li><li>Makes your algorithm more robust in changing colors in images.</li><li>There are an algorithm which is called <strong><em>PCA color augmentation</em></strong> that decides the shifts needed automatically.</li></ul></li></ul></li><li>Implementing distortions during training:<ul><li>You can use a different CPU thread to make you a distorted mini batches while you are training your NN.</li></ul></li><li>Data Augmentation has also some hyperparameters. A good place to start is to find an open source data augmentation implementation and then use it or fine tune these hyperparameters.</li></ul><h3 id="state-of-computer-vision">State of Computer Vision</h3><ul><li>For a specific problem we may have a little data for it or a lots of data.</li><li>Speech recognition problems for example has a big amount of data, while image recognition has a medium amount of data and the object detection has a small amount of data nowadays.</li><li>If your problem has a large amount of data, researchers are tend to use:<ul><li>Simpler algorithms.</li><li>Less hand engineering.</li></ul></li><li>If you don't have that much data people tend to try more hand engineering for the problem "Hacks". Like choosing a more complex NN architecture.</li><li>Because we haven't got that much data in a lot of computer vision problems, it relies a lot on hand engineering.</li><li>We will see in the next chapter that because the object detection has less data, a more complex NN architectures will be presented.</li><li>Tips for doing well on benchmarks/winning competitions:<ul><li>Ensembling.<ul><li>Train several networks independently and average their outputs. Merging down some classifiers.</li><li>After you decide the best architecture for your problem, initialize some of that randomly and train them independently.</li><li>This can give you a push by 2%</li><li>But this will slow down your production by the number of the ensembles. Also it takes more memory as it saves all the models in the memory.</li><li>People use this in competitions but few uses this in a real production.</li></ul></li><li>Multi-crop at test time.<ul><li>Run classifier on multiple versions of test versions and average results.</li><li>There is a technique called 10 crops that uses this.</li><li>This can give you a better result in the production.</li></ul></li></ul></li><li>Use open source code<ul><li>Use architectures of networks published in the literature.</li><li>Use open source implementations if possible.</li><li>Use pretrained models and fine-tune on your dataset.</li></ul></li></ul><h2 id="object-detection">Object detection</h2><blockquote><p>Learn how to apply your knowledge of CNNs to one of the toughest but hottest field of computer vision: Object detection.</p></blockquote><h3 id="object-localization">Object Localization</h3><ul><li><p>Object detection is one of the areas in which deep learning is doing great in the past two years.</p></li><li><p>What are localization and detection?</p><ul><li><strong>Image Classification</strong>:<ul><li>Classify an image to a specific class. The whole image represents one class. We don't want to know exactly where are the object. Usually only one object is presented.</li><li><img src="Classification.jpg"></li></ul></li><li><strong>Classification with localization</strong>:<ul><li>Given an image we want to learn the class of the image and where are the class location in the image. We need to detect a class and a rectangle of where that object is. Usually only one object is presented.</li><li><img src="ClassificationLoc.jpg"></li></ul></li><li><strong>Object detection</strong>:<ul><li>Given an image we want to detect all the object in the image that belong to a specific classes and give their location. An image can contain more than one object with different classes.</li><li><img src="ObjectDetection.png"></li></ul></li><li><strong>Semantic Segmentation</strong>:<ul><li>We want to Label each pixel in the image with a category label. Semantic Segmentation Don't differentiate instances, only care about pixels. It detects no objects just pixels.</li><li>If there are two objects of the same class is intersected, we won't be able to separate them.</li><li><img src="SemanticSegmentation.png"></li></ul></li><li><strong>Instance Segmentation</strong><ul><li>This is like the full problem. Rather than we want to predict the bounding box, we want to know which pixel label but also distinguish them.</li><li><img src="InstanceSegmentation.png"></li></ul></li></ul></li><li><p>To make image classification we use a Conv Net with a Softmax attached to the end of it.</p></li><li><p>To make classification with localization we use a Conv Net with a softmax attached to the end of it and a four numbers <code>bx</code>, <code>by</code>, <code>bh</code>, and <code>bw</code> to tell you the location of the class in the image. The dataset should contain this four numbers with the class too.</p></li><li><p>Defining the target label Y in classification with localization problem:</p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Y = [</span><br><span class="line">        Pc              # Probability of an object is presented</span><br><span class="line">        bx              # Bounding box</span><br><span class="line">        by              # Bounding box</span><br><span class="line">        bh              # Bounding box</span><br><span class="line">        bw              # Bounding box</span><br><span class="line">        c1              # The classes</span><br><span class="line">        c2</span><br><span class="line">        ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>Example (Object is present):</p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Y = [</span><br><span class="line">          1       # Object is present</span><br><span class="line">          0</span><br><span class="line">          0</span><br><span class="line">          100</span><br><span class="line">          100</span><br><span class="line">          0</span><br><span class="line">          1</span><br><span class="line">          0</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Example (When object isn't presented):</p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Y = [</span><br><span class="line">          0       # Object isn&apos;t presented</span><br><span class="line">          ?       # ? means we dont care with other values</span><br><span class="line">          ?</span><br><span class="line">          ?</span><br><span class="line">          ?</span><br><span class="line">          ?</span><br><span class="line">          ?</span><br><span class="line">          ?</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>The loss function for the Y we have created (Example of the square error):</p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">L(y&apos;,y) = &#123;</span><br><span class="line">            (y1&apos;-y1)^2 + (y2&apos;-y2)^2 + ...           if y1 = 1</span><br><span class="line">            (y1&apos;-y1)^2                      if y1 = 0</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li><li>In practice we use logistic regression for <code>pc</code>, log likely hood loss for classes, and squared error for the bounding box.</li></ul></li></ul><h3 id="landmark-detection">Landmark Detection</h3><ul><li><p>In some of the computer vision problems you will need to output some points. That is called <strong>landmark detection</strong>.</p></li><li><p>For example, if you are working in a face recognition problem you might want some points on the face like corners of the eyes, corners of the mouth, and corners of the nose and so on. This can help in a lot of application like detecting the pose of the face.</p></li><li><p>Y shape for the face recognition problem that needs to output 64 landmarks:</p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Y = [</span><br><span class="line">        THereIsAface                # Probability of face is presented 0 or 1</span><br><span class="line">        l1x,</span><br><span class="line">        l1y,</span><br><span class="line">        ....,</span><br><span class="line">        l64x,</span><br><span class="line">        l64y</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Another application is when you need to get the skeleton of the person using different landmarks/points in the person which helps in some applications.</p></li><li><p>Hint, in your labeled data, if <code>l1x,l1y</code> is the left corner of left eye, all other <code>l1x,l1y</code> of the other examples has to be the same.</p></li></ul><h3 id="object-detection-1">Object Detection</h3><ul><li>We will use a Conv net to solve the object detection problem using a technique called the sliding windows detection algorithm.</li><li>For example lets say we are working on Car object detection.</li><li>The first thing, we will train a Conv net on cropped car images and non car images.<ul><li><img src="18.png"></li></ul></li><li>After we finish training of this Conv net we will then use it with the sliding windows technique.</li><li>Sliding windows detection algorithm:<ol type="1"><li>Decide a rectangle size.</li><li>Split your image into rectangles of the size you picked. Each region should be covered. You can use some strides.</li><li>For each rectangle feed the image into the Conv net and decide if its a car or not.</li><li>Pick larger/smaller rectangles and repeat the process from 2 to 3.</li><li>Store the rectangles that contains the cars.</li><li>If two or more rectangles intersects choose the rectangle with the best accuracy.</li></ol></li><li>Disadvantage of sliding window is the computation time.</li><li>In the era of machine learning before deep learning, people used a hand crafted linear classifiers that classifies the object and then use the sliding window technique. The linear classier make it a cheap computation. But in the deep learning era that is so computational expensive due to the complexity of the deep learning model.</li><li>To solve this problem, we can implement the sliding windows with a <strong><em>Convolutional approach</em></strong>.</li><li>One other idea is to compress your deep learning model.</li></ul><h3 id="convolutional-implementation-of-sliding-windows">Convolutional Implementation of Sliding Windows</h3><ul><li>Turning FC layer into convolutional layers (predict image class from four classes):<ul><li><img src="19.png"></li><li>As you can see in the above image, we turned the FC layer into a Conv layer using a convolution with the width and height of the filter is the same as the width and height of the input.</li></ul></li><li><strong>Convolution implementation of sliding windows</strong>:<ul><li>First lets consider that the Conv net you trained is like this (No FC all is conv layers):<ul><li><img src="20.png"></li></ul></li><li>Say now we have a 16 x 16 x 3 image that we need to apply the sliding windows in. By the normal implementation that have been mentioned in the section before this, we would run this Conv net four times each rectangle size will be 16 x 16.</li><li>The convolution implementation will be as follows:<ul><li><img src="21.png"></li></ul></li><li>Simply we have feed the image into the same Conv net we have trained.</li><li>The left cell of the result "The blue one" will represent the the first sliding window of the normal implementation. The other cells will represent the others.</li><li>Its more efficient because it now shares the computations of the four times needed.</li><li>Another example would be:<ul><li><img src="22.png"></li></ul></li><li>This example has a total of 16 sliding windows that shares the computation together.</li><li><a href="https://arxiv.org/abs/1312.6229" target="_blank" rel="noopener">[Sermanet et al., 2014, OverFeat: Integrated recognition, localization and detection using convolutional networks]</a></li></ul></li><li>The weakness of the algorithm is that the position of the rectangle wont be so accurate. Maybe none of the rectangles is exactly on the object you want to recognize.<ul><li><img src="23.png"></li><li>In red, the rectangle we want and in blue is the required car rectangle.</li></ul></li></ul><h3 id="bounding-box-predictions">Bounding Box Predictions</h3><ul><li><p>A better algorithm than the one described in the last section is the <a href="https://arxiv.org/abs/1506.02640" target="_blank" rel="noopener">YOLO algorithm</a>.</p></li><li><p>YOLO stands for <em>you only look once</em> and was developed back in 2015.</p></li><li><p>Yolo Algorithm:</p><ul><li><img src="24.png"></li></ul><ol type="1"><li>Lets say we have an image of 100 X 100</li><li>Place a 3 x 3 grid on the image. For more smother results you should use 19 x 19 for the 100 x 100</li><li>Apply the classification and localization algorithm we discussed in a previous section to each section of the grid. <code>bx</code> and <code>by</code> will represent the center point of the object in each grid and will be relative to the box so the range is between 0 and 1 while <code>bh</code> and <code>bw</code> will represent the height and width of the object which can be greater than 1.0 but still a floating point value.</li><li>Do everything at once with the convolution sliding window. If Y shape is 1 x 8 as we discussed before then the output of the 100 x 100 image should be 3 x 3 x 8 which corresponds to 9 cell results.</li><li>Merging the results using predicted localization mid point.</li></ol></li><li><p>We have a problem if we have found more than one object in one grid box.</p></li><li><p>One of the best advantages that makes the YOLO algorithm popular is that it has a great speed and a Conv net implementation.</p></li><li><p>How is YOLO different from other Object detectors? YOLO uses a single CNN network for both classification and localizing the object using bounding boxes.</p></li><li><p>In the next sections we will see some ideas that can make the YOLO algorithm better.</p></li></ul><h3 id="intersection-over-union">Intersection Over Union</h3><ul><li>Intersection Over Union is a function used to evaluate the object detection algorithm.</li><li>It computes size of intersection and divide it by the union. More generally, <em>IoU</em> <em>is a measure of the overlap between two bounding boxes</em>.</li><li>For example:<ul><li><img src="25.png"></li><li>The red is the labeled output and the purple is the predicted output.</li><li>To compute Intersection Over Union we first compute the union area of the two rectangles which is "the first rectangle + second rectangle" Then compute the intersection area between these two rectangles.</li><li>Finally <code>IOU = intersection area / Union area</code></li></ul></li><li>If <code>IOU &gt;=0.5</code> then its good. The best answer will be 1.</li><li>The higher the IOU the better is the accuracy.</li></ul><h3 id="non-max-suppression">Non-max Suppression</h3><ul><li>One of the problems we have addressed in YOLO is that it can detect an object multiple times.</li><li>Non-max Suppression is a way to make sure that YOLO detects the object just once.</li><li>For example:<ul><li><img src="26.png"></li><li>Each car has two or more detections with different probabilities. This came from some of the grids that thinks that this is the center point of the object.</li></ul></li><li>Non-max suppression algorithm:<ol type="1"><li>Lets assume that we are targeting one class as an output class.</li><li>Y shape should be <code>[Pc, bx, by, bh, hw]</code> Where Pc is the probability if that object occurs.</li><li>Discard all boxes with <code>Pc &lt; 0.6</code><br></li><li>While there are any remaining boxes:<ol type="1"><li>Pick the box with the largest Pc Output that as a prediction.</li><li>Discard any remaining box with <code>IoU &gt; 0.5</code> with that box output in the previous step i.e any box with high overlap(greater than overlap threshold of 0.5).</li></ol></li></ol></li><li>If there are multiple classes/object types <code>c</code> you want to detect, you should run the Non-max suppression <code>c</code> times, once for every output class.</li></ul><h3 id="anchor-boxes">Anchor Boxes</h3><ul><li>In YOLO, a grid only detects one object. What if a grid cell wants to detect multiple object?<ul><li><img src="27.png"></li><li>Car and person grid is same here.</li><li>In practice this happens rarely.</li></ul></li><li>The idea of Anchor boxes helps us solving this issue.</li><li>If Y = <code>[Pc, bx, by, bh, bw, c1, c2, c3]</code> Then to use two anchor boxes like this:<ul><li>Y = <code>[Pc, bx, by, bh, bw, c1, c2, c3, Pc, bx, by, bh, bw, c1, c2, c3]</code> We simply have repeated the one anchor Y.</li><li>The two anchor boxes you choose should be known as a shape:<ul><li><img src="28.png"></li></ul></li></ul></li><li>So Previously, each object in training image is assigned to grid cell that contains that object's midpoint.</li><li>With two anchor boxes, Each object in training image is assigned to grid cell that contains object's midpoint and anchor box for the grid cell with <u>highest IoU</u>. You have to check where your object should be based on its rectangle closest to which anchor box.</li><li>Example of data:<ul><li><img src="29.png"></li><li>Where the car was near the anchor 2 than anchor 1.</li></ul></li><li>You may have two or more anchor boxes but you should know their shapes.<ul><li>how do you choose the anchor boxes and people used to just choose them by hand. Maybe five or ten anchor box shapes that spans a variety of shapes that cover the types of objects you seem to detect frequently.</li><li>You may also use a k-means algorithm on your dataset to specify that.</li></ul></li><li>Anchor boxes allows your algorithm to specialize, means in our case to easily detect wider images or taller ones.</li></ul><h3 id="yolo-algorithm">YOLO Algorithm</h3><ul><li><p>YOLO is a state-of-the-art object detection model that is fast and accurate</p></li><li><p>Lets sum up and introduce the whole YOLO algorithm given an example.</p></li><li><p>Suppose we need to do object detection for our autonomous driver system.It needs to identify three classes:</p><ol type="1"><li>Pedestrian (Walks on ground).</li><li>Car.</li><li>Motorcycle.</li></ol></li><li><p>We decided to choose two anchor boxes, a taller one and a wide one.</p><ul><li>Like we said in practice they use five or more anchor boxes hand made or generated using k-means.</li></ul></li><li><p>Our labeled Y shape will be <code>[Ny, HeightOfGrid, WidthOfGrid, 16]</code>, where Ny is number of instances and each row (of size 16) is as follows:</p><ul><li><code>[Pc, bx, by, bh, bw, c1, c2, c3, Pc, bx, by, bh, bw, c1, c2, c3]</code></li></ul></li><li><p>Your dataset could be an image with a multiple labels and a rectangle for each label, we should go to your dataset and make the shape and values of Y like we agreed.</p><ul><li>An example:<ul><li><img src="30.png"></li></ul></li><li>We first initialize all of them to zeros and ?, then for each label and rectangle choose its closest grid point then the shape to fill it and then the best anchor point based on the IOU. so that the shape of Y for one image should be <code>[HeightOfGrid, WidthOfGrid,16]</code></li></ul></li><li><p>Train the labeled images on a Conv net. you should receive an output of <code>[HeightOfGrid, WidthOfGrid,16]</code> for our case.</p></li><li><p>To make predictions, run the Conv net on an image and run Non-max suppression algorithm for each class you have in our case there are 3 classes.</p><ul><li>You could get something like that:<ul><li><img src="31.png"></li><li>Total number of generated boxes are grid_width * grid_height * no_of_anchors = 3 x 3 x 2</li></ul></li><li>By removing the low probability predictions you should have:<ul><li><img src="32.png"></li></ul></li><li>Then get the best probability followed by the IOU filtering:<ul><li><img src="33.png"></li></ul></li></ul></li><li><p>YOLO are not good at detecting smaller object.</p></li><li><p><a href="https://arxiv.org/abs/1612.08242" target="_blank" rel="noopener">YOLO9000 Better, faster, stronger</a></p><ul><li><p>Summary:</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line">________________________________________________________________________________________</span><br><span class="line">Layer (type)                     Output Shape          Param #     Connected to                </span><br><span class="line">========================================================================================</span><br><span class="line">input_1 (InputLayer)             (None, 608, 608, 3)   0                                 </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">conv2d_1 (Conv2D)                (None, 608, 608, 32)  864         input_1[0][0]         </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">batch_normalization_1 (BatchNorm (None, 608, 608, 32)  128         conv2d_1[0][0]       </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">leaky_re_lu_1 (LeakyReLU)        (None, 608, 608, 32)  0     batch_normalization_1[0][0] </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">max_pooling2d_1 (MaxPooling2D)   (None, 304, 304, 32)  0           leaky_re_lu_1[0][0]   </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">conv2d_2 (Conv2D)                (None, 304, 304, 64)  18432       max_pooling2d_1[0][0] </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">batch_normalization_2 (BatchNorm (None, 304, 304, 64)  256         conv2d_2[0][0]       </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">leaky_re_lu_2 (LeakyReLU)        (None, 304, 304, 64)  0     batch_normalization_2[0][0] </span><br><span class="line">_______________________________________________________________________________________</span><br><span class="line">max_pooling2d_2 (MaxPooling2D)   (None, 152, 152, 64)  0           leaky_re_lu_2[0][0]   </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">conv2d_3 (Conv2D)                (None, 152, 152, 128) 73728       max_pooling2d_2[0][0] </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">batch_normalization_3 (BatchNorm (None, 152, 152, 128) 512         conv2d_3[0][0]       </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">leaky_re_lu_3 (LeakyReLU)        (None, 152, 152, 128) 0     batch_normalization_3[0][0] </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">conv2d_4 (Conv2D)                (None, 152, 152, 64)  8192        leaky_re_lu_3[0][0]   </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">batch_normalization_4 (BatchNorm (None, 152, 152, 64)  256         conv2d_4[0][0]       </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">leaky_re_lu_4 (LeakyReLU)        (None, 152, 152, 64)  0     batch_normalization_4[0][0] </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">conv2d_5 (Conv2D)                (None, 152, 152, 128) 73728       leaky_re_lu_4[0][0]   </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">batch_normalization_5 (BatchNorm (None, 152, 152, 128) 512         conv2d_5[0][0]       </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">leaky_re_lu_5 (LeakyReLU)        (None, 152, 152, 128) 0     batch_normalization_5[0][0] </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">max_pooling2d_3 (MaxPooling2D)   (None, 76, 76, 128)   0           leaky_re_lu_5[0][0]   </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">conv2d_6 (Conv2D)                (None, 76, 76, 256)   294912      max_pooling2d_3[0][0] </span><br><span class="line">_______________________________________________________________________________________</span><br><span class="line">batch_normalization_6 (BatchNorm (None, 76, 76, 256)   1024        conv2d_6[0][0]       </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">leaky_re_lu_6 (LeakyReLU)        (None, 76, 76, 256)   0     batch_normalization_6[0][0] </span><br><span class="line">_______________________________________________________________________________________</span><br><span class="line">conv2d_7 (Conv2D)                (None, 76, 76, 128)   32768       leaky_re_lu_6[0][0]   </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">batch_normalization_7 (BatchNorm (None, 76, 76, 128)   512         conv2d_7[0][0]       </span><br><span class="line">_______________________________________________________________________________________</span><br><span class="line">leaky_re_lu_7 (LeakyReLU)        (None, 76, 76, 128)   0     batch_normalization_7[0][0] </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">conv2d_8 (Conv2D)                (None, 76, 76, 256)   294912      leaky_re_lu_7[0][0]   </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">batch_normalization_8 (BatchNorm (None, 76, 76, 256)   1024        conv2d_8[0][0]       </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">leaky_re_lu_8 (LeakyReLU)        (None, 76, 76, 256)   0     batch_normalization_8[0][0] </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">max_pooling2d_4 (MaxPooling2D)   (None, 38, 38, 256)   0           leaky_re_lu_8[0][0]   </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">conv2d_9 (Conv2D)                (None, 38, 38, 512)   1179648     max_pooling2d_4[0][0] </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">batch_normalization_9 (BatchNorm (None, 38, 38, 512)   2048        conv2d_9[0][0]       </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">leaky_re_lu_9 (LeakyReLU)        (None, 38, 38, 512)   0     batch_normalization_9[0][0] </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">conv2d_10 (Conv2D)               (None, 38, 38, 256)   131072      leaky_re_lu_9[0][0]   </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">batch_normalization_10 (BatchNor (None, 38, 38, 256)   1024        conv2d_10[0][0]       </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">leaky_re_lu_10 (LeakyReLU)       (None, 38, 38, 256)   0    batch_normalization_10[0][0]</span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">conv2d_11 (Conv2D)               (None, 38, 38, 512)   1179648    leaky_re_lu_10[0][0]   </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">batch_normalization_11 (BatchNor (None, 38, 38, 512)   2048        conv2d_11[0][0]       </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">leaky_re_lu_11 (LeakyReLU)       (None, 38, 38, 512)   0    batch_normalization_11[0][0]</span><br><span class="line">_______________________________________________________________________________________</span><br><span class="line">conv2d_12 (Conv2D)               (None, 38, 38, 256)   131072      leaky_re_lu_11[0][0] </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">batch_normalization_12 (BatchNor (None, 38, 38, 256)   1024        conv2d_12[0][0]       </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">leaky_re_lu_12 (LeakyReLU)       (None, 38, 38, 256)   0   batch_normalization_12[0][0]</span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">conv2d_13 (Conv2D)               (None, 38, 38, 512)   1179648     leaky_re_lu_12[0][0] </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">batch_normalization_13 (BatchNor (None, 38, 38, 512)   2048        conv2d_13[0][0]       </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">leaky_re_lu_13 (LeakyReLU)       (None, 38, 38, 512)   0    batch_normalization_13[0][0]</span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">max_pooling2d_5 (MaxPooling2D)   (None, 19, 19, 512)   0           leaky_re_lu_13[0][0] </span><br><span class="line">_______________________________________________________________________________________</span><br><span class="line">conv2d_14 (Conv2D)               (None, 19, 19, 1024)  4718592     max_pooling2d_5[0][0] </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">batch_normalization_14 (BatchNor (None, 19, 19, 1024)  4096        conv2d_14[0][0]       </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">leaky_re_lu_14 (LeakyReLU)       (None, 19, 19, 1024)  0    batch_normalization_14[0][0]</span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">conv2d_15 (Conv2D)               (None, 19, 19, 512)   524288      leaky_re_lu_14[0][0] </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">batch_normalization_15 (BatchNor (None, 19, 19, 512)   2048        conv2d_15[0][0]       </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">leaky_re_lu_15 (LeakyReLU)       (None, 19, 19, 512)   0    batch_normalization_15[0][0]</span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">conv2d_16 (Conv2D)               (None, 19, 19, 1024)  4718592     leaky_re_lu_15[0][0] </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">batch_normalization_16 (BatchNor (None, 19, 19, 1024)  4096        conv2d_16[0][0]       </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">leaky_re_lu_16 (LeakyReLU)       (None, 19, 19, 1024)  0    batch_normalization_16[0][0]</span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">conv2d_17 (Conv2D)               (None, 19, 19, 512)   524288      leaky_re_lu_16[0][0] </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">batch_normalization_17 (BatchNor (None, 19, 19, 512)   2048        conv2d_17[0][0]       </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">leaky_re_lu_17 (LeakyReLU)       (None, 19, 19, 512)   0    batch_normalization_17[0][0]</span><br><span class="line">_______________________________________________________________________________________</span><br><span class="line">conv2d_18 (Conv2D)               (None, 19, 19, 1024)  4718592     leaky_re_lu_17[0][0] </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">batch_normalization_18 (BatchNor (None, 19, 19, 1024)  4096        conv2d_18[0][0]       </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">leaky_re_lu_18 (LeakyReLU)       (None, 19, 19, 1024)  0    batch_normalization_18[0][0]</span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">conv2d_19 (Conv2D)               (None, 19, 19, 1024)  9437184     leaky_re_lu_18[0][0] </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">batch_normalization_19 (BatchNor (None, 19, 19, 1024)  4096        conv2d_19[0][0]       </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">conv2d_21 (Conv2D)               (None, 38, 38, 64)    32768       leaky_re_lu_13[0][0]</span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">leaky_re_lu_19 (LeakyReLU)       (None, 19, 19, 1024)  0    batch_normalization_19[0][0]</span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">batch_normalization_21 (BatchNor (None, 38, 38, 64)    256         conv2d_21[0][0]       </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">conv2d_20 (Conv2D)               (None, 19, 19, 1024)  9437184     leaky_re_lu_19[0][0]</span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">leaky_re_lu_21 (LeakyReLU)       (None, 38, 38, 64)    0    batch_normalization_21[0][0]</span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">batch_normalization_20 (BatchNor (None, 19, 19, 1024)  4096        conv2d_20[0][0]       </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">space_to_depth_x2 (Lambda)       (None, 19, 19, 256)   0           leaky_re_lu_21[0][0] </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">leaky_re_lu_20 (LeakyReLU)       (None, 19, 19, 1024)  0    batch_normalization_20[0][0]</span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">concatenate_1 (Concatenate)      (None, 19, 19, 1280)  0         space_to_depth_x2[0][0] </span><br><span class="line">                                                                  leaky_re_lu_20[0][0] </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">conv2d_22 (Conv2D)               (None, 19, 19, 1024)  11796480    concatenate_1[0][0]   </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">batch_normalization_22 (BatchNor (None, 19, 19, 1024)  4096        conv2d_22[0][0]       </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">leaky_re_lu_22 (LeakyReLU)       (None, 19, 19, 1024)  0    batch_normalization_22[0][0]</span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">conv2d_23 (Conv2D)               (None, 19, 19, 425)   435625      leaky_re_lu_22[0][0] </span><br><span class="line">===============================================================================================</span><br><span class="line">Total params: 50,983,561</span><br><span class="line">Trainable params: 50,962,889</span><br><span class="line">Non-trainable params: 20,672</span><br><span class="line">_______________________________________________________________________________________________</span><br></pre></td></tr></table></figure></li></ul></li><li><p>You can find implementations for YOLO here:</p><ul><li>https://github.com/allanzelener/YAD2K</li><li>https://github.com/thtrieu/darkflow</li><li>https://pjreddie.com/darknet/yolo/</li></ul></li></ul><h3 id="region-proposals-r-cnn">Region Proposals (R-CNN)</h3><ul><li><p>R-CNN is an algorithm that also makes an object detection.</p></li><li><p>Yolo tells that its faster:</p><ul><li><blockquote><p>Our model has several advantages over classifier-based systems. It looks at the whole image at test time so its predictions are informed by global context in the image. It also makes predictions with a single network evaluation unlike systems like R-CNN which require thousands for a single image. This makes it extremely fast, more than 1000x faster than R-CNN and 100x faster than Fast R-CNN. See our paper for more details on the full system.</p></blockquote></li></ul></li><li><p>But one of the downsides of YOLO that it process a lot of areas where no objects are present.</p></li><li><p><strong>R-CNN</strong> stands for regions with Conv Nets.</p></li><li><p>R-CNN tries to pick a few windows and run a Conv net (your confident classifier) on top of them.</p></li><li><p>The algorithm R-CNN uses to pick windows is called a segmentation algorithm. Outputs something like this:</p><ul><li><img src="34.png"></li></ul></li><li><p>If for example the segmentation algorithm produces 2000 blob then we should run our classifier/CNN on top of these blobs.</p></li><li><p>There has been a lot of work regarding R-CNN tries to make it faster:</p><ul><li>R-CNN:<ul><li>Propose regions. Classify proposed regions one at a time. Output label + bounding box.</li><li>Downside is that its slow.</li><li><a href="https://arxiv.org/abs/1311.2524" target="_blank" rel="noopener">[Girshik et. al, 2013. Rich feature hierarchies for accurate object detection and semantic segmentation]</a></li></ul></li><li>Fast R-CNN:<ul><li>Propose regions. Use convolution implementation of sliding windows to classify all the proposed regions.</li><li><a href="https://arxiv.org/abs/1504.08083" target="_blank" rel="noopener">[Girshik, 2015. Fast R-CNN]</a></li></ul></li><li>Faster R-CNN:<ul><li>Use convolutional network to propose regions.</li><li><a href="https://arxiv.org/abs/1506.01497" target="_blank" rel="noopener">[Ren et. al, 2016. Faster R-CNN: Towards real-time object detection with region proposal networks]</a></li></ul></li><li>Mask R-CNN:<ul><li>https://arxiv.org/abs/1703.06870</li></ul></li></ul></li><li><p>Most of the implementation of faster R-CNN are still slower than YOLO.</p></li><li><p>Andew Ng thinks that the idea behind YOLO is better than R-CNN because you are able to do all the things in just one time instead of two times.</p></li><li><p>Other algorithms that uses one shot to get the output includes <strong>SSD</strong> and <strong>MultiBox</strong>.</p><ul><li><a href="https://arxiv.org/abs/1512.02325" target="_blank" rel="noopener">[Wei Liu, et. al 2015 SSD: Single Shot MultiBox Detector]</a></li></ul></li><li><p><strong>R-FCN</strong> is similar to Faster R-CNN but more efficient.</p><ul><li><a href="https://arxiv.org/abs/1605.06409" target="_blank" rel="noopener">[Jifeng Dai, et. al 2016 R-FCN: Object Detection via Region-based Fully Convolutional Networks ]</a></li></ul></li></ul><h2 id="special-applications-face-recognition-neural-style-transfer">Special applications: Face recognition &amp; Neural style transfer</h2><blockquote><p>Discover how CNNs can be applied to multiple fields, including art generation and face recognition. Implement your own algorithm to generate art and recognize faces!</p></blockquote><h3 id="face-recognition">Face Recognition</h3><h4 id="what-is-face-recognition">What is face recognition?</h4><ul><li>Face recognition system identifies a person's face. It can work on both images or videos.</li><li><strong><u>Liveness detection</u></strong> within a video face recognition system prevents the network from identifying a face in an image. It can be learned by supervised deep learning using a dataset for live human and in-live human and sequence learning.</li><li>Face verification vs. face recognition:<ul><li>Verification:<ul><li>Input: image, name/ID. (1 : 1)</li><li>Output: whether the input image is that of the claimed person.</li><li>"is this the claimed person?"</li></ul></li><li>Recognition:<ul><li>Has a database of K persons</li><li>Get an input image</li><li>Output ID if the image is any of the K persons (or not recognized)</li><li>"who is this person?"</li></ul></li></ul></li><li>We can use a face verification system to make a face recognition system. The accuracy of the verification system has to be high (around 99.9% or more) to be use accurately within a recognition system because the recognition system accuracy will be less than the verification system given K persons.</li></ul><h4 id="one-shot-learning">One Shot Learning</h4><ul><li>One of the face recognition challenges is to solve one shot learning problem.</li><li>One Shot Learning: A recognition system is able to recognize a person, learning from one image.</li><li>Historically deep learning doesn't work well with a small number of data.</li><li>Instead to make this work, we will learn a <strong>similarity function</strong>:<ul><li>d( <strong>img1</strong>, <strong>img2</strong> ) = degree of difference between images.</li><li>We want d result to be low in case of the same faces.</li><li>We use tau T as a threshold for d:<ul><li>If d( <strong>img1</strong>, <strong>img2</strong> ) &lt;= T Then the faces are the same.</li></ul></li></ul></li><li>Similarity function helps us solving the one shot learning. Also its robust to new inputs.</li></ul><h4 id="siamese-network">Siamese Network</h4><ul><li>We will implement the similarity function using a type of NNs called Siamease Network in which we can pass multiple inputs to the two or more networks with the same architecture and parameters.</li><li>Siamese network architecture are as the following:<ul><li><img src="35.png"></li><li>We make 2 identical conv nets which encodes an input image into a vector. In the above image the vector shape is (128, )</li><li>The loss function will be <code>d(x1, x2) = || f(x1) - f(x2) ||^2</code></li><li>If <code>X1</code>, <code>X2</code> are the same person, we want d to be low. If they are different persons, we want d to be high.</li><li><a href="https://www.cv-foundation.org/openaccess/content_cvpr_2014/html/Taigman_DeepFace_Closing_the_2014_CVPR_paper.html" target="_blank" rel="noopener">[Taigman et. al., 2014. DeepFace closing the gap to human level performance]</a></li></ul></li></ul><h4 id="triplet-loss">Triplet Loss</h4><ul><li>Triplet Loss is one of the loss functions we can use to solve the similarity distance in a Siamese network.</li><li>Our learning objective in the triplet loss function is to get the distance between an <strong>Anchor</strong> image and a <strong>positive</strong> or a <strong>negative</strong> image.<ul><li>Positive means same person, while negative means different person.</li></ul></li><li>The triplet name came from that we are comparing an anchor A with a positive P and a negative N image.</li><li>Formally we want:<ul><li>Positive distance to be less than negative distance</li><li><code>||f(A) - f(P)||^2  &lt;= ||f(A) - f(N)||^2</code></li><li>Then</li><li><code>||f(A) - f(P)||^2  - ||f(A) - f(N)||^2 &lt;= 0</code></li><li>To make sure the NN won't get an output of zeros easily:</li><li><code>||f(A) - f(P)||^2  - ||f(A) - f(N)||^2 &lt;= -alpha</code><ul><li>Alpha is a small number. Sometimes its called the margin.</li></ul></li><li>Then</li><li><code>||f(A) - f(P)||^2  - ||f(A) - f(N)||^2 + alpha &lt;= 0</code></li></ul></li><li>Final Loss function:<ul><li>Given 3 images (A, P, N)</li><li><code>L(A, P, N) = max (||f(A) - f(P)||^2  - ||f(A) - f(N)||^2 + alpha , 0)</code></li><li><code>J = Sum(L(A[i], P[i], N[i]) , i)</code> for all triplets of images.</li></ul></li><li>You need multiple images of the same person in your dataset. Then get some triplets out of your dataset. Dataset should be big enough.</li><li>Choosing the triplets A, P, N:<ul><li>During training if A, P, N are chosen randomly (Subjet to A and P are the same and A and N aren't the same) then one of the problems this constrain is easily satisfied<ul><li><code>d(A, P) + alpha &lt;= d (A, N)</code></li><li>So the NN wont learn much</li></ul></li><li>What we want to do is choose triplets that are <strong>hard</strong> to train on.<ul><li>So for all the triplets we want this to be satisfied:</li><li><code>d(A, P) + alpha &lt;= d (A, N)</code></li><li>This can be achieved by for example same poses!</li><li>Find more at the paper.</li></ul></li></ul></li><li>Details are in this paper <a href="https://arxiv.org/abs/1503.03832" target="_blank" rel="noopener">[Schroff et al.,2015, FaceNet: A unified embedding for face recognition and clustering]</a></li><li>Commercial recognition systems are trained on a large datasets like 10/100 million images.</li><li>There are a lot of pretrained models and parameters online for face recognition.</li></ul><h4 id="face-verification-and-binary-classification">Face Verification and Binary Classification</h4><ul><li>Triplet loss is one way to learn the parameters of a conv net for face recognition there's another way to learn these parameters as a straight binary classification problem.</li><li>Learning the similarity function another way:<ul><li><img src="36.png"></li><li>The final layer is a sigmoid layer.</li><li><code>Y' = wi * Sigmoid ( f(x(i)) - f(x(j)) ) + b</code> where the subtraction is the Manhattan distance between f(x(i)) and f(x(j))</li><li>Some other similarities can be Euclidean and Ki square similarity.</li><li>The NN here is Siamese means the top and bottom convs has the same parameters.</li></ul></li><li>The paper for this work: <a href="https://www.cv-foundation.org/openaccess/content_cvpr_2014/html/Taigman_DeepFace_Closing_the_2014_CVPR_paper.html" target="_blank" rel="noopener">[Taigman et. al., 2014. DeepFace closing the gap to human level performance]</a></li><li>A good performance/deployment trick:<ul><li>Pre-compute all the images that you are using as a comparison to the vector f(x(j))</li><li>When a new image that needs to be compared, get its vector f(x(i)) then put it with all the pre computed vectors and pass it to the sigmoid function.</li></ul></li><li>This version works quite as well as the triplet loss function.</li><li>Available implementations for face recognition using deep learning includes:<ul><li><a href="https://cmusatyalab.github.io/openface/" target="_blank" rel="noopener">Openface</a></li><li><a href="https://github.com/davidsandberg/facenet" target="_blank" rel="noopener">FaceNet</a></li><li><a href="https://github.com/RiweiChen/DeepFace" target="_blank" rel="noopener">DeepFace</a></li></ul></li></ul><h3 id="neural-style-transfer">Neural Style Transfer</h3><h4 id="what-is-neural-style-transfer">What is neural style transfer?</h4><ul><li>Neural style transfer is one of the application of Conv nets.</li><li>Neural style transfer takes a content image <code>C</code> and a style image <code>S</code> and generates the content image <code>G</code> with the style of style image.</li><li><img src="37.png"></li><li>In order to implement this you need to look at the features extracted by the Conv net at the shallower and deeper layers.</li><li>It uses a previously trained convolutional network like VGG, and builds on top of that. The idea of using a network trained on a different task and applying it to a new task is called transfer learning.</li></ul><h4 id="what-are-deep-convnets-learning">What are deep ConvNets learning?</h4><ul><li>Visualizing what a deep network is learning:<ul><li>Given this AlexNet like Conv net:<ul><li><img src="38.png"></li></ul></li><li>Pick a unit in layer l. Find the nine image patches that maximize the unit's activation.<ul><li>Notice that a hidden unit in layer one will see relatively small portion of NN, so if you plotted it it will match a small image in the shallower layers while it will get larger image in deeper layers.</li></ul></li><li>Repeat for other units and layers.</li><li>It turns out that layer 1 are learning the low level representations like colors and edges.</li></ul></li><li>You will find out that each layer are learning more complex representations.<ul><li><img src="39.png"></li></ul></li><li>The first layer was created using the weights of the first layer. Other images are generated using the receptive field in the image that triggered the neuron to be max.</li><li><a href="https://arxiv.org/abs/1311.2901" target="_blank" rel="noopener">[Zeiler and Fergus., 2013, Visualizing and understanding convolutional networks]</a></li><li>A good explanation on how to get <strong>receptive field</strong> given a layer:<ul><li><img src="receptiveField.png"></li><li>From <a href="https://medium.com/@nikasa1889/a-guide-to-receptive-field-arithmetic-for-convolutional-neural-networks-e0f514068807" target="_blank" rel="noopener">A guide to receptive field arithmetic for Convolutional Neural Networks</a></li></ul></li></ul><h4 id="cost-function">Cost Function</h4><ul><li>We will define a cost function for the generated image that measures how good it is.</li><li>Give a content image C, a style image S, and a generated image G:<ul><li><code>J(G) = alpha * J(C,G) + beta * J(S,G)</code></li><li><code>J(C, G)</code> measures how similar is the generated image to the Content image.</li><li><code>J(S, G)</code> measures how similar is the generated image to the Style image.</li><li>alpha and beta are relative weighting to the similarity and these are hyperparameters.</li></ul></li><li>Find the generated image G:<ol type="1"><li>Initiate G randomly<ul><li>For example G: 100 X 100 X 3</li></ul></li><li>Use gradient descent to minimize <code>J(G)</code><ul><li><code>G = G - dG</code> We compute the gradient image and use gradient decent to minimize the cost function.</li></ul></li></ol></li><li>The iterations might be as following image:<ul><li>To Generate this:<ul><li><img src="40.png"></li></ul></li><li>You will go through this:<ul><li><img src="41.png"></li></ul></li></ul></li></ul><h4 id="content-cost-function">Content Cost Function</h4><ul><li>In the previous section we showed that we need a cost function for the content image and the style image to measure how similar is them to each other.</li><li>Say you use hidden layer <code>l</code> to compute content cost.<ul><li>If we choose <code>l</code> to be small (like layer 1), we will force the network to get similar output to the original content image.</li><li>In practice <code>l</code> is not too shallow and not too deep but in the middle.</li></ul></li><li>Use pre-trained ConvNet. (E.g., VGG network)</li><li>Let <code>a(c)[l]</code> and <code>a(G)[l]</code> be the activation of layer <code>l</code> on the images.</li><li>If <code>a(c)[l]</code> and <code>a(G)[l]</code> are similar then they will have the same content<ul><li><code>J(C, G) at a layer l = 1/2 || a(c)[l] - a(G)[l] ||^2</code></li></ul></li></ul><h4 id="style-cost-function">Style Cost Function</h4><ul><li>Meaning of the <strong><em>style</em></strong> of an image:<ul><li>Say you are using layer l's activation to measure <strong><em>style</em></strong>.</li><li>Define style as correlation between <strong>activations</strong> across <strong>channels</strong>.<ul><li>That means given an activation like this:<ul><li><img src="42.png"></li></ul></li><li>How correlate is the orange channel with the yellow channel?</li><li>Correlated means if a value appeared in a specific channel a specific value will appear too (Depends on each other).</li><li>Uncorrelated means if a value appeared in a specific channel doesn't mean that another value will appear (Not depend on each other)</li></ul></li><li>The correlation tells you how a components might occur or not occur together in the same image.</li></ul></li><li>The correlation of style image channels should appear in the generated image channels.</li><li>Style matrix (Gram matrix):<ul><li>Let <code>a(l)[i, j, k]</code> be the activation at l with <code>(i=H, j=W, k=C)</code></li><li>Also <code>G(l)(s)</code> is matrix of shape <code>nc(l) x nc(l)</code><ul><li>We call this matrix style matrix or Gram matrix.</li><li>In this matrix each cell will tell us how correlated is a channel to another channel.</li></ul></li><li>To populate the matrix we use these equations to compute style matrix of the style image and the generated image.<ul><li><img src="43.png"></li><li>As it appears its the sum of the multiplication of each member in the matrix.</li></ul></li></ul></li><li>To compute gram matrix efficiently:<ul><li>Reshape activation from H X W X C to HW X C</li><li>Name the reshaped activation F.</li><li><code>G[l] = F * F.T</code></li></ul></li><li>Finally the cost function will be as following:<ul><li><code>J(S, G) at layer l = (1/ 2 * H * W * C) || G(l)(s) - G(l)(G) ||</code></li></ul></li><li>And if you have used it from some layers<ul><li><code>J(S, G) = Sum (lamda[l]*J(S, G)[l], for all layers)</code></li></ul></li><li>Steps to be made if you want to create a tensorflow model for neural style transfer:<ol type="1"><li>Create an Interactive Session.</li><li>Load the content image.</li><li>Load the style image</li><li>Randomly initialize the image to be generated</li><li>Load the VGG16 model</li><li>Build the TensorFlow graph:<ul><li>Run the content image through the VGG16 model and compute the content cost</li><li>Run the style image through the VGG16 model and compute the style cost</li><li>Compute the total cost</li><li>Define the optimizer and the learning rate</li></ul></li><li>Initialize the TensorFlow graph and run it for a large number of iterations, updating the generated image at every step.</li></ol></li></ul><h4 id="d-and-3d-generalizations">1D and 3D Generalizations</h4><ul><li>So far we have used the Conv nets for images which are 2D.</li><li>Conv nets can work with 1D and 3D data as well.</li><li>An example of 1D convolution:<ul><li>Input shape (14, 1)</li><li>Applying 16 filters with F = 5 , S = 1</li><li>Output shape will be 10 X 16</li><li>Applying 32 filters with F = 5, S = 1</li><li>Output shape will be 6 X 32</li></ul></li><li>The general equation <code>(N - F)/S + 1</code> can be applied here but here it gives a vector rather than a 2D matrix.</li><li>1D data comes from a lot of resources such as waves, sounds, heartbeat signals.</li><li>In most of the applications that uses 1D data we use Recurrent Neural Network RNN.</li><li>3D data also are available in some applications like CT scan:<ul><li><img src="44.png"></li></ul></li><li>Example of 3D convolution:<ul><li>Input shape (14, 14,14, 1)</li><li>Applying 16 filters with F = 5 , S = 1</li><li>Output shape (10, 10, 10, 16)</li><li>Applying 32 filters with F = 5, S = 1</li><li>Output shape will be (6, 6, 6, 32)</li></ul></li></ul><h2 id="extras">Extras</h2><h3 id="keras">Keras</h3><ul><li>Keras is a high-level neural networks API (programming framework), written in Python and capable of running on top of several lower-level frameworks including TensorFlow, Theano, and CNTK.</li><li>Keras was developed to enable deep learning engineers to build and experiment with different models very quickly.</li><li>Just as TensorFlow is a higher-level framework than Python, Keras is an even higher-level framework and provides additional abstractions.</li><li>Keras will work fine for many common models.</li><li>Layers in Keras:<ul><li>Dense (Fully connected layers).<ul><li>A linear function followed by a non linear function.</li></ul></li><li>Convolutional layer.</li><li>Pooling layer.</li><li>Normalisation layer.<ul><li>A batch normalization layer.</li></ul></li><li>Flatten layer<ul><li>Flatten a matrix into vector.</li></ul></li><li>Activation layer<ul><li>Different activations include: relu, tanh, sigmoid, and softmax.</li></ul></li></ul></li><li>To train and test a model in Keras there are four steps:<ol type="1"><li>Create the model.</li><li>Compile the model by calling <code>model.compile(optimizer = "...", loss = "...", metrics = ["accuracy"])</code></li><li>Train the model on train data by calling <code>model.fit(x = ..., y = ..., epochs = ..., batch_size = ...)</code><ul><li>You can add a validation set while training too.</li></ul></li><li>Test the model on test data by calling <code>model.evaluate(x = ..., y = ...)</code></li></ol></li><li>Summarize of step in Keras: Create-&gt;Compile-&gt;Fit/Train-&gt;Evaluate/Test</li><li><code>Model.summary()</code> gives a lot of useful informations regarding your model including each layers inputs, outputs, and number of parameters at each layer.</li><li>To choose the Keras backend you should go to <code>$HOME/.keras/keras.json</code> and change the file to the desired backend like Theano or Tensorflow or whatever backend you want.</li><li>After you create the model you can run it in a tensorflow session without compiling, training, and testing capabilities.</li><li>You can save your model with <code>model_save</code> and load your model using <code>model_load</code> This will save your whole trained model to disk with the trained weights.</li></ul><p><br><br> <br><br> These Notes were made by <a href="mailto:mma18@fayoum.edu.eg" target="_blank" rel="noopener">Mahmoud Badry</a> <span class="citation" data-cites="2017">@2017</span></p>]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Convolutional Neural Networks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sequence Models</title>
      <link href="/Sequence-Models/2019/03/27/"/>
      <url>/Sequence-Models/2019/03/27/</url>
      
        <content type="html"><![CDATA[<p><strong>Reference from lecture slides of Andrew Ng and github repo from <a href="https://github.com/mbadry1/DeepLearning.ai-Summary" target="_blank" rel="noopener">DeepLearning.ai-Summary</a></strong></p><h1 id="sequence-models">Sequence Models</h1><p>This is the fifth and final course of the deep learning specialization at <a href="https://www.coursera.org/specializations/deep-learning" target="_blank" rel="noopener">Coursera</a> which is moderated by <a href="http://deeplearning.ai/" target="_blank" rel="noopener">deeplearning.ai</a>. The course is taught by Andrew Ng.</p><h2 id="table-of-contents">Table of contents</h2><ul><li><a href="#sequence-models">Sequence Models</a><ul><li><a href="#table-of-contents">Table of contents</a></li><li><a href="#course-summary">Course summary</a></li><li><a href="#recurrent-neural-networks">Recurrent Neural Networks</a><ul><li><a href="#why-sequence-models">Why sequence models</a></li><li><a href="#notation">Notation</a></li><li><a href="#recurrent-neural-network-model">Recurrent Neural Network Model</a></li><li><a href="#backpropagation-through-time">Backpropagation through time</a></li><li><a href="#different-types-of-rnns">Different types of RNNs</a></li><li><a href="#language-model-and-sequence-generation">Language model and sequence generation</a></li><li><a href="#sampling-novel-sequences">Sampling novel sequences</a></li><li><a href="#vanishing-gradients-with-rnns">Vanishing gradients with RNNs</a></li><li><a href="#gated-recurrent-unit-gru">Gated Recurrent Unit (GRU)</a></li><li><a href="#long-short-term-memory-lstm">Long Short Term Memory (LSTM)</a></li><li><a href="#bidirectional-rnn">Bidirectional RNN</a></li><li><a href="#deep-rnns">Deep RNNs</a></li><li><a href="#back-propagation-with-rnns">Back propagation with RNNs</a></li></ul></li><li><a href="#natural-language-processing--word-embeddings">Natural Language Processing &amp; Word Embeddings</a><ul><li><a href="#introduction-to-word-embeddings">Introduction to Word Embeddings</a><ul><li><a href="#word-representation">Word Representation</a></li><li><a href="#using-word-embeddings">Using word embeddings</a></li><li><a href="#properties-of-word-embeddings">Properties of word embeddings</a></li><li><a href="#embedding-matrix">Embedding matrix</a></li></ul></li><li><a href="#learning-word-embeddings-word2vec--glove">Learning Word Embeddings: Word2vec &amp; GloVe</a><ul><li><a href="#learning-word-embeddings">Learning word embeddings</a></li><li><a href="#word2vec">Word2Vec</a></li><li><a href="#negative-sampling">Negative Sampling</a></li><li><a href="#glove-word-vectors">GloVe word vectors</a></li></ul></li><li><a href="#applications-using-word-embeddings">Applications using Word Embeddings</a><ul><li><a href="#sentiment-classification">Sentiment Classification</a></li><li><a href="#debiasing-word-embeddings">Debiasing word embeddings</a></li></ul></li></ul></li><li><a href="#sequence-models--attention-mechanism">Sequence models &amp; Attention mechanism</a><ul><li><a href="#various-sequence-to-sequence-architectures">Various sequence to sequence architectures</a><ul><li><a href="#basic-models">Basic Models</a></li><li><a href="#picking-the-most-likely-sentence">Picking the most likely sentence</a></li><li><a href="#beam-search">Beam Search</a></li><li><a href="#refinements-to-beam-search">Refinements to Beam Search</a></li><li><a href="#error-analysis-in-beam-search">Error analysis in beam search</a></li><li><a href="#bleu-score">BLEU Score</a></li><li><a href="#attention-model-intuition">Attention Model Intuition</a></li><li><a href="#attention-model">Attention Model</a></li></ul></li><li><a href="#speech-recognition---audio-data">Speech recognition - Audio data</a><ul><li><a href="#speech-recognition">Speech recognition</a></li><li><a href="#trigger-word-detection">Trigger Word Detection</a></li></ul></li></ul></li><li><a href="#extras">Extras</a><ul><li><a href="#machine-translation-attention-model-from-notebooks">Machine translation attention model (From notebooks)</a></li></ul></li></ul></li></ul><h2 id="course-summary">Course summary</h2><p>Here are the course summary as its given on the course <a href="https://www.coursera.org/learn/nlp-sequence-models" target="_blank" rel="noopener">link</a>:</p><blockquote><p>This course will teach you how to build models for natural language, audio, and other sequence data. Thanks to deep learning, sequence algorithms are working far better than just two years ago, and this is enabling numerous exciting applications in speech recognition, music synthesis, chatbots, machine translation, natural language understanding, and many others.</p><p>You will: - Understand how to build and train Recurrent Neural Networks (RNNs), and commonly-used variants such as GRUs and LSTMs. - Be able to apply sequence models to natural language problems, including text synthesis. - Be able to apply sequence models to audio applications, including speech recognition and music synthesis.</p><p>This is the fifth and final course of the Deep Learning Specialization.</p></blockquote><h2 id="recurrent-neural-networks">Recurrent Neural Networks</h2><blockquote><p>Learn about recurrent neural networks. This type of model has been proven to perform extremely well on temporal data. It has several variants including LSTMs, GRUs and Bidirectional RNNs, which you are going to learn about in this section.</p></blockquote><h3 id="why-sequence-models">Why sequence models</h3><ul><li>Sequence Models like RNN and LSTMs have greatly transformed learning on sequences in the past few years.</li><li>Examples of sequence data in applications:<ul><li>Speech recognition (<strong>Sequence to sequence</strong>):<ul><li>X: Wave sequence</li><li>Y: Text sequence</li></ul></li><li>Music generation (<strong>one to sequence</strong>):<ul><li>X: (Can be nothing or an integer)</li><li>Y: Wave sequence</li></ul></li><li>Sentiment classification (<strong>sequence to one</strong>):<ul><li>X: Text sequence</li><li>Y: Integer rating from one to five</li></ul></li><li>DNA sequence analysis (<strong>sequence to sequence</strong>):<ul><li>X: DNA sequence</li><li>Y: DNA Labels</li></ul></li><li>Machine translation (<strong>sequence to sequence</strong>):<ul><li>X: Text sequence (In a language)</li><li>Y: Text sequence (In other language)</li></ul></li><li>Video activity recognition (<strong>Sequence to one</strong>):<ul><li>X: Video frames</li><li>Y: Label (Activity)</li></ul></li><li>Name entity recognition (<strong>Sequence to sequence</strong>):<ul><li>X: Text sequence</li><li>Y: Label sequence</li><li>Can be used by seach engines to index different type of words inside a text.</li></ul></li></ul></li><li>As you can see there are different data with different input and outputs - sequence or one - that can be learned by supervised learning models.</li><li>There are different ways and models to tackle different sequence problem.</li></ul><h3 id="notation">Notation</h3><ul><li>In this section we will discuss the notations that we will use through the course.</li><li><strong>Motivating example</strong>:<ul><li>In the content of name entity recognition application let:<ul><li>X: "Harry Potter and Hermoine Granger invented a new spell."</li><li>Y: 1 1 0 1 1 0 0 0 0</li><li>Both elements has a shape of 9. 1 means its a name, while 0 means its not a name.</li></ul></li></ul></li><li>We will index the first element of X by X<sup>&lt;1&gt;</sup>, the second X<sup>&lt;2&gt;</sup> and so on.<ul><li>X<sup>&lt;1&gt;</sup> = Harry</li><li>X<sup>&lt;2&gt;</sup> = Potter</li></ul></li><li>Similarly, we will index the first element of Y by Y<sup>&lt;1&gt;</sup>, the second Y<sup>&lt;2&gt;</sup> and so on.<ul><li>Y<sup>&lt;1&gt;</sup> = 1</li><li>Y<sup>&lt;2&gt;</sup> = 1</li></ul></li><li>X<sup>&lt;t&gt;</sup> gets an element by index t.</li><li>T<sub>x</sub> is the size of the input sequence and T<sub>y</sub> is the size of the output sequence.<ul><li>T<sub>x</sub> = T<sub>y</sub> = 9 in the last example although they can be different in other problems than name entity one.</li></ul></li><li>X<sub>(i)</sub><sup>&lt;t&gt;</sup> is the element t of the sequence i in the training. Similarly for Y</li><li>T<sub>x</sub> <sup>(i)</sup> is the size of the input sequence i. It can be different across the sets. Similarly for Y</li><li><strong>Representing words</strong>:<ul><li>We will now work in this course with <strong>NLP</strong> which stands for nature language processing. One of the challenges of NLP is how can we represent a word?</li><li><u>The first thing</u> we need a <strong>vocabulary</strong> list that contains all the words in our target sets.<ul><li>Example:<ul><li>[a ... And ... Harry ... Potter ... Zulu ]</li><li>Each word will have a unique index that it can be represented with.</li><li>The sorting here is by alphabetic order.</li></ul></li></ul></li><li>Vocabulary sizes in modern applications are from 30,000 to 50,000. 100,000 is not uncommon. Some of the bigger companies uses a million.</li><li>To build vocabulary list, you can read all the text you have and get m words with the most occurrence, or search online for m most occurrence words.</li><li><u>The next step</u> is to create a one <strong>hot encoding sequence</strong> for each word in your dataset given the vocabulary you have created.</li><li>While converting, what if you meet a word thats not in your dictionary?<ul><li>Well you can add a token in the vocabulary <code>&lt;UNK&gt;</code> which stands for unknown text and use its index in filling your one hot vector.</li></ul></li><li>Full example can be found here:<ul><li><img src="01.png"></li></ul></li></ul></li></ul><h3 id="recurrent-neural-network-model">Recurrent Neural Network Model</h3><ul><li>Why not a standard network for sequence problems? There are two problems:<ul><li>Inputs, outputs can be different lengths in different examples!<ul><li>This can be solved in normal NNs by paddings with the maximum lengths but its not a good solution.</li></ul></li><li>Doesn't share features learned across different positions of text/sequence.<ul><li>Using a feature sharing like in CNNs can significantly reduce the number of parameters in your model. Thats what we will do in RNNs.</li></ul></li></ul></li><li>Recurrent neural networks doesn't have the two mentioned problems.</li><li>Lets build a RNN that solves <strong>name entity recognition</strong> task:<ul><li><img src="02.png"></li><li>In this problem T<sub>x</sub> = T<sub>y</sub>. In other problems where they aren't equal, the RNN architecture may be different.</li><li>a<sup>&lt;0&gt;</sup> is usually initialized with zeros, but some others may initialize it randomly in some cases.</li><li>There are three weight matrices here: W<sub>ax</sub>, W<sub>aa</sub>, and W<sub>ya</sub> with shapes:<ul><li>W<sub>ax</sub>: (NoOfHiddenNeurons, n<sub>x</sub>)</li><li>W<sub>aa</sub>: (NoOfHiddenNeurons, NoOfHiddenNeurons)</li><li>W<sub>ya</sub>: (n<sub>y</sub>, NoOfHiddenNeurons)</li></ul></li></ul></li><li>The weight matrix W<sub>aa</sub> is the memory the RNN is trying to maintain from the previous layers.</li><li>A lot of papers and books write the same architecture this way:<ul><li><img src="03.png"></li><li>Its harder to interpreter. Its easier to roll this drawings to the unrolled version we have descried.</li></ul></li><li>In the discussed RNN architecture, the current output y<sup>^&lt;t&gt;</sup> depends on the previous inputs and activations.</li><li>Lets have this example ' He Said, "Teddy Roosevelt was a great president" '. In this example Teddy is a person name but we know that from the word <strong>President</strong> that came after Teddy not from <strong>He</strong> and <strong>said</strong> that is before it.</li><li>So limitation of the discussed architecture is that it can not learn from behind. To address this problem we will later discuss <strong>Bidirectional</strong> RNNs (BRNNs).</li><li>Now lets discuss the forward propagation equations on the discussed architecture:<ul><li><img src="04.png"></li><li>The activation function of a is usually tanh or RELU and for y depends on your task choosing some activation functions like sigmoid and softmax. In name entity recognition task we are solving, we will use Sigmoid because we only have two classes.</li></ul></li><li>In order to help us develop complex RNN architectures, the last equations needs to be simplified a bit.</li><li><strong>Simplified RNN notation</strong>:<ul><li><img src="05.png"></li><li>w<sub>a</sub> shape: (NoOfHiddenNeurons, NoOfHiddenNeurons + n<sub>x</sub>)</li><li>[a<sup><t-1></t-1></sup>, x<sup>t</sup>] shape: (NoOfHiddenNeurons + n<sub>x</sub>, 1) ### Backpropagation through time</li></ul></li><li>Lets see how backpropagation works with the RNN architecture we have developed.</li><li>Often, Deep learning frameworks do backpropagation automatically for you. But its useful to know how it works especially in RNNs.</li><li>Here is the graph:<ul><li><img src="06.png"></li><li>Where w<sup>a</sup>, b<sup>a</sup>, w<sup>y</sup>, and b<sup>y</sup> are shared across each element in a sequence.</li></ul></li><li>We will use the cross entropy loss function:<ul><li><img src="07.png"></li><li>Where the first equation is the loss for one element and the loss for the whole sequence is given by the summation over all the calculated values.</li></ul></li><li>Graph with losses:<ul><li><img src="08.png"></li></ul></li><li>The backpropagation here is called <strong>backpropagation through time</strong> because of the passed activation <code>a</code> from one sequence element to another. ### Different types of RNNs</li><li>So far we have seen only one RNN architecture in which T<sub>x</sub> equals T<sub>Y</sub> always. In some other problems, they may not equal so we need different architectures.</li><li>The ideas in this section was inspired by Andrej Karpathy <a href="http://karpathy.github.io/2015/05/21/rnn-effectiveness/" target="_blank" rel="noopener">blog</a>. Mainly this image has all types:<ul><li><img src="09.jpg"></li></ul></li><li>The architecture we have descried before is called <strong>Many to Many</strong>.</li><li>In sentiment analysis problem, X is a text while Y is an integer that rangers from 1 to 5. The RNN architecture for that is <strong>Many to One</strong> as in Andrej Karpathy image.<ul><li><img src="10.png"></li></ul></li><li>A <strong>One to Many</strong> architecture application would be music generation.<ul><li><img src="11.png"></li><li>Note that starting the second layer we are feeding the generated output back to the network.</li></ul></li><li>There are another interesting architecture in <strong>Many To Many</strong>. Applications like machine translation inputs and outputs sequences have different lengths in most of the cases. So an alternative Many To Many architecture that fits the translation would be as follows:<ul><li><img src="12.png"></li><li>There are an encoder and a decoder in the architecture. The encoder encodes the input sequence into one matrix and feed it to the decoder to generate the outputs. Encoder and decoder have different weight matrices.</li></ul></li><li>There are another architecture which is the <strong>attention</strong> architecture which we will talk about in chapter 3. ### Language model and sequence generation</li><li>RNNs do very well in language model problems. In this section we will build a language model using RNNs.</li><li><strong>What is a language model</strong><ul><li>Lets say we are solving a speech recognition problem and some one says a sentence that can be interpreted into to two sentences:<ul><li>The apple and <strong>pair</strong> salad</li><li>The apple and <strong>pear</strong> salad</li></ul></li><li><strong>Pair</strong> and <strong>pear</strong> sounds exactly the same, so how would a speech recognition application choose from the two.</li><li>Thats where the language models comes. It gives a probability for the two sentences and the application decides the best based on this probability.</li></ul></li><li>The job of a language model is giving a probability of any given sentence .Also the probability of the next sentence.</li><li><strong>How to build language modeling with RNNs?</strong><ul><li>The first thing is to get a <strong>training set</strong>: Large corpus of target language text.</li><li>Then tokenize this training set by getting the vocabulary and then one-hot each word.</li><li>Put an end of sentence token <code>&lt;EOS&gt;</code> with the vocabulary and include it with each converted sentence. Also like we have mentioned before use the token <code>&lt;UNK&gt;</code> for the unknown words.</li></ul></li><li>Given the sentence "Cats average 15 hours of sleep a day. <code>&lt;EOS&gt;</code>"<ul><li>In training time we will use this:<ul><li><img src="13.png"></li><li>We pass to 0 vector - One hot - to the first layer.</li></ul></li><li>The loss function is defined by cross entropy loss:<ul><li><img src="14.png"></li><li><code>i</code> is for all elements in the training set.</li></ul></li></ul></li><li>To use this model:<ol type="1"><li>For predicting the chance of <strong>next word</strong>, we feed the sentence to the RNN and then get the final y<sup>^&lt;t&gt;</sup> hot vector and sort it by maximum probability.</li><li>For taking the <strong>probability of a sentence</strong>, we compute this:</li></ol><ul><li>p(y<sup>&lt;1&gt;</sup>, y<sup>&lt;2&gt;</sup>, y<sup>&lt;3&gt;</sup>) = p(y<sup>&lt;1&gt;</sup>) * p(y<sup>&lt;2&gt;</sup> | y<sup>&lt;1&gt;</sup>) * p(y<sup>&lt;3&gt;</sup> | y<sup>&lt;1&gt;</sup>, y<sup>&lt;2&gt;</sup>)</li><li>This is simply feeding the sentence to the RNN and multiply the probability for the given word in all the output hot encoded. ### Sampling novel sequences</li></ul></li><li>After a sequence model is trained on a language model, to check what the model has learned you can apply it on a sample novel sequence.</li><li>Lets see the steps of how we can sample a novel sequence from a trained sequence language model:<ol type="1"><li>Given this model:<ul><li><img src="15.png"></li></ul></li><li>We first pass a<sup>&lt;0&gt;</sup> = zeros vector, and x<sup>&lt;1&gt;</sup> = zeros vector.</li><li>Then we choose a prediction from y<sup>^&lt;1&gt;</sup> using random distribution. For example it could be "The".<ul><li>In Numpy this can be made using: <code>numpy.random.choice</code></li><li>This is the line where you get a random sentences each time you run a novel sequence.</li></ul></li><li>We pass the last predicted word with the calculated a<sup>&lt;1&gt;</sup></li><li>We keep doing 3 &amp; 4 steps for a fixed length or until we get the <code>&lt;EOS&gt;</code> token.</li><li>You can reject any <code>&lt;UNK&gt;</code> token if you mind finding it in you output.</li></ol></li><li>So far we have build a word level language model. A <strong>character</strong> level language model also can be made.</li><li>In the character level language model the vocabulary will contain <code>[a-zA-Z0-9]</code>, space, and some special characters.</li><li>Cons of character level language model compared to the word level language model:<ul><li>There will be no <code>&lt;UNK&gt;</code> token.</li><li>It can deal with any word.</li></ul></li><li>But main disadvantage you will have a larger sequences! and also more computationally expensive and harder to train. ### Vanishing gradients with RNNs</li><li><p>One of the problems with naive RNNs that it runs into <strong>vanishing gradient</strong> problems.</p></li><li><p>An RNN that process a sequence data with the size of 10,000 time sets, has 10,000 deep layers which is so hard to optimize.</p></li><li><p>To address the problem lets take an example. Suppose we are working with language modeling problem and there are two sequences that it tries to learn:</p><ul><li>"The <strong>cat</strong>, which already ate ........................, <strong>was</strong> full"</li><li>"The <strong>cats</strong>, which already ate ........................, <strong>were</strong> full"</li><li>The dots represents many words</li></ul></li><li><p>What we need to learn here that "was" came with "cat" and that "were" came with "cats". The naive RNN will find it hard to get this relation.</p></li><li><p>As we have discussed in Deep neural networks, deeper networks are luckily to get into the vanishing gradient problem. In deep nets to compute the weights of the earlier layers you have to compute all the weights after these weights which causes the gradient to vanish. That also happens with RNNs with a long sequence size.</p><ul><li><img src="16.png"> ¬†- For computing the word "Was", we need to compute the gradient for everything behind. Multiplying by fractions tends to vanish the gradient, while multiplication of large number tends to explode it.</li><li>Therefore half of your weights may not be updated properly!</li></ul></li><li><p>In the problem we descried it means that its hard for the network to memorize "was" word all over back to "cat". So in this case, the network won't be identify the singular/plural words so that it give it the right grammar word.</p></li><li><p>The conclusion is that RNNs aren't good in <strong>long term dependencies</strong>.</p></li><li><blockquote><p>In theory, RNNs are absolutely capable of handling such ‚Äúlong-term dependencies.‚Äù A human could carefully pick parameters for them to solve toy problems of this form. Sadly, in practice, RNNs don‚Äôt seem to be able to learn them. http://colah.github.io/posts/2015-08-Understanding-LSTMs/</p></blockquote></li><li><p>Vanishing gradients is tends to be the bigger problems with RNNs than the Exploding gradients problem. We will discuss how to solve it in the next sections.</p></li><li><p>Exploding gradients can be easily seen when your weight values become <code>NAN</code> . So one of the ways solve exploding gradient is to apply <strong>gradient clipping</strong> means if your gradient is more than a threshold deal with the gradient as a fixed value.</p><ul><li><img src="26.png"></li></ul></li><li><p><strong>Extra</strong>:</p><ul><li>Solution for the Exploding gradient problem:<ul><li>Truncated back propagation.<ul><li>Not to update all the weights in the way back.</li><li>Not optimal. You won't update all the weights.</li></ul></li><li>Gradient clipping.</li></ul></li><li>Solution for the Vanishing gradient problem:<ul><li>Weight initialization.<ul><li>Like he initialization.</li></ul></li><li>Echo state networks.</li><li>Use LSTM/GRU networks.<ul><li>Most popular.</li><li>We will discuss it next. ### Gated Recurrent Unit (GRU)</li></ul></li></ul></li></ul></li><li><p>GRU is an RNN type that can help solve the vanishing gradient problem and can remember the long term dependencies.</p></li><li><p>The basic RNN unit can be visualized to be like this:</p><ul><li><img src="17.png"></li></ul></li><li><p>We will represent the GRU with a similar drawings.</p></li><li><p>Each layer in <strong>GRUs</strong> has a new variable <code>C</code> which is the memory cell. It can tell to wether memorize a something or not.</p></li><li><p>In GRUs, C<sup>&lt;t&gt;</sup> = a<sup>&lt;t&gt;</sup></p></li><li><p>Equations of the GRUs:</p><ul><li><img src="18.png"></li><li>The update gate is between 0 and 1<ul><li>To understand GRUs imagine that the update gate is either 0 or 1 most of the time.</li></ul></li><li>So we update the memory cell based on the update cell and the previous cell.</li></ul></li><li><p>Lets take the cat sentence example and apply it to understand this equations:</p><ul><li><p>Sentence: "The <strong>cat</strong>, which already ate ........................, <strong>was</strong> full"</p></li><li><p>We will suppose that U is 0 or 1 and is a bit that tells us if a singular word needs to be memorized.</p></li><li><p>Splitting the words and get values of C and U at each place:</p><ul><li><table><thead><tr class="header"><th>Word</th><th>Update gate(U)</th><th>Cell memory (C)</th></tr></thead><tbody><tr class="odd"><td>The</td><td>0</td><td>val</td></tr><tr class="even"><td>cat</td><td>1</td><td>newVal</td></tr><tr class="odd"><td>which</td><td>0</td><td>newVal</td></tr><tr class="even"><td>already</td><td>0</td><td>newVal</td></tr><tr class="odd"><td>...</td><td>0</td><td>newVal</td></tr><tr class="even"><td>was</td><td>1 (I dont need it anymore)</td><td>newerVal</td></tr><tr class="odd"><td>full</td><td>..</td><td>..</td></tr></tbody></table></li></ul></li></ul></li><li>Drawing for the GRUs<ul><li><img src="19.png"></li><li>Drawings like in http://colah.github.io/posts/2015-08-Understanding-LSTMs/ is so popular and makes it easier to understand GRUs and LSTMs. But Andrew Ng finds its better to look at the equations.</li></ul></li><li>Because the update gate U is usually a small number like 0.00001, GRUs doesn't suffer the vanishing gradient problem.<ul><li>In the equation this makes C<sup>&lt;t&gt;</sup> = C<sup>&lt;t-1&gt;</sup> in a lot of cases.</li></ul></li><li>Shapes:<ul><li>a<sup>&lt;t&gt;</sup> shape is (NoOfHiddenNeurons, 1)</li><li>c<sup>&lt;t&gt;</sup> is the same as a<sup>&lt;t&gt;</sup></li><li>c<sup>~&lt;t&gt;</sup> is the same as a<sup>&lt;t&gt;</sup></li><li>u<sup>&lt;t&gt;</sup> is also the same dimensions of a<sup>&lt;t&gt;</sup></li></ul></li><li>The multiplication in the equations are element wise multiplication.</li><li>What has been descried so var is the Simplified GRU unit. Lets now describe the full one:<ul><li>The full GRU contains a new gate that is used with to calculate the candidate C. The gate tells you how relevance is C<sup>&lt;t-1&gt;</sup> to C<sup>&lt;t&gt;</sup></li><li>Equations:<ul><li><img src="20.png"></li></ul></li><li>Shapes are the same</li></ul></li><li><p>So why we use these architectures, why don't we change them, how we know they will work, why not add another gate, why not use the simpler GRU instead of the full GRU; well researchers has experimented over years all the various types of these architectures with many many different versions and also addressing the vanishing gradient problem. They have found that full GRUs are one of the best RNN architectures to be used for many different problems. You can make your design but put in mind that GRUs and LSTMs are standards.</p></li></ul><h3 id="long-short-term-memory-lstm">Long Short Term Memory (LSTM)</h3><ul><li>Other unit that can make you do long term dependences is an LSTM unit and its more powerful and general than GRUs.</li><li>In LSTMs , C<sup>&lt;t&gt;</sup> != a<sup>&lt;t&gt;</sup></li><li>Here are the equations of an LSTM unit:<ul><li><img src="21.png"></li></ul></li><li>In GRUs we have an update gate <code>U</code>, a relevance gate <code>r</code>, and a candidate cell variables C<sup>~&lt;t&gt;</sup> while in LSTMs we have an update gate <code>U</code> - Sometimes its called Input gate I -, a forget gate <code>F</code>, an output gate <code>O</code>, and a candidate cell variables C<sup>~&lt;t&gt;</sup></li><li>Drawings - which is inspired from http://colah.github.io/posts/2015-08-Understanding-LSTMs/ -:<ul><li><img src="22.png"></li></ul></li><li>Some Variants on LSTMs includes:<ul><li>LSTM with <strong>peephole connections</strong>.<ul><li>The normal LSTM with C<sup>&lt;t-1&gt;</sup> included with every gate.</li></ul></li></ul></li><li>There isn't a universal superior in choosing between LSTMs and its variants. Some win and some problems and some don't. One of the advantages of GRUs is that its simpler and can be used to build much bigger network but the LSTM is more powerful and general as we said. ### Bidirectional RNN</li><li>There are still some ideas to make a powerful sequence model. One of them is bidirectional RNNs and another is Deep RNNs.</li><li>As we saw before, here are an example on Name entity recognition:<ul><li><img src="23.png"></li></ul></li><li>The name Teddy cannot be learned from <strong>He</strong> and <strong>said</strong>, but can be learned from <strong>bears</strong>.</li><li>BRNNs fixes this issue.</li><li>Here are BRNNs architecture:<ul><li><img src="24.png"></li></ul></li><li>Hint that BRNNs are <strong>acyclic graph</strong>!</li><li>The forward propagation goes from left to right, and from right to left. It learns from both sides.</li><li>To make predictions we use y<sup>^&lt;t&gt;</sup> by using the two activations that comes from left and right.</li><li>The blocks here can be any RNN block including the basic RNNs, LSTMs, or GRUs.</li><li>For a lot of NLP or text processing problems, a BRNN with LSTM appears to be commonly used.</li><li><p>The disadvantage of BRNNs that you need the entire sequence before you can process it. For example in live speech recognition if you used BRNNs you will need to wait for the person who speaks to stop to take the entire sequence and then make your predictions. ### Deep RNNs</p></li><li>In a lot of cases the standard one layer RNNs will solve your problem. But in some problems its useful to stack some RNN layers to make a deeper network.</li><li>For example, a deep RNN with 3 layers would look like this:<ul><li><img src="25.png"></li></ul></li><li>In feed forward deep nets we can have till 100 or 200 layer and this would be a so big network. In deep RNNs stacking 3 layers is considered deep and already expensive.</li><li><p>In some cases you might see a deep network that are connected after recurrent cell.</p></li></ul><h3 id="back-propagation-with-rnns">Back propagation with RNNs</h3><ul><li><blockquote><p>In modern deep learning frameworks, you only have to implement the forward pass, and the framework takes care of the backward pass, so most deep learning engineers do not need to bother with the details of the backward pass. If however you are an expert in calculus and want to see the details of backprop in RNNs, you can work through this optional portion of the notebook.</p></blockquote></li><li>The quote is taken from this <a href="https://www.coursera.org/learn/nlp-sequence-models/notebook/X20PE/building-a-recurrent-neural-network-step-by-step" target="_blank" rel="noopener">notebook</a>. If you want the details of the back propagation with programming notes look at the linked notebook.</li></ul><h2 id="natural-language-processing-word-embeddings">Natural Language Processing &amp; Word Embeddings</h2><blockquote><p>Natural language processing with deep learning is an important combination. Using word vector representations and embedding layers you can train recurrent neural networks with outstanding performances in a wide variety of industries. Examples of applications are sentiment analysis, named entity recognition and machine translation.</p></blockquote><h3 id="introduction-to-word-embeddings">Introduction to Word Embeddings</h3><h4 id="word-representation">Word Representation</h4><ul><li>NLP has been revolutionized by deep learning and especially be RNNs and deep RNNs.</li><li>Word embeddings is a way of representing words. It lets your algorithm automatically understand the analogies between words like "king" and "queen".</li><li>So far we have defined our language by a vocabulary. Then represented our words with one hot vector that represent the word in the vocabulary.<ul><li>An image example would be:<ul><li><img src="27.png"></li></ul></li><li>We will use the annotation <strong>O</strong> <sub>idx</sub> for any word that is represented with one hot like in the image.</li><li>One of the weaknesses of this representation is that it treats a word as a thing that itself and it doesn't allow an algorithm to generalize across words.<ul><li>For example: "I want a glass of <strong>orange</strong> ______" , a model should predict the next word as <strong>Juice</strong>.</li><li>A similar example "I want a glass of <strong>apple</strong> ______" , a model won't easily predict <strong>juice</strong> here if it doesn't trained on it. And if so the two examples aren't related although orange and apple are similar.</li></ul></li><li>Inner product between any hot encoding word is zero. Also the distances between them are the same.</li></ul></li><li>So, instead of a one-hot presentation, won't it be nice if we can learn a featurized representation with each of these words: Man, Woman, King, Queen, Apple, and orange?<ul><li><img src="28.png"> ¬†- Each word will have a 300 features with type of float point number for example.</li><li>Each word column will be 300 dimensional vector which will be the representation.</li><li>We will use the notation <strong>e</strong><sub>5391</sub> to describe Man word features vector.</li><li>Now if we went to the examples we descried again:<ul><li>"I want a glass of <strong>orange</strong> ______"</li><li>I want a glass of <strong>apple</strong> ______</li></ul></li><li>Orange and apple now shares a lot of similar features which makes it easier for an algorithm to generalize between them.</li><li>We call this representation <strong>Word embeddings</strong>.</li></ul></li><li>To visualize word embeddings we use t-SNE algorithm to reduce the features to 2 dimensions which makes it easy to visualize.<ul><li><img src="29.png"></li><li>You will get a sense that more related words distance are smaller than other distances.</li></ul></li><li>The <strong>word embeddings</strong> came from that we need to embed a unique vector inside an n dimensions.</li></ul><h4 id="using-word-embeddings">Using word embeddings</h4><ul><li>Lets see how we can take the feature representation we have extracted from each word and apply it in Name entity recognition problem.</li><li>Given this example - From named entity recognition - :<ul><li><img src="30.png"></li></ul></li><li><strong>Sally Johnson</strong> is a persons name.</li><li>After training on this sentence the model should find out that the sentence "<strong>Robert Lin</strong> is an <em>apple</em> farmer" contains Robert Lin as a name, as apple and orange has near representations.</li><li>Now if you have tested your model with this sentence "<strong>Mahmoud Badry</strong> is a <em>durian</em> cultivator" the network should learn the name even if it hasn't seen the word <em>durian</em> before. Thats the power of word representations.</li><li>The algorithms that are used to learn <strong>word embeddings</strong> can exterminate billions of unlabeled text - for example 100 billion- words and learn the representation from them.</li><li>Transfer learning and word embeddings:<ol type="1"><li>Learn word embeddings from large text corpus. say 100 billion word<ul><li>Or download pre-trained embedding online.</li></ul></li><li>Transfer embeddings to new task with smaller training set. say 100k word.</li><li>Optimal: Continue to finetune the word embeddings with new data.<ul><li>This can be done if your smaller training set are big enough.</li></ul></li></ol></li><li>Also one of the advantages of using word embeddings is that it reduces the size of the input!<ul><li>10,000 one hot compared to 300 features vector.</li></ul></li><li>Word embeddings has an interesting relationship to the face recognition task:<ul><li><img src="31.png"></li><li>In this problem we encode each face into a vector and then check how similar is these vectors.</li><li>The word <strong>encode</strong> and <strong>embeddings</strong> has a similar meaning here.</li><li>In the word embeddings task, we are getting a vector say from e<sub>1</sub> to e<sub>300</sub> for each word in our vocabulary. We will discuss the algorithm in the next sections.</li></ul></li></ul><h4 id="properties-of-word-embeddings">Properties of word embeddings</h4><ul><li>One of the most fascinating properties of word embeddings is that they can also help with analogy reasoning. Analogy reasoning is one of the most important applications of NLP.</li><li>Analogies example:<ul><li>Given this word embeddings table:<ul><li><img src="32.png"></li></ul></li><li>Can we conclude this relation:<ul><li>Man ==&gt; Woman</li><li>King ==&gt; ??</li></ul></li><li>Lets subtract e<sub>Man</sub> from e<sub>Woman</sub>. This will equal the vector <code>[-2  0  0  0]</code></li><li>Similar e<sub>King</sub> - e<sub>Queen</sub> = <code>[-2  0  0  0]</code></li><li>So the difference is about the gender in both.<ul><li><img src="33.png"></li><li>This vector represents the gender.</li><li>This drawing is 2D visualization of the 4D vector that has been extracted by t-SNE algorithm. It was drawing for just clarification! Don't rely on t-SNE algorithm in finding parallels.</li></ul></li><li>So we can reformulate the problem to find:<ul><li>e<sub>Man</sub> - e<sub>Woman</sub> ‚âà e<sub>King</sub> - e<sub>??</sub></li></ul></li><li>It can also represented mathematically by:<ul><li><img src="34.png"></li></ul></li><li>It turns out that e<sub>Queen</sub> is the best solution here that gets the the similar vector.</li></ul></li><li>Cosine similarity:<ul><li>Equation:<ul><li><img src="35.png"></li><li><span class="math display">\[\text{CosineSimilarity(u, v)} = \frac {u . v} {||u||_2 ||v||_2} = cos(\theta)\]</span></li><li>The top part represents the inner product of <code>u</code> and <code>v</code> vectors. That will be large if the vectors are so similar.</li></ul></li><li>We can use this equation to calculate the similarities between word embeddings and on the analogy problem where <code>u</code> = e<sub>w</sub> and <code>v</code> = e<sub>king</sub> - e<sub>man</sub> + e<sub>woman</sub></li></ul></li></ul><h4 id="embedding-matrix">Embedding matrix</h4><ul><li>When you implement an algorithm to learn a word embedding, what you end up learning is an <strong><u>embedding matrix</u></strong>.</li><li>Lets take an example:<ul><li>Suppose we are using 10,000 words as our vocabulary.</li><li>The algorithm should extract a matrix <code>E</code> of the shape (300, 10,000) in case we are extracting 300 features. (300, 10,001) if we have <code>&lt;UNK&gt;</code> token.<ul><li><img src="36.png"></li></ul></li><li>If O<sub>6257</sub> is the one hot encoding of the word <strong>orange</strong>, then <code>E</code>. O<sub>6257</sub> equals e<sub>6257</sub> which shape is (300, 1)</li><li>Generally <code>E</code>. O<sub>j</sub> = e<sub>j</sub></li></ul></li><li>In the next sections you will see that we first initialize <code>E</code> randomly and then try to learn all the parameters of this matrix.</li><li>In practice its not efficient to use a dot multiplication when you are trying to extract the embeddings of a specific word, instead we will use slicing to slice a specific column. In keras there are a embedding layer that extracts this column with no multiplications!</li></ul><h3 id="learning-word-embeddings-word2vec-glove">Learning Word Embeddings: Word2vec &amp; GloVe</h3><h4 id="learning-word-embeddings">Learning word embeddings</h4><ul><li>Lets start learning some algorithms that learns the word embeddings.</li><li>At start, word embeddings algorithms - with deep learning - were complex but then it started to be simpler and simpler.</li><li>We will start by learning the complex examples to make more sense.</li><li><strong><u>Neural language model</u></strong>:<ul><li>Lets start by example:<ul><li><img src="37.png"></li></ul></li><li>We want to build a language model so that we can predict the next word.</li><li>So we use this neural network to learn the language model<ul><li><img src="38.png"></li><li>We get e<sub>j</sub> by <code>E</code>. o<sub>j</sub></li><li>NN layer has parameters <code>W1</code> and <code>b1</code> while softmax layer has parameters <code>W2</code> and <code>b2</code></li><li>Input dimension is (300*6, 1) if we the window size is 6.</li><li>Here we are optimizing <code>E</code> matrix and layers parameters. We need to maximize the likelihood in our training set.</li></ul></li><li>This model was build on 2003 and tends to work very well to get the embeddings.</li></ul></li><li>In the last example we took a window of 6 words that fall behind the word that we want to predict. There are other choices when we are trying to learn word embeddings.<ul><li>Suppose we have the example: "I want a glass of orange <strong>juice</strong> to go along with my cereal"</li><li>To learn juice, Choices of <strong>Context</strong> are:<ol type="1"><li>Last 4 words.<ul><li>We use a window of last 4 words - 4 is the best -, "<u>a glass of orange</u>" and try to predict the next word from it.</li></ul></li><li>4 words on the left and on the right.<ul><li>"<u>a glass of orange</u>" and "<u>to go along with</u>"</li></ul></li><li>Last 1 word.<ul><li>"<u>orange</u>"</li></ul></li><li>Nearby 1 word.<ul><li>"<u>glass</u>" word is near juice</li><li>The idea of <strong>skip grams</strong> model.</li><li>The idea is so simpler and works remarkably well.</li><li>We will talk about this in the next section.</li></ul></li></ol></li></ul></li></ul><h4 id="word2vec">Word2Vec</h4><ul><li><p>Before presenting Word2Vec, lets talk about <strong>Skip-grams</strong>:</p><ul><li><p>For example if we have the sentence: "I want a glass of orange juice to go along with my cereal"</p></li><li><p>We will choose Context and target.</p></li><li><p>The target is chosen randomly basing on a window with a specific size.</p></li><li><table><thead><tr class="header"><th>Context</th><th>Target</th><th>How far</th></tr></thead><tbody><tr class="odd"><td>orange</td><td>juice</td><td>+1</td></tr><tr class="even"><td>orange</td><td>glass</td><td>-2</td></tr><tr class="odd"><td>orange</td><td>my</td><td>+6</td></tr></tbody></table><p>We have converted the problem into a supervised problem.</p></li><li><p>This is not an easy learning problem because within -10/+10 words for example is hard.</p></li><li><p>We want to learn this to get our word embeddings model.</p></li></ul></li><li><p>Word2Vec model:</p><ul><li>Vocabulary size = 10,000 word</li><li>Lets say that the context word are <code>c</code> and the target word are <code>t</code></li><li>We want to learn <code>c</code> to <code>t</code></li><li>we get e<sub>c</sub> by <code>E</code>. o<sub>c</sub></li><li>We then use a softmax layer to get <code>P(t|c)</code> which is y<sup>^</sup></li><li>Also we will use the cross-entropy loss function.</li><li>This model is called skip-grams model.</li></ul></li><li><p>The last model has a problem with the softmax classifier:</p><ul><li><img src="39.png"></li><li>Here we are summing 10,000 numbers which corresponds to the number of words in our vocabulary.</li><li>If this number is larger say 1 million, the computation will become so slow.</li></ul></li><li><p>The solution for the past problem is to use "<strong>Hierarchical softmax classifier</strong>" which works as a tree classifier.</p><ul><li><img src="40.png"></li></ul></li><li><p>In practice the hierarchical softmax classifier doesn't use a balanced tree like the drawn one. Common words are in the top and less common are in the bottom.</p></li><li><p>How to sample the context c?</p><ul><li>One way is to choose the context by random from your corpus.</li><li>If you have done it that way, there will be frequent words like "the, of, a, and, to, .." that can dominate other words like "orange, apple, Mahmoud,..."</li><li>So in practice, we don't take the context uniformly random, instead there are some heuristics to balance the common words and the non-common words.</li></ul></li></ul><h4 id="negative-sampling">Negative Sampling</h4><ul><li><p>Negative sampling allows you to do something similar to the Skip-Gram model, but with a much more efficient learning algorithm. We will create a different learning problem</p></li><li><p>Given this example:</p><ul><li>"I want a glass of orange juice to go along with my cereal"</li></ul></li><li><p>The sampling will look like this:</p></li><li><table><thead><tr class="header"><th>Context</th><th>Word</th><th>target</th></tr></thead><tbody><tr class="odd"><td>orange</td><td>juice</td><td>1</td></tr><tr class="even"><td>orange</td><td>king</td><td>0</td></tr><tr class="odd"><td>orange</td><td>book</td><td>0</td></tr><tr class="even"><td>orange</td><td>the</td><td>0</td></tr><tr class="odd"><td>orange</td><td>of</td><td>0</td></tr></tbody></table><p>We get positive example by using the same skip-grams technique, a fixed window that goes around.</p></li><li><p>To generate a negative example, we pick a word randomly from the vocabulary.</p></li><li><p>Notice that we got "of" although it was appeared in the same sentence.</p></li><li><p>So the steps to generate the samples are:</p><ol type="1"><li>Pick a positive context</li><li>Pick a k negative contexts from the dictionary.</li></ol></li><li><p>K is recommended to be from 5 to 20 in small datasets. For larger ones 2 to 5.</p></li><li><p>We will have a k negative examples to 1 positive ones in the data we are collecting.</p></li><li><p>Now lets define the model that will learn this supervised learning problem:</p><ul><li>Lets say that the context word are <code>c</code> and the word are <code>t</code> and <code>y</code> is the target.</li><li>We will apply the simple logistic regression model.</li><li><img src="41.png"></li><li>The logistic regression model can be drawn like this:</li><li><img src="42.png"></li><li>So we are like having 10,000 binary classification problem, and we only train k+1 classifier of them in each iteration.</li></ul></li><li><p>Now how to select negative samples:</p><ul><li>We can sample according to empirical frequencies in words corpus which means according to how often different words appears. But the problem with that is that we will have more frequent words like the, of, and..</li><li>The best is to sample with this equation - According to authors - :<ul><li><img src="43.png"></li></ul></li></ul></li></ul><h4 id="glove-word-vectors">GloVe word vectors</h4><ul><li>GloVe is another algorithm for learning the word embeddings, Its the simplest of them.</li><li>This is not used much as word2vec or gram models, but it has some enthusiasts because of its simplicity.</li><li>GloVe stands for Global vectors for word presentation.</li><li>Given this example:<ul><li>"I want a glass of orange juice to go along with my cereal"</li></ul></li><li>We will choose a context and a target from the choices we have mentioned in the previous sections.</li><li>Then we will calculate this for every pair, X<sub>ct</sub> = # times <code>t</code> appears in context of <code>c</code></li><li>X<sub>ct</sub> = X<sub>tc</sub> if we choose a window pair, but they will not equal if we choose the previous words for example. In GloVe they use a window which means they are equal</li><li>The model is defined like this:<ul><li><img src="44.png"></li></ul></li><li>f(x) -the weighting term- is used for many reasons which includes:<ul><li>The <code>log(0)</code> problem, which might occur if there are no pairs for the given target and context values.</li><li>Giving low weights for stop words like "is", "the", and "this" because they occurs a lot.</li><li>Giving low weights for words that doesn't occur so much.</li></ul></li><li>ceta and e are symmetric which helps getting the final word embedding.</li><li>Conclusion on word embeddings:<ul><li>If this is your first try, you should try to download a pretrained model that has been made and actually works best.</li><li>If you have enough data, you can try to implement one of the available algorithms.</li><li>Because word embeddings are very computationally expensive to train, most ML practitioners will load a pre-trained set of embeddings.</li><li>A final note that you can't guarantee that the axis used to represent the features will be well-aligned with what might be easily humanly interpretable axis like gender, and royal, and age.</li></ul></li></ul><h3 id="applications-using-word-embeddings">Applications using Word Embeddings</h3><h4 id="sentiment-classification">Sentiment Classification</h4><ul><li>As we have discussed before, Sentiment classification is the process of finding if a text has a positive or a negative review. Its so useful in NLP and is used in so many applications. An example would be:<ul><li><img src="45.png"></li></ul></li><li>One of the challenges with it, is that you might haven't a huge labeled training data for it, but using word embeddings can help getting rid of this.</li><li>The common dataset sizes varies from 10,000 to 100,000 words.</li><li>A simple sentiment classification model would be like this:<ul><li><img src="46.png"></li><li>The embedding matrix may have been trained on say 100 billion words.</li><li>Number of features given a word is 300.</li><li>We can use <strong>sum</strong> or <strong>average</strong> given all the words then pass it to a softmax classifier. That makes this classifier works for short or long sentences.</li></ul></li><li>One of the problems with this simple model is that it ignores words order! for example "Completely lacking in <strong>good</strong> taste, <strong>good</strong> service, and <strong>good</strong> ambience" has the word good 3 times but its a negative review!</li><li>A better model uses an RNN for solving this problem:<ul><li><img src="47.png"></li><li>And so if you train this algorithm, you end up with a pretty decent sentiment classification algorithm.</li><li>Also it will generalize even if words aren't in your dataset, for example the sentencte "Completely <strong><u>absent of</u></strong> good taste, good service, and good ambience" will be the same as the trained word!</li></ul></li></ul><h4 id="debiasing-word-embeddings">Debiasing word embeddings</h4><ul><li>We want to make sure that our word embeddings free from undesirable forms of bias, such as gender bias, ethnicity bias and so on.</li><li>A horrifying result on a trained word embeddings in the context of Analogies:<ul><li>Man : Computer_programmer as Woman : <strong>Homemaker</strong></li><li>Father : Doctor as Mother : <strong>Nurse</strong></li></ul></li><li>Word embeddings can reflect gender, ethnicity, age, sexual orientation, and other biases of text used to train the model.</li><li>Learning algorithms by general is making an important decision and it mustn't be biased.</li><li>Andrew thinks we actually have better ideas for quickly reducing the bias in AI than for quickly reducing the bias in the human race, although it still needs a lot of work to be done.</li><li>Addressing bias in word embeddings steps:<ul><li>Idea is by paper: https://arxiv.org/abs/1607.06520</li><li>Given this learned embeddings:<ul><li><img src="48.png"></li></ul></li><li>We need to solve the <strong>gender bias</strong> here. The steps we will discuss can help solve any bias problem but we are focusing here on gender bias.</li><li>Here are the steps:<ol type="1"><li>Identify the direction:<ul><li>Calculate the difference between:<ul><li>e<sub>he</sub> - e<sub>she</sub></li><li>e<sub>male</sub> - e<sub>female</sub></li><li>....</li></ul></li><li>Choose some k differences and average them.</li><li>This will help you find this:<ul><li><img src="49.png"></li></ul></li><li>By that we have found the bias direction which is 1D vector and the non-bias vector which is 299D vector.</li></ul></li><li>Neutralize: For every word that is not definitional, project to get rid of bias.<ul><li>Babysitter and doctor needs to be neutral so we project them on nonbias with the direction of the bias:<ul><li><img src="50.png"></li><li>After that they will be equal in the term of gender. ¬† ¬† ¬† ¬† - To do this the authors of the paper trained a classifier to tell the words that they need to be neutralized or not.</li></ul></li></ul></li><li>Equalize pairs<ul><li>We want each pair to have difference only in gender. Like:<ul><li>Grandfather - Grandmother ¬† ¬† ¬† ¬† - He - She ¬† ¬† ¬† ¬† - Boy - Girl</li></ul></li><li>We want to do this because the distance between grandfather and babysitter is bigger than babysitter and grandmother:<ul><li><img src="51.png"></li></ul></li><li>To do that, we move grandfather and grandmother to a point where they will be in the middle of the non-bias axis.</li><li>There are some words you need to do this for in your steps. The size of these words are relatively small.</li></ul></li></ol></li></ul></li></ul><h2 id="sequence-models-attention-mechanism">Sequence models &amp; Attention mechanism</h2><blockquote><p>Sequence models can be augmented using an attention mechanism. This algorithm will help your model understand where it should focus its attention given a sequence of inputs. This week, you will also learn about speech recognition and how to deal with audio data.</p></blockquote><h3 id="various-sequence-to-sequence-architectures">Various sequence to sequence architectures</h3><h4 id="basic-models">Basic Models</h4><ul><li>In this section we will learn about sequence to sequence - Many to Many - models which are useful in various applications including machine translation and speech recognition.</li><li>Lets start by the basic model:<ul><li>Given this machine translation problem in which X is a French sequence and Y is an English sequence.<ul><li><img src="52.png"></li></ul></li><li>Our architecture will include <strong>encoder</strong> and <strong>decoder</strong>.</li><li>The encoder is built with RNNs - LSTM or GRU are included - and takes the input sequence and then outputs a vector that should represent the whole input.</li><li>After that the decoder network, are also built with RNNs and outputs the output sequence using the vector that has been built by the encoder.</li><li><img src="53.png"></li><li>These ideas are from these papers:<ul><li>[<a href="https://arxiv.org/abs/1409.3215" target="_blank" rel="noopener">Sutskever</a> et al., 2014. Sequence to sequence learning with neural networks]</li><li>[<a href="https://arxiv.org/abs/1406.1078" target="_blank" rel="noopener">Cho et</a> al., 2014. Learning phrase representations using RNN encoder-decoder for statistical machine translation]</li></ul></li></ul></li><li>With an architecture similar to the one previously mentioned works for image captioning problem:<ul><li>In this problem X is an image, while Y is a sentence.</li><li>The model architecture image:<ul><li><img src="54.png"></li></ul></li><li>The architecture uses a CNN pretrained AlexNet as an encoder for the image, and the decoder is an RNN.</li><li>The ideas are from these papers (They share similar ideas):<ul><li>[<a href="https://arxiv.org/abs/1412.6632" target="_blank" rel="noopener">Maoet</a>. al., 2014. Deep captioning with multimodal recurrent neural networks]</li><li>[<a href="https://arxiv.org/abs/1411.4555" target="_blank" rel="noopener">Vinyalset</a>. al., 2014. Show and tell: Neural image caption generator]</li><li>[<a href="https://cs.stanford.edu/people/karpathy/cvpr2015.pdf" target="_blank" rel="noopener">Karpathy</a> and Li, 2015. Deep visual-semantic alignments for generating imagedescriptions]</li></ul></li></ul></li></ul><h4 id="picking-the-most-likely-sentence">Picking the most likely sentence</h4><ul><li>There are some similarities between the language model we have learned previously, and the machine translation model we have just discussed, but there are some differences as well.</li><li>The language model we have learned as so similar to the decoder of the machined translation model, except for a<sup>0</sup><ul><li><img src="55.png"></li></ul></li><li>The problems formations also are different:<ul><li>In language model: P(y<sup>&lt;1&gt;</sup>, ....y<sup>&lt;Ty&gt;</sup>)</li><li>In machine translation: P(y<sup>&lt;1&gt;</sup>, ....y<sup>&lt;Ty&gt;</sup> | x<sup>&lt;1&gt;</sup>, ....x<sup>&lt;Tx&gt;</sup>)</li></ul></li><li>What we don't want in machine translation model, is not to sample the output at random. This may provide some choices as an output. Sometimes you may sample a bad output.<ul><li>Example:<ul><li>X = "Jane visite l‚ÄôAfrique en septembre."</li><li>Y may be:<ul><li>Jane is visiting Africa in September.</li><li>Jane is going to be visiting Africa in September.</li><li>In September, Jane will visit Africa.</li></ul></li></ul></li></ul></li><li>So we need to get the best output, this can be take by the equation:<ul><li><img src="56.png"></li></ul></li><li>The most common algorithm is the beam search, which we will explain in the next section.</li><li>Why not use greedy search? Why not get the best choices each time?<ul><li>It turns out that this approach doesn't really work!</li><li>Lets explain it with an example:<ul><li>The best output for the example we talked about is "Jane is visiting Africa in September."</li><li>Suppose that you when you are choosing with greedy approach, the first two words were "Jane is", the word that may come after that will be "going" as "going" is the most common word that comes after "Noun is" so the result may look like this: "Jane is going to be visiting Africa in September." and that isn't the best/optimal solution.</li></ul></li></ul></li><li>So what is better than greedy approach, is trying to get an approximate solution, that will try to maximize the output.</li></ul><h4 id="beam-search">Beam Search</h4><ul><li>Beam search is the most widely used algorithm to get the best output sequence. Its a heuristic search algorithm.</li><li>To illustrate the algorithm we will be stick with the example from the previous section. We need Y = "Jane is visiting Africa in September."</li><li>The algorithm has a parameter <code>B</code> which is the beam width. Lets take <code>B = 3</code> which means the algorithm will get 3 outputs at a time.</li><li>For the first step you will get ["in", "jane", "september"] words that are the best candidates.</li><li>Then for each word in the first output, get B words from the 3 where the best are the result of multiplying both probabilities. Se we will have then ["In September", "jane is", "jane visit"]. Notice that we automatically ignored September.</li><li>Repeat the same process and get the best B words for ["September", "is", "visit"] and so so.</li><li>In this algorithm, keep only B instances of your network.</li><li>If <code>B = 1</code> this will become the greedy search.</li></ul><h4 id="refinements-to-beam-search">Refinements to Beam Search</h4><ul><li>In the previous section we have discussed the basic beam search. In this section we will try to do some refinements to it to work even better.</li><li>The first thing is <strong>Length optimization</strong><ul><li>In beam search we are trying to optimize:<ul><li><img src="56.png"></li></ul></li><li>And to do that we multiply:<ul><li>P(y<sup>&lt;1&gt;</sup> | x) * P(y<sup>&lt;2&gt;</sup> | x, y<sup>&lt;1&gt;</sup>) * ..... P(y<sup>&lt;t&gt;</sup> | x, y<sup>&lt;y(t-1)&gt;</sup>)</li></ul></li><li>Each probability is a fraction. Also maybe a small fraction.</li><li>Multiplying small fractions will cause a <strong>numerical overflow</strong>! Meaning that it's too small for the floating part representation in your computer to store accurately.</li><li>So in practice we use <strong>summing</strong> <strong>logs</strong> instead of multiplying directly.<ul><li><img src="57.png"></li></ul></li><li>But theres another problem. The two optimization functions we have mentions tends to find small sequences! Because multiplying a lot of fractions gives a smaller value.</li><li>So theres another change , by dividing by the number of elements in the sequence.<ul><li><img src="58.png"></li><li>alpha is a hyper parameter to tune.</li><li>If alpha = 0, Then its like we do nothing.</li><li>If alpha = 1, Then its like we are using full sequence length.</li><li>In practice alpha = 0.7 is a good thing.</li></ul></li></ul></li><li>The second thing is who can we choose best <code>B</code>?<ul><li>The larger B, the larger possibilities, the better are the results. But it will be more computationally expensive.</li><li>In practice, you might see a in the production sentence <code>B=10</code></li><li><code>B=100</code>, <code>B=1000</code> are uncommon.</li><li>Unlike exact search algorithms like BFS (Breadth First Search) or DFS (Depth First Search), Beam Search runs faster but is not guaranteed to find exact solution.</li></ul></li></ul><h4 id="error-analysis-in-beam-search">Error analysis in beam search</h4><ul><li>We have talked before on <strong>Error analysis</strong> in <u>Structuring Machine Learning Projects</u> chapter. We will apply these concepts to improve our beam search algorithm.</li><li>We will use error analysis to figure out if the <code>B</code> hyperparameter of the beam search is the problem - because it doesn't get an optimal solution - or to in other hyperparameters like the RNN parameters.</li><li>Lets take an example:<ul><li>Our examples information:<ul><li>x = "Jane visite l‚ÄôAfrique en septembre."</li><li>y<sup>*</sup> = "Jane visits Africa in September."</li><li>y<sup>^</sup> = "Jane visited Africa last September."</li></ul></li><li>Our model that has produced a sentence that are different in meaning because of the word "last"</li><li>We now want to know who to blame, the RNN or the beam search.</li><li>To do that, we calculate P(y<sup>*</sup> | X) and P(y<sup>^</sup> | X). There are two cases:<ul><li>Case 1 (P(y<sup>*</sup> | X) &gt; P(y<sup>^</sup> | X)):<ul><li>Conclusion: Beam search is at fault.</li></ul></li><li>Case 2 (P(y<sup>*</sup> | X) &lt;= P(y<sup>^</sup> | X)):<ul><li>Conclusion: RNN model is at fault.</li></ul></li></ul></li></ul></li><li>The error analysis process is as following:<ul><li>You choose N error examples and make the following table:<ul><li><img src="59.png"></li></ul></li><li><code>B</code> for beam search, <code>R</code> is for the RNN.</li><li>Get counts and decide.</li></ul></li></ul><h4 id="bleu-score">BLEU Score</h4><ul><li>One of the challenges of machine translation, is that given a sentence in a language there are one or more possible good translation in another language. So how do we evaluate our results?</li><li>The way we do this is by using <strong>BLEU score</strong>. BLEU stands for bilingual evaluation understudy.</li><li><p>The intuition is so long as the machine generated translation is pretty close to any of the references provided by humans, then it will get a high BLEU score.</p></li><li><p>Lets take an example:</p><ul><li>X = "Le chat est sur le tapis."</li><li>Y1 = "The cat is on the mat."</li><li>Y2 = "There is a cat on the mat."</li><li>Suppose that the machine outputs: "<u>the the the the the the the.</u>"</li><li>One way to evaluate the machine output is to look at each word in the output and check it in the references. This is called precision:<ul><li>precision = 7/7 because the appeared in Y1 or Y2</li></ul></li><li>This is not a useful measure!</li><li>We can use a modified precision in which we are looking for the reference with the maximum number of a particular word and set the maximum appearing of this word to this number. So:<ul><li>modified precision = 2/7 because the max is 2 in Y1</li><li>We clipped the 7 times by the max which is 2.</li></ul></li><li>The problem here is that we are looking at one word at a time, we may need to look at pairs</li></ul></li><li><p>Another example (BLEU score on bigrams)</p><ul><li><p>The n-<strong>grams</strong> typically are collected from a text or speech corpus. When the items are words, n-<strong>grams</strong> may also be called shingles. An n-<strong>gram</strong> of size 1 is referred to as a "unigram"; size 2 is a "bigram" (or, less commonly, a "digram"); size 3 is a "trigram".</p></li><li><p>X = "Le chat est sur le tapis."</p></li><li><p>Y1 = "The cat is on the mat."</p></li><li><p>Y2 = "There is a cat on the mat."</p></li><li><p>Suppose that the machine outputs: "<u>The cat the cat on the mat.</u>"</p></li><li><p>The bigrams in the machine output:</p></li><li><table><thead><tr class="header"><th>Pairs</th><th>Count</th><th>Count clip</th></tr></thead><tbody><tr class="odd"><td>the cat</td><td>2</td><td>1 (Y1)</td></tr><tr class="even"><td>cat the</td><td>1</td><td>0</td></tr><tr class="odd"><td>cat on</td><td>1</td><td>1 (Y2)</td></tr><tr class="even"><td>on the</td><td>1</td><td>1 (Y1)</td></tr><tr class="odd"><td>the mat</td><td>1</td><td>1 (Y1)</td></tr><tr class="even"><td><strong>Totals</strong></td><td>6</td><td>4</td></tr></tbody></table><p>Score = Count clip / Count = 4/6</p></li></ul></li><li><p>So here are the equations for the n-grams:</p><ul><li><img src="60.png"></li></ul></li><li><p>Lets put this together to formalize the BLEU score:</p><ul><li><strong>P<sub>n</sub></strong> = Bleu score on n-grams only</li><li><strong>Combined Bleu score</strong> equation:<ul><li><img src="61.png"></li><li>For example if we want Bleu for 4, we compute P<sub>1</sub>, P<sub>2</sub>, P<sub>3</sub>, P<sub>4</sub> and then average them and take the exp.</li></ul></li><li>Another equation is <strong>BP penalty</strong> which stands for brevity penalty. It turns out that if a machine outputs a small number of words it will get a better score so we need to handle that.<ul><li><img src="62.png"></li></ul></li></ul></li><li><p>Blue score is has several open source implementations and used in variety of systems like machine translation and image captioning.</p></li></ul><h4 id="attention-model-intuition">Attention Model Intuition</h4><ul><li>So far we are using sequence to sequence models with an encoder and decoders. There are a technique called attention which makes these models even better.</li><li>The attention algorithm, the attention idea has been one of the most influential ideas in deep learning.</li><li>The problem of long sequences:<ul><li>Given this model, inputs, and outputs.<ul><li><img src="63.png"></li></ul></li><li>The encoder should memorize this long sequence into one vector, and the decoder has to process this vector to generate the translation.</li><li>If a human would translate this sentence, he wouldn't read the whole sentence and memorize it then try to translate it. He translates a part at a time.</li><li>The performance of this model decreases if a sentence is so long.</li><li>We will discuss the attention model that works like a human that looks at parts at a time. That will significantly increase the accuracy even with bigger sequence:<ul><li><img src="64.png"></li><li>Blue is the normal model, while green is the model with attention mechanism.</li></ul></li></ul></li><li>In this section we will give just some intuitions about the attention model and in the next section we will discuss its details.</li><li>At first the attention model was developed for machine translation but then other applications used it like computer vision and new architectures like Neural Turing machine.</li><li>The attention model was descried in this paper:<ul><li>[<a href="https://arxiv.org/abs/1409.0473" target="_blank" rel="noopener">Bahdanau</a> et. al., 2014. Neural machine translation by jointly learning to align and translate]</li></ul></li><li>Now for the intuition:<ul><li>Suppose that our decoder is a bidirectional RNN:<ul><li><img src="65.png"></li></ul></li><li>We gave the French sentence to the encoder and it should generate a vector that represents the inputs.</li><li>Now to generate the first word in English which is "Jane" we will make another RNN which is the decoder.</li><li>attention weights are used to specify which words are needed when to generate a word. So to generate "jane" we will look at "jane", "visite", "l'Afrique"<ul><li><img src="66.png"></li></ul></li><li>alpha<sup>1,1</sup>, alpha<sup>1,2</sup>, and alpha<sup>1,3</sup> are the attention weights used.</li><li>And so to generate any word there will be a set of attention weights that controls which words we are looking at right now.<ul><li><img src="67.png"></li></ul></li><li>‚Äã</li></ul></li></ul><h4 id="attention-model">Attention Model</h4><ul><li>Lets formalize the intuition from the last section into the exact details on how this can be implemented.</li><li>First we will have an bidirectional RNN - most common is LSTMs - that encodes French language:<ul><li><img src="68.png"></li></ul></li><li>For learning purposes, lets assume that a<sup>&lt;t&gt;</sup> will include the both directions.</li><li>We will have an RNN to extract the output using a context <code>c</code> which is computer using the attention weights. This denotes how much information do it needs to look in a<sup>&lt;t&gt;</sup><ul><li><img src="69.png"></li></ul></li><li>Sum of the attention weights for each element in the sequence should be 1:<ul><li><img src="70.png"></li></ul></li><li>Also the context <code>c</code> are calculated using this equation:<ul><li><img src="71.png"></li></ul></li><li>Lets see how can we compute the attention weights:<ul><li>So alpha<sup>&lt;t, t'&gt;</sup> = amount of attention y<sup>&lt;t&gt;</sup> should pay to a<sup>&lt;t'&gt;</sup><ul><li>Like for example we payed attention to the first three words through alpha<sup>&lt;1,1&gt;</sup>, alpha<sup>&lt;1,2&gt;</sup>, alpha<sup>&lt;1,3&gt;</sup></li></ul></li><li>We are going to softmax the attention weights so that their sum is 1:<ul><li><img src="72.png"></li></ul></li><li>Now we need to know how to calculate e<sup>&lt;t, t'&gt;</sup>. We will compute e using a small neural network:<ul><li><img src="73.png"></li><li>s<sup>&lt;t-1&gt;</sup> is the hidden state of the RNN s, and a<sup>&lt;t'&gt;</sup> is the activation of the other bidirectional RNN.</li></ul></li></ul></li><li>One of the disadvantages of this algorithm is that it takes quadratic time or quadratic cost to run.</li><li>One fun way to see how attention works is by visualizing the attention weights:<ul><li><img src="74.png"></li></ul></li></ul><h3 id="speech-recognition---audio-data">Speech recognition - Audio data</h3><h4 id="speech-recognition">Speech recognition</h4><ul><li>The rise of accurate speech recognition was the most exciting work done in sequence to sequence deep learning models.</li><li>Lets define the speech recognition problem:<ul><li>X: audio clip</li><li>Y: transcript</li><li>If you plot an audio clip it should look like this:<ul><li><img src="75.png"></li><li>The horizontal axis is time while the vertical is changes in air pressure.</li></ul></li><li>What really is an audio recording? A microphone records little variations in air pressure over time, and it is these little variations in air pressure that your ear also perceives as sound. You can think of an audio recording is a long list of numbers measuring the little air pressure changes detected by the microphone. We will use audio sampled at 44100 Hz (or 44100 Hertz). This means the microphone gives us 44100 numbers per second. Thus, a 10 second audio clip is represented by 441000 numbers (= <span class="math inline">\(10 \times 44100\)</span>).</li><li>It is quite difficult to work with "raw" representation of audio.</li><li>Because even human ear doesn't process raw wave forms, the human ear can process different frequencies.</li><li>There's a common preprocessing step for an audio to generate a spectrogram which works similarly to human ears.<ul><li><img src="76.png"></li><li>The horizontal axis is time while the vertical is frequencies. Intensity of different colors shows the amount of energy.</li></ul></li><li>A spectrogram is computed by sliding a window over the raw audio signal, and calculates the most active frequencies in each window using a Fourier transform.</li><li>In the past days, speech recognition systems was built with phonemes that are a hand engineered basic units of sound. Linguists use to hypothesize any writing down audio in terms of phonemes which they thought would be the best way to do speech recognition.</li><li>End to end deep learning found that phonemes was no longer needed. One of the things that made this possible is the large audio datasets.</li><li>Research papers has 300 - 3000 hours while the best commercial systems are now trained on over 100,000 hours of audio.</li></ul></li><li>You can build an accurate speech recognition system using the attention model that we have descried in the previous section:<ul><li><img src="77.png"></li></ul></li><li>One of the methods that seem to work well is CTC cost which stands for "Connectionist temporal classification"<ul><li>To explain this lets say that Y = "<u>the quick brown fox</u>"</li><li>We are going to use an RNN with input, output structure:<ul><li><img src="78.png"></li></ul></li><li>Hint: this is a bidirectional RNN, but it practice a bidirectional RNN are used.</li><li>Notice that the number of inputs and number of outputs are the same here, but in speech recognition problem X tends to be a lot larger than Y.<ul><li>10 seconds of audio gives us X with shape (1000, ). This 10 seconds can't have 1000 character!</li></ul></li><li>The CTC cost function allows the RNN to output something like this:<ul><li><code>ttt_h_eee\&lt;SPC&gt;___\&lt;SPC&gt;qqq___</code></li><li>This covers from "The quick".</li><li>The _ is a special character called blank and <code>&lt;SPC&gt;</code> is for space character.</li></ul></li><li>So the 19 character in our Y can be generated into 1000 character output using CTC and its special blanks.</li><li>The ideas were taken from this paper:<ul><li>[<a href="https://dl.acm.org/citation.cfm?id=1143891" target="_blank" rel="noopener">Graves</a> et al., 2006. Connectionist Temporal Classification: Labeling unsegmented sequence data with recurrent neural networks]</li><li>This paper also are used by baidue deep speech.</li></ul></li></ul></li><li>Both options attention models and CTC cost can give you an accurate speech recognition system.</li></ul><h4 id="trigger-word-detection">Trigger Word Detection</h4><ul><li>With the rise of deep learning speech recognition, there are a lot of devices that can be waked up by saying some words with your voice. These systems are called trigger word systems.</li><li>For example, Alexa - a smart device made by amazon - can answer your call "Alexa, What time is it" and then Alexa will reply you.</li><li>Trigger word detection system includes:<ul><li><img src="79.png"></li></ul></li><li>Now the trigger word detection literature is still evolving so there actually isn't a single universally agreed on algorithm for trigger word detection yet. But lets discuss an algorithm that can be used.</li><li>Lets now build a model that can solve this problem:<ul><li>X: audio clip</li><li>X has been preprocessed and spectrogram features has been returned of X<ul><li>X<sup>&lt;1&gt;</sup>, X<sup>&lt;2&gt;</sup>, ... , X<sup>&lt;t&gt;</sup></li></ul></li><li>Y will be labels 0 or 1. 0 represents the non trigger word, while 1 is that trigger word that we need to detect.</li><li>The model architecture can be like this:<ul><li><img src="80.png"></li><li>The vertical lines in the audio clip represents the trigger words. The corresponding to this will be 1.</li></ul></li><li>One disadvantage of this is the imbalanced dataset outputs. There will be a lot of zeros and little ones.</li><li>A hack to solve this is to make an output a few ones for several times or for a fixed period of time before reverting back to zero.<ul><li><img src="81.png"></li><li><img src="85.png"></li></ul></li><li>‚Äã</li></ul></li></ul><h2 id="extras">Extras</h2><h3 id="machine-translation-attention-model-from-notebooks">Machine translation attention model (From notebooks)</h3><ul><li>The model is built with keras layers.</li><li>The attention model.<ul><li><img src="83.png"></li><li>There are two separate LSTMs in this model. Because the one at the bottom of the picture is a Bi-directional LSTM and comes <em>before</em> the attention mechanism, we will call it <em>pre-attention</em> Bi-LSTM. The LSTM at the top of the diagram comes <em>after</em> the attention mechanism, so we will call it the <em>post-attention</em> LSTM. The pre-attention Bi-LSTM goes through <span class="math inline">\(T_x\)</span> time steps; the post-attention LSTM goes through <span class="math inline">\(T_y\)</span> time steps.</li><li>The post-attention LSTM passes <span class="math inline">\(s^{\langle t \rangle}, c^{\langle t \rangle}\)</span> from one time step to the next. In the lecture videos, we were using only a basic RNN for the post-activation sequence model, so the state captured by the RNN output activations <span class="math inline">\(s^{\langle t\rangle}\)</span>. But since we are using an LSTM here, the LSTM has both the output activation <span class="math inline">\(s^{\langle t\rangle}\)</span> and the hidden cell state <span class="math inline">\(c^{\langle t\rangle}\)</span>. However, unlike previous text generation examples (such as Dinosaurus in week 1), in this model the post-activation LSTM at time <span class="math inline">\(t\)</span> does will not take the specific generated <span class="math inline">\(y^{\langle t-1 \rangle}\)</span> as input; it only takes <span class="math inline">\(s^{\langle t\rangle}\)</span> and <span class="math inline">\(c^{\langle t\rangle}\)</span> as input. We have designed the model this way, because (unlike language generation where adjacent characters are highly correlated) there isn't as strong a dependency between the previous character and the next character in a YYYY-MM-DD date.</li></ul></li><li>What one "Attention" step does to calculate the attention variables <span class="math inline">\(\alpha^{\langle t, t&#39; \rangle}\)</span>, which are used to compute the context variable <span class="math inline">\(context^{\langle t \rangle}\)</span> for each timestep in the output (<span class="math inline">\(t=1, \ldots, T_y\)</span>).<ul><li><img src="84.png"></li><li>The diagram uses a <code>RepeatVector</code> node to copy <span class="math inline">\(s^{\langle t-1 \rangle}\)</span>'s value <span class="math inline">\(T_x\)</span> times, and then <code>Concatenation</code> to concatenate <span class="math inline">\(s^{\langle t-1 \rangle}\)</span> and <span class="math inline">\(a^{\langle t \rangle}\)</span> to compute <span class="math inline">\(e^{\langle t, t&#39;}\)</span>, which is then passed through a softmax to compute <span class="math inline">\(\alpha^{\langle t, t&#39; \rangle}\)</span>.</li></ul></li></ul><p><br><br> <br><br> These Notes were made by <a href="mailto:mma18@fayoum.edu.eg" target="_blank" rel="noopener">Mahmoud Badry</a> <span class="citation" data-cites="2018">@2018</span></p>]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sequence Models </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Machine Learning Yarning(part two)</title>
      <link href="/Machine-Learning-Yarning-part-two/2019/03/20/"/>
      <url>/Machine-Learning-Yarning-part-two/2019/03/20/</url>
      
        <content type="html"><![CDATA[<h2 id="bias-and-variance">Bias and Variance</h2><h3 id="techniques-for-reducing-avoidable-bias">Techniques for reducing avoidable bias</h3><p>If your learning algorithm suffers from high avoidable bias, you might try the following techniques: - <strong>Increase the model size</strong> ‚Äã(such as number of neurons/layers): This technique reduces bias, since it should allow you to fit the training set better. If you find that this increases variance, then use regularization, which will usually eliminate the increase in variance.</p><ul><li><p><strong>Modify input features based on insights from error analysis‚Äã</strong>: Say your error analysis inspires you to create additional features that help the algorithm eliminate a particular category of errors. (We discuss this further in the next chapter.) These new features could help with both bias and variance. In theory, adding more features could increase the variance; but if you find this to be the case, then use regularization, which will usually eliminate the increase in variance.</p></li><li><p><strong>Reduce or eliminate regularization‚Äã</strong> (L2 regularization, L1 regularization, dropout): This will reduce avoidable bias, but increase variance.</p></li><li><p><strong>Modify model architecture</strong>‚Äã (such as neural network architecture) so that it is more suitable for your problem: This technique can affect both bias and variance. One method that is not helpful:</p></li><li><p><strong>Add more training data‚Äã</strong>: This technique helps with variance problems, but it usually has no significant effect on bias.</p></li><li><p>In addition to the techniques described earlier to address high bias, I sometimes also carry out an error analysis on the ‚Äãtraining data,‚Äã following a protocol similar to error analysis on the <strong>Eyeball dev set</strong>. This can be useful if your algorithm has high bias‚Äîi.e., if it is not fitting the training set well.</p></li></ul><h3 id="techniques-for-reducing-variance">Techniques for reducing variance</h3><p>If your learning algorithm suffers from high variance, you might try the following techniques: - <strong>Add more training data‚Äã</strong>: This is the simplest and most reliable way to address variance, so long as you have access to significantly more data and enough computational power to process the data.</p><ul><li><p><strong>Add regularization‚Äã</strong> (L2 regularization, L1 regularization, dropout): This technique reduces variance but increases bias.</p></li><li><p><strong>Add early stopping‚Äã</strong> (i.e., stop gradient descent early, based on dev set error): This technique reduces variance but increases bias. Early stopping behaves a lot like regularization methods, and some authors call it a regularization technique.</p></li><li><p><strong>Feature selection to decrease number/type of input features</strong>:‚Äã This technique might help with variance problems, but it might also increase bias. Reducing the number of features slightly (say going from 1,000 features to 900) is unlikely to have a huge effect on bias. Reducing it significantly (say going from 1,000 features to 100‚Äîa 10x reduction) is more likely to have a significant effect, so long as you are not excluding too many useful features. In modern deep learning, when data is plentiful, there has been a shift away from feature selection, and we are now more likely to give all the features we have to the algorithm and let the algorithm sort out which ones to use based on the data. But when your training set is small, feature selection can be very useful.</p></li><li><p><strong>Decrease the model size ‚Äã(such as number of neurons/layers)</strong>: ‚ÄãUse with caution.‚Äã This technique could decrease variance, while possibly increasing bias. However, I don‚Äôt recommend this technique for addressing variance. Adding regularization usually gives better classification performance. The advantage of reducing the model size is reducing your computational cost and thus speeding up how quickly you can train models. If speeding up model training is useful, then by all means consider decreasing the model size. But if your goal is to reduce variance, and you are not concerned about the computational cost, consider adding regularization instead. Here are two additional tactics, repeated from the previous chapter on addressing bias:</p></li><li><p><strong>Modify input features based on insights from error analysis‚Äã</strong>: Say your error analysis inspires you to create additional features that help the algorithm to eliminate a particular category of errors. These new features could help with both bias and variance. In Page 53 Machine Learning Yearning-Draft Andrew Ng theory, adding more features could increase the variance; but if you find this to be the case, then use regularization, which will usually eliminate the increase in variance.</p></li><li><p><strong>Modify model architecture‚Äã</strong> (such as neural network architecture) so that it is more suitable for your problem: This technique can affect both bias and variance.</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Book Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Machine Learning Yarning(part one)</title>
      <link href="/Machine-Learning-Yarning-part-one/2019/03/19/"/>
      <url>/Machine-Learning-Yarning-part-one/2019/03/19/</url>
      
        <content type="html"><![CDATA[<p><strong>Reference from <em>Machine Learning Yarning</em> by Andrew Ng</strong></p><h2 id="setting-up-development-and-test-sets">Setting up development and test sets</h2><ul><li>Choose dev and test sets from a distribution that reflects what data you expect to get in the future and want to do well on. This may not be the same as your training data‚Äôs distribution.</li><li>Choose dev and test sets from the same distribution if possible.</li><li>Choose a single-number evaluation metric for your team to optimize. If there are multiple goals that you care about, consider combining them into a single formula (such as averaging multiple error metrics) or defining satisficing and optimizing metrics.</li><li>Machine learning is a highly iterative process: You may try many dozens of ideas before finding one that you‚Äôre satisfied with.</li><li>Having dev/test sets and a single-number evaluation metric helps you quickly evaluate algorithms, and therefore iterate faster.</li><li>When starting out on a brand new application, try to establish dev/test sets and a metric quickly, say in less than a week. It might be okay to take longer on mature applications.</li><li>The old heuristic of a 70%/30% train/test split does not apply for problems where you have a lot of data; the dev and test sets can be much less than 30% of the data.</li><li>Your dev set should be large enough to detect meaningful changes in the accuracy of your algorithm, but not necessarily much larger. Your test set should be big enough to give you a confident estimate of the final performance of your system.</li><li>If your dev set and metric are no longer pointing your team in the right direction, quickly change them:<ul><li>If you had overfit the dev set, get more dev set data.</li><li>If the actual distribution you care about is different from the dev/test set distribution, get new dev/test set data.</li><li>If your metric is no longer measuring what is most important to you, change the metric.</li></ul></li></ul><h2 id="basic-error-analysis">Basic Error Analysis</h2><ul><li>When you start a new project, especially if it is in an area in which you are not an expert, it is hard to correctly guess the most promising directions.</li><li>So don‚Äôt start off trying to design and build the perfect system. Instead build and train a basic system as quickly as possible‚Äîperhaps in a few days. Then use error analysis to help you identify the most promising directions and iteratively improve your algorithm from there.</li><li>Carry out error analysis by manually examining ~100 dev set examples the algorithm misclassifies and counting the major categories of errors. Use this information to prioritize what types of errors to work on fixing.</li><li>Consider splitting the dev set into an Eyeball dev set, which you will manually examine, and a Blackbox dev set, which you will not manually examine. If performance on the Eyeball dev set is much better than the Blackbox dev set, you have overfit the Eyeball dev set and should consider acquiring more data for it.<ul><li>Why do we explicitly separate the dev set into Eyeball and Blackbox dev sets? Since you will gain intuition about the examples in the Eyeball dev set, you will start to overfit the Eyeball dev set faster. If you see the performance on the Eyeball dev set improving much more rapidly than the performance on the Blackbox dev set, you have overfit the Eyeball dev set. In this case, you might need to discard it and find a new Eyeball dev set by moving more examples from the Blackbox dev set into the Eyeball dev set or by acquiring new labeled data.</li><li>If you are working on a task that even humans cannot do well, then the exercise of examining an Eyeball dev set will not be as helpful because it is harder to figure out why the algorithm didn‚Äôt classify an example correctly</li></ul></li><li>The Eyeball dev set should be big enough so that your algorithm misclassifies enough examples for you to analyze. A Blackbox dev set of 1,000-10,000 examples is sufficient for many applications.</li><li>If your dev set is not big enough to split this way, just use the entire dev set as an Eyeball dev set for manual error analysis, model selection, and hyperparameter tuning.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Book Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matrix Algebra for Engineers (part two)</title>
      <link href="/Matrix-Algebra-for-Engineers-part-two/2019/03/17/"/>
      <url>/Matrix-Algebra-for-Engineers-part-two/2019/03/17/</url>
      
        <content type="html"><![CDATA[<p><strong>reference from <em>Matrix Algebra for Engineers</em> by Jeffrey R. Chasnov</strong></p><h2 id="vector-spaces">Vector spaces</h2><ul><li>A vector space consists of a set of vectors and a set of scalars.</li><li>For the set of vectors and scalars to form a vector space, the set of vectors must be <strong>closed</strong> under vector addition and scalar multiplication. That is, when you multiply any two vectors in the set by real numbers and add them, the resulting vector must still be in the set.</li></ul><p>As an example: <span class="math display">\[\begin{pmatrix}\mu_{1} \\\mu_{2} \\\mu_{3} \\\end{pmatrix},\begin{pmatrix}\nu_{1} \\\nu_{2} \\\nu_{3} \\\end{pmatrix}\]</span></p><p>then</p><p><span class="math display">\[w = a\mu + b\nu = \begin{pmatrix}a\mu_{1} + b\nu_{1} \\ a\mu_{2} + b\nu_{2} \\ a\mu_{3} + b\nu_{3} \\ \end{pmatrix}\]</span></p><p>so that the set of all three-by-one matrices (together with the set of real numbers) is a vector space. This space is usually called .</p><h2 id="linear-independence">Linear independence</h2><p>The set of vectors, <span class="math inline">\({u_{1}, u_{2}, . . . , u_{n}}\)</span>, are linearly independent if for any scalars <span class="math inline">\(c_{1}, c_{2}, . . . , c_{n}\)</span>, the equation</p><p><span class="math display">\[c_{1}u_{1}+c_{2}u_{2}+¬∑¬∑¬∑+c_{n}u_{n} = 0\]</span></p><p>has only the solution <span class="math inline">\(c_{1} = c_{2} = ¬∑¬∑¬∑ = c_{n} = 0\)</span></p><h2 id="span-basis-and-dimension">Span, basis and dimension</h2><h3 id="span">Span</h3><p>Given a set of vectors, one can generate a vector space by forming all linear combinations of that set of vectors. The span of the set of vectors <span class="math inline">\({v_{1}, v_{2}, . . . , v_{n}}\)</span> is the vector space consisting of all linear combinations of <span class="math inline">\(v_{1}, v_{2}, . . . , v_{n}\)</span>. We say that a set of vectors spans a vector space.</p><h3 id="basis">basis</h3><p>The <strong>smallest</strong> set of vectors needed to span a vector space forms a <strong>basis</strong> for that vector space</p><h3 id="dimension">dimension</h3><p><strong>The number</strong> of vectors in a basis gives the dimension of the vector space</p><h2 id="gram-schmidt-process">Gram-Schmidt process</h2><p>Given any basis for a vector space, we can use an algorithm called the Gram-Schmidt process to construct an <strong>orthonormal basis</strong> for that space</p><p>Let the vectors <span class="math inline">\(v_{1}, v_{2}, . . . , v_{n}\)</span> be a basis for some n- dimensional vector space. We will assume here that these vectors are column matrices, but this process also applies more generally. We will construct an orthogonal basis <span class="math inline">\(u_{1}, u_{2}, . . . , u_{n}\)</span>, and then normalize each vector to obtain an orthonormal basis.</p><p>First, define <span class="math inline">\(u_{1} = v_{1}\)</span>, To find the next orthogonal basis vector, define</p><p><span class="math display">\[u_{2} = v_{2} - \frac{(u_{1}^{T}v_{2})u_{1}}{u_{1}^{T}u_{1}}\]</span></p><p>The next orthogonal vector in the new basis can be found from <span class="math display">\[u_{3} = v_{3} - \frac{(u_{1}^{T}v_{3})u_{1}}{u_{1}^{T}u_{1}} - \frac{(u_{2}^{T}v_{3})u_{2}}{u_{2}^{T}u_{2}}\]</span></p><p>We can continue in this fashion to construct n orthogonal basis vectors. These vectors can then be normalized via <span class="math display">\[\hat{u_{1}} = \frac{u_{1}}{(u_{1}^{T}u_{1})^{\frac{1}{2}}}\]</span></p><h2 id="null-space">Null space</h2><p>The null space of a matrix A, which we denote as Null(A), is the vector space spanned by all column vectors x that satisfy the matrix equation</p><p><span class="math display">\[Ax = 0\]</span></p><p>To find a basis for the null space of a noninvertible matrix, we bring A to reduced row echelon form. <span class="math display">\[A = \begin{pmatrix}-3 &amp; 6 &amp; -1 &amp; 1 &amp; -1 \\1 &amp; -2 &amp; 2 &amp; 3 &amp; -1 \\2 &amp; -4 &amp; 5 &amp; 8 &amp; -4 \\\end{pmatrix} \rightarrowA = \begin{pmatrix}1 &amp; -2 &amp; 0 &amp; -1 &amp; 3 \\0 &amp; 0 &amp; 1 &amp; 2 &amp; -2 \\0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\\end{pmatrix}\]</span></p><p>We call the variables associated with the pivot columns, x1 and x3, <strong>basic variables</strong>, and the variables associated with the non-pivot columns, x2, x4 and x5, <strong>free variables</strong>. Writing the basic variables on the left-hand side of the <span class="math inline">\(Ax = 0\)</span> equations, we have from the first and second rows</p><p><span class="math display">\[\begin{align*}x_{1} = 2x_{2} + x_{4} - 3x_{5}, \\x_{3} = -2x_{4} + 2x_{5}, \\\end{align*}\]</span></p><p>Eliminating x1 and x3, we can write the general solution for vectors in Null(A) as</p><p><span class="math display">\[\begin{pmatrix}2x_{2} + x_{4} - 3x_{5} \\x_{2} \\-2x_{4} + 2x_{5} \\x_{4} \\ x_{5} \\\end{pmatrix} = x_{2}\begin{pmatrix}2 \\1 \\0 \\0 \\0 \\\end{pmatrix} + x_{4}\begin{pmatrix}1 \\0 \\-2 \\1 \\0 \\\end{pmatrix} + x_{5}\begin{pmatrix}-3 \\0 \\2 \\0 \\1 \\\end{pmatrix}\]</span></p><p>where the free variables <span class="math inline">\(x_{2}\)</span>, <span class="math inline">\(x_{4}\)</span>, and <span class="math inline">\(x_{5}\)</span> can take any values. By writing the null space in this form, a basis for Null(A) is made evident, and is given by</p><p><span class="math display">\[\left\{\begin{pmatrix}2 \\1 \\0 \\0 \\0 \\\end{pmatrix},\begin{pmatrix}1 \\0 \\-2 \\1 \\0 \\\end{pmatrix},\begin{pmatrix}-3 \\0 \\2 \\0 \\1 \\\end{pmatrix}\right\}\]</span></p><h2 id="application-of-the-null-space">Application of the null space</h2><p>An underdetermined system of linear equations <span class="math inline">\(Ax = b\)</span> with more unknowns than equations may not have a unique solution</p><p>If u is the general form of a vector in the null space of A, and v is any vector that satisfies <span class="math inline">\(Av = b\)</span>, then <span class="math inline">\(x = u+v\)</span> satisfies <span class="math inline">\(Ax = A(u+v) = Au+Av = 0+b = b\)</span>. The general solution of <span class="math inline">\(Ax = b\)</span> can therefore be written as the sum of a general vector in Null(A) and a particular vector that satisfies the underdetermined system.</p><p>As an example,</p><p><span class="math display">\[\begin{align*}2x_{1} + 2x_{2} + x_{3} = 0, \\2x_{1} ‚àí 2x_{2} ‚àí x_{3} = 1, \\\end{align*}\]</span></p><p>We first bring the augmented matrix to reduced row echelon form:</p><p><span class="math display">\[\begin{pmatrix}2 &amp; 2 &amp; 1 &amp; 0 \\2 &amp; -2 &amp; -1 &amp; 1 \\\end{pmatrix} \rightarrow\begin{pmatrix}1 &amp; 0 &amp; 0 &amp; \frac{1}{4} \\0 &amp; 1 &amp; \frac{1}{2} &amp; -\frac{1}{4} \\\end{pmatrix}\]</span></p><p>The null space is determined from <span class="math inline">\(x_{1} = 0\)</span> and <span class="math inline">\(x_{2} = ‚àí\frac{x_{3}}{2}\)</span>, and we can write</p><p><span class="math display">\[Null(A) = span \left\{ \begin{pmatrix} 0 \\ -1 \\ 2 \end{pmatrix}\right\}\]</span></p><p>The general solution to the original underdetermined linear system is <strong>the sum of the null space and the particular solution</strong> and is given by</p><p><span class="math display">\[\begin{pmatrix}x_{1} \\x_{2} \\x_{3} \\\end{pmatrix} = a \begin{pmatrix}0 \\-1 \\2 \\\end{pmatrix} + \frac{1}{4} \begin{pmatrix}1 \\-1 \\0 \\\end{pmatrix}\]</span></p><h2 id="column-space">Column space</h2><p>The column space of a matrix is the vector space spanned by the columns of the matrix. <strong>When a matrix is multiplied by a column vector, the resulting vector is in the column space of the matrix</strong>, as can be seen from</p><p><span class="math display">\[\begin{pmatrix}a &amp; b \\c &amp; d \\\end{pmatrix} \begin{pmatrix}x \\y \\\end{pmatrix} = \begin{pmatrix}ax + by \\cx + dy \\\end{pmatrix} = x\begin{pmatrix}a \\c \\\end{pmatrix} + y\begin{pmatrix}b \\d \\\end{pmatrix}\]</span></p><p>Recall that the dimension of the null space is the number of non-pivot columns‚Äîequal to the number of free variables‚Äîso that the sum of the dimensions of the null space and the column space is equal to the total number of columns‚Äîequal</p><p><span class="math display">\[dim(Col(A)) + dim(Null(A)) = n.\]</span></p><h2 id="row-space-left-null-space-and-rank">Row space, left null space and rank</h2><p>In addition to the column space and the null space, a matrix A has two more vector spaces associated with it, namely the <strong>column space</strong> and <strong>null space</strong> of <span class="math inline">\(A^{T}\)</span>, which are called the <strong>row space</strong> and the <strong>left null space</strong>.</p><p>Furthermore, the dimension of the column space of A is also equal to the number of pivot columns, so that the dimensions of the column space and the row space of a matrix are equal. We have <span class="math display">\[dim(Col(A)) = dim(Row(A)).\]</span></p><p><strong>We call this dimension the rank of the matrix A</strong></p><h2 id="orthogonal-projections">Orthogonal projections</h2><p>Suppose that V is an n-dimensional vector space and W is a p-dimensional subspace of V. In general, the orthogonal projection of v onto W is given by <span class="math display">\[v_{proj_{W}} = (v^{T}s_{1})s_{1} + (v^{T}s_{2})s_{2} + ¬∑ ¬∑ ¬∑ + (v^{T}s_{p})s_{p};\]</span></p><p>and we can write <span class="math display">\[v=v_{proj_{W}} +(v‚àív_{proj_{W}})\]</span></p><p><span class="math inline">\(v_{proj_{W}}\)</span> is closer to v than any other vector in W</p><h2 id="the-least-squares-problem">The least-squares problem</h2><figure><img src="linear.png" alt="linear.png"><figcaption>linear.png</figcaption></figure><p>These equations constitute a system of n equations in the two unknowns <span class="math inline">\(\beta_{0}\)</span> and <span class="math inline">\(\beta_{1}\)</span>. The corresponding matrix equation is given by: <span class="math display">\[\begin{pmatrix}1 &amp; x_{1} \\1 &amp; x_{2} \\\vdots \\1 &amp; x_{n} \\\end{pmatrix}\begin{pmatrix}\beta{0} \\\beta{1} \\\end{pmatrix} = \begin{pmatrix}y_{1} \\y_{2} \\\vdots \\y_{n}\end{pmatrix}\]</span></p><p>This is an overdetermined system of equations with no solution. The problem of least squares is to find the best solution.</p><p>We can generalize this problem as follows. Suppose we are given a matrix equation, <span class="math inline">\(Ax = b\)</span>, that has no solution because b is not in the column space of A. So instead we solve <span class="math inline">\(Ax = b_{projCol(A)}\)</span> , where <span class="math inline">\(b_{projCol(A)}\)</span> is the projection of b onto the column space of A. The solution is then called the least-squares solution for x.</p><p><span class="math display">\[b_{projCol(A)} = A(A^{T}A)^{‚àí1}A^{T}b.\]</span></p><h2 id="laplace-expansion">Laplace expansion</h2><p><span class="math display">\[\begin{vmatrix}a &amp; b &amp; c \\d &amp; e &amp; f \\g &amp; h &amp; i \\\end{vmatrix} = aei+bfg+cdh‚àíceg‚àíbdi‚àíafh = a(ei‚àí fh)‚àíb(di‚àí fg)+c(dh‚àíeg) \\\]</span></p><p>which can be written suggestively as</p><p><span class="math display">\[\begin{vmatrix}a &amp; b &amp; c \\d &amp; e &amp; f \\g &amp; h &amp; i \\\end{vmatrix} = a \begin{vmatrix}e &amp; f \\h &amp; i \\\end{vmatrix} - b \begin{vmatrix}d &amp; f \\g &amp; i \\\end{vmatrix} + c \begin{vmatrix}d &amp; e \\g &amp; h \\\end{vmatrix}\]</span></p><h2 id="properties-of-a-determinant">Properties of a determinant</h2><ul><li>Property 1: The determinant of the identity matrix is one;</li><li>Property 2: The determinant changes sign under row interchange;</li><li>Property 3: The determinant is a linear function of the first row, holding all other rows fixed.</li></ul><h2 id="the-eigenvalue-problem">The eigenvalue problem</h2><p>Let A be a square matrix, x a column vector, and Œª a scalar. The eigenvalue problem for A solves</p><p><span class="math display">\[Ax = \lambda x\]</span></p><p>for eigenvalues <span class="math inline">\(\lambda_{i}\)</span> with corresponding eigenvectors <span class="math inline">\(x_{i}\)</span>. Making use of the identity matrix I, the eigenvalue problem can be rewritten as</p><p><span class="math display">\[(A‚àí\lambda I)x = 0\]</span></p><p>For there to be nonzero eigenvectors, the matrix <span class="math inline">\((A ‚àí \lambda I)\)</span> must be singular, that is,</p><p><span class="math display">\[det(A‚àí\lambda I) = 0.\]</span></p><h2 id="matrix-diagonalization">Matrix diagonalization</h2><p>For concreteness, consider a two-by-two matrix A with eigenvalues and eigenvectors given by</p><p><span class="math display">\[\lambda_{1}, x_{1} = \begin{pmatrix}x_{11}\\x_{21}\\\end{pmatrix} ;\lambda_{2}, x_{2} = \begin{pmatrix}x_{12}\\x_{22}\\\end{pmatrix} \]</span></p><p>And consider the matrix product and factorization given by</p><p><span class="math display">\[A \begin{pmatrix}x_{11} &amp; x_{12} \\x_{21} &amp; x_{22} \\\end{pmatrix} = \begin{pmatrix}\lambda_{1}x_{11} &amp; \lambda_{2}x_{12} \\\lambda_{1}x_{21} &amp; \lambda_{2}x_{22} \\\end{pmatrix} = \begin{pmatrix}x_{11} &amp; x_{12} \\x_{21} &amp; x_{22} \\\end{pmatrix} \begin{pmatrix}\lambda_{1} &amp; 0 \\0 &amp; \lambda_{2} \\\end{pmatrix}\]</span></p><p>Generalizing, we define S to be the matrix whose columns are the eigenvectors of A, and Œõ to be the diagonal matrix with eigenvalues down the diagonal. Then for any n-by-n matrix with n linearly independent eigenvectors, we have</p><p><span class="math display">\[AS = SŒõ\]</span></p><p>where S is an invertible matrix. Multiplying both sides on the right or the left by <span class="math inline">\(S^{‚àí1}\)</span>, we derive the relations</p><p><span class="math display">\[A = SŒõS^{‚àí1} \quad or \quad Œõ = S^{‚àí1}AS.\]</span></p><h2 id="powers-of-a-matrix">Powers of a matrix</h2><p>Suppose that A is diagonalizable, and consider <span class="math display">\[A^{p} = (SŒõS^{‚àí1})(SŒõS^{‚àí1}) = SŒõ^{p}S^{‚àí1}\]</span></p><p><span class="math display">\[\begin{pmatrix}\lambda_{1} &amp; 0 \\0 &amp; \lambda_{2} \\\end{pmatrix}\begin{pmatrix}\lambda_{1} &amp; 0 \\0 &amp; \lambda_{2} \\\end{pmatrix} = \begin{pmatrix}\lambda_{1}^{2} &amp; 0 \\0 &amp; \lambda_{2}^{2} \\\end{pmatrix}\]</span></p>]]></content>
      
      
      <categories>
          
          <category> Linear Algebra </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Matrix Algebra for Engineers (part one)</title>
      <link href="/Matrix-Algebra-for-Engineers-part-one/2019/03/17/"/>
      <url>/Matrix-Algebra-for-Engineers-part-one/2019/03/17/</url>
      
        <content type="html"><![CDATA[<p><strong>reference from <em>Matrix Algebra for Engineers</em> by Jeffrey R. Chasnov</strong></p><h2 id="inner-and-outer-products">Inner and outer products</h2><p>The <strong>inner product</strong> (or dot product or scalar product) between two vectors is obtained from the ma- trix product of a row vector times a column vector</p><p><span class="math display">\[\mu^{T}\nu = ( \mu_{1} \quad \mu_{2} \quad \mu_{3} ) \begin{pmatrix} \nu_{1} \\ \nu_{2} \\ \nu_{3} \end{pmatrix} = \mu_{1}\nu_{1} + \mu_{2}\nu_{2} + \mu_{3}\nu_{3}.\]</span></p><p>If the inner product between two vectors is zero, we say that the vectors are <strong>orthogonal</strong>.</p><p>The <strong>norm</strong> of a vector is defined by</p><p><span class="math display">\[\lVert \mu \rVert = (\mu^{T}\mu) =  ( \mu_{1}^{2} + \mu_{2}^{2} + \mu_{3}^{2} )^{\frac{1}{2}}\]</span></p><p>If the norm of a vector is equal to one, we say that the vector is <strong>normalized.</strong> If a set of vectors are mutually orthogonal and normalized, we say that these vectors are <strong>orthonormal.</strong></p><p>An <strong>outer product</strong> is also defined, and is used in some applications. The outer product between u and v is given by</p><p><span class="math display">\[\mu\nu^{T} = \begin{pmatrix} \mu_{1} \\ \mu_{2} \\ \mu_{3} \end{pmatrix} ( \nu_{1} \quad \nu_{2} \quad \nu_{3} ) = \begin{pmatrix} \mu_{1}\nu_{1} &amp; \mu_{1}\nu_{2} &amp; \mu_{1}\nu_{3} \\\mu_{2}\nu_{1} &amp; \mu_{2}\nu_{2} &amp; \mu_{2}\nu_{3} \\\mu_{3}\nu_{1} &amp; \mu_{3}\nu_{2} &amp; \mu_{3}\nu_{3} \\\end{pmatrix}\]</span></p><h2 id="inverse-matrix">Inverse matrix</h2><p>Square matrices may have inverses. When a matrix A has an inverse, we say it is invertible and denote its inverse by <span class="math inline">\(A^{‚àí1}\)</span>. The inverse matrix satisfies</p><p><span class="math display">\[AA^{‚àí1} = A^{‚àí1}A = I.\]</span></p><p><span class="math display">\[A^{-1} = \frac{1}{ad-bc}\begin{pmatrix}d &amp; -b \\-c &amp; a \\\end{pmatrix} \]</span></p><p><span class="math display">\[det \ A = \begin{vmatrix}a &amp; b \\c &amp; d \\\end{vmatrix}= ad - bc\]</span></p><p>The determinant of a two-by-two matrix is the product of the diagonals minus the product of the off-diagonals. Evidently, A is invertible only if <span class="math inline">\(det \quad A \neq 0.\)</span> Notice that the inverse of a two-by-two matrix, in words, is found by switching the diagonal elements of the matrix, negating the off-diagonal elements, and dividing by the determinant. Later, we will show that an n-by-n matrix is invertible <strong>if and only if its determinant is nonzero.</strong> This will require a more general definition of determinant.</p><h2 id="orthogonal-matrices">Orthogonal matrices</h2><p>A square matrix Q with real entries that satisfies</p><p><span class="math display">\[Q^{‚àí1} = Q^{T}\]</span></p><p>is called an <strong>orthogonal matrix</strong>.</p><p>Since the columns of <span class="math inline">\(Q^{T}\)</span> are just the rows of Q, and <span class="math inline">\(QQ^{T}\)</span> = I, the row vectors that form Q must be <strong>orthonormal</strong>. Similarly, since the rows of <span class="math inline">\(Q^{T}\)</span> are just the columns of Q, and <span class="math inline">\(Q^{T}Q\)</span> = I, the column vectors that form Q must also be <strong>orthonormal</strong>.</p><h2 id="rotation-matrices">Rotation matrices</h2><figure><img src="Rotating.png" alt="Rotating.png"><figcaption>Rotating.png</figcaption></figure><p>Writing the equations for <span class="math inline">\(x&#39;\)</span> and <span class="math inline">\(y&#39;\)</span> in matrix form, we have</p><p><span class="math display">\[\begin{pmatrix} x&#39; \\y&#39; \\\end{pmatrix}  = \begin{pmatrix} cos\theta &amp; -sin\theta \\sin\theta &amp; cos\theta \\\end{pmatrix} = \begin{pmatrix} x \\y \\\end{pmatrix} \]</span></p><p>The above two-by-two matrix is a rotation matrix and we will denote it by <span class="math inline">\(R_{Œ∏}\)</span>. Observe that the rows and columns of <span class="math inline">\(R_{Œ∏}\)</span> are <strong>orthonormal</strong> and that the inverse of <span class="math inline">\(R_{Œ∏}\)</span> is just its transpose. The inverse of <span class="math inline">\(R_{Œ∏}\)</span> rotates a vector by ‚àíŒ∏.</p><h2 id="permutation-matrices">Permutation matrices</h2><p>Another type of <strong>orthogonal matrix</strong> is a permutation matrix. An n-by-n permutation matrix, when <strong>multiplying on the left permutes the rows of a matrix</strong>, and when <strong>multiplying on the right permutes the columns</strong>. Clearly, permuting the rows of a column vector will not change its norm.</p><p><span class="math display">\[\begin{pmatrix}0 &amp; 1 \\1 &amp; 0 \\\end{pmatrix}\begin{pmatrix}a &amp; b \\c &amp; d \\\end{pmatrix} =\begin{pmatrix}c &amp; d \\a &amp; b \\\end{pmatrix}\]</span></p><p><span class="math display">\[\begin{pmatrix}a &amp; b \\c &amp; d \\\end{pmatrix}\begin{pmatrix}0 &amp; 1 \\1 &amp; 0 \\\end{pmatrix} =\begin{pmatrix}b &amp; a \\d &amp; c \\\end{pmatrix}\]</span></p><h2 id="gaussian-elimination">Gaussian elimination</h2><p><span class="math display">\[\begin{align*}‚àí3x_{1} + 2x_{2} ‚àí x_{3} = ‚àí1 \\ 6x_{1} ‚àí 6x_{2} + 7x_{3} = ‚àí7,  \\3x_{1} ‚àí 4x_{2} + 4x_{3} = ‚àí6, \\\end{align*}\]</span></p><p>which can be written in matrix form as</p><p><span class="math display">\[\begin{pmatrix}-3 &amp; 2 &amp; -1 &amp; -1 \\6 &amp; -6 &amp; 7 &amp; -7 \\3 &amp; -4 &amp; 4 &amp; -6 \\\end{pmatrix}\]</span></p><p>Row reduction is then performed on this augmented matrix. Allowed operations are (1) interchange the order of any rows, (2) multiply any row by a constant, (3) add a multiple of one row to another row. These three operations do not change the solution of the original equations. The goal here is to <strong>convert the matrix A into upper-triangular form</strong>, and then use this form to quickly solve for the unknowns x.</p><p>We first form what is called an <strong>augmented matrix</strong> by combining the matrix A with the column vector b</p><p><span class="math display">\[\begin{pmatrix}-3 &amp; 2 &amp; -1 &amp; -1 \\0 &amp; -2 &amp; 5 &amp; -9 \\0 &amp; -2 &amp; 3 &amp; -7 \\\end{pmatrix}\]</span></p><p>These equations can be solved by back substitution, starting from the last equation and working backwards. We have</p><p><span class="math display">\[\begin{align*}&amp; x_{3} = ‚àí1, \\&amp; x_{2} = ‚àí\frac{1}{2}(‚àí9‚àí5x_{3})=2, \\&amp; x_{1} = ‚àí\frac{1}{3}(‚àí1+x_{3}‚àí2x_{2})=2. \\\end{align*}\]</span></p><p>We have thus found the solution</p><p><span class="math display">\[\begin{pmatrix}x_{1} \\x_{2} \\x_{3} \\\end{pmatrix} = \begin{pmatrix}2 \\2 \\-1 \\\end{pmatrix}\]</span></p><p>When performing Gaussian elimination, the diagonal element that is used during the elimination procedure is called the <strong>pivot</strong></p><h2 id="reduced-row-echelon-form">Reduced row echelon form</h2><p>If we continue the row elimination procedure so that all the pivots are one, and all the entries above and below the pivots are eliminated, then we say that the resulting matrix is in <strong>reduced row echelon form</strong></p><p><span class="math display">\[\begin{pmatrix}1 &amp; 2 &amp; 3 &amp; 4 \\4 &amp; 5 &amp; 6 &amp; 7 \\6 &amp; 7 &amp; 8 &amp; 9 \\\end{pmatrix} \\\]</span> <span class="math display">\[rref(A) = \begin{pmatrix}1 &amp; 0 &amp; -1 &amp; -2 \\0 &amp; 1 &amp; 2 &amp; 3 \\0 &amp; 0 &amp; 0 &amp; 0 \\\end{pmatrix}\]</span></p><h2 id="computing-inverses">Computing inverses</h2><p><span class="math display">\[(A | E) \rightarrow (E | A^{-1})\]</span></p><p>Because: <span class="math display">\[\begin{align*}&amp; p_{1}p_{2}p_{3}p_{4}...p_{n}A \rightarrow E \\&amp; p_{1}p_{2}p_{3}p_{4}...p_{n} = A^{-1} \\&amp; p_{1}p_{2}p_{3}p_{4}...p_{n}E \rightarrow A^{-1} \\\end{align*}\]</span></p><p><span class="math display">\[\begin{pmatrix}-3 &amp; -2 &amp; -1 &amp; 1 &amp; 0 &amp; 0 \\6  &amp; -6 &amp; 7  &amp; 0 &amp; 1 &amp; 0\\3  &amp; -4 &amp; 4  &amp; 0 &amp; 0 &amp; 1 \\\end{pmatrix}\rightarrow\begin{pmatrix}1 &amp; 0 &amp; 0 &amp; -\frac{1}{3} &amp; \frac{1}{3}  &amp; -\frac{2}{3}  \\0 &amp; 1 &amp; 0 &amp; \frac{1}{4} &amp; \frac{3}{4} &amp; -\frac{5}{4} \\0 &amp; 0 &amp; 1 &amp; \frac{1}{2} &amp; \frac{1}{2} &amp; -\frac{1}{2}  \\\end{pmatrix} \]</span></p><h2 id="lu-decomposition">LU decomposition</h2><p>row reduction of a matrix A can be written as</p><p><span class="math display">\[M_{3}M_{2}M_{1}A = U\]</span></p><p>where U is upper triangular. Upon inverting the elementary matrices, we have</p><p><span class="math display">\[A = M_{3}^{-1}M_{2}^{-1}M_{1}^{-1}U\]</span></p><p>Therefore,</p><p><span class="math display">\[L = M_{3}^{-1}M_{2}^{-1}M_{1}^{-1}\]</span></p><p>Our LU decomposition of A is therefore:</p><p><span class="math display">\[\begin{pmatrix}-3 &amp; -2 &amp; -1\\6 &amp; -6 &amp; 7\\3 &amp; -4 &amp; 4\\\end{pmatrix} = \begin{pmatrix}1 &amp; 0 &amp; 0\\-2 &amp; 1 &amp; 0\\-1 &amp; 1 &amp; 1\\\end{pmatrix}\begin{pmatrix}-3 &amp; 2 &amp; -1\\0 &amp; -2 &amp; 5\\0 &amp; 0 &amp; -2\\\end{pmatrix}\]</span></p><h2 id="solving-lux-b">Solving (LU)x = b</h2><p>The LU decomposition is useful when one needs to solve <strong>Ax = b</strong> for many right-hand-sides. With the LU decomposition in hand, one writes</p><p><span class="math display">\[(LU)x = L(Ux) = b\]</span></p>]]></content>
      
      
      <categories>
          
          <category> Linear Algebra </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Course Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fluent Python</title>
      <link href="/Fluent-Python/2019/03/05/"/>
      <url>/Fluent-Python/2019/03/05/</url>
      
        <content type="html"><![CDATA[<h1 id="Â≠óÂÖ∏">Â≠óÂÖ∏</h1><p>##Ê≥õÊò†Â∞ÑÁ±ªÂûã Mapping Âíå MutableMapping Ëøô‰∏§‰∏™ÊäΩË±°Âü∫Á±ªÔºåÊèê‰æõÂΩ¢ÂºèÂåñÊé•Âè£ <img src="DBAF8F19D803E115AEC422F6D4E4F04B.png" alt="Screen Shot 2018-09-29 at 10.44.50.png"></p><h3 id="‰ªÄ‰πàÊòØÂèØÊï£ÂàóÊï∞ÊçÆ">‰ªÄ‰πàÊòØÂèØÊï£ÂàóÊï∞ÊçÆÔºü</h3><ul><li>ÂéüÂ≠ê‰∏çÂèØÂèòÊï∞ÊçÆÁ±ªÂûãÔºàstrÔºåbytes Âíå numberÔºâ</li><li>Âú®ÁîüÂëΩÂë®ÊúüÁ±ªÔºåÊï£ÂàóÂÄº‰∏çÂèòÁöÑÁ±ªÂûã„ÄÇÈúÄË¶ÅÊúâ_<em>hash_</em> Âíå _<em>qe_</em> ÊñπÊ≥ï</li><li><p>ÂÖÉÁªÑÁ±ªÂûãÈúÄË¶ÅÂÖÉÁªÑÈáåÊØè‰∏Ä‰∏™ÂÄºÈÉΩÊòØÂèØÊï£ÂàóÁ±ªÂûã<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = (<span class="string">"a"</span>,<span class="string">"b"</span>,(<span class="string">"c"</span>,<span class="string">"d"</span>))  <span class="comment">#-&gt;hashable</span></span><br><span class="line">a = (<span class="string">"a"</span>,<span class="string">"b"</span>,[<span class="string">"c"</span>,<span class="string">"d"</span>])  <span class="comment">#-&gt; not hashable</span></span><br></pre></td></tr></table></figure></p></li><li><p>Áî®Êà∑Ëá™ÂÆö‰πâÁöÑÂØπË±°ÈÉΩÊòØÂèØÊï£ÂàóÁöÑÔºåÂõ†‰∏∫Êï£ÂàóÂÄºÂ∞±ÊòØid()ÂáΩÊï∞ÁöÑÂÄº„ÄÇÂ¶ÇÊûúËá™ÂÆö‰πâÂØπË±°ÂÆûÁé∞‰∫Ü__eq__ÊñπÊ≥ïÔºåÂπ∂‰∏îËøô‰∏™Áî®Âà∞‰∫ÜËøô‰∏™ÂØπË±°ÁöÑÂÜÖÈÉ®Áä∂ÊÄÅÁöÑËØùÔºåÂÜÖÈÉ®Áä∂ÊÄÅÂøÖÈ°ª‰∏çÂèØÂèò„ÄÇ</p></li></ul><h2 id="Â≠óÂÖ∏Êé®ÂØº">Â≠óÂÖ∏Êé®ÂØº</h2><p>ÂèØ‰ª•‰ªé‰ªª‰ΩïÈîÆÂÄºÂØπ‰Ωú‰∏∫‰Ωú‰∏∫ÂÖÉÁ¥†ÁöÑÂèØËø≠‰ª£ÂØπË±°‰∏≠Êé®ÂØº <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = [(<span class="string">"zhang"</span>,<span class="number">23</span>),[<span class="string">"li"</span>,<span class="number">23</span>],[<span class="string">"ding"</span>,<span class="number">24</span>],&#123;<span class="string">"huang"</span>,<span class="number">24</span>&#125;]</span><br><span class="line">data_dict = &#123;name:age <span class="keyword">for</span> name,age <span class="keyword">in</span> data&#125;</span><br><span class="line">print(data_dict)   <span class="comment">#-&gt; &#123;'zhang': 23, 'li': 23, 'ding': 24, 24: 'huang'&#125;</span></span><br></pre></td></tr></table></figure></p><h2 id="Â∏∏Áî®ÁöÑÊò†Â∞ÑÊñπÊ≥ï">Â∏∏Áî®ÁöÑÊò†Â∞ÑÊñπÊ≥ï</h2><ul><li>d.clear()</li><li><ol start="4" type="a"><li></li></ol></li><li>_<em>contains_</em>(k)</li><li>d.copy() #ÊΩúËµãÂÄº</li><li>d._<em>delitem_</em>(k)</li><li>d.get(k, default)</li><li>d.items()</li><li>d._<em>iter_</em>()</li><li>d.keys()</li><li>d._<em>len_</em>()</li><li>d.pop(k)</li><li>d.popitem()</li><li>d._<em>reversed_</em>() #‰ªÖÈíàÂØπ OrdereDidic</li><li>d.setdefault(k,[default]) #Â¶ÇÊûúÂ≠òÂú®ÈîÆk,Â∞ÜÂØπÂ∫îÁöÑÂÄºËÆæÁΩÆ‰∏∫default,ÁÑ∂ÂêéËøîÂõû.Â¶ÇÊûúÊ≤°ÊúâÔºåd[k] = default.</li><li>d._<em>setitem_</em>(k,v)</li><li>d.values()</li></ul><p>###setdefault Áî®Ê≥ï <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">my_dict.setdefault(key,[]).append(value)  <span class="comment">#ÊïàÁéáÊõ¥È´ò</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ket <span class="keyword">not</span> <span class="keyword">in</span> my_dict:</span><br><span class="line">    my_dict[key] = []</span><br><span class="line">my_dict[key].append(new_value)</span><br></pre></td></tr></table></figure></p><h2 id="Êò†Â∞ÑÁöÑÂºπÊÄßÊü•ËØ¢">Êò†Â∞ÑÁöÑÂºπÊÄßÊü•ËØ¢</h2><h3 id="defaultdict">defaultdict</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line">a = defaultdict(list)</span><br></pre></td></tr></table></figure><p>listÂèØË∞ÉÁî®ÂØπË±°Â≠òÂÇ®Âú®default_factory‰∏≠ÔºåÂΩìa[k]Ôºåk‰∏çÂ≠òÂú®Êó∂Ôºåa._<em>getitem_</em> ‰ºöË∞ÉÁî® _<em>miss_</em> ÊñπÊ≥ïÔºàÂè™‰ºöÂú®__getitem__ÈáåË∞ÉÁî®ÔºâÔºåÁÑ∂ÂêéÂà©Áî®default_factoryÁîüÊàêËøîÂõûÂÄº„ÄÇ</p><h3 id="Ëá™Â∑±ÂàõÂª∫ÁªßÊâø-dict-Á±ªÂûãÁÑ∂ÂêéÂÖÖË°Ä__miss__ÊñπÊ≥ï">Ëá™Â∑±ÂàõÂª∫ÁªßÊâø dict Á±ªÂûãÔºåÁÑ∂ÂêéÂÖÖË°Ä__miss__ÊñπÊ≥ï <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrDict</span><span class="params">(dict)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__missing__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(key, str):</span><br><span class="line">            <span class="keyword">return</span> KeyError(key)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self[str(key)]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key, default=None)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self[key]</span><br><span class="line">        <span class="keyword">except</span> keyError:</span><br><span class="line">            <span class="keyword">return</span> default</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__contains__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> key <span class="keyword">in</span> self.keys() <span class="keyword">or</span> str(key) <span class="keyword">in</span> self.keys()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    a = StrDict(&#123;<span class="string">"1"</span>: <span class="number">2</span>&#125;)</span><br><span class="line">    print(a[<span class="number">1</span>])</span><br></pre></td></tr></table></figure></h3><p>k in my_dict.keys() (.items(), .values())ËøôÁßçÊìç‰ΩúÂæàÂø´ÔºåÂõ†‰∏∫ËøîÂõûÁöÑÊòØËßÜÂõæÔºåÁ±ª‰ººÈõÜÂêà„ÄÇ</p><p>##Â≠óÂÖ∏ÁöÑÂèòÁßç - collections.OrderedDict Ê∑ªÂä†ÂÖÉÁ¥†Êó∂‰ºö‰øùÊåÅÈ°∫Â∫èÔºåpopitemÈªòËÆ§ËøîÂõûÊúÄÂêé‰∏Ä‰∏™ÂÖÉÁ¥†Ôºåpopitem(last=False)ÈªòËÆ§ËøîÂõûÁ¨¨‰∏Ä‰∏™ÂÖÉÁ¥† - collections.ChainMap ÂÆπÁ∫≥Â§ö‰∏™‰∏çÂêåÁöÑÊò†Â∞ÑÂØπË±°ÔºåÂú®ÈîÆÊü•ÊâæÊó∂Ôºå‰ºöÂΩìÂÅöÊï¥‰ΩìÊü•Êâæ„ÄÇ</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> builtins</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> ChainMap</span><br><span class="line">pylookup = ChainMap(locals(),globals(),vars(builtins))</span><br><span class="line">print(pylookup)</span><br></pre></td></tr></table></figure><ul><li>collections.Counter ÁªôÊØè‰∏™ÈîÆ‰ºöÂáÜÂ§á‰∏Ä‰∏™ËÆ°Êï∞Âô® <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line">a = Counter(<span class="string">"aabbccdd"</span>)</span><br><span class="line">print(a)</span><br><span class="line">a.update(<span class="string">"aacc"</span>)</span><br><span class="line">print(a)</span><br><span class="line">print(a.most_common(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#output</span></span><br><span class="line"><span class="comment">#Counter(&#123;'a': 2, 'b': 2, 'c': 2, 'd': 2&#125;)</span></span><br><span class="line"><span class="comment">#Counter(&#123;'a': 4, 'c': 4, 'b': 2, 'd': 2&#125;)</span></span><br><span class="line"><span class="comment">#[('a', 4)]</span></span><br></pre></td></tr></table></figure></li></ul><p>##Â≠êÁ±ªÂåñ UserDict Âê´ÊúâdataÂ±ûÊÄßÔºåÊòØdictÂÆû‰æãÔºåÊòØÂ≠òÂÇ®Êï∞ÊçÆÁöÑÂú∞Êñπ. <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrDict</span><span class="params">(dict)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__missing__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(key, str):</span><br><span class="line">            <span class="keyword">return</span> KeyError(key)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self[str(key)]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key, default=None)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self[key]</span><br><span class="line">        <span class="keyword">except</span> keyError:</span><br><span class="line">            <span class="keyword">return</span> default</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, key,item)</span>:</span></span><br><span class="line">        self.data[str(key)] = item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__contains__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> str(key) <span class="keyword">in</span> self.data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    a = StrDict(&#123;<span class="string">"1"</span>: <span class="number">2</span>&#125;)</span><br><span class="line">    print(a[<span class="number">1</span>])</span><br></pre></td></tr></table></figure></p><h2 id="‰∏çÂèØÂèòÁöÑÊò†Â∞ÑÁ±ªÂûã">‰∏çÂèØÂèòÁöÑÊò†Â∞ÑÁ±ªÂûã</h2><p>MappingProxyType ËøîÂõûÂä®ÊÄÅÂÜÖÂ≠òËßÜÂõæÔºå‰∏çËÉΩÈù†ËßÜÂõæÊîπÂèòÂéüÂØπË±°Ôºå‰ΩÜÊòØÂéüÂØπË±°ÁöÑÊõ¥ÊîπÂèØ‰ª•Áî±ËßÜÂõæË°®Áé∞Âá∫Êù•</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> types <span class="keyword">import</span> MappingProxyType</span><br><span class="line">d = &#123;<span class="number">1</span>:<span class="string">'A'</span>&#125;</span><br><span class="line">d_proxy = MappingProxyType(d)</span><br><span class="line">print(d_proxy[<span class="number">1</span>])</span><br><span class="line"><span class="comment">#d_proxy[2] = 'B'  #-&gt;error</span></span><br><span class="line">d[<span class="number">2</span>] = <span class="string">'B'</span></span><br><span class="line">print(d_proxy)</span><br></pre></td></tr></table></figure><h2 id="ÈõÜÂêàËÆ∫">ÈõÜÂêàËÆ∫</h2><ul><li>set ÂØπË±°‰∏≠ÁöÑÂÖÉÁ¥†ÂøÖÈ°ªÊòØÂèØÊï£ÂàóÁöÑÔºå‰ΩÜÊòØ set ÂØπË±°Êú¨Ë∫´ÊòØ‰∏çÂèØÊï£ÂàóÁöÑÔºåfrozensetÊòØÂèØÊï£ÂàóÁöÑÂØπË±°„ÄÇ</li><li><div class="line-block">ÂêàÈõÜ</div></li><li>- Â∑ÆÈõÜ</li><li>&amp; ‰∫§ÈõÜ</li><li>ÂàõÂª∫Á©∫ÈõÜÂêàË¶ÅÁî®set(), Â¶ÇÊûúÁî®{}ÂàôÊòØÂàõÂª∫Á©∫Â≠óÂÖ∏</li><li>ÈõÜÂêàÊé®ÂØº <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;char(i) <span class="keyword">for</span> i range(<span class="number">100</span>)&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="ÈõÜÂêàÁöÑËøêÁÆó">ÈõÜÂêàÁöÑËøêÁÆó</h3><p><img src="C3428851CF36CA77881134A4708D4841.png" alt="Screen Shot 2018-09-29 at 14.33.28.png"> <img src="8415F855AA68BCF9DCA14B17E1921973.png" alt="Screen Shot 2018-09-29 at 14.33.39.png"></p><p>###ÈõÜÂêàÁöÑÊØîËæÉËøêÁÆó <img src="799D1125CE215336FD672BD8D6FE818A.png" alt="Screen Shot 2018-09-29 at 14.33.04.png"> <img src="C2D3E9BDE8560C1FAA57CFADA8BEF174.png" alt="Screen Shot 2018-09-29 at 14.31.57.png"></p><p>##dict set listÊïàÁéáÊØîËæÉ <strong>Êü•ÊâæÂÖÉÁ¥†Ôºådict Âíå set ÊúâÂº∫Â§ßÁöÑÊï£ÂàóË°®ÂÅöÊîØÊíëÔºåÈÄüÂ∫¶ÈùûÂ∏∏Âø´</strong></p><p>##Êï£ÂàóË°®ÂéüÁêÜ my_dict[key], Áé∞Ê†πÊçÆ hash(key)Ôºå Ê†πÊçÆÊúÄ‰ΩéÂá†‰ΩçÂéªÊï£ÂàóË°®ÈáåÊü•ÊâæË°®ÂÖÉ„ÄÇÂ¶Ç‰∏∫Á©∫ÔºåËøîÂõû errorÔºõËã•ÊúâË°®ÂÖÉÔºåÂàôË°®ÂÖÉ‰∏≠Â≠òÂú® foundkey:foundvalue. Ëã• foundkey == key, ËøîÂõû foundvalue„ÄÇËã•‰∏çÁ≠âÔºåÂèñ hash(key)ÁöÑÈ´òÂá†‰ΩçÂÜçÂéªÊâæ„ÄÇÂæ™ÁéØ„ÄÇ <img src="D8F57ABE26A5E48D0E4D5D33C5FFB90D.png" alt="Screen Shot 2018-09-29 at 15.02.31.png"></p><p>##dict conclusion - ÈîÆÂøÖÈ°ªÊòØÂèØÊï£ÂàóÁöÑ ‰∏Ä‰∏™ÂèØÊï£ÂàóÁöÑÂØπË±°ÂøÖÈ°ªÊª°Ë∂≥ - _<em>hash_</em>()ÊñπÊ≥ïËøîÂõûÁöÑÂÄº‰∏çÂèò - _<em>eq_</em>()ÂèØÂÅöÁõ∏Á≠âÂà§Êñ≠ - a == bÔºå Âàô hash(a) == hash(b) - Â≠óÂÖ∏ÂÜÖÂ≠òÂºÄÈîÄÂ∑®Â§ß Â≠óÂÖ∏‰ΩøÁî®Êï£ÂàóË°®ÔºåÊï£ÂàóË°®ÊòØÁ®ÄÁñèÁöÑ„ÄÇ - ÈîÆÊü•ËØ¢ÂæàÂø´ Á©∫Èó¥Êç¢Êó∂Èó¥ - Ê∑ªÂä†Êñ∞ÈîÆÂèØËÉΩ‰ºöÊîπÂèòÂ∑≤ÊúâÁöÑÈ°∫Â∫è</p><h2 id="set-conclusion">set conclusion</h2><ul><li>ÈõÜÂêàÂÖÉÁ¥†ÂøÖÈ°ªÊòØÂèØÊï£ÂàóÁöÑ ‰∏Ä‰∏™ÂèØÊï£ÂàóÁöÑÂØπË±°ÂøÖÈ°ªÊª°Ë∂≥<ul><li>_<em>hash_</em>()ÊñπÊ≥ïËøîÂõûÁöÑÂÄº‰∏çÂèò</li><li>_<em>eq_</em>()ÂèØÂÅöÁõ∏Á≠âÂà§Êñ≠</li><li>a == bÔºå Âàô hash(a) == hash(b)</li></ul></li><li>ÈõÜÂêàÂÜÖÂ≠òÂºÄÈîÄÂ∑®Â§ß Â≠óÂÖ∏‰ΩøÁî®Êï£ÂàóË°®ÔºåÊï£ÂàóË°®ÊòØÁ®ÄÁñèÁöÑ„ÄÇ</li><li>È´òÊïàÂà§Êñ≠ÊòØÂê¶ÂåÖÂê´ Á©∫Èó¥Êç¢Êó∂Èó¥</li><li>Ê∑ªÂä†Êñ∞ÂÖÉÁ¥†ÂèØËÉΩ‰ºöÊîπÂèòÂ∑≤ÊúâÁöÑÈ°∫Â∫è</li></ul><h1 id="Â∫èÂàóÊ®°Âûã">Â∫èÂàóÊ®°Âûã</h1><h2 id="ÂàÜÁ±ª">ÂàÜÁ±ª</h2><ul><li>ÂÆπÂô®Â∫èÂàó list, tuple, collections.deque Á≠âÔºåÂ≠òÊîæÂØπË±°ÁöÑÂºïÁî®</li><li>ÊâÅÂπ≥Â∫èÂàó str, bytes, bytearray, memoryview, array.array ÂÆûÈôÖÊòØ‰∏ÄÊÆµËøûÁª≠ÁöÑÂÜÖÂ≠òÁ©∫Èó¥</li></ul><p>ÊàñËÄÖ</p><ul><li>ÂèØÂèòÂ∫èÂàó list, bytearray, array.array, collection.deque, memeoryview</li><li>‰∏çÂèØÂèòÂ∫èÂàó tuple, str, bytes.</li></ul><figure><img src="B73DD07CE3B22BF761AD94BD0A5B829E.png" alt="Screen Shot 2018-09-28 at 11.39.07.png"><figcaption>Screen Shot 2018-09-28 at 11.39.07.png</figcaption></figure><p>##ÂàóË°®Êé®ÂÄí‰∏éÁîüÊàêÂô®</p><h3 id="ÂàóË°®Êé®ÂÄí">ÂàóË°®Êé®ÂÄí</h3><ul><li>‰∏çÂ≠òÂú®ÂèòÈáèÊ≥ÑÈú≤ÁöÑÈóÆÈ¢ò</li><li>ÂèØÂØπÂÖÉÁ¥†ËøáÊª§ÂíåÂä†Â∑• Á±ª‰ºº map/filter ÁöÑÂäüËÉΩ</li><li>ÂèØËÆ°ÁÆóÁ¨õÂç°Â∞îÁßØ <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'a'</span></span><br><span class="line">symbols = <span class="string">"abcde"</span></span><br><span class="line">beyond_ascii = [ord(s) <span class="keyword">for</span> s <span class="keyword">in</span> symbols <span class="keyword">if</span> ord(s) &gt; <span class="number">10</span>]</span><br><span class="line">print(s) <span class="comment"># s = 'a'</span></span><br><span class="line"></span><br><span class="line">colors = [<span class="string">'b'</span>,<span class="string">'w'</span>]</span><br><span class="line">sizes = [<span class="string">'S'</span>,<span class="string">'M'</span>,<span class="string">'L'</span>]</span><br><span class="line">tshirts = [(color,size) <span class="keyword">for</span> color <span class="keyword">in</span> colors <span class="keyword">for</span> size <span class="keyword">in</span> sizes]</span><br></pre></td></tr></table></figure></li></ul><h3 id="ÁîüÊàêÂô®Ë°®ËææÂºè">ÁîüÊàêÂô®Ë°®ËææÂºè</h3><ul><li>Ë∑üÂàóË°®Êé®ÂÄíÂ∑Æ‰∏çÂ§öÔºåÊääÊñπÊã¨Âè∑Êç¢ÊàêÂúÜÊã¨Âè∑</li><li>ÁîüÊàêÂô®Ë°®ËææÂºèÈÅµÂÆàËø≠‰ª£Âô®ÂçèËÆÆÔºåÂèØ‰ª•ÈÄê‰∏™‰∫ßÂá∫ÂÖÉÁ¥†ÔºåËäÇÁúÅÂÜÖÂ≠ò <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">colors = [<span class="string">'b'</span>,<span class="string">'w'</span>]</span><br><span class="line">sizes = [<span class="string">'S'</span>,<span class="string">'M'</span>,<span class="string">'L'</span>]</span><br><span class="line"><span class="keyword">for</span> tshirt <span class="keyword">in</span> ((color,size) <span class="keyword">for</span> color <span class="keyword">in</span> colors <span class="keyword">for</span> size <span class="keyword">in</span> sizes):</span><br><span class="line">    print(tshirt)</span><br></pre></td></tr></table></figure></li></ul><p><strong>ÁîüÊàêÂô®Ë°®ËææÂºèÈÄê‰∏™‰∫ßÂá∫ÂÖÉÁ¥†ÔºåÂÜÖÂ≠ò‰∏≠‰∏ç‰ºö‰∏ÄÊ¨°ÊÄß‰∫ßÂá∫6‰∏™ tshirt ÁöÑÂàóË°®</strong></p><h2 id="ÂÖÉÁªÑ">ÂÖÉÁªÑ</h2><h3 id="ÂÖÉÁªÑ‰∏éËÆ∞ÂΩï">ÂÖÉÁªÑ‰∏éËÆ∞ÂΩï</h3><p>ÂÖÉÁªÑÂÖ∂ÂÆûÊòØÊ≤°ÊúâÂ≠óÊÆµÂêçÁöÑËÆ∞ÂΩïÔºåÂÖÉÁªÑ‰∏≠ÁöÑÊØè‰∏™ÂÖÉÁ¥†ÈÉΩÂ≠òÊîæ‰∫ÜËÆ∞ÂΩï‰∏≠‰∏Ä‰∏™Â≠óÊÆµÁöÑÊï∞ÊçÆ <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">city,year,pop,cha,area = (<span class="string">'Tokyo'</span>,<span class="number">2003</span>,<span class="number">32450</span>,<span class="number">0.66</span>,<span class="number">8014</span>)</span><br></pre></td></tr></table></figure></p><h3 id="ÂÖÉÁªÑÊãÜÂåÖ">ÂÖÉÁªÑÊãÜÂåÖ</h3><ul><li>ÂÖÉÁªÑÊãÜÂåÖÂèØ‰ª•ËøêÁî®Âà∞‰ªª‰ΩïÂèØËø≠‰ª£ÁöÑÂØπË±°‰∏äÔºåÂîØ‰∏ÄÁöÑË¶ÅÊ±ÇÊòØÂèØËø≠‰ª£ÂØπË±°ÁöÑÂÖÉÁ¥†Êï∞ÈáèÂøÖÈ°ª‰∏éÊé•Êî∂Ëøô‰∫õÂÖÉÁ¥†ÁöÑÂèòÈáèÊï∞Èáè‰∏ÄËá¥„ÄÇ</li><li>ÂèØÁî®*Êù•Ë°®Á§∫ÂøΩÁï•Â§ö‰ΩôÁöÑÂÖÉÁªÑ</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a,b,*rest = range(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><ul><li>*ËøêÁÆóÂèØ‰ª•ÊääÂèØËø≠‰ª£ÂØπË±°ÊãÜÂºÄ‰Ωú‰∏∫ÂáΩÊï∞ÁöÑÂèÇÊï∞</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">divmod(<span class="number">20</span>,<span class="number">8</span>) <span class="comment">#-&gt;(2,4)</span></span><br><span class="line">t = (<span class="number">20</span>,<span class="number">8</span>)</span><br><span class="line">divmod(*t) <span class="comment">#-&gt;(2,4)</span></span><br></pre></td></tr></table></figure><h3 id="ÂµåÂ•óÊãÜÂåÖ">ÂµåÂ•óÊãÜÂåÖ</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">metro_areas = [(<span class="string">'Tokyo'</span>,<span class="string">'JP'</span>,<span class="number">36.933</span>,(<span class="number">35.689</span>,<span class="number">139.691</span>)),(<span class="string">'Beijing'</span>,<span class="string">'CH'</span>,<span class="number">36.933</span>,(<span class="number">35.689</span>,<span class="number">139.691</span>))]</span><br><span class="line"><span class="keyword">for</span> name,cc,pop,(lat,long) <span class="keyword">in</span> metro_areas:</span><br><span class="line">    print(name)</span><br></pre></td></tr></table></figure><h3 id="ÂÖ∑ÂêçÂÖÉÁªÑ">ÂÖ∑ÂêçÂÖÉÁªÑ</h3><p>collections.namedtuple ÊòØ‰∏Ä‰∏™Â∑•ÂéÇÂáΩÊï∞,ÂèØ‰ª•Áî®Êù•ÂàõÂª∫‰∏Ä‰∏™Â∏¶Â≠óÊÆµÂêçÁöÑÂÖÉÁªÑÂíå‰∏Ä‰∏™ÊúâÂêçÂ≠óÁöÑÁ±ª,ËØ•Á±ªÁöÑÂÆû‰æãÊâÄÊ∂àËÄóÁöÑÂÜÖÂ≠òÂíåÂÖÉÁªÑÊòØ‰∏ÄÊ†∑ÁöÑ,Âõ†‰∏∫Â≠óÊÆµÂêçÈÉΩË¢´Â≠òÂú®ÂØπÂ∫îÁöÑÁ±ªÈáåÈù¢„ÄÇ<strong>ÊØîÊôÆÈÄöÁöÑÁ±ªÊ∂àËÄóÁöÑÂÜÖÂ≠òË¶ÅÂ∞è.</strong> - ÂÖ∑ÂêçÂÖÉÁªÑÂÖ∑Êúâ‰∏ìÊúâÁöÑÂ±ûÊÄßÂíåÊñπÊ≥ïÔºåÂ¶Ç_fieldsÁ±ªÂ±ûÊÄßÔºåÁ±ªÊñπÊ≥ï_make(iterable),ÂÆû‰æãÊñπÊ≥ï_asdict(). <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line">Person = namedtuple(<span class="string">'P'</span>,[<span class="string">'name'</span>,<span class="string">'sex'</span>])</span><br><span class="line">print(Person._fields)</span><br><span class="line">iterable = (<span class="string">"zhangruochi"</span>,<span class="string">"male"</span>)</span><br><span class="line">me =  Person._make(iterable)</span><br><span class="line">print(me._asdict())</span><br></pre></td></tr></table></figure></p><h3 id="‰Ωú‰∏∫‰∏çÂèØÂèòÂàóË°®ÁöÑÂÖÉÁªÑ">‰Ωú‰∏∫‰∏çÂèØÂèòÂàóË°®ÁöÑÂÖÉÁªÑ</h3><p>ÂÖÉÁªÑÈô§‰∫ÜÊ≤°ÊúâÂàóË°®ÂÖÉÁ¥†ÁöÑÂ¢ûÂáèÊñπÊ≥ïÔºåÊîØÊåÅÂàóË°®ÁöÑÂÖ∂‰ªñÊâÄÊúâÊñπÊ≥ï <img src="2FDBB65442D6C9ED48937F7F914DBD25.png" alt="Screen Shot 2018-09-28 at 13.22.43.png"> <img src="63647744ACC5D7C2680D50D4DAEBD9A7.png" alt="Screen Shot 2018-09-28 at 13.23.08.png"></p><h2 id="ÂàáÁâá">ÂàáÁâá</h2><p>ÂàáÁâáÂøΩÁï•ÊúÄÂêé‰∏Ä‰∏™ÂÖÉÁ¥†ÁöÑÂ•ΩÂ§Ñ - ÊúÄÂêé‰∏Ä‰∏™ÂÖÉÁ¥†Êó∂, Âè™ÊúâÈÄöËøáÊúÄÂêé‰∏Ä‰∏™ÂÖÉÁ¥†Áõ¥Êé•ÁúãÂá∫ÂàáÁâáÂå∫Èó¥ÈáåÊúâÂá†‰∏™ÂÖÉÁ¥† - Ëµ∑ÂßãÂíåÁªìÊùüÂÖÉÁ¥†ÈÉΩÂèØËßÅÊó∂Ôºå stop - start Âø´ÈÄüËÆ°ÁÆóÂá∫Âå∫Èó¥ÂÖÉÁ¥†ÁöÑ‰∏™Êï∞ - ÈÄöËøá‰∏Ä‰∏™ÂÖÉÁ¥†Áõ¥Êé•ÊääÂàóË°®ÂàÜÊàê‰∏§ÊÆµa[:x],a[x:]</p><h3 id="ÂØπË±°ÂàáÁâá">ÂØπË±°ÂàáÁâá</h3><p>seq[start:stop:step] -&gt; seq._<em>getitem_</em>(slice(start,stop,end)) Âõ†Ê≠§ÂèØ‰ª•Ëá™ÂÆö‰πâÂàáÁâáÂØπË±°: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my_slice = slice(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">seq = range(<span class="number">10</span>)</span><br><span class="line">sub_seq = seq[my_slice]</span><br></pre></td></tr></table></figure></p><h3 id="Â§öÁª¥ÂàáÁâá">Â§öÁª¥ÂàáÁâá</h3><p>ÂÜÖÁΩÆÁöÑÂ∫èÂàóÁ±ªÂûãÂè™ÊîØÊåÅ‰∏ÄÁª¥ÁöÑÁ¥¢ÂºïÔºåÂ§ñÈÉ®Â∫ì numpy ‰πãÁ±ªÁöÑÂèØ‰ª•ÊîØÊåÅ‰∫åÁª¥Á¥¢Âºï <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a[i,j]</span><br><span class="line">a[:,i:j]</span><br></pre></td></tr></table></figure></p><h3 id="ÂàáÁâáËµãÂÄº">ÂàáÁâáËµãÂÄº</h3><p>ÊääÂàáÁâáÊîæÂú®Ë¥üÂÄºËØ≠Âè•ÁöÑÂ∑¶ËæπÔºåÂ∞±ÂèØ‰ª•ÂØπÂàáÁâáËøõË°åÊìç‰Ωú <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l = list(range(<span class="number">10</span>))</span><br><span class="line">l[<span class="number">2</span>:<span class="number">5</span>] = [<span class="number">20</span>,<span class="number">30</span>]</span><br><span class="line"><span class="keyword">del</span> l[<span class="number">5</span>:<span class="number">7</span>]</span><br></pre></td></tr></table></figure></p><h2 id="ÂØπÂ∫èÂàóÂØπË±°‰ΩøÁî®Âíå">ÂØπÂ∫èÂàóÂØπË±°‰ΩøÁî®+Âíå*</h2><p><strong>+Âíå*ÈÉΩÈÅµÂÆà‰∏ç‰øÆÊîπÂéüÂØπË±°ÔºåËÄåÊûÑÂª∫Êñ∞ÂØπË±°ÁöÑËßÑÂæã</strong> Ê≥®ÊÑèÔºö</p><p>Áî®[[]]*3Êù•ÂàùÂßãÂåñÁî±ÂàóË°®ÁªÑÊàêÁöÑÂàóË°®Ôºå‰ΩÜÊòØÂàóË°®ÈáåÂÖ∂ÂÆûÂåÖÂê´ÁöÑÊòØ3‰∏™ÂØπÂêåÊÑèÂØπË±°ÁöÑÂºïÁî® <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = [[<span class="string">"_"</span>]*<span class="number">3</span>]*<span class="number">3</span></span><br><span class="line">a[<span class="number">1</span>][<span class="number">2</span>] = <span class="string">"x"</span></span><br><span class="line">print(a) <span class="comment">#-&gt; [['_', '_', 'x'], ['_', '_', 'x'], ['_', '_', 'x']]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Ê≠£Á°ÆÂÜôÊ≥ï</span></span><br><span class="line">a = [[<span class="string">"_"</span>]*<span class="number">3</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>)]</span><br><span class="line">a[<span class="number">1</span>][<span class="number">2</span>] = <span class="string">"x"</span></span><br><span class="line">print(a) <span class="comment">#-&gt; [['_', '_', '_'], ['_', '_', 'x'], ['_', '_', '_']]</span></span><br></pre></td></tr></table></figure></p><h3 id="Â∫èÂàóÁöÑÂ¢ûÈáèËµãÂÄº">Â∫èÂàóÁöÑÂ¢ûÈáèËµãÂÄº</h3><p>+= ËÉåÂêéÁöÑÁâπÊÆäÊñπÊ≥ïÊòØ_<em>iadd_</em>(Â∞±Âú∞Âä†Âèë)Ôºå ‰ΩÜÊòØÂ¶ÇÊûúËøô‰∏™Á±ªÊ≤°ÊúâÂÆûÁé∞__iadd__Êó∂ÔºåPythonËß£ÈáäÂô®‰ºöÈÄÄËÄå‰ΩøÁî®_<em>add_</em> - ÂØπ‰∫éÂèØÂèòÂ∫èÂàóa, a+=b Á≠âÂêå‰∫é a.extend(b) - ÂØπ‰∫é‰∏çÂèØÂèòÂ∫èÂàóa, a+=b Á≠âÂêå‰∫é a = a+b</p><p><strong>ÂØπ‰∏çÂèØÂèòÂØπË±°ËøõË°åÈáçÂ§çÊãºÊé•Êìç‰Ωú‰ºöÂØºËá¥ÊïàÁéá‰Ωé‰∏ãÔºåÂõ†‰∏∫ÊØèÊ¨°ÈÉΩÊúâÊñ∞ÂØπË±°ÁîüÊàêÔºåËøòË¶ÅÂ§çÂà∂ÂÖÉÁ¥†Âà∞Êñ∞ÂØπË±°</strong></p><p>‰∏Ä‰∏™ += ÁöÑË∞úÈ¢ò <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = (&quot;a&quot;,&quot;b&quot;,[&quot;c&quot;])</span><br><span class="line">t[2] += [&quot;d&quot;]</span><br></pre></td></tr></table></figure></p><p>Êó¢ÊäõÂá∫ÂºÇÂ∏∏Âèà‰øÆÊîπ‰∫Üt <img src="0CA907EFC52DDB8A7774BFD87DF0E77A.png" alt="Screen Shot 2018-09-28 at 14.12.41.png"> <img src="12BFE0DB402CD77D626966735C85ABDB.png" alt="Screen Shot 2018-09-28 at 14.12.47.png"> ÊïôËÆ≠Ôºö - ‰∏çË¶ÅÊääÂèØÂèòÂØπË±°ÊîæÂú®‰∏çÂèØÂèòÂØπË±°ÈáåÈù¢ - Â¢ûÈáèËµãÂÄº‰∏çÊòØÂéüÂ≠êÊìç‰Ωú</p><h2 id="Â∫èÂàóÂØπË±°ÁöÑÊéíÂ∫è">Â∫èÂàóÂØπË±°ÁöÑÊéíÂ∫è</h2><h3 id="Â∞±Âú∞ÊéíÂ∫èÂíåË¥üÂÄºÊéíÂ∫è">Â∞±Âú∞ÊéíÂ∫èÂíåË¥üÂÄºÊéíÂ∫è</h3><ul><li>list.sort()Â∞±Âú∞ÊéíÂ∫è</li><li>sorted(list) ‰ºöËµãÂÄº‰∏Ä‰ªΩÊñ∞ÁöÑÂ∫èÂàóÂØπÂÉè</li><li>PythonÊéíÂ∫èÁÆóÊ≥ïTimsortÁöÑÊó∂Èó¥Â§çÊùÇÂ∫¶‰∏∫nlog(n)</li></ul><h3 id="ÂèÇÊï∞">ÂèÇÊï∞</h3><ul><li>reverse, Â¶ÇËÆæÂÆö‰∏∫True, Ë¢´ÊéíÂ∫èÁöÑÂØπË±°‰ºö‰ª•ÈôçÂ∫èËæìÂá∫</li><li>key, ‰ª•ÂáΩÊï∞‰∏∫ÂèÇÊï∞ÔºåËøô‰∏™ÂáΩÊï∞‰ºöÂ∫îÁî®Âú®ÊØè‰∏™ÂÖÉÁ¥†‰∏ä <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sorted(list,key = len, reverse = <span class="keyword">True</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="Âà©Áî®bisect-ÁÆ°ÁêÜÂ∑≤ÊéíÂ∫èÁöÑÂ∫èÂàó">Âà©Áî®bisect ÁÆ°ÁêÜÂ∑≤ÊéíÂ∫èÁöÑÂ∫èÂàó</h2><ul><li>bisect Âà©Áî®‰∫åÂàÜÊü•ÊâæÊèíÂÖ•ÂÖÉÁ¥†ÁöÑ‰ΩçÁΩÆ</li><li>insort Âà©Áî® bisect Êü•Êâæ‰ΩçÁΩÆÁÑ∂ÂêéÊèíÂÖ•ÂÖÉÁ¥†</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span>  bisect <span class="keyword">import</span> *</span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#bisect = bisect_left</span></span><br><span class="line">index_left = bisect_left(a,<span class="number">3</span>)</span><br><span class="line">index_right = bisect_right(a,<span class="number">3.0</span>)</span><br><span class="line">print(index_left,index_right)  <span class="comment">#-&gt; 2 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#insort = insort_left</span></span><br><span class="line">insort_left(a,<span class="number">3</span>)</span><br><span class="line">insort_right(a,<span class="number">3.0</span>)</span><br><span class="line">print(a)  <span class="comment">#-&gt;[1, 2, 3, 3, 3.0, 4, 5, 6, 7]</span></span><br></pre></td></tr></table></figure><h2 id="listÁöÑÂèØÊõøÊç¢ÂØπË±°">listÁöÑÂèØÊõøÊç¢ÂØπË±°</h2><h3 id="array.array">array.array</h3><p>PythonÊï∞ÁªÑË∑ü C ËØ≠Ë®ÄÊï∞ÁªÑ‰∏ÄÊ†∑Á≤æÁÆÄ, Â¶ÇÊûúÊàë‰ª¨ÈúÄË¶Å‰∏Ä‰∏™Âè™ÂåÖÂê´Êï∞Â≠óÁöÑÂàóË°®,Áî® array.array‰ºöÊØîlist ÊïàÁéáÊõ¥È´òÔºå‰∏îarrayÊîØÊåÅÊâÄÊúâÂèØÂèòÂ∫èÂàóÁöÑÊìç‰Ωú.</p><ul><li>array.arrayÈúÄË¶ÅÁ±ªÂûãÁ†Å‰Ωú‰∏∫ÂèÇÊï∞Êù•Ë°®Á§∫Â∫ïÂ±ÇÁöÑ C ËØ≠Ë®ÄÈúÄË¶ÅÂ≠òÊîæÊÄéÊ†∑ÁöÑÊï∞ÊçÆ. Â¶Ç'b'Ë°®Á§∫ÊúâÁ¨¶Âè∑ÁöÑÂ≠óÁ¨¶.</li><li><p>Êï∞ÁªÑËøòÊèê‰æõÊõ¥Â§öÁöÑËØªÂèñÊñá‰ª∂ÂíåÂ≠òÂÖ•Êñá‰ª∂ÁöÑÊñπÊ≥ï <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> array <span class="keyword">import</span> array</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> random</span><br><span class="line">floats = array(<span class="string">'d'</span>,(random() <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>**<span class="number">7</span>)))</span><br><span class="line">print(floats[<span class="number">-1</span>])</span><br><span class="line">floats.tofile(<span class="string">"floats.bin"</span>,<span class="string">"wb"</span>)</span><br></pre></td></tr></table></figure></p></li><li>pickle.dump ‰πüÂèØ‰ª•Âø´ÈÄüÂ∫èÂàóÂåñÊï∞Â≠óÁ±ªÂûãÔºåÈÄüÂ∫¶‰∏é array.tofile()Âá†‰πé‰∏ÄÊ†∑Âø´, pickle ËøòÊîØÊåÅÂÖ∂‰ªñÁöÑÊï∞ÊçÆÁ±ªÂûã</li><li><p>‰ΩÜÊòØ‰ªéPython3.4ÂºÄÂßã, Êï∞ÁªÑ‰∏çÂÜçÊîØÊåÅÂ∞±Âú∞ÊéíÂ∫è, Â¶ÇÊûúÊéíÂ∫èÈúÄË¶ÅÊñ∞Âª∫Êï∞ÁªÑ a = array(a.typecode,sorted(array))</p></li></ul><h2 id="ÂÜÖÂ≠òËßÜÂõæ">ÂÜÖÂ≠òËßÜÂõæ</h2><p>memoryview ËÉΩÂ§üËÆ©‰Ω†Âú®‰∏çÂ§çÂà∂ÂÜÖÂ≠òÁöÑÊù°‰ª∂‰∏ã,Âú®Êï∞ÊçÆÁªìÊûÑ‰πãÈó¥ÂÖ±‰∫´ÂÜÖÂ≠ò <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> (<span class="number">100000</span>, <span class="number">200000</span>, <span class="number">300000</span>, <span class="number">400000</span>):</span><br><span class="line">    data = <span class="string">'x'</span>*n</span><br><span class="line">    start = time.time()</span><br><span class="line">    b = data</span><br><span class="line">    <span class="keyword">while</span> b:</span><br><span class="line">        b = b[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'bytes'</span>, n, time.time()-start</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> (<span class="number">100000</span>, <span class="number">200000</span>, <span class="number">300000</span>, <span class="number">400000</span>):</span><br><span class="line">    data = <span class="string">'x'</span>*n</span><br><span class="line">    start = time.time()</span><br><span class="line">    b = memoryview(data)</span><br><span class="line">    <span class="keyword">while</span> b:</span><br><span class="line">        b = b[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'memoryview'</span>, n, time.time()-start</span><br><span class="line">    </span><br><span class="line"><span class="string">"""output</span></span><br><span class="line"><span class="string">bytes 100000 0.240149021149</span></span><br><span class="line"><span class="string">bytes 200000 1.04921603203</span></span><br><span class="line"><span class="string">bytes 300000 2.66688489914</span></span><br><span class="line"><span class="string">bytes 400000 4.83206987381</span></span><br><span class="line"><span class="string">memoryview 100000 0.011647939682</span></span><br><span class="line"><span class="string">memoryview 200000 0.0258820056915</span></span><br><span class="line"><span class="string">memoryview 300000 0.0385529994965</span></span><br><span class="line"><span class="string">memoryview 400000 0.0550448894501</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure></p><h3 id="memoryview.cast-ÂèØ‰ª•Âà©Áî®‰∏çÂêåÁöÑÊñπÂºèËØªÂÜôÂêå‰∏ÄÂùóÂÜÖÂ≠ò">memoryview.cast ÂèØ‰ª•Âà©Áî®‰∏çÂêåÁöÑÊñπÂºèËØªÂÜôÂêå‰∏ÄÂùóÂÜÖÂ≠ò</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> array</span><br><span class="line">numbers = array.array(<span class="string">"h"</span>,[<span class="number">-2</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">memv = memoryview(numbers)</span><br><span class="line">print(memv[<span class="number">0</span>])  <span class="comment">#-&gt; -2</span></span><br><span class="line">memv_oct = memv.cast(<span class="string">'B'</span>)</span><br><span class="line">print(memv_oct.tolist()) <span class="comment">#-&gt; [254, 255, 255, 255, 0, 0, 1, 0, 2, 0</span></span><br><span class="line">memv_oct[<span class="number">4</span>] = <span class="number">1</span></span><br><span class="line">print(numbers)   <span class="comment">#-&gt; array('h', [-2, -1, 1, 1, 2])</span></span><br><span class="line"></span><br><span class="line">print(array.array(<span class="string">'H'</span>, [<span class="number">1</span>]).tostring())  <span class="comment">#-&gt; b'\x01\x00' python‰ΩøÁî®Â§ßÁ´ØÊ≥ïÔºåÂèñÈ´òÂ≠óËäÇÊï∞ÊçÆÂ≠òÊîæÂú®‰ΩéÂú∞ÂùÄ</span></span><br></pre></td></tr></table></figure><p>ËÆ°ÁÆóÊú∫Â≠òÂÇ®ÁöÑÂ§ßÁ´ØÊ≥ïÂíåÂ∞èÁ´ØÊ≥ï &gt; Âú®ËÆ°ÁÆóÊú∫ÂÜÖÂ≠ò‰∏≠ÔºåÈÄöÂ∏∏ÊòØ‰ª•Â≠óËäÇÔºàByteÔºâÔºå‰πüÂ∞±ÊòØ 8 ‰∏™‰ΩçÔºàBitÔºâ‰∏∫Âü∫Êú¨Â≠òÂÇ®ÂçïÂÖÉÔºà‰πüÊúâ‰ª• 16 ‰Ωç‰∏∫Âü∫Êú¨Â≠òÂÇ®ÂçïÂÖÉÁöÑÔºâ„ÄÇÂØπ‰∫éË∑®Ë∂äÂ§ö‰∏™Â≠óËäÇÁöÑÊï∞ÊçÆÁ±ªÂûãÔºàÊØîÂ¶Ç int Èïø 4 ‰∏™Â≠óËäÇÔºâÔºåÂ¶Ç‰ΩïÂú®ÂÜÖÂ≠ò‰∏≠ÂØπËøô‰∫õÂ≠óËäÇËøõË°åÊéíÂ∫èÊúâ‰∏§ÁßçÂ∏∏ËßÅÁöÑÊñπÊ≥ïÔºöÂ§ßÁ´ØÊ≥ïÔºàBig-endianÔºâÂíåÂ∞èÁ´ØÊ≥ïÔºàLittle-endianÔºâ„ÄÇ</p><p>‰∏çÁÆ°ÊòØÂ§ßÁ´ØÊ≥ïËøòÊòØÂ∞èÁ´ØÊ≥ïÂ≠òÂÇ®ÔºåËÆ°ÁÆóÊú∫Âú®ÂÜÖÂ≠ò‰∏≠Â≠òÊîæÊï∞ÊçÆÁöÑÈ°∫Â∫èÈÉΩÊòØ‰ªé‰ΩéÂú∞ÂùÄÂà∞È´òÂú∞ÂùÄÔºåÊâÄ‰∏çÂêåÁöÑÊòØÈ¶ñÂÖàÂèñ‰ΩéÂ≠óËäÇÁöÑÊï∞ÊçÆÂ≠òÊîæÂú®‰ΩéÂú∞ÂùÄËøòÊòØÂèñÈ´òÂ≠óËäÇÊï∞ÊçÆÂ≠òÊîæÂú®‰ΩéÂú∞ÂùÄ„ÄÇ</p><ul><li>Ëã•È¶ñÂÖàÂèñÈ´òÂ≠óËäÇÁöÑÊï∞ÊçÆÂ≠òÊîæÂú®‰ΩéÂú∞ÂùÄÔºåÂàôÊòØÂ§ßÁ´ØÊ≥ïÔºõ</li><li>Ëã•È¶ñÂÖàÂèñ‰ΩéÂ≠óËäÇÁöÑÊï∞ÊçÆÂ≠òÊîæÂú®‰ΩéÂú∞ÂùÄÔºåÂàôÊòØÂ∞èÁ´ØÊ≥ï„ÄÇ</li></ul><h2 id="ÂèåÂêëÈòüÂàóÂíåÂÖ∂‰ªñÂΩ¢ÂºèÁöÑÈòüÂàó">ÂèåÂêëÈòüÂàóÂíåÂÖ∂‰ªñÂΩ¢ÂºèÁöÑÈòüÂàó</h2><h3 id="collections.deque">collections.deque</h3><p>Âà©Áî® append Âíå pop(0) ÁöÑÊñπÊ≥ï, Êàë‰ª¨ÂèØ‰ª•Êää list ÂΩìÂÅö stack Êù•‰ΩøÁî®. <strong>‰ΩÜÊòØ pop(0) ÁöÑÊó∂Èó¥Â§çÊùÇÂ∫¶‰∏∫nÔºåÊïàÁéá‰Ωé‰∏ã.</strong></p><blockquote><p>collections.dequeÁ±ªÊòØ‰∏Ä‰∏™Á∫øÁ®ãÂÆâÂÖ®ÔºåÂèØ‰ª•Âø´ÈÄü‰ªé‰∏§ÊÆµÊ∑ªÂä†ÊàñËÄÖÂà†Èô§ÂÖÉÁ¥†ÁöÑÊï∞ÊçÆÁ±ªÂûã.</p></blockquote><p>ÂØπstackdÁöÑÊ®°Êãü <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line">array = deque(range(<span class="number">10</span>),maxlen = <span class="number">10</span>)</span><br><span class="line">array.rotate(<span class="number">3</span>)</span><br><span class="line">print(array)  <span class="comment">#-&gt; deque([7, 8, 9, 0, 1, 2, 3, 4, 5, 6], maxlen=10)</span></span><br><span class="line">array.append(<span class="number">-1</span>)  <span class="comment">#-&gt; deque([8, 9, 0, 1, 2, 3, 4, 5, 6, -1], maxlen=10)</span></span><br><span class="line">print(array)</span><br><span class="line">array.popleft() <span class="comment">#-&gt; deque([9, 0, 1, 2, 3, 4, 5, 6, -1], maxlen=10)</span></span><br><span class="line">print(array)</span><br></pre></td></tr></table></figure></p><h3 id="queue">queue</h3><p>Êèê‰æõ‰∫ÜÂêåÊ≠•(Á∫øÁ®ãÂÆâÂÖ®)Á±ª Queue, LifoQueue Âíå PriorityQueue, ‰∏çÂêåÁ∫øÁ®ãÂèØ‰ª•Âà©Áî®Ëøô‰∫õÊï∞ÊçÆÊù•‰∫§Êç¢‰ø°ÊÅØ„ÄÇÂÖ∑Êúâ maxsizeÂèÇÊï∞ÔºåË∂ÖÂá∫ÂÆπÈáèÊó∂queue‰ºöË¢´ÈîÅ‰Ωè.</p><h3 id="heapq">heapq</h3><p>ËÆ©Áî®Êà∑ÂèØ‰ª•ÊääÂèØÂèòÂ∫èÂàóÂΩìÂÅöÂ†ÜÈòüÂàóÊàñËÄÖ‰ºòÂÖàÈòüÂàó‰ΩøÁî®.</p><h1 id="ÂáΩÊï∞">ÂáΩÊï∞</h1><h2 id="‰∏ÄÁ≠âÂØπË±°">‰∏ÄÁ≠âÂØπË±°</h2><p>ÁºñÁ®ãËØ≠Ë®ÄÈáå‰∏ÄÁ≠âÂØπË±°ÁöÑÂÆö‰πâ: 1. ËøêË°åÊó∂ÂàõÂª∫ 2. ËÉΩËµãÂÄºÁªôÂèòÈáèÊàñÊï∞ÊçÆÁªìÊûÑ‰∏≠ÁöÑÂÖÉÁ¥† 3. ËÉΩ‰Ωú‰∏∫ÂèÇÊï∞‰º†ÈÄí 4. ËÉΩ‰Ωú‰∏∫ÂáΩÊï∞ËøîÂõûÂÄº</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">'''return n!'''</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> n&lt;<span class="number">2</span> <span class="keyword">else</span> n * factorial(n<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(factorial.__doc__) <span class="comment"># -&gt; return n!</span></span><br><span class="line">print(type(factorial))  <span class="comment"># -&gt; &lt;class 'function'&gt;</span></span><br><span class="line"></span><br><span class="line">fact = factorial</span><br><span class="line">print(fact(<span class="number">5</span>))   <span class="comment">#-&gt; 120</span></span><br><span class="line"></span><br><span class="line">print(list(map(fact,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]))) <span class="comment">#-&gt; [1, 2, 6]</span></span><br></pre></td></tr></table></figure><h2 id="È´òÈò∂ÂáΩÊï∞">È´òÈò∂ÂáΩÊï∞</h2><p>‰ªãÁªçÂáΩÊï∞‰∏∫ÂèÇÊï∞ÔºåÊàñËÄÖÊääÂáΩÊï∞‰Ωú‰∏∫ËøîÂõûÁªìÊûúÁöÑÂáΩÊï∞Â∞±ÊòØÈ´òÈò∂ÂáΩÊï∞</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">"apple"</span>,<span class="string">"pear"</span>,<span class="string">"cherry"</span>,<span class="string">"fig"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># ÈïøÂ∫¶ÊéíÂ∫è</span></span><br><span class="line">print(sorted(fruits,key = len))  <span class="comment">#-&gt; ['fig', 'pear', 'apple', 'cherry']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ÈÄÜÂ∫è</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(word)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> word[::<span class="number">-1</span>]</span><br><span class="line">print(sorted(fruits,key = reverse))    <span class="comment">#-&gt; ['apple', 'fig', 'pear', 'cherry']</span></span><br></pre></td></tr></table></figure><h3 id="mapfilterreduce-ÊûÅÂÖ∂Êõø‰ª£ÂìÅ">map,filter,reduce ÊûÅÂÖ∂Êõø‰ª£ÂìÅ</h3><ul><li><p>ÂàóË°®Êé®ÂØºÂºèÊØîmap‰∏éfilterËøûÁî®Êõ¥Ê∏ÖÊô∞ÊòìÊáÇ <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(list(map(fact,filter(<span class="keyword">lambda</span> x : x%<span class="number">2</span>, range(<span class="number">6</span>))))) <span class="comment"># -&gt; [1, 6, 120]</span></span><br><span class="line">print([fact(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>) <span class="keyword">if</span> i % <span class="number">2</span>])   <span class="comment"># -&gt; [1, 6, 120]</span></span><br></pre></td></tr></table></figure></p></li><li><p>sum ÊØî reduce(add,[]) Êõ¥ÊòìÊáÇ</p></li><li><p>any,all‰πüÊòØÂÜÖÁΩÆÁöÑËßÑÁ∫¶ÂáΩÊï∞ <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(all([<span class="keyword">True</span>,<span class="keyword">True</span>,<span class="keyword">False</span>]))   <span class="comment"># -&gt; False</span></span><br><span class="line">print(any([<span class="keyword">True</span>,<span class="keyword">False</span>,<span class="keyword">True</span>]))   <span class="comment"># -&gt; True</span></span><br></pre></td></tr></table></figure></p></li></ul><h3 id="lambda-Ë°®ËææÂºè">lambda Ë°®ËææÂºè</h3><p>Âú® PythonÂÜÖÂàõÂª∫ÂåøÂêçÂáΩÊï∞ <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">"apple"</span>,<span class="string">"pear"</span>,<span class="string">"cherry"</span>,<span class="string">"fig"</span>]</span><br><span class="line">print(sorted(fruits,key = <span class="keyword">lambda</span> word: word[::<span class="number">-1</span>]))</span><br></pre></td></tr></table></figure></p><h3 id="‰∏ÉÁßçÂèØË∞ÉÁî®ÂØπË±°">‰∏ÉÁßçÂèØË∞ÉÁî®ÂØπË±°</h3><p><img src="5EF76B560B5DB1316B558712DEFEA398.png" alt="Screen Shot 2018-10-12 at 19.35.09.png"> <img src="86DFFE0BE2BDE94ACDEE9957B1377E07.png" alt="Screen Shot 2018-10-12 at 19.35.29.png"></p><h3 id="Ëá™ÂÆö‰πâÂèØË∞ÉÁî®ÂØπË±°">Ëá™ÂÆö‰πâÂèØË∞ÉÁî®ÂØπË±°</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CallableTest</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,items)</span>:</span></span><br><span class="line">        self.items = list(items)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pick</span><span class="params">(self,n)</span>:</span></span><br><span class="line">        random.shuffle(self.items)</span><br><span class="line">        <span class="keyword">return</span> self.items[<span class="number">0</span>:n]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self,n)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.pick(n)</span><br><span class="line"></span><br><span class="line">test = CallableTest([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">print(test(<span class="number">2</span>))        <span class="comment"># -&gt; [1,3]</span></span><br></pre></td></tr></table></figure><h2 id="ÂáΩÊï∞ÂÜÖÁúÅ">ÂáΩÊï∞ÂÜÖÁúÅ</h2><h3 id="ÂáΩÊï∞ÊúâËÄåËá™ÂÆö‰πâÂØπË±°Ê≤°ÊúâÁöÑÂ±ûÊÄß">ÂáΩÊï∞ÊúâËÄåËá™ÂÆö‰πâÂØπË±°Ê≤°ÊúâÁöÑÂ±ûÊÄß</h3><p>['<strong>annotations</strong>', '<strong>call</strong>', '<strong>closure</strong>', '<strong>code</strong>', '<strong>defaults</strong>', '<strong>get</strong>', '<strong>globals</strong>', '<strong>kwdefaults</strong>', '<strong>name</strong>', '<strong>qualname</strong>']</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">obj = C()    </span><br><span class="line"></span><br><span class="line">print(sorted(set(dir(fact)) - set(dir(obj))))</span><br></pre></td></tr></table></figure><p><img src="0372A461E78029DED0A7D7121A49EAF1.png" alt="Screen Shot 2018-10-12 at 19.54.16.png"> <img src="44DAA05E00DF81F67E96530C9FD4F62D.png" alt="Screen Shot 2018-10-12 at 19.54.25 1.png"></p><h2 id="ÂèÇÊï∞‰º†ÈÄí">ÂèÇÊï∞‰º†ÈÄí</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parameters</span><span class="params">(name,*content, cls = <span class="string">"first_name"</span>, **attr)</span>:</span></span><br><span class="line">    print(name)  <span class="comment"># -&gt; 1</span></span><br><span class="line">    print(content) <span class="comment"># -&gt; (2, 3, 4)</span></span><br><span class="line">    print(cls) <span class="comment"># -&gt; zhang</span></span><br><span class="line">    print(attr) <span class="comment"># -&gt; &#123;'face': 'handsome', 'built': 'awesome'&#125;</span></span><br><span class="line"></span><br><span class="line">parameters(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,cls = <span class="string">"zhang"</span>, face = <span class="string">"handsome"</span>,built = <span class="string">"awesome"</span>)  </span><br><span class="line">print(parameters.__defaults__) <span class="comment"># -&gt; None</span></span><br><span class="line">print(parameters.__kwdefaults__) <span class="comment"># -&gt; &#123;'cls': 'first_name'&#125;</span></span><br><span class="line">print(parameters.__annotations__) <span class="comment"># -&gt; &#123;'return': 'test parameters'&#125;</span></span><br><span class="line">print(parameters.__doc__) <span class="comment"># -&gt; just for testing parameters</span></span><br></pre></td></tr></table></figure><h2 id="ÂáΩÊï∞ÂºèÁºñÁ®ã">ÂáΩÊï∞ÂºèÁºñÁ®ã</h2><ul><li>operator Ê®°Âùó Âíå functools Ê®°Âùó<ul><li>reduce</li><li>itemgetter ‰ªéÂ∫èÂàóÊàñËÄÖÂØπË±°‰∏≠ËØªÂèñÂÖÉÁ¥†ÊàñËÄÖÂ±ûÊÄß</li><li><p>methodcaller Ëá™Ë°åÂáΩÊï∞ÔºåÁÑ∂ÂêéÂÜçË∞ÉÁî®ÂØπË±°‰∏ä‰ΩøÁî®ÂèÇÊï∞ÊåáÂÆöÁöÑÊñπÊ≥ï(ÂèØ‰ª•ÂÜªÁªìÂèÇÊï∞) <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> methodcaller</span><br><span class="line">split_and_replace = methodcaller(<span class="string">'replace'</span>,<span class="string">' '</span>,<span class="string">'_'</span>)</span><br><span class="line">name = <span class="string">"ZHAN RUO CHI"</span></span><br><span class="line">print(split_and_replace(name))  <span class="comment"># -&gt; ZHAN_RUO_CHI</span></span><br></pre></td></tr></table></figure></p></li><li><p>partial ÂàõÂª∫‰∏Ä‰∏™Êñ∞ÁöÑÂèØË∞ÉÁî®ÂØπË±°ÔºåÂÜªÁªìÂéüÊúâÂØπË±°ÁöÑÊüê‰∫õÂèÇÊï∞ <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> mul</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line">triple = partial(mul,<span class="number">3</span>)</span><br><span class="line">print(triple(<span class="number">7</span>))  <span class="comment">#-&gt; 21</span></span><br></pre></td></tr></table></figure></p></li></ul></li></ul><h1 id="Êï∞ÊçÆÊ®°Âûã">Êï∞ÊçÆÊ®°Âûã</h1><p>python Ëß£ÈáäÂô®Âú®Á¢∞Âà∞ÁâπÊÆäÁöÑÂè•Ê≥ïÊó∂Ôºå‰ºö‰ΩøÁî®ÁâπÊÆäÊñπÊ≥ïÂéªÊøÄÊ¥ª‰∏Ä‰∫õÂü∫Êú¨ÁöÑÂØπË±°Êìç‰Ωú„ÄÇ‰æãÂ¶Ç len(x) Âú®Ë∞ÉÁî®Êó∂ÔºåÂ¶ÇÊûú x ÊòØÂÜÖÁΩÆÂØπË±°ÔºåÈÄüÂ∫¶ÂõûÈùûÂ∏∏Âø´ÔºåÂõ†‰∏∫ CPthon ‰ºöÁõ¥Êé•‰ªé‰∏Ä‰∏™ C ÁªìÊûÑ‰ΩìÈáåËØªÂèñÂØπË±°ÁöÑÈïøÂ∫¶„ÄÇÂ¶ÇÊûú x ‰∏çÊòØÂÜÖÁΩÆÂØπË±°Ôºålen(x) ‰ºöËØªÂèñÂØπË±°ÂÜÖÈÉ®ÁöÑ__len__ÊñπÊ≥ï„ÄÇËøôÁßçÂ§ÑÁêÜÊñπÊ≥ïÂú®‰øùÊåÅÂÜÖÁΩÆÁ±ªÂûãÁöÑÊïàÁéáÂíåËØ≠Ë®Ä‰∏ÄËá¥ÊÄß‰πãÈó¥ÊâæÂà∞Âπ≥Ë°°ÁÇπ„ÄÇ</p><blockquote><p>‰∏çËÉΩËÆ©Áâπ‰æãÁâπÊÆäÂà∞ÂºÄÂßãÁ†¥Âø´Êó¢ÂÆöËßÑÂàô --zon of python</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line">Card = collections.namedtuple(<span class="string">"Card"</span>,[<span class="string">"rank"</span>,<span class="string">"suit"</span>])</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FrenchDeck</span>:</span></span><br><span class="line">    ranks = [str(n) <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">11</span>)] + list(<span class="string">"JQKA"</span>)</span><br><span class="line">    suits = <span class="string">"spades diamonds clubs hearts"</span>.split()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__cards = [Card(rank,suit) <span class="keyword">for</span> suit <span class="keyword">in</span> FrenchDeck.suits <span class="keyword">for</span> rank <span class="keyword">in</span> FrenchDeck.ranks]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(self.__cards)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self,index)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__cards[index]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    deck = FrenchDeck()    </span><br><span class="line">    <span class="comment"># ÂèØ‰ª•‰ΩøÁî® len() ÂáΩÊï∞Êü•Áúã‰∏ÄÂÖ±Â§öÂ∞ëÂº†Á∫∏Áâå</span></span><br><span class="line">    print(len(deck))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># ÂèØ‰ª•‰ΩøÁî®Á¥¢ÂºïÂíåÂàáÁâá</span></span><br><span class="line">    print(deck[<span class="number">-1</span>])</span><br><span class="line">    print(deck[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># ÂèØ‰ª•ÈöèÊú∫ÊäΩÂèñÁ∫∏Áâå</span></span><br><span class="line">    <span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line">    print(choice(deck))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># ÊîØÊåÅËø≠‰ª£</span></span><br><span class="line">    <span class="keyword">for</span> card <span class="keyword">in</span> deck:</span><br><span class="line">        print(card)</span><br></pre></td></tr></table></figure><p>‰∏§‰∏™Â•ΩÂ§Ñ - Á±ªÁöÑÁî®Êà∑‰∏çÁî®ÂÜçÂéªËÆ∞Ê†áÂáÜÊìç‰ΩúÁöÑÂêçÁß∞ - Êõ¥Âä†Êñπ‰æøÁöÑÂà©Áî® python Ê†áÂáÜÂ∫ì</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> hypot</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vector</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,x,y)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Vector(&#123;&#125;,&#123;&#125;)'</span>.format(self.x,self.y)    </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__abs__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> hypot(self.x,self.y)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__bool__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> bool(abs(self))</span><br><span class="line">        <span class="comment">#return bool(self.x or self.y)</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self,other)</span>:</span></span><br><span class="line">        x = self.x + other.x</span><br><span class="line">        y = self.y + other.y</span><br><span class="line">        <span class="keyword">return</span> Vector(x,y)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__mul__</span><span class="params">(self,scalar)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Vector(self.x*scalar, self.y*scalar)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(Vector(<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">    print(abs(Vector(<span class="number">3</span>,<span class="number">4</span>)))</span><br></pre></td></tr></table></figure><ul><li><p>_<em>reper_</em> ÂèçÂØπÂØπË±°ÁöÑÂ≠óÁ¨¶‰∏≤Ë°®Á§∫Ôºå__str__Âè™ÊúâÂú®Ë∞ÉÁî® str()ÊàñËÄÖprint()Êó∂Êâç‰ºöË∞ÉÁî®Ôºå_<em>repr_</em> ÊòØÊõ¥Â•ΩÁöÑÈÄâÊã©ÔºåÂõ†‰∏∫Â¶ÇÊûú‰∏Ä‰∏™ÂØπË±°Ê≤°Êúâ__str__ÂáΩÊï∞Ôºåpython ÂèàÈúÄË¶ÅË∞ÉÁî®ÂÆÉÊó∂ÔºåËß£ÈáäÂô®‰ºöË∞ÉÁî® _<em>repr_</em> ‰Ωú‰∏∫Êõø‰ª£.</p></li><li><p>‰ªª‰ΩïÂØπË±°ÈÉΩÂèØ‰ª•Áî®‰∫éÈúÄË¶ÅÂ∏ÉÂ∞îÂÄºÁöÑ‰∏ä‰∏ãÊñá‰∏≠Ôºå‰∏∫‰∫ÜÂà§ÂÆö‰∏Ä‰∏™ÂÄº x ÁöÑÁúüÂÅáÔºåPython ‰ºöË∞ÉÁî®bool(x), ÂÖ∂ËÉåÂêéÊòØË∞ÉÁî® x._<em>bool_</em>()ÁöÑÁªìÊûú;Â¶ÇÊûú‰∏çÂ≠òÂú®ËØ•ÊñπÊ≥ïÔºåÈÇ£‰πà bool(x)‰ºöÂ∞ùËØïË∞ÉÁî® x._<em>len_</em>()„ÄÇ Ëã•ËøîÂõû0ÔºåÂàô bool ‰ºöËøîÂõû FalseÔºåÂê¶ÂàôËøîÂõû True„ÄÇ</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>([])   <span class="comment">#False</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>)    <span class="comment">#false</span></span><br></pre></td></tr></table></figure><h1 id="ÊñáÊú¨ÂíåÂ≠óËäÇÂ∫èÂàó">ÊñáÊú¨ÂíåÂ≠óËäÇÂ∫èÂàó</h1><h2 id="Â≠óÁ¨¶ÁöÑÈóÆÈ¢ò">Â≠óÁ¨¶ÁöÑÈóÆÈ¢ò</h2><p>Python3‰∏≠Ôºåstr ÂØπË±°‰∏≠Ëé∑ÂèñÁöÑÂÖÉÁ¥†ÊòØ unicode Â≠óÁ¨¶ unicode Ê†áÂáÜÊääÂ≠óÁ¨¶ÂÅö‰∫ÜÂ¶Ç‰∏ãÂå∫ÂàÜ - Â≠óÁ¨¶ÁöÑÊ†áËØÜÔºåÂú® unicode Ê†áÂáÜ‰∏≠‰ª•4~6‰∏™ÂçÅÂÖ≠ËøõÂà∂ÁöÑÊï∞Â≠óÔºåÁÑ∂ÂêéÂä†ÂâçÁºÄ U+. Â¶ÇAÁöÑÁ†Å‰ΩçÊòØU+0041 - Â≠óÁ¨¶ÁöÑÂÖ∑‰ΩìË°®Ëø∞ÂèñÂÜ≥‰∫éÊâÄÁî®ÁöÑÁºñÁ†Å. - ÁºñÁ†ÅÊòØÂú®Á†Å‰Ωç‰∏éÂ≠óËäÇÂ∫èÂàó‰πãÈó¥ÁöÑËΩ¨Êç¢. Â¶Ç A Âú® UTF8‰∏≠ÁºñÁ†ÅÊàêÂçï‰∏™Â≠óËäÇ41</p><h2 id="‰∫åËøõÂà∂Â∫èÂàóÁ±ªÂûã">‰∫åËøõÂà∂Â∫èÂàóÁ±ªÂûã</h2><p>ÂàÜ‰∏∫‰∏çÂèØÂèò bytes Á±ªÂûãÂíå bytearray Á±ªÂûã - bytesÂØπË±°ÂèØ‰ª•‰ªéstr ÂØπË±°‰ΩøÁî®ÁªôÂÆöÁöÑÁºñÁ†ÅÊûÑÂª∫ <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cafe = bytes(<span class="string">'cafe'</span>,encoding=<span class="string">"utf8"</span>)</span><br></pre></td></tr></table></figure></p><ul><li>Â≠óËäÇÂ∫èÂàóÁöÑÂàáÁâáËøòÊòØÂ≠óËäÇÂ∫èÂàó<ul><li>my_bytes[0] ÊòØÊï¥Êï∞</li><li>my_bytes[:1] ÊòØÂ≠óËäÇÂ∫èÂàó</li></ul></li><li>‰∫åËøõÂà∂Â∫èÂàóÂÖ∂ÂÆûÊòØÊï¥Êï∞Â∫èÂàóÔºå‰ΩÜÊòØÂÆÉ‰ª¨ÂêÑ‰∏™Â≠óËäÇÁöÑÂÄºÂèØËÉΩ‰ºöÁî®Â¶Ç‰∏ã‰∏âÁßçË°®Á§∫Ê≥ï<ul><li>ÂèØÊâìÂç∞ ASCII ËåÉÂõ¥ÂÜÖÁöÑÂ≠óËäÇ‰ΩøÁî®ASCIIÂ≠óÁ¨¶Êú¨Ë∫´</li><li>Âà∂Ë°®Á¨¶,Êç¢Ë°åÁ¨¶,ÂõûËΩ¶Á¨¶Âíå...</li><li>ÂÖ∂‰ªñÂ≠óËäÇÁöÑÂÄºÔºå‰ΩøÁî®‰ΩøÁî®ÂçÅÂÖ≠ËøõÂà∂ËΩ¨‰πâÂ∫èÂàó Â¶Ç b'caf39' Ââç‰∏â‰∏™Â≠óËäÇb'caf'Âú®ÂèØÊâìÂç∞ÁöÑ ASCII ËåÉÂõ¥ÂÜÖÔºåÂêé‰∏§‰∏™Â≠óËäÇÂàô‰∏çÁÑ∂.</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> array</span><br><span class="line">numbers = array.array(<span class="string">'h'</span>,[<span class="number">-2</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">octets = bytes(numbers)</span><br><span class="line">print(octets)</span><br></pre></td></tr></table></figure><p>##ÁºñÁ†Å‰∏≠ÈÅáÂà∞ÁöÑÈóÆÈ¢ò <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">my_str = <span class="string">"Portugu√™s"</span></span><br><span class="line">print(my_str.encode(<span class="string">"utf8"</span>))</span><br><span class="line"><span class="comment"># print(my_str.encode("ascii"))  #-&gt; Êä•Èîô</span></span><br><span class="line">print(my_str.encode(<span class="string">"ascii"</span>,errors=<span class="string">'ignore'</span>))  <span class="comment">#-&gt; b'Portugus'</span></span><br><span class="line">print(my_str.encode(<span class="string">"ascii"</span>,errors=<span class="string">'replace'</span>)) <span class="comment">#-&gt; b'Portugu?s'</span></span><br></pre></td></tr></table></figure></p><p>##Â§ÑÁêÜÊñáÊú¨Êñá‰ª∂ ### ÊúÄ‰Ω≥ÊñπÂºèÔºåunicode ‰∏âÊòéÊ≤ª - Â∞ΩÊó©ÊääËæìÂÖ•(ÊØîÂ¶ÇËØªÂèñÊñá‰ª∂Êó∂)ÁöÑÂ≠óËäÇÂ∫èÂàóËΩ¨Âåñ‰∏∫Â≠óÁ¨¶‰∏≤ - Âè™Êìç‰ΩúÂ≠óÁ¨¶‰∏≤ - Â∞ΩÈáèÊôöÂú∞ÊääÂ≠óÁ¨¶‰∏≤ËΩ¨Âåñ‰∏∫Â≠óËäÇÂ∫èÂàó <img src="F078127CF59F53B4C8F7F39C6BF45A1C.png" alt="Screen Shot 2018-09-30 at 11.32.45.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">my_str = <span class="string">"Portugu√™s"</span></span><br><span class="line">open(<span class="string">"cafe.txt"</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf8'</span>).write(my_str)</span><br><span class="line">print(open(<span class="string">"cafe.txt"</span>).read())  <span class="comment">#-&gt;Êä•Èîô</span></span><br><span class="line">print(open(<span class="string">"cafe.txt"</span>,encoding = <span class="string">"utf8"</span>).read()) <span class="comment">#-&gt; Ê≠£Á°Æ</span></span><br><span class="line">print(open(<span class="string">"cafe.txt"</span>,<span class="string">'rb'</span>).read()) <span class="comment">#-&gt; b'Portugu\xc3\xaas', ‰ª•‰∫åËøõÂà∂ÊñπÂºèËØªÂèñÊñá‰ª∂ÔºåÊ≤°ÊúâÈóÆÈ¢ò</span></span><br></pre></td></tr></table></figure><p>##‰∏∫‰∫ÜÊ≠£Á°ÆÊØîËæÉËÄåËßÑËåÉÂåñÂ≠óÁ¨¶‰∏≤ unicodeÊúâÁªÑÂêàÂ≠óÁ¨¶(ÂèòÈü≥Á¨¶Âè∑ÂíåÈôÑÂä†Âà∞Ââç‰∏Ä‰∏™Â≠óÁ¨¶‰∏äÁöÑËÆ∞Âè∑ÔºåÊâìÂç∞Êó∂‰Ωú‰∏∫‰∏Ä‰∏™Êï¥‰Ωì),ÊâÄ‰ª•Â≠óÁ¨¶‰∏≤ÊØîËæÉËµ∑Êù•ÂæàÂ§çÊùÇ„ÄÇ <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Â∑≤Ëß£ÂÜ≥ËØ•ÈóÆÈ¢òÔºü</span></span><br><span class="line">my_str1 = <span class="string">"Portugu√©s"</span></span><br><span class="line">my_str2 = <span class="string">"Portugue\u0301s"</span></span><br><span class="line">print(my_str1)</span><br><span class="line">print(my_str2)</span><br><span class="line">print(my_str1 == my_str2)  <span class="comment">#-&gt; True</span></span><br><span class="line">print(len(my_str1) == len(my_str2)) <span class="comment">#-&gt; True</span></span><br></pre></td></tr></table></figure></p><p>ÂéªÊéâÊâÄÊúâÈáçÈü≥Á¨¶Âè∑ - NFD ÊãÜËß£ÁªÑÂêàÂ≠óÁ¨¶‰∏∫Âü∫Â≠óÁ¨¶ÂíåÂçïÁã¨ÁöÑÁªÑÂêàÂ≠óÁ¨¶ - NFC ‰ΩøÁî®ÊúÄÂ∞èÁöÑÁ†Å‰ΩçÊûÑÊàêÁªÑÂêàÂ≠óÁ¨¶‰∏≤ <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from unicodedata import normalize</span><br><span class="line">from unicodedata import combining</span><br><span class="line">my_str = &quot;Portugu√©s&quot;</span><br><span class="line">new_str =  &quot;&quot;.join(c for c in normalize(&quot;NFD&quot;,my_str) if not combining(c))</span><br><span class="line">print(new_str)</span><br></pre></td></tr></table></figure></p><h1 id="ÁîüÊàêÂô®‰∏éËø≠‰ª£Âô®">ÁîüÊàêÂô®‰∏éËø≠‰ª£Âô®</h1><h2 id="ÂèØËø≠‰ª£ÁöÑÂéüÂõ†">ÂèØËø≠‰ª£ÁöÑÂéüÂõ†</h2><ul><li>ÂÆûÁé∞‰∫Ü__iter__ÂáΩÊï∞</li><li>ÂÜÖÁΩÆÁöÑ iter ÂáΩÊï∞Êúâ‰ª•‰∏ã‰ΩúÁî®<ul><li>Ê£ÄÊü•ÂØπË±°ÊòØÂê¶ÂÆûÁé∞__iter__ÂáΩÊï∞ÔºåÂ¶ÇÊûúÂÆûÁé∞ÔºåËøîÂõûËø≠‰ª£Âô®</li><li>Ê≤°ÊúâÂÆûÁé∞ÂèØËø≠‰ª£ÂØπË±°ÔºåÂ¶ÇÊûúÁé∞ÂÆû__getitem__ÊñπÊ≥ïÔºåpython ËøîÂõû‰∏Ä‰∏™Ëø≠‰ª£Âô®ÔºåÂ∞ùËØï‰ªéÁ¥¢Âºï0ÂºÄÂßãËø≠‰ª£</li><li>Â∞ùËØïÂ§±Ë¥•ÔºåË∑ëÂá∫ TypeError ÂºÇÂ∏∏ <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"zhangruochi"</span></span><br><span class="line"><span class="keyword">for</span> chr <span class="keyword">in</span> s:</span><br><span class="line">    print(chr)</span><br><span class="line">    </span><br><span class="line">print(<span class="string">"-------"</span>)</span><br><span class="line"></span><br><span class="line">it = iter(s)</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(next(it))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">del</span> it</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="Ëø≠‰ª£Âô®‰∏éÂèØËø≠‰ª£ÂØπË±°‰πãÈó¥ÁöÑÂÖ≥Á≥ª">Ëø≠‰ª£Âô®‰∏éÂèØËø≠‰ª£ÂØπË±°‰πãÈó¥ÁöÑÂÖ≥Á≥ª</h2><ul><li>ÂèØËø≠‰ª£ÂØπË±°ÂÆûÁé∞__iter__ÊñπÊ≥ïÔºåËøîÂõû‰∏Ä‰∏™Ëø≠‰ª£Âô®ÂÆû‰æã</li><li>Ëø≠‰ª£Âô®ÂÆûÁé∞_<em>iter_</em> ÊñπÊ≥ïÔºåËøîÂõûËá™Â∑±Ôºå‰∏∫‰∫ÜÈÄöËøá issubclass(iterator,abc.Iterator) ÊµãËØï</li><li>Ëø≠‰ª£Âô®ËøòË¶ÅÂÆûÁé∞__next__ÊñπÊ≥ïÔºåÊØèÊ¨°ËøîÂõû‰∏Ä‰∏™ÂÖÉÁ¥†</li><li>ÂèØËø≠‰ª£ÂØπË±°‰∏ÄÂÆö‰∏çËÉΩÊòØËá™Ë∫´ÁöÑËø≠‰ª£Âô®Ôºå‰πüÂ∞±ÊòØ‰∏çËÉΩÂåÖÂê´_<em>next_</em> ÊñπÊ≥ï <img src="8FE3ACE51E02FD7F405BE86E1B8346EE.png" alt="Screen Shot 2018-10-15 at 22.47.57.png"> <img src="DA4E95C453BEEAF371768C77B884032F.png" alt="Screen Shot 2018-10-15 at 22.48.05.png"></li></ul><h2 id="ÁîüÊàêÂô®ÂáΩÊï∞">ÁîüÊàêÂô®ÂáΩÊï∞</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">RE_WORD = re.compile(<span class="string">"\w+"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sentence</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, text)</span>:</span></span><br><span class="line">        self.text = text</span><br><span class="line">        self.words = RE_WORD.findall(text)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> self.words:</span><br><span class="line">            <span class="keyword">yield</span> word</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = <span class="string">"zhang ruo chi"</span></span><br><span class="line"></span><br><span class="line">sentence = Sentence(s)</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> sentence:</span><br><span class="line">    print(word)</span><br></pre></td></tr></table></figure><ul><li>ÁîüÊàêÂô®ÂØπË±°‰πüÊòØËø≠‰ª£Âô®ÔºåÂà©Áî®iterÊñπÊ≥ïËøîÂõû‰∏Ä‰∏™ÁîüÊàêÂô®ÂØπË±°ÔºåÂèØ‰ª•‰∏çÁî®ÂÜçÂçïÁã¨ÂÆö‰πâËø≠‰ª£Âô®</li><li>ÂåÖÂê´yieldÂÖ≥ÈîÆËØçÁöÑÂáΩÊï∞ÊòØÁîüÊàêÂô®ÂáΩÊï∞ÔºåË∞ÉÁî®ÁîüÊàêÂô®ÂáΩÊï∞Êó∂Ôºå‰ºöËøîÂõû‰∏Ä‰∏™ÁîüÊàêÂô®ÂØπË±°Ôºå‰πüÂ∞±ÊòØËØ¥ÔºåÁîüÊàêÂô®ÂáΩÊï∞ÊòØÁîüÊàêÂô®Â∑•ÂéÇ</li><li>ÊääÁîüÊàêÂô®‰º†ÈÄíÁªô next()ÂáΩÊï∞Êó∂ÔºåÁîüÊàêÂô®‰ºöÂêëÂâçËøêË°åÔºåÈÅáÂà∞ yield ÂÖ≥ÈîÆËØç‰ºöÂÅúÊ≠¢Âπ∂ËøîÂõû‰∫ßÂá∫ÁöÑÂÄº</li></ul><h1 id="ÈùôÊÄÅÁ±ªÂíåÈùôÊÄÅÊñπÊ≥ï">ÈùôÊÄÅÁ±ªÂíåÈùôÊÄÅÊñπÊ≥ï</h1><h2 id="example">example</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Date</span><span class="params">(object)</span>:</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, day=<span class="number">0</span>, month=<span class="number">0</span>, year=<span class="number">0</span>)</span>:</span></span><br><span class="line">        self.day = day</span><br><span class="line">        self.month = month</span><br><span class="line">        self.year = year</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_string</span><span class="params">(cls, date_as_string)</span>:</span></span><br><span class="line">        day, month, year = map(int, date_as_string.split(<span class="string">'-'</span>))</span><br><span class="line">        date1 = cls(day, month, year)</span><br><span class="line">        <span class="keyword">return</span> date1 </span><br><span class="line">    </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_date_valid</span><span class="params">(date_as_string)</span>:</span></span><br><span class="line">        day, month, year = map(int, date_as_string.split(<span class="string">'-'</span>))</span><br><span class="line">        <span class="keyword">return</span> day &lt;= <span class="number">31</span> <span class="keyword">and</span> month &lt;= <span class="number">12</span> <span class="keyword">and</span> year &lt;= <span class="number">3999</span>  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'main'</span>:</span><br><span class="line">    date2 = Date.from_string(<span class="string">'11-09-2012'</span>)</span><br><span class="line">    is_date = Date.is_date_valid(<span class="string">'11-09-2012'</span>)</span><br></pre></td></tr></table></figure><h3 id="class-method">class method</h3><p>Êàë‰ª¨Âú®‰∏Ä‰∏™ÊñπÊ≥ï‰∏≠ÂÆûÁé∞‰∫ÜÂäüËÉΩÔºåÂõ†Ê≠§ÂÆÉÊòØÂèØÈáçÁî®ÁöÑ„ÄÇ ËøôÈáåÁöÑÂ∞ÅË£ÖÂ§ÑÁêÜÁöÑ‰∏çÈîôÔºàÂ¶ÇÊûú‰Ω†ÂèëÁé∞ËøòÂèØ‰ª•Âú®‰ª£Á†ÅÁöÑ‰ªªÊÑèÂú∞ÊñπÊ∑ªÂä†‰∏Ä‰∏™‰∏çÂ±û‰∫é Date ÁöÑÂáΩÊï∞Êù•ÂÆûÁé∞Á±ª‰ººÁöÑÂäüËÉΩÔºåÈÇ£ÂæàÊòæÁÑ∂‰∏äÈù¢ÁöÑÂäûÊ≥ïÊõ¥Á¨¶Âêà OOP ËßÑËåÉÔºâ„ÄÇ cls ÊòØ‰∏Ä‰∏™‰øùÂ≠ò‰∫Ü class ÁöÑÂØπË±°ÔºàÊâÄÊúâÁöÑ‰∏ÄÂàáÈÉΩÊòØÂØπË±°Ôºâ„ÄÇ Êõ¥Â¶ôÁöÑÊòØÔºå Date Á±ªÁöÑË°çÁîüÁ±ªÈÉΩ‰ºöÂÖ∑Êúâ from_string Ëøô‰∏™ÊúâÁî®ÁöÑÊñπÊ≥ï„ÄÇ</p><h3 id="static-method">static method</h3><p>‰ªéÈùôÊÄÅÊñπÊ≥ïÁöÑ‰ΩøÁî®‰∏≠ÂèØ‰ª•ÁúãÂá∫ÔºåÊàë‰ª¨‰∏ç‰ºöËÆøÈóÆÂà∞ class Êú¨Ë∫´ ‚Äì ÂÆÉÂü∫Êú¨‰∏äÂè™ÊòØ‰∏Ä‰∏™ÂáΩÊï∞ÔºåÂú®ËØ≠Ê≥ï‰∏äÂ∞±ÂÉè‰∏Ä‰∏™ÊñπÊ≥ï‰∏ÄÊ†∑Ôºå‰ΩÜÊòØÊ≤°ÊúâËÆøÈóÆÂØπË±°ÂíåÂÆÉÁöÑÂÜÖÈÉ®ÔºàÂ≠óÊÆµÂíåÂÖ∂‰ªñÊñπÊ≥ïÔºâÔºåÁõ∏Âèç classmethod ‰ºöËÆøÈóÆ clsÔºå instancemethod ‰ºöËÆøÈóÆ self„ÄÇ</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bigtable: A Distributed Storage System for Structured Data</title>
      <link href="/Bigtable-A-Distributed-Storage-System-for-Structured-Data/2019/02/28/"/>
      <url>/Bigtable-A-Distributed-Storage-System-for-Structured-Data/2019/02/28/</url>
      
        <content type="html"><![CDATA[<h2 id="abstract">Abstract</h2><ul><li>Bigtable is a distributed storage system for managing structured data that is designed to scale to a very large size</li></ul><h2 id="data-model">Data Model</h2><p>A Bigtable is a sparse, distributed, persistent multi- dimensional sorted map. The map is indexed by a row key, column key, and a timestamp; each value in the map is an uninterpreted array of bytes.</p><blockquote><p>(row:string, column:string, time:int64) ‚Üí string</p></blockquote><h3 id="rows">Rows</h3><ul><li>The row keys in a table are arbitrary strings</li><li>Every read or write of data under a single row key is atomic</li><li>makes it easier for concurrent updates to the same row.</li><li>The row range for a table is dynamically partitioned. Each row range is called a <strong>tablet</strong>, which is the unit of dis- tribution and load balancing</li></ul><h3 id="column-families">Column Families</h3><ul><li>Column keys are grouped into sets called column fami- lies, which form the basic unit of access control</li><li>All data stored in a column family is usually of the same type</li><li>A column family must be created before data can be stored under any column key in that family; after a family has been created, any column key within the family can be used</li></ul><h3 id="timestamps">Timestamps</h3><ul><li>Each cell in a Bigtable can contain multiple versions of the same data; these versions are indexed by timestamp</li></ul><h2 id="api">API</h2><ul><li>The Bigtable API provides functions for creating and deleting tables and column families. It also provides functions for changing cluster, table, and column family metadata, such as access control rights.</li><li>Bigtable can be used with MapReduce, a framework for running large-scale parallel computations de- veloped at Google. We have written a set of wrappers that allow a Bigtable to be used both as an input source and as an output target for MapReduce jobs.</li></ul><h2 id="building-blocks">Building Blocks</h2><ul><li>Bigtable is built on several other pieces of Google infrastructure. Bigtable uses the distributed Google File System (GFS) to store log and data files. A Bigtable cluster typically operates in a shared pool of machines that run a wide variety of other distributed applications, and Bigtable processes often share the same machines with processes from other applications. Bigtable de- pends on a cluster management system for scheduling jobs, managing resources on shared machines, dealing with machine failures, and monitoring machine status.</li><li>The Google SSTable file format is used internally to store Bigtable data</li><li>Bigtable relies on a highly-available and persistent distributed lock service called <strong>Chubby</strong></li></ul><h2 id="implementation">Implementation</h2><p>The Bigtable implementation has three major compo- nents: - a library that is linked into every client - one master server - many tablet servers</p><p>A Bigtable cluster stores a number of tables. Each table consists of a set of tablets, and each tablet contains all data associated with a row range. Initially, each table consists of just one tablet. As a table grows, it is auto- matically split into multiple tablets, each approximately 100-200 MB in size by default.</p><h3 id="tablet-location">Tablet Location</h3><ul><li>We use a three-level hierarchy analogous to that of a B+- tree to store tablet location information <img src="1.png" alt="1.png"></li></ul><h3 id="tablet-assignment">Tablet Assignment</h3><p>Each tablet is assigned to one tablet server at a time - The master keeps track of the set of live tablet servers - Bigtable uses Chubby to keep track of tablet servers - The master is responsible for detecting when a tablet server is no longer serving its tablets, and for reassigning those tablets as soon as possible - When a master is started by the cluster management system, it needs to discover the current tablet assign- ments before it can change them</p><h3 id="tablet-serving">Tablet Serving</h3><ul><li>Updates are committed to a commit log that stores redo records</li><li>the recently committed ones are stored in memory in a sorted buffer called a memtable</li><li>the older updates are stored in a sequence of SSTables</li><li>To recover a tablet, a tablet server reads its metadata from the METADATA table. This meta- data contains the list of SSTables that comprise a tablet and a set of a redo points, which are pointers into any commit logs that may contain data for the tablet <img src="2.png" alt="2.png"></li></ul><h2 id="refinements">Refinements</h2><ol type="1"><li>Locality groups<ul><li>Clients can group multiple column families together into a locality group</li></ul></li><li>Compression<ul><li>Clients can control whether or not the SSTables for a locality group are compressed, and if so, which compression format is used</li></ul></li><li>Caching for read performance<ul><li>To improve read performance, tablet servers use two levels of caching. The <strong>Scan Cache</strong> is a higher-level cache that caches the key-value pairs returned by the SSTable interface to the tablet server code. The <strong>Block Cache</strong> is a lower-level cache that caches SSTables blocks that were read from GFS</li></ul></li><li>Bloom filters<ul><li>a read operation has to read from all SSTables that make up the state of a tablet</li></ul></li><li>Commit-log implementation<ul><li>we append mutations to a single commit log per tablet server, co-mingling mutations for different tablets in the same physical log file</li></ul></li><li>Speeding up tablet recovery<ul><li>If the master moves a tablet from one tablet server to another, the source tablet server first does a minor compaction on that tablet</li></ul></li><li>Exploiting immutability<ul><li>Besides the SSTable caches, various other parts of the Bigtable system have been simplified by the fact that all of the SSTables that we generate are immutable</li></ul></li></ol><h2 id="lesson">Lesson</h2><ol type="1"><li>large distributed sys- tems are vulnerable to many types of failures, not just the standard network partitions and fail-stop failures as- sumed in many distributed protocols</li><li>it is important to delay adding new features until it is clear how the new features will be used</li><li>the importance of proper system-level monitoring</li><li>The most important lesson we learned is the value of simple designs</li></ol>]]></content>
      
      
      <categories>
          
          <category> Paper Note </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>AI for Everyone</title>
      <link href="/AI-for-Everyone/2019/02/28/"/>
      <url>/AI-for-Everyone/2019/02/28/</url>
      
        <content type="html"><![CDATA[<p>Thanks Andrew Ng for providing the amazing course.</p><p><strong>Reference From <a href="https://www.coursera.org/learn/ai-for-everyone" target="_blank" rel="noopener">Ai for Everyone</a></strong></p><p>Here is my course certificate: <img src="ai_for_everyone.png"></p><p><img src="1.png"> <img src="2.png"> <img src="3.png"> <img src="4.png"> <img src="5.png"> <img src="6.png"> <img src="7.png"> <img src="8.png"> <img src="9.png"> <img src="10.png"> <img src="11.png"> <img src="12.png"> <img src="13.png"> <img src="14.png"> <img src="15.png"> <img src="16.png"> <img src="17.png"> <img src="18.png"></p>]]></content>
      
      
      <categories>
          
          <category> Artificial Intelligence </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Course Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>What is P-Value?</title>
      <link href="/What-is-P-Value/2019/02/24/"/>
      <url>/What-is-P-Value/2019/02/24/</url>
      
        <content type="html"><![CDATA[<h2 id="why-it-is-so-successful-in-science">Why it is so successful in science?</h2><blockquote><p>In some sense it offers a first line of defense against being fooled by randomness, separating signal from noise.</p></blockquote><h2 id="definition">Definition</h2><ul><li>p-values tell you how surprising the data is, assuming there is no effect.</li><li>formal definition:<br><blockquote class="blockquote-center">A p-value is the probability of getting the observed or more extreme data, assuming the null hypothesis is true.</blockquote></li></ul><p><strong>Âú®ÂÅáËÆæÂéüÂÅáËÆæÔºàH0ÔºâÊ≠£Á°ÆÊó∂ÔºåÂá∫Áé∞ËßÇÂØüÂà∞ÁöÑÁé∞Áä∂ÊàñÊõ¥Â∑ÆÁöÑÊÉÖÂÜµÁöÑÊ¶ÇÁéá</strong></p><h2 id="example">Example</h2><p><strong>Does driving while calling increase the risk of a car accident?</strong> ËÆæËÆ°ÂÆûÈ™åÔºå‰∏ÄÁªÑÂè∏Êú∫ÂºÄËΩ¶ÊâìÁîµËØùÔºå‰∏ÄÁªÑÂè∏Êú∫ÂºÄËΩ¶‰∏çÊâìÁîµËØùÔºåÁÑ∂ÂêéÂØπÊØîÂèëÁîü‰∫ãÊïÖÁöÑÊ¶ÇÁéá„ÄÇ</p><ul><li>The difference is never exactly zero. A difference of e.g., 0.11 means:<ol type="1"><li>Probably just random noise.</li><li>Probably a real difference</li></ol></li></ul><h2 id="null-hypthesis">Null hypthesis</h2><blockquote><p>ÂÅáËÆæÈõ∂ÂÅáËÆæ‰∏∫ÁúüÔºåÂç≥Á¨¶Âêà‰∏≠ÂøÉ‰∏∫0ÁöÑÊ≠£ÊÄÅÂàÜÂ∏É„ÄÇ</p></blockquote><ul><li>Assuming null hypthesis is trueÔºå means most of the data will fall between these two critical values. <img src="5A77C161EAB415973599154275FFF24D.png" alt="Screen Shot 2018-09-21 at 14.06.49.png"> <img src="0F5799A340B2ED51C1AF44365C76CBD9.png" alt="Screen Shot 2018-09-21 at 14.09.17.png"></li></ul><h2 id="important-notes">Important notes</h2><ol type="1"><li>A p-value is the probability of the data, not the probability of a theory.</li><li>You can‚Äôt get the probability the null hypothesis is true, given the data, from a p-value. <span class="math display">\[P(D*|H) ‚â† P(H|D)\]</span></li><li>A single p-value is not enough to declare a scientific discovery; only when we can repeatedly observe something, we can consider it a reliable observation.</li></ol><h2 id="how-to-use-pvalue-correctly">How to use pValue correctly?</h2><ol type="1"><li>Use p-values as a rule to guide behavior in the long run.</li><li>‰∏çËÉΩËØ¥ÔºåÂõ†‰∏∫<span class="math inline">\(p &lt; x\)</span>,ÊâÄ‰ª•ÁêÜËÆ∫Ê≠£Á°Æ„ÄÇÂ∫îËØ•ËØ¥ÔºåÂõ†‰∏∫<span class="math inline">\(p &lt; x\)</span>,ÊâÄ‰ª•ÁªìÊûúÁ¨¶ÂêàÈ¢ÑÊúü„ÄÇ</li></ol><h2 id="hwo-to-calculate-pvalue">Hwo to calculate pValue?</h2><p>‰ª•ÊäõÁ°¨Â∏ÅÂÆûÈ™å‰∏∫‰æãÂÆåÊàêÂÅáËÆæÊ£ÄÈ™å - ÂÅáËÆæÔºöÁ°¨Â∏ÅÊòØÂÖ¨Âπ≥ÁöÑ - Ê£ÄÈ™åÔºöËÆ§‰∏∫ÂÅáËÆæÊòØÊàêÁ´ãÁöÑÔºåÁÑ∂ÂêéÊâîÂçÅÊ¨°ÔºåÁúãÁªìÊûú‰∏éÂÅáËÆæÊòØÂê¶Áõ∏Á¨¶</p><p>ÂèçÂ§çÊâîÁ°¨Â∏ÅÁ¨¶Âêà‰∫åÈ°πÂàÜÂ∏ÉÔºâÔºå‰πüÂ∞±ÊòØÔºö <span class="math display">\[X\sim B(n,\mu)\]</span></p><p>ÂÖ∂‰∏≠Ôºå n‰ª£Ë°®ÊâîÁ°¨Â∏ÅÁöÑÊ¨°Êï∞Ôºå<span class="math inline">\(\mu\)</span>‰ª£Ë°®‚ÄúËä±‚ÄùÊúù‰∏äÁöÑÊ¶ÇÁéá„ÄÇ</p><p>Âú®Êàë‰ª¨ËÆ§‰∏∫Á°¨Â∏ÅÊòØÂÖ¨Âπ≥ÁöÑÂâçÊèê‰∏ãÔºåÊâî1000Ê¨°Á°¨Â∏ÅÂ∫îËØ•Á¨¶Âêà‰ª•‰∏ãÂàÜÂ∏ÉÔºö</p><p><span class="math display">\[X\sim B(1000, 0.5)\]</span></p><figure><img src="1299D5FFC8ACDF02B18F0CDD6BAF9EE6.png" alt="Screen Shot 2018-09-23 at 14.19.13.png"><figcaption>Screen Shot 2018-09-23 at 14.19.13.png</figcaption></figure><p>Ëã•1000Ê¨°ÊäõÁ°¨Â∏ÅÂÆûÈ™åÁªìÊûú‰∏∫Ê≠£Èù¢Êúù‰∏ä530Ê¨°ÔºåÂàôpVlueÂèñ530‰ª•ÂèäÊõ¥ÊûÅÁ´ØÁöÑÁÇπÁªÑÊàêÁªÑÊàêÂå∫Èó¥„ÄÇ <img src="F79D182822786A87CFF2A4476D496CC4.png" alt="Screen Shot 2018-09-23 at 14.23.13.png"></p><h2 id="‰ªÄ‰πàÊòØÊòæËëóÊ∞¥Âπ≥alpha">‰ªÄ‰πàÊòØÊòæËëóÊ∞¥Âπ≥<span class="math inline">\(\alpha\)</span>?</h2><p>Êäõ‰∏ÄÂçÉÊ¨°Á°¨Â∏ÅÔºåÊàë‰ª¨ËÆ§‰∏∫Âá∫Áé∞530Ê¨°Ê≠£Èù¢‰πãÂêéÔºåÁ°¨Â∏ÅÊòØ‰∏çÂÖ¨Âπ≥ÁöÑÔºåËøòÊòØÂá∫Áé∞580Ê¨°Ê≠£Èù¢‰πãÂêéÔºåÁ°¨Â∏ÅÊòØ‰∏çÂÖ¨Âπ≥ÁöÑÔºåËøôÊòØ‰∏Ä‰∏™‰∏ªËßÇÊ†áÂáÜ„ÄÇ</p><p>Êàë‰ª¨‰∏ÄËà¨ËÆ§‰∏∫: <span class="math display">\[\text {p-value}\leq 0.05\]</span> Â∞±ÂèØ‰ª•ËÆ§‰∏∫ÂÅáËÆæÊòØ‰∏çÊ≠£Á°ÆÁöÑ„ÄÇ</p><p>Ë°®Á§∫Âá∫Êù•Â¶Ç‰∏ãÂõæÊâÄÁ§∫: <img src="DFF65458A10B923E71CB9B68AF5FFB11.png" alt="Screen Shot 2018-09-23 at 14.27.03.png"> <strong>Êàë‰ª¨ÂèØ‰ª•ËÆ§‰∏∫ÂàöÂºÄÂßãÁöÑÂÅáËÆæÈîôÁöÑÂæà‚ÄúÊòæËëó‚ÄùÔºå‰πüÂ∞±ÊòØ‚ÄúÁ°¨Â∏ÅÊòØ‰∏çÂÖ¨Âπ≥ÁöÑ‚Äù„ÄÇ</strong></p>]]></content>
      
      
      <categories>
          
          <category> Statistics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Concept </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Understanding Logistic Regression</title>
      <link href="/Understanding-Logistic-Regression/2019/02/24/"/>
      <url>/Understanding-Logistic-Regression/2019/02/24/</url>
      
        <content type="html"><![CDATA[<h2 id="ÈÄªËæëÂõûÂΩíÁöÑËæìÂá∫ÊòØ‰ªÄ‰πà">ÈÄªËæëÂõûÂΩíÁöÑËæìÂá∫ÊòØ‰ªÄ‰πàÔºü</h2><p><span class="math display">\[h_{\theta} = P(y = 1| x;\theta)\]</span></p><p><strong>‰πüÂ∞±ÊòØÁªôÂÆöxÂíåÂú®ÂèÇÊï∞theta‰∏ãÔºåy=1(default)ÁöÑÊ¶ÇÁéá</strong></p><h2 id="ÈÄªËæëÂõûÂΩíÁöÑËæìÂÖ•ÊòØ‰ªÄ‰πà">ÈÄªËæëÂõûÂΩíÁöÑËæìÂÖ•ÊòØ‰ªÄ‰πàÔºü</h2><p><span class="math display">\[ y_{\theta} = \beta_{0} + \beta_{1}x_{1} + \beta_{2}x_{2} .... \]</span></p><p><strong>‰πüÂ∞±ÊòØÁ∫øÊÄßÂõûÂΩí</strong></p><ul><li>ÊâÄ‰ª•Logistic RegressionÁöÑÂÜ≥Á≠ñËæπÁïåÊòØÁ∫øÊÄßÂõûÂΩí</li><li>ÈÄªËæëÂõûÂΩíÁöÑÊú¨Ë¥®ËøòÊòØ<strong>Á∫øÊÄßÂõûÂΩí</strong>Ôºå‰πü‰ºöÁúãÂà∞Êúâ‰∏Ä‰∫õÊñáÁ´†ËØ¥Âú®ÁâπÂæÅÂà∞ÁªìÊûúÁöÑÊò†Â∞Ñ‰∏≠Â§öÂä†‰∫Ü‰∏ÄÂ±Ç<strong>ÂáΩÊï∞Êò†Â∞Ñ</strong></li></ul><h2 id="Êàë‰ª¨Áî®‰ªÄ‰πàÊääËæìÂÖ•‰∏éËæìÂá∫ËÅîÁ≥ªËµ∑Êù•">Êàë‰ª¨Áî®‰ªÄ‰πàÊääËæìÂÖ•‰∏éËæìÂá∫ËÅîÁ≥ªËµ∑Êù•Ôºü</h2><p>Logit function:</p><p><span class="math display">\[Logit(p) =  ln(odds) = ln(\frac{p}{1-p})\]</span></p><figure><img src="logit.png" alt="logit"><figcaption>logit</figcaption></figure><ul><li>ÂÆö‰πâÂüü‰∏∫[0,1], ÂÄºÂüü‰∏∫R.</li><li><p>Â∞Ü‰∏äËø∞ÊñπÁ®ãÂèñÂèçÂáΩÊï∞ÔºåÂæóÂà∞sigmoidÂáΩÊï∞ÔºåÂÆö‰πâÂüü‰∏∫R, y‰∏∫P, ÂÄºÂüü‰∏∫[0,1].</p><p><span class="math display">\[Sigmoid(\alpha) = logit^{-1}(\alpha) = \frac{1}{1+e^{-\alpha}}\]</span></p></li></ul><figure><img src="sigmoid.png" alt="sigmoid"><figcaption>sigmoid</figcaption></figure><h2 id="maximum-likelihood-estimation-Êù•‰º∞ËÆ°ÂèÇÊï∞thetaÁöÑÂÄº">Maximum likelihood estimation Êù•‰º∞ËÆ°ÂèÇÊï∞thetaÁöÑÂÄº</h2><p><span class="math display">\[L(\theta) = \prod_{i:y_{i}=1}p(x_{i})\prod_{i^{\prime}:y_{i^{\prime}}=0}(1-p(x_{i^{\prime}}))\]</span></p><ul><li>Get coefficients that maximizes the likelihood, then use them for predictions</li><li>Maximizing the likelihood function is equivalent to minimizing the cost function <span class="math inline">\(J(\theta)\)</span></li></ul><p><span class="math display">\[J(\theta) = - \sum_{i=1}^{n}[y_{i}log(P(y_{i} = 1 | x)) + (1 - y_{i})log(1 - P(y_{i}=1|x))]\]</span></p>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mchine Learning Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>INFSCI 2595:Machine Learning(part one)</title>
      <link href="/INFSCI-2595-Machine-Learning-part-one/2019/02/23/"/>
      <url>/INFSCI-2595-Machine-Learning-part-one/2019/02/23/</url>
      
        <content type="html"><![CDATA[<p><strong>Reference from some lecture slides of INFSCI 2595 lectured by Dr. Mai Abdelhakim</strong></p><h2 id="introduction">Introduction</h2><h3 id="what-is-machine-learning">What is Machine Learning?</h3><ul><li>Subfield of artificial intelligence</li><li>Field of study that gives computers the ability to learn without being explicitly programmed</li></ul><h3 id="how-can-we-build-computer-system-that-learn-and-improve-with-experience">How can we build computer system that learn and improve with experience?</h3><ul><li>Statistics make conclusions from data, and estimate reliability of conclusions</li><li>Optimization and computing power to solve problems</li></ul><blockquote class="blockquote-center">Machine learns with respect to a particular <strong>task T</strong>, <strong>performance metric P</strong> and <strong>experience E</strong>, if the performance P on task T improves with <strong>experience E</strong>.</blockquote><h3 id="why-machine-learning-is-important">Why Machine Learning is Important</h3><ul><li>Provide solution to complex problems that cannot be easily programmed</li><li>Can adapt to new data</li><li>Helps us to understand complicated phenomena</li><li>Can outperform human performance</li></ul><h3 id="machine-learning-algorithms">Machine Learning Algorithms</h3><h4 id="supervised-learning">Supervised Learning</h4><ol type="1"><li>Learn using labeled data (correct answers are given in learning phase)</li><li>make predictions of previously unseen data</li><li>Two types of problems<ul><li><strong>Regression</strong>: Target values (Y) are continuous/quantitative</li><li><strong>Classification</strong>: Target values (Y) are discrete/finite/qualitative</li></ul></li></ol><h4 id="unsupervised-learning">Unsupervised Learning</h4><ol type="1"><li>Clustering analysis</li><li>Finding groups of similar users</li><li>Detecting abnormal patterns</li></ol><h2 id="machine-learning-models-and-trade-offs">Machine Learning Models and Trade-offs</h2><h3 id="why-do-we-need-a-model-why-estimate-f">Why do we need a model? Why estimate f?</h3><ul><li><strong>Predictions</strong>: Make predictions for new inputs/features</li><li><strong>Inference</strong>: understand the way Y is affected by each features<ul><li>Which feature has stronger impact on the response?</li><li>Is relation positive or negative</li><li>Is the relationship linear or more complicated</li></ul></li></ul><h3 id="how-to-estimate-f">How to estimate f?</h3><ol type="1"><li>Parametric Approach<ul><li>First,assume function form</li><li>Second, use training to fit the model</li></ul></li><li>Non-Parametric Approach<ul><li>No explicit form of function f is assumed</li><li>Seek to estimate f as close as possible to the data points</li></ul></li></ol><h3 id="trade-off-model-flexibility-vs-model-interpretability">Trade-off: Model Flexibility vs Model Interpretability</h3><p><a href="interpretability.png">interpretability</a></p><h3 id="model-accuracy">Model Accuracy</h3><ol type="1"><li>In regression setting, a common measure is mean squared error(MSE)</li></ol><p><span class="math display">\[MSE = \frac{1}{n}\sum_{i=1}^{n}(y_{i} - \hat{f(x_{i})})^{2}\]</span></p><h4 id="overfitting-and-underfitting">Overfitting and Underfitting</h4><p>Two thing we need to avoid: - Overfitting: Building a model that is too complex, fits training data very well, but fail to generalize to new data (e.g. large test MSE) - Underfitting: build simple model that is unable to capture variability in data</p><ul><li>Simple models may not capture the variability in the data</li><li>Complex models may not generalize</li></ul><h4 id="bias-variance-tradeoff">Bias-Variance Tradeoff</h4><p><span class="math display">\[E(y_{0} - \hat{f(x_{0})})^2 = Var(\hat{f(x_{0})}) + [Bias(\hat{f(x_{0})})]^{2} + Var(\epsilon)\]</span></p><ul><li>Variance: amount by which <span class="math inline">\(\hat{f}\)</span> changes if we made the estimation by different training set</li><li>Bias: Errors from approximating real-life problems by a simpler model</li></ul><ol start="2" type="1"><li>Classification Setting</li></ol><ul><li><span class="math inline">\(\hat{y_{0}} = \hat{f(x_{0})}\)</span> is the predicted output class</li><li>Test error rate: <span class="math display">\[Average(I(y_{0} \neq \hat{y_{0}}))\]</span></li></ul><h4 id="bayes-classifier">Bayes classifier</h4><ul><li>Bayes classifier assigns each observation to the most likely class given the feature values.</li><li>Assign <span class="math inline">\(x_{0}\)</span> to class ! that has largest <span class="math inline">\(Pr(Y= j|X = x_{0})\)</span></li></ul><h4 id="k-nearest-neighbors">K-Nearest Neighbors</h4><ul><li>Define a positive integer K</li><li>For each test observation <span class="math inline">\(x_{0}\)</span> , identify K points in the training data that are closest to <span class="math inline">\(x_{0}\)</span> referred to as <span class="math inline">\(N_{0}\)</span></li><li>Estimate the conditional probability for class j as fraction of points in <span class="math inline">\(N_{0}\)</span> whose response values equal to j <span class="math display">\[Pr(Y = j | X = x_{0}) = \frac{1}{k}\sum_{i \in N_{0}}I(y_{i} == j)\]</span></li></ul><p><a href="knn.png">knn</a></p>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>An overview of gradient descent optimization algorithms</title>
      <link href="/An-overview-of-gradient-descent-optimization-algorithms/2019/02/23/"/>
      <url>/An-overview-of-gradient-descent-optimization-algorithms/2019/02/23/</url>
      
        <content type="html"><![CDATA[<p><strong>Reference from <a href="https://arxiv.org/abs/1609.04747" target="_blank" rel="noopener">An overview of gradient descent optimization algorithms</a></strong></p><h2 id="batch-gradient-descent">Batch gradient descent</h2><p><span class="math display">\[\theta = \theta - \eta * \triangledown_{\theta}J(\theta)\]</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(nb_epochs):</span><br><span class="line">  params_grad = evaluate_gradient(loss_function, data, params)</span><br><span class="line">  params = params - learning_rate * params_grad</span><br></pre></td></tr></table></figure><ul><li>Batch gradient descent is guaranteed to converge to the global minimum for convex error surfaces and to a local minimum for non-convex surfaces.</li></ul><h2 id="stochastic-gradient-descent">Stochastic gradient descent</h2><p><span class="math display">\[\theta = \theta - \eta * \triangledown_{\theta}J(\theta; x^{i};y^{i})\]</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(nb_epochs):</span><br><span class="line">  np.random.shuffle(data)</span><br><span class="line">  <span class="keyword">for</span> example <span class="keyword">in</span> data:</span><br><span class="line">    params_grad = evaluate_gradient(loss_function, example, params)</span><br><span class="line">    params = params - learning_rate * params_grad</span><br></pre></td></tr></table></figure><ul><li>SGD performs frequent updates with a high variance that cause the objective function to fluctuate heavily as in Image 1.</li><li><img src="image1.png" alt="image1.png"></li><li>SGD shows the same convergence behaviour as batch gradient descent, almost certainly converging to a local or the global minimum for non-convex and convex optimization respectively.</li></ul><h2 id="mini-batch-gradient-descent">Mini-batch gradient descent</h2><p><span class="math display">\[\theta = \theta - \eta * \triangledown_{\theta}J(\theta; x^{i:i+n};y^{i:i+n})\]</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(nb_epochs):</span><br><span class="line">  np.random.shuffle(data)</span><br><span class="line">  <span class="keyword">for</span> batch <span class="keyword">in</span> get_batches(data, batch_size=<span class="number">50</span>):</span><br><span class="line">    params_grad = evaluate_gradient(loss_function, batch, params)</span><br><span class="line">    params = params - learning_rate * params_grad</span><br></pre></td></tr></table></figure><ul><li>Common mini-batch sizes range between 50 and 256, but can vary for different applications</li><li>Mini-batch gradient descent is typically the algorithm of choice when training a neural network and the term SGD usually is employed also when mini-batches are used</li></ul><h2 id="challenges">Challenges</h2><ul><li>Choosing a proper learning rate can be difficult</li><li>the same learning rate applies to all parameter updates</li><li>Learning rate schedules<ul><li>ry to adjust the learning rate during training by e.g. annealing</li><li>reducing the learning rate according to a pre-defined schedule or when the change in objective between epochs falls below a threshold</li></ul></li><li>Another key challenge of minimizing highly non-convex error functions common for neural networks is avoiding getting trapped in their numerous suboptimal local minima</li></ul><h2 id="momentum">Momentum</h2><p>Momentum is a method that helps accelerate SGD in the relevant direction and dampens oscillations as can be seen in Image 3. It does this by adding a fraction of the update vector of the past time step to the current update vector:</p><p><span class="math display">\[\begin{align*}&amp; v_{t} = \gamma v_{t-1} +  \eta * \triangledown_{\theta}J(\theta) \\&amp; \theta = \theta - v_{t}\\\end{align*}\]</span></p><ul><li>The momentum term <span class="math inline">\(\gamma\)</span> is usually set to 0.9 or a similar value.</li><li>The ball accumulates momentum as it rolls downhill, becoming faster and faster on the way</li></ul><h2 id="nesterov-accelerated-gradient">Nesterov accelerated gradient</h2><p><span class="math display">\[\begin{align*}&amp; v_{t} = \gamma v_{t-1} +  \eta * \triangledown_{\theta}J(\theta - \gamma * m) \\&amp; \theta = \theta - v_{t}\\\end{align*}\]</span></p><ul><li>Êó¢ÁÑ∂ÂèÇÊï∞Ë¶ÅÊ≤øÁùÄ <span class="math inline">\(\theta - \gamma * m\)</span>Êõ¥Êñ∞ÔºåÈÇ£Â∞±ÂÖàÂÖàËÆ°ÁÆóÊú™Êù•‰ΩçÁΩÆÁöÑÊ¢ØÂ∫¶</li><li>This anticipatory update prevents us from going too fast and results in increased responsiveness, which has significantly increased the performance of RNNs on a number of tasks</li></ul><h2 id="adagrad">Adagrad</h2><p><span class="math display">\[\begin{align*}&amp; s = s + \triangledown J(\theta) \bigodot \triangledown J(\theta) \\&amp; \theta = \theta - \frac{\eta}{\sqrt{s + \epsilon}} \bigodot \triangledown J(\theta) \\\end{align*}\]</span></p><ul><li>One of Adagrad's main benefits is that it eliminates the need to manually tune the learning rate</li><li>Adagrad modifies the general learning rate <span class="math inline">\(\gamma\)</span> at each time step t for every parameter <span class="math inline">\(\theta_{i}\)</span> based on the past gradients that have been computed for <span class="math inline">\(\theta_{i}\)</span></li></ul><h2 id="rmsprop">RMSprop</h2><p><span class="math display">\[\begin{align*}&amp; v_{t} = \gamma v_{t-1} + (1-\gamma) * \triangledown J(\theta) \bigodot \triangledown J(\theta) \\&amp; \theta = \theta - v_{t} \\\end{align*}\]</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.train.RMSPropOptimizer(learning_rate=learning_rate, momentum=<span class="number">0.9</span>, decay=<span class="number">0.9</span>, epsilon=<span class="number">1e-10</span>)</span><br></pre></td></tr></table></figure><ul><li>Âä†ÂÖ•MomentumÔºå‰∏ªË¶ÅÊòØËß£ÂÜ≥Â≠¶‰π†ÈÄüÁéáËøáÂø´Ë°∞ÂáèÁöÑÈóÆÈ¢ò</li><li>RMSprop as well divides the learning rate by an exponentially decaying average of squared gradients. Hinton suggests <span class="math inline">\(\gamma\)</span> to be set to 0.9, while a good default value for the learning rate <span class="math inline">\(\eta\)</span> is 0.001.</li></ul><h2 id="adaptive-moment-estimation-adam">Adaptive moment estimation (Adam)</h2><p><span class="math display">\[\begin{align*}&amp; m = \beta_{1} * m + (1-\beta_{1}) * \triangledown J(\theta) \\&amp; s = \beta_{2} * s + (1-\beta_{2}) * \triangledown J(\theta) \bigodot \triangledown J(\theta) \\&amp; m = \frac{m}{1-\beta^{t}_{1}} \\&amp; s = \frac{s}{1-\beta^{t}_{2}} \\&amp; \theta = \theta - \frac{\eta}{\sqrt{s + \epsilon}} \bigodot m\end{align*}\]</span></p><ul><li>ÂÖ∂ÁªìÂêà‰∫ÜMomentumÂíåRMSpropÁÆóÊ≥ïÁöÑÊÄùÊÉ≥„ÄÇÁõ∏ÊØîMomentumÁÆóÊ≥ïÔºåÂÖ∂Â≠¶‰π†ÈÄüÁéáÊòØËá™ÈÄÇÂ∫îÁöÑÔºåËÄåÁõ∏ÊØîRMSpropÔºåÂÖ∂Â¢ûÂä†‰∫ÜÂÜ≤ÈáèÈ°π, Á¨¨‰∏âÂíåÁ¨¨ÂõõÈ°π‰∏ªË¶ÅÊòØ‰∏∫‰∫ÜÊîæÂ§ßÂÆÉ‰ª¨</li><li>The authors propose default values of 0.9 for <span class="math inline">\(\beta1\)</span>, 0.9999 for <span class="math inline">\(\beta2\)</span> and <span class="math inline">\(10^{-8}\)</span> for <span class="math inline">\(\epsilon\)</span></li></ul>]]></content>
      
      
      <categories>
          
          <category> Paper Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linear models, Optimization</title>
      <link href="/Linear-models-Optimization/2019/02/22/"/>
      <url>/Linear-models-Optimization/2019/02/22/</url>
      
        <content type="html"><![CDATA[<h1 id="programming-assignment-linear-models-optimization">Programming assignment (Linear models, Optimization)</h1><p>In this programming assignment you will implement a linear classifier and train it using stochastic gradient descent modifications and numpy.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">".."</span>)</span><br><span class="line"><span class="keyword">import</span> grading</span><br><span class="line">grader = grading.Grader(assignment_key=<span class="string">"UaHtvpEFEee0XQ6wjK-hZg"</span>, </span><br><span class="line">                      all_parts=[<span class="string">"xU7U4"</span>, <span class="string">"HyTF6"</span>, <span class="string">"uNidL"</span>, <span class="string">"ToK7N"</span>, <span class="string">"GBdgZ"</span>, <span class="string">"dLdHG"</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># token expires every 30 min</span></span><br><span class="line">COURSERA_TOKEN = <span class="string">"TmANlFkR4a4doLvg"</span></span><br><span class="line">COURSERA_EMAIL = <span class="string">"lvduzhen@gmail.com"</span></span><br></pre></td></tr></table></figure><h2 id="two-dimensional-classification">Two-dimensional classification</h2><p>To make things more intuitive, let's solve a 2D classification problem with synthetic data.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'train.npy'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> fin:</span><br><span class="line">    X = np.load(fin)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'target.npy'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> fin:</span><br><span class="line">    y = np.load(fin)</span><br><span class="line"></span><br><span class="line">plt.scatter(X[:, <span class="number">0</span>], X[:, <span class="number">1</span>], c=y, cmap=plt.cm.Paired, s=<span class="number">20</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure><img src="output_5_0.png" alt="png"><figcaption>png</figcaption></figure><h1 id="task">Task</h1><h2 id="features">Features</h2><p>As you can notice the data above isn't linearly separable. Since that we should add features (or use non-linear model). Note that decision line between two classes have form of circle, since that we can add quadratic features to make the problem linearly separable. The idea under this displayed on image below:</p><p><img src="kernel.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(X)</span><br></pre></td></tr></table></figure><pre><code>[[ 1.20798057  0.0844994 ] [ 0.76121787  0.72510869] [ 0.55256189  0.51937292] ...,  [-1.22224754  0.45743421] [ 0.43973452 -1.47275142] [ 1.4928118   1.15683375]]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">expand</span><span class="params">(X)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Adds quadratic features. </span></span><br><span class="line"><span class="string">    This expansion allows your linear model to make non-linear separation.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    For each sample (row in matrix), compute an expanded row:</span></span><br><span class="line"><span class="string">    [feature0, feature1, feature0^2, feature1^2, feature0*feature1, 1]</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    :param X: matrix of features, shape [n_samples,2]</span></span><br><span class="line"><span class="string">    :returns: expanded features of shape [n_samples,6]</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    X_expanded = np.zeros((X.shape[<span class="number">0</span>], <span class="number">6</span>))</span><br><span class="line">    X_expanded[:,<span class="number">0</span>] = X[:,<span class="number">0</span>]</span><br><span class="line">    X_expanded[:,<span class="number">1</span>] = X[:,<span class="number">1</span>]</span><br><span class="line">    X_expanded[:,<span class="number">2</span>] = np.square(X[:,<span class="number">0</span>])</span><br><span class="line">    X_expanded[:,<span class="number">3</span>] = np.square(X[:,<span class="number">1</span>])</span><br><span class="line">    X_expanded[:,<span class="number">4</span>] = X[:,<span class="number">0</span>] * X[:,<span class="number">1</span>]</span><br><span class="line">    X_expanded[:,<span class="number">5</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> X_expanded</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span>&lt;your code here&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X_expanded = expand(X)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X_expanded</span><br></pre></td></tr></table></figure><pre><code>array([[ 1.20798057,  0.0844994 ,  1.45921706,  0.00714015,  0.10207364,         1.        ],       [ 0.76121787,  0.72510869,  0.57945265,  0.52578261,  0.5519657 ,         1.        ],       [ 0.55256189,  0.51937292,  0.30532464,  0.26974823,  0.28698568,         1.        ],       ...,        [-1.22224754,  0.45743421,  1.49388906,  0.20924606, -0.55909785,         1.        ],       [ 0.43973452, -1.47275142,  0.19336645,  2.16899674, -0.64761963,         1.        ],       [ 1.4928118 ,  1.15683375,  2.22848708,  1.33826433,  1.72693508,         1.        ]])</code></pre><p>Here are some tests for your implementation of <code>expand</code> function.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># simple test on random numbers</span></span><br><span class="line"></span><br><span class="line">dummy_X = np.array([</span><br><span class="line">        [<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">        [<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">        [<span class="number">2.61</span>,<span class="number">-1.28</span>],</span><br><span class="line">        [<span class="number">-0.59</span>,<span class="number">2.1</span>]</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line"><span class="comment"># call your expand function</span></span><br><span class="line">dummy_expanded = expand(dummy_X)</span><br><span class="line"></span><br><span class="line"><span class="comment"># what it should have returned:   x0       x1       x0^2     x1^2     x0*x1    1</span></span><br><span class="line">dummy_expanded_ans = np.array([[ <span class="number">0.</span>    ,  <span class="number">0.</span>    ,  <span class="number">0.</span>    ,  <span class="number">0.</span>    ,  <span class="number">0.</span>    ,  <span class="number">1.</span>    ],</span><br><span class="line">                               [ <span class="number">1.</span>    ,  <span class="number">0.</span>    ,  <span class="number">1.</span>    ,  <span class="number">0.</span>    ,  <span class="number">0.</span>    ,  <span class="number">1.</span>    ],</span><br><span class="line">                               [ <span class="number">2.61</span>  , <span class="number">-1.28</span>  ,  <span class="number">6.8121</span>,  <span class="number">1.6384</span>, <span class="number">-3.3408</span>,  <span class="number">1.</span>    ],</span><br><span class="line">                               [<span class="number">-0.59</span>  ,  <span class="number">2.1</span>   ,  <span class="number">0.3481</span>,  <span class="number">4.41</span>  , <span class="number">-1.239</span> ,  <span class="number">1.</span>    ]])</span><br><span class="line"></span><br><span class="line"><span class="comment">#tests</span></span><br><span class="line"><span class="keyword">assert</span> isinstance(dummy_expanded,np.ndarray), <span class="string">"please make sure you return numpy array"</span></span><br><span class="line"><span class="keyword">assert</span> dummy_expanded.shape == dummy_expanded_ans.shape, <span class="string">"please make sure your shape is correct"</span></span><br><span class="line"><span class="keyword">assert</span> np.allclose(dummy_expanded,dummy_expanded_ans,<span class="number">1e-3</span>), <span class="string">"Something's out of order with features"</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"Seems legit!"</span>)</span><br></pre></td></tr></table></figure><pre><code>Seems legit!</code></pre><h2 id="logistic-regression">Logistic regression</h2><p>To classify objects we will obtain probability of object belongs to class '1'. To predict probability we will use output of linear model and logistic function:</p><p><span class="math display">\[ a(x; w) = \langle w, x \rangle \]</span> <span class="math display">\[ P( y=1 \; \big| \; x, \, w) = \dfrac{1}{1 + \exp(- \langle w, x \rangle)} = \sigma(\langle w, x \rangle)\]</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">probability</span><span class="params">(X, w)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Given input features and weights</span></span><br><span class="line"><span class="string">    return predicted probabilities of y==1 given x, P(y=1|x), see description above</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    Don't forget to use expand(X) function (where necessary) in this and subsequent functions.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    :param X: feature matrix X of shape [n_samples,6] (expanded)</span></span><br><span class="line"><span class="string">    :param w: weight vector w of shape [6] for each of the expanded features</span></span><br><span class="line"><span class="string">    :returns: an array of predicted probabilities in [0,1] interval.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    w = w.reshape((w.shape[<span class="number">0</span>],<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span>  <span class="number">1</span>/(<span class="number">1</span> + np.exp(-np.dot(X,w)))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span>&lt;your code here&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dummy_weights = np.linspace(<span class="number">-1</span>, <span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">ans_part1 = probability(X_expanded[:<span class="number">1</span>, :], dummy_weights)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## GRADED PART, DO NOT CHANGE!</span></span><br><span class="line">grader.set_answer(<span class="string">"xU7U4"</span>, ans_part1)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># you can make submission with answers so far to check yourself at this stage</span></span><br><span class="line">grader.submit(COURSERA_EMAIL, COURSERA_TOKEN)</span><br></pre></td></tr></table></figure><pre><code>Submitted to Coursera platform. See results on assignment page!</code></pre><p>In logistic regression the optimal parameters <span class="math inline">\(w\)</span> are found by cross-entropy minimization:</p><p>Loss for one sample: <span class="math display">\[ l(x_i, y_i, w) = - \left[ {y_i \cdot log P(y_i = 1 \, | \, x_i,w) + (1-y_i) \cdot log (1-P(y_i = 1\, | \, x_i,w))}\right] \]</span></p><p>Loss for many samples: <span class="math display">\[ L(X, \vec{y}, w) =  {1 \over \ell} \sum_{i=1}^\ell l(x_i, y_i, w) \]</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_loss</span><span class="params">(X, y, w)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Given feature matrix X [n_samples,6], target vector [n_samples] of 1/0,</span></span><br><span class="line"><span class="string">    and weight vector w [6], compute scalar loss function L using formula above.</span></span><br><span class="line"><span class="string">    Keep in mind that our loss is averaged over all samples (rows) in X.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    y = y.reshape((y.shape[<span class="number">0</span>],<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> -np.mean(y*np.log(probability(X,w)) + (<span class="number">1</span>-y)*np.log(<span class="number">1</span>-probability(X,w)))</span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span>&lt;your code here&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># use output of this cell to fill answer field </span></span><br><span class="line">ans_part2 = compute_loss(X_expanded, y, dummy_weights)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## GRADED PART, DO NOT CHANGE!</span></span><br><span class="line">grader.set_answer(<span class="string">"HyTF6"</span>, ans_part2)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># you can make submission with answers so far to check yourself at this stage</span></span><br><span class="line">grader.submit(COURSERA_EMAIL, COURSERA_TOKEN)</span><br></pre></td></tr></table></figure><pre><code>Submitted to Coursera platform. See results on assignment page!</code></pre><p>Since we train our model with gradient descent, we should compute gradients.</p><p>To be specific, we need a derivative of loss function over each weight [6 of them].</p><p><span class="math display">\[ \nabla_w L = {1 \over \ell} \sum_{i=1}^\ell \nabla_w l(x_i, y_i, w) \]</span></p><p>We won't be giving you the exact formula this time ‚Äî instead, try figuring out a derivative with pen and paper.</p><p>As usual, we've made a small test for you, but if you need more, feel free to check your math against finite differences (estimate how <span class="math inline">\(L\)</span> changes if you shift <span class="math inline">\(w\)</span> by <span class="math inline">\(10^{-5}\)</span> or so).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_grad</span><span class="params">(X, y, w)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Given feature matrix X [n_samples,6], target vector [n_samples] of 1/0,</span></span><br><span class="line"><span class="string">    and weight vector w [6], compute vector [6] of derivatives of L over each weights.</span></span><br><span class="line"><span class="string">    Keep in mind that our loss is averaged over all samples (rows) in X.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    y = y.reshape((y.shape[<span class="number">0</span>],<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> np.mean(X*(probability(X,w) - y),axis = <span class="number">0</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># use output of this cell to fill answer field </span></span><br><span class="line">ans_part3 = np.linalg.norm(compute_grad(X_expanded, y, dummy_weights))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## GRADED PART, DO NOT CHANGE!</span></span><br><span class="line">grader.set_answer(<span class="string">"uNidL"</span>, ans_part3)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># you can make submission with answers so far to check yourself at this stage</span></span><br><span class="line">grader.submit(COURSERA_EMAIL, COURSERA_TOKEN)</span><br></pre></td></tr></table></figure><pre><code>Submitted to Coursera platform. See results on assignment page!</code></pre><p>Here's an auxiliary function that visualizes the predictions:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> IPython <span class="keyword">import</span> display</span><br><span class="line"></span><br><span class="line">h = <span class="number">0.01</span></span><br><span class="line">x_min, x_max = X[:, <span class="number">0</span>].min() - <span class="number">1</span>, X[:, <span class="number">0</span>].max() + <span class="number">1</span></span><br><span class="line">y_min, y_max = X[:, <span class="number">1</span>].min() - <span class="number">1</span>, X[:, <span class="number">1</span>].max() + <span class="number">1</span></span><br><span class="line">xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visualize</span><span class="params">(X, y, w, history)</span>:</span></span><br><span class="line">    <span class="string">"""draws classifier prediction with matplotlib magic"""</span></span><br><span class="line">    Z = probability(expand(np.c_[xx.ravel(), yy.ravel()]), w)</span><br><span class="line">    Z = Z.reshape(xx.shape)</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">    plt.contourf(xx, yy, Z, alpha=<span class="number">0.8</span>)</span><br><span class="line">    plt.scatter(X[:, <span class="number">0</span>], X[:, <span class="number">1</span>], c=y, cmap=plt.cm.Paired)</span><br><span class="line">    plt.xlim(xx.min(), xx.max())</span><br><span class="line">    plt.ylim(yy.min(), yy.max())</span><br><span class="line">    </span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">    plt.plot(history)</span><br><span class="line">    plt.grid()</span><br><span class="line">    ymin, ymax = plt.ylim()</span><br><span class="line">    plt.ylim(<span class="number">0</span>, ymax)</span><br><span class="line">    display.clear_output(wait=<span class="keyword">True</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">visualize(X, y, dummy_weights, [<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.25</span>])</span><br></pre></td></tr></table></figure><figure><img src="output_30_0.png" alt="png"><figcaption>png</figcaption></figure><h2 id="training">Training</h2><p>In this section we'll use the functions you wrote to train our classifier using stochastic gradient descent.</p><p>You can try change hyperparameters like batch size, learning rate and so on to find the best one, but use our hyperparameters when fill answers.</p><h2 id="mini-batch-sgd">Mini-batch SGD</h2><p>Stochastic gradient descent just takes a random batch of <span class="math inline">\(m\)</span> samples on each iteration, calculates a gradient of the loss on it and makes a step: <span class="math display">\[ w_t = w_{t-1} - \eta \dfrac{1}{m} \sum_{j=1}^m \nabla_w l(x_{i_j}, y_{i_j}, w_t) \]</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># please use np.random.seed(42), eta=0.1, n_iter=100 and batch_size=4 for deterministic results</span></span><br><span class="line"></span><br><span class="line">np.random.seed(<span class="number">42</span>)</span><br><span class="line">w = np.array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">eta= <span class="number">0.1</span> <span class="comment"># learning rate</span></span><br><span class="line"></span><br><span class="line">n_iter = <span class="number">100</span></span><br><span class="line">batch_size = <span class="number">4</span></span><br><span class="line">loss = np.zeros(n_iter)</span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n_iter):</span><br><span class="line">    ind = np.random.choice(X_expanded.shape[<span class="number">0</span>], batch_size)</span><br><span class="line">    loss[i] = compute_loss(X_expanded, y, w)</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">        visualize(X_expanded[ind, :], y[ind], w, loss)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Keep in mind that compute_grad already does averaging over batch for you!</span></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span>&lt;your code here&gt;</span></span><br><span class="line">    random_index = np.random.randint(<span class="number">0</span>,X_expanded.shape[<span class="number">0</span>],batch_size)</span><br><span class="line">    w = w - eta * compute_grad(X_expanded[random_index,:],y[random_index],w)</span><br><span class="line"></span><br><span class="line">visualize(X, y, w, loss)</span><br><span class="line">plt.clf()</span><br></pre></td></tr></table></figure><figure><img src="output_33_0.png" alt="png"><figcaption>png</figcaption></figure><pre><code>&lt;matplotlib.figure.Figure at 0x7fdbbfafb908&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># use output of this cell to fill answer field </span></span><br><span class="line">ans_part4 = compute_loss(X_expanded, y, w)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## GRADED PART, DO NOT CHANGE!</span></span><br><span class="line">grader.set_answer(<span class="string">"ToK7N"</span>, ans_part4)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># you can make submission with answers so far to check yourself at this stage</span></span><br><span class="line">grader.submit(COURSERA_EMAIL, COURSERA_TOKEN)</span><br></pre></td></tr></table></figure><pre><code>Submitted to Coursera platform. See results on assignment page!</code></pre><h2 id="sgd-with-momentum">SGD with momentum</h2><p>Momentum is a method that helps accelerate SGD in the relevant direction and dampens oscillations as can be seen in image below. It does this by adding a fraction <span class="math inline">\(\alpha\)</span> of the update vector of the past time step to the current update vector. <br> <br></p><p><span class="math display">\[ \nu_t = \alpha \nu_{t-1} + \eta\dfrac{1}{m} \sum_{j=1}^m \nabla_w l(x_{i_j}, y_{i_j}, w_t) \]</span> <span class="math display">\[ w_t = w_{t-1} - \nu_t\]</span></p><p><br></p><p><img src="sgd.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># please use np.random.seed(42), eta=0.05, alpha=0.9, n_iter=100 and batch_size=4 for deterministic results</span></span><br><span class="line">np.random.seed(<span class="number">42</span>)</span><br><span class="line">w = np.array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">eta = <span class="number">0.05</span> <span class="comment"># learning rate</span></span><br><span class="line">alpha = <span class="number">0.9</span> <span class="comment"># momentum</span></span><br><span class="line">nu = np.zeros_like(w)</span><br><span class="line"></span><br><span class="line">n_iter = <span class="number">100</span></span><br><span class="line">batch_size = <span class="number">4</span></span><br><span class="line">loss = np.zeros(n_iter)</span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n_iter):</span><br><span class="line">    ind = np.random.choice(X_expanded.shape[<span class="number">0</span>], batch_size)</span><br><span class="line">    loss[i] = compute_loss(X_expanded, y, w)</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">        visualize(X_expanded[ind, :], y[ind], w, loss)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span>&lt;your code here&gt;</span></span><br><span class="line">    random_index = np.random.randint(<span class="number">0</span>,X_expanded.shape[<span class="number">0</span>],batch_size)</span><br><span class="line">    nu = alpha*nu + eta * compute_grad(X_expanded[random_index,:],y[random_index],w)</span><br><span class="line">    w = w - nu</span><br><span class="line"></span><br><span class="line">visualize(X, y, w, loss)</span><br><span class="line">plt.clf()</span><br></pre></td></tr></table></figure><figure><img src="output_38_0.png" alt="png"><figcaption>png</figcaption></figure><pre><code>&lt;matplotlib.figure.Figure at 0x7fdbba216e10&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># use output of this cell to fill answer field </span></span><br><span class="line"></span><br><span class="line">ans_part5 = compute_loss(X_expanded, y, w)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## GRADED PART, DO NOT CHANGE!</span></span><br><span class="line">grader.set_answer(<span class="string">"GBdgZ"</span>, ans_part5)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># you can make submission with answers so far to check yourself at this stage</span></span><br><span class="line">grader.submit(COURSERA_EMAIL, COURSERA_TOKEN)</span><br></pre></td></tr></table></figure><pre><code>Submitted to Coursera platform. See results on assignment page!</code></pre><h2 id="rmsprop">RMSprop</h2><p>Implement RMSPROP algorithm, which use squared gradients to adjust learning rate:</p><p><span class="math display">\[ G_j^t = \alpha G_j^{t-1} + (1 - \alpha) g_{tj}^2 \]</span> <span class="math display">\[ w_j^t = w_j^{t-1} - \dfrac{\eta}{\sqrt{G_j^t + \varepsilon}} g_{tj} \]</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># please use np.random.seed(42), eta=0.1, alpha=0.9, n_iter=100 and batch_size=4 for deterministic results</span></span><br><span class="line">np.random.seed(<span class="number">42</span>)</span><br><span class="line"></span><br><span class="line">w = np.array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1.</span>])</span><br><span class="line"></span><br><span class="line">eta = <span class="number">0.1</span> <span class="comment"># learning rate</span></span><br><span class="line">alpha = <span class="number">0.9</span> <span class="comment"># moving average of gradient norm squared</span></span><br><span class="line">g2 = <span class="keyword">None</span> <span class="comment"># we start with None so that you can update this value correctly on the first iteration</span></span><br><span class="line">eps = <span class="number">1e-8</span></span><br><span class="line">G = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">n_iter = <span class="number">100</span></span><br><span class="line">batch_size = <span class="number">4</span></span><br><span class="line">loss = np.zeros(n_iter)</span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>,<span class="number">5</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n_iter):</span><br><span class="line">    ind = np.random.choice(X_expanded.shape[<span class="number">0</span>], batch_size)</span><br><span class="line">    loss[i] = compute_loss(X_expanded, y, w)</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">        visualize(X_expanded[ind, :], y[ind], w, loss)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span>&lt;your code here&gt;</span></span><br><span class="line">    random_index = np.random.randint(<span class="number">0</span>,X_expanded.shape[<span class="number">0</span>],batch_size)</span><br><span class="line">    g2 = np.square(compute_grad(X_expanded[random_index,:],y[random_index],w))</span><br><span class="line">    G = alpha*G + (<span class="number">1</span>-alpha) * g2</span><br><span class="line">    w = w - eta/np.sqrt(G + eps) * g2</span><br><span class="line">    </span><br><span class="line">visualize(X, y, w, loss)</span><br><span class="line">plt.clf()</span><br></pre></td></tr></table></figure><figure><img src="output_43_0.png" alt="png"><figcaption>png</figcaption></figure><pre><code>&lt;matplotlib.figure.Figure at 0x7fdbba944f98&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># use output of this cell to fill answer field </span></span><br><span class="line">ans_part6 = compute_loss(X_expanded, y, w)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## GRADED PART, DO NOT CHANGE!</span></span><br><span class="line">grader.set_answer(<span class="string">"dLdHG"</span>, ans_part6)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grader.submit(COURSERA_EMAIL, COURSERA_TOKEN)</span><br></pre></td></tr></table></figure><pre><code>Submitted to Coursera platform. See results on assignment page!</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Homework of Online Coueses </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Master Computer Science</title>
      <link href="/Master-Computer-Science/2019/02/20/"/>
      <url>/Master-Computer-Science/2019/02/20/</url>
      
        <content type="html"><![CDATA[<style>table th:first-of-type {    width: 30%;}</style><h2 id="math">MATH</h2><table style="width:100%;"><colgroup><col style="width: 16%"><col style="width: 16%"><col style="width: 16%"><col style="width: 16%"><col style="width: 16%"><col style="width: 16%"></colgroup><thead><tr class="header"><th style="text-align: left;">Course</th><th style="text-align: left;">Institute</th><th style="text-align: left;">Rating</th><th style="text-align: left;">Type</th><th style="text-align: left;">Status</th><th style="text-align: left;">Commnet</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><a href="https://www.coursera.org/learn/statistical-inferences/home/welcome" target="_blank" rel="noopener"><font color="red">Improving your statistical inferences</font></a></td><td style="text-align: left;">Eindhoven University of Technology</td><td style="text-align: left;">4.9</td><td style="text-align: left;">Statistical</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://www.coursera.org/learn/matrix-algebra-engineers/home/welcome" target="_blank" rel="noopener">Matrix Algebra for Engineers</a></td><td style="text-align: left;">The Hong Kong University of Science and Technology</td><td style="text-align: left;"></td><td style="text-align: left;">Linear Algebra</td><td style="text-align: left;">completed</td><td style="text-align: left;">Easy but useful</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://www.coursera.org/learn/what-is-a-proof/home/welcome" target="_blank" rel="noopener">Mathematical Thinking in Computer Science</a></td><td style="text-align: left;">UCSanDiego</td><td style="text-align: left;"></td><td style="text-align: left;">Discrete Mathematics</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://www.coursera.org/specializations/mathematics-machine-learning" target="_blank" rel="noopener">Mathematics for Machine Learning Specialization</a></td><td style="text-align: left;">Imperail London University</td><td style="text-align: left;">4.5</td><td style="text-align: left;">Math</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="https://lagunita.stanford.edu/courses/Engineering/CVX101/Winter2014/info" target="_blank" rel="noopener">ARCHIVED Convex Optimization</a></td><td style="text-align: left;">Standford</td><td style="text-align: left;"></td><td style="text-align: left;">Optimization</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://lagunita.stanford.edu/courses/HumanitiesSciences/StatLearning/Winter2016/course/" target="_blank" rel="noopener">Statistical Learning</a></td><td style="text-align: left;">Standford</td><td style="text-align: left;"></td><td style="text-align: left;">Probability and Statistics</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="https://lagunita.stanford.edu/courses/course-v1:OLI+ProbStat+Open_Jan2017/course/" target="_blank" rel="noopener">Probability and Statistics</a></td><td style="text-align: left;">Standford</td><td style="text-align: left;"></td><td style="text-align: left;">Probability and Statistics</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-042j-mathematics-for-computer-science-spring-2015/index.htm" target="_blank" rel="noopener">Mathematics for Computer Science</a></td><td style="text-align: left;">MIT</td><td style="text-align: left;"></td><td style="text-align: left;">Math</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="https://www.coursera.org/learn/lisan-youhua-jianmo-jichupian/home/welcome" target="_blank" rel="noopener">Basic Modeling for Discrete Optimization</a></td><td style="text-align: left;">The Chinese University of Hong Kong</td><td style="text-align: left;"></td><td style="text-align: left;">Optimization</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://www.coursera.org/learn/lisan-youhua-jianmo-gaojiepian" target="_blank" rel="noopener">Advanced Modeling for Discrete Optimization</a></td><td style="text-align: left;">The Chinese University of Hong Kong</td><td style="text-align: left;"></td><td style="text-align: left;">Optimization</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="https://www.coursera.org/learn/dmathgen" target="_blank" rel="noopener">Discrete Mathematics Generality</a></td><td style="text-align: left;">Pking University</td><td style="text-align: left;">4.7</td><td style="text-align: left;">Discrete Mathematics</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://www.coursera.org/specializations/social-science" target="_blank" rel="noopener">Methods and Statistics in Social Sciences</a></td><td style="text-align: left;">University of Amsterdam</td><td style="text-align: left;"></td><td style="text-align: left;">Statistics</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="https://www.coursera.org/specializations/discrete-mathematics" target="_blank" rel="noopener">Introduction to Discrete Mathematics for Computer Science</a></td><td style="text-align: left;">UCSanDiego</td><td style="text-align: left;">4.5</td><td style="text-align: left;">Discrete Mathematics</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://www.coursera.org/learn/bayesian-statistics/home/welcome" target="_blank" rel="noopener">Bayesian Statistics: From Concept to Data Analysis</a></td><td style="text-align: left;">UCSantaCruz</td><td style="text-align: left;"></td><td style="text-align: left;">Statistics</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="https://www.coursera.org/learn/mathematical-thinking/home/welcome" target="_blank" rel="noopener">Introduction to Mathematical Thinking</a></td><td style="text-align: left;">Standford</td><td style="text-align: left;"></td><td style="text-align: left;">Math</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://mitmath.github.io/1806/" target="_blank" rel="noopener"><font color="red">18.06 Linear Algebra</font></a></td><td style="text-align: left;">MIT</td><td style="text-align: left;"></td><td style="text-align: left;">Linear Algebra</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="https://courses.edx.org/courses/course-v1:HarvardX+CalcAPL1x+2T2018/course/" target="_blank" rel="noopener"><font color="red">Calculus Applied!</font></a></td><td style="text-align: left;">Harvard</td><td style="text-align: left;"></td><td style="text-align: left;">Calculus</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://courses.edx.org/courses/course-v1:UCSanDiegoX+DSE210x+3T2018/course/" target="_blank" rel="noopener">Probability and Statistics in Data Science using Python</a></td><td style="text-align: left;">UCSanDiego</td><td style="text-align: left;"></td><td style="text-align: left;">Probability and Statistics</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="https://courses.edx.org/courses/course-v1:HarvardX+STAT110x+2T2017/course/" target="_blank" rel="noopener">Introduction to Probability</a></td><td style="text-align: left;">Harvard</td><td style="text-align: left;"></td><td style="text-align: left;">Probability and Statistics</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://www.edx.org/course/calculus-1a-differentiation" target="_blank" rel="noopener"><font color="red">Calculus 1A: Differentiation</font></a></td><td style="text-align: left;">MIT</td><td style="text-align: left;"></td><td style="text-align: left;">Calculus</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="https://www.edx.org/course/calculus-1b-integration" target="_blank" rel="noopener">Calculus 1B: Integration</a></td><td style="text-align: left;">MIT</td><td style="text-align: left;"></td><td style="text-align: left;">Calculus</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://www.edx.org/course/calculus-1c-coordinate-systems-infinite-mitx-18-01-3x-0" target="_blank" rel="noopener">Calculus 1C: Coordinate Systems &amp; Infinite Series</a></td><td style="text-align: left;">MIT</td><td style="text-align: left;"></td><td style="text-align: left;">Calculus</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="https://www.edx.org/course/linear-algebra-foundations-to-frontiers" target="_blank" rel="noopener">Linear Algebra - Foundations to Frontiers</a></td><td style="text-align: left;">UT Austin</td><td style="text-align: left;"></td><td style="text-align: left;">Linear Algebra</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr></tbody></table><h2 id="computer-scicence">Computer Scicence</h2><table style="width:100%;"><colgroup><col style="width: 16%"><col style="width: 16%"><col style="width: 16%"><col style="width: 16%"><col style="width: 16%"><col style="width: 16%"></colgroup><thead><tr class="header"><th style="text-align: left;">Course</th><th style="text-align: left;">Institute</th><th style="text-align: left;">Rating</th><th style="text-align: left;">Type</th><th style="text-align: left;">Status</th><th style="text-align: left;">Commnet</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><a href="https://www.coursera.org/specializations/cloud-computing?" target="_blank" rel="noopener"><font color="red">Cloud Computing Specialization</font></a></td><td style="text-align: left;">UIUC</td><td style="text-align: left;">4.4</td><td style="text-align: left;">Cloud Computing</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://www.coursera.org/specializations/data-structures-algorithms" target="_blank" rel="noopener"><font color="red">Data Structures and Algorithms</font></a></td><td style="text-align: left;">UCSanDiego</td><td style="text-align: left;">4.6</td><td style="text-align: left;">Algorithm and Data Structure</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="https://www.coursera.org/learn/algorithms-part1" target="_blank" rel="noopener">Algorithm Part1</a></td><td style="text-align: left;">Priceton</td><td style="text-align: left;">4.9</td><td style="text-align: left;">Algorithm and Data Structure</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://www.coursera.org/learn/algorithms-part2" target="_blank" rel="noopener">Algorithm Part2</a></td><td style="text-align: left;">Priceton</td><td style="text-align: left;">4.9</td><td style="text-align: left;">Algorithm and Data Structure</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="https://www.coursera.org/learn/nand2tetris1" target="_blank" rel="noopener"><font color="red">Nand to Tetris Part I</font></a></td><td style="text-align: left;">Hebrew University of Jerusalem</td><td style="text-align: left;">5</td><td style="text-align: left;">System</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://www.coursera.org/learn/nand2tetris2" target="_blank" rel="noopener">Nand to Tetris Part II</a></td><td style="text-align: left;">Hebrew University of Jerusalem</td><td style="text-align: left;">5</td><td style="text-align: left;">System</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="https://www.coursera.org/specializations/algorithms" target="_blank" rel="noopener">Algorithms Specialization</a></td><td style="text-align: left;">Standford</td><td style="text-align: left;"></td><td style="text-align: left;">Algorithm and Data Structure</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://www.coursera.org/specializations/iot" target="_blank" rel="noopener"><font color="red">An Introduction to Programming the Internet of Things (IOT) Specialization</font></a></td><td style="text-align: left;">University of California, Irvine</td><td style="text-align: left;">4.6</td><td style="text-align: left;">Hardware</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="https://www.coursera.org/specializations/scala" target="_blank" rel="noopener">Functional Programming in Scala</a></td><td style="text-align: left;">√âcole Polytechnique F√©d√©rale de Lausanne</td><td style="text-align: left;">4.5</td><td style="text-align: left;">Programming Language</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://www.coursera.org/learn/analysis-of-algorithms/home/welcome" target="_blank" rel="noopener">Analysis of Algorithms</a></td><td style="text-align: left;">Priceton</td><td style="text-align: left;"></td><td style="text-align: left;">Algorithm and Data Structure</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="https://www.coursera.org/specializations/pcdp" target="_blank" rel="noopener">Parallel, Concurrent, and Distributed Programming in Java</a></td><td style="text-align: left;">Rice University</td><td style="text-align: left;">4.5</td><td style="text-align: left;">Programming Language</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://www.coursera.org/specializations/probabilistic-graphical-models" target="_blank" rel="noopener">Probabilistic Graphical Models Specialization</a></td><td style="text-align: left;">Standford</td><td style="text-align: left;">4.7</td><td style="text-align: left;">Graphical Model</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="https://www.coursera.org/learn/cryptocurrency/home/welcome" target="_blank" rel="noopener">Bitcoin and Cryptocurrency Technologies</a></td><td style="text-align: left;">Priceton</td><td style="text-align: left;"></td><td style="text-align: left;">Bitcoin</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://www.coursera.org/learn/cs-algorithms-theory-machines/home/welcome" target="_blank" rel="noopener">Computer Science: Algorithms, Theory, and Machines</a></td><td style="text-align: left;">Princeton University</td><td style="text-align: left;"></td><td style="text-align: left;">System</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="http://inst.eecs.berkeley.edu/~cs61a/fa18/" target="_blank" rel="noopener">CS 61A: Structure and Interpretation of Computer Programs</a></td><td style="text-align: left;">UCBerkeley</td><td style="text-align: left;"></td><td style="text-align: left;">System</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="http://web.stanford.edu/class/archive/cs/cs161/cs161.1194/schedule.html" target="_blank" rel="noopener"><font color="red">CS161: Algorithm</font></a></td><td style="text-align: left;">Standford</td><td style="text-align: left;"></td><td style="text-align: left;">Algorithm and Data Structure</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="http://web.stanford.edu/class/cs224n/" target="_blank" rel="noopener">CS224n: Natural Language Processing with Deep Learning</a></td><td style="text-align: left;">Stanford</td><td style="text-align: left;"></td><td style="text-align: left;">Natural Language Processing</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="http://web.stanford.edu/class/cs140e/" target="_blank" rel="noopener">Operating Systems Design and Implementation</a></td><td style="text-align: left;">Standford</td><td style="text-align: left;"></td><td style="text-align: left;">Operating Systems</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="https://pdos.csail.mit.edu/6.828/2017/schedule.html" target="_blank" rel="noopener">Operating System Engineering</a></td><td style="text-align: left;">MIT</td><td style="text-align: left;"></td><td style="text-align: left;">Operating Systems</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://learning-modules.mit.edu/class/index.html?uuid=/course/6/sp19/6.006#dashboard" target="_blank" rel="noopener">6.006 Introduction to Algorithms</a></td><td style="text-align: left;">MIT</td><td style="text-align: left;"></td><td style="text-align: left;">Algorithm and Data Structure</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr></tbody></table><h2 id="machine-learning">Machine Learning</h2><table style="width:100%;"><colgroup><col style="width: 16%"><col style="width: 16%"><col style="width: 16%"><col style="width: 16%"><col style="width: 16%"><col style="width: 16%"></colgroup><thead><tr class="header"><th style="text-align: left;">Course</th><th style="text-align: left;">Institute</th><th style="text-align: left;">Rating</th><th style="text-align: left;">Type</th><th style="text-align: left;">Status</th><th style="text-align: left;">Commnet</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><a href="https://www.coursera.org/specializations/machine-learning" target="_blank" rel="noopener">Machine Learning Foundations</a></td><td style="text-align: left;">University of Washington</td><td style="text-align: left;"></td><td style="text-align: left;">Machine Learning</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://www.coursera.org/specializations/aml" target="_blank" rel="noopener"><font color="red">Advanced Machine Learning Specialization</font></a></td><td style="text-align: left;">National Research University Higher School of Economics</td><td style="text-align: left;"></td><td style="text-align: left;">Deep Learning</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="https://www.coursera.org/specializations/advanced-machine-learning-tensorflow-gcp" target="_blank" rel="noopener">Advanced Machine Learning with TensorFlow on Google Cloud Platform Specialization</a></td><td style="text-align: left;">Google</td><td style="text-align: left;">4.6</td><td style="text-align: left;">Machine Learning</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://www.coursera.org/learn/machine-learning" target="_blank" rel="noopener">Machine Learning</a></td><td style="text-align: left;">Standford</td><td style="text-align: left;">4.9</td><td style="text-align: left;">Machine Learning</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="https://www.coursera.org/specializations/deep-learning" target="_blank" rel="noopener">Deep Learning</a></td><td style="text-align: left;">deeplearning.ai</td><td style="text-align: left;">4.9</td><td style="text-align: left;">Deep Learning</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://www.coursera.org/specializations/self-driving-cars" target="_blank" rel="noopener">Self-Driving Cars Specialization</a></td><td style="text-align: left;">University of Toronto</td><td style="text-align: left;">5</td><td style="text-align: left;">Self-Driving</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="https://www.coursera.org/learn/self-driving-cars-teach-out/home/welcome" target="_blank" rel="noopener">Self-Driving Cars Teach-Out</a></td><td style="text-align: left;">University of Michigan</td><td style="text-align: left;">4.9</td><td style="text-align: left;">Self-Driving</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://www.coursera.org/learn/ntumlone-mathematicalfoundations/home/welcome" target="_blank" rel="noopener"><font color="red">Ê©üÂô®Â≠∏ÁøíÂü∫Áü≥‰∏ä</font></a></td><td style="text-align: left;">National Taiwan University</td><td style="text-align: left;">4.9</td><td style="text-align: left;">Machine Learning</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="https://www.coursera.org/learn/ntumlone-algorithmicfoundations" target="_blank" rel="noopener">Ê©üÂô®Â≠∏ÁøíÂü∫Áü≥‰∏ã</a></td><td style="text-align: left;">National Taiwan University</td><td style="text-align: left;">4.9</td><td style="text-align: left;">Machine Learning</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://www.coursera.org/specializations/recommender-systems" target="_blank" rel="noopener">Recommender Systems Specialization</a></td><td style="text-align: left;">University of Minnesota</td><td style="text-align: left;"></td><td style="text-align: left;">Recommender Systems</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="http://web.stanford.edu/class/cs224n/" target="_blank" rel="noopener">CS224n: Natural Language Processing with Deep Learning</a></td><td style="text-align: left;">Stanford</td><td style="text-align: left;"></td><td style="text-align: left;">Natural Language Processing</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="http://cs231n.stanford.edu" target="_blank" rel="noopener">CS231n: Convolutional Neural Networks for Visual Recognition</a></td><td style="text-align: left;">Standford</td><td style="text-align: left;"></td><td style="text-align: left;">Computer Vision</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="http://deeplearning.cs.cmu.edu" target="_blank" rel="noopener">11-785 Introduction to Deep Learning</a></td><td style="text-align: left;">Standford</td><td style="text-align: left;"></td><td style="text-align: left;">Deep Learning</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr></tbody></table><h2 id="artificial-intelligence">Artificial Intelligence</h2><table style="width:100%;"><colgroup><col style="width: 16%"><col style="width: 16%"><col style="width: 16%"><col style="width: 16%"><col style="width: 16%"><col style="width: 16%"></colgroup><thead><tr class="header"><th style="text-align: left;">Course</th><th style="text-align: left;">Institute</th><th style="text-align: left;">Rating</th><th style="text-align: left;">Type</th><th style="text-align: left;">Status</th><th style="text-align: left;">Commnet</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><a href="https://www.coursera.org/learn/ai-for-everyone" target="_blank" rel="noopener">AI for Everyone</a></td><td style="text-align: left;">deeplearning.ai</td><td style="text-align: left;">5</td><td style="text-align: left;">Artificial Intelligence</td><td style="text-align: left;">completed</td><td style="text-align: left;">good course for AI from business perspective</td></tr><tr class="even"><td style="text-align: left;"><a href="https://courses.edx.org/courses/BerkeleyX/CS188.1x-4/1T2015/course/" target="_blank" rel="noopener">Artificial Intelligence</a></td><td style="text-align: left;">UCBerkeley</td><td style="text-align: left;"></td><td style="text-align: left;">Artificial Intelligence</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="https://www.coursera.org/specializations/data-mining" target="_blank" rel="noopener">Data Mining Specialization</a></td><td style="text-align: left;">UIUC</td><td style="text-align: left;"></td><td style="text-align: left;">Data Mining</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://www.coursera.org/specializations/data-systems" target="_blank" rel="noopener"><font color="red">Data Systems Specialization</font></a></td><td style="text-align: left;">ASU</td><td style="text-align: left;">4.0</td><td style="text-align: left;">Database</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr></tbody></table><h2 id="i-love-moocs-and-moocs-love-me">I love MOOCs and MOOCs love me</h2><p><img src="Structuring_Machine_Learning_Projects.png" alt="Structuring_Machine_Learning_Projects.png"> <img src="Convolutional_Neural_Networks.png" alt="Convolutional_Neural_Networks.png"> <img src="Introduction_to_Programming_with_MATLAB.png" alt="Introduction_to_Programming_with_MATLAB.png"> <img src="Basic_Modeling_for_Discrete_Optimization.png" alt="Basic_Modeling_for_Discrete_Optimization.png"> <img src="Java_Programming_Arrays_Lists_and_Structured_Data.png" alt="Java_Programming_Arrays_Lists_and_Structured_Data.png"> <img src="Mathematics_for_Machine_Learning_Multivariate_Calculus.png" alt="Mathematics_for_Machine_Learning_Multivariate_Calculus.png"> <img src="How_Google_does_Machine_Learning.png" alt="How_Google_does_Machine_Learning.png"> <img src="È†ëÊÉ≥Â≠∏Ê¶ÇÁéá_Ê©üÁéá‰∏Ä.png" alt="È†ëÊÉ≥Â≠∏Ê¶ÇÁéá_Ê©üÁéá‰∏Ä.png"> <img src="Mathematics_for_Machine_Learning_Linear_Algebra.png" alt="Mathematics_for_Machine_Learning_Linear_Algebra.png"> <img src="Intro_to_TensorFlow.png" alt="Intro_to_TensorFlow.png"> <img src="Feature_Engineering.png" alt="Feature_Engineering.png"> <img src="Java_Programming_Solving_Problems_with_Software.png" alt="Java_Programming_Solving_Problems_with_Software.png"> <img src="Improving_Deep_Neural_Networks_Hyperparameter_tuning_Regularization_and_Optimization.png" alt="Improving_Deep_Neural_Networks_Hyperparameter_tuning_Regularization_and_Optimization.png"> <img src="CÁ®ãÂ∫èËÆæËÆ°ËøõÈò∂.png" alt="CÁ®ãÂ∫èËÆæËÆ°ËøõÈò∂.png"> <img src="Data_Structures.png" alt="Data_Structures.png"> <img src="Launching_into_Machine_Learning.png" alt="Launching_into_Machine_Learning.png"> <img src="Machine_Learning_Foundations.png" alt="Machine_Learning_Foundations.png"> <img src="Machine_Learning.png" alt="Machine_Learning.png"> <img src="Algorithms_on_Graphs.png" alt="Algorithms_on_Graphs.png"> <img src="AI_For_Everyone.png" alt="AI_For_Everyone.png"> <img src="Algorithmic_Toolbox.png" alt="Algorithmic_Toolbox.png"> <img src="Neural_Networks_and_Deep_Learning.png" alt="Neural_Networks_and_Deep_Learning.png"> <img src="Matrix_Algebra_for_Engineers.png" alt="Matrix_Algebra_for_Engineers.png"> <img src="Machine_Learning_Foundations_A_Case_Study_Approach.png" alt="Machine_Learning_Foundations_A_Case_Study_Approach.png"></p>]]></content>
      
      
      <categories>
          
          <category> Gossip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Courses </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>INFSCI 2160 DATA MINING(PART ONE)</title>
      <link href="/INFSCI-2160-DATA-MINING-PART-ONE/2019/02/18/"/>
      <url>/INFSCI-2160-DATA-MINING-PART-ONE/2019/02/18/</url>
      
        <content type="html"><![CDATA[<p><strong>Reference from some lecture slides of INFSCI 2160 DATA MINING lectured by Matt Berezo</strong></p><h2 id="introduction">Introduction</h2><ol type="1"><li><p>What is Artificial Intelligence? <img src="29AF0C1A006683910109C1BA949541C4.png" alt="Screen Shot 2019-02-18 at 13.13.28.png"> The goal of machine learning/AI/data mining is to develop an algorithm that performs well on new, <strong>unseen inputs</strong>. The ability to perform well on previously unobserved inputs is called <strong>generalization</strong></p></li><li>Data Mining process <img src="83DD4C0B5649752C8A1EAE6A78058344.png" alt="Screen Shot 2019-02-18 at 13.15.58.png"></li></ol><ul><li><strong>Business undertanding</strong> is important</li><li><strong>Data understranding</strong> is important</li></ul><h2 id="regression">Regression</h2><ul><li>Simple linear regression involves 2 variables:<ul><li>A predictor variable, x</li><li>A response variable, y</li></ul></li></ul><p><span class="math display">\[\hat{y_{i}} = \hat{\alpha} + \hat{\beta_{i}}X_{i}\]</span> - <span class="math inline">\(\hat{y_{i}}\)</span> = Estimated prediction of y - <span class="math inline">\(\hat{\alpha}\)</span> = Intercept - <span class="math inline">\(\hat{\beta_{i}}\)</span> = coefficient/parameter</p><p><strong>Goal</strong>: Obtain coefficient estimates that the linear model fits the available data well, and will also perform well (generalize) on unseen data</p><h3 id="the-least-square-approach">The least square approach</h3><p><span class="math display">\[\begin{align*}&amp; \hat{\beta_{1}} = \frac{\sum_{i=1}^{n}{(x_{i}-\bar{x})(y_{i}-\bar{y})}}{\sum_{i=1}^{n}{(x_{i} - \bar{x})^{2}}}\\&amp; \hat{\beta_{0}} = \bar{y} - \hat{\beta_{1}}\bar{x}\end{align*}\]</span></p><h3 id="coefficient-accuracy">Coefficient Accuracy</h3><p>We can compute the standard error of our coefficients</p><h4 id="what-is-se-standaed-error">what is SE (standaed error)?</h4><blockquote><p>If the purpose is <strong>Descriptive</strong>, use standard Deviation; if the purpose is <strong>Estimation</strong>, use standard Error.</p></blockquote><p>ÂæàÂÆπÊòìÊ∑∑Ê∑Ü,Êàë‰ª¨ÊãøÂà∞‰∏Ä‰∏™Ê†∑Êú¨,ÂØπÊ†∑Êú¨ËßÇÂØüÂÄºÁ¶ªÊï£Á®ãÂ∫¶ÁöÑÈáèÂåñÊòØ<span class="math inline">\(SD:sd(x)\)</span>; ËÄåÊàë‰ª¨ÂèØ‰ª•‰ªéÂæàÂ§ö‰∏™Ê†∑Êú¨‰∏≠ÂæóÂà∞ÂæàÂ§ö‰∏™ÂùáÂÄºÔºåËøô‰∫õÂùáÂÄºÁöÑÁ¶ªÊï£Â∫¶Áî®SEÊù•ÈáèÂåñ,‰πüÂ∞±ÊòØ<span class="math inline">\(SE=sd(\bar{x})\)</span></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## generate 1000 sample with sample size 100</span></span><br><span class="line">a = sapply(rep(<span class="number">100</span>, <span class="number">1000</span>), rnorm)</span><br><span class="line">a.mean = colMeans(a)</span><br><span class="line"><span class="comment">## estimate SEM by simulation</span></span><br><span class="line">sd(a.mean)</span><br><span class="line"></span><br><span class="line"><span class="comment">## estimate SEM by sigma/sqrt(n), sigma = 1</span></span><br><span class="line"><span class="number">1</span>/sqrt(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## estimate SEM by sample 1</span></span><br><span class="line">sd(a[, <span class="number">1</span>])/sqrt(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><p><strong>We have established that the average of <span class="math inline">\(\hat{\mu}\)</span> over many data sets will be very close to <span class="math inline">\(\mu\)</span>, but that a single estimate <span class="math inline">\(\hat{\mu}\)</span> may be a substantial underestimate or overestimate of <span class="math inline">\(\mu\)</span>. How far off will that single estimate of <span class="math inline">\(\hat{\mu}\)</span> be?</strong></p><p><span class="math display">\[\begin{align*}&amp; SE(\hat{\beta_{0}})^{2} = \sigma^{2}\lbrack\frac{1}{n} + \frac{\bar{x}^{2}}{\sum_{i=1}^{n}{(x_{i} - \bar{x})^{2}}}\rbrack\\&amp; SE(\hat{\beta_{1}})^{2} = \frac{\sigma^{2}}{\sum_{i=1}^{n}{(x_{i} - \bar{x})^{2}}}\\\end{align*}\]</span></p><p>When we get the SE of parameters, we can calculate the 95% confidence interval</p><p><span class="math display">\[\hat{B_{i}} = +/- 2 * SE(\hat{B_{i}})\]</span></p><p>Standard errors can also be used to perform <strong>hypothesis tests</strong> on the coefficients. The most common hypothesis test involves testing the null hypothesis</p><ul><li><strong>Null hypothesis(H0)</strong>: there is <strong>no</strong> relationship between x and y</li><li><strong>Alternative hypothesis(Ha)</strong>: there is a relationship between x and y</li></ul><p>Mathematically, this corresponds to testing <span class="math display">\[\begin{align*}H_{0}: \beta_{1} = 0 \\H_{a}: \beta_{1} \ne 0 \\\end{align*}\]</span></p><p>To test the null hypothesis, we need to determine whether <span class="math inline">\(\hat{Œ≤_{1}}\)</span>, our estimate for <span class="math inline">\(\hat{Œ≤_{1}}\)</span> , is sufficiently far from zero that we can be confident that <span class="math inline">\(\hat{Œ≤_{1}}\)</span> is non-zero</p><p><span class="math display">\[t = \frac{\hat{Œ≤_{1}} - 0}{SE(\hat{\beta_{1}})}\]</span></p><h3 id="model-accuracy">Model Accuracy</h3><ul><li><p>RSS: Residual Sum of Squares <span class="math display">\[e_{1}^{2} + e_{2}^{2} + e_{3}^{2} + .....\]</span></p></li><li>RSE: Residual standard error <span class="math display">\[\sqrt\frac{RSS}{(N-2)}\]</span></li><li>R squared How much better does your model do than simply using the mean, in terms of SSE? <span class="math display">\[R^{2} = 1 - (\frac{\sum{(y_{i} - \hat{y}_{i})^{2}}}{\sum{(y_{i} - \overline{y}_{i})^{2}}})\]</span><ul><li>R-square takes form of a proportion and gives a value between 0 and 1 (1 = perfect model)</li></ul></li></ul><h3 id="multiple-linear-regression">Multiple Linear Regression</h3><ul><li>F-stat If the F-stat is larger than 1 and the p-value is &lt;= 0.05, we can determine that our predictors and model have a relationship with the response variable</li></ul><p><span class="math display">\[\frac{TSS - RSS}{p} / \frac{RSS}{n-p-1}\]</span> - Where p = our number of predictors - N = number of observations</p><figure><img src="9784E656D9E9D2613CF3D07CA064D3AA.jpg" alt="IMG_0310.jpg"><figcaption>IMG_0310.jpg</figcaption></figure><ul><li>R-squared <span class="math display">\[R^{2} = 1 - \frac{\sum{(y_{i} - \hat{y}_{i})^{2}} / (n-d-1)}{\sum{(y_{i} - \overline{y}_{i})^{2}}/(n-d)}\]</span></li></ul><h3 id="feature-selection">Feature Selection</h3><h4 id="stepwise-procedures">Stepwise Procedures</h4><ul><li>Backward Elimination This is the simplest of all variable selection procedures and can be easily implemented without special software. In situations where there is a complex hierarchy, backward elimination can be run manually while taking account of what variables are eligible for removal.<ol type="1"><li>Start with all the predictors in the model</li><li>Remove the predictor with highest p-value greater than <span class="math inline">\(\alpha\)</span></li><li>Refit the model and goto 2</li><li>Stop when all p-values are less than <span class="math inline">\(\alpha\)</span></li></ol></li><li>Forward Selection This just reverses the backward method.<ol type="1"><li>Start with no variables in the model.</li><li>For all predictors not in the model, check their p-value if they are added to the model. Choose the one with lowest p-value less than Œ±crit .</li><li>Continue until no new predictors can be added.</li></ol></li></ul><h4 id="ridge-regression-i.e.-l2-norm-regulizar">Ridge regression (i.e., L2 norm regulizar)</h4><p>Ridge looks to minimize: <span class="math display">\[RSS + \lambda\sum_{j=1}^{p}{\beta_{j}^{2}}\]</span></p><ul><li><span class="math inline">\(\lambda\)</span> is a tuning parameter</li></ul><h3 id="bias-vs.-variance-trade-off">Bias vs. Variance Trade-off</h3><p>Ideally, we want to derive a model that has low bias, low variance, and low MSE on test data <img src="CA80BF1FC8D3AA010CDDFE5A646489BF.png" alt="Screen Shot 2019-02-18 at 20.01.09.png"></p><h3 id="local-polynomial-regression">Local Polynomial Regression</h3><ul><li>The fitted value changes with x in a nonparametric manner</li><li>Define a weight function so that only values within a smoothing window [ùë•0 - h(ùë•0 ), ùë•0 + h(ùë•0 )] will be considered in the estimate of <span class="math inline">\(\hat{y}\)</span></li></ul><h3 id="model-performance">Model Performance</h3><h3 id="cross-validation">Cross-validation</h3><p>The goal of cross-validation is to test the model‚Äôs ability to predict new data that was not used in estimating it, in order to flag problems like overfitting or selection bias[6] and to give an insight on how the model will generalize to an independent dataset (i.e., an unknown dataset, for instance from a real problem).</p><h4 id="advantages-of-loocv">Advantages of LOOCV</h4><p>Advantages of LOOCV: - Works well on small datasets - Meticulously tests the data</p><p>Disadvantages of LOOCV: - Computationally expensive on ‚Äúbig data‚Äù sets - Can result in high variability since model is only tested on one observation</p><h4 id="overfitting">Overfitting</h4><ul><li>Use cross-validation</li><li>Ensemble/combine models together</li><li>Use regularization techniques to penalize models that are too complex</li></ul><h3 id="non-parametric-methods">Non-parametric Methods</h3><p>Advantages of Non-parametric Methods: - Do not assume an explicit form of f(x), so the model is more "flexible"</p><p>Disadvantages of Non-Parametric Methods: - Often are more complex and thus more difficult to interpret</p><h4 id="k-nearest-neighbors">K Nearest-Neighbors</h4><ul><li>KNN is a <strong>non-parametric method</strong>, vs. linear and logistic regression which are parametric approaches since they assume a linear functional form for f(x) <img src="BFE33EA434D8355137098AEF9241AEEC.png" alt="Screen Shot 2019-02-18 at 22.26.44.png"></li></ul><h3 id="accuracy-and-error-rate">Accuracy and Error Rate</h3><p><img src="3FB3E0B341C2DD82395CB962430B6E34.png" alt="Screen Shot 2019-02-19 at 00.26.12.png"> <img src="youden.png" alt="youden.png"> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics</span><br><span class="line">y = np.array([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>])</span><br><span class="line">scores = np.array([<span class="number">0.1</span>, <span class="number">0.4</span>, <span class="number">0.35</span>, <span class="number">0.8</span>])</span><br><span class="line">fpr, tpr, thresholds = metrics.roc_curve(y, scores, pos_label=<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fpr</span><br><span class="line">array([<span class="number">0.</span> , <span class="number">0.</span> , <span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">1.</span> ])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tpr</span><br><span class="line">array([<span class="number">0.</span> , <span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">1.</span> , <span class="number">1.</span> ])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>thresholds</span><br><span class="line">array([<span class="number">1.8</span> , <span class="number">0.8</span> , <span class="number">0.4</span> , <span class="number">0.35</span>, <span class="number">0.1</span> ])</span><br></pre></td></tr></table></figure></p><h3 id="classification">Classification</h3><h4 id="na√Øve-bayes">Na√Øve Bayes</h4><ul><li>a Na√Øve Bayes classifier assumes independence between features</li><li>Na√Øve Bayes assumes that the continuous variables are normally distributed</li><li>For continuous random variables, probabilities are areas under the curve <img src="IMG_77C6064B4F18.png" alt="IMG_77C6064B4F18.png"></li></ul><h4 id="decision-trees">Decision Trees</h4><p>Constructing Decision Trees for Regression 1. First, we divide the predictor space into distinct and non-overlapping regions (ùëÖ1, ùëÖ2,ùëÖ3 ... ùëÖùëõ) 2. To make a prediction, we typically use the mean of the training data in the region to which it belongs</p><p><strong>How do we construct R1 and R2?</strong> The goal is to find regions that minimize the residual sum of squares (RSS)</p><p>Decision trees can get too complex, memorize the training data, and overfit on test data - It is advised to first build a very large tree and then <strong>prune</strong> it back to obtain a subtree - Given a subtree, we can estimate the test error rate using cross-validation - <strong>Cost complexity pruning</strong> i.e., <strong>weakest link pruning</strong> gives us the most efficient way to choose our subset of trees</p><h4 id="decision-trees-advantages-and-disadvantages">Decision Trees Advantages and Disadvantages</h4><p>Advantages: - Trees are easy to explain and are intuitive - Trees can be displayed graphically and are easy to interpret - Trees can handle qualitative predictors without dummy variables</p><p>Disadvantages: - Trees to not usually have the same level of predictive accuracy as other regression and classification methods - Trees can be non-robust, i.e., a small change in the data can cause a large change in the tree</p><h4 id="bagging-and-random-forests">Bagging and Random Forests</h4><p><strong>Bootstrap aggregation</strong>, also known as <strong>bagging</strong>, is a procedure of reducing the variance of a statistical learning method - This is a good way to reduce variance‚Üíby taking many training sets from the population and build separate learning methods using each set - We can then calculate f1,f2,f3... and average them in order to obtain a low-variance statistical model - We can do this by bootstrapping, or taking repeated random samples from the training set</p><p><strong>Ensemble learning</strong> is a machine learning paradigm where multiple learners are trained to solve the same problem</p><p><strong>Random forests</strong> provide an improvement over bagged trees by decorrelating them - Like bagging, decision trees are made on bootstrapped training samples - Random forests are an <strong>ensemble</strong> method for decision trees - The difference is, each time a split in the tree is considered, a random sample of predictors is chosen as split candidates from the full set of predictors. So, at each split of the tree, the algorithm can‚Äôt even consider a majority of the predictors</p><h3 id="support-vector-machines">Support Vector Machines</h3><ul><li>SVM‚Äôs use a classifying tool called <strong>maximum margin classifier</strong></li><li>maximum margin classifiers can‚Äôt be applied to most datasets because they require the classes to be <strong>separated by a linear boundary</strong></li><li>Support vector classifiers are an extension of maximum margin classifiers that can be applied to a broader range of datasets</li></ul><h4 id="hyperplane">hyperplane</h4><p>A hyperplane is a flat subspace in p-dimensional space with p ‚Äì 1 dimensions <img src="BEC28A552A36163DACC7817A18999E6B.png" alt="Screen Shot 2019-02-19 at 02.46.26.png"></p><h4 id="parameters">parameters</h4><ul><li>C = a nonnegative tuning parameter<ul><li>C can be thought of as a budget for the amount the margin can be violated by n observations. If C = 0, there is no budget for violations to the margin</li><li>large C, Overfitting</li><li>small C, underfitting</li></ul></li></ul><h4 id="what-if-the-decision-boundary-for-the-two-classes-is-not-linear">What if the decision boundary for the two classes is not linear?</h4><ul><li>enlarging the feature space with kernels</li><li>A kernel is a function that quantifies the similarity between two observations</li></ul><h3 id="multinomial-logistic-regression">Multinomial Logistic Regression</h3><ul><li>Similar to binary logistic regression, all probabilities in the output will sum to 1</li><li>This is just an extension of the same math from logistic regression</li></ul><h4 id="drawbacks">Drawbacks</h4><ul><li>Models involve many parameters, which makes their interpretation tedious</li><li>Maximum-likelihood estimation can encounter numerical problems if the data is separable and if the predicted probabilities are close to either 0 or 1</li></ul><h3 id="xgboost">XGBoost</h3><h4 id="overview">overview</h4><p>Advantages of XGBoost:</p><ul><li>Scalability: XGBoost system runs 10x faster than existing popular solutions on a single machine</li><li>XGBoost accepts null values: users don‚Äôt have to impute missing values, drop records, etc.</li><li>Less time spent on feature selection and more time spent on hyperparametric tuning</li></ul><p>Typically, one tree is not as strong as an ensemble/combination of other trees. XGBoost uses an ensemble method to gather information from other trees.</p><h4 id="objective-function-and-regularization">Objective Function and Regularization</h4><p>The additive function fixes what we have already learned, and adds one new tree at a time <img src="8227ABDFF7CF20D89F91BFAAE7C2C7F8.png" alt="Screen Shot 2019-02-19 at 04.46.06.png"></p><p>But how do we choose which tree we want at each step? &gt; We pick the one that optimizes our objective function! This is known as an <strong>additive function</strong></p><h4 id="objective-functions">Objective Functions</h4><ul><li>Linear: Continuous numeric prediction</li><li>Binary: logistic,binary classification</li><li>Multi:softmax: multiclassification</li></ul><h4 id="tree-boosting-parameters">Tree Boosting Parameters</h4><p><strong>Reference from <a href="https://www.cnblogs.com/sarahp/p/6900572.html" target="_blank" rel="noopener">https://www.cnblogs.com/sarahp/p/6900572.html</a></strong></p><ul><li><strong>Eta</strong> (i.e., learning rate): Step shrinkage use in update to prevent overfitting. After each boosting step, we can get the weights of new features. Eta shrinks the weights to make the boosting process more conservative</li><li>Gamma: Minimum loss reduction required to make a further partition on a leaf node of a tree. Larger gamma = more conservative model (Ëøô‰∏™ÊåáÂÆö‰∫Ü‰∏Ä‰∏™ÁªìÁÇπË¢´ÂàÜÂâ≤Êó∂ÔºåÊâÄÈúÄË¶ÅÁöÑÊúÄÂ∞èÊçüÂ§±ÂáΩÊï∞ÂáèÂ∞èÁöÑÂ§ßÂ∞è)</li><li>Max depth: Maximum depth of a tree. Increasing this value will make the model more complex (Ê†ëÁöÑÊúÄÂ§ßÊ∑±Â∫¶ÔºåÂÄºË∂äÂ§ßÔºåÊ†ëË∂äÂ§çÊùÇ)</li><li>Minimum child weight: Minimum sum of instance weight needed in a child. If the tree partition step results in a leaf node with the sum of instance weight less than this set parameter, the building process will stop partitioning. Larger weight = more conservative model (ÂÆö‰πâ‰∫Ü‰∏Ä‰∏™Â≠êÈõÜÁöÑÊâÄÊúâËßÇÂØüÂÄºÁöÑÊúÄÂ∞èÊùÉÈáçÂíå)</li><li>Subsample: A subsample ratio of the training instances. Setting to 0.5 would make XGBoost randomly sample half of the training data prior to growing trees and will help prevent overfitting (Ê†∑Êú¨ÁöÑÈááÊ†∑ÁéáÔºåÂ¶ÇÊûúËÆæÁΩÆÊàê0.5ÔºåÈÇ£‰πàXgboost‰ºöÈöèÊú∫ÈÄâÊã©‰∏ÄËà¨ÁöÑÊ†∑Êú¨‰Ωú‰∏∫ËÆ≠ÁªÉÈõÜ)</li><li>Column sample by tree: Subsample ratio of columns when constructing a tree</li><li>Column sample by level: Subsample ratio of columns for each level of the tree</li><li>Column sample by node: Subsample ratio of columns for each node (split)</li><li>Lambda: L2 regularization</li><li>Alpha: L1 regularization</li><li>Scale positive weight: Control the balance of positive and negative weights</li></ul><h3 id="review">REVIEW</h3><h4 id="what-is-the-difference-between-boost-ensemble-bootstrap-and-bagging">What is the difference between boost, ensemble, bootstrap and bagging?</h4><p><strong>Reference from <a href="https://www.quora.com/What-is-the-difference-between-boost-ensemble-bootstrap-and-bagging" target="_blank" rel="noopener">https://www.quora.com/What-is-the-difference-between-boost-ensemble-bootstrap-and-bagging</a></strong></p><ul><li>Boosting is the idea of training iteratively the same ‚Äúweak‚Äù classifier, so that at each iteration, the i-th classifier is supposed to correct the mistakes made by the previous classifier (i-1). It is done by weighting more the misclassified observations.</li><li>The final classifier is calculated by a weighted mean of all the ‚Äúweak‚Äù classifiers, the weights being close to the accuracies calculated for each classifier.</li><li>Ensembling is quite general and encompasses simple methods like Averaging, and more complicated ones like Boosting, Bagging, Stacking, etc.</li><li>Bootstrapping means taking a sample of a population by drawing with replacement. It is one of the main ideas behind Bagging (which stands for Bootstrap AGGregatING).</li><li>Bagging means training the same classifier on different subsets (that may be overlapping) of one dataset. You do so with bootstrap.</li></ul><h4 id="rf-vs-xgboost">RF vs XGBoost</h4><p><strong>Reference from <a href="https://www.cnblogs.com/sarahp/p/6900572.html" target="_blank" rel="noopener">https://www.cnblogs.com/sarahp/p/6900572.html</a></strong></p><ul><li>RF use bagging:<ul><li>ÁßçÈõÜÊàêÂ≠¶‰π†ÁÆóÊ≥ïÔºåÂü∫‰∫ébootstrap sampling Ëá™Âä©ÈááÊ†∑Ê≥ïÔºåÈáçÂ§çÊÄßÊúâÊîæÂõûÁöÑÈöèÊú∫ÈááÁî®ÈÉ®ÂàÜÊ†∑Êú¨ËøõË°åËÆ≠ÁªÉÊúÄÂêéÂÜçÂ∞ÜÁªìÊûú voting ÊàñËÄÖ averaging</li><li>ÂÆÉÊòØÂπ∂Ë°åÂºèÁÆóÊ≥ïÔºåÂõ†‰∏∫‰∏çÂêåÂü∫Â≠¶‰π†Âô®ÊòØÁã¨Á´ã</li><li>ËÆ≠ÁªÉ‰∏Ä‰∏™baggingÈõÜÊàêÂ≠¶‰π†Âô®Êó∂Èó¥Â§çÊùÇÂ∫¶‰∏éÂü∫Â≠¶‰π†Âô®ÂêåÈò∂ÔºànÂÄçÔºån‰∏∫Âü∫Â≠¶‰π†Âô®‰∏™Êï∞Ôºâ„ÄÇ</li><li>baggingÂèØ‰ª•Áî®‰∫é‰∫åÂàÜÁ±ªÔºèÂ§öÂàÜÁ±ªÔºèÂõûÂΩí</li><li>ÊØè‰∏™Âü∫Â≠¶‰π†Âô®ÁöÑÊú™Áî®‰ΩúËÆ≠ÁªÉÊ†∑Êú¨ÂèØÁî®Êù•ÂÅöÂåÖÂ§ñ‰º∞ËÆ°ÔºåËØÑ‰ª∑Ê≥õÂåñÊÄßËÉΩ„ÄÇ</li><li>bagging‰∏ªË¶ÅÂÖ≥Ê≥®Èôç‰Ωé<strong>ÊñπÂ∑Æ</strong></li><li>‰∏§‰∏™Ê≠•È™§ 1. ÊäΩÊ†∑ËÆ≠ÁªÉÔºàÈááÊ†∑Ê†∑Êú¨ÔºåÈááÊ†∑ÁâπÂæÅÔºâ 2 ËûçÂêà</li></ul></li><li>XGBoost use boosting(Gradient Boosting Decision Tree):<ul><li>gbdtÁöÑÂü∫Êú¨ÂéüÁêÜÊòØboost ÈáåÈù¢ÁöÑ boosting treeÔºàÊèêÂçáÊ†ëÔºâÔºåÂπ∂‰ΩøÁî® gradient boost„ÄÇ</li><li>Gradient BoostingÊòØ‰∏ÄÁßçBoostingÁöÑÊñπÊ≥ïÔºåÂÖ∂‰∏é‰º†ÁªüÁöÑBoostingÁöÑÂå∫Âà´ÊòØÔºåÊØè‰∏ÄÊ¨°ÁöÑËÆ°ÁÆóÊòØ‰∏∫‰∫ÜÂáèÂ∞ë‰∏ä‰∏ÄÊ¨°ÁöÑÊÆãÂ∑Æ(residual)ÔºåËÄå‰∏∫‰∫ÜÊ∂àÈô§ÊÆãÂ∑ÆÔºåÂèØ‰ª•Âú®ÊÆãÂ∑ÆÂáèÂ∞ëÁöÑÊ¢ØÂ∫¶(Gradient)ÊñπÂêë‰∏äÂª∫Á´ã‰∏Ä‰∏™Êñ∞ÁöÑÊ®°Âûã„ÄÇÊâÄ‰ª•ËØ¥ÔºåÂú®Gradient Boosting‰∏≠ÔºåÊØè‰∏™Êñ∞ÁöÑÊ®°ÂûãÁöÑÂª∫Á´ãÊòØ‰∏∫‰∫Ü‰ΩøÂæó‰πãÂâçÊ®°ÂûãÁöÑÊÆãÂ∑ÆÂæÄÊ¢ØÂ∫¶ÊñπÂêëÂáèÂ∞ëÔºå‰∏é‰º†ÁªüBoostingÂØπÊ≠£Á°Æ„ÄÅÈîôËØØÊ†∑Êú¨ËøõË°åÂä†ÊùÉÊúâÁùÄÂæàÂ§ßÁöÑÂå∫Âà´„ÄÇËøô‰∏™Ê¢ØÂ∫¶‰ª£Ë°®‰∏ä‰∏ÄËΩÆÂ≠¶‰π†Âô®ÊçüÂ§±ÂáΩÊï∞ÂØπÈ¢ÑÊµãÂÄºÊ±ÇÂØº„ÄÇ</li><li>‰∏éBoosting TreeÁöÑÂå∫Âà´ÔºöBoosting TreeÁöÑÈÄÇÂêà‰∫éÊçüÂ§±ÂáΩÊï∞‰∏∫Âπ≥ÊñπÊçüÂ§±ÊàñËÄÖÊåáÊï∞ÊçüÂ§±„ÄÇËÄåGradient BoostingÈÄÇÂêàÂêÑÁ±ªÊçüÂ§±ÂáΩÊï∞ÔºàÊçüÂ§±ÂáΩÊï∞‰∏∫ÔºöÂπ≥ÊñπÊçüÂ§±ÂàôÁõ∏ÂΩì‰∫éBoosting TreeÊãüÂêàÊÆãÂ∑Æ„ÄÅÊçüÂ§±ÂáΩÊï∞‰∏∫Ôºö‰ΩøÁî®ÊåáÊï∞ÊçüÂ§±ÂàôÂèØ‰ª•Ëøë‰ºº‰∫éAdaboostÔºå‰ΩÜÊ†ëÊòØÂõûÂΩíÊ†ëÔºâ</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Data Mining </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Machine Learning Assignment1(Upitt)</title>
      <link href="/Machine-Learning-Assignment1-upitt/2019/02/17/"/>
      <url>/Machine-Learning-Assignment1-upitt/2019/02/17/</url>
      
        <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Enter password to read." />    <label for="pass">Enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Homework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Homewrok of Upitt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Machine Learning (Andrew Ng)</title>
      <link href="/Machine-Learning-Andraw-Ng/2019/02/15/"/>
      <url>/Machine-Learning-Andraw-Ng/2019/02/15/</url>
      
        <content type="html"><![CDATA[<p><strong>Reference From Coursera Course <a href="https://www.coursera.org/learn/machine-learning" target="_blank" rel="noopener">Machine Learning</a>. I am also really sorry that I did not write down some sources when I cite from the web. I was too young and did not get any academic training when I wrote these notes.</strong></p><p><strong>Let me thank Ng first. This course Changed me. I still remember that afternoon when I was just a sophomore. I discovered the Machine Learning course lectured by Andrew Ng on Coursera and was fascinated by the underlying algorithms. It was amazing to see that a simple yet elegant mathematical model could make predictions on new data after being trained with large amounts of training sets for analysis and fitting. I spent several days on the assignments and developed a classifier to filter spam emails and an Optical Character Recognition program. Never expecting that I could program the machine to gain the cognitive ability, I was so thrilled and resolved to advance my knowledge in this area. About two years later, I took this course again and reviewed some important concepts to prapare the interviews. I wrote down notes and paid for the course this time</strong></p><p><font color="red">This is my course certificate. I really want all of guys who want to dive into the area of machine learning to take this course on Coursera.</font></p><figure><img src="certificate.png" alt="certificate"><figcaption>certificate</figcaption></figure><h2 id="what-is-machine-learning">What is Machine Learning?</h2><p>Two definitions of Machine Learning are offered. + Arthur Samuel described it as: "<em>the field of study that gives computers the ability to learn without being explicitly programmed.</em>" This is an older, informal definition.</p><ul><li><p>Tom Mitchell provides a more modern definition: "A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P, if its performance at tasks in T, as measured by P, improves with experience E."</p><p>Example: playing checkers.</p><ul><li>E = the experience of playing many games of checkers</li><li>T = the task of playing checkers.</li><li>P = the probability that the program will win the next game.</li></ul></li></ul><p>In general, any machine learning problem can be assigned to one of two broad classifications:</p><blockquote><p><strong>Supervised learning</strong> and <strong>Unsupervised learning</strong>.</p></blockquote><h3 id="supervised-learning">Supervised Learning</h3><p>In supervised learning, we are given a data set and already know what our correct output should look like, having the idea that there is a relationship between the input and the output.</p><p>Supervised learning problems are categorized into "<strong>regression</strong>" and "<strong>classification</strong>" problems. In a regression problem, we are trying to predict results within a continuous output, meaning that we are trying to map input variables to some continuous function. In a classification problem, we are instead trying to predict results in a discrete output. In other words, we are trying to map input variables into discrete categories.</p><ul><li>Example 1:<ul><li><p>Given data about the size of houses on the real estate market, try to predict their price. Price as a function of size is a continuous output, so this is a regression problem.</p></li><li><figure><img src="063C817FFFB3B0B3B413A901EB57B1CD.png" alt="Screen Shot 2018-03-02 at 15.22.36.png"><figcaption>Screen Shot 2018-03-02 at 15.22.36.png</figcaption></figure></li><li><p>We could turn this example into a classification problem by instead making our output about whether the house "sells for more or less than the asking price." Here we are classifying the houses based on price into two discrete categories.</p></li></ul></li><li>Example 2:<ul><li><p>Regression - Given a picture of a person, we have to predict their age on the basis of the given picture</p></li><li><p>Classification - Given a patient with a tumor, we have to predict whether the tumor is malignant or benign.</p></li><li><figure><img src="E2B0C7D6576344A88AD23372DD308854.png" alt="Screen Shot 2018-03-02 at 15.22.51.png"><figcaption>Screen Shot 2018-03-02 at 15.22.51.png</figcaption></figure></li></ul></li></ul><h3 id="unsupervised-learning">Unsupervised Learning</h3><p>Unsupervised learning allows us to approach problems with little or no idea what our results should look like. We can derive structure from data where we don't necessarily know the effect of the variables.</p><p>We can derive this structure by clustering the data based on relationships among the variables in the data.</p><p>With unsupervised learning there is no feedback based on the prediction results.</p><figure><img src="3CAA5D79351470DE1A2A5F1D06FD6D6D.png" alt="Screen Shot 2018-03-02 at 15.26.13.png"><figcaption>Screen Shot 2018-03-02 at 15.26.13.png</figcaption></figure><p>Example:</p><p>Clustering: Take a collection of 1,000,000 different genes, and find a way to automatically group these genes into groups that are somehow similar or related by different variables, such as lifespan, location, roles, and so on.</p><h3 id="model-representation">Model Representation</h3><p>To establish notation for future use, we‚Äôll use x(i) to denote the ‚Äúinput‚Äù variables (living area in this example), also called input features, and y(i) to denote the ‚Äúoutput‚Äù or target variable that we are trying to predict (price). A pair (x<sup>(i)</sup>,y<sup>(i)</sup>) is called a training example, and the dataset that we‚Äôll be using to learn‚Äîa list of m training examples (x<sup>(i)</sup>,y<sup>(i)</sup>);i=1,...,m‚Äîis called a training set. Note that the superscript ‚Äú<sup>(i)</sup>‚Äù in the notation is simply an index into the training set, and has nothing to do with exponentiation. We will also use X to denote the space of input values, and Y to denote the space of output values. In this example, X = Y = ‚Ñù.</p><p>To describe the supervised learning problem slightly more formally, our goal is, given a training set, to learn a function h : X ‚Üí Y so that h(x) is a ‚Äúgood‚Äù predictor for the corresponding value of y. For historical reasons, this function h is called a hypothesis. Seen pictorially, the process is therefore like this:</p><figure><img src="9FCAA69BB208841EE1008EB337EFA43F.png" alt="Screen Shot 2018-03-02 at 16.13.42.png"><figcaption>Screen Shot 2018-03-02 at 16.13.42.png</figcaption></figure><p>When the target variable that we‚Äôre trying to predict is continuous, such as in our housing example, we call the learning problem a regression problem. When y can take on only a small number of discrete values (such as if, given the living area, we wanted to predict if a dwelling is a house or an apartment, say), we call it a classification problem.</p><h2 id="linear-regression-with-multiple-variables">Linear Regression with Multiple Variables</h2><h3 id="cost-function">Cost Function</h3><p>We can measure the accuracy of our hypothesis function by using a cost function. This takes an average difference (actually a fancier version of an average) of all the results of the hypothesis with inputs from x's and the actual output y's. <span class="math display">\[J(Œ∏_0,Œ∏_1)=\frac{1}{2m}\sum_{i=1}^m(\hat{y}_i‚àíy_i)^2=\frac{1}{2m}\sum_{i=1}^m(h_Œ∏(x_i)‚àíy_i)^2\]</span></p><p>To break it apart, it is <span class="math inline">\(\frac{1}{2}\bar{x}\)</span> where <span class="math inline">\(\bar{x}\)</span> is the mean of the squares of <span class="math inline">\(h_Œ∏(x_i)‚àíy_i\)</span> , or the difference between the predicted value and the actual value.</p><p>This function is otherwise called the "Squared error function", or "Mean squared error". The mean is halved (<span class="math inline">\(\frac{1}{2}\)</span>) as a convenience for the computation of the gradient descent, as the derivative term of the square function will cancel out the <span class="math inline">\(\frac{1}{2}\)</span> term. The following image summarizes what the cost function does:</p><h4 id="cost-function---intuition-i">Cost Function - Intuition I</h4><p>If we try to think of it in visual terms, our training data set is scattered on the x-y plane. We are trying to make a straight line (defined by <span class="math inline">\(h_Œ∏(x)\)</span>) which passes through these scattered data points.</p><p>Our objective is to get the best possible line. The best possible line will be such so that the average squared vertical distances of the scattered points from the line will be the least. Ideally, the line should pass through all the points of our training data set. In such a case, the value of <span class="math inline">\(J(Œ∏_0,Œ∏_1)\)</span> will be 0. The following example shows the ideal situation where we have a cost function of 0.</p><figure><img src="A19DDA728EC3F0FF86BAC1817BCF3D8E.png" alt="Screen Shot 2018-03-02 at 17.18.45.png"><figcaption>Screen Shot 2018-03-02 at 17.18.45.png</figcaption></figure><p>When <span class="math inline">\(Œ∏_1=1\)</span>, we get a slope of 1 which goes through every single data point in our model. Conversely, when Œ∏1=0.5, we see the vertical distance from our fit to the data points increase.</p><figure><img src="286352EB8728B8B444FF18AC497883FD.png" alt="Screen Shot 2018-03-02 at 17.19.16.png"><figcaption>Screen Shot 2018-03-02 at 17.19.16.png</figcaption></figure><p>This increases our cost function to 0.58. Plotting several other points yields to the following graph:</p><figure><img src="137435EB4C560E4149608420936EC396.png" alt="Screen Shot 2018-03-02 at 17.19.50.png"><figcaption>Screen Shot 2018-03-02 at 17.19.50.png</figcaption></figure><p>Thus as a goal, we should try to minimize the cost function. In this case, <span class="math inline">\(Œ∏_1=1\)</span> is our global minimum.</p><h4 id="cost-function---intuition-ii">Cost Function - Intuition II</h4><p>A contour plot is a graph that contains many contour lines. A contour line of a two variable function has a constant value at all points of the same line. An example of such a graph is the one to the right below.<img src="FF1822723CAD042DA71898E4920AB5AB.png" alt="Screen Shot 2018-03-02 at 17.39.24.png"></p><p>Taking any color and going along the 'circle', one would expect to get the same value of the cost function. For example, the three green points found on the green line above have the same value for <span class="math inline">\(J(Œ∏_0,Œ∏_1)\)</span> and as a result, they are found along the same line. The circled x displays the value of the cost function for the graph on the left when <span class="math inline">\(Œ∏_0 = 800\)</span> and <span class="math inline">\(Œ∏_1= -0.15\)</span>. Taking another h(x) and plotting its contour plot, one gets the following graphs: <img src="76A0D0F9217AABFB6A7D3440262E2C54.png" alt="Screen Shot 2018-03-02 at 17.41.34.png"></p><p>When <span class="math inline">\(Œ∏_0 = 360\)</span> and <span class="math inline">\(Œ∏_1 = 0\)</span>, the value of <span class="math inline">\(J(Œ∏_0,Œ∏_1)\)</span> in the contour plot gets closer to the center thus reducing the cost function error. Now giving our hypothesis function a slightly positive slope results in a better fit of the data.</p><figure><img src="CBDB08F38835A0A76D7C137DAD1DFA64.png" alt="Screen Shot 2018-03-02 at 17.42.31.png"><figcaption>Screen Shot 2018-03-02 at 17.42.31.png</figcaption></figure><p>The graph above minimizes the cost function as much as possible and consequently, the result of <span class="math inline">\(Œ∏_1\)</span> and <span class="math inline">\(Œ∏_0\)</span> tend to be around 0.12 and 250 respectively. Plotting those values on our graph to the right seems to put our point in the center of the inner most 'circle'.</p><h3 id="gradient-descent">Gradient Descent</h3><p>So we have our hypothesis function and we have a way of measuring how well it fits into the data. Now we need to estimate the parameters in the hypothesis function. That's where gradient descent comes in.</p><p>Imagine that we graph our hypothesis function based on its fields <span class="math inline">\(Œ∏_0\)</span> and <span class="math inline">\(Œ∏_1\)</span> (actually we are graphing the cost function as a function of the parameter estimates). We are not graphing x and y itself, but the parameter range of our hypothesis function and the cost resulting from selecting a particular set of parameters.</p><p>We put <span class="math inline">\(Œ∏_0\)</span> on the x axis and <span class="math inline">\(Œ∏_1\)</span> on the y axis, with the cost function on the vertical z axis. The points on our graph will be the result of the cost function using our hypothesis with those specific theta parameters. The graph below depicts such a setup.</p><figure><img src="81462B5B2B256050E7993F7FFE4F8F51.png" alt="Screen Shot 2018-03-02 at 17.46.49.png"><figcaption>Screen Shot 2018-03-02 at 17.46.49.png</figcaption></figure><p>We will know that we have succeeded when our cost function is at the very bottom of the pits in our graph, i.e. when its value is the minimum. The red arrows show the minimum points in the graph.</p><p>The way we do this is by taking the derivative (the tangential line to a function) of our cost function. The slope of the tangent is the derivative at that point and it will give us a direction to move towards. We make steps down the cost function in the direction with the steepest descent. The size of each step is determined by the parameter Œ±, which is called the learning rate.</p><p>For example, the distance between each 'star' in the graph above represents a step determined by our parameter Œ±. A smaller Œ± would result in a smaller step and a larger Œ± results in a larger step. The direction in which the step is taken is determined by the partial derivative of <span class="math inline">\(J(Œ∏_0,Œ∏_1)\)</span>. Depending on where one starts on the graph, one could end up at different points. The image above shows us two different starting points that end up in two different places.</p><p>The gradient descent algorithm is:</p><p>repeat until convergence: <span class="math display">\[Œ∏_j:=Œ∏_j‚àíŒ±\frac{‚àÇ}{‚àÇŒ∏j}J(Œ∏_0,Œ∏_1)\]</span></p><p>where j=0,1 represents the feature index number. At each iteration j, one should simultaneously update the parameters <span class="math inline">\(Œ∏_1\)</span>,<span class="math inline">\(Œ∏_2\)</span>,...,<span class="math inline">\(Œ∏_n\)</span>. Updating a specific parameter prior to calculating another one on the <span class="math inline">\(j^{(th)}\)</span> iteration would yield to a wrong implementation.</p><figure><img src="AA97E2C240AD85D258CC2F21C4797C34.png" alt="Screen Shot 2018-03-03 at 00.47.36.png"><figcaption>Screen Shot 2018-03-03 at 00.47.36.png</figcaption></figure><h4 id="gradient-descent-intuition">Gradient Descent Intuition</h4><p>In this video we explored the scenario where we used one parameter <span class="math inline">\(Œ∏_s1\)</span> and plotted its cost function to implement a gradient descent. Our sformula for a single parameter was:</p><p>Repeat until convergence: <span class="math display">\[Œ∏_1 := Œ∏_1 ‚àí Œ±\frac{d}{dŒ∏_1}J(Œ∏_1)\]</span></p><p>Regardless of the slope's sign for J(Œ∏_1), <span class="math inline">\(Œ∏_1\)</span> eventually converges to its minimum value. The following graph shows that when the slope is negative, the value of <span class="math inline">\(Œ∏_1\)</span> increases and when it is positive, the value of Œ∏1 decreases.</p><figure><img src="7BC4362E24C17B9EBE3DE8CCACAEAF8D.png" alt="Screen Shot 2018-03-03 at 00.54.26.png"><figcaption>Screen Shot 2018-03-03 at 00.54.26.png</figcaption></figure><p>On a side note, we should adjust our parameter Œ± to ensure that the gradient descent algorithm converges in a reasonable time. Failure to converge or too much time to obtain the minimum value imply that our step size is wrong.</p><figure><img src="A5C5678803CD4D84FE7090C7AFB7EECB.png" alt="Screen Shot 2018-03-03 at 00.55.16.png"><figcaption>Screen Shot 2018-03-03 at 00.55.16.png</figcaption></figure><p>How does gradient descent converge with a fixed step size Œ±?</p><p>The intuition behind the convergence is that <span class="math inline">\(\frac{d}{dŒ∏_1}J(Œ∏_1)\)</span> approaches 0 as we approach the bottom of our convex function. At the minimum, the derivative will always be 0 and thus we get:</p><p><span class="math display">\[Œ∏_1 := Œ∏_1 ‚àí Œ±‚àó0\]</span></p><figure><img src="58AEE7338D406DE791E8988219FDF2B1.png" alt="Screen Shot 2018-03-03 at 01.01.10.png"><figcaption>Screen Shot 2018-03-03 at 01.01.10.png</figcaption></figure><h4 id="gradient-descent-for-linear-regression">Gradient Descent For Linear Regression</h4><p>When specifically applied to the case of linear regression, a new form of the gradient descent equation can be derived. We can substitute our actual cost function and our actual hypothesis function and modify the equation to :</p><figure><img src="CE6A744E834E867DE89D0EA6548C3E66.jpg" alt="IMG_0190.jpg"><figcaption>IMG_0190.jpg</figcaption></figure><p>repeat until convergence:{ <span class="math display">\[\begin{align*}&amp; Œ∏_0:=Œ∏_0‚àíŒ±\frac{1}{m}\sum_{i=1}^m(h_Œ∏(x_i)‚àíy_i) \\&amp; Œ∏_1:=Œ∏_1‚àíŒ±\frac{1}{m}\sum_{i=1}^m((h_Œ∏(x_i)‚àíy_i)x_i)\end{align*} \]</span> }</p><p>where m is the size of the training set, <span class="math inline">\(Œ∏_0\)</span> a constant that will be changing simultaneously with Œ∏1 and xi,yiare values of the given training set (data).</p><p>Note that we have separated out the two cases for <span class="math inline">\(Œ∏_j\)</span> into separate equations for <span class="math inline">\(Œ∏_0\)</span> and <span class="math inline">\(Œ∏_1\)</span>; and that for <span class="math inline">\(Œ∏_1\)</span> we are multiplying <span class="math inline">\(x_i\)</span> at the end due to the derivative. The following is a derivation of <span class="math inline">\(\frac{‚àÇ}{‚àÇŒ∏_j}J(Œ∏)\)</span> for a single example :</p><figure><img src="0AED35D9138656BDC56EE48C6C54D3EB.png" alt="Screen Shot 2018-03-03 at 09.20.14.png"><figcaption>Screen Shot 2018-03-03 at 09.20.14.png</figcaption></figure><p>The point of all this is that if we start with a guess for our hypothesis and then repeatedly apply these gradient descent equations, our hypothesis will become more and more accurate.</p><p>So, this is simply gradient descent on the original cost function J. This method looks at every example in the entire training set on every step, and is called batch gradient descent. <strong>Note that, while gradient descent can be susceptible to local minima in general, the optimization problem we have posed here for linear regression has only one global, and no other local, optima</strong>; thus gradient descent always converges (assuming the learning rate Œ± is not too large) to the global minimum. Indeed, J is a convex quadratic function. Here is an example of gradient descent as it is run to minimize a quadratic function.</p><figure><img src="2F314BD45E00D357E83159E93263B7A7.png" alt="Screen Shot 2018-03-03 at 09.35.27.png"><figcaption>Screen Shot 2018-03-03 at 09.35.27.png</figcaption></figure><p>The ellipses shown above are the contours of a quadratic function. Also shown is the trajectory taken by gradient descent, which was initialized at (48,30). The x‚Äôs in the figure (joined by straight lines) mark the successive values of Œ∏ that gradient descent went through as it converged to its minimum.</p><h3 id="matrices-and-vectors">Matrices and Vectors</h3><p>Matrices are 2-dimensional arrays: <span class="math display">\[\begin{pmatrix}a &amp; b &amp; c \\d &amp; e &amp; f \\g &amp; h &amp; i \\j &amp; k &amp; l \\\end{pmatrix}\]</span></p><p>The above matrix has four rows and three columns, so it is a 4 x 3 matrix.</p><p>A vector is a matrix with one column and many rows: <span class="math display">\[\begin{bmatrix}a \\b \\c \\d \\e \\\end{bmatrix}\]</span></p><p>So vectors are a subset of matrices. The above vector is a 4 x 1 matrix.</p><p>Notation and terms:</p><ul><li><span class="math inline">\(A_{ij}\)</span> refers to the element in the ith row and jth column of matrix A.</li><li>A vector with 'n' rows is referred to as an 'n'-dimensional vector.</li><li><span class="math inline">\(v_i\)</span> refers to the element in the ith row of the vector. In general, all our vectors and matrices will be 1-indexed. Note that for some programming languages, the arrays are 0-indexed.</li><li>Matrices are usually denoted by uppercase names while vectors are lowercase.</li><li>"Scalar" means that an object is a single value, not a vector or matrix.</li><li>‚Ñù refers to the set of scalar real numbers.</li><li>‚Ñùùïü refers to the set of n-dimensional vectors of real numbers.</li></ul><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% The ; denotes we are going back to a new row.</span></span><br><span class="line">A = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>; <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>; <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>; <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">% Initialize a vector </span></span><br><span class="line">v = [<span class="number">1</span>;<span class="number">2</span>;<span class="number">3</span>] </span><br><span class="line"></span><br><span class="line"><span class="comment">% Get the dimension of the matrix A where m = rows and n = columns</span></span><br><span class="line">[m,n] = <span class="built_in">size</span>(A)</span><br><span class="line"></span><br><span class="line"><span class="comment">% You could also store it this way</span></span><br><span class="line">dim_A = <span class="built_in">size</span>(A)</span><br><span class="line"></span><br><span class="line"><span class="comment">% Get the dimension of the vector v </span></span><br><span class="line">dim_v = <span class="built_in">size</span>(v)</span><br><span class="line"></span><br><span class="line"><span class="comment">% Now let's index into the 2nd row 3rd column of matrix A</span></span><br><span class="line">A_23 = A(<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h4 id="addition-and-scalar-multiplication">Addition and Scalar Multiplication</h4><p>Addition and subtraction are element-wise, so you simply add or subtract each corresponding element: <span class="math display">\[\begin{equation}\begin{bmatrix}a &amp; b  \\c &amp; d  \\\end{bmatrix} + \begin{bmatrix}w &amp; x  \\y &amp; z  \\\end{bmatrix} = \begin{bmatrix}a+w &amp; b+x  \\c+y &amp; d+z  \\\end{bmatrix} \end{equation}\]</span></p><p>Subtracting Matrices:</p><p><span class="math display">\[\begin{equation}\begin{bmatrix}a &amp; b  \\c &amp; d  \\\end{bmatrix} - \begin{bmatrix}w &amp; x  \\y &amp; z  \\\end{bmatrix} = \begin{bmatrix}a-w &amp; b-x  \\c-y &amp; d-z  \\\end{bmatrix} \end{equation}\]</span></p><p>To add or subtract two matrices, their dimensions must be the same.</p><p>In scalar multiplication, we simply multiply every element by the scalar value: <span class="math display">\[\begin{equation}\begin{bmatrix}a &amp; b  \\c &amp; d  \\\end{bmatrix} * x = \begin{bmatrix}a*x &amp; b*x  \\c*x &amp; d*x  \\\end{bmatrix} \end{equation}\]</span></p><p>In scalar division, we simply divide every element by the scalar value: <span class="math display">\[\begin{equation}\begin{bmatrix}a &amp; b  \\c &amp; d  \\\end{bmatrix} / x = \begin{bmatrix}a/x &amp; b/x  \\c/x &amp; d/x  \\\end{bmatrix} \end{equation}\]</span></p><p>Experiment below with the Octave/Matlab commands for matrix addition and scalar multiplication. Feel free to try out different commands. Try to write out your answers for each command before running the cell below.</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% Initialize matrix A and B </span></span><br><span class="line">A = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>; <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line">B = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">% Initialize constant s </span></span><br><span class="line">s = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% See how element-wise addition works</span></span><br><span class="line">add_AB = A + B </span><br><span class="line"></span><br><span class="line"><span class="comment">% See how element-wise subtraction works</span></span><br><span class="line">sub_AB = A - B</span><br><span class="line"></span><br><span class="line"><span class="comment">% See how scalar multiplication works</span></span><br><span class="line">mult_As = A * s</span><br><span class="line"></span><br><span class="line"><span class="comment">% Divide A by s</span></span><br><span class="line">div_As = A / s</span><br><span class="line"></span><br><span class="line"><span class="comment">% What happens if we have a Matrix + scalar?</span></span><br><span class="line">add_As = A + s</span><br></pre></td></tr></table></figure><h4 id="matrix-vector-multiplication">Matrix-Vector Multiplication</h4><p><span class="math display">\[\begin{equation}\begin{bmatrix}a &amp; b\\c &amp; d\\e &amp; f\\\end{bmatrix} *\begin{bmatrix}x \\y \\\end{bmatrix} = \begin{bmatrix}a*x &amp; b*y\\c*x &amp; d*y\\e*x &amp; f*y\\\end{bmatrix}\end{equation}\]</span></p><p>Below is an example of a matrix-vector multiplication. Make sure you understand how the multiplication works. Feel free to try different matrix-vector multiplications.</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% Initialize matrix A </span></span><br><span class="line">A = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>; <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>] </span><br><span class="line"></span><br><span class="line"><span class="comment">% Initialize vector v </span></span><br><span class="line">v = [<span class="number">1</span>; <span class="number">1</span>; <span class="number">1</span>] </span><br><span class="line"></span><br><span class="line"><span class="comment">% Multiply A * v</span></span><br><span class="line">Av = A * v</span><br></pre></td></tr></table></figure><h4 id="matrix-matrix-multiplication">Matrix-Matrix Multiplication</h4><p>We multiply two matrices by breaking it into several vector multiplications and concatenating the result. <span class="math display">\[\begin{equation}\begin{bmatrix}a &amp; b\\c &amp; d\\e &amp; f\\\end{bmatrix} *\begin{bmatrix}w &amp; x \\y &amp; z \\\end{bmatrix} = \begin{bmatrix}a‚àów+b‚àóy &amp; a‚àóx+b‚àóz \\c‚àów+d‚àóy &amp; c‚àóx+d‚àóz \\e‚àów+f‚àóy &amp; e‚àóx+f‚àóz \\\end{bmatrix}\end{equation}\]</span></p><p>An m x n matrix multiplied by an n x o matrix results in an m x o matrix. In the above example, a 3 x 2 matrix times a 2 x 2 matrix resulted in a 3 x 2 matrix.</p><p>To multiply two matrices, the number of columns of the first matrix must equal the number of rows of the second matrix.</p><p>For example: <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% Initialize a 3 by 2 matrix </span></span><br><span class="line">A = [<span class="number">1</span>, <span class="number">2</span>; <span class="number">3</span>, <span class="number">4</span>;<span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">% Initialize a 2 by 1 matrix </span></span><br><span class="line">B = [<span class="number">1</span>; <span class="number">2</span>] </span><br><span class="line"></span><br><span class="line"><span class="comment">% We expect a resulting matrix of (3 by 2)*(2 by 1) = (3 by 1) </span></span><br><span class="line">mult_AB = A*B</span><br><span class="line"></span><br><span class="line"><span class="comment">% Make sure you understand why we got that result</span></span><br></pre></td></tr></table></figure></p><h4 id="matrix-multiplication-properties">Matrix Multiplication Properties</h4><ul><li>Matrices are not commutative: A‚àóB‚â†B‚àóA</li><li>Matrices are associative: (A‚àóB)‚àóC=A‚àó(B‚àóC)</li></ul><p>The identity matrix, when multiplied by any matrix of the same dimensions, results in the original matrix. It's just like multiplying numbers by 1. The identity matrix simply has 1's on the diagonal (upper left to lower right diagonal) and 0's elsewhere. <span class="math display">\[\begin{bmatrix}1 &amp; 0 &amp; 0 \\0 &amp; 1 &amp; 0 \\0 &amp; 0 &amp; 1 \\\end{bmatrix}\]</span></p><p>When multiplying the identity matrix after some matrix (A‚àóI), the square identity matrix's dimension should match the other matrix's columns. When multiplying the identity matrix before some other matrix (I‚àóA), the square identity matrix's dimension should match the other matrix's rows.</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% Initialize random matrices A and B </span></span><br><span class="line">A = [<span class="number">1</span>,<span class="number">2</span>;<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">B = [<span class="number">1</span>,<span class="number">1</span>;<span class="number">0</span>,<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">% Initialize a 2 by 2 identity matrix</span></span><br><span class="line">I = <span class="built_in">eye</span>(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">% The above notation is the same as I = [1,0;0,1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% What happens when we multiply I*A ? </span></span><br><span class="line">IA = I*A </span><br><span class="line"></span><br><span class="line"><span class="comment">% How about A*I ? </span></span><br><span class="line">AI = A*I </span><br><span class="line"></span><br><span class="line"><span class="comment">% Compute A*B </span></span><br><span class="line">AB = A*B </span><br><span class="line"></span><br><span class="line"><span class="comment">% Is it equal to B*A? </span></span><br><span class="line">BA = B*A </span><br><span class="line"></span><br><span class="line"><span class="comment">% Note that IA = AI but AB != BA</span></span><br></pre></td></tr></table></figure><h4 id="inverse-and-transpose">Inverse and Transpose</h4><p><span class="math display">\[\begin{equation}A = \begin{bmatrix}a &amp; b\\c &amp; d\\e &amp; f\\\end{bmatrix}\end{equation}\]</span></p><p>In other words:</p><p><span class="math display">\[A_{ij}=A^T_{ji}\]</span></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% Initialize matrix A </span></span><br><span class="line">A = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>;<span class="number">0</span>,<span class="number">5</span>,<span class="number">6</span>;<span class="number">7</span>,<span class="number">0</span>,<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">% Transpose A </span></span><br><span class="line">A_trans = A' </span><br><span class="line"></span><br><span class="line"><span class="comment">% Take the inverse of A </span></span><br><span class="line">A_inv = inv(A)</span><br><span class="line"></span><br><span class="line"><span class="comment">% What is A^(-1)*A? </span></span><br><span class="line">A_invA = inv(A)*A</span><br></pre></td></tr></table></figure><h3 id="multivariate-linear-analytically">multivariate Linear Analytically</h3><h4 id="multiple-features">Multiple Features</h4><p>Linear regression with multiple variables is also known as "multivariate linear regression".</p><p>We now introduce notation for equations where we can have any number of input variables.</p><ul><li><span class="math inline">\(x^{(i)}_j\)</span> = value of feature j in the <span class="math inline">\(i^{th}\)</span> training example</li><li><span class="math inline">\(x^{(i)}\)</span> =the input (features) of the <span class="math inline">\(i^{th}\)</span> training example</li><li>m = the number of training examples</li><li>n = the number of features</li></ul><p>The multivariable form of the hypothesis function accommodating these multiple features is as follows: <span class="math display">\[h_Œ∏(x)=Œ∏_0+Œ∏_1x1+Œ∏_2x_2+Œ∏_3x_3+\cdots+Œ∏_nx_n\]</span></p><p>In order to develop intuition about this function, we can think about Œ∏0 as the basic price of a house, Œ∏1 as the price per square meter, Œ∏2 as the price per floor, etc. x1 will be the number of square meters in the house, x2 the number of floors, etc.</p><p>Using the definition of matrix multiplication, our multivariable hypothesis function can be concisely represented as: <span class="math display">\[\begin{equation}h_Œ∏(x) = \left[ \begin{array}{ccc} Œ∏_0 &amp; Œ∏_1 &amp; \cdots &amp; Œ∏_n\end{array} \right] \left[ \begin{array}{ccc} Œ∏_0 \\ Œ∏_1 \\ \vdots \\ Œ∏_n\end{array} \right] = Œ∏^Tx\end{equation} \]</span> This is a vectorization of our hypothesis function for one training example; see the lessons on vectorization to learn more.</p><p>Remark: Note that for convenience reasons in this course we assume <span class="math inline">\(x^{(i)}_0=1\)</span> for (i‚àà1,‚Ä¶,m). This allows us to do matrix operations with theta and x. Hence making the two vectors 'Œ∏' and <span class="math inline">\(x^{(i)}\)</span> match each other element-wise (that is, have the same number of elements: n+1).]</p><h3 id="gradient-descent-for-multiple-variables">Gradient Descent For Multiple Variables</h3><p>The gradient descent equation itself is generally the same form; we just have to repeat it for our 'n' features:</p><p>repeat until convergence:{ <span class="math display">\[\begin{align*}&amp; Œ∏_0:=Œ∏_0‚àíŒ±\frac{1}{m}\sum_{i=1}^m(h_Œ∏(x^{(i)})‚àíy^{(i)})\cdot{x^{(i)}_0}\\&amp; Œ∏_1:=Œ∏_1‚àíŒ±\frac{1}{m}\sum_{i=1}^m(h_Œ∏(x^{(i)})‚àíy^{(i)})\cdot{x^{(i)}_1}\\&amp; Œ∏_2:=Œ∏_2‚àíŒ±\frac{1}{m}\sum_{i=1}^m(h_Œ∏(x^{(i)})‚àíy^{(i)})\cdot{x^{(i)}_2}\\&amp; \cdots\end{align*}\]</span> }</p><p>In other words:</p><p>repeat until convergence: {</p><p>$$ Œ∏_j:=Œ∏_0‚àíŒ±_{i=1}<sup>m(h_Œ∏(x</sup>{(i)})‚àíy^{(i)})  for¬†j := 0n</p><p>$$ }</p><p>The following image compares gradient descent with one variable to gradient descent with multiple variables:</p><figure><img src="967C382ACA6C581216B78D3670F812B6.png" alt="Screen Shot 2018-03-04 at 18.10.50.png"><figcaption>Screen Shot 2018-03-04 at 18.10.50.png</figcaption></figure><h4 id="gradient-descent-in-practice-i---feature-scaling">Gradient Descent in Practice I - Feature Scaling</h4><p>We can <strong>speed up</strong> gradient descent by having each of our input values in roughly the same range. This is because Œ∏ will descend quickly on small ranges and slowly on large ranges, and so will oscillate inefficiently down to the optimum when the variables are very uneven.</p><p>The way to prevent this is to modify the ranges of our input variables so that they are all roughly the same. Ideally:</p><p><span class="math display">\[‚àí1 ‚â§ x_{(i)} ‚â§ 1\]</span></p><p>or</p><p><span class="math display">\[‚àí0.5 ‚â§ x_{(i)} ‚â§ 0.5\]</span></p><p>These aren't exact requirements; we are only trying to speed things up. The goal is to get all input variables into roughly one of these ranges, give or take a few.</p><p>Two techniques to help with this are feature scaling and mean normalization. Feature scaling involves dividing the input values by the range (i.e. the maximum value minus the minimum value) of the input variable, resulting in a new range of just 1. Mean normalization involves subtracting the average value for an input variable from the values for that input variable resulting in a new average value for the input variable of just zero. To implement both of these techniques, adjust your input values as shown in this formula:</p><p><span class="math display">\[x_i:=\frac{x_i‚àíŒº_i}{si}\]</span> Where Œºi is the average of all the values for feature (i) and si is the range of values (max - min), or si is the standard deviation.</p><p>For example, if xi represents housing prices with a range of 100 to 2000 and a mean value of 1000, then, <span class="math inline">\(x_i:=\frac{price‚àí1000}{1900}\)</span>.</p><h4 id="gradient-descent-in-practice-ii---learning-rate">Gradient Descent in Practice II - Learning Rate</h4><p><strong>Debugging gradient descent.</strong> Make a plot with number of iterations on the x-axis. Now plot the cost function, <span class="math inline">\(J_{(Œ∏)}\)</span> over the number of iterations of gradient descent. If <span class="math inline">\(J_{(Œ∏)}\)</span> ever increases, then you probably need to decrease Œ±.</p><p><strong>Automatic convergence test.</strong> Declare convergence if <span class="math inline">\(J_{(Œ∏)}\)</span> decreases by less than E in one iteration, where E is some small value such as 10‚àí3. However in practice it's difficult to choose this threshold value.</p><figure><img src="4EE8460134CEE8A6DB707B15130E319D.png" alt="Screen Shot 2018-03-04 at 18.28.02.png"><figcaption>Screen Shot 2018-03-04 at 18.28.02.png</figcaption></figure><p>It has been proven that if learning rate Œ± is sufficiently small, then <span class="math inline">\(J_{(Œ∏)}\)</span> will decrease on every iteration.</p><figure><img src="5535482800A11123D2C86C38B1B51A95.png" alt="Screen Shot 2018-03-04 at 18.28.12.png"><figcaption>Screen Shot 2018-03-04 at 18.28.12.png</figcaption></figure><p>To summarize:</p><ul><li>If Œ± is too small: slow convergence.</li><li>If Œ± is too large: may not decrease on every iteration and thus may not converge.</li></ul><h3 id="features-and-polynomial-regression">Features and Polynomial Regression</h3><p>We can improve our features and the form of our hypothesis function in a couple different ways.</p><p>We can combine multiple features into one. For example, we can combine <span class="math inline">\(x_1\)</span> and <span class="math inline">\(x_2\)</span> into a new feature x3 by taking <span class="math inline">\(x_1‚ãÖx_2\)</span>.</p><p>Polynomial Regression</p><p>Our hypothesis function need not be linear (a straight line) if that does not fit the data well.</p><p>We can change the behavior or curve of our hypothesis function by making it a quadratic, cubic or square root function (or any other form).</p><p>For example, if our hypothesis function is <span class="math inline">\(h_Œ∏(x)=Œ∏_0+Œ∏_1x_1\)</span> then we can create additional features based on x1, to get the quadratic function <span class="math inline">\(h_Œ∏(x)=Œ∏_0+Œ∏_1x_1+Œ∏_2x^2_1\)</span> or the cubic function <span class="math inline">\(hŒ∏(x)=Œ∏_0+Œ∏_1x_1+Œ∏_2x^2_1+Œ∏_3x^3_1\)</span> In the cubic version, we have created new features <span class="math inline">\(x_2\)</span> and <span class="math inline">\(x_3\)</span> where <span class="math inline">\(x_2=x^2_1\)</span> and <span class="math inline">\(x_3=x^3_1\)</span>.</p><p>To make it a square root function, we could do: <span class="math inline">\(h_Œ∏(x)=Œ∏_0+Œ∏_1x_1+Œ∏_2\sqrt{x_1}\)</span> One important thing to keep in mind is, if you choose your features this way then feature scaling becomes very important.</p><p>eg. if <span class="math inline">\(x_1\)</span> has range 1 - 1000 then range of <span class="math inline">\(x^2_1\)</span> becomes 1 - 1000000 and that of <span class="math inline">\(x^3_1\)</span> becomes 1 - 1000000000</p><h3 id="normal-equation">Normal Equation</h3><p>Gradient descent gives one way of minimizing J. Let‚Äôs discuss a second way of doing so, this time performing the minimization explicitly and without resorting to an iterative algorithm. In the "Normal Equation" method, we will minimize J by explicitly taking its derivatives with respect to the Œ∏j ‚Äôs, and setting them to zero. This allows us to find the optimum theta without iteration. The normal equation formula is given below:</p><p><span class="math display">\[Œ∏=(X^TX)^{‚àí1}X^Ty\]</span></p><figure><img src="F151CAAF5D1B34778F47215044582101.png" alt="Screen Shot 2018-03-04 at 18.43.29.png"><figcaption>Screen Shot 2018-03-04 at 18.43.29.png</figcaption></figure><p>There is <strong>no need</strong> to do feature scaling with the normal equation.</p><p>The following is a comparison of gradient descent and the normal equation: |Gradient Descent|Normal Equation| |:---|:---| |Need to choose alpha| No need to choose alpha| |Needs many iterations| No need to iterate| |<span class="math inline">\(O(kn^2)\)</span>|<span class="math inline">\(O(n^3)\)</span> | need to calculate inverse of <span class="math inline">\(X^TX\)</span>| |Works well when n is large|Slow if n is very large|</p><p>With the normal equation, computing the inversion has complexity <span class="math inline">\(O(n^3)\)</span>. So if we have a very large number of features, the normal equation will be slow. In practice, when n exceeds 10,000 it might be a good time to go from a normal solution to an iterative process.</p><h4 id="normal-equation-noninvertibility">Normal Equation Noninvertibility</h4><p>When implementing the normal equation in octave we want to use the 'pinv' function rather than 'inv.' The 'pinv' function will give you a value of Œ∏ even if <span class="math inline">\(X^TX\)</span> is not invertible.</p><p>If <span class="math inline">\(X^TX\)</span> is noninvertible, the common causes might be having : - Redundant features, where two features are very closely related (i.e. they are linearly dependent) - Too many features (e.g. m ‚â§ n). In this case, delete some features or use "regularization" (to be explained in a later lesson).</p><p>Solutions to the above problems include deleting a feature that is linearly dependent with another or deleting one or more features when there are too many features.</p><h2 id="logistic-regression">Logistic Regression</h2><h3 id="classification">Classification</h3><p>To attempt classification, one method is to use linear regression and map all predictions greater than 0.5 as a 1 and all less than 0.5 as a 0. However, this method doesn't work well because classification is not actually a linear function.</p><p>The classification problem is just like the regression problem, except that the values we now want to predict take on only a small number of discrete values. For now, we will focus on the binary classification problem in which y can take on only two values, 0 and 1. (Most of what we say here will also generalize to the multiple-class case.) For instance, if we are trying to build a spam classifier for email, then <span class="math inline">\(x^{(i)}\)</span> may be some features of a piece of email, and y may be 1 if it is a piece of spam mail, and 0 otherwise. Hence, y‚àà{0,1}. 0 is also called the negative class, and 1 the positive class, and they are sometimes also denoted by the symbols ‚Äú-‚Äù and ‚Äú+.‚Äù Given <span class="math inline">\(x^{(i)}\)</span>, the corresponding <span class="math inline">\(y^{(i)}\)</span> is also called the label for the training example.</p><h3 id="hypothesis-representation">Hypothesis Representation</h3><p>We could approach the classification problem ignoring the fact that y is discrete-valued, and use our old linear regression algorithm to try to predict y given x. However, it is easy to construct examples where this method performs very poorly. Intuitively, it also doesn‚Äôt make sense for hŒ∏(x) to take values larger than 1 or smaller than 0 when we know that y ‚àà {0, 1}. To fix this, let‚Äôs change the form for our hypotheses <span class="math inline">\(h_Œ∏(x)\)</span> to satisfy <span class="math inline">\(0‚â§h_Œ∏(x)‚â§1\)</span>. This is accomplished by plugging <span class="math inline">\(Œ∏^Tx\)</span> into the Logistic Function.</p><p>Our new form uses the "Sigmoid Function," also called the "Logistic Function": <span class="math display">\[\begin{align*}&amp; h_Œ∏(x)=g(Œ∏^Tx) \\&amp; z=Œ∏^Tx \\&amp; g(z)=\frac{1}{1+e^{‚àíz}} \\\end{align*}\]</span></p><p>The following image shows us what the sigmoid function looks like:</p><figure><img src="2FDA75AB6E8B1CBDC483FA3E6EF1A733.png" alt="Screen Shot 2018-03-04 at 21.58.35.png"><figcaption>Screen Shot 2018-03-04 at 21.58.35.png</figcaption></figure><p>The function g(z), shown here, maps any real number to the (0, 1) interval, making it useful for transforming an arbitrary-valued function into a function better suited for classification.</p><p>hŒ∏(x) will give us the probability that our output is 1. For example, <span class="math inline">\(h_Œ∏(x)=0.7\)</span> gives us a probability of 70% that our output is 1. Our probability that our prediction is 0 is just the complement of our probability that it is 1 (e.g. if probability that it is 1 is 70%, then the probability that it is 0 is 30%). <span class="math display">\[\begin{align*}&amp; h_Œ∏(x)=P(y=1|x;Œ∏)=1‚àíP(y=0|x;Œ∏)\\&amp; P(y=0|x;Œ∏)+P(y=1|x;Œ∏)=1\end{align*}\]</span></p><h3 id="decision-boundary">Decision Boundary</h3><p>In order to get our discrete 0 or 1 classification, we can translate the output of the hypothesis function as follows: <span class="math display">\[\begin{align*}&amp; hŒ∏(x)‚â•0.5 \rightarrow y=1 \\&amp; hŒ∏(x)&lt;0.5 \rightarrow y=0\end{align*}\]</span></p><p>The way our logistic function g behaves is that when its input is greater than or equal to zero, its output is greater than or equal to 0.5:</p><p><span class="math display">\[\begin{align*}&amp; g(z) \ge 0.5 \\&amp; when \ z \ge 0 \\\end{align*}\]</span> Remember. <span class="math display">\[\begin{align*}&amp; z=0,e^0=1 \Rightarrow g(z) = \frac{1}{2} \\&amp; z \rightarrow \infty,e^{‚àí\infty}‚Üí0 \Rightarrow g(z)=1 \\&amp; z \rightarrow ‚àí\infty,e^{\infty} \rightarrow \infty \Rightarrow g(z)=0 \\\end{align*}\]</span></p><p>Again, the input to the sigmoid function g(z) (e.g. Œ∏TX) <strong>doesn't need to be linear</strong>, and could be a function that describes a circle (e.g. <span class="math inline">\(z=Œ∏_0+Œ∏_1x_2^1+Œ∏_2x_2^2\)</span>) or any shape to fit our data.</p><h3 id="cost-function-1">Cost Function</h3><p>We cannot use the same cost function that we use for linear regression because the Logistic Function will cause the output to be wavy, causing many local optima. In other words, it will not be a convex function.</p><p>Instead, our cost function for logistic regression looks like: <span class="math display">\[\begin{align*}&amp; J(\theta) = \frac{1}{m}\sum_{i=1}^{m}Cost(h_\theta(x^{(i)}),y^{(i)}) \\&amp; Cost(hŒ∏(x),y)=‚àílog(h_Œ∏(x)) &amp; \qquad if\ y = 1 \\&amp; Cost(hŒ∏(x),y)=‚àílog(1‚àíh_Œ∏(x)) &amp; \qquad if\ y = 0 \\\end{align*}\]</span></p><p>When y = 1, we get the following plot for <span class="math inline">\(J(Œ∏)\)</span> vs <span class="math inline">\(h_Œ∏(x)\)</span>:</p><figure><img src="646B1BAA40FE5FDF8DCE1C19C7FAD0D9.png" alt="Screen Shot 2018-03-05 at 16.30.57.png"><figcaption>Screen Shot 2018-03-05 at 16.30.57.png</figcaption></figure><p>Similarly, when y = 0, we get the following plot for <span class="math inline">\(J(Œ∏)\)</span> vs <span class="math inline">\(h_Œ∏(x)\)</span>:</p><figure><img src="FB72818E064A195140A5412097BB5B83.png" alt="Screen Shot 2018-03-05 at 16.31.25.png"><figcaption>Screen Shot 2018-03-05 at 16.31.25.png</figcaption></figure><p>If our correct answer 'y' is 0, then the cost function will be 0 if our hypothesis function also outputs 0. If our hypothesis approaches 1, then the cost function will approach infinity.</p><p>If our correct answer 'y' is 1, then the cost function will be 0 if our hypothesis function outputs 1. If our hypothesis approaches 0, then the cost function will approach infinity.</p><figure><img src="7C227E67AE2C20B141CD3F4B9D3A7A77.png" alt="Screen Shot 2018-03-05 at 16.38.30.png"><figcaption>Screen Shot 2018-03-05 at 16.38.30.png</figcaption></figure><p><strong>Note that writing the cost function in this way guarantees that J(Œ∏) is convex for logistic regression.</strong></p><h3 id="simplified-cost-function-and-gradient-descent">Simplified Cost Function and Gradient Descent</h3><p>We can compress our cost function's two conditional cases into one case: <span class="math display">\[Cost(h_Œ∏(x),y)=‚àíylog(h_Œ∏(x))‚àí(1‚àíy)log(1‚àíh_Œ∏(x))\]</span></p><p>Notice that when y is equal to 1, then the second term <span class="math inline">\((1‚àíy)log(1‚àíh_Œ∏(x))\)</span> will be zero and will not affect the result. If y is equal to 0, then the first term <span class="math inline">\(‚àíylog(h_Œ∏(x))\)</span> will be zero and will not affect the result.</p><p>We can fully write out our entire cost function as follows: <span class="math display">\[J(Œ∏)=‚àí\frac{1}{m}\sum_{i=1}^{m}[y^{(i)}log(h_Œ∏(x^{(i)}))+(1‚àíy^{(i)})log(1‚àíh_Œ∏(x^{(i)}))]\]</span></p><h4 id="gradient-descent-1">Gradient Descent</h4><p>Remember that the general form of gradient descent is: <span class="math display">\[Repeat \left\{\theta_i := \theta_j - \alpha\frac{\partial}{\partial\theta_j}J(\theta)\right\}\]</span></p><p>We can work out the derivative part using calculus to get: <span class="math display">\[Repeat \left\{\theta_i := \theta_j - \frac{\alpha}{m}\sum^m_{i=1}(h_\theta(x^{(i)})-y^{(i)})x_j^{(i)}\right\}\]</span></p><h3 id="multiclass-classification-one-vs-all">Multiclass Classification: One-vs-all</h3><p>Now we will approach the classification of data when we have more than two categories. Instead of y = {0,1} we will expand our definition so that y = {0,1...n}.</p><p>Since y = {0,1...n}, we divide our problem into n+1 (+1 because the index starts at 0) binary classification problems; in each one, we predict the probability that 'y' is a member of one of our classes. <span class="math display">\[\begin{align*}&amp;y \in \left\{0,1...n\right\} \\&amp;h^{(0)}_Œ∏(x)=P(y=0|x;Œ∏) \\&amp; h^{(1)}_Œ∏(x)=P(y=1|x;Œ∏) \\&amp; \cdots \\&amp; h^{(n)}_Œ∏(x)=P(y=n|x;Œ∏) \\&amp; prediction = \max\limits_{i}(h^{(i)}_Œ∏(x))\end{align*}\]</span></p><p>We are basically choosing one class and then lumping all the others into a single second class. We do this repeatedly, applying binary logistic regression to each case, and then use the hypothesis that returned the highest value as our prediction.</p><p>The following image shows how one could classify 3 classes:</p><figure><img src="BBF9A94F6DBB2A31F5ED6998975550F4.png" alt="Screen Shot 2018-03-05 at 16.59.52.png"><figcaption>Screen Shot 2018-03-05 at 16.59.52.png</figcaption></figure><p>To summarize: Train a logistic regression classifier <span class="math inline">\(h_Œ∏(x)\)</span> for each class to predict the probability that y = i, To make a prediction on a new x, pick the class that maximizes <span class="math inline">\(h_Œ∏(x)\)</span>.</p><h3 id="solving-the-problem-of-overfitting">Solving the problem of Overfitting</h3><h4 id="the-problem-of-overfitting">The Problem of Overfitting</h4><p>Consider the problem of predicting y from <span class="math inline">\(x \in R\)</span>. The leftmost figure below shows the result of fitting a <span class="math inline">\(y = Œ∏_0+Œ∏_1x\)</span> to a dataset. We see that the data doesn‚Äôt really lie on straight line, and so the fit is not very good.</p><figure><img src="C88419E9C1B6C95CDBB8BBCF11D141CD.png" alt="Screen Shot 2018-03-05 at 17.05.11.png"><figcaption>Screen Shot 2018-03-05 at 17.05.11.png</figcaption></figure><p>Instead, if we had added an extra feature <span class="math inline">\(x_2\)</span> , and fit <span class="math inline">\(y=Œ∏_0+Œ∏_1x+Œ∏_2x_2\)</span> , then we obtain a slightly better fit to the data (See middle figure). Naively, it might seem that the more features we add, the better. However, there is also a danger in adding too many features: The rightmost figure is the result of fitting a 5th order polynomial <span class="math inline">\(y=\sum^5_{j=0}Œ∏_jx_j\)</span>. We see that even though the fitted curve passes through the data perfectly, we would not expect this to be a very good predictor of, say, housing prices (y) for different living areas (x). Without formally defining what these terms mean, we‚Äôll say the figure on the left shows an instance of underfitting‚Äîin which the data clearly shows structure not captured by the model‚Äîand the figure on the right is an example of overfitting.</p><ul><li><strong>Underfitting</strong>, or <strong>high bias</strong>, is when the form of our hypothesis function h maps poorly to the trend of the data. It is usually caused by a function that is too simple or uses too few features.</li><li><strong>Overfitting</strong>, or <strong>high variance</strong>, is caused by a hypothesis function that fits the available data but does not generalize well to predict new data. It is usually caused by a complicated function that creates a lot of unnecessary curves and angles unrelated to the data.</li></ul><p>This terminology is applied to both linear and logistic regression. There are two main options to <strong>address the issue of overfitting</strong>: - Reduce the number of features: + Manually select which features to keep. + Use a model selection algorithm (studied later in the course). - Regularization + Keep all the features, but reduce the magnitude of parameters <span class="math inline">\(Œ∏_j\)</span>. + <strong>Regularization works well when we have a lot of slightly useful features.</strong></p><h4 id="cost-function-2">Cost Function</h4><p>If we have overfitting from our hypothesis function, we can reduce the weight that some of the terms in our function carry by increasing their cost.</p><p>Say we wanted to make the following function more quadratic: <span class="math display">\[Œ∏_0+Œ∏_1x+Œ∏_2x_2+Œ∏_3x_3+Œ∏_4x_4\]</span></p><p>We'll want to eliminate the influence of <span class="math inline">\(Œ∏_3x_3\)</span> and <span class="math inline">\(Œ∏_4x_4\)</span> . Without actually getting rid of these features or changing the form of our hypothesis, we can instead modify our <strong>cost function</strong>: <span class="math display">\[min_Œ∏\frac{1}{2m}\sum^m_{i=1}(h_Œ∏(x^{(i)})‚àíy^{(i)})^2+1000\cdotŒ∏^2_3+1000\cdotŒ∏^2_4\]</span></p><p>We've added two extra terms at the end to inflate the cost of <span class="math inline">\(Œ∏_3\)</span> and <span class="math inline">\(Œ∏_4\)</span>. Now, in order for the cost function to get close to zero, we will have to reduce the values of <span class="math inline">\(Œ∏_3\)</span> and <span class="math inline">\(Œ∏_4\)</span> to near zero. This will in turn greatly reduce the values of <span class="math inline">\(Œ∏_3x^3\)</span> and <span class="math inline">\(Œ∏_4x^4\)</span> in our hypothesis function. As a result, we see that the new hypothesis (depicted by the pink curve) looks like a quadratic function but fits the data better due to the extra small terms <span class="math inline">\(Œ∏_3x^3\)</span> and <span class="math inline">\(Œ∏_4x^4\)</span>.</p><figure><img src="20175FD6A28276C76BE10BFB5E984336.png" alt="Screen Shot 2018-03-05 at 17.50.15.png"><figcaption>Screen Shot 2018-03-05 at 17.50.15.png</figcaption></figure><p>We could also regularize all of our theta parameters in a single summation as: <span class="math display">\[min_Œ∏\frac{1}{2m}\left[\sum^m_{i=1}(h_Œ∏(x^{(i)})‚àíy^{(i)})^2+\lambda\sum_{j=1}^{n}\theta_j^2\right]\]</span></p><p>The Œª, or lambda, is the <strong>regularization parameter</strong>. It determines how much the costs of our theta parameters are inflated.</p><p>Using the above cost function with the extra summation, we can smooth the output of our hypothesis function to reduce overfitting. If lambda is chosen to be too large, it may smooth out the function too much and cause underfitting. Hence, what would happen if Œª=0 or is too small ?</p><h4 id="regularized-linear-regression">Regularized Linear Regression</h4><p>We can apply regularization to both linear regression and logistic regression. We will approach linear regression first.</p><h5 id="gradient-descent-2">Gradient Descent</h5><p>We will modify our gradient descent function to separate out <span class="math inline">\(Œ∏_0\)</span> from the rest of the parameters because we do not want to penalize <span class="math inline">\(Œ∏_0\)</span>.</p><p>repeat until convergence:{ <span class="math display">\[\begin{align*}&amp; Œ∏_0:=Œ∏_0‚àíŒ±\frac{1}{m}\sum_{i=1}^m(h_Œ∏(x^{(i)})‚àíy^{(i)})x_0^{(i)} \\&amp; Œ∏_j:=Œ∏_j‚àíŒ±\left[\left(\frac{1}{m}\sum_{i=1}^m(h_Œ∏(x^{(i)})‚àíy^{(i)})x_j^{(i)}\right) + \frac{\lambda}{m}\theta_j\right]   \qquad j \in \left\{1,2...n\right\}\end{align*}\]</span> }</p><p>The term <span class="math inline">\(\frac{Œª}{m}Œ∏_j\)</span> performs our regularization. With some manipulation our update rule can also be represented as: <span class="math display">\[Œ∏_j:=Œ∏_j(1‚àíŒ±\frac{Œª}{m})‚àíŒ±\frac{1}{m}\sum^m_{i=1}(h_Œ∏(x^{(i)})‚àíy^{(i)})x^{(i)}_j\]</span></p><p>The first term in the above equation,<span class="math inline">\(1‚àíŒ±\frac{Œª}{m}\)</span> will always be less than 1. Intuitively you can see it as reducing the value of <span class="math inline">\(Œ∏_j\)</span> by some amount on every update. Notice that the second term is now exactly the same as it was before.</p><h4 id="normal-equation-1">Normal Equation</h4><p>Now let's approach regularization using the alternate method of the non-iterative normal equation.</p><p>To add in regularization, the equation is the same as our original, except that we add another term inside the parentheses: <span class="math display">\[\begin{align*}&amp; \theta = \left( X^TX + \lambda \cdot L\right)^{(-1)}X^Ty \\&amp; where \ L = \begin{bmatrix} 0 &amp; \\  &amp; 1 \\  &amp; &amp; 1 \\  &amp; &amp; &amp; \ddots \\  &amp; &amp; &amp; &amp; 1 \\\end{bmatrix}\end{align*}\]</span></p><p>L is a matrix with 0 at the top left and 1's down the diagonal, with 0's everywhere else. It should have dimension (n+1)√ó(n+1). Intuitively, this is the identity matrix (though we are not including <span class="math inline">\(x_0\)</span>), multiplied with a single real number .</p><p>Recall that if m &lt; n, then <span class="math inline">\(X^TX\)</span> is non-invertible. However, when we add the term <span class="math inline">\(\lambda \cdot l\)</span>, then <span class="math inline">\(X^TX + \lambda‚ãÖL\)</span> becomes invertible.</p><h4 id="regularized-logistic-regression">Regularized Logistic Regression</h4><p>We can regularize logistic regression in a similar way that we regularize linear regression. As a result, we can avoid overfitting. The following image shows how the regularized function, displayed by the pink line, is less likely to overfit than the non-regularized function represented by the blue line:</p><figure><img src="C47865D828E5712B8CF0169AF2AF3CF8.png" alt="Screen Shot 2018-03-05 at 20.01.22.png"><figcaption>Screen Shot 2018-03-05 at 20.01.22.png</figcaption></figure><p>Cost Function</p><p>Recall that our cost function for logistic regression was: <span class="math display">\[J(Œ∏)=‚àí\frac{1}{m}\sum_{i=1}^{m}[y^{(i)}log(h_Œ∏(x^{(i)}))+(1‚àíy^{(i)})log(1‚àíh_Œ∏(x^{(i)}))]\]</span></p><p>We can regularize this equation by adding a term to the end: <span class="math display">\[J(Œ∏)=‚àí\frac{1}{m}\sum_{i=1}^{m}[y^{(i)}log(h_Œ∏(x^{(i)}))+(1‚àíy^{(i)})log(1‚àíh_Œ∏(x^{(i)}))] + \frac{\lambda}{2m}\sum_{j=1}^{n}\theta_j^2\]</span></p><p>he second sum,<span class="math inline">\(\sum^n_{j=1}Œ∏^2_j\)</span> means to explicitly exclude the bias term, <span class="math inline">\(Œ∏_0\)</span>. I.e. the Œ∏ vector is indexed from 0 to n (holding n+1 values, <span class="math inline">\(Œ∏_0\)</span> through <span class="math inline">\(Œ∏_n\)</span>), and this sum explicitly skips <span class="math inline">\(Œ∏_0\)</span>, by running from 1 to n, skipping 0. Thus, when computing the equation, we should continuously update the two following equations:</p><figure><img src="55D75D0935FA2755B526906B7C7469E3.png" alt="Screen Shot 2018-03-05 at 22.47.16.png"><figcaption>Screen Shot 2018-03-05 at 22.47.16.png</figcaption></figure><h2 id="neural-networks">Neural Networks</h2><h3 id="model-representation-1">Model Representation</h3><h4 id="model-representation-i">Model Representation I</h4><p>Let's examine how we will represent a hypothesis function using neural networks. At a very simple level, neurons are basically computational units that take inputs (<strong>dendrites</strong>) as electrical inputs (called "spikes") that are channeled to outputs (<strong>axons</strong>). In our model, our dendrites are like the input features <span class="math inline">\(x_1 \dots x_n\)</span>, and the output is the result of our hypothesis function. In this model our <span class="math inline">\(x_0\)</span> input node is sometimes called the "bias unit." It is always equal to 1. In neural networks, we use the same logistic function as in classification, <span class="math inline">\(\frac{1}{1+e^{‚àíŒ∏^Tx}}\)</span>, yet we sometimes call it a sigmoid (logistic) <strong>activation</strong> function. In this situation, our "theta" parameters are sometimes called "<strong>weights</strong>".</p><p>Visually, a simplistic representation looks like: <span class="math display">\[\begin{equation}\begin{bmatrix}x_0\\x_1\\x_2\\x_3\\\end{bmatrix} \rightarrow\begin{bmatrix}a_1^{(2)}\\a_2^{(2)}\\a_3^{(2)}\\ \end{bmatrix}\rightarrow h_\theta(x)\end{equation}\]</span></p><p>The values for each of the "activation" nodes is obtained as follows: <span class="math display">\[\begin{align*}&amp; a^{(2)}_1=g(Œò^{(1)}_{10}x_0+Œò^{(1)}_{11}x_1+Œò^{(1)}_{12}x_2+Œò^{(1)}_{13}x_3) \\&amp; a^{(2)}_2=g(Œò^{(1)}_{20}x_0+Œò^{(1)}_{21}x_1+Œò^{(1)}_{22}x_2+Œò^{(1)}_{23}x_3) \\&amp; a^{(2)}_3=g(Œò^{(1)}_{30}x_0+Œò^{(1)}_{31}x_1+Œò^{(1)}_{32}x_2+Œò^{(1)}_{33}x_3) \\&amp; h_Œò(x)=a^{(3)}_1=g(Œò^{(2)}_{10}a^{(2)}_0+Œò^{(2)}_{11}a^{(2)}_1+Œò^{(2)}_{12}a^{(2)}_2+Œò^{(2)}_{13}a^{(2)}_3)\end{align*}\]</span></p><p>This is saying that we compute our activation nodes by using a 3√ó4 matrix of parameters. We apply each row of the parameters to our inputs to obtain the value for one activation node. Our hypothesis output is the logistic function applied to the sum of the values of our activation nodes, which have been multiplied by yet another parameter matrix <span class="math inline">\(Œò^{(2)}\)</span> containing the weights for our second layer of nodes.</p><p>Each layer gets its own matrix of weights, <span class="math inline">\(Œò^{(j)}\)</span>.</p><p>The dimensions of these matrices of weights is determined as follows:</p><p>If network has <span class="math inline">\(s_j\)</span> units in layer j and <span class="math inline">\(s_{j+1}\)</span> units in layer j+1, then <span class="math inline">\(Œò^{(j)}\)</span> will be of dimension <span class="math inline">\(s_{j+1}√ó(s_j+1)\)</span>.</p><p>The +1 comes from the addition in <span class="math inline">\(Œò^{(j)}\)</span> of the "bias nodes," <span class="math inline">\(x_0\)</span> and <span class="math inline">\(Œò^{(j)}_0\)</span>. In other words the output nodes will not include the bias nodes while the inputs will. The following image summarizes our model representation:</p><figure><img src="E393ACC2A3014435290235CA61D6B235.png" alt="Screen Shot 2018-03-05 at 23.27.21.png"><figcaption>Screen Shot 2018-03-05 at 23.27.21.png</figcaption></figure><p>Example: If layer 1 has 2 input nodes and layer 2 has 4 activation nodes. Dimension of <span class="math inline">\(Œò^{(1)}\)</span> is going to be 4√ó3 where <span class="math inline">\(s_j=2\)</span> and <span class="math inline">\(s_{j+1}=4\)</span>, so <span class="math inline">\(s_{j+1}√ó(s_j+1)=4√ó3\)</span>.</p><h4 id="examples-and-intuitions-i">Examples and Intuitions I</h4><p>A simple example of applying neural networks is by predicting x1 AND x2, which is the logical 'and' operator and is only true if both x1 and x2 are 1.</p><p>The graph of our functions will look like: <span class="math display">\[\begin{equation}\begin{bmatrix}x_0\\x_1\\x_2\\x_3\\\end{bmatrix} \rightarrow\begin{bmatrix}g(z^{(2)})\\\end{bmatrix}\rightarrow h_\theta(x)\end{equation}\]</span></p><p>Remember that x0 is our bias variable and is always 1.</p><p>Let's set our first theta matrix as: <span class="math display">\[\theta^{(1)} = \left[ -30 \quad 20 \quad 20 \right]\]</span></p><p>This will cause the output of our hypothesis to only be positive if both <span class="math inline">\(x_1\)</span> and <span class="math inline">\(x_2\)</span> are 1. In other words: <span class="math display">\[\begin{align*}&amp; hŒò(x)=g(‚àí30+20x1+20x2)\\&amp; x1=0 \ and \  x2=0 \ then \ g(‚àí30) \approx 0 \\&amp; x1=0 \ and \  x2=1 \ then \ g(‚àí10) \approx 0 \\&amp; x1=1 \ and \  x2=0 \ then \ g(‚àí10) \approx 0 \\&amp; x1=1 \ and \ x2=1 \ then \ g(10)  \approx 1 \\\end{align*}\]</span></p><p>So we have constructed one of the fundamental operations in computers by using a small neural network rather than using an actual AND gate. Neural networks can also be used to simulate all the other logical gates. The following is an example of the logical operator 'OR', meaning either <span class="math inline">\(x_1\)</span> is true or <span class="math inline">\(x_2\)</span> is true, or both:</p><figure><img src="7AE116A7537F70690A8F58ACB6F54D76.png" alt="Screen Shot 2018-03-06 at 00.16.18.png"><figcaption>Screen Shot 2018-03-06 at 00.16.18.png</figcaption></figure><figure><img src="E22905CF7C49F8BF1CBE158BD291C7AB.png" alt="Screen Shot 2018-03-06 at 00.16.24.png"><figcaption>Screen Shot 2018-03-06 at 00.16.24.png</figcaption></figure><h4 id="examples-and-intuitions-ii">Examples and Intuitions II</h4><p>The <span class="math inline">\(Œò^{(1)}\)</span> matrices for AND, NOR, and OR are: <span class="math display">\[\begin{align*}&amp; AND: &amp; \theta^{(1)} = \left[ -30 \quad 20 \quad 20 \right] \\&amp; NOR: &amp;\theta^{(1)} = \left[ 10 \quad -20 \quad -20 \right] \\&amp; OR:  &amp; \theta^{(1)} = \left[ -10 \quad 20 \quad 20 \right] \\\end{align*}\]</span></p><p>We can combine these to get the XNOR logical operator (which gives 1 if x1 and x2 are both 0 or both 1).</p><p><span class="math display">\[\begin{equation}\begin{bmatrix}x_0\\x_1\\x_2\\\end{bmatrix} \rightarrow\begin{bmatrix}a_1^{(2)}\\a_2^{(2)}\\\end{bmatrix}\rightarrow\begin{bmatrix}a^{(3)}\\\end{bmatrix} \rightarrow h_\theta(x)\end{equation}\]</span></p><p>For the transition between the first and second layer, we'll use a <span class="math inline">\(Œò^(1)\)</span> matrix that combines the values for AND and NOR:</p><p><span class="math display">\[\begin{equation}\theta^{(1)} = \begin{bmatrix}&amp; -30 &amp; 20 &amp; 20\\&amp; 10 &amp; -20 &amp; -20\\\end{bmatrix}\end{equation}\]</span></p><p>For the transition between the second and third layer, we'll use a <span class="math inline">\(Œò^(2)\)</span> matrix that uses the value for OR: <span class="math display">\[\begin{equation}\theta^{(1)} = \begin{bmatrix}&amp; -10 &amp; 20 &amp; 20\\\end{bmatrix}\end{equation}\]</span></p><p>Let's write out the values for all our nodes: <span class="math display">\[\begin{align*}&amp; a^{(2)}=g(Œò^{(1)}\cdot x) \\ &amp; a^{(3)}=g(Œò(2)\cdot a^{(2)}) \\ &amp; h_Œò^{(x)}=a^{(3)}\end{align*}\]</span></p><p>And there we have the XNOR operator using a hidden layer with two nodes! The following summarizes the above algorithm: <img src="6B60EFC19A998BFE77E456054B18E0E5.png" alt="Screen Shot 2018-03-06 at 00.34.59.png"></p><h3 id="multiclass-classification">Multiclass Classification</h3><p>To classify data into multiple classes, we let our hypothesis function return a vector of values. Say we wanted to classify our data into one of four categories. We will use the following example to see how this classification is done. This algorithm takes as input an image and classifies it accordingly:</p><figure><img src="9F39EFDDAD68E6ED5C70BDBB41DCA3D8.png" alt="Screen Shot 2018-03-06 at 00.36.26.png"><figcaption>Screen Shot 2018-03-06 at 00.36.26.png</figcaption></figure><p>We can define our set of resulting classes as y: <img src="5D6DBDB924FFE09866BA87069886BD34.png" alt="Screen Shot 2018-03-06 at 00.36.39.png"></p><p>Each <span class="math inline">\(y^{(i)}\)</span> represents a different image corresponding to either a car, pedestrian, truck, or motorcycle. The inner layers, each provide us with some new information which leads to our final hypothesis function. The setup looks like:</p><figure><img src="5D6DBDB924FFE09866BA87069886BD34.png" alt="Screen Shot 2018-03-06 at 00.36.39.png"><figcaption>Screen Shot 2018-03-06 at 00.36.39.png</figcaption></figure><p>Our resulting hypothesis for one set of inputs may look like: <img src="0F0B96816583D5C4B1A3FBEC2960985B.png" alt="Screen Shot 2018-03-06 at 00.37.58.png"></p><p>In which case our resulting class is the third one down, or <span class="math inline">\(h_Œò(x)_3\)</span>, which represents the motorcycle.</p><h3 id="cost-function-3">Cost Function</h3><p>Let's first define a few variables that we will need to use: - L = total number of layers in the network - <span class="math inline">\(s_l\)</span> = number of units (not counting bias unit) in layer l - K = number of output units/classes</p><p>Recall that in neural networks, we may have many output nodes. We denote <span class="math inline">\(h_Œò(x)_k\)</span> as being a hypothesis that results in the kth output. Our cost function for neural networks is going to be a generalization of the one we used for logistic regression. Recall that the cost function for regularized logistic regression was: <span class="math display">\[J(Œ∏)=‚àí\frac{1}{m}\sum_{i=1}^{m}[y^{(i)}log(h_Œ∏(x^{(i)}))+(1‚àíy^{(i)})log(1‚àíh_Œ∏(x^{(i)}))] + \frac{\lambda}{2m}\sum_{j=1}^{n}\theta_j^2\]</span> For neural networks, it is going to be slightly more complicated: <span class="math display">\[J(Œ∏)=‚àí\frac{1}{m}\sum_{i=1}^{m}\sum_{k=1}^{k}\left[y^{(i)}log(h_Œ∏(x^{(i)}))+(1‚àíy^{(i)})log(1‚àíh_Œ∏(x^{(i)}))\right] + \frac{\lambda}{2m}\sum_{j=1}^{L-1}\sum_{i=1}^{s_j}\sum_{j=1}^{s_j+1}\left(\Theta_{j,i}^{(l)} \right)\]</span></p><p>We have added a few nested summations to account for our multiple output nodes. In the first part of the equation, before the square brackets, we have an additional nested summation that loops through the number of output nodes.</p><p>In the regularization part, after the square brackets, we must account for multiple theta matrices. The number of columns in our current theta matrix is equal to the number of nodes in our current layer (including the bias unit). The number of rows in our current theta matrix is equal to the number of nodes in the next layer (excluding the bias unit). As before with logistic regression, we square every term.</p><p>Note:</p><ul><li>the double sum simply adds up the logistic regression costs calculated for each cell in the output layer</li><li>the triple sum simply adds up the squares of all the individual Œòs in the entire network.</li><li>the i in the triple sum does not refer to training example i</li></ul><h3 id="ÂèçÂêë‰º†Êí≠ÁÆóÊ≥ï">ÂèçÂêë‰º†Êí≠ÁÆóÊ≥ï</h3><p><img src="1E7910385ADB22286535DD9C10A96CA9.png" alt="Screen Shot 2018-03-06 at 22.50.33.png"> <img src="8DC2206F7BE4D57DE26287856593AD79.png" alt="Screen Shot 2018-03-06 at 22.53.11.png"> <img src="3E0683886E25BF1BC633840010E6B5C9.png" alt="Screen Shot 2018-03-06 at 22.54.57.png"> <img src="7C3B34351E78311B962400E061A79423.png" alt="Screen Shot 2018-03-06 at 22.55.30.png"> <img src="A1B582245F39EB4BA99621D425CA909F.png" alt="Screen Shot 2018-03-06 at 23.39.45.png"> <img src="FFC79FACBBA1492A02D9E45F3C29C439.png" alt="Screen Shot 2018-03-06 at 23.40.03.png"></p><p>####ÂºïÂÖ•delta Âà©Áî®ÈìæÂºèÊ≥ïÂàôÊù•Êõ¥Êñ∞ÊùÉÈáç‰Ω†‰ºöÂèëÁé∞ÂÖ∂ÂÆûËøô‰∏™ÊñπÊ≥ïÁÆÄÂçïÔºå‰ΩÜËøá‰∫éÂÜóÈïø„ÄÇÁî±‰∫éÊõ¥Êñ∞ÁöÑËøáÁ®ãÂèØ‰ª•ÁúãÂÅöÊòØ‰ªéÁΩëÁªúÁöÑËæìÂÖ•Â±ÇÂà∞ËæìÂá∫Â±Ç‰ªéÂâçÂæÄÂêéÊõ¥Êñ∞ÔºåÊØèÊ¨°Êõ¥Êñ∞ÁöÑÊó∂ÂÄôÈÉΩÈúÄË¶ÅÈáçÊñ∞ËÆ°ÁÆóËäÇÁÇπÁöÑËØØÂ∑ÆÔºåÂõ†Ê≠§‰ºöÂ≠òÂú®‰∏Ä‰∫õ‰∏çÂøÖË¶ÅÁöÑÈáçÂ§çËÆ°ÁÆó„ÄÇÂÖ∂ÂÆûÂØπ‰∫éÂ∑≤ÁªèËÆ°ÁÆóÂÆåÊØïÁöÑËäÇÁÇπÊàë‰ª¨ÂÆåÂÖ®ÂèØ‰ª•Áõ¥Êé•ÊãøÊù•Áî®ÔºåÂõ†Ê≠§Êàë‰ª¨ÂèØ‰ª•ÈáçÊñ∞ÁúãÂæÖËøô‰∏™ÈóÆÈ¢òÔºå‰ªéÂêéÂæÄÂâçÊõ¥Êñ∞„ÄÇÂÖàÊõ¥Êñ∞ÂêéËæπÁöÑÊùÉÈáçÔºå‰πãÂêéÂÜçÂú®Ê≠§Âü∫Á°Ä‰∏äÂà©Áî®Êõ¥Êñ∞ÂêéËæπÁöÑÊùÉÈáç‰∫ßÁîüÁöÑ‰∏≠Èó¥ÂÄºÊù•Êõ¥Êñ∞ËæÉÈù†ÂâçÁöÑÂèÇÊï∞„ÄÇËøô‰∏™‰∏≠Èó¥ÂèòÈáèÂ∞±ÊòØ‰∏ãÊñáË¶Å‰ªãÁªçÁöÑdeltaÂèòÈáèÔºå‰∏ÄÊù•ÁÆÄÂåñÂÖ¨ÂºèÔºå‰∫åÊù•ÂáèÂ∞ëËÆ°ÁÆóÈáèÔºåÊúâÁÇπÂä®ÊÄÅËßÑÂàíÁöÑËµ∂ËÑö„ÄÇ</p><p>Êé•‰∏ãÊù•Áî®‰∫ãÂÆûËØ¥ËØùÔºåÂ§ßÂÆ∂‰ªîÁªÜËßÇÂØü‰∏Ä‰∏ãÂú®Á¨¨ÂõõÈÉ®ÂàÜÈìæÂºèÊ±ÇÂØºÈÉ®ÂàÜËØØÂ∑ÆÂØπ‰∫éËæìÂá∫Â±ÇÁöÑw11‰ª•ÂèäÈöêËóèÂ±ÇÁöÑw11Ê±ÇÂÅèÂØº‰ª•ÂèäÂÅèÁΩÆÁöÑÊ±ÇÂÅèÂØºÁöÑËøáÁ®ãÔºå‰Ω†‰ºöÂèëÁé∞Ôºå‰∏â‰∏™ÂÖ¨ÂºèÂ≠òÂú®Áõ∏ÂêåÁöÑÈÉ®ÂàÜÔºåÂêåÊó∂ÈöêËóèÂ±ÇÂèÇÊï∞Ê±ÇÂÅèÂØºÁöÑËøáÁ®ã‰ºöÁî®Âà∞ËæìÂá∫Â±ÇÂèÇÊï∞Ê±ÇÂÅèÂØºÁöÑÈÉ®ÂàÜÂÖ¨ÂºèÔºåËøôÊ≠£ÊòØÂºïÂÖ•‰∫Ü‰∏≠Èó¥ÂèòÈáèdeltaÁöÑÂéüÂõ†ÔºàÂÖ∂ÂÆûÁ∫¢Ê°ÜÁöÑÂÖ¨ÂºèÂ∞±ÊòØdeltaÁöÑÂÆö‰πâÔºâ„ÄÇ <img src="3B0BF315DF80121DB27897BBF9A37884.png" alt="Screen Shot 2018-03-07 at 01.04.21.png"></p><p>Â§ßÂÆ∂Áúã‰∏Ä‰∏ãÁªèÂÖ∏‰π¶Á±ç„ÄäÁ•ûÁªèÁΩëÁªú‰∏éÊ∑±Â∫¶Â≠¶‰π†„Äã‰∏≠ÂØπ‰∫édeltaÁöÑÊèèËø∞‰∏∫Âú®Á¨¨lÂ±ÇÁ¨¨j‰∏™Á•ûÁªèÂÖÉ‰∏äÁöÑËØØÂ∑ÆÔºå<strong>ÂÆö‰πâ‰∏∫ËØØÂ∑ÆÂØπ‰∫éÂΩìÂâçÂ∏¶ÊùÉËæìÂÖ•Ê±ÇÂÅèÂØº</strong>ÔºåÊï∞Â≠¶ÂÖ¨ÂºèÂ¶Ç‰∏ãÔºö <img src="238D7D4D26EE242A61DA6EB1A8B29D2D.png" alt="Screen Shot 2018-03-07 at 01.04.39.png"></p><p><img src="86C740FF01C6F3D1BBE6E70DDFB1D8BD.png" alt="Screen Shot 2018-03-07 at 01.05.03.png"> <img src="55BF97D8CF559C742CF654469D576603.png" alt="Screen Shot 2018-03-07 at 01.05.50.png"></p><figure><img src="B090D5D856292D3898C1D4E0937B58B2.png" alt="Screen Shot 2018-03-07 at 01.06.05.png"><figcaption>Screen Shot 2018-03-07 at 01.06.05.png</figcaption></figure><h2 id="advice-for-applying-machine-learning">Advice for Applying Machine Learning</h2><h3 id="evaluating-a-hypothesis">Evaluating a Hypothesis</h3><p>Once we have done some trouble shooting for errors in our predictions by:</p><ul><li>Getting more training examples</li><li>Trying smaller sets of features</li><li>Trying additional features</li><li>Trying polynomial features</li><li>Increasing or decreasing Œª</li></ul><p>We can move on to evaluate our new hypothesis.</p><p>A hypothesis may have a low error for the training examples but still be inaccurate (because of overfitting). Thus, to evaluate a hypothesis, given a dataset of training examples, we can split up the data into two sets: a <strong>training set</strong> and a <strong>test set</strong>. Typically, the training set consists of 70% of your data and the test set is the remaining 30%.</p><p>The new procedure using these two sets is then:</p><p>Learn Œò and minimize <span class="math inline">\(J_{train}(Œò)\)</span> using the training set Compute the test set error <span class="math inline">\(J_{test}(Œò)\)</span></p><h3 id="the-test-set-error">The test set error</h3><ol type="1"><li>For linear regression: <span class="math display">\[J_{test}(Œò)=\frac{1}{2m_{test}}\sum^{m_{test}}_{i=1}(h_Œò(x^{(i)}_{test})‚àíy^{(i)}_{test})^2\]</span> For classification ~ Misclassification error (aka 0/1 misclassification error): <span class="math display">\[\begin{equation}err(h_Œò(x),y)= \left\{\begin{aligned}\overset{.} 1 &amp; \quad if \ h_Œò(x)‚â•0.5 \ and \ y=0 \ or \ h_Œò(x)&lt;0.5 \ and \ y=1 \\  0 &amp; \quad otherwise \end{aligned}\right.\end{equation}\]</span></li></ol><p>This gives us a binary 0 or 1 error result based on a misclassification. The average test error for the test set is:</p><p><span class="math display">\[Test Error)=\frac{1}{m_{test}}\sum^{m_{test}}_{i=1}err(h_Œò(x^{(i)}_{test}),y^{(i)}_{test})^2\]</span></p><p>This gives us the proportion of the test data that was misclassified.</p><h3 id="model-selection-and-trainvalidationtest-sets">Model Selection and Train/Validation/Test Sets</h3><p>Just because a learning algorithm fits a training set well, that does not mean it is a good hypothesis. It could <strong>over fit</strong> and as a result your predictions on the test set would be poor. The error of your hypothesis as measured on the data set with which you trained the parameters will be lower than the error on any other data set.</p><p>Given many models with different polynomial degrees, we can use a systematic approach to identify the 'best' function. In order to choose the model of your hypothesis, you can test each degree of polynomial and look at the error result.</p><p>One way to break down our dataset into the three sets is: - Training set: 60% - Cross validation set: 20% - Test set: 20%</p><p>We can now calculate three separate error values for the three different sets using the following method:</p><ol type="1"><li>Optimize the parameters in Œò using the training set for each polynomial degree.</li><li>Find the polynomial degree d with the least error using the cross validation set.</li><li>Estimate the generalization error using the test set with <span class="math inline">\(J_{test}(Œò^{(d)})\)</span>, (d = theta from polynomial with lower error);</li></ol><p>This way, the degree of the polynomial d has not been trained using the test set.</p><h3 id="diagnosing-bias-vs.-variance">Diagnosing Bias vs. Variance</h3><p>In this section we examine the relationship between the degree of the polynomial d and the underfitting or overfitting of our hypothesis.</p><ul><li>We need to distinguish whether bias or variance is the problem contributing to bad predictions.</li><li><strong>High bias</strong> is underfitting and <strong>high variance</strong> is overfitting. Ideally, we need to find a golden mean between these two.</li></ul><p>The training error will tend to <strong>decrease</strong> as we increase the degree d of the polynomial.</p><p>At the same time, the cross validation error will tend to <strong>decrease</strong> as we increase d up to a point, and then it will <strong>increase</strong> as d is increased, forming a convex curve.</p><ul><li>High bias (underfitting): both <span class="math inline">\(J_{train}(Œò)\)</span> and <span class="math inline">\(J_{CV}(Œò)\)</span> will be high. Also, <span class="math inline">\(J_{CV}(Œò) \approx J_{train}(Œò)\)</span>.</li><li>High variance (overfitting): <span class="math inline">\(J_{train}(Œò)\)</span> will be low and <span class="math inline">\(J_{CV}(Œò)\)</span> will be much greater than <span class="math inline">\(J_{train}(Œò)\)</span>.</li></ul><p>The is summarized in the figure below: <img src="781A117D7463E287879157F7CAE8C804.png" alt="Screen Shot 2018-03-07 at 02.32.42.png"></p><h3 id="regularization-and-biasvariance">Regularization and Bias/Variance</h3><p><img src="515C8236E4F14AA312CAB97EBE4D2A4B.png" alt="Screen Shot 2018-03-07 at 02.34.37.png"> In the figure above, we see that as Œª increases, our fit becomes more rigid. On the other hand, as Œª approaches 0, we tend to over overfit the data. So how do we choose our parameter Œª to get it 'just right' ? In order to choose the model and the regularization term Œª, we need to:</p><ol type="1"><li>Create a list of lambdas (i.e. <span class="math inline">\(Œª \in \left\{0,0.01,0.02,0.04,0.08,0.16,0.32,0.64,1.28,2.56,5.12,10.24\right\}\)</span>);</li><li>Create a set of models with different degrees or any other variants.</li><li>Iterate through the Œªs and for each Œª go through all the models to learn some Œò.</li><li>Compute the cross validation error using the learned Œò (computed with Œª) on the <span class="math inline">\(J_{CV}(Œò)\)</span> <strong>without</strong> regularization or <strong>Œª = 0</strong>.</li><li>Select the best combo that produces the lowest error on the cross validation set.</li><li>Using the best combo Œò and Œª, apply it on <span class="math inline">\(J_{test}(Œò)\)</span> to see if it has a good generalization of the problem.</li></ol><h3 id="learning-curves">Learning Curves</h3><p>Training an algorithm on a very few number of data points (such as 1, 2 or 3) will easily have 0 errors because we can always find a quadratic curve that touches exactly those number of points. Hence: - As the training set gets larger, the error for a quadratic function increases. - The error value will plateau out after a certain m, or training set size.</p><h4 id="experiencing-high-bias">Experiencing high bias:</h4><ul><li><p><strong>Low training set size</strong>: causes <span class="math inline">\(J_{train}(Œò)\)</span> to be low and <span class="math inline">\(J_{CV}(Œò)\)</span> to be high.</p></li><li><p><strong>Large training set size</strong>: causes both <span class="math inline">\(J_{train}(Œò)\)</span> and <span class="math inline">\(J_CV(Œò)\)</span> to be high with <span class="math inline">\(J_{train}(Œò) \approx J_{CV}(Œò)\)</span>.</p></li></ul><blockquote><p>If a learning algorithm is suffering from high bias, getting more training data will not (by itself) help much.</p></blockquote><figure><img src="3DF331A0CEECDA3ACF1DA4FC358DFF4A.png" alt="Screen Shot 2018-03-07 at 02.48.32.png"><figcaption>Screen Shot 2018-03-07 at 02.48.32.png</figcaption></figure><h4 id="experiencing-high-variance">Experiencing high variance:</h4><ul><li><p><strong>Low training set size</strong>: causes <span class="math inline">\(J_{train}(Œò)\)</span> to be low and <span class="math inline">\(J_{CV}(Œò)\)</span> to be high.</p></li><li><p><strong>Large training set size</strong>: <span class="math inline">\(J_{train}(Œò)\)</span> increases with training set size and <span class="math inline">\(J_{CV}(Œò)\)</span> continues to decrease without leveling off. Also, <span class="math inline">\(J_{train}(Œò) &lt; J_{CV}(Œò)\)</span> but the difference between them remains significant.</p></li></ul><blockquote><p>If a learning algorithm is suffering from high variance, getting more training data is likely to help. <img src="EFB83955B407BC411E541A711E96A0E8.png" alt="Screen Shot 2018-03-07 at 02.53.23.png"></p></blockquote><h3 id="deciding-what-to-do-next-revisited">Deciding What to Do Next Revisited</h3><p>Our decision process can be broken down as follows:</p><ul><li><strong>Getting more training examples</strong>: Fixes high variance</li><li><strong>Trying smaller sets of features</strong>: Fixes high variance</li><li><strong>Adding features</strong>: Fixes high bias</li><li><strong>Adding polynomial features</strong>: Fixes high bias</li><li><strong>Decreasing Œª</strong>: Fixes high bias</li><li><strong>Increasing Œª</strong>: Fixes high variance.</li></ul><h4 id="diagnosing-neural-networks">Diagnosing Neural Networks</h4><ul><li>A neural network with fewer parameters is prone to underfitting. It is also computationally cheaper.</li><li>A large neural network with more parameters is prone to overfitting. It is also computationally expensive. In this case you can use regularization (increase Œª) to address the overfitting.</li></ul><p>Using a single hidden layer is a good starting default. You can train your neural network on a number of hidden layers using your cross validation set. You can then select the one that performs best.</p><h2 id="support-vector-machines">Support Vector Machines</h2><h3 id="from-logistic-to-svm">from logistic to SVM</h3><figure><img src="285DCB47AC53B59E2DB6E011D59EC77A.png" alt="Screen Shot 2018-03-07 at 11.30.56.png"><figcaption>Screen Shot 2018-03-07 at 11.30.56.png</figcaption></figure><p>###Cost Function <img src="C3B175C3D872808F82A095C1D6B8925A.png" alt="Screen Shot 2018-03-07 at 11.31.49.png"></p><p>recall the cost function of logistic Regression: <span class="math display">\[\min_{\theta}‚àí\frac{1}{m}\sum_{i=1}^{m}[y^{(i)}log(h_Œ∏(x^{(i)}))+(1‚àíy^{(i)})log(1‚àíh_Œ∏(x^{(i)}))] + \frac{\lambda}{2m}\sum_{j=1}^{n}\theta_j^2\]</span></p><p>We replace some terms with new terms and delete some terms which will not influence the results:</p><p><span class="math display">\[\min_{\theta}C\sum_{i=1}^{m}[y^{(i)}cost_1(\theta^Tx^{(i)}))+(1‚àíy^{(i)})cost_0(\theta^Tx^{(i)})] + \frac{1}{2}\sum_{i=1}^{n}\theta_j^2\]</span></p><h3 id="hypothesis">Hypothesis</h3><p><span class="math display">\[\begin{equation}h_{\theta} = \left\{\begin{aligned}&amp; 0 \quad if \ \theta^TX &gt; 0 \\&amp; 1 \quad otherwise\end{aligned}\right.\end{equation}\]</span></p><h3 id="large-margin-intuion">Large Margin Intuion</h3><p><img src="4687A5DC15D8F11DA8072AECBFE0602F.png" alt="Screen Shot 2018-03-07 at 13.40.48.png"> <img src="A704546B2253B03AC14795A34EE3DF05.png" alt="Screen Shot 2018-03-07 at 13.41.16.png"> <img src="8D7D46605872CB4F3E400CB6A9431488.png" alt="Screen Shot 2018-03-07 at 13.41.29.png"></p><h3 id="vector-inner-product">Vector inner product</h3><p><img src="330C85F2779A7B587222EBCA9A43C8D2.png" alt="Screen Shot 2018-03-07 at 14.10.00.png"> <img src="AB6577A14C75D19C65CBFFD1E33A8D30.png" alt="Screen Shot 2018-03-08 at 14.46.10.png"> <img src="8B0B485DE902B7EF3E7A6490D12C2648.png" alt="Screen Shot 2018-03-07 at 14.15.46.png"></p><h3 id="kernel">kernel</h3><p><img src="448E12BA8322FB7F9A543F878CA4DE18.png" alt="Screen Shot 2018-03-07 at 15.17.22.png"> <img src="AFFBD72AF70902A69A0D88CC1D43CE1E.png" alt="Screen Shot 2018-03-07 at 15.17.43.png"> <img src="396AB89981F0202AB84789EC4618734D.png" alt="Screen Shot 2018-03-07 at 15.19.15.png"> <img src="E18FC2346F7204E03DBF11B94D74B394.png" alt="Screen Shot 2018-03-07 at 15.19.30.png"> <img src="19D617B04FEC28135163B0F5C694EBEC.png" alt="Screen Shot 2018-03-07 at 15.20.04.png"> <img src="7597B35AA6CBE0DE414F5CC36DACF6B2.png" alt="Screen Shot 2018-03-07 at 15.20.24.png"> <img src="2EB3A7D5D4AFA680E6106F22975A9911.png" alt="Screen Shot 2018-03-07 at 15.20.43.png"></p><h4 id="‰ΩéÁª¥Á∫øÊÄß‰∏çÂèØÂàÜÂà∞È´òÁª¥Á∫øÊÄßÂèØÂàÜÁöÑÁÆÄÂçï‰æãÂ≠ê">‰ΩéÁª¥Á∫øÊÄß‰∏çÂèØÂàÜÂà∞È´òÁª¥Á∫øÊÄßÂèØÂàÜÁöÑÁÆÄÂçï‰æãÂ≠ê</h4><figure><img src="AAB7D8B8F27F9125ED34BDE4F647DC9C.png" alt="Screen Shot 2018-03-07 at 15.39.51.png"><figcaption>Screen Shot 2018-03-07 at 15.39.51.png</figcaption></figure><p><strong>‰∏Ä‰∏™Ê†∏ÂáΩÊï∞Êää‰ΩéÁª¥Á©∫Èó¥Êò†Â∞ÑÂà∞È´òÁª¥Á©∫Èó¥ÁöÑ‰æãÂ≠ê</strong></p><p>‰∏ãÈù¢ËøôÂº†Âõæ‰Ωç‰∫éÁ¨¨‰∏Ä„ÄÅ‰∫åË±°ÈôêÂÜÖ„ÄÇÊàë‰ª¨ÂÖ≥Ê≥®Á∫¢Ëâ≤ÁöÑÈó®Ôºå‰ª•Âèä‚ÄúÂåó‰∫¨ÂõõÂêàÈô¢‚ÄùËøôÂá†‰∏™Â≠ó‰∏ãÈù¢ÁöÑÁ¥´Ëâ≤ÁöÑÂ≠óÊØç„ÄÇÊàë‰ª¨ÊääÁ∫¢Ëâ≤ÁöÑÈó®‰∏äÁöÑÁÇπÁúãÊàêÊòØ‚Äú+‚ÄùÊï∞ÊçÆÔºåÁ¥´Ëâ≤Â≠óÊØç‰∏äÁöÑÁÇπÁúãÊàêÊòØ‚Äú-‚ÄùÊï∞ÊçÆÔºåÂÆÉ‰ª¨ÁöÑÊ®™„ÄÅÁ∫µÂùêÊ†áÊòØ‰∏§‰∏™ÁâπÂæÅ„ÄÇÊòæÁÑ∂ÔºåÂú®Ëøô‰∏™‰∫åÁª¥Á©∫Èó¥ÂÜÖÔºå‚Äú+‚Äù‚Äú-‚Äù‰∏§Á±ªÊï∞ÊçÆ‰∏çÊòØÁ∫øÊÄßÂèØÂàÜÁöÑ„ÄÇ <img src="kernel1.png"></p><p>Êàë‰ª¨Áé∞Âú®ËÄÉËôëÊ†∏ÂáΩÊï∞ÔºåÂç≥‚ÄúÂÜÖÁßØÂπ≥Êñπ‚Äù„ÄÇËøôÈáåÈù¢ÊòØ‰∫åÁª¥Á©∫Èó¥‰∏≠ÁöÑ‰∏§‰∏™ÁÇπ„ÄÇËøô‰∏™Ê†∏ÂáΩÊï∞ÂØπÂ∫îÁùÄ‰∏Ä‰∏™‰∫åÁª¥Á©∫Èó¥Âà∞‰∏âÁª¥Á©∫Èó¥ÁöÑÊò†Â∞ÑÔºåÂÆÉÁöÑË°®ËææÂºèÊòØÔºöÂèØ‰ª•È™åËØÅÔºåÂú®PËøô‰∏™Êò†Â∞Ñ‰∏ãÔºåÂéüÊù•‰∫åÁª¥Á©∫Èó¥‰∏≠ÁöÑÂõæÂú®‰∏âÁª¥Á©∫Èó¥‰∏≠ÁöÑÂÉèÊòØËøô‰∏™Ê†∑Â≠êÔºö <img src="kernel2.png" alt="kernel2.png"></p><p>(ÂâçÂêéËΩ¥‰∏∫xËΩ¥ÔºåÂ∑¶Âè≥ËΩ¥‰∏∫yËΩ¥Ôºå‰∏ä‰∏ãËΩ¥‰∏∫zËΩ¥ÔºâÊ≥®ÊÑèÂà∞ÁªøËâ≤ÁöÑÂπ≥Èù¢ÂèØ‰ª•ÂÆåÁæéÂú∞ÂàÜÂâ≤Á∫¢Ëâ≤ÂíåÁ¥´Ëâ≤Ôºå‰πüÂ∞±ÊòØËØ¥Ôºå‰∏§Á±ªÊï∞ÊçÆÂú®‰∏âÁª¥Á©∫Èó¥‰∏≠ÂèòÊàêÁ∫øÊÄßÂèØÂàÜÁöÑ‰∫Ü„ÄÇËÄå‰∏âÁª¥‰∏≠ÁöÑËøô‰∏™Âà§ÂÜ≥ËæπÁïåÔºåÂÜçÊò†Â∞ÑÂõû‰∫åÁª¥Á©∫Èó¥‰∏≠ÊòØËøôÊ†∑ÁöÑÔºö <img src="kernel3.png" alt="kernel3.png"></p><p>ËøôÊòØ‰∏ÄÊù°ÂèåÊõ≤Á∫øÔºåÂÆÉ‰∏çÊòØÁ∫øÊÄßÁöÑ„ÄÇ</p><p><strong>Ê†∏ÂáΩÊï∞ÁöÑ‰ΩúÁî®Â∞±ÊòØÈöêÂê´ÁùÄ‰∏Ä‰∏™‰ªé‰ΩéÁª¥Á©∫Èó¥Âà∞È´òÁª¥Á©∫Èó¥ÁöÑÊò†Â∞ÑÔºåËÄåËøô‰∏™Êò†Â∞ÑÂèØ‰ª•Êää‰ΩéÁª¥Á©∫Èó¥‰∏≠Á∫øÊÄß‰∏çÂèØÂàÜÁöÑ‰∏§Á±ªÁÇπÂèòÊàêÁ∫øÊÄßÂèØÂàÜÁöÑ</strong>„ÄÇÂΩìÁÑ∂ÔºåÊàë‰∏æÁöÑËøô‰∏™ÂÖ∑‰Ωì‰æãÂ≠êÂº∫ÁÉàÂú∞‰æùËµñ‰∫éÊï∞ÊçÆÂú®ÂéüÂßãÁ©∫Èó¥‰∏≠ÁöÑ‰ΩçÁΩÆ„ÄÇ‰∫ãÂÆû‰∏≠‰ΩøÁî®ÁöÑÊ†∏ÂáΩÊï∞ÂæÄÂæÄÊØîËøô‰∏™‰æãÂ≠êÂ§çÊùÇÂæóÂ§ö„ÄÇÂÆÉ‰ª¨ÂØπÂ∫îÁöÑÊò†Â∞ÑÂπ∂‰∏ç‰∏ÄÂÆöËÉΩÂ§üÊòæÂºèÂú∞Ë°®ËææÂá∫Êù•ÔºõÂÆÉ‰ª¨Êò†Â∞ÑÂà∞ÁöÑÈ´òÁª¥Á©∫Èó¥ÁöÑÁª¥Êï∞‰πüÊØîÊàë‰∏æÁöÑ‰æãÂ≠êÔºà‰∏âÁª¥ÔºâÈ´òÂæóÂ§öÔºåÁîöËá≥ÊòØÊó†Á©∑Áª¥ÁöÑ„ÄÇËøôÊ†∑ÔºåÂ∞±ÂèØ‰ª•ÊúüÂæÖÂéüÊù•Âπ∂‰∏çÁ∫øÊÄßÂèØÂàÜÁöÑ‰∏§Á±ªÁÇπÂèòÊàêÁ∫øÊÄßÂèØÂàÜÁöÑ‰∫Ü„ÄÇ</p><h3 id="svm-or-logistic-regression">SVM or Logistic Regression</h3><figure><img src="5A07E8FF157593A05A55A2DC50EA8682.png" alt="Screen Shot 2018-03-07 at 15.42.11.png"><figcaption>Screen Shot 2018-03-07 at 15.42.11.png</figcaption></figure><ul><li>Â¶ÇÊûúÁâπÂæÅÁª¥Êï∞ÂæàÈ´òÔºåÂæÄÂæÄÁ∫øÊÄßÂèØÂàÜÔºàSVMËß£ÂÜ≥ÈùûÁ∫øÊÄßÂàÜÁ±ªÈóÆÈ¢òÁöÑÊÄùË∑ØÂ∞±ÊòØÂ∞ÜÊ†∑Êú¨Êò†Â∞ÑÂà∞Êõ¥È´òÁª¥ÁöÑÁâπÂæÅÁ©∫Èó¥‰∏≠ÔºâÔºåÂèØ‰ª•ÈááÁî®LRÊàñËÄÖÁ∫øÊÄßÊ†∏ÁöÑSVMÔºõ</li><li>Â¶ÇÊûúÊ†∑Êú¨Êï∞ÈáèÂæàÂ§öÔºåÁî±‰∫éÊ±ÇËß£ÊúÄ‰ºòÂåñÈóÆÈ¢òÁöÑÊó∂ÂÄôÔºåÁõÆÊ†áÂáΩÊï∞Ê∂âÂèä‰∏§‰∏§Ê†∑Êú¨ËÆ°ÁÆóÂÜÖÁßØÔºå‰ΩøÁî®È´òÊñØÊ†∏ÊòéÊòæËÆ°ÁÆóÈáè‰ºöÂ§ß‰∫éÁ∫øÊÄßÊ†∏ÔºåÊâÄ‰ª•ÊâãÂä®Ê∑ªÂä†‰∏Ä‰∫õÁâπÂæÅÔºå‰ΩøÂæóÁ∫øÊÄßÂèØÂàÜÔºåÁÑ∂ÂêéÂèØ‰ª•Áî®LRÊàñËÄÖÁ∫øÊÄßÊ†∏ÁöÑSVMÔºõ</li><li>Â¶ÇÊûú‰∏çÊª°Ë∂≥‰∏äËø∞‰∏§ÁÇπÔºåÂç≥ÁâπÂæÅÁª¥Êï∞Â∞ëÔºåÊ†∑Êú¨Êï∞ÈáèÊ≠£Â∏∏ÔºåÂèØ‰ª•‰ΩøÁî®È´òÊñØÊ†∏ÁöÑSVM„ÄÇ</li></ul><h2 id="clustering">Clustering</h2><h3 id="k-means-algorithm">K-means algorithm</h3><p>K-meansÁÆóÊòØ‰∏Ä‰∏™ÂæàÁÆÄÂçïÁöÑËÅöÁ±ªÁÆóÊ≥ïÔºåËÄåËÅöÁ±ª‰∏éÂÜ≥Á≠ñÊ†ë„ÄÅSVMÁ≠â‰∏çÂêåÔºåÊòØ‰∏ÄÁßçÊó†ÁõëÁù£ÁöÑÂ≠¶‰π†ÔºåÊâÄË∞ìÊó†ÁõëÁù£Â≠¶‰π†ÔºàUnsupervised learningÔºâÊòØÂíåÁõëÁù£Â≠¶‰π†Áõ∏ÂØπÂ∫îÁöÑÔºå‰∏çÂêå‰∫éÁõëÁù£Â≠¶‰π†ÔºåÊó†ÁõëÁù£Â≠¶‰π†ÊâÄÁªôÁöÑËÆ≠ÁªÉÈõÜÊòØ‰∏çÂåÖÂê´Ê†áÁ≠æÁöÑÔºåÊâÄÊúâÊï∞ÊçÆÈõÜÈÉΩÂè™ÂåÖÊã¨ÁâπÂæÅxi ËÄåÊ≤°ÊúâÊ†áÁ≠æyi „ÄÇ ËÅöÁ±ªÁöÑ‰∏ªË¶ÅÁõÆÁöÑÂ∞±ÊòØÂ∞ÜËøô‰∫õÊ≤°ÊúâÊ†áÁ≠æÁöÑÊï∞ÊçÆÂàÜ‰∏∫N‰∏™Á∞á(cluster)ÔºåÂÖ∂‰∏ªË¶ÅÁöÑÂ∫îÁî®ÊúâÂ∏ÇÂú∫ÂàíÂàÜ„ÄÅÁ§æ‰∫§ÁΩëÁªúÂàÜÊûê„ÄÅÂ§©ÊñáÂ≠¶‰∏≠ÁöÑÊï∞ÊçÆÂàÜÊûêÁ≠âÁ≠â„ÄÇ</p><h4 id="k-meansÁöÑÊèèËø∞Â¶Ç‰∏ã">K-MeansÁöÑÊèèËø∞Â¶Ç‰∏ãÔºö</h4><p><img src="2913E850736A05A1A23A00CA88B16858.png" alt="Screen Shot 2018-03-07 at 15.58.11.png"> ÂÖàÂØπÂèÇÊï∞ËøõË°åËØ¥ÊòéÔºö</p><ul><li><span class="math inline">\(x^{(i)}\)</span>‰∏∫Á¨¨i‰∏™Êï∞ÊçÆÁÇπÔºõ</li><li><span class="math inline">\(c^{(i)}\)</span> ‰∏∫x^{(i)}ÁöÑÁ∞áÔºõ</li><li><span class="math inline">\(u_j\)</span>‰∏∫Á¨¨j‰∏™Á∞áÁöÑË¥®ÂøÉÁÇπÔºõ</li></ul><p>Âú®ÂØπÁÆóÊ≥ïËøõË°åËØ¥ÊòéÔºö</p><ol type="1"><li>È¶ñÂÖàÈúÄË¶ÅÂàùÂßãÂåñË¥®ÂøÉÁÇπÔºåÂú®K-Means‰∏≠ÔºåÈÄöÂ∏∏ÈááÁî®ÈöèÊú∫ÁöÑÊñπÊ≥ïÂØπË¥®ÂøÉÁÇπËøõË°åÂàùÂßãÂåñ„ÄÇÊõ¥Â•ΩÁöÑÂäûÊ≥ïÊòØÔºöÈöèÊú∫ÈÄâÊã©m(m&gt;k)‰∏™Êï∞ÊçÆÔºåÂÜç‰ªé‰∏≠ÈÄâÊã©k‰∏™Êï∞ÊçÆÁÇπ‰Ωú‰∏∫Ë¥®ÂøÉÁÇπÔºõ</li><li>Á¨¨‰∏Ä‰∏™forÂæ™ÁéØ‰∏ªË¶ÅÁî®‰∫éÁªôÊï∞ÊçÆÁÇπ<span class="math inline">\(x^{(i)}\)</span>ËµãÂÄº<span class="math inline">\(c^{(i)}\)</span>ÔºåÁß∞‰∏∫ cluster assignment stepsÔºåÂØπÊØè‰∏Ä‰∏™Êï∞ÊçÆÁÇπÔºåÈÉΩ‰ºöËÆ°ÁÆóÂ•π‰∏éÊâÄÊúâË¥®ÂøÉÁÇπÁöÑË∑ùÁ¶ªÔºåËÄåÂêéÂ∞ÜÊï∞ÊçÆÁÇπÂàÜÈÖçÂà∞‰∏éÂÆÉË∑ùÁ¶ªÊúÄËøëÁöÑÁ∞áÔºõ</li><li>Á¨¨‰∫å‰∏™forÂæ™ÁéØ‰∏ªË¶ÅÁî®‰∫éÊõ¥Êñ∞Ë¥®ÂøÉÁÇπÁöÑ‰ΩçÁΩÆÔºåÁß∞‰∏∫move centroid stepsÔºåËÄå<span class="math inline">\(u_j\)</span>ËøôÈáåÁöÑËÆ°ÁÆóÂÖ¨ÂºèÊâÄ‰ª£Ë°®ÁöÑÊÑèÊÄùÂ∞±ÊòØÔºåÂàÜÊØçÔºöÁªüËÆ°ÊâÄÊúâ<span class="math inline">\(c_i=j\)</span>ÁöÑÁÇπÁöÑ‰∏™Êï∞ÔºõÂàÜÂ≠êÊòØÊâÄÊúâ<span class="math inline">\(c_i=j\)</span>ÁöÑÁÇπÁöÑÂùêÊ†áÂíå„ÄÇÈÇ£Êï¥‰ΩìÁöÑÊÑèÊÄùÂ∞±ÂæàÊòéÁ°Æ‰∫ÜÔºåÂ∞±ÊòØÊ±ÇËøô‰∫õÁÇπÁöÑÂπ≥ÂùáÂÄºÔºå‰Ωú‰∏∫Êñ∞ÁöÑË¥®ÂøÉÁÇπÁöÑ‰ΩçÁΩÆ„ÄÇ</li></ol><p>ÂΩìcÂíåuÊî∂Êïõ‰πãÂêéÔºåÂ∞±ÂèØ‰ª•ÁªìÊùüÊï¥‰∏™Ëø≠‰ª£ËøáÁ®ã„ÄÇ‰∏ãÈù¢Áúã‰∏Ä‰∏™ÂÆû‰æãÔºö <img src="D4109680581A6961A99333E7F1D2A3CA.png" alt="Screen Shot 2018-03-07 at 16.01.51.png"></p><h4 id="‰ºòÂåñÁõÆÊ†á">‰ºòÂåñÁõÆÊ†á</h4><p>Âú®‰∏ä‰∏ÄÈÉ®ÂàÜ‰∏≠ÔºåÊàë‰ª¨ËØ¥ÊúÄÁªàÁöÑÁõÆÁöÑÊòØË¶ÅËææÂà∞‰∏Ä‰∏™Êî∂ÊïõÔºåÈÇ£Êàë‰ª¨Â∞±Áî®‰∏Ä‰∏™Â§±ÁúüÂáΩÊï∞Ôºàdistortion functionÔºâÊù•Ë°°Èáè„ÄÇ <img src="C24A569CCC459360C8AEEDA750934B83.png" alt="Screen Shot 2018-03-07 at 16.03.03.png"> J(c,u)ÂÆûÈôÖ‰∏äÊòØ‰∏Ä‰∏™ÂçïË∞ÉÈÄíÂáèÁöÑÂáΩÊï∞Ôºå‰∏îÊòØ‰∏Ä‰∏™ÈùûÂá∏ÂáΩÊï∞ÔºåÂè™Ë¶ÅÊàë‰ª¨ËÉΩÊâæÂà∞ÊãêÁÇπÔºåÈÇ£Êàë‰ª¨Â∞±Â∑≤ÁªèËææÂà∞‰∫ÜÊî∂ÊïõÔºåÂèàÁß∞ËøôÁßçÊñπÊ≥ï‰∏∫elbow function„ÄÇÂÅ∂Â∞î‰πüÊúâÂèØËÉΩÈô∑ÂÖ•Â±ÄÈÉ®ÊúÄ‰ºòÊÉÖÂÜµÔºåÊàñÂá∫Áé∞ÈúáËç°ÊÉÖÂÜµÔºåËøôÊ†∑‰∏ÄÂÆöÊòØÊúâÈóÆÈ¢ò‰∫Ü„ÄÇ</p><figure><img src="E10F16584B1406033AE772380CFA7B0D.png" alt="Screen Shot 2018-03-07 at 16.23.13.png"><figcaption>Screen Shot 2018-03-07 at 16.23.13.png</figcaption></figure><p>####ÊÄªÁªì K-MeansËôΩÁÑ∂ÁÆÄÂçïÔºåÂÆπÊòìÂÆûÁé∞Ôºå‰ΩÜÊòØ‰πü‰ºöÊî∂ÊïõÂà∞Â±ÄÈÉ®ÊúÄÂ∞èÂÄºÔºåËøôÁßçÊÉÖÂÜµ‰∏ãÂèØ‰ª•ÈááÁî®K-MeansÁöÑÊîπËøõÁÆóÊ≥ïÔºö‰∫åÂàÜK-ÂùáÂÄºÁÆóÊ≥ï„ÄÇÁÆóÊ≥ïÁöÑÊÄùÊÉ≥Â∞±ÊòØÔºöÈ¶ñÂÖàÂ∞ÜÊâÄÊúâÁÇπÂÅö‰∏∫‰∏Ä‰∏™Á∞áÔºåÁÑ∂ÂêéÂ∞ÜËØ•Á∞á‰∏ÄÂàÜ‰∏∫‰∫å„ÄÇ‰πãÂêéÈÄâÊã©ÂÖ∂‰∏≠‰∏Ä‰∏™Á∞áËøõË°åÁªßÁª≠ÂàíÂàÜÔºåÈÄâÊã©Âì™‰∏Ä‰∏™Á∞áËøõË°åÂàíÂàÜÂàôÂèñÂÜ≥‰∫éÂØπÂÖ∂ÂàíÂàÜÊòØÂê¶ÂèØ‰ª•ÊúÄÂ§ßÁ®ãÂ∫¶Èôç‰ΩéSSEÁöÑÂÄºÔºå‰∏çÊñ≠ÂàíÂàÜÁõ¥Âà∞ËææÂà∞Áî®Êà∑ÊâÄÊåáÂÆöÁöÑKÂÄº„ÄÇ</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*-coding:utf8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadDataSet</span><span class="params">(fileName)</span>:</span></span><br><span class="line">    dataMat = []</span><br><span class="line">    fr = open(fileName)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> fr.readlines():</span><br><span class="line">        curLine = line.strip().split(<span class="string">'/t'</span>)</span><br><span class="line">        fltLine = map(float, curLine)</span><br><span class="line">        dataMat.append(fltLine)</span><br><span class="line">    <span class="keyword">return</span> dataMat</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">distEclud</span><span class="params">(vecA, vecB)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> sqrt(sum(power(vecA - vecB), <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">randCent</span><span class="params">(dataSet, k)</span>:</span></span><br><span class="line">    n = shape(dataSet)[<span class="number">1</span>]</span><br><span class="line">    centroids = mat(zeros(k,n))</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">        minJ = min(dataSet[:, j])</span><br><span class="line">        rangeJ = float(max(dataSet[:, j]) - minJ)</span><br><span class="line">        centroids[:, j] = minJ + rangeJ*random.rand(k, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> centroids</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kMeans</span><span class="params">(dataSet, k, distMeas = distEclud, createCent = randCent)</span>:</span></span><br><span class="line">    <span class="comment"># Á°ÆÂÆöÊï∞ÊçÆÈõÜÁöÑÂ§ßÂ∞è</span></span><br><span class="line">    m = shape(dataSet)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># Âª∫Á´ãÁü©ÈòµÊù•Â≠òÂÇ®c(i)Âíåx(i)Ë∑ùÁ¶ªu(c(i))ÁöÑÂÄº</span></span><br><span class="line">    clusterAssment = mat(zeros(m,<span class="number">2</span>))</span><br><span class="line">    <span class="comment">#ÈöèÊú∫ÂàùÂßãÂåñË¥®ÂøÉ</span></span><br><span class="line">    centroids= createCent(dataSet, k)</span><br><span class="line">    <span class="comment"># ËÆæÁΩÆÊ†áÂøó‰Ωç</span></span><br><span class="line">    clusterChanged = <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">while</span> clusterChanged:</span><br><span class="line">        clusterChanged = <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">            minDist = inf; minIndex = <span class="number">-1</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(k):</span><br><span class="line">                distJI = distMeas(centroids[k, :], dataSet[i, :])</span><br><span class="line">                <span class="keyword">if</span> distJI &lt; minDist :</span><br><span class="line">                    minDist = distJI; minIndex = j</span><br><span class="line">                <span class="keyword">if</span> clusterAssment[i, <span class="number">0</span>] != minIndex:</span><br><span class="line">                    clusterChanged = <span class="keyword">True</span></span><br><span class="line">                clusterAssment[i, :] = minIndex,minDist**<span class="number">2</span></span><br><span class="line">            <span class="keyword">print</span> centroids</span><br><span class="line">        <span class="keyword">for</span> cent <span class="keyword">in</span> range(k):</span><br><span class="line">            ptsInClust = dataSet[nonzero(clusterAssment[:, <span class="number">0</span>].A == cent)[<span class="number">0</span>]]</span><br><span class="line">            centroids[cent, :] = mean(ptsInClust, axis=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> centroids, clusterAssment</span><br></pre></td></tr></table></figure><h2 id="dimensionality-reducion">Dimensionality Reducion</h2><p>why we need to do Dimensionality Reducion? - data compression - visually</p><p>###PCAÂÆû‰æã</p><p>Áé∞Âú®ÂÅáËÆæÊúâ‰∏ÄÁªÑÊï∞ÊçÆÂ¶Ç‰∏ãÔºö <img src="97F9AAF567C76B2E110902B387CB675D.png" alt="Screen Shot 2018-03-07 at 17.41.36.png"></p><p>Ë°å‰ª£Ë°®‰∫ÜÊ†∑‰æãÔºåÂàó‰ª£Ë°®ÁâπÂæÅÔºåËøôÈáåÊúâ10‰∏™Ê†∑‰æãÔºåÊØè‰∏™Ê†∑‰æã‰∏§‰∏™ÁâπÂæÅ„ÄÇÂèØ‰ª•ËøôÊ†∑ËÆ§‰∏∫ÔºåÊúâ10ÁØáÊñáÊ°£ÔºåxÊòØ10ÁØáÊñáÊ°£‰∏≠‚Äúlearn‚ÄùÂá∫Áé∞ÁöÑTF-IDFÔºåyÊòØ10ÁØáÊñáÊ°£‰∏≠‚Äústudy‚ÄùÂá∫Áé∞ÁöÑTF-IDF„ÄÇ</p><ol type="1"><li><p>ÂàÜÂà´Ê±ÇxÂíåyÁöÑÂπ≥ÂùáÂÄºÔºåÁÑ∂ÂêéÂØπ‰∫éÊâÄÊúâÁöÑÊ†∑‰æãÔºåÈÉΩÂáèÂéªÂØπÂ∫îÁöÑÂùáÂÄº„ÄÇËøôÈáåxÁöÑÂùáÂÄºÊòØ1.81ÔºåyÁöÑÂùáÂÄºÊòØ1.91ÔºåÈÇ£‰πà‰∏Ä‰∏™Ê†∑‰æãÂáèÂéªÂùáÂÄºÂêéÂç≥‰∏∫Ôºà0.69,0.49ÔºâÔºåÂæóÂà∞ <img src="445B9E9346DC3951CBCC4E00AFF8233F.png" alt="Screen Shot 2018-03-07 at 17.42.04.png"></p></li><li><p>Ê±ÇÁâπÂæÅÂçèÊñπÂ∑ÆÁü©ÈòµÔºåÂ¶ÇÊûúÊï∞ÊçÆÊòØ3Áª¥ÔºåÈÇ£‰πàÂçèÊñπÂ∑ÆÁü©ÈòµÊòØÔºö <img src="8B366D6943C32510584BC5CC2688F0A3.png" alt="Screen Shot 2018-03-07 at 17.42.30.png"> ËøôÈáåÂè™ÊúâxÂíåyÔºåÊ±ÇËß£Âæó <img src="16A0681193BE719B967C2944C43DAB35.png" alt="Screen Shot 2018-03-07 at 17.42.51.png"></p><p>ÂØπËßíÁ∫ø‰∏äÂàÜÂà´ÊòØxÂíåyÁöÑÊñπÂ∑ÆÔºåÈùûÂØπËßíÁ∫ø‰∏äÊòØÂçèÊñπÂ∑Æ„ÄÇÂçèÊñπÂ∑ÆÊòØË°°Èáè‰∏§‰∏™ÂèòÈáèÂêåÊó∂ÂèòÂåñÁöÑÂèòÂåñÁ®ãÂ∫¶„ÄÇÂçèÊñπÂ∑ÆÂ§ß‰∫é0Ë°®Á§∫xÂíåyËã•‰∏Ä‰∏™Â¢ûÔºåÂè¶‰∏Ä‰∏™‰πüÂ¢ûÔºõÂ∞è‰∫é0Ë°®Á§∫‰∏Ä‰∏™Â¢ûÔºå‰∏Ä‰∏™Âáè„ÄÇÂ¶ÇÊûúÔΩòÂíåÔΩôÊòØÁªüËÆ°Áã¨Á´ãÁöÑÔºåÈÇ£‰πà‰∫åËÄÖ‰πãÈó¥ÁöÑÂçèÊñπÂ∑ÆÂ∞±ÊòØÔºêÔºõ‰ΩÜÊòØÂçèÊñπÂ∑ÆÊòØÔºêÔºåÂπ∂‰∏çËÉΩËØ¥ÊòéÔΩòÂíåÔΩôÊòØÁã¨Á´ãÁöÑ„ÄÇÂçèÊñπÂ∑ÆÁªùÂØπÂÄºË∂äÂ§ßÔºå‰∏§ËÄÖÂØπÂΩºÊ≠§ÁöÑÂΩ±ÂìçË∂äÂ§ßÔºåÂèç‰πãË∂äÂ∞è„ÄÇÂçèÊñπÂ∑ÆÊòØÊ≤°ÊúâÂçï‰ΩçÁöÑÈáèÔºåÂõ†Ê≠§ÔºåÂ¶ÇÊûúÂêåÊ†∑ÁöÑ‰∏§‰∏™ÂèòÈáèÊâÄÈááÁî®ÁöÑÈáèÁ∫≤ÂèëÁîüÂèòÂåñÔºåÂÆÉ‰ª¨ÁöÑÂçèÊñπÂ∑Æ‰πü‰ºö‰∫ßÁîüÊ†ëÊûù‰∏äÁöÑÂèòÂåñ„ÄÇ</p></li><li><p>Ê±ÇÂçèÊñπÂ∑ÆÁöÑÁâπÂæÅÂÄºÂíåÁâπÂæÅÂêëÈáèÔºåÂæóÂà∞Ôºö <img src="25BE90ADDD485AA80B3EE7ED0CE6A05F.png" alt="Screen Shot 2018-03-07 at 17.43.19.png"> ‰∏äÈù¢ÊòØ‰∏§‰∏™ÁâπÂæÅÂÄºÔºå‰∏ãÈù¢ÊòØÂØπÂ∫îÁöÑÁâπÂæÅÂêëÈáèÔºåÁâπÂæÅÂÄº0.0490833989ÂØπÂ∫îÁâπÂæÅÂêëÈáè‰∏∫ÔºåËøôÈáåÁöÑÁâπÂæÅÂêëÈáèÈÉΩÂΩí‰∏ÄÂåñ‰∏∫Âçï‰ΩçÂêëÈáè„ÄÇ</p></li><li><p>Â∞ÜÁâπÂæÅÂÄºÊåâÁÖß‰ªéÂ§ßÂà∞Â∞èÁöÑÈ°∫Â∫èÊéíÂ∫èÔºåÈÄâÊã©ÂÖ∂‰∏≠ÊúÄÂ§ßÁöÑk‰∏™ÔºåÁÑ∂ÂêéÂ∞ÜÂÖ∂ÂØπÂ∫îÁöÑk‰∏™ÁâπÂæÅÂêëÈáèÂàÜÂà´‰Ωú‰∏∫ÂàóÂêëÈáèÁªÑÊàêÁâπÂæÅÂêëÈáèÁü©Èòµ„ÄÇËøôÈáåÁâπÂæÅÂÄºÂè™Êúâ‰∏§‰∏™ÔºåÊàë‰ª¨ÈÄâÊã©ÂÖ∂‰∏≠ÊúÄÂ§ßÁöÑÈÇ£‰∏™ÔºåËøôÈáåÊòØ1.28402771ÔºåÂØπÂ∫îÁöÑÁâπÂæÅÂêëÈáèÊòØ(-0.677873399, -0.735178656)T„ÄÇ</p></li><li><p>Á¨¨‰∫îÊ≠•ÔºåÂ∞ÜÊ†∑Êú¨ÁÇπÊäïÂΩ±Âà∞ÈÄâÂèñÁöÑÁâπÂæÅÂêëÈáè‰∏ä„ÄÇÂÅáËÆæÊ†∑‰æãÊï∞‰∏∫mÔºåÁâπÂæÅÊï∞‰∏∫nÔºåÂáèÂéªÂùáÂÄºÂêéÁöÑÊ†∑Êú¨Áü©Èòµ‰∏∫DataAdjust(m<em>n)ÔºåÂçèÊñπÂ∑ÆÁü©ÈòµÊòØn</em>nÔºåÈÄâÂèñÁöÑk‰∏™ÁâπÂæÅÂêëÈáèÁªÑÊàêÁöÑÁü©Èòµ‰∏∫EigenVectors(n*k)„ÄÇÈÇ£‰πàÊäïÂΩ±ÂêéÁöÑÊï∞ÊçÆFinalData‰∏∫</p><p>FinalData(10<em>1) = DataAdjust(10</em>2Áü©Èòµ) x ÁâπÂæÅÂêëÈáè(-0.677873399, -0.735178656)T</p><p>ÂæóÂà∞ÁöÑÁªìÊûúÊòØÔºö <img src="6EC9504E29B572035ADE77A253E7AF30.png" alt="Screen Shot 2018-03-07 at 17.45.19.png"></p></li></ol><p>ËøôÊ†∑ÔºåÂ∞±Â∞ÜÂéüÂßãÊ†∑‰æãÁöÑnÁª¥ÁâπÂæÅÂèòÊàê‰∫ÜkÁª¥ÔºåËøôkÁª¥Â∞±ÊòØÂéüÂßãÁâπÂæÅÂú®kÁª¥‰∏äÁöÑÊäïÂΩ±„ÄÇ</p><p>‰∏äÈù¢ÁöÑÊï∞ÊçÆÂèØ‰ª•ËÆ§‰∏∫ÊòØlearnÂíåstudyÁâπÂæÅËûçÂêà‰∏∫‰∏Ä‰∏™Êñ∞ÁöÑÁâπÂæÅÂè´ÂÅöLSÁâπÂæÅÔºåËØ•ÁâπÂæÅÂü∫Êú¨‰∏ä‰ª£Ë°®‰∫ÜËøô‰∏§‰∏™ÁâπÂæÅ„ÄÇ‰∏äËø∞ËøáÁ®ãÂ¶Ç‰∏ãÂõæ2ÊèèËø∞Ôºö <img src="B76585DA48BB4AB940B6E528599E8D6A.png" alt="Screen Shot 2018-03-07 at 17.47.17.png"> Ê≠£Âè∑Ë°®Á§∫È¢ÑÂ§ÑÁêÜÂêéÁöÑÊ†∑Êú¨ÁÇπÔºåÊñúÁùÄÁöÑ‰∏§Êù°Á∫øÂ∞±ÂàÜÂà´ÊòØÊ≠£‰∫§ÁöÑÁâπÂæÅÂêëÈáèÔºàÁî±‰∫éÂçèÊñπÂ∑ÆÁü©ÈòµÊòØÂØπÁß∞ÁöÑÔºåÂõ†Ê≠§ÂÖ∂ÁâπÂæÅÂêëÈáèÊ≠£‰∫§ÔºâÔºåÊúÄÂêé‰∏ÄÊ≠•ÁöÑÁü©Èòµ‰πòÊ≥ïÂ∞±ÊòØÂ∞ÜÂéüÂßãÊ†∑Êú¨ÁÇπÂàÜÂà´ÂæÄÁâπÂæÅÂêëÈáèÂØπÂ∫îÁöÑËΩ¥‰∏äÂÅöÊäïÂΩ±„ÄÇ</p><h3 id="pcaÁöÑÁêÜËß£">pcaÁöÑÁêÜËß£</h3><figure><img src="06A21B1B72F1F5DDE6AA5AB859B5338A.png" alt="Screen Shot 2018-03-07 at 17.48.06.png"><figcaption>Screen Shot 2018-03-07 at 17.48.06.png</figcaption></figure><p>Âú®Á¨¨‰∏ÄÈÉ®ÂàÜ‰∏≠ÔºåÊàë‰ª¨‰∏æ‰∫Ü‰∏Ä‰∏™Â≠¶ÁîüÊàêÁª©ÁöÑ‰æãÂ≠êÔºåÈáåÈù¢ÁöÑÊï∞ÊçÆÁÇπÊòØÂÖ≠Áª¥ÁöÑÔºåÂç≥ÊØè‰∏™ËßÇÊµãÂÄºÊòØ6Áª¥Á©∫Èó¥‰∏≠ÁöÑ‰∏Ä‰∏™ÁÇπ„ÄÇÊàë‰ª¨Â∏åÊúõÂ∞Ü6Áª¥Á©∫Èó¥Áî®‰ΩéÁª¥Á©∫Èó¥Ë°®Á§∫„ÄÇ</p><p>ÂÖàÂÅáÂÆöÂè™Êúâ‰∫åÁª¥ÔºåÂç≥Âè™Êúâ‰∏§‰∏™ÂèòÈáèÔºåÂÆÉ‰ª¨Áî±Ê®™ÂùêÊ†áÂíåÁ∫µÂùêÊ†áÊâÄ‰ª£Ë°®ÔºõÂõ†Ê≠§ÊØè‰∏™ËßÇÊµãÂÄºÈÉΩÊúâÁõ∏Â∫î‰∫éËøô‰∏§‰∏™ÂùêÊ†áËΩ¥ÁöÑ‰∏§‰∏™ÂùêÊ†áÂÄºÔºõÂ¶ÇÊûúËøô‰∫õÊï∞ÊçÆÂΩ¢Êàê‰∏Ä‰∏™Ê§≠ÂúÜÂΩ¢Áä∂ÁöÑÁÇπÈòµÔºåÈÇ£‰πàËøô‰∏™Ê§≠ÂúÜÊúâ‰∏Ä‰∏™ÈïøËΩ¥Âíå‰∏Ä‰∏™Áü≠ËΩ¥„ÄÇÂú®Áü≠ËΩ¥ÊñπÂêë‰∏äÔºåÊï∞ÊçÆÂèòÂåñÂæàÂ∞ëÔºõÂú®ÊûÅÁ´ØÁöÑÊÉÖÂÜµÔºåÁü≠ËΩ¥Â¶ÇÊûúÈÄÄÂåñÊàê‰∏ÄÁÇπÔºåÈÇ£Âè™ÊúâÂú®ÈïøËΩ¥ÁöÑÊñπÂêëÊâçËÉΩÂ§üËß£ÈáäËøô‰∫õÁÇπÁöÑÂèòÂåñ‰∫ÜÔºõËøôÊ†∑ÔºåÁî±‰∫åÁª¥Âà∞‰∏ÄÁª¥ÁöÑÈôçÁª¥Â∞±Ëá™ÁÑ∂ÂÆåÊàê‰∫Ü„ÄÇ</p><p>‰∏äÂõæ‰∏≠Ôºåu1Â∞±ÊòØ‰∏ªÊàêÂàÜÊñπÂêëÔºåÁÑ∂ÂêéÂú®‰∫åÁª¥Á©∫Èó¥‰∏≠ÂèñÂíåu1ÊñπÂêëÊ≠£‰∫§ÁöÑÊñπÂêëÔºåÂ∞±ÊòØu2ÁöÑÊñπÂêë„ÄÇÂàôn‰∏™Êï∞ÊçÆÂú®u1ËΩ¥ÁöÑÁ¶ªÊï£Á®ãÂ∫¶ÊúÄÂ§ßÔºàÊñπÂ∑ÆÊúÄÂ§ßÔºâÔºåÊï∞ÊçÆÂú®u1‰∏äÁöÑÊäïÂΩ±‰ª£Ë°®‰∫ÜÂéüÂßãÊï∞ÊçÆÁöÑÁªùÂ§ßÈÉ®ÂàÜ‰ø°ÊÅØÔºåÂç≥‰Ωø‰∏çËÄÉËôëu2Ôºå‰ø°ÊÅØÊçüÂ§±‰πü‰∏çÂ§ö„ÄÇËÄå‰∏îÔºåu1„ÄÅu2‰∏çÁõ∏ÂÖ≥„ÄÇÂè™ËÄÉËôëu1Êó∂Ôºå‰∫åÁª¥Èôç‰∏∫‰∏ÄÁª¥„ÄÇ</p><p>Ê§≠ÂúÜÁöÑÈïøÁü≠ËΩ¥Áõ∏Â∑ÆÂæóË∂äÂ§ßÔºåÈôçÁª¥‰πüË∂äÊúâÈÅìÁêÜ„ÄÇ</p><h3 id="pca-ÁÆóÊ≥ïÁöÑÂ∫îÁî®">PCA ÁÆóÊ≥ïÁöÑÂ∫îÁî®</h3><figure><img src="FBEE1DE8219469657D328A73B990F4B1.png" alt="Screen Shot 2018-03-07 at 17.39.44.png"><figcaption>Screen Shot 2018-03-07 at 17.39.44.png</figcaption></figure><figure><img src="30CEB1BA6281642217A66686AA779309.png" alt="Screen Shot 2018-03-07 at 17.39.40.png"><figcaption>Screen Shot 2018-03-07 at 17.39.40.png</figcaption></figure><h2 id="anomaly-detection">Anomaly detection</h2><h3 id="gaussian-normal-distribution">Gaussian (Normal) distribution</h3><p><img src="89DB33558EA5D8DB9CE9A8F920302AC7.png" alt="Screen Shot 2018-03-08 at 10.44.47.png"> <img src="7F69F46B0710530FAF17D7B072F30FE2.png" alt="Screen Shot 2018-03-08 at 10.44.54.png"></p><h3 id="algorithm">Algorithm</h3><p><img src="326C2D7DB0ABAA31F3B066743DA4E952.png" alt="Screen Shot 2018-03-08 at 10.45.44.png"> <img src="4B3407492A9AD4A2691D065EE8A45B90.png" alt="Screen Shot 2018-03-08 at 10.45.54.png"></p><h3 id="algorithm-evaluation">Algorithm evaluation</h3><figure><img src="19C817E85A9773D8C78C389B093F4018.png" alt="Screen Shot 2018-03-08 at 10.46.44.png"><figcaption>Screen Shot 2018-03-08 at 10.46.44.png</figcaption></figure><h3 id="anomaly-detection-vs.-supervised-learning">Anomaly detection VS. Supervised learning</h3><p><img src="CB0F77E450FF10CF8B792FE18E9E27A8.png" alt="Screen Shot 2018-03-08 at 10.47.57.png"> <img src="DAA73F0D52ACA6D13385285D9B86F4A7.png" alt="Screen Shot 2018-03-08 at 10.48.08.png"></p><h3 id="choosing-what-features-to-use">Choosing what features to use</h3><p>‰∏ªË¶ÅÊÄùË∑ØÊòØÂ∞ÜÈùûÈ´òÊñØÂàÜÂ∏ÉÁöÑÁâπÂæÅÁªèËøáÂèòÊç¢ËΩ¨Êç¢ÊàêÈ´òÊñØÂàÜÂ∏ÉÁöÑÁâπÂæÅ <span class="math display">\[ eg.   x \rightarrow log(x) \]</span></p><figure><img src="B2F2DD96F9BC84ED6888B219BB0EFD86.png" alt="Screen Shot 2018-03-08 at 10.54.55.png"><figcaption>Screen Shot 2018-03-08 at 10.54.55.png</figcaption></figure><h3 id="error-analysis-for-anomaly-detection">Error analysis for anomaly detection</h3><p>Âà©Áî®ËØØÂ∑ÆÂàÜÊûêÂØªÊâæÊñ∞ÁâπÂæÅ <img src="9FB8C2DD8395B6420B19480D7218B016.png" alt="Screen Shot 2018-03-08 at 10.56.00.png"> <img src="7EE7A79016CC4E0E21CCC10881209FFB.png" alt="Screen Shot 2018-03-08 at 10.56.23.png"></p><p>##Recommender Systems <img src="B41983012DA9997F008BC750AA151407.png" alt="Screen Shot 2018-03-08 at 15.24.01.png"></p><p>Â∑≤Áü•ÁîµÂΩ±ÁöÑÁâπÂæÅ<span class="math inline">\(x_1,x_2\)</span>ÔºåÂØπÊØè‰∏Ä‰∏™Áî®Êà∑ÊãüÂêàÁ∫øÊÄßÂõûÂΩíÊ®°Âûã<span class="math inline">\(\theta^TX\)</span>, Ê≠§Êó∂ÊØè‰∏™ÁîµÂΩ±ÊòØ‰∏Ä‰∏™Ê†∑Êú¨Ôºå‰ºòÂåñÁõÆÊ†áÊòØÁîµÂΩ±ÁöÑËØÑÂàÜ„ÄÇ <img src="6FC3D54070FBC8962D939985A8E906FD.png" alt="Screen Shot 2018-03-08 at 15.24.54.png"> <img src="F11F7F90C3482A32FF53C62E748945B3.png" alt="Screen Shot 2018-03-08 at 15.28.31.png"> <img src="1476CE936D4E50E4C4EF1BF2AB51B61C.png" alt="Screen Shot 2018-03-08 at 15.28.38.png"></p><p>Â∑≤Áü•Áî®Êà∑ÂØπÁîµÂΩ±Á±ªÂûãÁöÑÂñúÂ•Ω <span class="math inline">\(\theta\)</span>, ÂØπÊØè‰∏Ä‰∏™Áî®Êà∑ÔºåÊãüÂêàÁ∫øÊÄßÂõûÂΩíÊ®°Âûã <span class="math inline">\(\theta^TX\)</span>, ‰ºòÂåñÁõÆÊ†áÊòØÁî®Êà∑ÂØπÁîµÂΩ±ÁöÑËØÑÂàÜÔºåÂõ†Ê≠§ÂèØ‰ª•Ê±ÇÂæóX,Âç≥ÁîµÂΩ±ÁöÑÁâπÂæÅ <img src="AE870871B8D0F2B6168071767FB6313E.png" alt="Screen Shot 2018-03-08 at 15.30.03.png"> <img src="1C0BABBAA61E385A9D4C7C01935B08AD.png" alt="Screen Shot 2018-03-08 at 15.37.35.png"></p><h3 id="collaborative-filtering-algorithm">Collaborative filtering algorithm</h3><p>Ê†πÊçÆÁî®Êà∑‰πãÈó¥ÁöÑÁõ∏‰ººÂ∫¶Êù•Êé®Ëçê <img src="7AAE33EDC45707F48780A5727E04F00A.png" alt="Screen Shot 2018-03-08 at 15.38.45.png"> <img src="F22E68EC45F61BCEF3FD3FAFE27F5FEE.png" alt="Screen Shot 2018-03-08 at 15.38.53.png"> <img src="1DE2721BA2D9BC55B44A678E819FC2DD.png" alt="Screen Shot 2018-03-08 at 15.43.17.png"></p><p>##Large scale machine learning</p><h3 id="stochastic-gradient-descent">Stochastic gradient descent</h3><p>ÊØèÊ¨°Âè™Áî®‰∏Ä‰∏™Ê†∑Êú¨Êù•ËÆ°ÁÆóÊ¢ØÂ∫¶ <img src="2DFBA34DED1CA9B1FCA8A121758440ED.png" alt="Screen Shot 2018-03-08 at 17.36.09.png"> <img src="900CF832B967330E295A9E1DFD0F6401.png" alt="Screen Shot 2018-03-08 at 17.36.23.png"> o ### Mini-batch gradient descent ÊØèÊ¨°Âà©Áî® n ‰∏™Ê†∑Êú¨Êù•ËÆ°ÁÆóÊ¢ØÂ∫¶ <img src="F910850F48DB2C6C0264A7C9F034DD7C.png" alt="Screen Shot 2018-03-08 at 17.36.58.png"></p><h3 id="online-learning">Online learning</h3><p>ÊäõÂºÉÂõ∫ÊúâÊï∞ÊçÆÈõÜÁöÑÊ¶ÇÂøµÔºåÊØèÊ¨°Áî®Êñ∞Êù•ÁöÑÊ†∑Êú¨Êù•Êõ¥Êñ∞Ê¢ØÂ∫¶ÔºåÁÑ∂ÂêéÊäõÂºÉËøô‰∏™Ê†∑Êú¨„ÄÇ <img src="895F1FBF5458B0E13DF2BB46F6923CD3.png" alt="Screen Shot 2018-03-08 at 17.38.35.png"></p>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning of Andrew Ng </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Feasibility of Learning</title>
      <link href="/Feasibility-of-Learning/2019/02/15/"/>
      <url>/Feasibility-of-Learning/2019/02/15/</url>
      
        <content type="html"><![CDATA[<h2 id="feasibility-of-learning">Feasibility of Learning</h2><blockquote><p>Êàë‰ª¨Â∏åÊúõÊâæÂà∞Êó†ÈôêÈÄºËøëÂÆûÈôÖÂáΩÊï∞fÁöÑÂÅáËÆæÂáΩÊï∞g</p></blockquote><p><img src="feasibility01.png"></p><ul><li><p><span class="math inline">\(g(hypothesis) \approx f(real function)\)</span> inside <span class="math inline">\(D\)</span>: sure!</p></li><li><p><span class="math inline">\(g(hypothesis) \approx f(real function)\)</span> outside <span class="math inline">\(D\)</span>: No! (what we want)</p></li></ul><h2 id="hoeffdings-inequality">Hoeffding‚Äôs Inequality</h2><p><img src="feasibility02.png"></p><p><span class="math display">\[P(| \nu-\mu| &gt; \epsilon)  \leqslant 2e^{-2\epsilon^{2}N}\]</span></p><ul><li>valid for all N and <span class="math inline">\(\epsilon\)</span></li><li>does not depend on <span class="math inline">\(\mu\)</span>, no need to know <span class="math inline">\(\mu\)</span></li><li>larger sample size N or looser gap <span class="math inline">\(\epsilon\)</span> =&gt; higher probability for <span class="math inline">\(\nu \approx \mu\)</span></li></ul><h2 id="connection-to-learning">Connection to Learning</h2><ul><li>if large N, can probably infer unknow <span class="math inline">\(\| h(x) \neq f(x) \|\)</span> by know <span class="math inline">\(\| h(x_{n} \neq y_n)\|\)</span></li><li><span class="math inline">\(E_{in}(h)\)</span>: Âú®Â∑≤Áü•ÁöÑÊ†∑Êú¨ÈáåÔºåÂÅáËÆæÂáΩÊï∞‰∏éÂÆûÈôÖÂáΩÊï∞‰∏çÁõ∏Á≠âÁöÑÊ¶ÇÁéá„ÄÇ<span class="math inline">\(E_{out}(h)\)</span>: Âú®ÊâÄÊúâÊ†∑Êú¨ÈáåÔºå‰∏äËø∞‰∫åËÄÖ‰∏çÁõ∏Á≠âÁöÑÊ¶ÇÁéá„ÄÇ</li><li><span class="math display">\[[|E_{in}(h) - E_{out}(h)| &gt; \epsilon] \leqslant 2e^{-2\epsilon^{2}N}\]</span></li><li><span class="math inline">\(E_{in}(h)\)</span> small is a good choice, but <span class="math inline">\(E_{in}(h)\)</span> is not always small.</li></ul><h2 id="multiple-h">multiple h</h2><p>Êé∑Á°¨Â∏ÅÔºåÊ±ÇÂá∫Áé∞ÂèçÈù¢ÁöÑÊ¶ÇÁéá„ÄÇ</p><h3 id="bad-sample">bad sample</h3><ul><li>Êé∑È™∞Â≠ê150Ê¨°ÔºåÊØèÊ¨°Êé∑5‰∏ãÔºåÊúâË∂ÖËøá99%ÁöÑÊ¶ÇÁéá‰ºöÂá∫Áé∞ËøûÁª≠5Ê¨°ÈÉΩÊòØÊ≠£Èù¢„ÄÇ</li><li>ËøôÂ∞±ÊòØ‰∏Ä‰∏™bad sampleÔºåÂõ†‰∏∫ÂÖ∂‰ΩøÂæó<span class="math inline">\(E_{in}(h)\)</span> far away <span class="math inline">\(E_{out}(h)\)</span><ul><li><span class="math inline">\(E_{in}(h)\)</span> = 0</li><li><span class="math inline">\(E_{out}(h)\)</span> = <span class="math inline">\(1/2\)</span></li></ul></li></ul><p>ÂØπ‰∫éM‰∏™ÂÅáËÆæÂáΩÊï∞ÔºåÂá∫Áé∞ bad sample ÁöÑÊ¶ÇÁéá: <img src="feasibility03.png" alt="feasibility03"></p><ul><li>ÊâÄÊúâÂÅáËÆæÂáΩÊï∞ÈÉΩÊòØÂÆâÂÖ®ÁöÑ</li><li>ÊúÄ‰ºòP‰∏∫lowest <span class="math inline">\(E_{in}(h_{m})\)</span></li></ul>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning Foundation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Types of Learning</title>
      <link href="/Types-of-Learning/2019/02/15/"/>
      <url>/Types-of-Learning/2019/02/15/</url>
      
        <content type="html"><![CDATA[<h2 id="learning-with-different-output-space-gamma">Learning with Different Output Space <span class="math inline">\(\gamma\)</span></h2><h3 id="binary-classification">Binary classification</h3><ul><li><p>Y = {‚àí1, +1}</p></li><li><figure><img src="binary.png" alt="binary classification"><figcaption>binary classification</figcaption></figure></li></ul><h3 id="multiclass-classification">Multiclass Classification</h3><ul><li>classify US coins (1c, 5c, 10c, 25c) by (size, mass)</li><li><span class="math inline">\(\gamma = {1c,5c,10c,25c}\)</span>,or <span class="math inline">\(\gamma = {1,2,¬∑¬∑¬∑ ,K}\)</span> (abstractly)</li><li>binary classification: special case with K =2</li><li><img src="multiclass.png" title="fig:" alt="multiclass.png"></li></ul><h3 id="regression">Regression</h3><ul><li><span class="math inline">\(\gamma = \mathbb{R}\)</span> or <span class="math inline">\(\gamma = [lower, upper] \subset \mathbb{R}\)</span> (bounded regression)</li></ul><h3 id="structured-learning-sequence-tagging-problem">Structured Learning: Sequence Tagging Problem</h3><ul><li>a fancy but complicated learning problem</li><li>sentence -&gt; structure (class of each word)</li><li><span class="math inline">\(\gamma = \{PVN,PVP,NVN,PV,¬∑¬∑¬∑\}\)</span>, not including VVVVV</li><li>huge multiclass classification problem (<span class="math inline">\(structure \equiv hyperclass\)</span>) without <strong>explicit</strong> class definition</li></ul><h2 id="learning-with-different-data-label-y_n">Learning with Different Data Label <span class="math inline">\(y_n\)</span></h2><h3 id="supervised-learning">Supervised learning</h3><ul><li>every <span class="math inline">\(x_n\)</span> comes with corresponding <span class="math inline">\(y_n\)</span></li></ul><h3 id="unsupervised-learning">Unsupervised learning</h3><ul><li>clustering<ul><li>articles -&gt; topics</li><li>consumer profiles -&gt; consumer groups</li></ul></li><li>density estimation: {xn} -&gt; density(x)<ul><li>i.e. traffic reports with location -&gt; dangerous areas</li></ul></li><li>outlier detection: {xn} -&gt; unusual(x)<ul><li>i.e. Internet logs -&gt; intrusion alert</li></ul></li></ul><h3 id="semi-supervised-learning">Semi-supervised learning</h3><ul><li>leverage unlabeled data to avoid <strong>expensive</strong> labeling</li><li><img src="semi.png"></li></ul><h3 id="reinforcement-learning">Reinforcement Learning</h3><ul><li>Teach Your Dog: Say <strong>Sit Down</strong><ul><li>cannot easily show the dog that <span class="math inline">\(y_n\)</span> = sit when <span class="math inline">\(x_n\)</span> = sit down</li><li>but can <strong>punish</strong> to say <span class="math inline">\(\hat{y_n}\)</span> = pee is wrong</li><li>but can <font color="red">reward</font> to say <span class="math inline">\(\hat{y_n}\)</span> = sit is good</li></ul></li><li>learn with <font color="red">partial/implicit</font> information (often sequentially)</li></ul><h2 id="learning-with-different-protocol-f-rightarrow-x_ny_n">Learning with different Protocol <span class="math inline">\(f \rightarrow (x_n,y_n)\)</span></h2><h3 id="batch-learning">Batch Learning</h3><ul><li>batch supervised multiclass classification: learn from all known data</li></ul><h3 id="online-learning">Online Learning:</h3><ul><li>hypothesis <strong>improves</strong> through receiving data instances <font color="red">sequentially</font></li></ul><h3 id="active-learning-learning-by-asking">Active Learning: Learning by ‚ÄòAsking‚Äô</h3><ul><li>improve hypothesis with fewer labels (hopefully) by asking questions <font color="red">strategically</font></li></ul><h2 id="learning-with-different-input-space-chi">Learning with different Input Space <span class="math inline">\(\chi\)</span></h2><ul><li><font color="red">concrete features</font>: each dimension of <span class="math inline">\(\chi \in \mathbb{R}\)</span> represents <strong>sophisticated physical meaning</strong></li><li><font color="red">Raw Features</font><ul><li>simple physical meaning; thus more difficult for ML than concrete features</li><li>often need human or machines to convert to concrete ones</li></ul></li><li><font color="red">Abstract Features</font>: again need <strong>feature conversion/extraction/construction</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning Foundation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Learning to answer Yes or No</title>
      <link href="/Learning-to-answer-Yes-or-No/2019/02/15/"/>
      <url>/Learning-to-answer-Yes-or-No/2019/02/15/</url>
      
        <content type="html"><![CDATA[<h2 id="what-hypothesis-set-can-we-use">What hypothesis set can we use?</h2><figure><img src="question.png" alt="question.png"><figcaption>question.png</figcaption></figure><h2 id="a-simple-hypothesis-set-the-perceptron">A Simple Hypothesis Set: the "Perceptron"</h2><ul><li>Perceptron in <span class="math inline">\(\mathbb{R}^2\)</span></li></ul><p><span class="math display">\[h(x) = sign(w_0 + w_1x_1 + w_2x_2)\]</span> <img src="perceptron.png" alt="perceptron"></p><ul><li>features x: points on the plane (or points in <span class="math inline">\(\mathbb{R}^d\)</span> )</li><li>labels y: (+1), √ó (-1)</li><li>hypothesis h: lines (or hyperplanes in <span class="math inline">\(\mathbb{R}^d\)</span> ),positive on one side of a line, negative on the other side</li><li>different line classifies simples differently</li></ul><blockquote class="blockquote-center">perceptrons &lt;=&gt; linear (binary) classifiers</blockquote><h2 id="select-g-from-mathscrh">Select g from <span class="math inline">\(\mathscr{H}\)</span></h2><ul><li>want: <span class="math inline">\(g \approx f\)</span> (hard when f unknown)</li><li>almost necessary: <span class="math inline">\(g \approx f\)</span> on D, ideally <span class="math inline">\(g(x_n) = f(x_n) = y_n\)</span></li><li>difficult: H is of infinite size</li><li>idea: start from some <span class="math inline">\(g_0\)</span>, and <font color="red">correct</font> its mistakes on <span class="math inline">\(D\)</span></li></ul><h2 id="perceptron-learning-algorithm">Perceptron Learning Algorithm</h2><p><img src="algo.png" alt="Perceptron Learning Algorithm"> <img src="PLA01.png" alt="PLA01.png"> <img src="PLA02.png" alt="PLA02.png"></p><ul><li>if PLA halts (i.e. no more mistakes), (necessary condition) <span class="math inline">\(D\)</span> allows some w to make no mistake</li><li>call such <span class="math inline">\(D\)</span> linear separable<ul><li><img src="seperate.png"></li></ul></li><li>as long as linear separable and correct by mistake<ul><li>inner product of <span class="math inline">\(w_f\)</span> and <span class="math inline">\(w_t\)</span> grows fast; length of wt grows slowly</li><li>PLA ‚Äòlines‚Äô are more and more aligned with <span class="math inline">\(w_f \rightarrow halts\)</span></li></ul></li></ul><h2 id="line-with-noise-tolerance">Line with Noise Tolerance</h2><p><span class="math inline">\(D\)</span> is not linear separable?</p><figure><img src="np.png" alt="not linear separable"><figcaption>not linear separable</figcaption></figure><h2 id="pocket-algorithm">Pocket Algorithm</h2><p><strong>Find the best weights in pocket until enough iterations</strong></p><figure><img src="pocket.png" alt="pocket algorithm"><figcaption>pocket algorithm</figcaption></figure><h3 id="question">Question</h3><blockquote><p>Since we do not know whether D is linear separable in advance, we may decide to just go with pocket instead of PLA. If D is actually linear separable, what‚Äôs the difference between the two?<br>1 pocket on D is slower than PLA<br>2 pocket on D is faster than PLA<br>3 pocket on D returns a better g in approximating f than PLA<br>4 pocket on D returns a worse g in approximating f than PLA</p></blockquote><blockquote><p>answer: Because pocket need to check whether <span class="math inline">\(w_{t+1}\)</span> is better than <span class="math inline">\(\hat{w}\)</span> in each iteration, it is slower than PLA. On linear separable D, <span class="math inline">\(w_{POCKET}\)</span> is the same as <span class="math inline">\(w_{PLA}\)</span>, both making no mistakes.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning Foundation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Learning Problems</title>
      <link href="/The%20Learning%20Problems/2019/02/14/"/>
      <url>/The%20Learning%20Problems/2019/02/14/</url>
      
        <content type="html"><![CDATA[<h3 id="the-learning-problems">The Learning Problems</h3><ul><li>When Can Machines Learn? (illustrative + technical)</li><li>Why Can Machines Learn? (theoretical + illustrative)</li><li>How Can Machines Learn? (technical + practical)</li><li>How Can Machines Learn Better? (practical + theoretical)</li></ul><h3 id="when-can-machines-learn">When Can Machines Learn?</h3><ol type="1"><li>Some definitions</li></ol><p><strong>Learning</strong>: acquiring skill with experience accumulated from <strong>observations</strong></p><p><strong>Machine learning</strong>: acquiring skill with experience accumulated/computed from data</p><blockquote><p>data -----&gt; ML ------&gt; sklill</p></blockquote><p><strong>Skill</strong>: improve some <strong>performance measure</strong> (e.g. prediction accuracy)</p><blockquote><p>data -----&gt; ML ------&gt; improved performance measure</p></blockquote><h3 id="the-machine-learning-route">The Machine Learning Route</h3><p>ML: an <font color="red">alternative route</font> to build complicated systems</p><blockquote><p>Give a computer a fish, you feed it for a day; teach it how to fish, you feed it for a lifetime</p></blockquote><h3 id="key-essence-of-machine-learning">Key Essence of Machine Learning</h3><p><strong>Improving some performance measure with experience computed from data</strong></p><ul><li>exists some <font color="red">underlying pattern</font> to be learned</li><li>but no programmable (easy) definition</li><li>omehow there is data about the pattern</li></ul><h3 id="formalize-the-learning-problem">Formalize the Learning Problem</h3><ul><li>inputs: <span class="math inline">\(x \in \chi\)</span></li><li><p>outputs:<span class="math inline">\(y\in \gamma\)</span></p></li><li><p>unknown pattern to be learned &lt;=&gt; target function</p></li></ul><p><span class="math display">\[f: \chi \rightarrow \gamma\]</span></p><ul><li><p>data &lt;=&gt; training examples <span class="math display">\[D = \{(x_1,y_1),(x_2,y_2),......(x_N,y_N)\}\]</span></p></li><li><p>hypothesis &lt;=&gt; skill with hopefully good performance</p></li></ul><p><span class="math display">\[g: \chi \rightarrow \gamma\]</span></p><h3 id="learning-flow">Learning Flow</h3><figure><img src="Learning%20Model.png" alt="Learning Model.png"><figcaption>Learning Model.png</figcaption></figure><h3 id="learning-model">Learning Model</h3><figure><img src="Learning%20Flow.png" alt="Learning Flow.png"><figcaption>Learning Flow.png</figcaption></figure><h3 id="practical-definition-of-machine-learning">Practical Definition of Machine Learning</h3><blockquote class="blockquote-center">Machine Learning: use data to compute <font color="red">hypothesis g</font> that approximates <font color="red">target f</font></blockquote><h3 id="relationships-between-machine-learnig-data-mining-artifical-intelligence-and-statics">Relationships between Machine Learnig, Data Mining, Artifical Intelligence and Statics</h3><ul><li>Machine Learning</li></ul><blockquote><p>use data to compute hypothesis g that approximates target f</p></blockquote><ul><li>Data Mining</li></ul><blockquote><p>use (huge) data to find property that is interesting</p></blockquote><ul><li>Artifical Intelligence</li></ul><blockquote><p>compute something that shows intelligent behavior</p></blockquote><ul><li>ML can realize AI, among other routes</li><li><p><span class="math inline">\(g \approx f\)</span> is something that shows intelligent behavior</p></li><li><p>Statics</p></li></ul><blockquote><p>use data to make inference about an unknown process</p></blockquote><ul><li>statistics is a useful tool for ML</li></ul>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning Foundation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Introduction to Cloud Computing</title>
      <link href="/Introduction-to-Cloud-Computing/2019/02/14/"/>
      <url>/Introduction-to-Cloud-Computing/2019/02/14/</url>
      
        <content type="html"><![CDATA[<h2 id="overview">Overview</h2><ul><li>Why this course is about distributed system comcepts in cloud?<ul><li>clouds are distributed system</li></ul></li><li>Cloud examples<ul><li>MapReduce and Hadoops</li></ul></li></ul><h2 id="introduction">Introduction</h2><ul><li>Customers save money and time</li></ul><h3 id="two-categories-of-cloud">Two categories of cloud</h3><ol type="1"><li>public<ul><li>provide service to any paying customer</li></ul></li><li>private<ul><li>accessbile only to company employees</li></ul></li></ol><h2 id="what-is-a-cloud">What is a cloud?</h2><ol type="1"><li><p>Informal definition &gt; lots of storage + compute circle nearby</p></li><li>Components<ol type="1"><li>a single-site cloud<ul><li>Compute nodes (grouped into racks) (servers)</li><li>Switches, connecting the racks</li><li>A network topology, e.g. hierarchical</li><li>Storage(backend) nodes, connecting to the network</li><li>Front-end for submiting jobs and receiveing client requests</li><li>Software services</li></ul></li><li>a geographically distributed cloud<ul><li>Mutiple such sites</li><li>Each site perhaps with different structures and services</li></ul></li></ol></li></ol><p><img src="Introduction-to-Clouds01.png"></p><h3 id="four-major-characteristics">Four major characteristics</h3><p>Distinguish today's clouds from previous generations of distributed computing systems and problems</p><ol type="1"><li><strong>Massive scale</strong> Massive-scale essentially means that data centers are very large. They contain tens of thousands, sometimes hundreds of thousands of servers and you could run your computation across as many servers as you want and as many servers as your application will scale</li><li><strong>On-demand access</strong> Pay-as-you-go, no upfront commitment. Anyone can access it<ul><li>HaaS: Hardware as a Service</li><li>IaaS: Infrastructure as a Service(Ex: Amazon Web Services (AWS: EC2 and S3))</li><li>PaaS: Platform as a Service(You get access to flexible computing and storage infrastructure, coupled with a software platform (often tightly), Ex: Google‚Äôs AppEngine (Python, Java, Go))</li><li>SaaS: Software as a Service(You get access to software services, when you need them. Often said to subsume SOA (Service Oriented Architectures), Ex: Google docs, MS Office on demand)</li></ul></li><li><strong>Data-intensive Nature</strong><ul><li>Typically store data at datacenters</li><li>Use compute nodes nearby</li><li>Compute nodes run computation services</li><li>In data-intensive computing, <strong>the focus shifts from computation to the data</strong>: CPU utilization no longer the most important resource metric, instead I/O is (disk and/or network)</li></ul></li><li><strong>New Cloud Programming Paradigms</strong><ul><li>MapReduce/Hadoop, NoSQL/Cassandra/MongoDB and many others.</li><li>Easy to write and run highly parallel programs in new cloud programming paradigms:</li></ul></li></ol><h2 id="a-cloud-is-a-distribyted-system">A cloud is a distribyted system</h2><ol type="1"><li>A cloud consists of<ul><li>Hundreds to thousands of machines in a datacenter (server side)</li><li>Thousands to millions of machines accessing these services (client side)</li></ul></li><li>Servers communicate amongst one another<ul><li>Distributed System</li><li>Essentially a cluster!</li></ul></li><li>Clients communicate with servers<ul><li>Also a distributed system!</li></ul></li><li>Clients also communicate with each other<ul><li>Also a distributed system!</li><li><img src="Introduction-to-Clouds02.png"></li></ul></li><li><strong>Four Features of Clouds = All Distributed Systems Features</strong></li><li><strong>Cloud = A Fancy Word for a Distributed System</strong></li></ol><h2 id="economics-of-clouds">Economics of clouds</h2><p><img src="Introduction-to-Clouds03.png"></p><h2 id="what-is-a-distributed-system">What is a distributed system</h2><ul><li>A distributed system is a collection of independent computers that appear to the users of the system as a single computer.[Andrew Tanenbaum]</li><li>A distributed system is several computers doing something together. Thus, a distributed system has three primary characteristics: multiple computers, interconnections, and shared state. [Michael Schroeder]</li><li>A distributed system is a collection of entities, each of which is <strong>autonomous</strong>, <strong>programmable</strong>, <strong>asynchronous</strong> and failure- prone, and which communicate through an unreliable communication medium.<ul><li><strong>programmable</strong>,Eliminates ‚ÄúHumans Interacting with each other‚Äù</li><li><strong>asynchronous</strong>, Distinguishes distributed systems from parallel systems (e.g., multiprocessor systems)</li></ul></li></ul><h3 id="our-interest-in-distributed-systems-involves">Our interest in distributed systems involves</h3><ul><li>algorithmics</li><li>design and implementation</li><li>maintenance,</li><li>study</li></ul><h2 id="mapreduce-paradigm">MapReduce paradigm</h2><ul><li>(map square (1,2,3,4))<ul><li>output: (1,4,9,16) process each record sequentially and independently</li></ul></li><li>(reduce + (1,4,9,16))<ul><li>(+16 (+9 (+4)))</li><li>output: 30 process set of all records in batches</li></ul></li></ul><h3 id="map">Map</h3><ul><li>Map task processes each record <strong>sequentially and independently</strong></li><li><strong>Parallelly</strong> process different map tasks <img src="Introduction-to-Clouds04.png"></li></ul><h3 id="reduce">Reduce</h3><ul><li>Reduce process set of all records in batches</li><li>Parallelly process by partitioning records <img src="Introduction-to-Clouds05.png"></li></ul><h2 id="mapreduce-scheduling">MapReduce Scheduling</h2><p>1.Externally, for the user: 1. write map program, write reduce program 2. submit job; wait for result 3. need to know nothing about parallel programming</p><ol start="2" type="1"><li>Internally, for the paradigm and scheduler<ol type="1"><li>Parallelize Map<ul><li>each Map task is independent</li><li>all Map output records with teh same key should assign to the same Reducer</li></ul></li><li>Transfer data from Map to Reduce</li><li>Parallelize Reduce<ul><li>each Reduce task is independent</li><li>use partition function</li></ul></li><li>Implement Storage for Map input, Map output, Reduce input, Reduce output<ul><li>Map input: DFS</li><li>Map output: local disk</li><li>Reduce input: remote disk</li><li>Reduce output: DFS</li></ul></li></ol></li></ol><p><img src="Introduction-to-Clouds06.png"></p><h3 id="the-yarn-scheduler">The YARN SCHEDULER</h3><ul><li>Used in Hadoop 2.x +</li><li>YARN = Yet Another Resource Negotiator</li><li>Treats each server as a collection of containers<ul><li>Container = some CPU + some memory</li></ul></li><li>Has 3 main components<ul><li>Global Resource Manager (RM)<ul><li>scheduling</li></ul></li><li>Per-server Node Manager (NM)<ul><li>Daemon and server-specific functions</li></ul></li><li>Per-application (job) Application Master (AM)<ul><li>Container negotiation with RM and NMs</li><li>Detecting task failures of that job</li></ul></li></ul></li></ul><p><img src="Introduction-to-Clouds07.png"></p><h3 id="mapreduce-example">MapReduce Example</h3><p><img src="Introduction-to-Clouds08.png"></p><h2 id="fault-tolerance">Fault tolerance</h2><ul><li>Server failure<ul><li>NM,AM heartbeats to RM</li><li>NM keep track of each task running at its server</li></ul></li><li>RM failure<ul><li>use old checkpoints and bring up secondary RM</li></ul></li></ul><h3 id="stragglers">stragglers</h3><ul><li>the slowest machine slows the entire job</li><li><strong>speculative exection</strong>: backup execction of straggler task</li></ul><h3 id="locality">Locality</h3><p><img src="Introduction-to-Clouds09.png"></p><p><strong>Reference from some slides from Coursera course <a href="https://www.coursera.org/learn/cloud-computing" target="_blank" rel="noopener">Cloud Computing</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> Cloud Computing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cloud Computing of UIUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gossip,Member,Grid</title>
      <link href="/Gossip-Member-Grid/2019/02/14/"/>
      <url>/Gossip-Member-Grid/2019/02/14/</url>
      
        <content type="html"><![CDATA[<h2 id="gossip">Gossip</h2><h3 id="tree-based-multicast-protocol">Tree-Based Multicast Protocol</h3><ul><li>Build a spanning tree among the processes of the multicast group</li><li>Use spanning tree to disseminate multicasts</li><li>Use either acknowledgments (ACKs) or negative acknowledgements (NAKs) to repair multicasts not received</li><li><strong>SRM</strong> (Scalable Reliable Multicast)<ul><li>Uses NAKs</li><li>But adds random delays, and uses exponential backoff to avoid NAK storms</li></ul></li><li><strong>RMTP</strong> (Reliable Multicast Transport Protocol)<ul><li>Uses ACKs</li><li>But ACKs only sent to designated receivers, which then re-transmit missing multicasts</li></ul></li><li>These protocols still cause an O(N) ACK/NAK overhead</li><li><img src="gossip_member_grid01.png" title="fig:" alt="gossip_member_grid01.png"></li></ul><h3 id="epidemic-multicast">Epidemic Multicast</h3><p><img src="gossip_member_grid02.png"></p><ul><li><strong>Push</strong> gossip<ul><li>Once you have a multicast message, you start gossiping about it</li><li>Multiple messages? Gossip a random subset of them, or recently-received ones, or higher priority ones</li></ul></li><li><strong>Pull</strong> gossip<ul><li>Periodically poll a few randomly selected processes for new multicast messages that you haven‚Äôt received</li><li>Get those messages</li></ul></li><li><strong>Hybrid variant</strong>: Push-Pull<ul><li>As the name suggests</li></ul></li></ul><h3 id="topology-aware-gossip">Topology-Aware Gossip</h3><p><img src="gossip_member_grid03.png"></p><ul><li>Network topology is hierachical</li><li>Random gossip target selection =&gt; core routers face O(N) load</li><li>In subnet i, which contains <span class="math inline">\(n_i\)</span> nodes, pick gossip target in your subnet with probability <span class="math inline">\(\frac{1}{n_i}\)</span></li><li>Router <span class="math inline">\(load=O(1)\)</span></li><li>Dissemination <span class="math inline">\(time=O(log(N))\)</span></li></ul><h2 id="member">Member</h2><p><img src="gossip_member_grid04.png"></p><p>two sub-protocals</p><ul><li>Failure Detection</li><li>Dissemination</li></ul><h3 id="failure-detection">Failure Detection</h3><p>some process find out the failure process quickly</p><ul><li>Desirable propertities<ul><li>Completeness (most important)</li><li>Accuracy</li><li>Speed</li><li>Scale</li></ul></li></ul><h4 id="gossip-style-failure-detection">Gossip Style Failure Detection</h4><p><img src="gossip_member_grid05.png"> <img src="gossip_member_grid06.png"></p><p><strong>Could use mylti-level Gossip</strong></p><h4 id="swim-failure-detection">Swim Failure Detection</h4><ul><li>Two choice for the <span class="math inline">\(P_j\)</span>(failure process)</li><li>Directed ping to <span class="math inline">\(P_j\)</span> and indirected ping to <span class="math inline">\(P_j\)</span> (Randomly select another process and then send ping to <span class="math inline">\(P_j\)</span>)</li><li>Constant time =&gt; <span class="math inline">\(O(1)\)</span></li><li><img src="gossip_member_grid07.png"></li></ul><h3 id="dissemination">Dissemination</h3><ul><li>Multicast Dissemination(Hardware/IP)<ul><li>unreliable</li></ul></li><li>Point-to-Point<ul><li>expensive</li></ul></li><li>Infection style Dissemination</li></ul><h3 id="suspicion-mechanism">Suspicion Mechanism</h3><p>Suspect a process before <strong>declaring</strong> it as failed in the group</p><p><img src="gossip_member_grid08.png"></p><h2 id="grid">Grid</h2><figure><img src="gossip_member_grid09.png" alt="gossip_member_grid09.png"><figcaption>gossip_member_grid09.png</figcaption></figure><p>two level scheduling infrastructure</p><ul><li>Inter-site protol</li><li>Globus</li><li>No single entity controls the entire infrastructure(federate)</li></ul><p><strong>Reference from some slides from Coursera course <a href="https://www.coursera.org/learn/cloud-computing" target="_blank" rel="noopener">Cloud Computing</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> Cloud Computing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cloud Computing of UIUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2P System</title>
      <link href="/P2P-System/2019/02/14/"/>
      <url>/P2P-System/2019/02/14/</url>
      
        <content type="html"><![CDATA[<h2 id="why-study-peer-to-peer-systems">Why Study Peer-to-Peer Systems?</h2><ul><li>First distributed systems that seriously focused on <strong>scalability</strong> with respect to number of nodes</li><li>P2P techniques abound in cloud computing systems</li></ul><h2 id="napster">Napster</h2><p>(ÂàõÂßã‰∫∫Sean Parker, ÁúãSocial NetworkÊó∂ÊúâËÆ≤Âà∞ÔºåÂìàÂìà)</p><h3 id="napster-structure">Napster Structure</h3><figure><img src="p2p01.png" alt="p2p01.png"><figcaption>p2p01.png</figcaption></figure><h3 id="client">Client</h3><ul><li>Connect to a Napster server<ul><li>Upload list of music files that you want to share</li><li>Server maintains list of &lt;filename, ip_address, port_num&gt; tuples.</li><li><strong>Server stores no files</strong>.</li></ul></li><li>Search<ul><li>Send server keywords to search with</li><li>Server searches its list with the keywords</li><li>Server returns a list of hosts ‚Äì &lt;ip_address, portnum&gt; tuples ‚Äì to client</li><li>Client pings each host in the list to find transfer rates</li><li>Client fetches file from best host</li></ul></li><li>All communication uses TCP (Transmission Control Protocol)<ul><li>Reliable and ordered networking protocol</li><li><img src="p2p01.png" title="fig:" alt="p2p01.png"></li></ul></li></ul><h3 id="joining-a-p2p-system">Joining a P2P system</h3><ul><li>Send an http request to well-known url for that P2P service - http://www.myp2pservice.com</li><li>Message routed (after lookup in DNS) to introducer, a well known server that keeps track of some recently joined nodes in p2p system</li><li>Introducer initializes new peers‚Äô neighbor table</li></ul><h2 id="gnutella">Gnutella</h2><ul><li>Eliminate the servers</li><li>Client machines search and retrieve amongst themselves</li><li>Clients act as servers too, called <strong>servents</strong></li><li>Gnutella protocol has 5 main message types<ul><li>Query (search)</li><li>QueryHit (response to query)</li><li>Ping (to probe network for other peers)</li><li>Pong (reply to ping, contains address of another peer)</li><li>Push (used to initiate file transfer)</li></ul></li></ul><h3 id="gnutella-structure">Gnutella Structure</h3><p><img src="p2p03.png" alt="p2p03.png"> - Connected in an <strong>overlay graph</strong></p><h3 id="search">Search</h3><p><img src="p2p04.png" alt="p2p04.png"> <img src="p2p05.png" alt="p2p05.png"> <img src="p2p06.png" alt="p2p06.png"></p><h3 id="avoiding-excessive-traffic">Avoiding excessive traffic</h3><ul><li>To avoid duplicate transmissions, each peer maintains a list of recently received messages</li><li>Query forwarded to all neighbors except peer from which received</li><li>Each Query (identified by DescriptorID) forwarded only once</li><li>QueryHit routed back only to peer from which Query received with same DescriptorID</li><li>Duplicates with same DescriptorID and Payload descriptor (msg type) are dropped</li><li>QueryHit with DescriptorID for which Query not seen is dropped</li></ul><h3 id="after-receiving-queryhit-messages">After receiving QueryHit messages</h3><ul><li><p>Requestor chooses ‚Äúbest‚Äù QueryHit responder <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /get/<span class="tag">&lt;<span class="name">File</span> <span class="attr">Index</span>&gt;</span>/<span class="tag">&lt;<span class="name">File</span> <span class="attr">Name</span>&gt;</span>/HTTP/1.0\r\n</span><br><span class="line">Connection: Keep-Alive\r\n </span><br><span class="line">Range: bytes=0-\r\n </span><br><span class="line">User-Agent: Gnutella\r\n \r\n</span><br></pre></td></tr></table></figure></p></li><li><p>Responder then replies with file packets after this message: <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTTP 200 OK\r\n</span><br><span class="line">Server: Gnutella\r\n </span><br><span class="line">Content-type:application/binary\r\n </span><br><span class="line">Content-length: 1024 \r\n</span><br><span class="line">\r\n</span><br></pre></td></tr></table></figure></p></li></ul><h3 id="dealing-with-firewalls">Dealing with Firewalls</h3><ul><li>Requestor sends Push to responder asking for file transfer</li><li><img src="p2p07.png" alt="p2p07.png"></li><li>Responder establishes a TCP connection at ip_address, port specified.</li><li>Requestor then sends GET to responder (as before) and file is transferred as explained earlier</li></ul><h3 id="ping-pong">Ping-Pong</h3><ul><li>Peers initiate Ping‚Äôs periodically</li><li>Ping‚Äôs flooded out like Query‚Äôs, Pong‚Äôs routed along reverse path like QueryHit‚Äôs</li><li>Pong replies used to update set of neighboring peers<ul><li>To keep neighbor lists fresh in spite of peers joining, leaving and failing</li></ul></li></ul><h3 id="gnutella-summary">Gnutella Summary</h3><ul><li>No servers</li><li>Peers/servents maintain ‚Äúneighbors,‚Äù this forms an overlay graph</li><li>Peers store their own files</li><li>Queries flooded out, ttl restricted</li><li>QueryHit (replies) reverse path routed</li><li>Supports file transfer through firewalls</li><li>Periodic ping-pong to continuously refresh neighbor lists</li></ul><h2 id="fasttrack">FastTrack</h2><ul><li>Hybrid between Gnutella and Napster</li></ul><h3 id="fasttrack-structure">FastTrack Structure</h3><p><img src="p2p08.png" alt="p2p08.png"> - A supernode stores a directory listing a subset of nearby (&lt;filename,peer pointer&gt;), similar to Napster servers - Supernode membership changes over time - Any peer can become (and stay) a supernode, provided it has earned enough reputation - A peer searches by contacting a nearby supernode</p><h2 id="bittorrent">BitTorrent</h2><h3 id="bittorrent-structure">BitTorrent Structure</h3><p><img src="p2p09.png" alt="p2p09.png"> - File split into blocks (32 KB ‚Äì 256 KB) - Download Local Rarest First block policy: prefer early download of blocks that are least replicated among neighbors - Tit for tat bandwidth usage: Provide blocks to neighbors that provided it the best download rates - Choking: Limit number of neighbors to which concurrent uploads &lt;= a number (5), i.e., the ‚Äúbest‚Äù neighbors</p><h3 id="bittorrent-ÂéüÁêÜÁÆÄËø∞">BitTorrent ÂéüÁêÜÁÆÄËø∞</h3><p><strong>Reference from</strong> <a href="https://jaminzhang.github.io/p2p/BitTorrent-Principle-Introduction/" target="_blank" rel="noopener">https://jaminzhang.github.io/p2p/BitTorrent-Principle-Introduction/</a></p><p>‰∏é‰º†ÁªüÂÆ¢Êà∑Á´Ø/ÊúçÂä°Âô®ÁΩëÁªúÈÄö‰ø°Ê®°Âºè‰∏çÂêåÔºåÂØπÁ≠âÊñπÂà∞ÂØπÁ≠âÊñπÔºàP2PÔºâÈÄö‰ø°Ê®°ÂºèÂú®ËøëÂπ¥Êù•Ë∂äÊù•Ë∂äÊµÅË°åËµ∑Êù•„ÄÇ Âú® P2P Ê®°Âºè‰∏≠ÔºåÊúçÂä°ÂíåËµÑÊ∫êÂàÜÂ∏ÉÂåñÔºåËµÑÊ∫ê‰∏çÈõÜ‰∏≠Â≠òÂÇ®Âú®Êüê‰∫õËÆæÂ§á‰∏äÔºåËÄåÊòØÂàÜÊï£Â≠òÂÇ®Âú®ËøêË°å P2P Á®ãÂ∫èÁöÑËÆæÂ§á‰∏äÔºå ÊØè‰∏Ä‰∏™ÂØπÁ≠âÊñπÈÉΩÂèØ‰ª•‰∏∫ÂÖ∂‰ªñÂØπÁ≠âÊñπÊèê‰æõÊúçÂä°„ÄÇ BitTorrentÔºà‰∏≠ÊñáÂÖ®Áß∞ÊØîÁâπÊµÅÔºåÁÆÄÁß∞ BTÔºâÊòØ‰∏Ä‰∏™ÁΩëÁªúÊñá‰ª∂‰º†ËæìÂçèËÆÆÔºåÊòØËÉΩÂ§üÂÆûÁé∞ÁÇπÂØπÁÇπÊñá‰ª∂ÂàÜ‰∫´ÁöÑÊäÄÊúØ„ÄÇ Âú®Â§ßÂ§öÊï∞‰∫∫ÊÑüËßâ‰∏≠‰∏é P2P Êàê‰∫ÜÂØπÁ≠âÁöÑ‰∏ÄÁªÑÊ¶ÇÂøµÔºåËÄåÂÆÉ‰πüÂ∞Ü P2P ÊäÄÊúØÂèëÂ±ïÂà∞‰∫ÜËøë‰πéÂÆåÁæéÁöÑÂú∞Ê≠•„ÄÇ Á†îÁ©∂ BitTorrent ÂçèËÆÆÂØπÊàë‰ª¨Ê∑±ÂÖ•ÊääÊè° P2P ÊäÄÊúØÔºå‰∫ÜËß£ Interent ÁΩëÁªúÂèëÂ±ïÁöÑÊú™Êù•Ëµ∞ÂêëÊúâÂæàÂ§ßÁöÑÊÑè‰πâ„ÄÇ</p><p>BitTorrent ÂçèËÆÆÊòØÊû∂ÊûÑ‰∫é TCP/IP ÂçèËÆÆ‰πã‰∏äÁöÑ‰∏Ä‰∏™ P2P Êñá‰ª∂‰º†ËæìÂçèËÆÆÔºåÂ§Ñ‰∫é TCP/IP ÁªìÊûÑÁöÑÂ∫îÁî®Â±Ç„ÄÇ BitTorrent ÂçèËÆÆÊú¨Ë∫´‰πüÂåÖÂê´‰∫ÜÂæàÂ§öÂÖ∑‰ΩìÁöÑÂÜÖÂÆπÂçèËÆÆÂíåÊâ©Â±ïÂçèËÆÆÔºåÂπ∂Âú®‰∏çÊñ≠Êâ©ÂÖÖ‰∏≠„ÄÇ Â¶ÇÊûúÊúâÂ§ö‰∏™‰∏ãËΩΩËÄÖÂπ∂ÂèëÁöÑ‰∏ãËΩΩÂêå‰∏Ä‰∏™Êñá‰ª∂ÔºåÂàôÊØè‰∏™‰∏ãËΩΩËÄÖ‰πüÂêåÊó∂‰∏∫ÂÖ∂ÂÆÉ‰∏ãËΩΩËÄÖ‰∏ä‰º†Êñá‰ª∂Ôºå ËøôÊ†∑ÔºåÊñá‰ª∂Ê∫êÂèØ‰ª•ÊîØÊåÅÂ§ßÈáèÁöÑÁî®Êà∑ËøõË°å‰∏ãËΩΩÔºåËÄåÂè™Â∏¶Êù•ÈÄÇÂΩìÁöÑË¥üËΩΩÁöÑÂ¢ûÈïø„ÄÇ</p><p>BitTorrent ÂçèËÆÆÊääÊèê‰æõ‰∏ãËΩΩÁöÑÊñá‰ª∂ËôöÊãüÂàÜÊàêÂ§ßÂ∞èÁõ∏Á≠âÁöÑÂùóÔºåÂùóÂ§ßÂ∞èÂøÖÈ°ª‰∏∫ 2k ÁöÑÊï¥Êï∞Ê¨°Êñπ ÔºàÁî±‰∫éÊòØËôöÊãüÂàÜÂùóÔºåÁ°¨Áõò‰∏äÂπ∂‰∏ç‰∫ßÁîüÂêÑ‰∏™ÂùóÊñá‰ª∂ÔºâÔºåÂπ∂ÊääÊØè‰∏™ÂùóÁöÑÁ¥¢Âºï‰ø°ÊÅØÂíå Hash È™åËØÅÁ†Å ÂÜôÂÖ• .torrent Êñá‰ª∂ÔºàÂç≥ÁßçÂ≠êÊñá‰ª∂Ôºå‰πüÁÆÄÁß∞‰∏∫‚ÄúÁßçÂ≠ê‚ÄùÔºâ‰∏≠Ôºå‰Ωú‰∏∫Ë¢´‰∏ãËΩΩÊñá‰ª∂ÁöÑ‚ÄúÁ¥¢Âºï‚Äù„ÄÇ ‰∏ãËΩΩËÄÖË¶Å‰∏ãËΩΩÊñá‰ª∂ÂÜÖÂÆπÔºåÈúÄË¶ÅÂÖàÂæóÂà∞Áõ∏Â∫îÁöÑ .torrent Êñá‰ª∂ÔºåÁÑ∂Âêé‰ΩøÁî® BT ÂÆ¢Êà∑Á´ØËΩØ‰ª∂ËøõË°å‰∏ãËΩΩ„ÄÇ</p><p>‰∏ãËΩΩÊó∂ÔºåBT ÂÆ¢Êà∑Á´ØÈ¶ñÂÖàËß£Êûê .torrent Êñá‰ª∂ÂæóÂà∞ Tracker Âú∞ÂùÄÔºåÁÑ∂ÂêéËøûÊé• Tracker ÊúçÂä°Âô®„ÄÇ Tracker ÊúçÂä°Âô®ÂõûÂ∫î‰∏ãËΩΩËÄÖÁöÑËØ∑Ê±ÇÔºåÊèê‰æõ‰∏ãËΩΩËÄÖÂÖ∂‰ªñ‰∏ãËΩΩËÄÖÔºàÂåÖÊã¨ÂèëÂ∏ÉËÄÖÔºâÁöÑ IP„ÄÇ ÊàñËÄÖÔºåBTÂÆ¢Êà∑Á´Ø‰πüÂèØËß£Êûê .torrent Êñá‰ª∂ÂæóÂà∞ nodes Ë∑ØÁî±Ë°®ÔºåÁÑ∂ÂêéËøûÊé•Ë∑ØÁî±Ë°®‰∏≠ÁöÑÊúâÊïàËäÇÁÇπÔºå Áî±ÁΩëÁªúËäÇÁÇπÊèê‰æõ‰∏ãËΩΩËÄÖÂÖ∂‰ªñ‰∏ãËΩΩËÄÖÁöÑ IP„ÄÇ</p><p>‰∏ãËΩΩËÄÖÂÜçËøûÊé•ÂÖ∂‰ªñ‰∏ãËΩΩËÄÖÔºåÊ†πÊçÆ .torrent Êñá‰ª∂Ôºå‰∏§ËÄÖÂàÜÂà´ÂØπÊñπÂëäÁü•Ëá™Â∑±Â∑≤ÁªèÊúâÁöÑÂùóÔºå ÁÑ∂Âêé‰∫§Êç¢ÂØπÊñπÊ≤°ÊúâÁöÑÊï∞ÊçÆ„ÄÇÊ≠§Êó∂‰∏çÈúÄË¶ÅÂÖ∂‰ªñÊúçÂä°Âô®ÂèÇÊàñËÄÖÂÖ∂‰ªñÁΩëÁªúËäÇÁÇπÁöÑÂèÇ‰∏éÔºå ÂàÜÊï£‰∫ÜÂçï‰∏™Á∫øË∑Ø‰∏äÁöÑÊï∞ÊçÆÊµÅÈáèÔºåÂõ†Ê≠§ÂáèËΩª‰∫ÜÊúçÂä°Âô®Ë¥üÊãÖ„ÄÇ ‰∏ãËΩΩËÄÖÊØèÂæóÂà∞‰∏Ä‰∏™ÂùóÔºåÈúÄË¶ÅÁÆóÂá∫‰∏ãËΩΩÂùóÁöÑ Hash È™åËØÅÁ†Å‰∏é .torrent Êñá‰ª∂‰∏≠ÁöÑÂØπÊØîÔºå Â¶ÇÊûú‰∏ÄÊ†∑ÂàôËØ¥ÊòéÂùóÊ≠£Á°ÆÔºå‰∏ç‰∏ÄÊ†∑ÂàôÈúÄË¶ÅÈáçÊñ∞‰∏ãËΩΩËøô‰∏™Âùó„ÄÇ</p><p>Âõ†Ê≠§Ôºå‰∏ãËΩΩÁöÑ‰∫∫Ë∂äÂ§öÔºåÊèê‰æõÁöÑÂ∏¶ÂÆΩ‰πüË∂äÂ§öÔºåÁßçÂ≠ê‰πü‰ºöË∂äÊù•Ë∂äÂ§öÔºå‰∏ãËΩΩÈÄüÂ∫¶Â∞±Ë∂äÂø´„ÄÇ</p><p>‰ªé BT ÂÆ¢Êà∑Á´ØËßíÂ∫¶ËÄÉËôëÔºå‰∏ãËΩΩÂéüÁêÜÂàÜ‰∏∫‰ª•‰∏ãÂá†Ê≠•Ôºö</p><p>‰∏ÄÔºéÊ†πÊçÆ BitTorrent ÂçèËÆÆÔºåÊñá‰ª∂ÂèëÂ∏ÉËÄÖ‰ºöÊ†πÊçÆË¶ÅÂèëÂ∏ÉÁöÑÊñá‰ª∂ÁîüÊàêÊèê‰æõ‰∏Ä‰∏™ .torrent Êñá‰ª∂„ÄÇ ÂÆ¢Êà∑Á´ØÂèØ‰ªé Web ÊúçÂä°Âô®‰∏ä‰∏ãËΩΩÁßçÂ≠êÊñá‰ª∂ÔºåÂπ∂‰ªé‰∏≠ÂæóÂà∞ Tracker ÊúçÂä°Âô® URL Âíå DHT ÁΩëÁªú nodes Á≠â‰ø°ÊÅØ„ÄÇ</p><p>‰∫åÔºéÊ†πÊçÆ Tracker URL ‰∏é Tracker ÊúçÂä°Âô®Âª∫Á´ãËøûÊé•ÔºåÂπ∂‰ªéÊúçÂä°Âô®‰∏äÂæóÂà∞ Peers ‰ø°ÊÅØ„ÄÇ ÊàñËÄÖÊ†πÊçÆ nodes ‰∏é DHT ÁΩëÁªú‰∏≠ËäÇÁÇπÈÄö‰ø°ÔºåÂπ∂‰ªéËäÇÁÇπ‰∏äÂæóÂà∞ Peers ‰ø°ÊÅØ„ÄÇ</p><p>‰∏âÔºéÊ†πÊçÆ Peers ‰ø°ÊÅØ‰∏é‰∏Ä‰∏™ Peer Âª∫Á´ãËøûÊé•Ôºå‰æùÊçÆ Peer wire ÂçèËÆÆÂÆåÊàêÊè°ÊâãÔºå Âπ∂‰ªé Peer Á´Ø‰∏ãËΩΩÊï∞ÊçÆÊñá‰ª∂„ÄÇÂêåÊó∂ÁõëÂê¨ Peer ÁöÑËøûÊé•ÔºåÂπ∂Áªô Peer ‰∏ä‰º†Êï∞ÊçÆÊñá‰ª∂„ÄÇ</p><p>‰æùÊçÆÂæóÂà∞ Peers ‰ø°ÊÅØÁöÑÈÄîÂæÑÁöÑ‰∏çÂêåÔºåÂèØÂàÜ‰∏∫‰ΩøÁî® Tracker ÊúçÂä°Âô®Âíå‰ΩøÁî® Trackerless DHT ÁΩëÁªú‰∏§ÁßçÊñπÂºè„ÄÇ</p><p>Âü∫‰∫é HTTP ÁöÑ Tracker ÂçèËÆÆÔºå Âü∫‰∫é UDP ÁöÑ Trackerless ÂçèËÆÆÔºå Âü∫‰∫é TCP ÁöÑ Peer wire ÂçèËÆÆ„ÄÇ</p><h2 id="chord">Chord</h2><p>Uses Consistent Hashing on node‚Äôs (peer‚Äôs) address - SHA-1(ip_address,port) -&gt; 160 bit string - Truncated to m bits - Called peer id (number between 0 and 2m ‚àí1 ) - Not unique but id conflicts very unlikely - Can then map peers to one of 2m logical points on a circle</p><h3 id="comparative-performance">Comparative Performance</h3><figure><img src="p2p10.png" alt="p2p10.png"><figcaption>p2p10.png</figcaption></figure><h3 id="chord-structure">Chord Structure</h3><p>Tow pointers</p><h4 id="successors">successors</h4><p><img src="p2p11.png" alt="p2p11.png"> #### finger tables <img src="p2p12.png" alt="p2p12.png"></p><h3 id="files">Files</h3><p>Filenames also mapped using same consistent hash function - SHA-1(filename)-&gt;160 bit string (key) - File is stored at <strong>first peer with id greater than its key(mod 2^m)</strong> - Consistent Hashing =&gt; with K keys and N peers, each peer stores O(K/N) keys</p><h3 id="search-1">Search</h3><ul><li>At node n, send query for key k to largest successor/finger entry &lt;= k if none exist, send query to successor(n)</li><li><img src="p2p13.png" alt="p2p13.png"></li><li>Search takes O(log(N)) time</li><li>O(log(N)) search time holds for file insertions too (in general for routing to any key)</li><li>Failure in Chord<ul><li>maintain r multiple successor entries</li><li>replicate file/key at r successors and predecessors</li></ul></li></ul><h3 id="dynamic-changes">Dynamic changes</h3><ul><li>New peers joining<ul><li>Introducer directs N40 to N45 (and N32)</li><li>N32 updates successor to N40</li><li>N40 initializes successor to N45, and inits fingers from it N40 periodically talks to neighbors to update finger table</li><li>N40 may need to copy some files/keys from N45 (files with fileid between 32 and 40)</li><li>A new peer affects O(log(N)) other finger entries in the system, on average</li></ul></li><li>Stabilization Protocol <strong>Concurrent peer joins, leaves, failures might cause loopiness of pointers and failure of lookups</strong><ul><li>Chord peers periodically run a stabilization algorithm that checks and updates pointers and keys</li></ul></li></ul><h3 id="virtual-nodes">Virtual Nodes</h3><p><strong>Hash can get non-uniform -&gt; Bad load balancing</strong> - Treat each node as multiple virtual nodes behaving independently - Each joins the system - Reduces variance of load imbalance</p><h2 id="pastry">Pastry</h2><ul><li>Assigns ids to nodes, just like Chord (using a virtual ring)</li><li><strong>Leaf Set</strong> ‚Äì Each node knows its successor(s) and predecessor(s)</li><li>Routing tables based prefix matching(Routing is thus based on prefix matching and is thus log(N))</li></ul><h3 id="pastry-locality">Pastry Locality</h3><ul><li>For each prefix, say 011, among all potential neighbors with a matching prefix, the neighbor with the shortest round-trip time is selected</li><li>Since shorter prefixes have many more candidates (spread out throughout the Internet), the neighbors for shorter prefixes are likely to be closer than the neighbors for longer prefixes</li><li>Thus, in the prefix routing, early hops are short and later hops are longer</li></ul><h3 id="kelips">Kelips</h3><p><strong>A 1 hop Lookup DHT</strong></p><h3 id="kelips-structure">Kelips Structure</h3><p><img src="p2p14.png" alt="p2p014.png"> - k ‚Äúaffinity groups‚Äù k ~ sqrt(N) - Each node hashed to a group (hash mod k) - Node‚Äôs neighbors - (Almost) all other nodes in its own affinity group - One contact node per foreign affinity group - File can be stored at any (few) node(s) - Decouple file replication/location (outside Kelips) from file querying (in Kelips) - Each filename hashed to a group - All nodes in the group replicate pointer information, i.e., &lt;filename, file location&gt; - Affinity group does not store files - Lookup - Find file affinity group - Go to your contact for the file affinity group - Failing that try another of your neighbors to find a contact</p><p><strong>Reference from some slides from Coursera course <a href="https://www.coursera.org/learn/cloud-computing" target="_blank" rel="noopener">Cloud Computing</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> Cloud Computing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cloud Computing of UIUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dive into blog</title>
      <link href="/Dive-into-blog/2019/02/13/"/>
      <url>/Dive-into-blog/2019/02/13/</url>
      
        <content type="html"><![CDATA[<p>ÂâçÂ§©‰∏∫‰∫ÜÊê≠Âª∫ hadoop ÈõÜÁæ§ÔºåË¢´ÁΩëÁªú‰∏äËØ≠Ë®ÄÂê´Á≥ä‰∏çÊ∏ÖÁöÑÊïôÁ®ãÊêûÂæóÁ≤æÁñ≤ÂäõÂ∞ΩÔºå‰∫éÊòØËêåÂèë‰∫ÜËá™Â∑±ÂÜôÊäÄÊúØÂçöÂÆ¢ÁöÑÊÉ≥Ê≥ï„ÄÇ</p><h4 id="ÂºÄÂßãÊê≠Âª∫‰∫Ü">ÂºÄÂßãÊê≠Âª∫‰∫Ü</h4><ul><li>HexoÂÅöÂçöÂÆ¢Ê°ÜÊû∂‰∏çÈîôÔºåÂ∞±ÂÆÉ‰∫Ü„ÄÇ‰∫éÊòØÊàëÁ∫†Áªì‰∫Ü‰∏§‰∏™Â∞èÊó∂ÈÄâ‰ªÄ‰πà‰∏ªÈ¢ò„ÄÇNextËÇØÂÆöÊòØÁ¨¨‰∏Ä‰∏™ÊéíÈô§ÁöÑÔºåÂõ†‰∏∫Áî®ÁöÑ‰∫∫Â§™Â§ö‰∫ÜÔºåÊàëË¶Å‰∏ç‰∏ÄÊ†∑„ÄÇDaily‰πü‰∏çÈîôÔºåÁÆÄÊ¥ÅÂ§ßÊñπÔºåÁ¨¶ÂêàÊàëÁöÑÊ∞îË¥®ÔºåÂ∞±ÂÆÉÂêß„ÄÇÊàëÂéªÔºåDailyËøû‰∏™ÊâìËµèÁ≥ªÁªüÈÉΩÊ≤°ÈõÜÊàêÂïäÔºåËøô‰∏çÂ¶®Á¢çÊàëËµöÈí±Âêó„ÄÇÁÆó‰∫ÜÔºåËøòÊòØNextÂêß„ÄÇÂóØÔºåÁúüÈ¶ô„ÄÇ</li><li>ÈÉ®ÁΩ≤Â∞±ÈÄâGithub PageÔºåÊ≤°ÂøÖË¶ÅÈ¢ùÂ§ñ‰π∞ÊúçÂä°Âô®„ÄÇ</li><li><a href="https://zhangruochi.github.io" target="_blank" rel="noopener">zhangruochi.github.io</a>ÁöÑÂüüÂêç‰∏çË°åÔºåÁúã‰∏äÂéª‰∏çÈ´òÁ´ØÔºåÊï£ÂèëÁùÄÁ®ãÂ∫èÁåøÊ∞îË¥®„ÄÇ‰∫éÊòØÊàëÂéª‰π∞‰∫Ü<a href="https://zhangruochi.com">zhangruochi.com</a>ÔºåGodaddy‰∏ä‰π∞ÁöÑÔºå‰∫åÂçÅÂ§öÂàÄÔºåÂæà‰æøÂÆú„ÄÇ</li><li>Á¨¨‰∏Ä‰∏™Ë¶ÅÂÅöÁöÑÂäüËÉΩÂøÖÈ°ªÊòØÊâìËµèÁ≥ªÁªüÔºåÊØîËæÉÈ°∫Âà©ÔºåNextÂ∑≤ÁªèÈõÜÊàê‰∫Ü„ÄÇ</li><li>ËØÑËÆ∫Á≥ªÁªüÁ∫†Áªì‰∫ÜÂæà‰πÖ, ÂêéÊù•ÂèëÁé∞Ê≤°‰ªÄ‰πàÂ•ΩÁ∫†ÁªìÁöÑ„ÄÇÂü∫Êú¨‰∏äË¶Å‰πàË¢´Â¢ôË¶Å‰πàÂÅúÊ≠¢ÊúçÂä°„ÄÇ‰ªÄ‰πàÔºå‰Ω†ËØ¥gitmentÔºü ÈÇ£‰πü‰∏çËÄÉËôëÔºåÊàëÁöÑÂçöÂÆ¢ÊÄé‰πàËÉΩÂ±ÄÈôê‰∫éÁ®ãÂ∫èÁåøÂúàÂë¢„ÄÇÂ∞±Êù•ÂøÖÂäõÂêßÔºå‰Ω†ÁúãÂêçÂ≠óÂ§öÂèØÁà±„ÄÇ</li><li>ÂàÜ‰∫´Á≥ªÁªüÁî®Ëá™Â∏¶ÁöÑBaiduShareÔºåËôΩÁÑ∂‰∏ë‰∫ÜÁÇπ„ÄÇ</li></ul><h4 id="Â∑Æ‰∏çÂ§öÂèØ‰ª•‰∏äÁ∫ø‰∫Ü">Â∑Æ‰∏çÂ§öÂèØ‰ª•‰∏äÁ∫ø‰∫Ü</h4><ul><li>Âõ†‰∏∫Github‰∏ç‰ºöÂ∞ÜÁ´ôÁÇπ‰ø°ÊÅØÊèê‰∫§ÁªôÊêúÁ¥¢ÂºïÊìéÔºå<a href="https://zhangruochi.github.io" target="_blank" rel="noopener">Dore's blog</a>‰Ωú‰∏∫‰∏Ä‰∏™ÊäÄÊúØÂçöÂÆ¢Ôºåbaidu, google‰ªÄ‰πàÁöÑÈÉΩÊêúÁ¥¢‰∏çÂà∞ÔºåËøô‰∏çË°åÔºåËøô‰πàÊúâ‰ª∑ÂÄºÁöÑÂçöÊñá‰∏çÊòØÂÜôÁªôÊàëËá™Â∑±ÁúãÁöÑ„ÄÇ‰∫éÊòØÂºÄÂßãÂÅöseo‰ºòÂåñ„ÄÇÈ¶ñÂÖàÊòØÈ™åËØÅÁ´ôÁÇπÔºågoogleÂíåbaidu‰∏§ËÄÖÈÉΩÈ™åËØÅÈÄö‰∏çËøáÔºå‰∏çÁÆ°ÊòØÊñá‰ª∂È™åËØÅ ËøòÊòØhtmlÊ†áÁ≠æÈ™åËØÅ„ÄÇÊäòËÖæ‰∫ÜÂá†‰∏™Â∞èÊó∂ÔºåÂèëÁé∞Êñá‰ª∂È™åËØÅ‰∏çÈÄöËøáÁöÑÂéüÂõ†ÊòØHexoÁîüÊàêÁΩëÁ´ôÊó∂‰ºö‰øÆÊîπgoogleÂíåbaiduÊèê‰æõÁöÑÈ™åËØÅÊñá‰ª∂„ÄÇËøôÂ•ΩÂäûÔºåÂú®È™åËØÅÊñá‰ª∂ÂºÄÂ§¥Âä†‰∏ä <code>layout: false</code>„ÄÇ</li><li>ÁîüÊàêsitemap, Êèê‰∫§sitemapÔºåÊµãËØïrobots.txtÔºåÊØîËæÉÈ°∫Âà©„ÄÇ</li></ul><h4 id="Áªà‰∫éËÉΩÊêúÁ¥¢Âà∞‰∫Ü">Áªà‰∫éËÉΩÊêúÁ¥¢Âà∞‰∫Ü</h4><ul><li>‰∏çÂØπÂïäÔºåÊâìÂºÄÁΩëÁ´ôÁªèÂ∏∏‰ºöÊòæÁ§∫website coming soonÈ°µÈù¢Ôºå‰ΩÜÊòØÂ§öÂà∑Êñ∞Âá†Ê¨°ÂèàÊ≤°ÈóÆÈ¢òÔºåËøôÊòØ‰ªÄ‰πàÁ£®‰∫∫ÁöÑÂ∞èbug„ÄÇËÄå‰∏îÁé∞Âú®ÁΩëÁ´ôÊòØhttpÂçèËÆÆÔºå‰∏çÊòØhttps, ChormeÊÄªÊòØÊòæÁ§∫Not Secure„ÄÇÂéªGithub PageÈ°µÈù¢‰øÆÊîπÂº∫Ë°å‰ΩøÁî®httpsÔºåÁÑ∂ËÄåÈÄâÊã©‰∏ç‰∫Ü„ÄÇÊäòËÖæ‰∏ÄÂúàÂèëÁé∞ÊòØÂú® Godaddy‰∏äÊ∑ªÂä†‰∫Ü‰∏Ä‰∏™Â§ö‰ΩôÁöÑDNSËß£ÊûêÔºåÂà†Èô§‰πãÂêéÂèØ‰ª•ÈÄâÊã©Âº∫Âà∂https‰∫Ü„ÄÇ</li><li>ÊàëÂéªÔºåÂº∫Âà∂https‰πãÂêésafariÂíåchormeÈÉΩÊòæÁ§∫ÁΩëÁ´ô‰∏çË¢´‰ø°‰ªª, Ëøõ‰∏çÂéª‰∫Ü„ÄÇÂèàÊâæ‰∫Ü‰∏ÄÂúàÊñπÊ°àÔºåËØ¥Ë¶ÅË¥≠‰π∞sslËØÅ‰π¶,ÁÑ∂ËÄåGithub Page‰∏çÊîØÊåÅ‰∏ä‰º†ËØÅ‰π¶„ÄÇÂêéÊù•ÊâæÂà∞Ëß£ÂÜ≥ÊñπÊ°àÔºå‰ΩøÁî®<strong>DNSPod</strong>Ëß£ÊûêDNS, ‰øÆÊîπDNSPod‰∏∫default nameserver.</li></ul><h4 id="Áªà‰∫éËÉΩÊ≠£Â∏∏ÁôªÈôÜ‰∫Ü">Áªà‰∫éËÉΩÊ≠£Â∏∏ÁôªÈôÜ‰∫Ü</h4><ul><li>ÁÑ∂ËÄåÔºåÂàÜ‰∫´Á≥ªÁªüÂèà‰∏çËÉΩÁî®‰∫ÜÔºåÂéüÊù•ÊòØÂõ†‰∏∫BaiduShare‰∏çÊîØÊåÅhttps. Êàë‰∏∫‰ªÄ‰πàË¶ÅÁî®ÁôæÂ∫¶ÂÆ∂ÁöÑ‰∫ßÂìÅ? ÊÉ≥Ëµ∑Â∞èÊÅ∂È≠îÁöÑÂè∞ËØçÔºå‚ÄúNext time I have an idea like that, just punch me in the face.‚Äù</li><li>‰∫éÊòØ‰ΩøÁî®ShareSDK, Êú¨Âú∞ÊµãËØïÊ≤°ÈóÆÈ¢òÔºå‰ΩÜÊòØËÅîÁΩë‰ºöÂá∫Èîô„ÄÇÂèëÁé∞ÊòØhttpsÈôêÂà∂httpÁöÑÂ§ñÈìæÊé•„ÄÇÂ•ΩÁöÑÔºå‰øÆÊîπ‰∏Ä‰∏ãsrc tagÔºåÂèØ‰ª•‰∫Ü„ÄÇ‰ΩÜÊòØShareSDKÈïøÂæó‰∏ëÂïäÔºå‰∫éÊòØÂèàÊù•‰∫Ü‰∏ÄÈ°øÊìç‰ΩúÔºåÊ∑ªÂä†Êñ∞ÁöÑcssÂíåjs„ÄÇ</li></ul><h4 id="Âü∫Êú¨Êª°ÊÑè‰∫Ü">Âü∫Êú¨Êª°ÊÑè‰∫Ü</h4><p>ÊàëÊõ¥Âä†Á≤æÁñ≤ÂäõÂ∞ΩÔºåÂÜô‰ªÄ‰πàÂçöÂÆ¢Ôºå<strong>Next time I have an idea like that, just punch me in the face</strong>„ÄÇ</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> My Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ÂÄºÂæóÊúüÂæÖÁöÑ‰∏ÄÂùóÈõ∂‰∏ÄÂàÜ --ÈπøÈ∫íÂ∫è</title>
      <link href="/Hello-Blog/2019/02/12/"/>
      <url>/Hello-Blog/2019/02/12/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>ÈÇ£Â§©‰∏ÄÂè•Áé©Á¨ëËØ¥Âª∫Â•ΩÂçöÂÆ¢ËÆ©ÈπøÊÄªÁªôÊàëÂÜô‰∏™Â∫èÔºå‰ªäÂ§©Áªà‰∫éÁúãÂà∞‰∫Ü„ÄÇÊå∫‰∏çÂ•ΩÊÑèÊÄùÁöÑ„ÄÇÂà´‰∫∫‰∏ÄÂ§∏ÊàëÔºåÊàëÂ∞±Êâ≠ÊçèÔºåÊÄªÊãÖÂøÉÂà´‰∫∫Â§∏ÂæóËøò‰∏çÂ§üüòù„ÄÇ‰ª•‰∏ãÊòØÂ∫èÁöÑÊ≠£Êñá„ÄÇ</strong></p></blockquote><p>ÁãÑÊõ¥ÊñØËØ¥ÔºåËøôÊòØÊúÄÂ•ΩÁöÑÊó∂‰ª£ÔºåËøôÊòØÊúÄÂùèÁöÑÊó∂‰ª£ÔºõÊúâ‰∫∫Áõ¥‰∏äÂ§©Â†ÇÔºåÊúâ‰∫∫Áõ¥‰∏ãÂú∞Áã±„ÄÇÊâÄ‰ª•ÂΩì‰∏ãÁöÑËøô‰∏™Êó∂‰ª£Áªô‰∫àÊàë‰ª¨ÁöÑÂà∞Â∫ïÊòØ‰ªÄ‰πàÔºåÊàëËßâÂæóËøôÊòØ‰∏Ä‰∏™ÂæàÈöæÂõûÁ≠îÁöÑÈóÆÈ¢ò„ÄÇ</p><p>Â∫îËØ•ÊòØ‰ªéÂ§ß‰∏âÂºÄÂßãÔºåÂú®Âç≥Â∞ÜÈù¢‰∏¥Á§æ‰ºöÁöÑÊó∂ÂÄôÊàë‰∫ßÁîü‰∫ÜÊõ¥Â§öÁöÑËá™ÊàëÊÄÄÁñëÔºåÁªèÂ∏∏ÈóÆËá™Â∑±‚Äú‰Ω†Âà∞Â∫ïÊÉ≥ÂÅö‰ªÄ‰πàÔºå‰Ω†‰ª•Âêé‰ºöÂÅö‰ªÄ‰πàÂë¢‚Äù„ÄÇÈÇ£‰∏™Êó∂ÂÄôÊàëÂæàÁæ°ÊÖï‰∏§Áßç‰∫∫„ÄÇ‰∏ÄÁßçÊòØ‰ªéÊù•‰∏ç‰ºöËÆ§ÁúüÊÄùËÄÉËøô‰∏™ÈóÆÈ¢òÔºåÈöèÈÅáËÄåÂÆâÁöÑ‰∫∫ÔºåÂè¶‰∏ÄÁßçÊòØÊúâÁùÄÊòéÁ°ÆÁöÑÁõÆÊ†áÔºåÂπ∂‰∏∫‰πã‰∏çÊñ≠Âä™ÂäõÁöÑ‰∫∫„ÄÇËÄÅÂÆûËØ¥ÔºåÂÖ∂ÂÆûËøôÊòØ‰∏§ÁßçÊûÅÁ´ØÔºåÂâç‰∏ÄÁßç‰∫∫ËØ¥ÂæóÈöæÂê¨ÁöÑÂèØ‰ª•ÊòØ‚Äú‰∏çÊÄùËøõÂèñ‚ÄùÔºå‰ΩÜÊòØÂæÄÂæÄ‰ªñ‰ª¨‰πüÂÆπÊòìÊª°Ë∂≥ÔºåËÉΩÂú®Ëá™Â∑±ÁöÑ‰∏ñÁïåÈáåËøáÂæóÂæàÂπ∏Á¶è„ÄÇÂêé‰∏ÄÁßç‰∫∫ÂèØ‰ª•ËØ¥ÊòØ‚ÄúÈáéÂøÉÂ§™Â§ß‚ÄùÔºå‰ΩÜÊòØËøôÊ†∑ÁöÑ‰∫∫‰πüÂÆπÊòìÂÖÖÂÆûËá™Â∑±„ÄÇÂèçËßÇÊàëÔºåÂ∞±ÊòØÈÇ£Áßç‰∏çÂ∞¥‰∏çÂ∞¨Ôºå‰∏ç‰∏ä‰∏ç‰∏ãÁöÑ‰∏ÄÁ±ª„ÄÇ‰∏çÊª°Ë∂≥‰∫éÁé∞Âú®ÁöÑÁîüÊ¥ªÂèØÊòØ‰πüÊ≤°ÊúâÊòéÁ°ÆÁöÑÁõÆÊ†á„ÄÇ</p><p>‰πüÊòØÂú®ËøôÁßçÊÉÖÂÜµ‰∏ãÔºåÊàëÈÄâÊã©Âá∫ÂõΩÁïôÂ≠¶ÔºåËßâÂæóÂØπÊàëÊù•ËØ¥Ëøô‰πüÊòØÈÄÉÈÅøÁ§æ‰ºöÈÄÉÈÅøÁé∞ÂÆûÁöÑÂ•ΩÁöÑÊñπÂºè„ÄÇÂúàÂ≠êÂπø‰∫ÜÔºåÊé•Ëß¶ÁöÑ‰∫∫Â§ö‰∫ÜÔºå‰ΩÜÊòØÂ§ßÈÉ®ÂàÜ‰∫∫‰πüËøòÊòØÂèØ‰ª•ÊåâÁÖß‰∏äÈù¢ËØ¥ÁöÑÈÅìÁêÜÂàÜÊàê‰∏âÁßç„ÄÇÂº†Ëã•È©∞Ôºà‰ª•‰∏ãÁß∞‰∏∫Âº†ËÄÅÂ∏àÔºåÂè´‰ªñÂÖ®ÂêçÂÆûÂú®ÊúâÁÇπ‰∏ç‰π†ÊÉØÔºâÂ∞±ÊòØÊàëËØ¥ÁöÑÁõÆÊ†áÊòéÁ°ÆÂπ∂‰∏î‰∏çÊñ≠Âä™ÂäõÁöÑ‰∫∫„ÄÇ</p><p>ÂÖ∂ÂÆûÂº†ËÄÅÂ∏àËÆ©ÊàëÂÜôÂ∫èÔºåÊàë‰πü‰∏çÁü•ÈÅìÂÜôÁÇπÂï•Ôºå‰∫éÊòØÊâìÁÆóËÆ≤ËÆ≤ÊàëÂØπ‰ªñÁöÑÁúãÊ≥ï„ÄÇ</p><p>Âº†ËÄÅÂ∏àÊòØËøôÊ†∑‰∏ÄÁßç‰∫∫Ôºö‰ªñ‰ªéÊù•‰∏çÈÅøËÆ≥Ëá™Â∑±ÂèñÂæóÁöÑ‰∏Ä‰∫õÊàêÁª©Ôºå‰πü‰ªéÊù•‰∏ç‰ºöÂ§∏Â§ßËá™Â∑±ÁöÑÊàêÂ∞±„ÄÇ‰πüÂèØËÉΩÊòØ‰ªñÁúüÁöÑÂ§™ÂéâÂÆ≥ÔºåÊâÄ‰ª•‰∏çÁÆ°‰ªñÂú®ÁîüÊ¥ªÈáåËøòÊòØÊúãÂèãÂúàÈáåÊÄé‰πàËÆ≤Ëá™Â∑±ÔºåÊàëÁöÑÁ¨¨‰∏ÄÂèçÂ∫îÊÄªÊòØ‚ÄúÁâõÈÄºÔºå‰∏çÊÑßÊòØÂº†ËÄÅÂ∏à‚Äù„ÄÇÂÖ∂ÂÆûÔºåË∑ü‰ªñÁõ∏Â§ÑÁöÑÊó∂ÂÄôÂè™Ë¶Å‰Ω†Â•ΩÂ•ΩÁïôÊÑèÔºåÂ∞±‰ºöÂèëÁé∞‰ªñÊòØ‰∏™ÂæàÊúâÁõÆÊ†áÊÄßÁöÑ‰∫∫„ÄÇÊØîÂ¶ÇËØ¥Ôºå‰ªñÂêÉÈ•≠ÁöÑÊó∂ÂÄôÂæàÂø´ÔºåÂæÄÂæÄÊàëÂêÉ‰∫Ü‰∏ÄÂçäËøò‰∏çÂà∞Ôºå‰ªñÂ∑≤ÁªèÂ∑Æ‰∏çÂ§ö‰∫Ü„ÄÇ‰ªñÁ≠â‰Ω†ÁöÑËøô‰∏™Êó∂ÂÄôÔºåÂ§ßÈÉ®ÂàÜÊó∂Èó¥Èáå‰ªñÈÉΩÊòØ‰∏Ä‰∏™‰∫∫Âú®Ê≤âÊÄùÊàñËÄÖË∑ü‰Ω†ËÆ≤ËÆ≤‰ªñÂØπËá™Â∑±Êú™Êù•Êúâ‰ªÄ‰πàËßÑÂàí„ÄÇÂõ†‰∏∫ÂíåÂõΩÂÜÖÁöÑÊó∂Â∑ÆÔºå‰ªñ‰πüÁªèÂ∏∏ÊÄß‰ºöÂú®ÂçäÂ§úÂºÄ‰ºö„ÄÇ‰∏∫‰∫ÜËá™Â∑±È°πÁõÆÈáåÁöÑÈóÆÈ¢òÊàñËÄÖÂà∑È¢òÔºåÂú®Âõæ‰π¶È¶ÜÁÜ¨Â§úÔºåÈÄöÂÆµ‰πüÊòØÂ∏∏ÊúâÁöÑ‰∫ã„ÄÇÊâìÂºÄ‰ªñÁöÑlinkedinÔºå‰∏äÈù¢‰πüÂÜôÊª°‰∫Ü‰ªñÂèëÁöÑËÆ∫ÊñáÂíå‰∏äËøáÁöÑÊúâÂàÜÈáèÁöÑËØæ„ÄÇÂèØËÉΩ‰πüÊòØ‰∏∫‰ªÄ‰πàÊàëÂèëÁé∞‰ªñÁöÑÁúºÁú∂‰∏ãÈù¢ÊòØÈùíÈªëÁöÑÂéüÂõ†Âêß„ÄÇ</p><p>ËØ¥ÂÆûËØùÔºåËøôÊ†∑ÁöÑÁîüÊ¥ªÂ¶ÇÊûúÂÆâÂú®ÊàëË∫´‰∏äÔºåÈÇ£ÊàëÂ§öÂçäÂèó‰∏ç‰∫Ü„ÄÇ‰ΩÜÊòØÊàë‰πüÊ≤°ÊúâÈóÆËøá‰ªñÁ¥Ø‰∏çÁ¥ØÔºåÂõ†‰∏∫ÊØèÊ¨°ËøôÁßçÊó∂ÂÄôÊàëÈÉΩ‰ºöÊÉ≥Âà∞‰πãÂâçÈóÆÊàëÂèëÂ∞è‚Äú‰∏ÄÁõ¥Ëøô‰πàÂä™Âäõ‰∏ç‰ºöËßâÂæóÂæàËæõËã¶Âêó‚ÄùÔºåÂ•πÂΩìÊó∂ÂõûÁ≠îÊàë‚Äú‰π†ÊÉØ‰∫ÜÂ∞±‰∏çËßâÂæó‰∫Ü‚Äù„ÄÇ</p><p>Âº†ËÄÅÂ∏àË∑üËÆ∏Â§öÁ®ãÂ∫èÂëò‰∏ç‰∏ÄÊ†∑ÁöÑÊòØÔºåÈÄöËøáË∑ü‰ªñÁöÑÊé•Ëß¶Ôºå‰Ω†‰ºöÂèëÁé∞‰ªñÊòØ‰∏Ä‰∏™ËØªËøáÂæàÂ§ö‰π¶ÔºåÂØπËøô‰∏™Á§æ‰ºöÂæàÊúâÊÉ≥Ê≥ïÁöÑÊñáÂåñ‰∫∫„ÄÇÂêåÊó∂ÔºåÂº†ËÄÅÂ∏àË∑üËÆ∏Â§ö‰∫∫‰∏ç‰∏ÄÊ†∑ÁöÑÊòØÔºåÂ§ßÂÆ∂ÈÉΩÁü•ÈÅìËá™Â∑±ÊòØË¢´ÁîüÊ¥ªÊé®ÁùÄËµ∞Ôºå‰ΩÜÊòØ‰ªñÂú®Ë¢´Êé®ÁùÄËµ∞ÁöÑÊó∂ÂÄôÔºå‰πüÂú®ÊÄùËÄÉÊÄéÊ†∑ÊúÄÂ§ßÂåñÂèëÊå•Ëá™Â∑±ÁöÑ‰ª∑ÂÄºÂéªÂΩ±ÂìçËøô‰∏™‰∏ñÁïå„ÄÇ</p><p>ÂÜôÂà∞ËøôÂÑøÊàëÈ°øÊÇü‰∫Ü„ÄÇ‰∏ÄÂºÄÂßã‰ªñËá™Â∑±ÂÜôËøô‰∏™blogÊàëÂè™ËßâÂæóËøôÊòØÊñáÂåñ‰∫∫ÂíåÂ§ÑÂ•≥Â∫ßÂØπ‰∫é‰∏Ä‰∫õÂÆåÁæé‰∫ãÁâ©ÁöÑÊâßÁùÄÔºå‰ΩÜÊòØÁé∞Âú®ÊàëÊòéÁôΩ‰∫ÜÔºåËøô‰∏™blogÊàñËÆ∏‰πüÊòØ‰ªñÁöÑ‰∏ÄÁßçÁü•ËØÜËæìÂá∫ÔºåÊòØ‰∏ÄÁßç‰ªñÁî®Êù•ÂΩ±ÂìçÂà´‰∫∫ÁöÑÊñπÂºè„ÄÇËÄåÊàëÔºå‰Ωú‰∏∫‰∏Ä‰∏™Ë¢´Áî®Êù•ÊµãËØïÁΩëÁ´ôÁöÑÂ∞èÁôΩÁæäÔºåÂØπÂº†ËÄÅÂ∏àÁöÑblogÂÖÖÊª°‰∫ÜËá™‰ø°„ÄÇÂàöËµ∑Ê≠•ÁöÑÊó∂ÂÄôÔºåÂº†ËÄÅÂ∏àÁöÑÁü•ËØÜÂàÜ‰∫´‰πüÈÉΩÊòØÊØîËæÉÊµÖÊòæÁöÑ‰∏úË•øÔºå‰ΩÜËøôÂá†Â§©ÊàëÊØèÂ§©Áù°ÈÜíÈÉΩ‰ºöÁúãÂà∞‰ªñÂçäÂ§úÁªôÊàëÂèëÁöÑÂëäËØâÊàë‰ªñÂèàÂÅö‰∫ÜÂì™ÊñπÈù¢ÁöÑÊîπËøõ„ÄÇËôΩÁÑ∂Áé∞Âú®ÊàëÂè™Ëä±‰∫Ü‰∏ÄÂùóÈõ∂‰∏ÄÂàÜÔºå‰ΩÜËøôÊ†∑Êàë‰πüÁÆóÊòØÂÖ•ËÇ°‰∫ÜÂêßÔºåÁ≠âÂà∞‰ª•ÂêéËøô‰∏™blogÁúüÁöÑÂºÄÂßãÂèëÊå•ÂÆÉÁöÑ‰ª∑ÂÄºÁöÑÊó∂ÂÄôÔºåÊàëËßâÂæóÊàëÁöÑ‰∏ÄÂùóÈõ∂‰∏ÄÂàÜÁöÑ‰ª∑ÂÄº‰πü‰ºö‰πòÂçÅ‰πòÁôæ‰πòÂçÉ‰πò‰∏á‰πò‰∫øÂú∞Â¢ûÈïø„ÄÇ ÂíåÂÆÉ‰∏ÄËµ∑ÁöÑÔºåÊàëÁõ∏‰ø°‰πü‰∏ÄÂÆöÊòØÂº†ËÄÅÂ∏à‰πã‰∫éËøô‰∏™Á§æ‰ºöÔºåËøô‰∏™Êó∂‰ª£ÁöÑ‰ª∑ÂÄº„ÄÇ</p><p>ÊâÄ‰ª•ÔºåÂè™Ë¶ÅÂ§ü‰∏ªÂä®Â§üÂπ∏ËøêÂ§ü‰ºòÁßÄÔºåËøô‰∏™Êó∂‰ª£Áªô‰∫àÊàë‰ª¨ÁöÑ‰∏úË•øÔºåÊÄªÊúâ‰∏ÄÂ§©ÊòØËÉΩÈÄöËøáËá™Â∑±ÁöÑË∫´‰ΩìÂäõË°åÂéªÊÑüÁü•ÁöÑ„ÄÇ ÊúÄÂêéÔºåÊàëÊÉ≥‰ª£Ë°®Êàë‰ª¨Â§ßÂÆ∂ÂØπÂº†ËÄÅÂ∏àËØ¥‰∏ÄÂè•Ôºö‚ÄúËãüÂØåË¥µÔºåÂãøÁõ∏Âøò„ÄÇ‚Äù</p>]]></content>
      
      
      <categories>
          
          <category> Gossip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gossip </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
