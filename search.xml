<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Bigtable: A Distributed Storage System for Structured Data</title>
      <link href="/Bigtable-A-Distributed-Storage-System-for-Structured-Data/2019/02/28/"/>
      <url>/Bigtable-A-Distributed-Storage-System-for-Structured-Data/2019/02/28/</url>
      
        <content type="html"><![CDATA[<h2 id="abstract">Abstract</h2><ul><li>Bigtable is a distributed storage system for managing structured data that is designed to scale to a very large size</li></ul><h2 id="data-model">Data Model</h2><p>A Bigtable is a sparse, distributed, persistent multi- dimensional sorted map. The map is indexed by a row key, column key, and a timestamp; each value in the map is an uninterpreted array of bytes.</p><blockquote><p>(row:string, column:string, time:int64) → string</p></blockquote><h3 id="rows">Rows</h3><ul><li>The row keys in a table are arbitrary strings</li><li>Every read or write of data under a single row key is atomic</li><li>makes it easier for concurrent updates to the same row.</li><li>The row range for a table is dynamically partitioned. Each row range is called a <strong>tablet</strong>, which is the unit of dis- tribution and load balancing</li></ul><h3 id="column-families">Column Families</h3><ul><li>Column keys are grouped into sets called column fami- lies, which form the basic unit of access control</li><li>All data stored in a column family is usually of the same type</li><li>A column family must be created before data can be stored under any column key in that family; after a family has been created, any column key within the family can be used</li></ul><h3 id="timestamps">Timestamps</h3><ul><li>Each cell in a Bigtable can contain multiple versions of the same data; these versions are indexed by timestamp</li></ul><h2 id="api">API</h2><ul><li>The Bigtable API provides functions for creating and deleting tables and column families. It also provides functions for changing cluster, table, and column family metadata, such as access control rights.</li><li>Bigtable can be used with MapReduce, a framework for running large-scale parallel computations de- veloped at Google. We have written a set of wrappers that allow a Bigtable to be used both as an input source and as an output target for MapReduce jobs.</li></ul><h2 id="building-blocks">Building Blocks</h2><ul><li>Bigtable is built on several other pieces of Google infrastructure. Bigtable uses the distributed Google File System (GFS) to store log and data files. A Bigtable cluster typically operates in a shared pool of machines that run a wide variety of other distributed applications, and Bigtable processes often share the same machines with processes from other applications. Bigtable de- pends on a cluster management system for scheduling jobs, managing resources on shared machines, dealing with machine failures, and monitoring machine status.</li><li>The Google SSTable file format is used internally to store Bigtable data</li><li>Bigtable relies on a highly-available and persistent distributed lock service called <strong>Chubby</strong></li></ul><h2 id="implementation">Implementation</h2><p>The Bigtable implementation has three major compo- nents: - a library that is linked into every client - one master server - many tablet servers</p><p>A Bigtable cluster stores a number of tables. Each table consists of a set of tablets, and each tablet contains all data associated with a row range. Initially, each table consists of just one tablet. As a table grows, it is auto- matically split into multiple tablets, each approximately 100-200 MB in size by default.</p><h3 id="tablet-location">Tablet Location</h3><ul><li>We use a three-level hierarchy analogous to that of a B+- tree to store tablet location information <img src="1.png" alt="1.png"></li></ul><h3 id="tablet-assignment">Tablet Assignment</h3><p>Each tablet is assigned to one tablet server at a time - The master keeps track of the set of live tablet servers - Bigtable uses Chubby to keep track of tablet servers - The master is responsible for detecting when a tablet server is no longer serving its tablets, and for reassigning those tablets as soon as possible - When a master is started by the cluster management system, it needs to discover the current tablet assign- ments before it can change them</p><h3 id="tablet-serving">Tablet Serving</h3><ul><li>Updates are committed to a commit log that stores redo records</li><li>the recently committed ones are stored in memory in a sorted buffer called a memtable</li><li>the older updates are stored in a sequence of SSTables</li><li>To recover a tablet, a tablet server reads its metadata from the METADATA table. This meta- data contains the list of SSTables that comprise a tablet and a set of a redo points, which are pointers into any commit logs that may contain data for the tablet <img src="2.png" alt="2.png"></li></ul><h2 id="refinements">Refinements</h2><ol type="1"><li>Locality groups<ul><li>Clients can group multiple column families together into a locality group</li></ul></li><li>Compression<ul><li>Clients can control whether or not the SSTables for a locality group are compressed, and if so, which compression format is used</li></ul></li><li>Caching for read performance<ul><li>To improve read performance, tablet servers use two levels of caching. The <strong>Scan Cache</strong> is a higher-level cache that caches the key-value pairs returned by the SSTable interface to the tablet server code. The <strong>Block Cache</strong> is a lower-level cache that caches SSTables blocks that were read from GFS</li></ul></li><li>Bloom filters<ul><li>a read operation has to read from all SSTables that make up the state of a tablet</li></ul></li><li>Commit-log implementation<ul><li>we append mutations to a single commit log per tablet server, co-mingling mutations for different tablets in the same physical log file</li></ul></li><li>Speeding up tablet recovery<ul><li>If the master moves a tablet from one tablet server to another, the source tablet server first does a minor compaction on that tablet</li></ul></li><li>Exploiting immutability<ul><li>Besides the SSTable caches, various other parts of the Bigtable system have been simplified by the fact that all of the SSTables that we generate are immutable</li></ul></li></ol><h2 id="lesson">Lesson</h2><ol type="1"><li>large distributed sys- tems are vulnerable to many types of failures, not just the standard network partitions and fail-stop failures as- sumed in many distributed protocols</li><li>it is important to delay adding new features until it is clear how the new features will be used</li><li>the importance of proper system-level monitoring</li><li>The most important lesson we learned is the value of simple designs</li></ol>]]></content>
      
      
      <categories>
          
          <category> Paper Note </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>AI for Everyone</title>
      <link href="/AI-for-Everyone/2019/02/28/"/>
      <url>/AI-for-Everyone/2019/02/28/</url>
      
        <content type="html"><![CDATA[<p>Thanks Andrew Ng for providing the amazing course.</p><p><strong>Reference From <a href="https://www.coursera.org/learn/ai-for-everyone" target="_blank" rel="noopener">Ai for Everyone</a></strong></p><p>Here is my course certificate: <img src="ai_for_everyone.png"></p><p><img src="1.png"> <img src="2.png"> <img src="3.png"> <img src="4.png"> <img src="5.png"> <img src="6.png"> <img src="7.png"> <img src="8.png"> <img src="9.png"> <img src="10.png"> <img src="11.png"> <img src="12.png"> <img src="13.png"> <img src="14.png"> <img src="15.png"> <img src="16.png"> <img src="17.png"> <img src="18.png"></p>]]></content>
      
      
      <categories>
          
          <category> Artificial Intelligence </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Course Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>What is P-Value?</title>
      <link href="/What-is-P-Value/2019/02/24/"/>
      <url>/What-is-P-Value/2019/02/24/</url>
      
        <content type="html"><![CDATA[<h2 id="why-it-is-so-successful-in-science">Why it is so successful in science?</h2><blockquote><p>In some sense it offers a first line of defense against being fooled by randomness, separating signal from noise.</p></blockquote><h2 id="definition">Definition</h2><ul><li>p-values tell you how surprising the data is, assuming there is no effect.</li><li>formal definition:<br><blockquote class="blockquote-center">A p-value is the probability of getting the observed or more extreme data, assuming the null hypothesis is true.</blockquote></li></ul><p><strong>在假设原假设（H0）正确时，出现观察到的现状或更差的情况的概率</strong></p><h2 id="example">Example</h2><p><strong>Does driving while calling increase the risk of a car accident?</strong> 设计实验，一组司机开车打电话，一组司机开车不打电话，然后对比发生事故的概率。</p><ul><li>The difference is never exactly zero. A difference of e.g., 0.11 means:<ol type="1"><li>Probably just random noise.</li><li>Probably a real difference</li></ol></li></ul><h2 id="null-hypthesis">Null hypthesis</h2><blockquote><p>假设零假设为真，即符合中心为0的正态分布。</p></blockquote><ul><li>Assuming null hypthesis is true， means most of the data will fall between these two critical values. <img src="5A77C161EAB415973599154275FFF24D.png" alt="Screen Shot 2018-09-21 at 14.06.49.png"> <img src="0F5799A340B2ED51C1AF44365C76CBD9.png" alt="Screen Shot 2018-09-21 at 14.09.17.png"></li></ul><h2 id="important-notes">Important notes</h2><ol type="1"><li>A p-value is the probability of the data, not the probability of a theory.</li><li>You can’t get the probability the null hypothesis is true, given the data, from a p-value. <span class="math display">\[P(D*|H) ≠ P(H|D)\]</span></li><li>A single p-value is not enough to declare a scientific discovery; only when we can repeatedly observe something, we can consider it a reliable observation.</li></ol><h2 id="how-to-use-pvalue-correctly">How to use pValue correctly?</h2><ol type="1"><li>Use p-values as a rule to guide behavior in the long run.</li><li>不能说，因为<span class="math inline">\(p &lt; x\)</span>,所以理论正确。应该说，因为<span class="math inline">\(p &lt; x\)</span>,所以结果符合预期。</li></ol><h2 id="hwo-to-calculate-pvalue">Hwo to calculate pValue?</h2><p>以抛硬币实验为例完成假设检验 - 假设：硬币是公平的 - 检验：认为假设是成立的，然后扔十次，看结果与假设是否相符</p><p>反复扔硬币符合二项分布），也就是： <span class="math display">\[X\sim B(n,\mu)\]</span></p><p>其中， n代表扔硬币的次数，<span class="math inline">\(\mu\)</span>代表“花”朝上的概率。</p><p>在我们认为硬币是公平的前提下，扔1000次硬币应该符合以下分布：</p><p><span class="math display">\[X\sim B(1000, 0.5)\]</span></p><figure><img src="1299D5FFC8ACDF02B18F0CDD6BAF9EE6.png" alt="Screen Shot 2018-09-23 at 14.19.13.png"><figcaption>Screen Shot 2018-09-23 at 14.19.13.png</figcaption></figure><p>若1000次抛硬币实验结果为正面朝上530次，则pVlue取530以及更极端的点组成组成区间。 <img src="F79D182822786A87CFF2A4476D496CC4.png" alt="Screen Shot 2018-09-23 at 14.23.13.png"></p><h2 id="什么是显著水平alpha">什么是显著水平<span class="math inline">\(\alpha\)</span>?</h2><p>抛一千次硬币，我们认为出现530次正面之后，硬币是不公平的，还是出现580次正面之后，硬币是不公平的，这是一个主观标准。</p><p>我们一般认为: <span class="math display">\[\text {p-value}\leq 0.05\]</span> 就可以认为假设是不正确的。</p><p>表示出来如下图所示: <img src="DFF65458A10B923E71CB9B68AF5FFB11.png" alt="Screen Shot 2018-09-23 at 14.27.03.png"> <strong>我们可以认为刚开始的假设错的很“显著”，也就是“硬币是不公平的”。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Statistics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Concept </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Understanding Logistic Regression</title>
      <link href="/Understanding-Logistic-Regression/2019/02/24/"/>
      <url>/Understanding-Logistic-Regression/2019/02/24/</url>
      
        <content type="html"><![CDATA[<h2 id="逻辑回归的输出是什么">逻辑回归的输出是什么？</h2><p><span class="math display">\[h_{\theta} = P(y = 1| x;\theta)\]</span></p><p><strong>也就是给定x和在参数theta下，y=1(default)的概率</strong></p><h2 id="逻辑回归的输入是什么">逻辑回归的输入是什么？</h2><p><span class="math display">\[ y_{\theta} = \beta_{0} + \beta_{1}x_{1} + \beta_{2}x_{2} .... \]</span></p><p><strong>也就是线性回归</strong></p><ul><li>所以Logistic Regression的决策边界是线性回归</li><li>逻辑回归的本质还是<strong>线性回归</strong>，也会看到有一些文章说在特征到结果的映射中多加了一层<strong>函数映射</strong></li></ul><h2 id="我们用什么把输入与输出联系起来">我们用什么把输入与输出联系起来？</h2><p>Logit function:</p><p><span class="math display">\[Logit(p) =  ln(odds) = ln(\frac{p}{1-p})\]</span></p><figure><img src="logit.png" alt="logit"><figcaption>logit</figcaption></figure><ul><li>定义域为[0,1], 值域为R.</li><li><p>将上述方程取反函数，得到sigmoid函数，定义域为R, y为P, 值域为[0,1].</p><p><span class="math display">\[Sigmoid(\alpha) = logit^{-1}(\alpha) = \frac{1}{1+e^{-\alpha}}\]</span></p></li></ul><figure><img src="sigmoid.png" alt="sigmoid"><figcaption>sigmoid</figcaption></figure><h2 id="maximum-likelihood-estimation-来估计参数theta的值">Maximum likelihood estimation 来估计参数theta的值</h2><p><span class="math display">\[L(\theta) = \prod_{i:y_{i}=1}p(x_{i})\prod_{i^{\prime}:y_{i^{\prime}}=0}(1-p(x_{i^{\prime}}))\]</span></p><ul><li>Get coefficients that maximizes the likelihood, then use them for predictions</li><li>Maximizing the likelihood function is equivalent to minimizing the cost function <span class="math inline">\(J(\theta)\)</span></li></ul><p><span class="math display">\[J(\theta) = - \sum_{i=1}^{n}[y_{i}log(P(y_{i} = 1 | x)) + (1 - y_{i})log(1 - P(y_{i}=1|x))]\]</span></p>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>INFSCI 2595:Machine Learning(part one)</title>
      <link href="/INFSCI-2595-Machine-Learning-part-one/2019/02/23/"/>
      <url>/INFSCI-2595-Machine-Learning-part-one/2019/02/23/</url>
      
        <content type="html"><![CDATA[<p><strong>Reference from some lecture slides of INFSCI 2595 lectured by Dr. Mai Abdelhakim</strong></p><h2 id="introduction">Introduction</h2><h3 id="what-is-machine-learning">What is Machine Learning?</h3><ul><li>Subfield of artificial intelligence</li><li>Field of study that gives computers the ability to learn without being explicitly programmed</li></ul><h3 id="how-can-we-build-computer-system-that-learn-and-improve-with-experience">How can we build computer system that learn and improve with experience?</h3><ul><li>Statistics make conclusions from data, and estimate reliability of conclusions</li><li>Optimization and computing power to solve problems</li></ul><blockquote class="blockquote-center">Machine learns with respect to a particular <strong>task T</strong>, <strong>performance metric P</strong> and <strong>experience E</strong>, if the performance P on task T improves with <strong>experience E</strong>.</blockquote><h3 id="why-machine-learning-is-important">Why Machine Learning is Important</h3><ul><li>Provide solution to complex problems that cannot be easily programmed</li><li>Can adapt to new data</li><li>Helps us to understand complicated phenomena</li><li>Can outperform human performance</li></ul><h3 id="machine-learning-algorithms">Machine Learning Algorithms</h3><h4 id="supervised-learning">Supervised Learning</h4><ol type="1"><li>Learn using labeled data (correct answers are given in learning phase)</li><li>make predictions of previously unseen data</li><li>Two types of problems<ul><li><strong>Regression</strong>: Target values (Y) are continuous/quantitative</li><li><strong>Classification</strong>: Target values (Y) are discrete/finite/qualitative</li></ul></li></ol><h4 id="unsupervised-learning">Unsupervised Learning</h4><ol type="1"><li>Clustering analysis</li><li>Finding groups of similar users</li><li>Detecting abnormal patterns</li></ol><h2 id="machine-learning-models-and-trade-offs">Machine Learning Models and Trade-offs</h2><h3 id="why-do-we-need-a-model-why-estimate-f">Why do we need a model? Why estimate f?</h3><ul><li><strong>Predictions</strong>: Make predictions for new inputs/features</li><li><strong>Inference</strong>: understand the way Y is affected by each features<ul><li>Which feature has stronger impact on the response?</li><li>Is relation positive or negative</li><li>Is the relationship linear or more complicated</li></ul></li></ul><h3 id="how-to-estimate-f">How to estimate f?</h3><ol type="1"><li>Parametric Approach<ul><li>First,assume function form</li><li>Second, use training to fit the model</li></ul></li><li>Non-Parametric Approach<ul><li>No explicit form of function f is assumed</li><li>Seek to estimate f as close as possible to the data points</li></ul></li></ol><h3 id="trade-off-model-flexibility-vs-model-interpretability">Trade-off: Model Flexibility vs Model Interpretability</h3><p><a href="interpretability.png">interpretability</a></p><h3 id="model-accuracy">Model Accuracy</h3><ol type="1"><li>In regression setting, a common measure is mean squared error(MSE)</li></ol><p><span class="math display">\[MSE = \frac{1}{n}\sum_{i=1}^{n}(y_{i} - \hat{f(x_{i})})^{2}\]</span></p><h4 id="overfitting-and-underfitting">Overfitting and Underfitting</h4><p>Two thing we need to avoid: - Overfitting: Building a model that is too complex, fits training data very well, but fail to generalize to new data (e.g. large test MSE) - Underfitting: build simple model that is unable to capture variability in data</p><ul><li>Simple models may not capture the variability in the data</li><li>Complex models may not generalize</li></ul><h4 id="bias-variance-tradeoff">Bias-Variance Tradeoff</h4><p><span class="math display">\[E(y_{0} - \hat{f(x_{0})})^2 = Var(\hat{f(x_{0})}) + [Bias(\hat{f(x_{0})})]^{2} + Var(\epsilon)\]</span></p><ul><li>Variance: amount by which <span class="math inline">\(\hat{f}\)</span> changes if we made the estimation by different training set</li><li>Bias: Errors from approximating real-life problems by a simpler model</li></ul><ol start="2" type="1"><li>Classification Setting</li></ol><ul><li><span class="math inline">\(\hat{y_{0}} = \hat{f(x_{0})}\)</span> is the predicted output class</li><li>Test error rate: <span class="math display">\[Average(I(y_{0} \neq \hat{y_{0}}))\]</span></li></ul><h4 id="bayes-classifier">Bayes classifier</h4><ul><li>Bayes classifier assigns each observation to the most likely class given the feature values.</li><li>Assign <span class="math inline">\(x_{0}\)</span> to class ! that has largest <span class="math inline">\(Pr(Y= j|X = x_{0})\)</span></li></ul><h4 id="k-nearest-neighbors">K-Nearest Neighbors</h4><ul><li>Define a positive integer K</li><li>For each test observation <span class="math inline">\(x_{0}\)</span> , identify K points in the training data that are closest to <span class="math inline">\(x_{0}\)</span> referred to as <span class="math inline">\(N_{0}\)</span></li><li>Estimate the conditional probability for class j as fraction of points in <span class="math inline">\(N_{0}\)</span> whose response values equal to j <span class="math display">\[Pr(Y = j | X = x_{0}) = \frac{1}{k}\sum_{i \in N_{0}}I(y_{i} == j)\]</span></li></ul><p><a href="knn.png">knn</a></p>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>An overview of gradient descent optimization algorithms</title>
      <link href="/An-overview-of-gradient-descent-optimization-algorithms/2019/02/23/"/>
      <url>/An-overview-of-gradient-descent-optimization-algorithms/2019/02/23/</url>
      
        <content type="html"><![CDATA[<p><strong>Reference from <a href="https://arxiv.org/abs/1609.04747" target="_blank" rel="noopener">An overview of gradient descent optimization algorithms</a></strong></p><h2 id="batch-gradient-descent">Batch gradient descent</h2><p><span class="math display">\[\theta = \theta - \eta * \triangledown_{\theta}J(\theta)\]</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(nb_epochs):</span><br><span class="line">  params_grad = evaluate_gradient(loss_function, data, params)</span><br><span class="line">  params = params - learning_rate * params_grad</span><br></pre></td></tr></table></figure><ul><li>Batch gradient descent is guaranteed to converge to the global minimum for convex error surfaces and to a local minimum for non-convex surfaces.</li></ul><h2 id="stochastic-gradient-descent">Stochastic gradient descent</h2><p><span class="math display">\[\theta = \theta - \eta * \triangledown_{\theta}J(\theta; x^{i};y^{i})\]</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(nb_epochs):</span><br><span class="line">  np.random.shuffle(data)</span><br><span class="line">  <span class="keyword">for</span> example <span class="keyword">in</span> data:</span><br><span class="line">    params_grad = evaluate_gradient(loss_function, example, params)</span><br><span class="line">    params = params - learning_rate * params_grad</span><br></pre></td></tr></table></figure><ul><li>SGD performs frequent updates with a high variance that cause the objective function to fluctuate heavily as in Image 1.</li><li><img src="image1.png" alt="image1.png"></li><li>SGD shows the same convergence behaviour as batch gradient descent, almost certainly converging to a local or the global minimum for non-convex and convex optimization respectively.</li></ul><h2 id="mini-batch-gradient-descent">Mini-batch gradient descent</h2><p><span class="math display">\[\theta = \theta - \eta * \triangledown_{\theta}J(\theta; x^{i:i+n};y^{i:i+n})\]</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(nb_epochs):</span><br><span class="line">  np.random.shuffle(data)</span><br><span class="line">  <span class="keyword">for</span> batch <span class="keyword">in</span> get_batches(data, batch_size=<span class="number">50</span>):</span><br><span class="line">    params_grad = evaluate_gradient(loss_function, batch, params)</span><br><span class="line">    params = params - learning_rate * params_grad</span><br></pre></td></tr></table></figure><ul><li>Common mini-batch sizes range between 50 and 256, but can vary for different applications</li><li>Mini-batch gradient descent is typically the algorithm of choice when training a neural network and the term SGD usually is employed also when mini-batches are used</li></ul><h2 id="challenges">Challenges</h2><ul><li>Choosing a proper learning rate can be difficult</li><li>the same learning rate applies to all parameter updates</li><li>Learning rate schedules<ul><li>ry to adjust the learning rate during training by e.g. annealing</li><li>reducing the learning rate according to a pre-defined schedule or when the change in objective between epochs falls below a threshold</li></ul></li><li>Another key challenge of minimizing highly non-convex error functions common for neural networks is avoiding getting trapped in their numerous suboptimal local minima</li></ul><h2 id="momentum">Momentum</h2><p>Momentum is a method that helps accelerate SGD in the relevant direction and dampens oscillations as can be seen in Image 3. It does this by adding a fraction of the update vector of the past time step to the current update vector:</p><p><span class="math display">\[\begin{align*}&amp; v_{t} = \gamma v_{t-1} +  \eta * \triangledown_{\theta}J(\theta) \\&amp; \theta = \theta - v_{t}\\\end{align*}\]</span></p><ul><li>The momentum term <span class="math inline">\(\gamma\)</span> is usually set to 0.9 or a similar value.</li><li>The ball accumulates momentum as it rolls downhill, becoming faster and faster on the way</li></ul><h2 id="nesterov-accelerated-gradient">Nesterov accelerated gradient</h2><p><span class="math display">\[\begin{align*}&amp; v_{t} = \gamma v_{t-1} +  \eta * \triangledown_{\theta}J(\theta - \gamma * m) \\&amp; \theta = \theta - v_{t}\\\end{align*}\]</span></p><ul><li>既然参数要沿着 <span class="math inline">\(\theta - \gamma * m\)</span>更新，那就先先计算未来位置的梯度</li><li>This anticipatory update prevents us from going too fast and results in increased responsiveness, which has significantly increased the performance of RNNs on a number of tasks</li></ul><h2 id="adagrad">Adagrad</h2><p><span class="math display">\[\begin{align*}&amp; s = s + \triangledown J(\theta) \bigodot \triangledown J(\theta) \\&amp; \theta = \theta - \frac{\eta}{\sqrt{s + \epsilon}} \bigodot \triangledown J(\theta) \\\end{align*}\]</span></p><ul><li>One of Adagrad's main benefits is that it eliminates the need to manually tune the learning rate</li><li>Adagrad modifies the general learning rate <span class="math inline">\(\gamma\)</span> at each time step t for every parameter <span class="math inline">\(\theta_{i}\)</span> based on the past gradients that have been computed for <span class="math inline">\(\theta_{i}\)</span></li></ul><h2 id="rmsprop">RMSprop</h2><p><span class="math display">\[\begin{align*}&amp; v_{t} = \gamma v_{t-1} + (1-\gamma) * \triangledown J(\theta) \bigodot \triangledown J(\theta) \\&amp; \theta = \theta - v_{t} \\\end{align*}\]</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.train.RMSPropOptimizer(learning_rate=learning_rate, momentum=<span class="number">0.9</span>, decay=<span class="number">0.9</span>, epsilon=<span class="number">1e-10</span>)</span><br></pre></td></tr></table></figure><ul><li>加入Momentum，主要是解决学习速率过快衰减的问题</li><li>RMSprop as well divides the learning rate by an exponentially decaying average of squared gradients. Hinton suggests <span class="math inline">\(\gamma\)</span> to be set to 0.9, while a good default value for the learning rate <span class="math inline">\(\eta\)</span> is 0.001.</li></ul><h2 id="adaptive-moment-estimation-adam">Adaptive moment estimation (Adam)</h2><p><span class="math display">\[\begin{align*}&amp; m = \beta_{1} * m + (1-\beta_{1}) * \triangledown J(\theta) \\&amp; s = \beta_{2} * s + (1-\beta_{2}) * \triangledown J(\theta) \bigodot \triangledown J(\theta) \\&amp; m = \frac{m}{1-\beta^{t}_{1}} \\&amp; s = \frac{s}{1-\beta^{t}_{2}} \\&amp; \theta = \theta - \frac{\eta}{\sqrt{s + \epsilon}} \bigodot m\end{align*}\]</span></p><ul><li>其结合了Momentum和RMSprop算法的思想。相比Momentum算法，其学习速率是自适应的，而相比RMSprop，其增加了冲量项, 第三和第四项主要是为了放大它们</li><li>The authors propose default values of 0.9 for <span class="math inline">\(\beta1\)</span>, 0.9999 for <span class="math inline">\(\beta2\)</span> and <span class="math inline">\(10^{-8}\)</span> for <span class="math inline">\(\epsilon\)</span></li></ul>]]></content>
      
      
      <categories>
          
          <category> Paper Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linear models, Optimization</title>
      <link href="/Linear-models-Optimization/2019/02/22/"/>
      <url>/Linear-models-Optimization/2019/02/22/</url>
      
        <content type="html"><![CDATA[<h1 id="programming-assignment-linear-models-optimization">Programming assignment (Linear models, Optimization)</h1><p>In this programming assignment you will implement a linear classifier and train it using stochastic gradient descent modifications and numpy.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">".."</span>)</span><br><span class="line"><span class="keyword">import</span> grading</span><br><span class="line">grader = grading.Grader(assignment_key=<span class="string">"UaHtvpEFEee0XQ6wjK-hZg"</span>, </span><br><span class="line">                      all_parts=[<span class="string">"xU7U4"</span>, <span class="string">"HyTF6"</span>, <span class="string">"uNidL"</span>, <span class="string">"ToK7N"</span>, <span class="string">"GBdgZ"</span>, <span class="string">"dLdHG"</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># token expires every 30 min</span></span><br><span class="line">COURSERA_TOKEN = <span class="string">"TmANlFkR4a4doLvg"</span></span><br><span class="line">COURSERA_EMAIL = <span class="string">"lvduzhen@gmail.com"</span></span><br></pre></td></tr></table></figure><h2 id="two-dimensional-classification">Two-dimensional classification</h2><p>To make things more intuitive, let's solve a 2D classification problem with synthetic data.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'train.npy'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> fin:</span><br><span class="line">    X = np.load(fin)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'target.npy'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> fin:</span><br><span class="line">    y = np.load(fin)</span><br><span class="line"></span><br><span class="line">plt.scatter(X[:, <span class="number">0</span>], X[:, <span class="number">1</span>], c=y, cmap=plt.cm.Paired, s=<span class="number">20</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure><img src="output_5_0.png" alt="png"><figcaption>png</figcaption></figure><h1 id="task">Task</h1><h2 id="features">Features</h2><p>As you can notice the data above isn't linearly separable. Since that we should add features (or use non-linear model). Note that decision line between two classes have form of circle, since that we can add quadratic features to make the problem linearly separable. The idea under this displayed on image below:</p><p><img src="kernel.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(X)</span><br></pre></td></tr></table></figure><pre><code>[[ 1.20798057  0.0844994 ] [ 0.76121787  0.72510869] [ 0.55256189  0.51937292] ...,  [-1.22224754  0.45743421] [ 0.43973452 -1.47275142] [ 1.4928118   1.15683375]]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">expand</span><span class="params">(X)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Adds quadratic features. </span></span><br><span class="line"><span class="string">    This expansion allows your linear model to make non-linear separation.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    For each sample (row in matrix), compute an expanded row:</span></span><br><span class="line"><span class="string">    [feature0, feature1, feature0^2, feature1^2, feature0*feature1, 1]</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    :param X: matrix of features, shape [n_samples,2]</span></span><br><span class="line"><span class="string">    :returns: expanded features of shape [n_samples,6]</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    X_expanded = np.zeros((X.shape[<span class="number">0</span>], <span class="number">6</span>))</span><br><span class="line">    X_expanded[:,<span class="number">0</span>] = X[:,<span class="number">0</span>]</span><br><span class="line">    X_expanded[:,<span class="number">1</span>] = X[:,<span class="number">1</span>]</span><br><span class="line">    X_expanded[:,<span class="number">2</span>] = np.square(X[:,<span class="number">0</span>])</span><br><span class="line">    X_expanded[:,<span class="number">3</span>] = np.square(X[:,<span class="number">1</span>])</span><br><span class="line">    X_expanded[:,<span class="number">4</span>] = X[:,<span class="number">0</span>] * X[:,<span class="number">1</span>]</span><br><span class="line">    X_expanded[:,<span class="number">5</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> X_expanded</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span>&lt;your code here&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X_expanded = expand(X)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X_expanded</span><br></pre></td></tr></table></figure><pre><code>array([[ 1.20798057,  0.0844994 ,  1.45921706,  0.00714015,  0.10207364,         1.        ],       [ 0.76121787,  0.72510869,  0.57945265,  0.52578261,  0.5519657 ,         1.        ],       [ 0.55256189,  0.51937292,  0.30532464,  0.26974823,  0.28698568,         1.        ],       ...,        [-1.22224754,  0.45743421,  1.49388906,  0.20924606, -0.55909785,         1.        ],       [ 0.43973452, -1.47275142,  0.19336645,  2.16899674, -0.64761963,         1.        ],       [ 1.4928118 ,  1.15683375,  2.22848708,  1.33826433,  1.72693508,         1.        ]])</code></pre><p>Here are some tests for your implementation of <code>expand</code> function.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># simple test on random numbers</span></span><br><span class="line"></span><br><span class="line">dummy_X = np.array([</span><br><span class="line">        [<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">        [<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">        [<span class="number">2.61</span>,<span class="number">-1.28</span>],</span><br><span class="line">        [<span class="number">-0.59</span>,<span class="number">2.1</span>]</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line"><span class="comment"># call your expand function</span></span><br><span class="line">dummy_expanded = expand(dummy_X)</span><br><span class="line"></span><br><span class="line"><span class="comment"># what it should have returned:   x0       x1       x0^2     x1^2     x0*x1    1</span></span><br><span class="line">dummy_expanded_ans = np.array([[ <span class="number">0.</span>    ,  <span class="number">0.</span>    ,  <span class="number">0.</span>    ,  <span class="number">0.</span>    ,  <span class="number">0.</span>    ,  <span class="number">1.</span>    ],</span><br><span class="line">                               [ <span class="number">1.</span>    ,  <span class="number">0.</span>    ,  <span class="number">1.</span>    ,  <span class="number">0.</span>    ,  <span class="number">0.</span>    ,  <span class="number">1.</span>    ],</span><br><span class="line">                               [ <span class="number">2.61</span>  , <span class="number">-1.28</span>  ,  <span class="number">6.8121</span>,  <span class="number">1.6384</span>, <span class="number">-3.3408</span>,  <span class="number">1.</span>    ],</span><br><span class="line">                               [<span class="number">-0.59</span>  ,  <span class="number">2.1</span>   ,  <span class="number">0.3481</span>,  <span class="number">4.41</span>  , <span class="number">-1.239</span> ,  <span class="number">1.</span>    ]])</span><br><span class="line"></span><br><span class="line"><span class="comment">#tests</span></span><br><span class="line"><span class="keyword">assert</span> isinstance(dummy_expanded,np.ndarray), <span class="string">"please make sure you return numpy array"</span></span><br><span class="line"><span class="keyword">assert</span> dummy_expanded.shape == dummy_expanded_ans.shape, <span class="string">"please make sure your shape is correct"</span></span><br><span class="line"><span class="keyword">assert</span> np.allclose(dummy_expanded,dummy_expanded_ans,<span class="number">1e-3</span>), <span class="string">"Something's out of order with features"</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"Seems legit!"</span>)</span><br></pre></td></tr></table></figure><pre><code>Seems legit!</code></pre><h2 id="logistic-regression">Logistic regression</h2><p>To classify objects we will obtain probability of object belongs to class '1'. To predict probability we will use output of linear model and logistic function:</p><p><span class="math display">\[ a(x; w) = \langle w, x \rangle \]</span> <span class="math display">\[ P( y=1 \; \big| \; x, \, w) = \dfrac{1}{1 + \exp(- \langle w, x \rangle)} = \sigma(\langle w, x \rangle)\]</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">probability</span><span class="params">(X, w)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Given input features and weights</span></span><br><span class="line"><span class="string">    return predicted probabilities of y==1 given x, P(y=1|x), see description above</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    Don't forget to use expand(X) function (where necessary) in this and subsequent functions.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    :param X: feature matrix X of shape [n_samples,6] (expanded)</span></span><br><span class="line"><span class="string">    :param w: weight vector w of shape [6] for each of the expanded features</span></span><br><span class="line"><span class="string">    :returns: an array of predicted probabilities in [0,1] interval.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    w = w.reshape((w.shape[<span class="number">0</span>],<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span>  <span class="number">1</span>/(<span class="number">1</span> + np.exp(-np.dot(X,w)))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span>&lt;your code here&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dummy_weights = np.linspace(<span class="number">-1</span>, <span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">ans_part1 = probability(X_expanded[:<span class="number">1</span>, :], dummy_weights)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## GRADED PART, DO NOT CHANGE!</span></span><br><span class="line">grader.set_answer(<span class="string">"xU7U4"</span>, ans_part1)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># you can make submission with answers so far to check yourself at this stage</span></span><br><span class="line">grader.submit(COURSERA_EMAIL, COURSERA_TOKEN)</span><br></pre></td></tr></table></figure><pre><code>Submitted to Coursera platform. See results on assignment page!</code></pre><p>In logistic regression the optimal parameters <span class="math inline">\(w\)</span> are found by cross-entropy minimization:</p><p>Loss for one sample: <span class="math display">\[ l(x_i, y_i, w) = - \left[ {y_i \cdot log P(y_i = 1 \, | \, x_i,w) + (1-y_i) \cdot log (1-P(y_i = 1\, | \, x_i,w))}\right] \]</span></p><p>Loss for many samples: <span class="math display">\[ L(X, \vec{y}, w) =  {1 \over \ell} \sum_{i=1}^\ell l(x_i, y_i, w) \]</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_loss</span><span class="params">(X, y, w)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Given feature matrix X [n_samples,6], target vector [n_samples] of 1/0,</span></span><br><span class="line"><span class="string">    and weight vector w [6], compute scalar loss function L using formula above.</span></span><br><span class="line"><span class="string">    Keep in mind that our loss is averaged over all samples (rows) in X.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    y = y.reshape((y.shape[<span class="number">0</span>],<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> -np.mean(y*np.log(probability(X,w)) + (<span class="number">1</span>-y)*np.log(<span class="number">1</span>-probability(X,w)))</span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span>&lt;your code here&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># use output of this cell to fill answer field </span></span><br><span class="line">ans_part2 = compute_loss(X_expanded, y, dummy_weights)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## GRADED PART, DO NOT CHANGE!</span></span><br><span class="line">grader.set_answer(<span class="string">"HyTF6"</span>, ans_part2)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># you can make submission with answers so far to check yourself at this stage</span></span><br><span class="line">grader.submit(COURSERA_EMAIL, COURSERA_TOKEN)</span><br></pre></td></tr></table></figure><pre><code>Submitted to Coursera platform. See results on assignment page!</code></pre><p>Since we train our model with gradient descent, we should compute gradients.</p><p>To be specific, we need a derivative of loss function over each weight [6 of them].</p><p><span class="math display">\[ \nabla_w L = {1 \over \ell} \sum_{i=1}^\ell \nabla_w l(x_i, y_i, w) \]</span></p><p>We won't be giving you the exact formula this time — instead, try figuring out a derivative with pen and paper.</p><p>As usual, we've made a small test for you, but if you need more, feel free to check your math against finite differences (estimate how <span class="math inline">\(L\)</span> changes if you shift <span class="math inline">\(w\)</span> by <span class="math inline">\(10^{-5}\)</span> or so).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_grad</span><span class="params">(X, y, w)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Given feature matrix X [n_samples,6], target vector [n_samples] of 1/0,</span></span><br><span class="line"><span class="string">    and weight vector w [6], compute vector [6] of derivatives of L over each weights.</span></span><br><span class="line"><span class="string">    Keep in mind that our loss is averaged over all samples (rows) in X.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    y = y.reshape((y.shape[<span class="number">0</span>],<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> np.mean(X*(probability(X,w) - y),axis = <span class="number">0</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># use output of this cell to fill answer field </span></span><br><span class="line">ans_part3 = np.linalg.norm(compute_grad(X_expanded, y, dummy_weights))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## GRADED PART, DO NOT CHANGE!</span></span><br><span class="line">grader.set_answer(<span class="string">"uNidL"</span>, ans_part3)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># you can make submission with answers so far to check yourself at this stage</span></span><br><span class="line">grader.submit(COURSERA_EMAIL, COURSERA_TOKEN)</span><br></pre></td></tr></table></figure><pre><code>Submitted to Coursera platform. See results on assignment page!</code></pre><p>Here's an auxiliary function that visualizes the predictions:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> IPython <span class="keyword">import</span> display</span><br><span class="line"></span><br><span class="line">h = <span class="number">0.01</span></span><br><span class="line">x_min, x_max = X[:, <span class="number">0</span>].min() - <span class="number">1</span>, X[:, <span class="number">0</span>].max() + <span class="number">1</span></span><br><span class="line">y_min, y_max = X[:, <span class="number">1</span>].min() - <span class="number">1</span>, X[:, <span class="number">1</span>].max() + <span class="number">1</span></span><br><span class="line">xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visualize</span><span class="params">(X, y, w, history)</span>:</span></span><br><span class="line">    <span class="string">"""draws classifier prediction with matplotlib magic"""</span></span><br><span class="line">    Z = probability(expand(np.c_[xx.ravel(), yy.ravel()]), w)</span><br><span class="line">    Z = Z.reshape(xx.shape)</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">    plt.contourf(xx, yy, Z, alpha=<span class="number">0.8</span>)</span><br><span class="line">    plt.scatter(X[:, <span class="number">0</span>], X[:, <span class="number">1</span>], c=y, cmap=plt.cm.Paired)</span><br><span class="line">    plt.xlim(xx.min(), xx.max())</span><br><span class="line">    plt.ylim(yy.min(), yy.max())</span><br><span class="line">    </span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">    plt.plot(history)</span><br><span class="line">    plt.grid()</span><br><span class="line">    ymin, ymax = plt.ylim()</span><br><span class="line">    plt.ylim(<span class="number">0</span>, ymax)</span><br><span class="line">    display.clear_output(wait=<span class="keyword">True</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">visualize(X, y, dummy_weights, [<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.25</span>])</span><br></pre></td></tr></table></figure><figure><img src="output_30_0.png" alt="png"><figcaption>png</figcaption></figure><h2 id="training">Training</h2><p>In this section we'll use the functions you wrote to train our classifier using stochastic gradient descent.</p><p>You can try change hyperparameters like batch size, learning rate and so on to find the best one, but use our hyperparameters when fill answers.</p><h2 id="mini-batch-sgd">Mini-batch SGD</h2><p>Stochastic gradient descent just takes a random batch of <span class="math inline">\(m\)</span> samples on each iteration, calculates a gradient of the loss on it and makes a step: <span class="math display">\[ w_t = w_{t-1} - \eta \dfrac{1}{m} \sum_{j=1}^m \nabla_w l(x_{i_j}, y_{i_j}, w_t) \]</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># please use np.random.seed(42), eta=0.1, n_iter=100 and batch_size=4 for deterministic results</span></span><br><span class="line"></span><br><span class="line">np.random.seed(<span class="number">42</span>)</span><br><span class="line">w = np.array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">eta= <span class="number">0.1</span> <span class="comment"># learning rate</span></span><br><span class="line"></span><br><span class="line">n_iter = <span class="number">100</span></span><br><span class="line">batch_size = <span class="number">4</span></span><br><span class="line">loss = np.zeros(n_iter)</span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n_iter):</span><br><span class="line">    ind = np.random.choice(X_expanded.shape[<span class="number">0</span>], batch_size)</span><br><span class="line">    loss[i] = compute_loss(X_expanded, y, w)</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">        visualize(X_expanded[ind, :], y[ind], w, loss)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Keep in mind that compute_grad already does averaging over batch for you!</span></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span>&lt;your code here&gt;</span></span><br><span class="line">    random_index = np.random.randint(<span class="number">0</span>,X_expanded.shape[<span class="number">0</span>],batch_size)</span><br><span class="line">    w = w - eta * compute_grad(X_expanded[random_index,:],y[random_index],w)</span><br><span class="line"></span><br><span class="line">visualize(X, y, w, loss)</span><br><span class="line">plt.clf()</span><br></pre></td></tr></table></figure><figure><img src="output_33_0.png" alt="png"><figcaption>png</figcaption></figure><pre><code>&lt;matplotlib.figure.Figure at 0x7fdbbfafb908&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># use output of this cell to fill answer field </span></span><br><span class="line">ans_part4 = compute_loss(X_expanded, y, w)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## GRADED PART, DO NOT CHANGE!</span></span><br><span class="line">grader.set_answer(<span class="string">"ToK7N"</span>, ans_part4)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># you can make submission with answers so far to check yourself at this stage</span></span><br><span class="line">grader.submit(COURSERA_EMAIL, COURSERA_TOKEN)</span><br></pre></td></tr></table></figure><pre><code>Submitted to Coursera platform. See results on assignment page!</code></pre><h2 id="sgd-with-momentum">SGD with momentum</h2><p>Momentum is a method that helps accelerate SGD in the relevant direction and dampens oscillations as can be seen in image below. It does this by adding a fraction <span class="math inline">\(\alpha\)</span> of the update vector of the past time step to the current update vector. <br> <br></p><p><span class="math display">\[ \nu_t = \alpha \nu_{t-1} + \eta\dfrac{1}{m} \sum_{j=1}^m \nabla_w l(x_{i_j}, y_{i_j}, w_t) \]</span> <span class="math display">\[ w_t = w_{t-1} - \nu_t\]</span></p><p><br></p><p><img src="sgd.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># please use np.random.seed(42), eta=0.05, alpha=0.9, n_iter=100 and batch_size=4 for deterministic results</span></span><br><span class="line">np.random.seed(<span class="number">42</span>)</span><br><span class="line">w = np.array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">eta = <span class="number">0.05</span> <span class="comment"># learning rate</span></span><br><span class="line">alpha = <span class="number">0.9</span> <span class="comment"># momentum</span></span><br><span class="line">nu = np.zeros_like(w)</span><br><span class="line"></span><br><span class="line">n_iter = <span class="number">100</span></span><br><span class="line">batch_size = <span class="number">4</span></span><br><span class="line">loss = np.zeros(n_iter)</span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n_iter):</span><br><span class="line">    ind = np.random.choice(X_expanded.shape[<span class="number">0</span>], batch_size)</span><br><span class="line">    loss[i] = compute_loss(X_expanded, y, w)</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">        visualize(X_expanded[ind, :], y[ind], w, loss)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span>&lt;your code here&gt;</span></span><br><span class="line">    random_index = np.random.randint(<span class="number">0</span>,X_expanded.shape[<span class="number">0</span>],batch_size)</span><br><span class="line">    nu = alpha*nu + eta * compute_grad(X_expanded[random_index,:],y[random_index],w)</span><br><span class="line">    w = w - nu</span><br><span class="line"></span><br><span class="line">visualize(X, y, w, loss)</span><br><span class="line">plt.clf()</span><br></pre></td></tr></table></figure><figure><img src="output_38_0.png" alt="png"><figcaption>png</figcaption></figure><pre><code>&lt;matplotlib.figure.Figure at 0x7fdbba216e10&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># use output of this cell to fill answer field </span></span><br><span class="line"></span><br><span class="line">ans_part5 = compute_loss(X_expanded, y, w)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## GRADED PART, DO NOT CHANGE!</span></span><br><span class="line">grader.set_answer(<span class="string">"GBdgZ"</span>, ans_part5)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># you can make submission with answers so far to check yourself at this stage</span></span><br><span class="line">grader.submit(COURSERA_EMAIL, COURSERA_TOKEN)</span><br></pre></td></tr></table></figure><pre><code>Submitted to Coursera platform. See results on assignment page!</code></pre><h2 id="rmsprop">RMSprop</h2><p>Implement RMSPROP algorithm, which use squared gradients to adjust learning rate:</p><p><span class="math display">\[ G_j^t = \alpha G_j^{t-1} + (1 - \alpha) g_{tj}^2 \]</span> <span class="math display">\[ w_j^t = w_j^{t-1} - \dfrac{\eta}{\sqrt{G_j^t + \varepsilon}} g_{tj} \]</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># please use np.random.seed(42), eta=0.1, alpha=0.9, n_iter=100 and batch_size=4 for deterministic results</span></span><br><span class="line">np.random.seed(<span class="number">42</span>)</span><br><span class="line"></span><br><span class="line">w = np.array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1.</span>])</span><br><span class="line"></span><br><span class="line">eta = <span class="number">0.1</span> <span class="comment"># learning rate</span></span><br><span class="line">alpha = <span class="number">0.9</span> <span class="comment"># moving average of gradient norm squared</span></span><br><span class="line">g2 = <span class="keyword">None</span> <span class="comment"># we start with None so that you can update this value correctly on the first iteration</span></span><br><span class="line">eps = <span class="number">1e-8</span></span><br><span class="line">G = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">n_iter = <span class="number">100</span></span><br><span class="line">batch_size = <span class="number">4</span></span><br><span class="line">loss = np.zeros(n_iter)</span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>,<span class="number">5</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n_iter):</span><br><span class="line">    ind = np.random.choice(X_expanded.shape[<span class="number">0</span>], batch_size)</span><br><span class="line">    loss[i] = compute_loss(X_expanded, y, w)</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">        visualize(X_expanded[ind, :], y[ind], w, loss)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span>&lt;your code here&gt;</span></span><br><span class="line">    random_index = np.random.randint(<span class="number">0</span>,X_expanded.shape[<span class="number">0</span>],batch_size)</span><br><span class="line">    g2 = np.square(compute_grad(X_expanded[random_index,:],y[random_index],w))</span><br><span class="line">    G = alpha*G + (<span class="number">1</span>-alpha) * g2</span><br><span class="line">    w = w - eta/np.sqrt(G + eps) * g2</span><br><span class="line">    </span><br><span class="line">visualize(X, y, w, loss)</span><br><span class="line">plt.clf()</span><br></pre></td></tr></table></figure><figure><img src="output_43_0.png" alt="png"><figcaption>png</figcaption></figure><pre><code>&lt;matplotlib.figure.Figure at 0x7fdbba944f98&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># use output of this cell to fill answer field </span></span><br><span class="line">ans_part6 = compute_loss(X_expanded, y, w)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## GRADED PART, DO NOT CHANGE!</span></span><br><span class="line">grader.set_answer(<span class="string">"dLdHG"</span>, ans_part6)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grader.submit(COURSERA_EMAIL, COURSERA_TOKEN)</span><br></pre></td></tr></table></figure><pre><code>Submitted to Coursera platform. See results on assignment page!</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Homework of Online Coueses </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Master Computer Science</title>
      <link href="/Master-Computer-Science/2019/02/20/"/>
      <url>/Master-Computer-Science/2019/02/20/</url>
      
        <content type="html"><![CDATA[<style>table th:first-of-type {    width: 30%;}</style><h2 id="math">MATH</h2><table style="width:100%;"><colgroup><col style="width: 16%"><col style="width: 16%"><col style="width: 16%"><col style="width: 16%"><col style="width: 16%"><col style="width: 16%"></colgroup><thead><tr class="header"><th style="text-align: left;">Course</th><th style="text-align: left;">Institute</th><th style="text-align: left;">Rating</th><th style="text-align: left;">Type</th><th style="text-align: left;">Status</th><th style="text-align: left;">Commnet</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><a href="https://www.coursera.org/learn/statistical-inferences/home/welcome" target="_blank" rel="noopener"><font color="red">Improving your statistical inferences</font></a></td><td style="text-align: left;">Eindhoven University of Technology</td><td style="text-align: left;">4.9</td><td style="text-align: left;">Statistical</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://www.coursera.org/learn/matrix-algebra-engineers/home/welcome" target="_blank" rel="noopener">Matrix Algebra for Engineers</a></td><td style="text-align: left;">The Hong Kong University of Science and Technology</td><td style="text-align: left;"></td><td style="text-align: left;">Linear Algebra</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="https://www.coursera.org/learn/what-is-a-proof/home/welcome" target="_blank" rel="noopener">Mathematical Thinking in Computer Science</a></td><td style="text-align: left;">UCSanDiego</td><td style="text-align: left;"></td><td style="text-align: left;">Discrete Mathematics</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://www.coursera.org/specializations/mathematics-machine-learning" target="_blank" rel="noopener">Mathematics for Machine Learning Specialization</a></td><td style="text-align: left;">Imperail London University</td><td style="text-align: left;">4.5</td><td style="text-align: left;">Math</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="https://lagunita.stanford.edu/courses/Engineering/CVX101/Winter2014/info" target="_blank" rel="noopener">ARCHIVED Convex Optimization</a></td><td style="text-align: left;">Standford</td><td style="text-align: left;"></td><td style="text-align: left;">Optimization</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://lagunita.stanford.edu/courses/HumanitiesSciences/StatLearning/Winter2016/course/" target="_blank" rel="noopener">Statistical Learning</a></td><td style="text-align: left;">Standford</td><td style="text-align: left;"></td><td style="text-align: left;">Probability and Statistics</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="https://lagunita.stanford.edu/courses/course-v1:OLI+ProbStat+Open_Jan2017/course/" target="_blank" rel="noopener">Probability and Statistics</a></td><td style="text-align: left;">Standford</td><td style="text-align: left;"></td><td style="text-align: left;">Probability and Statistics</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-042j-mathematics-for-computer-science-spring-2015/index.htm" target="_blank" rel="noopener">Mathematics for Computer Science</a></td><td style="text-align: left;">MIT</td><td style="text-align: left;"></td><td style="text-align: left;">Math</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="https://www.coursera.org/learn/lisan-youhua-jianmo-jichupian/home/welcome" target="_blank" rel="noopener">Basic Modeling for Discrete Optimization</a></td><td style="text-align: left;">The Chinese University of Hong Kong</td><td style="text-align: left;"></td><td style="text-align: left;">Optimization</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://www.coursera.org/learn/lisan-youhua-jianmo-gaojiepian" target="_blank" rel="noopener">Advanced Modeling for Discrete Optimization</a></td><td style="text-align: left;">The Chinese University of Hong Kong</td><td style="text-align: left;"></td><td style="text-align: left;">Optimization</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="https://www.coursera.org/learn/dmathgen" target="_blank" rel="noopener">Discrete Mathematics Generality</a></td><td style="text-align: left;">Pking University</td><td style="text-align: left;">4.7</td><td style="text-align: left;">Discrete Mathematics</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://www.coursera.org/specializations/social-science" target="_blank" rel="noopener">Methods and Statistics in Social Sciences</a></td><td style="text-align: left;">University of Amsterdam</td><td style="text-align: left;"></td><td style="text-align: left;">Statistics</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="https://www.coursera.org/specializations/discrete-mathematics" target="_blank" rel="noopener">Introduction to Discrete Mathematics for Computer Science</a></td><td style="text-align: left;">UCSanDiego</td><td style="text-align: left;">4.5</td><td style="text-align: left;">Discrete Mathematics</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://www.coursera.org/learn/bayesian-statistics/home/welcome" target="_blank" rel="noopener">Bayesian Statistics: From Concept to Data Analysis</a></td><td style="text-align: left;">UCSantaCruz</td><td style="text-align: left;"></td><td style="text-align: left;">Statistics</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="https://www.coursera.org/learn/mathematical-thinking/home/welcome" target="_blank" rel="noopener">Introduction to Mathematical Thinking</a></td><td style="text-align: left;">Standford</td><td style="text-align: left;"></td><td style="text-align: left;">Math</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://mitmath.github.io/1806/" target="_blank" rel="noopener"><font color="red">18.06 Linear Algebra</font></a></td><td style="text-align: left;">MIT</td><td style="text-align: left;"></td><td style="text-align: left;">Linear Algebra</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="https://courses.edx.org/courses/course-v1:HarvardX+CalcAPL1x+2T2018/course/" target="_blank" rel="noopener"><font color="red">Calculus Applied!</font></a></td><td style="text-align: left;">Harvard</td><td style="text-align: left;"></td><td style="text-align: left;">Calculus</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://courses.edx.org/courses/course-v1:UCSanDiegoX+DSE210x+3T2018/course/" target="_blank" rel="noopener">Probability and Statistics in Data Science using Python</a></td><td style="text-align: left;">UCSanDiego</td><td style="text-align: left;"></td><td style="text-align: left;">Probability and Statistics</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="https://courses.edx.org/courses/course-v1:HarvardX+STAT110x+2T2017/course/" target="_blank" rel="noopener">Introduction to Probability</a></td><td style="text-align: left;">Harvard</td><td style="text-align: left;"></td><td style="text-align: left;">Probability and Statistics</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://www.edx.org/course/calculus-1a-differentiation" target="_blank" rel="noopener"><font color="red">Calculus 1A: Differentiation</font></a></td><td style="text-align: left;">MIT</td><td style="text-align: left;"></td><td style="text-align: left;">Calculus</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="https://www.edx.org/course/calculus-1b-integration" target="_blank" rel="noopener">Calculus 1B: Integration</a></td><td style="text-align: left;">MIT</td><td style="text-align: left;"></td><td style="text-align: left;">Calculus</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://www.edx.org/course/calculus-1c-coordinate-systems-infinite-mitx-18-01-3x-0" target="_blank" rel="noopener">Calculus 1C: Coordinate Systems &amp; Infinite Series</a></td><td style="text-align: left;">MIT</td><td style="text-align: left;"></td><td style="text-align: left;">Calculus</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="https://www.edx.org/course/linear-algebra-foundations-to-frontiers" target="_blank" rel="noopener">Linear Algebra - Foundations to Frontiers</a></td><td style="text-align: left;">UT Austin</td><td style="text-align: left;"></td><td style="text-align: left;">Linear Algebra</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr></tbody></table><h2 id="computer-scicence">Computer Scicence</h2><table style="width:100%;"><colgroup><col style="width: 16%"><col style="width: 16%"><col style="width: 16%"><col style="width: 16%"><col style="width: 16%"><col style="width: 16%"></colgroup><thead><tr class="header"><th style="text-align: left;">Course</th><th style="text-align: left;">Institute</th><th style="text-align: left;">Rating</th><th style="text-align: left;">Type</th><th style="text-align: left;">Status</th><th style="text-align: left;">Commnet</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><a href="https://www.coursera.org/specializations/cloud-computing?" target="_blank" rel="noopener"><font color="red">Cloud Computing Specialization</font></a></td><td style="text-align: left;">UIUC</td><td style="text-align: left;">4.4</td><td style="text-align: left;">Cloud Computing</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://www.coursera.org/specializations/data-structures-algorithms" target="_blank" rel="noopener"><font color="red">Data Structures and Algorithms</font></a></td><td style="text-align: left;">UCSanDiego</td><td style="text-align: left;">4.6</td><td style="text-align: left;">Algorithm and Data Structure</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="https://www.coursera.org/learn/algorithms-part1" target="_blank" rel="noopener">Algorithm Part1</a></td><td style="text-align: left;">Priceton</td><td style="text-align: left;">4.9</td><td style="text-align: left;">Algorithm and Data Structure</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://www.coursera.org/learn/algorithms-part2" target="_blank" rel="noopener">Algorithm Part2</a></td><td style="text-align: left;">Priceton</td><td style="text-align: left;">4.9</td><td style="text-align: left;">Algorithm and Data Structure</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="https://www.coursera.org/learn/nand2tetris1" target="_blank" rel="noopener"><font color="red">Nand to Tetris Part I</font></a></td><td style="text-align: left;">Hebrew University of Jerusalem</td><td style="text-align: left;">5</td><td style="text-align: left;">System</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://www.coursera.org/learn/nand2tetris2" target="_blank" rel="noopener">Nand to Tetris Part II</a></td><td style="text-align: left;">Hebrew University of Jerusalem</td><td style="text-align: left;">5</td><td style="text-align: left;">System</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="https://www.coursera.org/specializations/algorithms" target="_blank" rel="noopener">Algorithms Specialization</a></td><td style="text-align: left;">Standford</td><td style="text-align: left;"></td><td style="text-align: left;">Algorithm and Data Structure</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://www.coursera.org/specializations/iot" target="_blank" rel="noopener"><font color="red">An Introduction to Programming the Internet of Things (IOT) Specialization</font></a></td><td style="text-align: left;">University of California, Irvine</td><td style="text-align: left;">4.6</td><td style="text-align: left;">Hardware</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="https://www.coursera.org/specializations/scala" target="_blank" rel="noopener">Functional Programming in Scala</a></td><td style="text-align: left;">École Polytechnique Fédérale de Lausanne</td><td style="text-align: left;">4.5</td><td style="text-align: left;">Programming Language</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://www.coursera.org/learn/analysis-of-algorithms/home/welcome" target="_blank" rel="noopener">Analysis of Algorithms</a></td><td style="text-align: left;">Priceton</td><td style="text-align: left;"></td><td style="text-align: left;">Algorithm and Data Structure</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="https://www.coursera.org/specializations/pcdp" target="_blank" rel="noopener">Parallel, Concurrent, and Distributed Programming in Java</a></td><td style="text-align: left;">Rice University</td><td style="text-align: left;">4.5</td><td style="text-align: left;">Programming Language</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://www.coursera.org/specializations/probabilistic-graphical-models" target="_blank" rel="noopener">Probabilistic Graphical Models Specialization</a></td><td style="text-align: left;">Standford</td><td style="text-align: left;">4.7</td><td style="text-align: left;">Graphical Model</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="https://www.coursera.org/learn/cryptocurrency/home/welcome" target="_blank" rel="noopener">Bitcoin and Cryptocurrency Technologies</a></td><td style="text-align: left;">Priceton</td><td style="text-align: left;"></td><td style="text-align: left;">Bitcoin</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://www.coursera.org/learn/cs-algorithms-theory-machines/home/welcome" target="_blank" rel="noopener">Computer Science: Algorithms, Theory, and Machines</a></td><td style="text-align: left;">Princeton University</td><td style="text-align: left;"></td><td style="text-align: left;">System</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="http://inst.eecs.berkeley.edu/~cs61a/fa18/" target="_blank" rel="noopener">CS 61A: Structure and Interpretation of Computer Programs</a></td><td style="text-align: left;">UCBerkeley</td><td style="text-align: left;"></td><td style="text-align: left;">System</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="http://web.stanford.edu/class/archive/cs/cs161/cs161.1194/schedule.html" target="_blank" rel="noopener"><font color="red">CS161: Algorithm</font></a></td><td style="text-align: left;">Standford</td><td style="text-align: left;"></td><td style="text-align: left;">Algorithm and Data Structure</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="http://web.stanford.edu/class/cs224n/" target="_blank" rel="noopener">CS224n: Natural Language Processing with Deep Learning</a></td><td style="text-align: left;">Stanford</td><td style="text-align: left;"></td><td style="text-align: left;">Natural Language Processing</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="http://web.stanford.edu/class/cs140e/" target="_blank" rel="noopener">Operating Systems Design and Implementation</a></td><td style="text-align: left;">Standford</td><td style="text-align: left;"></td><td style="text-align: left;">Operating Systems</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="https://pdos.csail.mit.edu/6.828/2017/schedule.html" target="_blank" rel="noopener">Operating System Engineering</a></td><td style="text-align: left;">MIT</td><td style="text-align: left;"></td><td style="text-align: left;">Operating Systems</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://learning-modules.mit.edu/class/index.html?uuid=/course/6/sp19/6.006#dashboard" target="_blank" rel="noopener">6.006 Introduction to Algorithms</a></td><td style="text-align: left;">MIT</td><td style="text-align: left;"></td><td style="text-align: left;">Algorithm and Data Structure</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr></tbody></table><h2 id="machine-learning">Machine Learning</h2><table style="width:100%;"><colgroup><col style="width: 16%"><col style="width: 16%"><col style="width: 16%"><col style="width: 16%"><col style="width: 16%"><col style="width: 16%"></colgroup><thead><tr class="header"><th style="text-align: left;">Course</th><th style="text-align: left;">Institute</th><th style="text-align: left;">Rating</th><th style="text-align: left;">Type</th><th style="text-align: left;">Status</th><th style="text-align: left;">Commnet</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><a href="https://www.coursera.org/specializations/machine-learning" target="_blank" rel="noopener">Machine Learning Foundations</a></td><td style="text-align: left;">University of Washington</td><td style="text-align: left;"></td><td style="text-align: left;">Machine Learning</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://www.coursera.org/specializations/aml" target="_blank" rel="noopener"><font color="red">Advanced Machine Learning Specialization</font></a></td><td style="text-align: left;">National Research University Higher School of Economics</td><td style="text-align: left;"></td><td style="text-align: left;">Deep Learning</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="https://www.coursera.org/specializations/advanced-machine-learning-tensorflow-gcp" target="_blank" rel="noopener">Advanced Machine Learning with TensorFlow on Google Cloud Platform Specialization</a></td><td style="text-align: left;">Google</td><td style="text-align: left;">4.6</td><td style="text-align: left;">Machine Learning</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://www.coursera.org/learn/machine-learning" target="_blank" rel="noopener">Machine Learning</a></td><td style="text-align: left;">Standford</td><td style="text-align: left;">4.9</td><td style="text-align: left;">Machine Learning</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="https://www.coursera.org/specializations/deep-learning" target="_blank" rel="noopener">Deep Learning</a></td><td style="text-align: left;">deeplearning.ai</td><td style="text-align: left;">4.9</td><td style="text-align: left;">Deep Learning</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://www.coursera.org/specializations/self-driving-cars" target="_blank" rel="noopener">Self-Driving Cars Specialization</a></td><td style="text-align: left;">University of Toronto</td><td style="text-align: left;">5</td><td style="text-align: left;">Self-Driving</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="https://www.coursera.org/learn/self-driving-cars-teach-out/home/welcome" target="_blank" rel="noopener">Self-Driving Cars Teach-Out</a></td><td style="text-align: left;">University of Michigan</td><td style="text-align: left;">4.9</td><td style="text-align: left;">Self-Driving</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://www.coursera.org/learn/ntumlone-mathematicalfoundations/home/welcome" target="_blank" rel="noopener"><font color="red">機器學習基石上</font></a></td><td style="text-align: left;">National Taiwan University</td><td style="text-align: left;">4.9</td><td style="text-align: left;">Machine Learning</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="https://www.coursera.org/learn/ntumlone-algorithmicfoundations" target="_blank" rel="noopener">機器學習基石下</a></td><td style="text-align: left;">National Taiwan University</td><td style="text-align: left;">4.9</td><td style="text-align: left;">Machine Learning</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://www.coursera.org/specializations/recommender-systems" target="_blank" rel="noopener">Recommender Systems Specialization</a></td><td style="text-align: left;">University of Minnesota</td><td style="text-align: left;"></td><td style="text-align: left;">Recommender Systems</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="http://web.stanford.edu/class/cs224n/" target="_blank" rel="noopener">CS224n: Natural Language Processing with Deep Learning</a></td><td style="text-align: left;">Stanford</td><td style="text-align: left;"></td><td style="text-align: left;">Natural Language Processing</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="http://cs231n.stanford.edu" target="_blank" rel="noopener">CS231n: Convolutional Neural Networks for Visual Recognition</a></td><td style="text-align: left;">Standford</td><td style="text-align: left;"></td><td style="text-align: left;">Computer Vision</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="http://deeplearning.cs.cmu.edu" target="_blank" rel="noopener">11-785 Introduction to Deep Learning</a></td><td style="text-align: left;">Standford</td><td style="text-align: left;"></td><td style="text-align: left;">Deep Learning</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr></tbody></table><h2 id="artificial-intelligence">Artificial Intelligence</h2><table><thead><tr class="header"><th style="text-align: left;">Course</th><th style="text-align: left;">Institute</th><th style="text-align: left;">Rating</th><th style="text-align: left;">Type</th><th style="text-align: left;">Status</th><th style="text-align: left;">Commnet</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><a href="https://courses.edx.org/courses/BerkeleyX/CS188.1x-4/1T2015/course/" target="_blank" rel="noopener">Artificial Intelligence</a></td><td style="text-align: left;">UCBerkeley</td><td style="text-align: left;"></td><td style="text-align: left;">Artificial Intelligence</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><a href="https://www.coursera.org/specializations/data-mining" target="_blank" rel="noopener">Data Mining Specialization</a></td><td style="text-align: left;">UIUC</td><td style="text-align: left;"></td><td style="text-align: left;">Data Mining</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><a href="https://www.coursera.org/specializations/data-systems" target="_blank" rel="noopener"><font color="red">Data Systems Specialization</font></a></td><td style="text-align: left;">ASU</td><td style="text-align: left;">4.0</td><td style="text-align: left;">Database</td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Gossip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Courses </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>INFSCI 2160 DATA MINING(PART ONE)</title>
      <link href="/INFSCI-2160-DATA-MINING-PART-ONE/2019/02/18/"/>
      <url>/INFSCI-2160-DATA-MINING-PART-ONE/2019/02/18/</url>
      
        <content type="html"><![CDATA[<p><strong>Reference from some lecture slides of INFSCI 2160 DATA MINING lectured by Matt Berezo</strong></p><h2 id="introduction">Introduction</h2><ol type="1"><li><p>What is Artificial Intelligence? <img src="29AF0C1A006683910109C1BA949541C4.png" alt="Screen Shot 2019-02-18 at 13.13.28.png"> The goal of machine learning/AI/data mining is to develop an algorithm that performs well on new, <strong>unseen inputs</strong>. The ability to perform well on previously unobserved inputs is called <strong>generalization</strong></p></li><li>Data Mining process <img src="83DD4C0B5649752C8A1EAE6A78058344.png" alt="Screen Shot 2019-02-18 at 13.15.58.png"></li></ol><ul><li><strong>Business undertanding</strong> is important</li><li><strong>Data understranding</strong> is important</li></ul><h2 id="regression">Regression</h2><ul><li>Simple linear regression involves 2 variables:<ul><li>A predictor variable, x</li><li>A response variable, y</li></ul></li></ul><p><span class="math display">\[\hat{y_{i}} = \hat{\alpha} + \hat{\beta_{i}}X_{i}\]</span> - <span class="math inline">\(\hat{y_{i}}\)</span> = Estimated prediction of y - <span class="math inline">\(\hat{\alpha}\)</span> = Intercept - <span class="math inline">\(\hat{\beta_{i}}\)</span> = coefficient/parameter</p><p><strong>Goal</strong>: Obtain coefficient estimates that the linear model fits the available data well, and will also perform well (generalize) on unseen data</p><h3 id="the-least-square-approach">The least square approach</h3><p><span class="math display">\[\begin{align*}&amp; \hat{\beta_{1}} = \frac{\sum_{i=1}^{n}{(x_{i}-\bar{x})(y_{i}-\bar{y})}}{\sum_{i=1}^{n}{(x_{i} - \bar{x})^{2}}}\\&amp; \hat{\beta_{0}} = \bar{y} - \hat{\beta_{1}}\bar{x}\end{align*}\]</span></p><h3 id="coefficient-accuracy">Coefficient Accuracy</h3><p>We can compute the standard error of our coefficients</p><h4 id="what-is-se-standaed-error">what is SE (standaed error)?</h4><blockquote><p>If the purpose is <strong>Descriptive</strong>, use standard Deviation; if the purpose is <strong>Estimation</strong>, use standard Error.</p></blockquote><p>很容易混淆,我们拿到一个样本,对样本观察值离散程度的量化是<span class="math inline">\(SD:sd(x)\)</span>; 而我们可以从很多个样本中得到很多个均值，这些均值的离散度用SE来量化,也就是<span class="math inline">\(SE=sd(\bar{x})\)</span></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## generate 1000 sample with sample size 100</span></span><br><span class="line">a = sapply(rep(<span class="number">100</span>, <span class="number">1000</span>), rnorm)</span><br><span class="line">a.mean = colMeans(a)</span><br><span class="line"><span class="comment">## estimate SEM by simulation</span></span><br><span class="line">sd(a.mean)</span><br><span class="line"></span><br><span class="line"><span class="comment">## estimate SEM by sigma/sqrt(n), sigma = 1</span></span><br><span class="line"><span class="number">1</span>/sqrt(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## estimate SEM by sample 1</span></span><br><span class="line">sd(a[, <span class="number">1</span>])/sqrt(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><p><strong>We have established that the average of <span class="math inline">\(\hat{\mu}\)</span> over many data sets will be very close to <span class="math inline">\(\mu\)</span>, but that a single estimate <span class="math inline">\(\hat{\mu}\)</span> may be a substantial underestimate or overestimate of <span class="math inline">\(\mu\)</span>. How far off will that single estimate of <span class="math inline">\(\hat{\mu}\)</span> be?</strong></p><p><span class="math display">\[\begin{align*}&amp; SE(\hat{\beta_{0}})^{2} = \sigma^{2}\lbrack\frac{1}{n} + \frac{\bar{x}^{2}}{\sum_{i=1}^{n}{(x_{i} - \bar{x})^{2}}}\rbrack\\&amp; SE(\hat{\beta_{1}})^{2} = \frac{\sigma^{2}}{\sum_{i=1}^{n}{(x_{i} - \bar{x})^{2}}}\\\end{align*}\]</span></p><p>When we get the SE of parameters, we can calculate the 95% confidence interval</p><p><span class="math display">\[\hat{B_{i}} = +/- 2 * SE(\hat{B_{i}})\]</span></p><p>Standard errors can also be used to perform <strong>hypothesis tests</strong> on the coefficients. The most common hypothesis test involves testing the null hypothesis</p><ul><li><strong>Null hypothesis(H0)</strong>: there is <strong>no</strong> relationship between x and y</li><li><strong>Alternative hypothesis(Ha)</strong>: there is a relationship between x and y</li></ul><p>Mathematically, this corresponds to testing <span class="math display">\[\begin{align*}H_{0}: \beta_{1} = 0 \\H_{a}: \beta_{1} \ne 0 \\\end{align*}\]</span></p><p>To test the null hypothesis, we need to determine whether <span class="math inline">\(\hat{β_{1}}\)</span>, our estimate for <span class="math inline">\(\hat{β_{1}}\)</span> , is sufficiently far from zero that we can be confident that <span class="math inline">\(\hat{β_{1}}\)</span> is non-zero</p><p><span class="math display">\[t = \frac{\hat{β_{1}} - 0}{SE(\hat{\beta_{1}})}\]</span></p><h3 id="model-accuracy">Model Accuracy</h3><ul><li><p>RSS: Residual Sum of Squares <span class="math display">\[e_{1}^{2} + e_{2}^{2} + e_{3}^{2} + .....\]</span></p></li><li>RSE: Residual standard error <span class="math display">\[\sqrt\frac{RSS}{(N-2)}\]</span></li><li>R squared How much better does your model do than simply using the mean, in terms of SSE? <span class="math display">\[R^{2} = 1 - (\frac{\sum{(y_{i} - \hat{y}_{i})^{2}}}{\sum{(y_{i} - \overline{y}_{i})^{2}}})\]</span><ul><li>R-square takes form of a proportion and gives a value between 0 and 1 (1 = perfect model)</li></ul></li></ul><h3 id="multiple-linear-regression">Multiple Linear Regression</h3><ul><li>F-stat If the F-stat is larger than 1 and the p-value is &lt;= 0.05, we can determine that our predictors and model have a relationship with the response variable</li></ul><p><span class="math display">\[\frac{TSS - RSS}{p} / \frac{RSS}{n-p-1}\]</span> - Where p = our number of predictors - N = number of observations</p><figure><img src="9784E656D9E9D2613CF3D07CA064D3AA.jpg" alt="IMG_0310.jpg"><figcaption>IMG_0310.jpg</figcaption></figure><ul><li>R-squared <span class="math display">\[R^{2} = 1 - \frac{\sum{(y_{i} - \hat{y}_{i})^{2}} / (n-d-1)}{\sum{(y_{i} - \overline{y}_{i})^{2}}/(n-d)}\]</span></li></ul><h3 id="feature-selection">Feature Selection</h3><h4 id="stepwise-procedures">Stepwise Procedures</h4><ul><li>Backward Elimination This is the simplest of all variable selection procedures and can be easily implemented without special software. In situations where there is a complex hierarchy, backward elimination can be run manually while taking account of what variables are eligible for removal.<ol type="1"><li>Start with all the predictors in the model</li><li>Remove the predictor with highest p-value greater than <span class="math inline">\(\alpha\)</span></li><li>Refit the model and goto 2</li><li>Stop when all p-values are less than <span class="math inline">\(\alpha\)</span></li></ol></li><li>Forward Selection This just reverses the backward method.<ol type="1"><li>Start with no variables in the model.</li><li>For all predictors not in the model, check their p-value if they are added to the model. Choose the one with lowest p-value less than αcrit .</li><li>Continue until no new predictors can be added.</li></ol></li></ul><h4 id="ridge-regression-i.e.-l2-norm-regulizar">Ridge regression (i.e., L2 norm regulizar)</h4><p>Ridge looks to minimize: <span class="math display">\[RSS + \lambda\sum_{j=1}^{p}{\beta_{j}^{2}}\]</span></p><ul><li><span class="math inline">\(\lambda\)</span> is a tuning parameter</li></ul><h3 id="bias-vs.-variance-trade-off">Bias vs. Variance Trade-off</h3><p>Ideally, we want to derive a model that has low bias, low variance, and low MSE on test data <img src="CA80BF1FC8D3AA010CDDFE5A646489BF.png" alt="Screen Shot 2019-02-18 at 20.01.09.png"></p><h3 id="local-polynomial-regression">Local Polynomial Regression</h3><ul><li>The fitted value changes with x in a nonparametric manner</li><li>Define a weight function so that only values within a smoothing window [𝑥0 - h(𝑥0 ), 𝑥0 + h(𝑥0 )] will be considered in the estimate of <span class="math inline">\(\hat{y}\)</span></li></ul><h3 id="model-performance">Model Performance</h3><h3 id="cross-validation">Cross-validation</h3><p>The goal of cross-validation is to test the model’s ability to predict new data that was not used in estimating it, in order to flag problems like overfitting or selection bias[6] and to give an insight on how the model will generalize to an independent dataset (i.e., an unknown dataset, for instance from a real problem).</p><h4 id="advantages-of-loocv">Advantages of LOOCV</h4><p>Advantages of LOOCV: - Works well on small datasets - Meticulously tests the data</p><p>Disadvantages of LOOCV: - Computationally expensive on “big data” sets - Can result in high variability since model is only tested on one observation</p><h4 id="overfitting">Overfitting</h4><ul><li>Use cross-validation</li><li>Ensemble/combine models together</li><li>Use regularization techniques to penalize models that are too complex</li></ul><h3 id="non-parametric-methods">Non-parametric Methods</h3><p>Advantages of Non-parametric Methods: - Do not assume an explicit form of f(x), so the model is more "flexible"</p><p>Disadvantages of Non-Parametric Methods: - Often are more complex and thus more difficult to interpret</p><h4 id="k-nearest-neighbors">K Nearest-Neighbors</h4><ul><li>KNN is a <strong>non-parametric method</strong>, vs. linear and logistic regression which are parametric approaches since they assume a linear functional form for f(x) <img src="BFE33EA434D8355137098AEF9241AEEC.png" alt="Screen Shot 2019-02-18 at 22.26.44.png"></li></ul><h3 id="accuracy-and-error-rate">Accuracy and Error Rate</h3><p><img src="3FB3E0B341C2DD82395CB962430B6E34.png" alt="Screen Shot 2019-02-19 at 00.26.12.png"> <img src="youden.png" alt="youden.png"> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics</span><br><span class="line">y = np.array([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>])</span><br><span class="line">scores = np.array([<span class="number">0.1</span>, <span class="number">0.4</span>, <span class="number">0.35</span>, <span class="number">0.8</span>])</span><br><span class="line">fpr, tpr, thresholds = metrics.roc_curve(y, scores, pos_label=<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fpr</span><br><span class="line">array([<span class="number">0.</span> , <span class="number">0.</span> , <span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">1.</span> ])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tpr</span><br><span class="line">array([<span class="number">0.</span> , <span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">1.</span> , <span class="number">1.</span> ])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>thresholds</span><br><span class="line">array([<span class="number">1.8</span> , <span class="number">0.8</span> , <span class="number">0.4</span> , <span class="number">0.35</span>, <span class="number">0.1</span> ])</span><br></pre></td></tr></table></figure></p><h3 id="classification">Classification</h3><h4 id="naïve-bayes">Naïve Bayes</h4><ul><li>a Naïve Bayes classifier assumes independence between features</li><li>Naïve Bayes assumes that the continuous variables are normally distributed</li><li>For continuous random variables, probabilities are areas under the curve <img src="IMG_77C6064B4F18.png" alt="IMG_77C6064B4F18.png"></li></ul><h4 id="decision-trees">Decision Trees</h4><p>Constructing Decision Trees for Regression 1. First, we divide the predictor space into distinct and non-overlapping regions (𝑅1, 𝑅2,𝑅3 ... 𝑅𝑛) 2. To make a prediction, we typically use the mean of the training data in the region to which it belongs</p><p><strong>How do we construct R1 and R2?</strong> The goal is to find regions that minimize the residual sum of squares (RSS)</p><p>Decision trees can get too complex, memorize the training data, and overfit on test data - It is advised to first build a very large tree and then <strong>prune</strong> it back to obtain a subtree - Given a subtree, we can estimate the test error rate using cross-validation - <strong>Cost complexity pruning</strong> i.e., <strong>weakest link pruning</strong> gives us the most efficient way to choose our subset of trees</p><h4 id="decision-trees-advantages-and-disadvantages">Decision Trees Advantages and Disadvantages</h4><p>Advantages: - Trees are easy to explain and are intuitive - Trees can be displayed graphically and are easy to interpret - Trees can handle qualitative predictors without dummy variables</p><p>Disadvantages: - Trees to not usually have the same level of predictive accuracy as other regression and classification methods - Trees can be non-robust, i.e., a small change in the data can cause a large change in the tree</p><h4 id="bagging-and-random-forests">Bagging and Random Forests</h4><p><strong>Bootstrap aggregation</strong>, also known as <strong>bagging</strong>, is a procedure of reducing the variance of a statistical learning method - This is a good way to reduce variance→by taking many training sets from the population and build separate learning methods using each set - We can then calculate f1,f2,f3... and average them in order to obtain a low-variance statistical model - We can do this by bootstrapping, or taking repeated random samples from the training set</p><p><strong>Ensemble learning</strong> is a machine learning paradigm where multiple learners are trained to solve the same problem</p><p><strong>Random forests</strong> provide an improvement over bagged trees by decorrelating them - Like bagging, decision trees are made on bootstrapped training samples - Random forests are an <strong>ensemble</strong> method for decision trees - The difference is, each time a split in the tree is considered, a random sample of predictors is chosen as split candidates from the full set of predictors. So, at each split of the tree, the algorithm can’t even consider a majority of the predictors</p><h3 id="support-vector-machines">Support Vector Machines</h3><ul><li>SVM’s use a classifying tool called <strong>maximum margin classifier</strong></li><li>maximum margin classifiers can’t be applied to most datasets because they require the classes to be <strong>separated by a linear boundary</strong></li><li>Support vector classifiers are an extension of maximum margin classifiers that can be applied to a broader range of datasets</li></ul><h4 id="hyperplane">hyperplane</h4><p>A hyperplane is a flat subspace in p-dimensional space with p – 1 dimensions <img src="BEC28A552A36163DACC7817A18999E6B.png" alt="Screen Shot 2019-02-19 at 02.46.26.png"></p><h4 id="parameters">parameters</h4><ul><li>C = a nonnegative tuning parameter<ul><li>C can be thought of as a budget for the amount the margin can be violated by n observations. If C = 0, there is no budget for violations to the margin</li><li>large C, Overfitting</li><li>small C, underfitting</li></ul></li></ul><h4 id="what-if-the-decision-boundary-for-the-two-classes-is-not-linear">What if the decision boundary for the two classes is not linear?</h4><ul><li>enlarging the feature space with kernels</li><li>A kernel is a function that quantifies the similarity between two observations</li></ul><h3 id="multinomial-logistic-regression">Multinomial Logistic Regression</h3><ul><li>Similar to binary logistic regression, all probabilities in the output will sum to 1</li><li>This is just an extension of the same math from logistic regression</li></ul><h4 id="drawbacks">Drawbacks</h4><ul><li>Models involve many parameters, which makes their interpretation tedious</li><li>Maximum-likelihood estimation can encounter numerical problems if the data is separable and if the predicted probabilities are close to either 0 or 1</li></ul><h3 id="xgboost">XGBoost</h3><h4 id="overview">overview</h4><p>Advantages of XGBoost:</p><ul><li>Scalability: XGBoost system runs 10x faster than existing popular solutions on a single machine</li><li>XGBoost accepts null values: users don’t have to impute missing values, drop records, etc.</li><li>Less time spent on feature selection and more time spent on hyperparametric tuning</li></ul><p>Typically, one tree is not as strong as an ensemble/combination of other trees. XGBoost uses an ensemble method to gather information from other trees.</p><h4 id="objective-function-and-regularization">Objective Function and Regularization</h4><p>The additive function fixes what we have already learned, and adds one new tree at a time <img src="8227ABDFF7CF20D89F91BFAAE7C2C7F8.png" alt="Screen Shot 2019-02-19 at 04.46.06.png"></p><p>But how do we choose which tree we want at each step? &gt; We pick the one that optimizes our objective function! This is known as an <strong>additive function</strong></p><h4 id="objective-functions">Objective Functions</h4><ul><li>Linear: Continuous numeric prediction</li><li>Binary: logistic,binary classification</li><li>Multi:softmax: multiclassification</li></ul><h4 id="tree-boosting-parameters">Tree Boosting Parameters</h4><p><strong>Reference from <a href="https://www.cnblogs.com/sarahp/p/6900572.html" target="_blank" rel="noopener">https://www.cnblogs.com/sarahp/p/6900572.html</a></strong></p><ul><li><strong>Eta</strong> (i.e., learning rate): Step shrinkage use in update to prevent overfitting. After each boosting step, we can get the weights of new features. Eta shrinks the weights to make the boosting process more conservative</li><li>Gamma: Minimum loss reduction required to make a further partition on a leaf node of a tree. Larger gamma = more conservative model (这个指定了一个结点被分割时，所需要的最小损失函数减小的大小)</li><li>Max depth: Maximum depth of a tree. Increasing this value will make the model more complex (树的最大深度，值越大，树越复杂)</li><li>Minimum child weight: Minimum sum of instance weight needed in a child. If the tree partition step results in a leaf node with the sum of instance weight less than this set parameter, the building process will stop partitioning. Larger weight = more conservative model (定义了一个子集的所有观察值的最小权重和)</li><li>Subsample: A subsample ratio of the training instances. Setting to 0.5 would make XGBoost randomly sample half of the training data prior to growing trees and will help prevent overfitting (样本的采样率，如果设置成0.5，那么Xgboost会随机选择一般的样本作为训练集)</li><li>Column sample by tree: Subsample ratio of columns when constructing a tree</li><li>Column sample by level: Subsample ratio of columns for each level of the tree</li><li>Column sample by node: Subsample ratio of columns for each node (split)</li><li>Lambda: L2 regularization</li><li>Alpha: L1 regularization</li><li>Scale positive weight: Control the balance of positive and negative weights</li></ul><h3 id="review">REVIEW</h3><h4 id="what-is-the-difference-between-boost-ensemble-bootstrap-and-bagging">What is the difference between boost, ensemble, bootstrap and bagging?</h4><p><strong>Reference from <a href="https://www.quora.com/What-is-the-difference-between-boost-ensemble-bootstrap-and-bagging" target="_blank" rel="noopener">https://www.quora.com/What-is-the-difference-between-boost-ensemble-bootstrap-and-bagging</a></strong></p><ul><li>Boosting is the idea of training iteratively the same “weak” classifier, so that at each iteration, the i-th classifier is supposed to correct the mistakes made by the previous classifier (i-1). It is done by weighting more the misclassified observations.</li><li>The final classifier is calculated by a weighted mean of all the “weak” classifiers, the weights being close to the accuracies calculated for each classifier.</li><li>Ensembling is quite general and encompasses simple methods like Averaging, and more complicated ones like Boosting, Bagging, Stacking, etc.</li><li>Bootstrapping means taking a sample of a population by drawing with replacement. It is one of the main ideas behind Bagging (which stands for Bootstrap AGGregatING).</li><li>Bagging means training the same classifier on different subsets (that may be overlapping) of one dataset. You do so with bootstrap.</li></ul><h4 id="rf-vs-xgboost">RF vs XGBoost</h4><p><strong>Reference from <a href="https://www.cnblogs.com/sarahp/p/6900572.html" target="_blank" rel="noopener">https://www.cnblogs.com/sarahp/p/6900572.html</a></strong></p><ul><li>RF use bagging:<ul><li>种集成学习算法，基于bootstrap sampling 自助采样法，重复性有放回的随机采用部分样本进行训练最后再将结果 voting 或者 averaging</li><li>它是并行式算法，因为不同基学习器是独立</li><li>训练一个bagging集成学习器时间复杂度与基学习器同阶（n倍，n为基学习器个数）。</li><li>bagging可以用于二分类／多分类／回归</li><li>每个基学习器的未用作训练样本可用来做包外估计，评价泛化性能。</li><li>bagging主要关注降低<strong>方差</strong></li><li>两个步骤 1. 抽样训练（采样样本，采样特征） 2 融合</li></ul></li><li>XGBoost use boosting(Gradient Boosting Decision Tree):<ul><li>gbdt的基本原理是boost 里面的 boosting tree（提升树），并使用 gradient boost。</li><li>Gradient Boosting是一种Boosting的方法，其与传统的Boosting的区别是，每一次的计算是为了减少上一次的残差(residual)，而为了消除残差，可以在残差减少的梯度(Gradient)方向上建立一个新的模型。所以说，在Gradient Boosting中，每个新的模型的建立是为了使得之前模型的残差往梯度方向减少，与传统Boosting对正确、错误样本进行加权有着很大的区别。这个梯度代表上一轮学习器损失函数对预测值求导。</li><li>与Boosting Tree的区别：Boosting Tree的适合于损失函数为平方损失或者指数损失。而Gradient Boosting适合各类损失函数（损失函数为：平方损失则相当于Boosting Tree拟合残差、损失函数为：使用指数损失则可以近似于Adaboost，但树是回归树）</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Data Mining </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Machine Learning Assignment1(Upitt)</title>
      <link href="/Machine-Learning-Assignment1-upitt/2019/02/17/"/>
      <url>/Machine-Learning-Assignment1-upitt/2019/02/17/</url>
      
        <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Enter password to read." />    <label for="pass">Enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Homework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Homewrok of Upitt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Machine Learning (Andrew Ng)</title>
      <link href="/Machine-Learning-Andraw-Ng/2019/02/15/"/>
      <url>/Machine-Learning-Andraw-Ng/2019/02/15/</url>
      
        <content type="html"><![CDATA[<p><strong>Reference From Coursera Course <a href="https://www.coursera.org/learn/machine-learning" target="_blank" rel="noopener">Machine Learning</a>. I am also really sorry that I did not write down some sources when I cite from the web. I was too young and did not get any academic training when I wrote these notes.</strong></p><p><strong>Let me thank Ng first. This course Changed me. I still remember that after when I was just a sophomore. I discovered the Machine Learning course lectured by Andrew Ng on Coursera and was fascinated by the underlying algorithms. It was amazing to see that a simple yet elegant mathematical model could make predictions on new data after being trained with large amounts of training sets for analysis and fitting. I spent sever days on the assignments and developed a classifier to filter spam emails and an Optical Character Recognition program. Never expecting that I could program the machine to gain the cognitive ability, I was so thrilled and resolved to advance my knowledge in this area. About two year later, I take this course again and review some important concepts to prapare the interview. I wrote down notes and pay for the course this time</strong></p><p><font color="red">This is my course certificate. I really want all of guys who want to dive into the area of machine learning to take this course on coursera.</font></p><figure><img src="certificate.png" alt="certificate"><figcaption>certificate</figcaption></figure><h2 id="what-is-machine-learning">What is Machine Learning?</h2><p>Two definitions of Machine Learning are offered. + Arthur Samuel described it as: "<em>the field of study that gives computers the ability to learn without being explicitly programmed.</em>" This is an older, informal definition.</p><ul><li><p>Tom Mitchell provides a more modern definition: "A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P, if its performance at tasks in T, as measured by P, improves with experience E."</p><p>Example: playing checkers.</p><ul><li>E = the experience of playing many games of checkers</li><li>T = the task of playing checkers.</li><li>P = the probability that the program will win the next game.</li></ul></li></ul><p>In general, any machine learning problem can be assigned to one of two broad classifications:</p><blockquote><p><strong>Supervised learning</strong> and <strong>Unsupervised learning</strong>.</p></blockquote><h3 id="supervised-learning">Supervised Learning</h3><p>In supervised learning, we are given a data set and already know what our correct output should look like, having the idea that there is a relationship between the input and the output.</p><p>Supervised learning problems are categorized into "<strong>regression</strong>" and "<strong>classification</strong>" problems. In a regression problem, we are trying to predict results within a continuous output, meaning that we are trying to map input variables to some continuous function. In a classification problem, we are instead trying to predict results in a discrete output. In other words, we are trying to map input variables into discrete categories.</p><ul><li>Example 1:<ul><li><p>Given data about the size of houses on the real estate market, try to predict their price. Price as a function of size is a continuous output, so this is a regression problem.</p></li><li><figure><img src="063C817FFFB3B0B3B413A901EB57B1CD.png" alt="Screen Shot 2018-03-02 at 15.22.36.png"><figcaption>Screen Shot 2018-03-02 at 15.22.36.png</figcaption></figure></li><li><p>We could turn this example into a classification problem by instead making our output about whether the house "sells for more or less than the asking price." Here we are classifying the houses based on price into two discrete categories.</p></li></ul></li><li>Example 2:<ul><li><p>Regression - Given a picture of a person, we have to predict their age on the basis of the given picture</p></li><li><p>Classification - Given a patient with a tumor, we have to predict whether the tumor is malignant or benign.</p></li><li><figure><img src="E2B0C7D6576344A88AD23372DD308854.png" alt="Screen Shot 2018-03-02 at 15.22.51.png"><figcaption>Screen Shot 2018-03-02 at 15.22.51.png</figcaption></figure></li></ul></li></ul><h3 id="unsupervised-learning">Unsupervised Learning</h3><p>Unsupervised learning allows us to approach problems with little or no idea what our results should look like. We can derive structure from data where we don't necessarily know the effect of the variables.</p><p>We can derive this structure by clustering the data based on relationships among the variables in the data.</p><p>With unsupervised learning there is no feedback based on the prediction results.</p><figure><img src="3CAA5D79351470DE1A2A5F1D06FD6D6D.png" alt="Screen Shot 2018-03-02 at 15.26.13.png"><figcaption>Screen Shot 2018-03-02 at 15.26.13.png</figcaption></figure><p>Example:</p><p>Clustering: Take a collection of 1,000,000 different genes, and find a way to automatically group these genes into groups that are somehow similar or related by different variables, such as lifespan, location, roles, and so on.</p><h3 id="model-representation">Model Representation</h3><p>To establish notation for future use, we’ll use x(i) to denote the “input” variables (living area in this example), also called input features, and y(i) to denote the “output” or target variable that we are trying to predict (price). A pair (x<sup>(i)</sup>,y<sup>(i)</sup>) is called a training example, and the dataset that we’ll be using to learn—a list of m training examples (x<sup>(i)</sup>,y<sup>(i)</sup>);i=1,...,m—is called a training set. Note that the superscript “<sup>(i)</sup>” in the notation is simply an index into the training set, and has nothing to do with exponentiation. We will also use X to denote the space of input values, and Y to denote the space of output values. In this example, X = Y = ℝ.</p><p>To describe the supervised learning problem slightly more formally, our goal is, given a training set, to learn a function h : X → Y so that h(x) is a “good” predictor for the corresponding value of y. For historical reasons, this function h is called a hypothesis. Seen pictorially, the process is therefore like this:</p><figure><img src="9FCAA69BB208841EE1008EB337EFA43F.png" alt="Screen Shot 2018-03-02 at 16.13.42.png"><figcaption>Screen Shot 2018-03-02 at 16.13.42.png</figcaption></figure><p>When the target variable that we’re trying to predict is continuous, such as in our housing example, we call the learning problem a regression problem. When y can take on only a small number of discrete values (such as if, given the living area, we wanted to predict if a dwelling is a house or an apartment, say), we call it a classification problem.</p><h2 id="linear-regression-with-multiple-variables">Linear Regression with Multiple Variables</h2><h3 id="cost-function">Cost Function</h3><p>We can measure the accuracy of our hypothesis function by using a cost function. This takes an average difference (actually a fancier version of an average) of all the results of the hypothesis with inputs from x's and the actual output y's. <span class="math display">\[J(θ_0,θ_1)=\frac{1}{2m}\sum_{i=1}^m(\hat{y}_i−y_i)^2=\frac{1}{2m}\sum_{i=1}^m(h_θ(x_i)−y_i)^2\]</span></p><p>To break it apart, it is <span class="math inline">\(\frac{1}{2}\bar{x}\)</span> where <span class="math inline">\(\bar{x}\)</span> is the mean of the squares of <span class="math inline">\(h_θ(x_i)−y_i\)</span> , or the difference between the predicted value and the actual value.</p><p>This function is otherwise called the "Squared error function", or "Mean squared error". The mean is halved (<span class="math inline">\(\frac{1}{2}\)</span>) as a convenience for the computation of the gradient descent, as the derivative term of the square function will cancel out the <span class="math inline">\(\frac{1}{2}\)</span> term. The following image summarizes what the cost function does:</p><h4 id="cost-function---intuition-i">Cost Function - Intuition I</h4><p>If we try to think of it in visual terms, our training data set is scattered on the x-y plane. We are trying to make a straight line (defined by <span class="math inline">\(h_θ(x)\)</span>) which passes through these scattered data points.</p><p>Our objective is to get the best possible line. The best possible line will be such so that the average squared vertical distances of the scattered points from the line will be the least. Ideally, the line should pass through all the points of our training data set. In such a case, the value of <span class="math inline">\(J(θ_0,θ_1)\)</span> will be 0. The following example shows the ideal situation where we have a cost function of 0.</p><figure><img src="A19DDA728EC3F0FF86BAC1817BCF3D8E.png" alt="Screen Shot 2018-03-02 at 17.18.45.png"><figcaption>Screen Shot 2018-03-02 at 17.18.45.png</figcaption></figure><p>When <span class="math inline">\(θ_1=1\)</span>, we get a slope of 1 which goes through every single data point in our model. Conversely, when θ1=0.5, we see the vertical distance from our fit to the data points increase.</p><figure><img src="286352EB8728B8B444FF18AC497883FD.png" alt="Screen Shot 2018-03-02 at 17.19.16.png"><figcaption>Screen Shot 2018-03-02 at 17.19.16.png</figcaption></figure><p>This increases our cost function to 0.58. Plotting several other points yields to the following graph:</p><figure><img src="137435EB4C560E4149608420936EC396.png" alt="Screen Shot 2018-03-02 at 17.19.50.png"><figcaption>Screen Shot 2018-03-02 at 17.19.50.png</figcaption></figure><p>Thus as a goal, we should try to minimize the cost function. In this case, <span class="math inline">\(θ_1=1\)</span> is our global minimum.</p><h4 id="cost-function---intuition-ii">Cost Function - Intuition II</h4><p>A contour plot is a graph that contains many contour lines. A contour line of a two variable function has a constant value at all points of the same line. An example of such a graph is the one to the right below.<img src="FF1822723CAD042DA71898E4920AB5AB.png" alt="Screen Shot 2018-03-02 at 17.39.24.png"></p><p>Taking any color and going along the 'circle', one would expect to get the same value of the cost function. For example, the three green points found on the green line above have the same value for <span class="math inline">\(J(θ_0,θ_1)\)</span> and as a result, they are found along the same line. The circled x displays the value of the cost function for the graph on the left when <span class="math inline">\(θ_0 = 800\)</span> and <span class="math inline">\(θ_1= -0.15\)</span>. Taking another h(x) and plotting its contour plot, one gets the following graphs: <img src="76A0D0F9217AABFB6A7D3440262E2C54.png" alt="Screen Shot 2018-03-02 at 17.41.34.png"></p><p>When <span class="math inline">\(θ_0 = 360\)</span> and <span class="math inline">\(θ_1 = 0\)</span>, the value of <span class="math inline">\(J(θ_0,θ_1)\)</span> in the contour plot gets closer to the center thus reducing the cost function error. Now giving our hypothesis function a slightly positive slope results in a better fit of the data.</p><figure><img src="CBDB08F38835A0A76D7C137DAD1DFA64.png" alt="Screen Shot 2018-03-02 at 17.42.31.png"><figcaption>Screen Shot 2018-03-02 at 17.42.31.png</figcaption></figure><p>The graph above minimizes the cost function as much as possible and consequently, the result of <span class="math inline">\(θ_1\)</span> and <span class="math inline">\(θ_0\)</span> tend to be around 0.12 and 250 respectively. Plotting those values on our graph to the right seems to put our point in the center of the inner most 'circle'.</p><h3 id="gradient-descent">Gradient Descent</h3><p>So we have our hypothesis function and we have a way of measuring how well it fits into the data. Now we need to estimate the parameters in the hypothesis function. That's where gradient descent comes in.</p><p>Imagine that we graph our hypothesis function based on its fields <span class="math inline">\(θ_0\)</span> and <span class="math inline">\(θ_1\)</span> (actually we are graphing the cost function as a function of the parameter estimates). We are not graphing x and y itself, but the parameter range of our hypothesis function and the cost resulting from selecting a particular set of parameters.</p><p>We put <span class="math inline">\(θ_0\)</span> on the x axis and <span class="math inline">\(θ_1\)</span> on the y axis, with the cost function on the vertical z axis. The points on our graph will be the result of the cost function using our hypothesis with those specific theta parameters. The graph below depicts such a setup.</p><figure><img src="81462B5B2B256050E7993F7FFE4F8F51.png" alt="Screen Shot 2018-03-02 at 17.46.49.png"><figcaption>Screen Shot 2018-03-02 at 17.46.49.png</figcaption></figure><p>We will know that we have succeeded when our cost function is at the very bottom of the pits in our graph, i.e. when its value is the minimum. The red arrows show the minimum points in the graph.</p><p>The way we do this is by taking the derivative (the tangential line to a function) of our cost function. The slope of the tangent is the derivative at that point and it will give us a direction to move towards. We make steps down the cost function in the direction with the steepest descent. The size of each step is determined by the parameter α, which is called the learning rate.</p><p>For example, the distance between each 'star' in the graph above represents a step determined by our parameter α. A smaller α would result in a smaller step and a larger α results in a larger step. The direction in which the step is taken is determined by the partial derivative of <span class="math inline">\(J(θ_0,θ_1)\)</span>. Depending on where one starts on the graph, one could end up at different points. The image above shows us two different starting points that end up in two different places.</p><p>The gradient descent algorithm is:</p><p>repeat until convergence: <span class="math display">\[θ_j:=θ_j−α\frac{∂}{∂θj}J(θ_0,θ_1)\]</span></p><p>where j=0,1 represents the feature index number. At each iteration j, one should simultaneously update the parameters <span class="math inline">\(θ_1\)</span>,<span class="math inline">\(θ_2\)</span>,...,<span class="math inline">\(θ_n\)</span>. Updating a specific parameter prior to calculating another one on the <span class="math inline">\(j^{(th)}\)</span> iteration would yield to a wrong implementation.</p><figure><img src="AA97E2C240AD85D258CC2F21C4797C34.png" alt="Screen Shot 2018-03-03 at 00.47.36.png"><figcaption>Screen Shot 2018-03-03 at 00.47.36.png</figcaption></figure><h4 id="gradient-descent-intuition">Gradient Descent Intuition</h4><p>In this video we explored the scenario where we used one parameter <span class="math inline">\(θ_s1\)</span> and plotted its cost function to implement a gradient descent. Our sformula for a single parameter was:</p><p>Repeat until convergence: <span class="math display">\[θ_1 := θ_1 − α\frac{d}{dθ_1}J(θ_1)\]</span></p><p>Regardless of the slope's sign for J(θ_1), <span class="math inline">\(θ_1\)</span> eventually converges to its minimum value. The following graph shows that when the slope is negative, the value of <span class="math inline">\(θ_1\)</span> increases and when it is positive, the value of θ1 decreases.</p><figure><img src="7BC4362E24C17B9EBE3DE8CCACAEAF8D.png" alt="Screen Shot 2018-03-03 at 00.54.26.png"><figcaption>Screen Shot 2018-03-03 at 00.54.26.png</figcaption></figure><p>On a side note, we should adjust our parameter α to ensure that the gradient descent algorithm converges in a reasonable time. Failure to converge or too much time to obtain the minimum value imply that our step size is wrong.</p><figure><img src="A5C5678803CD4D84FE7090C7AFB7EECB.png" alt="Screen Shot 2018-03-03 at 00.55.16.png"><figcaption>Screen Shot 2018-03-03 at 00.55.16.png</figcaption></figure><p>How does gradient descent converge with a fixed step size α?</p><p>The intuition behind the convergence is that <span class="math inline">\(\frac{d}{dθ_1}J(θ_1)\)</span> approaches 0 as we approach the bottom of our convex function. At the minimum, the derivative will always be 0 and thus we get:</p><p><span class="math display">\[θ_1 := θ_1 − α∗0\]</span></p><figure><img src="58AEE7338D406DE791E8988219FDF2B1.png" alt="Screen Shot 2018-03-03 at 01.01.10.png"><figcaption>Screen Shot 2018-03-03 at 01.01.10.png</figcaption></figure><h4 id="gradient-descent-for-linear-regression">Gradient Descent For Linear Regression</h4><p>When specifically applied to the case of linear regression, a new form of the gradient descent equation can be derived. We can substitute our actual cost function and our actual hypothesis function and modify the equation to :</p><figure><img src="CE6A744E834E867DE89D0EA6548C3E66.jpg" alt="IMG_0190.jpg"><figcaption>IMG_0190.jpg</figcaption></figure><p>repeat until convergence:{ <span class="math display">\[\begin{align*}&amp; θ_0:=θ_0−α\frac{1}{m}\sum_{i=1}^m(h_θ(x_i)−y_i) \\&amp; θ_1:=θ_1−α\frac{1}{m}\sum_{i=1}^m((h_θ(x_i)−y_i)x_i)\end{align*} \]</span> }</p><p>where m is the size of the training set, <span class="math inline">\(θ_0\)</span> a constant that will be changing simultaneously with θ1 and xi,yiare values of the given training set (data).</p><p>Note that we have separated out the two cases for <span class="math inline">\(θ_j\)</span> into separate equations for <span class="math inline">\(θ_0\)</span> and <span class="math inline">\(θ_1\)</span>; and that for <span class="math inline">\(θ_1\)</span> we are multiplying <span class="math inline">\(x_i\)</span> at the end due to the derivative. The following is a derivation of <span class="math inline">\(\frac{∂}{∂θ_j}J(θ)\)</span> for a single example :</p><figure><img src="0AED35D9138656BDC56EE48C6C54D3EB.png" alt="Screen Shot 2018-03-03 at 09.20.14.png"><figcaption>Screen Shot 2018-03-03 at 09.20.14.png</figcaption></figure><p>The point of all this is that if we start with a guess for our hypothesis and then repeatedly apply these gradient descent equations, our hypothesis will become more and more accurate.</p><p>So, this is simply gradient descent on the original cost function J. This method looks at every example in the entire training set on every step, and is called batch gradient descent. <strong>Note that, while gradient descent can be susceptible to local minima in general, the optimization problem we have posed here for linear regression has only one global, and no other local, optima</strong>; thus gradient descent always converges (assuming the learning rate α is not too large) to the global minimum. Indeed, J is a convex quadratic function. Here is an example of gradient descent as it is run to minimize a quadratic function.</p><figure><img src="2F314BD45E00D357E83159E93263B7A7.png" alt="Screen Shot 2018-03-03 at 09.35.27.png"><figcaption>Screen Shot 2018-03-03 at 09.35.27.png</figcaption></figure><p>The ellipses shown above are the contours of a quadratic function. Also shown is the trajectory taken by gradient descent, which was initialized at (48,30). The x’s in the figure (joined by straight lines) mark the successive values of θ that gradient descent went through as it converged to its minimum.</p><h3 id="matrices-and-vectors">Matrices and Vectors</h3><p>Matrices are 2-dimensional arrays: <span class="math display">\[\begin{pmatrix}a &amp; b &amp; c \\d &amp; e &amp; f \\g &amp; h &amp; i \\j &amp; k &amp; l \\\end{pmatrix}\]</span></p><p>The above matrix has four rows and three columns, so it is a 4 x 3 matrix.</p><p>A vector is a matrix with one column and many rows: <span class="math display">\[\begin{bmatrix}a \\b \\c \\d \\e \\\end{bmatrix}\]</span></p><p>So vectors are a subset of matrices. The above vector is a 4 x 1 matrix.</p><p>Notation and terms:</p><ul><li><span class="math inline">\(A_{ij}\)</span> refers to the element in the ith row and jth column of matrix A.</li><li>A vector with 'n' rows is referred to as an 'n'-dimensional vector.</li><li><span class="math inline">\(v_i\)</span> refers to the element in the ith row of the vector. In general, all our vectors and matrices will be 1-indexed. Note that for some programming languages, the arrays are 0-indexed.</li><li>Matrices are usually denoted by uppercase names while vectors are lowercase.</li><li>"Scalar" means that an object is a single value, not a vector or matrix.</li><li>ℝ refers to the set of scalar real numbers.</li><li>ℝ𝕟 refers to the set of n-dimensional vectors of real numbers.</li></ul><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% The ; denotes we are going back to a new row.</span></span><br><span class="line">A = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>; <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>; <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>; <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">% Initialize a vector </span></span><br><span class="line">v = [<span class="number">1</span>;<span class="number">2</span>;<span class="number">3</span>] </span><br><span class="line"></span><br><span class="line"><span class="comment">% Get the dimension of the matrix A where m = rows and n = columns</span></span><br><span class="line">[m,n] = <span class="built_in">size</span>(A)</span><br><span class="line"></span><br><span class="line"><span class="comment">% You could also store it this way</span></span><br><span class="line">dim_A = <span class="built_in">size</span>(A)</span><br><span class="line"></span><br><span class="line"><span class="comment">% Get the dimension of the vector v </span></span><br><span class="line">dim_v = <span class="built_in">size</span>(v)</span><br><span class="line"></span><br><span class="line"><span class="comment">% Now let's index into the 2nd row 3rd column of matrix A</span></span><br><span class="line">A_23 = A(<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h4 id="addition-and-scalar-multiplication">Addition and Scalar Multiplication</h4><p>Addition and subtraction are element-wise, so you simply add or subtract each corresponding element: <span class="math display">\[\begin{equation}\begin{bmatrix}a &amp; b  \\c &amp; d  \\\end{bmatrix} + \begin{bmatrix}w &amp; x  \\y &amp; z  \\\end{bmatrix} = \begin{bmatrix}a+w &amp; b+x  \\c+y &amp; d+z  \\\end{bmatrix} \end{equation}\]</span></p><p>Subtracting Matrices:</p><p><span class="math display">\[\begin{equation}\begin{bmatrix}a &amp; b  \\c &amp; d  \\\end{bmatrix} - \begin{bmatrix}w &amp; x  \\y &amp; z  \\\end{bmatrix} = \begin{bmatrix}a-w &amp; b-x  \\c-y &amp; d-z  \\\end{bmatrix} \end{equation}\]</span></p><p>To add or subtract two matrices, their dimensions must be the same.</p><p>In scalar multiplication, we simply multiply every element by the scalar value: <span class="math display">\[\begin{equation}\begin{bmatrix}a &amp; b  \\c &amp; d  \\\end{bmatrix} * x = \begin{bmatrix}a*x &amp; b*x  \\c*x &amp; d*x  \\\end{bmatrix} \end{equation}\]</span></p><p>In scalar division, we simply divide every element by the scalar value: <span class="math display">\[\begin{equation}\begin{bmatrix}a &amp; b  \\c &amp; d  \\\end{bmatrix} / x = \begin{bmatrix}a/x &amp; b/x  \\c/x &amp; d/x  \\\end{bmatrix} \end{equation}\]</span></p><p>Experiment below with the Octave/Matlab commands for matrix addition and scalar multiplication. Feel free to try out different commands. Try to write out your answers for each command before running the cell below.</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% Initialize matrix A and B </span></span><br><span class="line">A = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>; <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line">B = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">% Initialize constant s </span></span><br><span class="line">s = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% See how element-wise addition works</span></span><br><span class="line">add_AB = A + B </span><br><span class="line"></span><br><span class="line"><span class="comment">% See how element-wise subtraction works</span></span><br><span class="line">sub_AB = A - B</span><br><span class="line"></span><br><span class="line"><span class="comment">% See how scalar multiplication works</span></span><br><span class="line">mult_As = A * s</span><br><span class="line"></span><br><span class="line"><span class="comment">% Divide A by s</span></span><br><span class="line">div_As = A / s</span><br><span class="line"></span><br><span class="line"><span class="comment">% What happens if we have a Matrix + scalar?</span></span><br><span class="line">add_As = A + s</span><br></pre></td></tr></table></figure><h4 id="matrix-vector-multiplication">Matrix-Vector Multiplication</h4><p><span class="math display">\[\begin{equation}\begin{bmatrix}a &amp; b\\c &amp; d\\e &amp; f\\\end{bmatrix} *\begin{bmatrix}x \\y \\\end{bmatrix} = \begin{bmatrix}a*x &amp; b*y\\c*x &amp; d*y\\e*x &amp; f*y\\\end{bmatrix}\end{equation}\]</span></p><p>Below is an example of a matrix-vector multiplication. Make sure you understand how the multiplication works. Feel free to try different matrix-vector multiplications.</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% Initialize matrix A </span></span><br><span class="line">A = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>; <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>] </span><br><span class="line"></span><br><span class="line"><span class="comment">% Initialize vector v </span></span><br><span class="line">v = [<span class="number">1</span>; <span class="number">1</span>; <span class="number">1</span>] </span><br><span class="line"></span><br><span class="line"><span class="comment">% Multiply A * v</span></span><br><span class="line">Av = A * v</span><br></pre></td></tr></table></figure><h4 id="matrix-matrix-multiplication">Matrix-Matrix Multiplication</h4><p>We multiply two matrices by breaking it into several vector multiplications and concatenating the result. <span class="math display">\[\begin{equation}\begin{bmatrix}a &amp; b\\c &amp; d\\e &amp; f\\\end{bmatrix} *\begin{bmatrix}w &amp; x \\y &amp; z \\\end{bmatrix} = \begin{bmatrix}a∗w+b∗y &amp; a∗x+b∗z \\c∗w+d∗y &amp; c∗x+d∗z \\e∗w+f∗y &amp; e∗x+f∗z \\\end{bmatrix}\end{equation}\]</span></p><p>An m x n matrix multiplied by an n x o matrix results in an m x o matrix. In the above example, a 3 x 2 matrix times a 2 x 2 matrix resulted in a 3 x 2 matrix.</p><p>To multiply two matrices, the number of columns of the first matrix must equal the number of rows of the second matrix.</p><p>For example: <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% Initialize a 3 by 2 matrix </span></span><br><span class="line">A = [<span class="number">1</span>, <span class="number">2</span>; <span class="number">3</span>, <span class="number">4</span>;<span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">% Initialize a 2 by 1 matrix </span></span><br><span class="line">B = [<span class="number">1</span>; <span class="number">2</span>] </span><br><span class="line"></span><br><span class="line"><span class="comment">% We expect a resulting matrix of (3 by 2)*(2 by 1) = (3 by 1) </span></span><br><span class="line">mult_AB = A*B</span><br><span class="line"></span><br><span class="line"><span class="comment">% Make sure you understand why we got that result</span></span><br></pre></td></tr></table></figure></p><h4 id="matrix-multiplication-properties">Matrix Multiplication Properties</h4><ul><li>Matrices are not commutative: A∗B≠B∗A</li><li>Matrices are associative: (A∗B)∗C=A∗(B∗C)</li></ul><p>The identity matrix, when multiplied by any matrix of the same dimensions, results in the original matrix. It's just like multiplying numbers by 1. The identity matrix simply has 1's on the diagonal (upper left to lower right diagonal) and 0's elsewhere. <span class="math display">\[\begin{bmatrix}1 &amp; 0 &amp; 0 \\0 &amp; 1 &amp; 0 \\0 &amp; 0 &amp; 1 \\\end{bmatrix}\]</span></p><p>When multiplying the identity matrix after some matrix (A∗I), the square identity matrix's dimension should match the other matrix's columns. When multiplying the identity matrix before some other matrix (I∗A), the square identity matrix's dimension should match the other matrix's rows.</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% Initialize random matrices A and B </span></span><br><span class="line">A = [<span class="number">1</span>,<span class="number">2</span>;<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">B = [<span class="number">1</span>,<span class="number">1</span>;<span class="number">0</span>,<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">% Initialize a 2 by 2 identity matrix</span></span><br><span class="line">I = <span class="built_in">eye</span>(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">% The above notation is the same as I = [1,0;0,1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% What happens when we multiply I*A ? </span></span><br><span class="line">IA = I*A </span><br><span class="line"></span><br><span class="line"><span class="comment">% How about A*I ? </span></span><br><span class="line">AI = A*I </span><br><span class="line"></span><br><span class="line"><span class="comment">% Compute A*B </span></span><br><span class="line">AB = A*B </span><br><span class="line"></span><br><span class="line"><span class="comment">% Is it equal to B*A? </span></span><br><span class="line">BA = B*A </span><br><span class="line"></span><br><span class="line"><span class="comment">% Note that IA = AI but AB != BA</span></span><br></pre></td></tr></table></figure><h4 id="inverse-and-transpose">Inverse and Transpose</h4><p><span class="math display">\[\begin{equation}A = \begin{bmatrix}a &amp; b\\c &amp; d\\e &amp; f\\\end{bmatrix}\end{equation}\]</span></p><p>In other words:</p><p><span class="math display">\[A_{ij}=A^T_{ji}\]</span></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% Initialize matrix A </span></span><br><span class="line">A = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>;<span class="number">0</span>,<span class="number">5</span>,<span class="number">6</span>;<span class="number">7</span>,<span class="number">0</span>,<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">% Transpose A </span></span><br><span class="line">A_trans = A' </span><br><span class="line"></span><br><span class="line"><span class="comment">% Take the inverse of A </span></span><br><span class="line">A_inv = inv(A)</span><br><span class="line"></span><br><span class="line"><span class="comment">% What is A^(-1)*A? </span></span><br><span class="line">A_invA = inv(A)*A</span><br></pre></td></tr></table></figure><h3 id="multivariate-linear-analytically">multivariate Linear Analytically</h3><h4 id="multiple-features">Multiple Features</h4><p>Linear regression with multiple variables is also known as "multivariate linear regression".</p><p>We now introduce notation for equations where we can have any number of input variables.</p><ul><li><span class="math inline">\(x^{(i)}_j\)</span> = value of feature j in the <span class="math inline">\(i^{th}\)</span> training example</li><li><span class="math inline">\(x^{(i)}\)</span> =the input (features) of the <span class="math inline">\(i^{th}\)</span> training example</li><li>m = the number of training examples</li><li>n = the number of features</li></ul><p>The multivariable form of the hypothesis function accommodating these multiple features is as follows: <span class="math display">\[h_θ(x)=θ_0+θ_1x1+θ_2x_2+θ_3x_3+\cdots+θ_nx_n\]</span></p><p>In order to develop intuition about this function, we can think about θ0 as the basic price of a house, θ1 as the price per square meter, θ2 as the price per floor, etc. x1 will be the number of square meters in the house, x2 the number of floors, etc.</p><p>Using the definition of matrix multiplication, our multivariable hypothesis function can be concisely represented as: <span class="math display">\[\begin{equation}h_θ(x) = \left[ \begin{array}{ccc} θ_0 &amp; θ_1 &amp; \cdots &amp; θ_n\end{array} \right] \left[ \begin{array}{ccc} θ_0 \\ θ_1 \\ \vdots \\ θ_n\end{array} \right] = θ^Tx\end{equation} \]</span> This is a vectorization of our hypothesis function for one training example; see the lessons on vectorization to learn more.</p><p>Remark: Note that for convenience reasons in this course we assume <span class="math inline">\(x^{(i)}_0=1\)</span> for (i∈1,…,m). This allows us to do matrix operations with theta and x. Hence making the two vectors 'θ' and <span class="math inline">\(x^{(i)}\)</span> match each other element-wise (that is, have the same number of elements: n+1).]</p><h3 id="gradient-descent-for-multiple-variables">Gradient Descent For Multiple Variables</h3><p>The gradient descent equation itself is generally the same form; we just have to repeat it for our 'n' features:</p><p>repeat until convergence:{ <span class="math display">\[\begin{align*}&amp; θ_0:=θ_0−α\frac{1}{m}\sum_{i=1}^m(h_θ(x^{(i)})−y^{(i)})\cdot{x^{(i)}_0}\\&amp; θ_1:=θ_1−α\frac{1}{m}\sum_{i=1}^m(h_θ(x^{(i)})−y^{(i)})\cdot{x^{(i)}_1}\\&amp; θ_2:=θ_2−α\frac{1}{m}\sum_{i=1}^m(h_θ(x^{(i)})−y^{(i)})\cdot{x^{(i)}_2}\\&amp; \cdots\end{align*}\]</span> }</p><p>In other words:</p><p>repeat until convergence: {</p><p>$$ θ_j:=θ_0−α_{i=1}<sup>m(h_θ(x</sup>{(i)})−y^{(i)})  for j := 0n</p><p>$$ }</p><p>The following image compares gradient descent with one variable to gradient descent with multiple variables:</p><figure><img src="967C382ACA6C581216B78D3670F812B6.png" alt="Screen Shot 2018-03-04 at 18.10.50.png"><figcaption>Screen Shot 2018-03-04 at 18.10.50.png</figcaption></figure><h4 id="gradient-descent-in-practice-i---feature-scaling">Gradient Descent in Practice I - Feature Scaling</h4><p>We can <strong>speed up</strong> gradient descent by having each of our input values in roughly the same range. This is because θ will descend quickly on small ranges and slowly on large ranges, and so will oscillate inefficiently down to the optimum when the variables are very uneven.</p><p>The way to prevent this is to modify the ranges of our input variables so that they are all roughly the same. Ideally:</p><p><span class="math display">\[−1 ≤ x_{(i)} ≤ 1\]</span></p><p>or</p><p><span class="math display">\[−0.5 ≤ x_{(i)} ≤ 0.5\]</span></p><p>These aren't exact requirements; we are only trying to speed things up. The goal is to get all input variables into roughly one of these ranges, give or take a few.</p><p>Two techniques to help with this are feature scaling and mean normalization. Feature scaling involves dividing the input values by the range (i.e. the maximum value minus the minimum value) of the input variable, resulting in a new range of just 1. Mean normalization involves subtracting the average value for an input variable from the values for that input variable resulting in a new average value for the input variable of just zero. To implement both of these techniques, adjust your input values as shown in this formula:</p><p><span class="math display">\[x_i:=\frac{x_i−μ_i}{si}\]</span> Where μi is the average of all the values for feature (i) and si is the range of values (max - min), or si is the standard deviation.</p><p>For example, if xi represents housing prices with a range of 100 to 2000 and a mean value of 1000, then, <span class="math inline">\(x_i:=\frac{price−1000}{1900}\)</span>.</p><h4 id="gradient-descent-in-practice-ii---learning-rate">Gradient Descent in Practice II - Learning Rate</h4><p><strong>Debugging gradient descent.</strong> Make a plot with number of iterations on the x-axis. Now plot the cost function, <span class="math inline">\(J_{(θ)}\)</span> over the number of iterations of gradient descent. If <span class="math inline">\(J_{(θ)}\)</span> ever increases, then you probably need to decrease α.</p><p><strong>Automatic convergence test.</strong> Declare convergence if <span class="math inline">\(J_{(θ)}\)</span> decreases by less than E in one iteration, where E is some small value such as 10−3. However in practice it's difficult to choose this threshold value.</p><figure><img src="4EE8460134CEE8A6DB707B15130E319D.png" alt="Screen Shot 2018-03-04 at 18.28.02.png"><figcaption>Screen Shot 2018-03-04 at 18.28.02.png</figcaption></figure><p>It has been proven that if learning rate α is sufficiently small, then <span class="math inline">\(J_{(θ)}\)</span> will decrease on every iteration.</p><figure><img src="5535482800A11123D2C86C38B1B51A95.png" alt="Screen Shot 2018-03-04 at 18.28.12.png"><figcaption>Screen Shot 2018-03-04 at 18.28.12.png</figcaption></figure><p>To summarize:</p><ul><li>If α is too small: slow convergence.</li><li>If α is too large: may not decrease on every iteration and thus may not converge.</li></ul><h3 id="features-and-polynomial-regression">Features and Polynomial Regression</h3><p>We can improve our features and the form of our hypothesis function in a couple different ways.</p><p>We can combine multiple features into one. For example, we can combine <span class="math inline">\(x_1\)</span> and <span class="math inline">\(x_2\)</span> into a new feature x3 by taking <span class="math inline">\(x_1⋅x_2\)</span>.</p><p>Polynomial Regression</p><p>Our hypothesis function need not be linear (a straight line) if that does not fit the data well.</p><p>We can change the behavior or curve of our hypothesis function by making it a quadratic, cubic or square root function (or any other form).</p><p>For example, if our hypothesis function is <span class="math inline">\(h_θ(x)=θ_0+θ_1x_1\)</span> then we can create additional features based on x1, to get the quadratic function <span class="math inline">\(h_θ(x)=θ_0+θ_1x_1+θ_2x^2_1\)</span> or the cubic function <span class="math inline">\(hθ(x)=θ_0+θ_1x_1+θ_2x^2_1+θ_3x^3_1\)</span> In the cubic version, we have created new features <span class="math inline">\(x_2\)</span> and <span class="math inline">\(x_3\)</span> where <span class="math inline">\(x_2=x^2_1\)</span> and <span class="math inline">\(x_3=x^3_1\)</span>.</p><p>To make it a square root function, we could do: <span class="math inline">\(h_θ(x)=θ_0+θ_1x_1+θ_2\sqrt{x_1}\)</span> One important thing to keep in mind is, if you choose your features this way then feature scaling becomes very important.</p><p>eg. if <span class="math inline">\(x_1\)</span> has range 1 - 1000 then range of <span class="math inline">\(x^2_1\)</span> becomes 1 - 1000000 and that of <span class="math inline">\(x^3_1\)</span> becomes 1 - 1000000000</p><h3 id="normal-equation">Normal Equation</h3><p>Gradient descent gives one way of minimizing J. Let’s discuss a second way of doing so, this time performing the minimization explicitly and without resorting to an iterative algorithm. In the "Normal Equation" method, we will minimize J by explicitly taking its derivatives with respect to the θj ’s, and setting them to zero. This allows us to find the optimum theta without iteration. The normal equation formula is given below:</p><p><span class="math display">\[θ=(X^TX)^{−1}X^Ty\]</span></p><figure><img src="F151CAAF5D1B34778F47215044582101.png" alt="Screen Shot 2018-03-04 at 18.43.29.png"><figcaption>Screen Shot 2018-03-04 at 18.43.29.png</figcaption></figure><p>There is <strong>no need</strong> to do feature scaling with the normal equation.</p><p>The following is a comparison of gradient descent and the normal equation: |Gradient Descent|Normal Equation| |:---|:---| |Need to choose alpha| No need to choose alpha| |Needs many iterations| No need to iterate| |<span class="math inline">\(O(kn^2)\)</span>|<span class="math inline">\(O(n^3)\)</span> | need to calculate inverse of <span class="math inline">\(X^TX\)</span>| |Works well when n is large|Slow if n is very large|</p><p>With the normal equation, computing the inversion has complexity <span class="math inline">\(O(n^3)\)</span>. So if we have a very large number of features, the normal equation will be slow. In practice, when n exceeds 10,000 it might be a good time to go from a normal solution to an iterative process.</p><h4 id="normal-equation-noninvertibility">Normal Equation Noninvertibility</h4><p>When implementing the normal equation in octave we want to use the 'pinv' function rather than 'inv.' The 'pinv' function will give you a value of θ even if <span class="math inline">\(X^TX\)</span> is not invertible.</p><p>If <span class="math inline">\(X^TX\)</span> is noninvertible, the common causes might be having : - Redundant features, where two features are very closely related (i.e. they are linearly dependent) - Too many features (e.g. m ≤ n). In this case, delete some features or use "regularization" (to be explained in a later lesson).</p><p>Solutions to the above problems include deleting a feature that is linearly dependent with another or deleting one or more features when there are too many features.</p><h2 id="logistic-regression">Logistic Regression</h2><h3 id="classification">Classification</h3><p>To attempt classification, one method is to use linear regression and map all predictions greater than 0.5 as a 1 and all less than 0.5 as a 0. However, this method doesn't work well because classification is not actually a linear function.</p><p>The classification problem is just like the regression problem, except that the values we now want to predict take on only a small number of discrete values. For now, we will focus on the binary classification problem in which y can take on only two values, 0 and 1. (Most of what we say here will also generalize to the multiple-class case.) For instance, if we are trying to build a spam classifier for email, then <span class="math inline">\(x^{(i)}\)</span> may be some features of a piece of email, and y may be 1 if it is a piece of spam mail, and 0 otherwise. Hence, y∈{0,1}. 0 is also called the negative class, and 1 the positive class, and they are sometimes also denoted by the symbols “-” and “+.” Given <span class="math inline">\(x^{(i)}\)</span>, the corresponding <span class="math inline">\(y^{(i)}\)</span> is also called the label for the training example.</p><h3 id="hypothesis-representation">Hypothesis Representation</h3><p>We could approach the classification problem ignoring the fact that y is discrete-valued, and use our old linear regression algorithm to try to predict y given x. However, it is easy to construct examples where this method performs very poorly. Intuitively, it also doesn’t make sense for hθ(x) to take values larger than 1 or smaller than 0 when we know that y ∈ {0, 1}. To fix this, let’s change the form for our hypotheses <span class="math inline">\(h_θ(x)\)</span> to satisfy <span class="math inline">\(0≤h_θ(x)≤1\)</span>. This is accomplished by plugging <span class="math inline">\(θ^Tx\)</span> into the Logistic Function.</p><p>Our new form uses the "Sigmoid Function," also called the "Logistic Function": <span class="math display">\[\begin{align*}&amp; h_θ(x)=g(θ^Tx) \\&amp; z=θ^Tx \\&amp; g(z)=\frac{1}{1+e^{−z}} \\\end{align*}\]</span></p><p>The following image shows us what the sigmoid function looks like:</p><figure><img src="2FDA75AB6E8B1CBDC483FA3E6EF1A733.png" alt="Screen Shot 2018-03-04 at 21.58.35.png"><figcaption>Screen Shot 2018-03-04 at 21.58.35.png</figcaption></figure><p>The function g(z), shown here, maps any real number to the (0, 1) interval, making it useful for transforming an arbitrary-valued function into a function better suited for classification.</p><p>hθ(x) will give us the probability that our output is 1. For example, <span class="math inline">\(h_θ(x)=0.7\)</span> gives us a probability of 70% that our output is 1. Our probability that our prediction is 0 is just the complement of our probability that it is 1 (e.g. if probability that it is 1 is 70%, then the probability that it is 0 is 30%). <span class="math display">\[\begin{align*}&amp; h_θ(x)=P(y=1|x;θ)=1−P(y=0|x;θ)\\&amp; P(y=0|x;θ)+P(y=1|x;θ)=1\end{align*}\]</span></p><h3 id="decision-boundary">Decision Boundary</h3><p>In order to get our discrete 0 or 1 classification, we can translate the output of the hypothesis function as follows: <span class="math display">\[\begin{align*}&amp; hθ(x)≥0.5 \rightarrow y=1 \\&amp; hθ(x)&lt;0.5 \rightarrow y=0\end{align*}\]</span></p><p>The way our logistic function g behaves is that when its input is greater than or equal to zero, its output is greater than or equal to 0.5:</p><p><span class="math display">\[\begin{align*}&amp; g(z) \ge 0.5 \\&amp; when \ z \ge 0 \\\end{align*}\]</span> Remember. <span class="math display">\[\begin{align*}&amp; z=0,e^0=1 \Rightarrow g(z) = \frac{1}{2} \\&amp; z \rightarrow \infty,e^{−\infty}→0 \Rightarrow g(z)=1 \\&amp; z \rightarrow −\infty,e^{\infty} \rightarrow \infty \Rightarrow g(z)=0 \\\end{align*}\]</span></p><p>Again, the input to the sigmoid function g(z) (e.g. θTX) <strong>doesn't need to be linear</strong>, and could be a function that describes a circle (e.g. <span class="math inline">\(z=θ_0+θ_1x_2^1+θ_2x_2^2\)</span>) or any shape to fit our data.</p><h3 id="cost-function-1">Cost Function</h3><p>We cannot use the same cost function that we use for linear regression because the Logistic Function will cause the output to be wavy, causing many local optima. In other words, it will not be a convex function.</p><p>Instead, our cost function for logistic regression looks like: <span class="math display">\[\begin{align*}&amp; J(\theta) = \frac{1}{m}\sum_{i=1}^{m}Cost(h_\theta(x^{(i)}),y^{(i)}) \\&amp; Cost(hθ(x),y)=−log(h_θ(x)) &amp; \qquad if\ y = 1 \\&amp; Cost(hθ(x),y)=−log(1−h_θ(x)) &amp; \qquad if\ y = 0 \\\end{align*}\]</span></p><p>When y = 1, we get the following plot for <span class="math inline">\(J(θ)\)</span> vs <span class="math inline">\(h_θ(x)\)</span>:</p><figure><img src="646B1BAA40FE5FDF8DCE1C19C7FAD0D9.png" alt="Screen Shot 2018-03-05 at 16.30.57.png"><figcaption>Screen Shot 2018-03-05 at 16.30.57.png</figcaption></figure><p>Similarly, when y = 0, we get the following plot for <span class="math inline">\(J(θ)\)</span> vs <span class="math inline">\(h_θ(x)\)</span>:</p><figure><img src="FB72818E064A195140A5412097BB5B83.png" alt="Screen Shot 2018-03-05 at 16.31.25.png"><figcaption>Screen Shot 2018-03-05 at 16.31.25.png</figcaption></figure><p>If our correct answer 'y' is 0, then the cost function will be 0 if our hypothesis function also outputs 0. If our hypothesis approaches 1, then the cost function will approach infinity.</p><p>If our correct answer 'y' is 1, then the cost function will be 0 if our hypothesis function outputs 1. If our hypothesis approaches 0, then the cost function will approach infinity.</p><figure><img src="7C227E67AE2C20B141CD3F4B9D3A7A77.png" alt="Screen Shot 2018-03-05 at 16.38.30.png"><figcaption>Screen Shot 2018-03-05 at 16.38.30.png</figcaption></figure><p><strong>Note that writing the cost function in this way guarantees that J(θ) is convex for logistic regression.</strong></p><h3 id="simplified-cost-function-and-gradient-descent">Simplified Cost Function and Gradient Descent</h3><p>We can compress our cost function's two conditional cases into one case: <span class="math display">\[Cost(h_θ(x),y)=−ylog(h_θ(x))−(1−y)log(1−h_θ(x))\]</span></p><p>Notice that when y is equal to 1, then the second term <span class="math inline">\((1−y)log(1−h_θ(x))\)</span> will be zero and will not affect the result. If y is equal to 0, then the first term <span class="math inline">\(−ylog(h_θ(x))\)</span> will be zero and will not affect the result.</p><p>We can fully write out our entire cost function as follows: <span class="math display">\[J(θ)=−\frac{1}{m}\sum_{i=1}^{m}[y^{(i)}log(h_θ(x^{(i)}))+(1−y^{(i)})log(1−h_θ(x^{(i)}))]\]</span></p><h4 id="gradient-descent-1">Gradient Descent</h4><p>Remember that the general form of gradient descent is: <span class="math display">\[Repeat \left\{\theta_i := \theta_j - \alpha\frac{\partial}{\partial\theta_j}J(\theta)\right\}\]</span></p><p>We can work out the derivative part using calculus to get: <span class="math display">\[Repeat \left\{\theta_i := \theta_j - \frac{\alpha}{m}\sum^m_{i=1}(h_\theta(x^{(i)})-y^{(i)})x_j^{(i)}\right\}\]</span></p><h3 id="multiclass-classification-one-vs-all">Multiclass Classification: One-vs-all</h3><p>Now we will approach the classification of data when we have more than two categories. Instead of y = {0,1} we will expand our definition so that y = {0,1...n}.</p><p>Since y = {0,1...n}, we divide our problem into n+1 (+1 because the index starts at 0) binary classification problems; in each one, we predict the probability that 'y' is a member of one of our classes. <span class="math display">\[\begin{align*}&amp;y \in \left\{0,1...n\right\} \\&amp;h^{(0)}_θ(x)=P(y=0|x;θ) \\&amp; h^{(1)}_θ(x)=P(y=1|x;θ) \\&amp; \cdots \\&amp; h^{(n)}_θ(x)=P(y=n|x;θ) \\&amp; prediction = \max\limits_{i}(h^{(i)}_θ(x))\end{align*}\]</span></p><p>We are basically choosing one class and then lumping all the others into a single second class. We do this repeatedly, applying binary logistic regression to each case, and then use the hypothesis that returned the highest value as our prediction.</p><p>The following image shows how one could classify 3 classes:</p><figure><img src="BBF9A94F6DBB2A31F5ED6998975550F4.png" alt="Screen Shot 2018-03-05 at 16.59.52.png"><figcaption>Screen Shot 2018-03-05 at 16.59.52.png</figcaption></figure><p>To summarize: Train a logistic regression classifier <span class="math inline">\(h_θ(x)\)</span> for each class to predict the probability that y = i, To make a prediction on a new x, pick the class that maximizes <span class="math inline">\(h_θ(x)\)</span>.</p><h3 id="solving-the-problem-of-overfitting">Solving the problem of Overfitting</h3><h4 id="the-problem-of-overfitting">The Problem of Overfitting</h4><p>Consider the problem of predicting y from <span class="math inline">\(x \in R\)</span>. The leftmost figure below shows the result of fitting a <span class="math inline">\(y = θ_0+θ_1x\)</span> to a dataset. We see that the data doesn’t really lie on straight line, and so the fit is not very good.</p><figure><img src="C88419E9C1B6C95CDBB8BBCF11D141CD.png" alt="Screen Shot 2018-03-05 at 17.05.11.png"><figcaption>Screen Shot 2018-03-05 at 17.05.11.png</figcaption></figure><p>Instead, if we had added an extra feature <span class="math inline">\(x_2\)</span> , and fit <span class="math inline">\(y=θ_0+θ_1x+θ_2x_2\)</span> , then we obtain a slightly better fit to the data (See middle figure). Naively, it might seem that the more features we add, the better. However, there is also a danger in adding too many features: The rightmost figure is the result of fitting a 5th order polynomial <span class="math inline">\(y=\sum^5_{j=0}θ_jx_j\)</span>. We see that even though the fitted curve passes through the data perfectly, we would not expect this to be a very good predictor of, say, housing prices (y) for different living areas (x). Without formally defining what these terms mean, we’ll say the figure on the left shows an instance of underfitting—in which the data clearly shows structure not captured by the model—and the figure on the right is an example of overfitting.</p><ul><li><strong>Underfitting</strong>, or <strong>high bias</strong>, is when the form of our hypothesis function h maps poorly to the trend of the data. It is usually caused by a function that is too simple or uses too few features.</li><li><strong>Overfitting</strong>, or <strong>high variance</strong>, is caused by a hypothesis function that fits the available data but does not generalize well to predict new data. It is usually caused by a complicated function that creates a lot of unnecessary curves and angles unrelated to the data.</li></ul><p>This terminology is applied to both linear and logistic regression. There are two main options to <strong>address the issue of overfitting</strong>: - Reduce the number of features: + Manually select which features to keep. + Use a model selection algorithm (studied later in the course). - Regularization + Keep all the features, but reduce the magnitude of parameters <span class="math inline">\(θ_j\)</span>. + <strong>Regularization works well when we have a lot of slightly useful features.</strong></p><h4 id="cost-function-2">Cost Function</h4><p>If we have overfitting from our hypothesis function, we can reduce the weight that some of the terms in our function carry by increasing their cost.</p><p>Say we wanted to make the following function more quadratic: <span class="math display">\[θ_0+θ_1x+θ_2x_2+θ_3x_3+θ_4x_4\]</span></p><p>We'll want to eliminate the influence of <span class="math inline">\(θ_3x_3\)</span> and <span class="math inline">\(θ_4x_4\)</span> . Without actually getting rid of these features or changing the form of our hypothesis, we can instead modify our <strong>cost function</strong>: <span class="math display">\[min_θ\frac{1}{2m}\sum^m_{i=1}(h_θ(x^{(i)})−y^{(i)})^2+1000\cdotθ^2_3+1000\cdotθ^2_4\]</span></p><p>We've added two extra terms at the end to inflate the cost of <span class="math inline">\(θ_3\)</span> and <span class="math inline">\(θ_4\)</span>. Now, in order for the cost function to get close to zero, we will have to reduce the values of <span class="math inline">\(θ_3\)</span> and <span class="math inline">\(θ_4\)</span> to near zero. This will in turn greatly reduce the values of <span class="math inline">\(θ_3x^3\)</span> and <span class="math inline">\(θ_4x^4\)</span> in our hypothesis function. As a result, we see that the new hypothesis (depicted by the pink curve) looks like a quadratic function but fits the data better due to the extra small terms <span class="math inline">\(θ_3x^3\)</span> and <span class="math inline">\(θ_4x^4\)</span>.</p><figure><img src="20175FD6A28276C76BE10BFB5E984336.png" alt="Screen Shot 2018-03-05 at 17.50.15.png"><figcaption>Screen Shot 2018-03-05 at 17.50.15.png</figcaption></figure><p>We could also regularize all of our theta parameters in a single summation as: <span class="math display">\[min_θ\frac{1}{2m}\left[\sum^m_{i=1}(h_θ(x^{(i)})−y^{(i)})^2+\lambda\sum_{j=1}^{n}\theta_j^2\right]\]</span></p><p>The λ, or lambda, is the <strong>regularization parameter</strong>. It determines how much the costs of our theta parameters are inflated.</p><p>Using the above cost function with the extra summation, we can smooth the output of our hypothesis function to reduce overfitting. If lambda is chosen to be too large, it may smooth out the function too much and cause underfitting. Hence, what would happen if λ=0 or is too small ?</p><h4 id="regularized-linear-regression">Regularized Linear Regression</h4><p>We can apply regularization to both linear regression and logistic regression. We will approach linear regression first.</p><h5 id="gradient-descent-2">Gradient Descent</h5><p>We will modify our gradient descent function to separate out <span class="math inline">\(θ_0\)</span> from the rest of the parameters because we do not want to penalize <span class="math inline">\(θ_0\)</span>.</p><p>repeat until convergence:{ <span class="math display">\[\begin{align*}&amp; θ_0:=θ_0−α\frac{1}{m}\sum_{i=1}^m(h_θ(x^{(i)})−y^{(i)})x_0^{(i)} \\&amp; θ_j:=θ_j−α\left[\left(\frac{1}{m}\sum_{i=1}^m(h_θ(x^{(i)})−y^{(i)})x_j^{(i)}\right) + \frac{\lambda}{m}\theta_j\right]   \qquad j \in \left\{1,2...n\right\}\end{align*}\]</span> }</p><p>The term <span class="math inline">\(\frac{λ}{m}θ_j\)</span> performs our regularization. With some manipulation our update rule can also be represented as: <span class="math display">\[θ_j:=θ_j(1−α\frac{λ}{m})−α\frac{1}{m}\sum^m_{i=1}(h_θ(x^{(i)})−y^{(i)})x^{(i)}_j\]</span></p><p>The first term in the above equation,<span class="math inline">\(1−α\frac{λ}{m}\)</span> will always be less than 1. Intuitively you can see it as reducing the value of <span class="math inline">\(θ_j\)</span> by some amount on every update. Notice that the second term is now exactly the same as it was before.</p><h4 id="normal-equation-1">Normal Equation</h4><p>Now let's approach regularization using the alternate method of the non-iterative normal equation.</p><p>To add in regularization, the equation is the same as our original, except that we add another term inside the parentheses: <span class="math display">\[\begin{align*}&amp; \theta = \left( X^TX + \lambda \cdot L\right)^{(-1)}X^Ty \\&amp; where \ L = \begin{bmatrix} 0 &amp; \\  &amp; 1 \\  &amp; &amp; 1 \\  &amp; &amp; &amp; \ddots \\  &amp; &amp; &amp; &amp; 1 \\\end{bmatrix}\end{align*}\]</span></p><p>L is a matrix with 0 at the top left and 1's down the diagonal, with 0's everywhere else. It should have dimension (n+1)×(n+1). Intuitively, this is the identity matrix (though we are not including <span class="math inline">\(x_0\)</span>), multiplied with a single real number .</p><p>Recall that if m &lt; n, then <span class="math inline">\(X^TX\)</span> is non-invertible. However, when we add the term <span class="math inline">\(\lambda \cdot l\)</span>, then <span class="math inline">\(X^TX + \lambda⋅L\)</span> becomes invertible.</p><h4 id="regularized-logistic-regression">Regularized Logistic Regression</h4><p>We can regularize logistic regression in a similar way that we regularize linear regression. As a result, we can avoid overfitting. The following image shows how the regularized function, displayed by the pink line, is less likely to overfit than the non-regularized function represented by the blue line:</p><figure><img src="C47865D828E5712B8CF0169AF2AF3CF8.png" alt="Screen Shot 2018-03-05 at 20.01.22.png"><figcaption>Screen Shot 2018-03-05 at 20.01.22.png</figcaption></figure><p>Cost Function</p><p>Recall that our cost function for logistic regression was: <span class="math display">\[J(θ)=−\frac{1}{m}\sum_{i=1}^{m}[y^{(i)}log(h_θ(x^{(i)}))+(1−y^{(i)})log(1−h_θ(x^{(i)}))]\]</span></p><p>We can regularize this equation by adding a term to the end: <span class="math display">\[J(θ)=−\frac{1}{m}\sum_{i=1}^{m}[y^{(i)}log(h_θ(x^{(i)}))+(1−y^{(i)})log(1−h_θ(x^{(i)}))] + \frac{\lambda}{2m}\sum_{j=1}^{n}\theta_j^2\]</span></p><p>he second sum,<span class="math inline">\(\sum^n_{j=1}θ^2_j\)</span> means to explicitly exclude the bias term, <span class="math inline">\(θ_0\)</span>. I.e. the θ vector is indexed from 0 to n (holding n+1 values, <span class="math inline">\(θ_0\)</span> through <span class="math inline">\(θ_n\)</span>), and this sum explicitly skips <span class="math inline">\(θ_0\)</span>, by running from 1 to n, skipping 0. Thus, when computing the equation, we should continuously update the two following equations:</p><figure><img src="55D75D0935FA2755B526906B7C7469E3.png" alt="Screen Shot 2018-03-05 at 22.47.16.png"><figcaption>Screen Shot 2018-03-05 at 22.47.16.png</figcaption></figure><h2 id="neural-networks">Neural Networks</h2><h3 id="model-representation-1">Model Representation</h3><h4 id="model-representation-i">Model Representation I</h4><p>Let's examine how we will represent a hypothesis function using neural networks. At a very simple level, neurons are basically computational units that take inputs (<strong>dendrites</strong>) as electrical inputs (called "spikes") that are channeled to outputs (<strong>axons</strong>). In our model, our dendrites are like the input features <span class="math inline">\(x_1 \dots x_n\)</span>, and the output is the result of our hypothesis function. In this model our <span class="math inline">\(x_0\)</span> input node is sometimes called the "bias unit." It is always equal to 1. In neural networks, we use the same logistic function as in classification, <span class="math inline">\(\frac{1}{1+e^{−θ^Tx}}\)</span>, yet we sometimes call it a sigmoid (logistic) <strong>activation</strong> function. In this situation, our "theta" parameters are sometimes called "<strong>weights</strong>".</p><p>Visually, a simplistic representation looks like: <span class="math display">\[\begin{equation}\begin{bmatrix}x_0\\x_1\\x_2\\x_3\\\end{bmatrix} \rightarrow\begin{bmatrix}a_1^{(2)}\\a_2^{(2)}\\a_3^{(2)}\\ \end{bmatrix}\rightarrow h_\theta(x)\end{equation}\]</span></p><p>The values for each of the "activation" nodes is obtained as follows: <span class="math display">\[\begin{align*}&amp; a^{(2)}_1=g(Θ^{(1)}_{10}x_0+Θ^{(1)}_{11}x_1+Θ^{(1)}_{12}x_2+Θ^{(1)}_{13}x_3) \\&amp; a^{(2)}_2=g(Θ^{(1)}_{20}x_0+Θ^{(1)}_{21}x_1+Θ^{(1)}_{22}x_2+Θ^{(1)}_{23}x_3) \\&amp; a^{(2)}_3=g(Θ^{(1)}_{30}x_0+Θ^{(1)}_{31}x_1+Θ^{(1)}_{32}x_2+Θ^{(1)}_{33}x_3) \\&amp; h_Θ(x)=a^{(3)}_1=g(Θ^{(2)}_{10}a^{(2)}_0+Θ^{(2)}_{11}a^{(2)}_1+Θ^{(2)}_{12}a^{(2)}_2+Θ^{(2)}_{13}a^{(2)}_3)\end{align*}\]</span></p><p>This is saying that we compute our activation nodes by using a 3×4 matrix of parameters. We apply each row of the parameters to our inputs to obtain the value for one activation node. Our hypothesis output is the logistic function applied to the sum of the values of our activation nodes, which have been multiplied by yet another parameter matrix <span class="math inline">\(Θ^{(2)}\)</span> containing the weights for our second layer of nodes.</p><p>Each layer gets its own matrix of weights, <span class="math inline">\(Θ^{(j)}\)</span>.</p><p>The dimensions of these matrices of weights is determined as follows:</p><p>If network has <span class="math inline">\(s_j\)</span> units in layer j and <span class="math inline">\(s_{j+1}\)</span> units in layer j+1, then <span class="math inline">\(Θ^{(j)}\)</span> will be of dimension <span class="math inline">\(s_{j+1}×(s_j+1)\)</span>.</p><p>The +1 comes from the addition in <span class="math inline">\(Θ^{(j)}\)</span> of the "bias nodes," <span class="math inline">\(x_0\)</span> and <span class="math inline">\(Θ^{(j)}_0\)</span>. In other words the output nodes will not include the bias nodes while the inputs will. The following image summarizes our model representation:</p><figure><img src="E393ACC2A3014435290235CA61D6B235.png" alt="Screen Shot 2018-03-05 at 23.27.21.png"><figcaption>Screen Shot 2018-03-05 at 23.27.21.png</figcaption></figure><p>Example: If layer 1 has 2 input nodes and layer 2 has 4 activation nodes. Dimension of <span class="math inline">\(Θ^{(1)}\)</span> is going to be 4×3 where <span class="math inline">\(s_j=2\)</span> and <span class="math inline">\(s_{j+1}=4\)</span>, so <span class="math inline">\(s_{j+1}×(s_j+1)=4×3\)</span>.</p><h4 id="examples-and-intuitions-i">Examples and Intuitions I</h4><p>A simple example of applying neural networks is by predicting x1 AND x2, which is the logical 'and' operator and is only true if both x1 and x2 are 1.</p><p>The graph of our functions will look like: <span class="math display">\[\begin{equation}\begin{bmatrix}x_0\\x_1\\x_2\\x_3\\\end{bmatrix} \rightarrow\begin{bmatrix}g(z^{(2)})\\\end{bmatrix}\rightarrow h_\theta(x)\end{equation}\]</span></p><p>Remember that x0 is our bias variable and is always 1.</p><p>Let's set our first theta matrix as: <span class="math display">\[\theta^{(1)} = \left[ -30 \quad 20 \quad 20 \right]\]</span></p><p>This will cause the output of our hypothesis to only be positive if both <span class="math inline">\(x_1\)</span> and <span class="math inline">\(x_2\)</span> are 1. In other words: <span class="math display">\[\begin{align*}&amp; hΘ(x)=g(−30+20x1+20x2)\\&amp; x1=0 \ and \  x2=0 \ then \ g(−30) \approx 0 \\&amp; x1=0 \ and \  x2=1 \ then \ g(−10) \approx 0 \\&amp; x1=1 \ and \  x2=0 \ then \ g(−10) \approx 0 \\&amp; x1=1 \ and \ x2=1 \ then \ g(10)  \approx 1 \\\end{align*}\]</span></p><p>So we have constructed one of the fundamental operations in computers by using a small neural network rather than using an actual AND gate. Neural networks can also be used to simulate all the other logical gates. The following is an example of the logical operator 'OR', meaning either <span class="math inline">\(x_1\)</span> is true or <span class="math inline">\(x_2\)</span> is true, or both:</p><figure><img src="7AE116A7537F70690A8F58ACB6F54D76.png" alt="Screen Shot 2018-03-06 at 00.16.18.png"><figcaption>Screen Shot 2018-03-06 at 00.16.18.png</figcaption></figure><figure><img src="E22905CF7C49F8BF1CBE158BD291C7AB.png" alt="Screen Shot 2018-03-06 at 00.16.24.png"><figcaption>Screen Shot 2018-03-06 at 00.16.24.png</figcaption></figure><h4 id="examples-and-intuitions-ii">Examples and Intuitions II</h4><p>The <span class="math inline">\(Θ^{(1)}\)</span> matrices for AND, NOR, and OR are: <span class="math display">\[\begin{align*}&amp; AND: &amp; \theta^{(1)} = \left[ -30 \quad 20 \quad 20 \right] \\&amp; NOR: &amp;\theta^{(1)} = \left[ 10 \quad -20 \quad -20 \right] \\&amp; OR:  &amp; \theta^{(1)} = \left[ -10 \quad 20 \quad 20 \right] \\\end{align*}\]</span></p><p>We can combine these to get the XNOR logical operator (which gives 1 if x1 and x2 are both 0 or both 1).</p><p><span class="math display">\[\begin{equation}\begin{bmatrix}x_0\\x_1\\x_2\\\end{bmatrix} \rightarrow\begin{bmatrix}a_1^{(2)}\\a_2^{(2)}\\\end{bmatrix}\rightarrow\begin{bmatrix}a^{(3)}\\\end{bmatrix} \rightarrow h_\theta(x)\end{equation}\]</span></p><p>For the transition between the first and second layer, we'll use a <span class="math inline">\(Θ^(1)\)</span> matrix that combines the values for AND and NOR:</p><p><span class="math display">\[\begin{equation}\theta^{(1)} = \begin{bmatrix}&amp; -30 &amp; 20 &amp; 20\\&amp; 10 &amp; -20 &amp; -20\\\end{bmatrix}\end{equation}\]</span></p><p>For the transition between the second and third layer, we'll use a <span class="math inline">\(Θ^(2)\)</span> matrix that uses the value for OR: <span class="math display">\[\begin{equation}\theta^{(1)} = \begin{bmatrix}&amp; -10 &amp; 20 &amp; 20\\\end{bmatrix}\end{equation}\]</span></p><p>Let's write out the values for all our nodes: <span class="math display">\[\begin{align*}&amp; a^{(2)}=g(Θ^{(1)}\cdot x) \\ &amp; a^{(3)}=g(Θ(2)\cdot a^{(2)}) \\ &amp; h_Θ^{(x)}=a^{(3)}\end{align*}\]</span></p><p>And there we have the XNOR operator using a hidden layer with two nodes! The following summarizes the above algorithm: <img src="6B60EFC19A998BFE77E456054B18E0E5.png" alt="Screen Shot 2018-03-06 at 00.34.59.png"></p><h3 id="multiclass-classification">Multiclass Classification</h3><p>To classify data into multiple classes, we let our hypothesis function return a vector of values. Say we wanted to classify our data into one of four categories. We will use the following example to see how this classification is done. This algorithm takes as input an image and classifies it accordingly:</p><figure><img src="9F39EFDDAD68E6ED5C70BDBB41DCA3D8.png" alt="Screen Shot 2018-03-06 at 00.36.26.png"><figcaption>Screen Shot 2018-03-06 at 00.36.26.png</figcaption></figure><p>We can define our set of resulting classes as y: <img src="5D6DBDB924FFE09866BA87069886BD34.png" alt="Screen Shot 2018-03-06 at 00.36.39.png"></p><p>Each <span class="math inline">\(y^{(i)}\)</span> represents a different image corresponding to either a car, pedestrian, truck, or motorcycle. The inner layers, each provide us with some new information which leads to our final hypothesis function. The setup looks like:</p><figure><img src="5D6DBDB924FFE09866BA87069886BD34.png" alt="Screen Shot 2018-03-06 at 00.36.39.png"><figcaption>Screen Shot 2018-03-06 at 00.36.39.png</figcaption></figure><p>Our resulting hypothesis for one set of inputs may look like: <img src="0F0B96816583D5C4B1A3FBEC2960985B.png" alt="Screen Shot 2018-03-06 at 00.37.58.png"></p><p>In which case our resulting class is the third one down, or <span class="math inline">\(h_Θ(x)_3\)</span>, which represents the motorcycle.</p><h3 id="cost-function-3">Cost Function</h3><p>Let's first define a few variables that we will need to use: - L = total number of layers in the network - <span class="math inline">\(s_l\)</span> = number of units (not counting bias unit) in layer l - K = number of output units/classes</p><p>Recall that in neural networks, we may have many output nodes. We denote <span class="math inline">\(h_Θ(x)_k\)</span> as being a hypothesis that results in the kth output. Our cost function for neural networks is going to be a generalization of the one we used for logistic regression. Recall that the cost function for regularized logistic regression was: <span class="math display">\[J(θ)=−\frac{1}{m}\sum_{i=1}^{m}[y^{(i)}log(h_θ(x^{(i)}))+(1−y^{(i)})log(1−h_θ(x^{(i)}))] + \frac{\lambda}{2m}\sum_{j=1}^{n}\theta_j^2\]</span> For neural networks, it is going to be slightly more complicated: <span class="math display">\[J(θ)=−\frac{1}{m}\sum_{i=1}^{m}\sum_{k=1}^{k}\left[y^{(i)}log(h_θ(x^{(i)}))+(1−y^{(i)})log(1−h_θ(x^{(i)}))\right] + \frac{\lambda}{2m}\sum_{j=1}^{L-1}\sum_{i=1}^{s_j}\sum_{j=1}^{s_j+1}\left(\Theta_{j,i}^{(l)} \right)\]</span></p><p>We have added a few nested summations to account for our multiple output nodes. In the first part of the equation, before the square brackets, we have an additional nested summation that loops through the number of output nodes.</p><p>In the regularization part, after the square brackets, we must account for multiple theta matrices. The number of columns in our current theta matrix is equal to the number of nodes in our current layer (including the bias unit). The number of rows in our current theta matrix is equal to the number of nodes in the next layer (excluding the bias unit). As before with logistic regression, we square every term.</p><p>Note:</p><ul><li>the double sum simply adds up the logistic regression costs calculated for each cell in the output layer</li><li>the triple sum simply adds up the squares of all the individual Θs in the entire network.</li><li>the i in the triple sum does not refer to training example i</li></ul><h3 id="反向传播算法">反向传播算法</h3><p><img src="1E7910385ADB22286535DD9C10A96CA9.png" alt="Screen Shot 2018-03-06 at 22.50.33.png"> <img src="8DC2206F7BE4D57DE26287856593AD79.png" alt="Screen Shot 2018-03-06 at 22.53.11.png"> <img src="3E0683886E25BF1BC633840010E6B5C9.png" alt="Screen Shot 2018-03-06 at 22.54.57.png"> <img src="7C3B34351E78311B962400E061A79423.png" alt="Screen Shot 2018-03-06 at 22.55.30.png"> <img src="A1B582245F39EB4BA99621D425CA909F.png" alt="Screen Shot 2018-03-06 at 23.39.45.png"> <img src="FFC79FACBBA1492A02D9E45F3C29C439.png" alt="Screen Shot 2018-03-06 at 23.40.03.png"></p><p>####引入delta 利用链式法则来更新权重你会发现其实这个方法简单，但过于冗长。由于更新的过程可以看做是从网络的输入层到输出层从前往后更新，每次更新的时候都需要重新计算节点的误差，因此会存在一些不必要的重复计算。其实对于已经计算完毕的节点我们完全可以直接拿来用，因此我们可以重新看待这个问题，从后往前更新。先更新后边的权重，之后再在此基础上利用更新后边的权重产生的中间值来更新较靠前的参数。这个中间变量就是下文要介绍的delta变量，一来简化公式，二来减少计算量，有点动态规划的赶脚。</p><p>接下来用事实说话，大家仔细观察一下在第四部分链式求导部分误差对于输出层的w11以及隐藏层的w11求偏导以及偏置的求偏导的过程，你会发现，三个公式存在相同的部分，同时隐藏层参数求偏导的过程会用到输出层参数求偏导的部分公式，这正是引入了中间变量delta的原因（其实红框的公式就是delta的定义）。 <img src="3B0BF315DF80121DB27897BBF9A37884.png" alt="Screen Shot 2018-03-07 at 01.04.21.png"></p><p>大家看一下经典书籍《神经网络与深度学习》中对于delta的描述为在第l层第j个神经元上的误差，<strong>定义为误差对于当前带权输入求偏导</strong>，数学公式如下： <img src="238D7D4D26EE242A61DA6EB1A8B29D2D.png" alt="Screen Shot 2018-03-07 at 01.04.39.png"></p><p><img src="86C740FF01C6F3D1BBE6E70DDFB1D8BD.png" alt="Screen Shot 2018-03-07 at 01.05.03.png"> <img src="55BF97D8CF559C742CF654469D576603.png" alt="Screen Shot 2018-03-07 at 01.05.50.png"></p><figure><img src="B090D5D856292D3898C1D4E0937B58B2.png" alt="Screen Shot 2018-03-07 at 01.06.05.png"><figcaption>Screen Shot 2018-03-07 at 01.06.05.png</figcaption></figure><h2 id="advice-for-applying-machine-learning">Advice for Applying Machine Learning</h2><h3 id="evaluating-a-hypothesis">Evaluating a Hypothesis</h3><p>Once we have done some trouble shooting for errors in our predictions by:</p><ul><li>Getting more training examples</li><li>Trying smaller sets of features</li><li>Trying additional features</li><li>Trying polynomial features</li><li>Increasing or decreasing λ</li></ul><p>We can move on to evaluate our new hypothesis.</p><p>A hypothesis may have a low error for the training examples but still be inaccurate (because of overfitting). Thus, to evaluate a hypothesis, given a dataset of training examples, we can split up the data into two sets: a <strong>training set</strong> and a <strong>test set</strong>. Typically, the training set consists of 70% of your data and the test set is the remaining 30%.</p><p>The new procedure using these two sets is then:</p><p>Learn Θ and minimize <span class="math inline">\(J_{train}(Θ)\)</span> using the training set Compute the test set error <span class="math inline">\(J_{test}(Θ)\)</span></p><h3 id="the-test-set-error">The test set error</h3><ol type="1"><li>For linear regression: <span class="math display">\[J_{test}(Θ)=\frac{1}{2m_{test}}\sum^{m_{test}}_{i=1}(h_Θ(x^{(i)}_{test})−y^{(i)}_{test})^2\]</span> For classification ~ Misclassification error (aka 0/1 misclassification error): <span class="math display">\[\begin{equation}err(h_Θ(x),y)= \left\{\begin{aligned}\overset{.} 1 &amp; \quad if \ h_Θ(x)≥0.5 \ and \ y=0 \ or \ h_Θ(x)&lt;0.5 \ and \ y=1 \\  0 &amp; \quad otherwise \end{aligned}\right.\end{equation}\]</span></li></ol><p>This gives us a binary 0 or 1 error result based on a misclassification. The average test error for the test set is:</p><p><span class="math display">\[Test Error)=\frac{1}{m_{test}}\sum^{m_{test}}_{i=1}err(h_Θ(x^{(i)}_{test}),y^{(i)}_{test})^2\]</span></p><p>This gives us the proportion of the test data that was misclassified.</p><h3 id="model-selection-and-trainvalidationtest-sets">Model Selection and Train/Validation/Test Sets</h3><p>Just because a learning algorithm fits a training set well, that does not mean it is a good hypothesis. It could <strong>over fit</strong> and as a result your predictions on the test set would be poor. The error of your hypothesis as measured on the data set with which you trained the parameters will be lower than the error on any other data set.</p><p>Given many models with different polynomial degrees, we can use a systematic approach to identify the 'best' function. In order to choose the model of your hypothesis, you can test each degree of polynomial and look at the error result.</p><p>One way to break down our dataset into the three sets is: - Training set: 60% - Cross validation set: 20% - Test set: 20%</p><p>We can now calculate three separate error values for the three different sets using the following method:</p><ol type="1"><li>Optimize the parameters in Θ using the training set for each polynomial degree.</li><li>Find the polynomial degree d with the least error using the cross validation set.</li><li>Estimate the generalization error using the test set with <span class="math inline">\(J_{test}(Θ^{(d)})\)</span>, (d = theta from polynomial with lower error);</li></ol><p>This way, the degree of the polynomial d has not been trained using the test set.</p><h3 id="diagnosing-bias-vs.-variance">Diagnosing Bias vs. Variance</h3><p>In this section we examine the relationship between the degree of the polynomial d and the underfitting or overfitting of our hypothesis.</p><ul><li>We need to distinguish whether bias or variance is the problem contributing to bad predictions.</li><li><strong>High bias</strong> is underfitting and <strong>high variance</strong> is overfitting. Ideally, we need to find a golden mean between these two.</li></ul><p>The training error will tend to <strong>decrease</strong> as we increase the degree d of the polynomial.</p><p>At the same time, the cross validation error will tend to <strong>decrease</strong> as we increase d up to a point, and then it will <strong>increase</strong> as d is increased, forming a convex curve.</p><ul><li>High bias (underfitting): both <span class="math inline">\(J_{train}(Θ)\)</span> and <span class="math inline">\(J_{CV}(Θ)\)</span> will be high. Also, <span class="math inline">\(J_{CV}(Θ) \approx J_{train}(Θ)\)</span>.</li><li>High variance (overfitting): <span class="math inline">\(J_{train}(Θ)\)</span> will be low and <span class="math inline">\(J_{CV}(Θ)\)</span> will be much greater than <span class="math inline">\(J_{train}(Θ)\)</span>.</li></ul><p>The is summarized in the figure below: <img src="781A117D7463E287879157F7CAE8C804.png" alt="Screen Shot 2018-03-07 at 02.32.42.png"></p><h3 id="regularization-and-biasvariance">Regularization and Bias/Variance</h3><p><img src="515C8236E4F14AA312CAB97EBE4D2A4B.png" alt="Screen Shot 2018-03-07 at 02.34.37.png"> In the figure above, we see that as λ increases, our fit becomes more rigid. On the other hand, as λ approaches 0, we tend to over overfit the data. So how do we choose our parameter λ to get it 'just right' ? In order to choose the model and the regularization term λ, we need to:</p><ol type="1"><li>Create a list of lambdas (i.e. <span class="math inline">\(λ \in \left\{0,0.01,0.02,0.04,0.08,0.16,0.32,0.64,1.28,2.56,5.12,10.24\right\}\)</span>);</li><li>Create a set of models with different degrees or any other variants.</li><li>Iterate through the λs and for each λ go through all the models to learn some Θ.</li><li>Compute the cross validation error using the learned Θ (computed with λ) on the <span class="math inline">\(J_{CV}(Θ)\)</span> <strong>without</strong> regularization or <strong>λ = 0</strong>.</li><li>Select the best combo that produces the lowest error on the cross validation set.</li><li>Using the best combo Θ and λ, apply it on <span class="math inline">\(J_{test}(Θ)\)</span> to see if it has a good generalization of the problem.</li></ol><h3 id="learning-curves">Learning Curves</h3><p>Training an algorithm on a very few number of data points (such as 1, 2 or 3) will easily have 0 errors because we can always find a quadratic curve that touches exactly those number of points. Hence: - As the training set gets larger, the error for a quadratic function increases. - The error value will plateau out after a certain m, or training set size.</p><h4 id="experiencing-high-bias">Experiencing high bias:</h4><ul><li><p><strong>Low training set size</strong>: causes <span class="math inline">\(J_{train}(Θ)\)</span> to be low and <span class="math inline">\(J_{CV}(Θ)\)</span> to be high.</p></li><li><p><strong>Large training set size</strong>: causes both <span class="math inline">\(J_{train}(Θ)\)</span> and <span class="math inline">\(J_CV(Θ)\)</span> to be high with <span class="math inline">\(J_{train}(Θ) \approx J_{CV}(Θ)\)</span>.</p></li></ul><blockquote><p>If a learning algorithm is suffering from high bias, getting more training data will not (by itself) help much.</p></blockquote><figure><img src="3DF331A0CEECDA3ACF1DA4FC358DFF4A.png" alt="Screen Shot 2018-03-07 at 02.48.32.png"><figcaption>Screen Shot 2018-03-07 at 02.48.32.png</figcaption></figure><h4 id="experiencing-high-variance">Experiencing high variance:</h4><ul><li><p><strong>Low training set size</strong>: causes <span class="math inline">\(J_{train}(Θ)\)</span> to be low and <span class="math inline">\(J_{CV}(Θ)\)</span> to be high.</p></li><li><p><strong>Large training set size</strong>: <span class="math inline">\(J_{train}(Θ)\)</span> increases with training set size and <span class="math inline">\(J_{CV}(Θ)\)</span> continues to decrease without leveling off. Also, <span class="math inline">\(J_{train}(Θ) &lt; J_{CV}(Θ)\)</span> but the difference between them remains significant.</p></li></ul><blockquote><p>If a learning algorithm is suffering from high variance, getting more training data is likely to help. <img src="EFB83955B407BC411E541A711E96A0E8.png" alt="Screen Shot 2018-03-07 at 02.53.23.png"></p></blockquote><h3 id="deciding-what-to-do-next-revisited">Deciding What to Do Next Revisited</h3><p>Our decision process can be broken down as follows:</p><ul><li><strong>Getting more training examples</strong>: Fixes high variance</li><li><strong>Trying smaller sets of features</strong>: Fixes high variance</li><li><strong>Adding features</strong>: Fixes high bias</li><li><strong>Adding polynomial features</strong>: Fixes high bias</li><li><strong>Decreasing λ</strong>: Fixes high bias</li><li><strong>Increasing λ</strong>: Fixes high variance.</li></ul><h4 id="diagnosing-neural-networks">Diagnosing Neural Networks</h4><ul><li>A neural network with fewer parameters is prone to underfitting. It is also computationally cheaper.</li><li>A large neural network with more parameters is prone to overfitting. It is also computationally expensive. In this case you can use regularization (increase λ) to address the overfitting.</li></ul><p>Using a single hidden layer is a good starting default. You can train your neural network on a number of hidden layers using your cross validation set. You can then select the one that performs best.</p><h2 id="support-vector-machines">Support Vector Machines</h2><h3 id="from-logistic-to-svm">from logistic to SVM</h3><figure><img src="285DCB47AC53B59E2DB6E011D59EC77A.png" alt="Screen Shot 2018-03-07 at 11.30.56.png"><figcaption>Screen Shot 2018-03-07 at 11.30.56.png</figcaption></figure><p>###Cost Function <img src="C3B175C3D872808F82A095C1D6B8925A.png" alt="Screen Shot 2018-03-07 at 11.31.49.png"></p><p>recall the cost function of logistic Regression: <span class="math display">\[\min_{\theta}−\frac{1}{m}\sum_{i=1}^{m}[y^{(i)}log(h_θ(x^{(i)}))+(1−y^{(i)})log(1−h_θ(x^{(i)}))] + \frac{\lambda}{2m}\sum_{j=1}^{n}\theta_j^2\]</span></p><p>We replace some terms with new terms and delete some terms which will not influence the results:</p><p><span class="math display">\[\min_{\theta}C\sum_{i=1}^{m}[y^{(i)}cost_1(\theta^Tx^{(i)}))+(1−y^{(i)})cost_0(\theta^Tx^{(i)})] + \frac{1}{2}\sum_{i=1}^{n}\theta_j^2\]</span></p><h3 id="hypothesis">Hypothesis</h3><p><span class="math display">\[\begin{equation}h_{\theta} = \left\{\begin{aligned}&amp; 0 \quad if \ \theta^TX &gt; 0 \\&amp; 1 \quad otherwise\end{aligned}\right.\end{equation}\]</span></p><h3 id="large-margin-intuion">Large Margin Intuion</h3><p><img src="4687A5DC15D8F11DA8072AECBFE0602F.png" alt="Screen Shot 2018-03-07 at 13.40.48.png"> <img src="A704546B2253B03AC14795A34EE3DF05.png" alt="Screen Shot 2018-03-07 at 13.41.16.png"> <img src="8D7D46605872CB4F3E400CB6A9431488.png" alt="Screen Shot 2018-03-07 at 13.41.29.png"></p><h3 id="vector-inner-product">Vector inner product</h3><p><img src="330C85F2779A7B587222EBCA9A43C8D2.png" alt="Screen Shot 2018-03-07 at 14.10.00.png"> <img src="AB6577A14C75D19C65CBFFD1E33A8D30.png" alt="Screen Shot 2018-03-08 at 14.46.10.png"> <img src="8B0B485DE902B7EF3E7A6490D12C2648.png" alt="Screen Shot 2018-03-07 at 14.15.46.png"></p><h3 id="kernel">kernel</h3><p><img src="448E12BA8322FB7F9A543F878CA4DE18.png" alt="Screen Shot 2018-03-07 at 15.17.22.png"> <img src="AFFBD72AF70902A69A0D88CC1D43CE1E.png" alt="Screen Shot 2018-03-07 at 15.17.43.png"> <img src="396AB89981F0202AB84789EC4618734D.png" alt="Screen Shot 2018-03-07 at 15.19.15.png"> <img src="E18FC2346F7204E03DBF11B94D74B394.png" alt="Screen Shot 2018-03-07 at 15.19.30.png"> <img src="19D617B04FEC28135163B0F5C694EBEC.png" alt="Screen Shot 2018-03-07 at 15.20.04.png"> <img src="7597B35AA6CBE0DE414F5CC36DACF6B2.png" alt="Screen Shot 2018-03-07 at 15.20.24.png"> <img src="2EB3A7D5D4AFA680E6106F22975A9911.png" alt="Screen Shot 2018-03-07 at 15.20.43.png"></p><h4 id="低维线性不可分到高维线性可分的简单例子">低维线性不可分到高维线性可分的简单例子</h4><figure><img src="AAB7D8B8F27F9125ED34BDE4F647DC9C.png" alt="Screen Shot 2018-03-07 at 15.39.51.png"><figcaption>Screen Shot 2018-03-07 at 15.39.51.png</figcaption></figure><p><strong>一个核函数把低维空间映射到高维空间的例子</strong></p><p>下面这张图位于第一、二象限内。我们关注红色的门，以及“北京四合院”这几个字下面的紫色的字母。我们把红色的门上的点看成是“+”数据，紫色字母上的点看成是“-”数据，它们的横、纵坐标是两个特征。显然，在这个二维空间内，“+”“-”两类数据不是线性可分的。 <img src="kernel1.png"></p><p>我们现在考虑核函数，即“内积平方”。这里面是二维空间中的两个点。这个核函数对应着一个二维空间到三维空间的映射，它的表达式是：可以验证，在P这个映射下，原来二维空间中的图在三维空间中的像是这个样子： <img src="kernel2.png" alt="kernel2.png"></p><p>(前后轴为x轴，左右轴为y轴，上下轴为z轴）注意到绿色的平面可以完美地分割红色和紫色，也就是说，两类数据在三维空间中变成线性可分的了。而三维中的这个判决边界，再映射回二维空间中是这样的： <img src="kernel3.png" alt="kernel3.png"></p><p>这是一条双曲线，它不是线性的。</p><p><strong>核函数的作用就是隐含着一个从低维空间到高维空间的映射，而这个映射可以把低维空间中线性不可分的两类点变成线性可分的</strong>。当然，我举的这个具体例子强烈地依赖于数据在原始空间中的位置。事实中使用的核函数往往比这个例子复杂得多。它们对应的映射并不一定能够显式地表达出来；它们映射到的高维空间的维数也比我举的例子（三维）高得多，甚至是无穷维的。这样，就可以期待原来并不线性可分的两类点变成线性可分的了。</p><h3 id="svm-or-logistic-regression">SVM or Logistic Regression</h3><figure><img src="5A07E8FF157593A05A55A2DC50EA8682.png" alt="Screen Shot 2018-03-07 at 15.42.11.png"><figcaption>Screen Shot 2018-03-07 at 15.42.11.png</figcaption></figure><ul><li>如果特征维数很高，往往线性可分（SVM解决非线性分类问题的思路就是将样本映射到更高维的特征空间中），可以采用LR或者线性核的SVM；</li><li>如果样本数量很多，由于求解最优化问题的时候，目标函数涉及两两样本计算内积，使用高斯核明显计算量会大于线性核，所以手动添加一些特征，使得线性可分，然后可以用LR或者线性核的SVM；</li><li>如果不满足上述两点，即特征维数少，样本数量正常，可以使用高斯核的SVM。</li></ul><h2 id="clustering">Clustering</h2><h3 id="k-means-algorithm">K-means algorithm</h3><p>K-means算是一个很简单的聚类算法，而聚类与决策树、SVM等不同，是一种无监督的学习，所谓无监督学习（Unsupervised learning）是和监督学习相对应的，不同于监督学习，无监督学习所给的训练集是不包含标签的，所有数据集都只包括特征xi 而没有标签yi 。 聚类的主要目的就是将这些没有标签的数据分为N个簇(cluster)，其主要的应用有市场划分、社交网络分析、天文学中的数据分析等等。</p><h4 id="k-means的描述如下">K-Means的描述如下：</h4><p><img src="2913E850736A05A1A23A00CA88B16858.png" alt="Screen Shot 2018-03-07 at 15.58.11.png"> 先对参数进行说明：</p><ul><li><span class="math inline">\(x^{(i)}\)</span>为第i个数据点；</li><li><span class="math inline">\(c^{(i)}\)</span> 为x^{(i)}的簇；</li><li><span class="math inline">\(u_j\)</span>为第j个簇的质心点；</li></ul><p>在对算法进行说明：</p><ol type="1"><li>首先需要初始化质心点，在K-Means中，通常采用随机的方法对质心点进行初始化。更好的办法是：随机选择m(m&gt;k)个数据，再从中选择k个数据点作为质心点；</li><li>第一个for循环主要用于给数据点<span class="math inline">\(x^{(i)}\)</span>赋值<span class="math inline">\(c^{(i)}\)</span>，称为 cluster assignment steps，对每一个数据点，都会计算她与所有质心点的距离，而后将数据点分配到与它距离最近的簇；</li><li>第二个for循环主要用于更新质心点的位置，称为move centroid steps，而<span class="math inline">\(u_j\)</span>这里的计算公式所代表的意思就是，分母：统计所有<span class="math inline">\(c_i=j\)</span>的点的个数；分子是所有<span class="math inline">\(c_i=j\)</span>的点的坐标和。那整体的意思就很明确了，就是求这些点的平均值，作为新的质心点的位置。</li></ol><p>当c和u收敛之后，就可以结束整个迭代过程。下面看一个实例： <img src="D4109680581A6961A99333E7F1D2A3CA.png" alt="Screen Shot 2018-03-07 at 16.01.51.png"></p><h4 id="优化目标">优化目标</h4><p>在上一部分中，我们说最终的目的是要达到一个收敛，那我们就用一个失真函数（distortion function）来衡量。 <img src="C24A569CCC459360C8AEEDA750934B83.png" alt="Screen Shot 2018-03-07 at 16.03.03.png"> J(c,u)实际上是一个单调递减的函数，且是一个非凸函数，只要我们能找到拐点，那我们就已经达到了收敛，又称这种方法为elbow function。偶尔也有可能陷入局部最优情况，或出现震荡情况，这样一定是有问题了。</p><figure><img src="E10F16584B1406033AE772380CFA7B0D.png" alt="Screen Shot 2018-03-07 at 16.23.13.png"><figcaption>Screen Shot 2018-03-07 at 16.23.13.png</figcaption></figure><p>####总结 K-Means虽然简单，容易实现，但是也会收敛到局部最小值，这种情况下可以采用K-Means的改进算法：二分K-均值算法。算法的思想就是：首先将所有点做为一个簇，然后将该簇一分为二。之后选择其中一个簇进行继续划分，选择哪一个簇进行划分则取决于对其划分是否可以最大程度降低SSE的值，不断划分直到达到用户所指定的K值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*-coding:utf8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadDataSet</span><span class="params">(fileName)</span>:</span></span><br><span class="line">    dataMat = []</span><br><span class="line">    fr = open(fileName)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> fr.readlines():</span><br><span class="line">        curLine = line.strip().split(<span class="string">'/t'</span>)</span><br><span class="line">        fltLine = map(float, curLine)</span><br><span class="line">        dataMat.append(fltLine)</span><br><span class="line">    <span class="keyword">return</span> dataMat</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">distEclud</span><span class="params">(vecA, vecB)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> sqrt(sum(power(vecA - vecB), <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">randCent</span><span class="params">(dataSet, k)</span>:</span></span><br><span class="line">    n = shape(dataSet)[<span class="number">1</span>]</span><br><span class="line">    centroids = mat(zeros(k,n))</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">        minJ = min(dataSet[:, j])</span><br><span class="line">        rangeJ = float(max(dataSet[:, j]) - minJ)</span><br><span class="line">        centroids[:, j] = minJ + rangeJ*random.rand(k, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> centroids</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kMeans</span><span class="params">(dataSet, k, distMeas = distEclud, createCent = randCent)</span>:</span></span><br><span class="line">    <span class="comment"># 确定数据集的大小</span></span><br><span class="line">    m = shape(dataSet)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 建立矩阵来存储c(i)和x(i)距离u(c(i))的值</span></span><br><span class="line">    clusterAssment = mat(zeros(m,<span class="number">2</span>))</span><br><span class="line">    <span class="comment">#随机初始化质心</span></span><br><span class="line">    centroids= createCent(dataSet, k)</span><br><span class="line">    <span class="comment"># 设置标志位</span></span><br><span class="line">    clusterChanged = <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">while</span> clusterChanged:</span><br><span class="line">        clusterChanged = <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">            minDist = inf; minIndex = <span class="number">-1</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(k):</span><br><span class="line">                distJI = distMeas(centroids[k, :], dataSet[i, :])</span><br><span class="line">                <span class="keyword">if</span> distJI &lt; minDist :</span><br><span class="line">                    minDist = distJI; minIndex = j</span><br><span class="line">                <span class="keyword">if</span> clusterAssment[i, <span class="number">0</span>] != minIndex:</span><br><span class="line">                    clusterChanged = <span class="keyword">True</span></span><br><span class="line">                clusterAssment[i, :] = minIndex,minDist**<span class="number">2</span></span><br><span class="line">            <span class="keyword">print</span> centroids</span><br><span class="line">        <span class="keyword">for</span> cent <span class="keyword">in</span> range(k):</span><br><span class="line">            ptsInClust = dataSet[nonzero(clusterAssment[:, <span class="number">0</span>].A == cent)[<span class="number">0</span>]]</span><br><span class="line">            centroids[cent, :] = mean(ptsInClust, axis=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> centroids, clusterAssment</span><br></pre></td></tr></table></figure><h2 id="dimensionality-reducion">Dimensionality Reducion</h2><p>why we need to do Dimensionality Reducion? - data compression - visually</p><p>###PCA实例</p><p>现在假设有一组数据如下： <img src="97F9AAF567C76B2E110902B387CB675D.png" alt="Screen Shot 2018-03-07 at 17.41.36.png"></p><p>行代表了样例，列代表特征，这里有10个样例，每个样例两个特征。可以这样认为，有10篇文档，x是10篇文档中“learn”出现的TF-IDF，y是10篇文档中“study”出现的TF-IDF。</p><ol type="1"><li><p>分别求x和y的平均值，然后对于所有的样例，都减去对应的均值。这里x的均值是1.81，y的均值是1.91，那么一个样例减去均值后即为（0.69,0.49），得到 <img src="445B9E9346DC3951CBCC4E00AFF8233F.png" alt="Screen Shot 2018-03-07 at 17.42.04.png"></p></li><li><p>求特征协方差矩阵，如果数据是3维，那么协方差矩阵是： <img src="8B366D6943C32510584BC5CC2688F0A3.png" alt="Screen Shot 2018-03-07 at 17.42.30.png"> 这里只有x和y，求解得 <img src="16A0681193BE719B967C2944C43DAB35.png" alt="Screen Shot 2018-03-07 at 17.42.51.png"></p><p>对角线上分别是x和y的方差，非对角线上是协方差。协方差是衡量两个变量同时变化的变化程度。协方差大于0表示x和y若一个增，另一个也增；小于0表示一个增，一个减。如果ｘ和ｙ是统计独立的，那么二者之间的协方差就是０；但是协方差是０，并不能说明ｘ和ｙ是独立的。协方差绝对值越大，两者对彼此的影响越大，反之越小。协方差是没有单位的量，因此，如果同样的两个变量所采用的量纲发生变化，它们的协方差也会产生树枝上的变化。</p></li><li><p>求协方差的特征值和特征向量，得到： <img src="25BE90ADDD485AA80B3EE7ED0CE6A05F.png" alt="Screen Shot 2018-03-07 at 17.43.19.png"> 上面是两个特征值，下面是对应的特征向量，特征值0.0490833989对应特征向量为，这里的特征向量都归一化为单位向量。</p></li><li><p>将特征值按照从大到小的顺序排序，选择其中最大的k个，然后将其对应的k个特征向量分别作为列向量组成特征向量矩阵。这里特征值只有两个，我们选择其中最大的那个，这里是1.28402771，对应的特征向量是(-0.677873399, -0.735178656)T。</p></li><li><p>第五步，将样本点投影到选取的特征向量上。假设样例数为m，特征数为n，减去均值后的样本矩阵为DataAdjust(m<em>n)，协方差矩阵是n</em>n，选取的k个特征向量组成的矩阵为EigenVectors(n*k)。那么投影后的数据FinalData为</p><p>FinalData(10<em>1) = DataAdjust(10</em>2矩阵) x 特征向量(-0.677873399, -0.735178656)T</p><p>得到的结果是： <img src="6EC9504E29B572035ADE77A253E7AF30.png" alt="Screen Shot 2018-03-07 at 17.45.19.png"></p></li></ol><p>这样，就将原始样例的n维特征变成了k维，这k维就是原始特征在k维上的投影。</p><p>上面的数据可以认为是learn和study特征融合为一个新的特征叫做LS特征，该特征基本上代表了这两个特征。上述过程如下图2描述： <img src="B76585DA48BB4AB940B6E528599E8D6A.png" alt="Screen Shot 2018-03-07 at 17.47.17.png"> 正号表示预处理后的样本点，斜着的两条线就分别是正交的特征向量（由于协方差矩阵是对称的，因此其特征向量正交），最后一步的矩阵乘法就是将原始样本点分别往特征向量对应的轴上做投影。</p><h3 id="pca的理解">pca的理解</h3><figure><img src="06A21B1B72F1F5DDE6AA5AB859B5338A.png" alt="Screen Shot 2018-03-07 at 17.48.06.png"><figcaption>Screen Shot 2018-03-07 at 17.48.06.png</figcaption></figure><p>在第一部分中，我们举了一个学生成绩的例子，里面的数据点是六维的，即每个观测值是6维空间中的一个点。我们希望将6维空间用低维空间表示。</p><p>先假定只有二维，即只有两个变量，它们由横坐标和纵坐标所代表；因此每个观测值都有相应于这两个坐标轴的两个坐标值；如果这些数据形成一个椭圆形状的点阵，那么这个椭圆有一个长轴和一个短轴。在短轴方向上，数据变化很少；在极端的情况，短轴如果退化成一点，那只有在长轴的方向才能够解释这些点的变化了；这样，由二维到一维的降维就自然完成了。</p><p>上图中，u1就是主成分方向，然后在二维空间中取和u1方向正交的方向，就是u2的方向。则n个数据在u1轴的离散程度最大（方差最大），数据在u1上的投影代表了原始数据的绝大部分信息，即使不考虑u2，信息损失也不多。而且，u1、u2不相关。只考虑u1时，二维降为一维。</p><p>椭圆的长短轴相差得越大，降维也越有道理。</p><h3 id="pca-算法的应用">PCA 算法的应用</h3><figure><img src="FBEE1DE8219469657D328A73B990F4B1.png" alt="Screen Shot 2018-03-07 at 17.39.44.png"><figcaption>Screen Shot 2018-03-07 at 17.39.44.png</figcaption></figure><figure><img src="30CEB1BA6281642217A66686AA779309.png" alt="Screen Shot 2018-03-07 at 17.39.40.png"><figcaption>Screen Shot 2018-03-07 at 17.39.40.png</figcaption></figure><h2 id="anomaly-detection">Anomaly detection</h2><h3 id="gaussian-normal-distribution">Gaussian (Normal) distribution</h3><p><img src="89DB33558EA5D8DB9CE9A8F920302AC7.png" alt="Screen Shot 2018-03-08 at 10.44.47.png"> <img src="7F69F46B0710530FAF17D7B072F30FE2.png" alt="Screen Shot 2018-03-08 at 10.44.54.png"></p><h3 id="algorithm">Algorithm</h3><p><img src="326C2D7DB0ABAA31F3B066743DA4E952.png" alt="Screen Shot 2018-03-08 at 10.45.44.png"> <img src="4B3407492A9AD4A2691D065EE8A45B90.png" alt="Screen Shot 2018-03-08 at 10.45.54.png"></p><h3 id="algorithm-evaluation">Algorithm evaluation</h3><figure><img src="19C817E85A9773D8C78C389B093F4018.png" alt="Screen Shot 2018-03-08 at 10.46.44.png"><figcaption>Screen Shot 2018-03-08 at 10.46.44.png</figcaption></figure><h3 id="anomaly-detection-vs.-supervised-learning">Anomaly detection VS. Supervised learning</h3><p><img src="CB0F77E450FF10CF8B792FE18E9E27A8.png" alt="Screen Shot 2018-03-08 at 10.47.57.png"> <img src="DAA73F0D52ACA6D13385285D9B86F4A7.png" alt="Screen Shot 2018-03-08 at 10.48.08.png"></p><h3 id="choosing-what-features-to-use">Choosing what features to use</h3><p>主要思路是将非高斯分布的特征经过变换转换成高斯分布的特征 <span class="math display">\[ eg.   x \rightarrow log(x) \]</span></p><figure><img src="B2F2DD96F9BC84ED6888B219BB0EFD86.png" alt="Screen Shot 2018-03-08 at 10.54.55.png"><figcaption>Screen Shot 2018-03-08 at 10.54.55.png</figcaption></figure><h3 id="error-analysis-for-anomaly-detection">Error analysis for anomaly detection</h3><p>利用误差分析寻找新特征 <img src="9FB8C2DD8395B6420B19480D7218B016.png" alt="Screen Shot 2018-03-08 at 10.56.00.png"> <img src="7EE7A79016CC4E0E21CCC10881209FFB.png" alt="Screen Shot 2018-03-08 at 10.56.23.png"></p><p>##Recommender Systems <img src="B41983012DA9997F008BC750AA151407.png" alt="Screen Shot 2018-03-08 at 15.24.01.png"></p><p>已知电影的特征<span class="math inline">\(x_1,x_2\)</span>，对每一个用户拟合线性回归模型<span class="math inline">\(\theta^TX\)</span>, 此时每个电影是一个样本，优化目标是电影的评分。 <img src="6FC3D54070FBC8962D939985A8E906FD.png" alt="Screen Shot 2018-03-08 at 15.24.54.png"> <img src="F11F7F90C3482A32FF53C62E748945B3.png" alt="Screen Shot 2018-03-08 at 15.28.31.png"> <img src="1476CE936D4E50E4C4EF1BF2AB51B61C.png" alt="Screen Shot 2018-03-08 at 15.28.38.png"></p><p>已知用户对电影类型的喜好 <span class="math inline">\(\theta\)</span>, 对每一个用户，拟合线性回归模型 <span class="math inline">\(\theta^TX\)</span>, 优化目标是用户对电影的评分，因此可以求得X,即电影的特征 <img src="AE870871B8D0F2B6168071767FB6313E.png" alt="Screen Shot 2018-03-08 at 15.30.03.png"> <img src="1C0BABBAA61E385A9D4C7C01935B08AD.png" alt="Screen Shot 2018-03-08 at 15.37.35.png"></p><h3 id="collaborative-filtering-algorithm">Collaborative filtering algorithm</h3><p>根据用户之间的相似度来推荐 <img src="7AAE33EDC45707F48780A5727E04F00A.png" alt="Screen Shot 2018-03-08 at 15.38.45.png"> <img src="F22E68EC45F61BCEF3FD3FAFE27F5FEE.png" alt="Screen Shot 2018-03-08 at 15.38.53.png"> <img src="1DE2721BA2D9BC55B44A678E819FC2DD.png" alt="Screen Shot 2018-03-08 at 15.43.17.png"></p><p>##Large scale machine learning</p><h3 id="stochastic-gradient-descent">Stochastic gradient descent</h3><p>每次只用一个样本来计算梯度 <img src="2DFBA34DED1CA9B1FCA8A121758440ED.png" alt="Screen Shot 2018-03-08 at 17.36.09.png"> <img src="900CF832B967330E295A9E1DFD0F6401.png" alt="Screen Shot 2018-03-08 at 17.36.23.png"> o ### Mini-batch gradient descent 每次利用 n 个样本来计算梯度 <img src="F910850F48DB2C6C0264A7C9F034DD7C.png" alt="Screen Shot 2018-03-08 at 17.36.58.png"></p><h3 id="online-learning">Online learning</h3><p>抛弃固有数据集的概念，每次用新来的样本来更新梯度，然后抛弃这个样本。 <img src="895F1FBF5458B0E13DF2BB46F6923CD3.png" alt="Screen Shot 2018-03-08 at 17.38.35.png"></p>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning of Andrew Ng </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Feasibility of Learning</title>
      <link href="/Feasibility-of-Learning/2019/02/15/"/>
      <url>/Feasibility-of-Learning/2019/02/15/</url>
      
        <content type="html"><![CDATA[<h2 id="feasibility-of-learning">Feasibility of Learning</h2><blockquote><p>我们希望找到无限逼近实际函数f的假设函数g</p></blockquote><p><img src="feasibility01.png"></p><ul><li><p><span class="math inline">\(g(hypothesis) \approx f(real function)\)</span> inside <span class="math inline">\(D\)</span>: sure!</p></li><li><p><span class="math inline">\(g(hypothesis) \approx f(real function)\)</span> outside <span class="math inline">\(D\)</span>: No! (what we want)</p></li></ul><h2 id="hoeffdings-inequality">Hoeffding’s Inequality</h2><p><img src="feasibility02.png"></p><p><span class="math display">\[P(| \nu-\mu| &gt; \epsilon)  \leqslant 2e^{-2\epsilon^{2}N}\]</span></p><ul><li>valid for all N and <span class="math inline">\(\epsilon\)</span></li><li>does not depend on <span class="math inline">\(\mu\)</span>, no need to know <span class="math inline">\(\mu\)</span></li><li>larger sample size N or looser gap <span class="math inline">\(\epsilon\)</span> =&gt; higher probability for <span class="math inline">\(\nu \approx \mu\)</span></li></ul><h2 id="connection-to-learning">Connection to Learning</h2><ul><li>if large N, can probably infer unknow <span class="math inline">\(\| h(x) \neq f(x) \|\)</span> by know <span class="math inline">\(\| h(x_{n} \neq y_n)\|\)</span></li><li><span class="math inline">\(E_{in}(h)\)</span>: 在已知的样本里，假设函数与实际函数不相等的概率。<span class="math inline">\(E_{out}(h)\)</span>: 在所有样本里，上述二者不相等的概率。</li><li><span class="math display">\[[|E_{in}(h) - E_{out}(h)| &gt; \epsilon] \leqslant 2e^{-2\epsilon^{2}N}\]</span></li><li><span class="math inline">\(E_{in}(h)\)</span> small is a good choice, but <span class="math inline">\(E_{in}(h)\)</span> is not always small.</li></ul><h2 id="multiple-h">multiple h</h2><p>掷硬币，求出现反面的概率。</p><h3 id="bad-sample">bad sample</h3><ul><li>掷骰子150次，每次掷5下，有超过99%的概率会出现连续5次都是正面。</li><li>这就是一个bad sample，因为其使得<span class="math inline">\(E_{in}(h)\)</span> far away <span class="math inline">\(E_{out}(h)\)</span><ul><li><span class="math inline">\(E_{in}(h)\)</span> = 0</li><li><span class="math inline">\(E_{out}(h)\)</span> = <span class="math inline">\(1/2\)</span></li></ul></li></ul><p>对于M个假设函数，出现 bad sample 的概率: <img src="feasibility03.png" alt="feasibility03"></p><ul><li>所有假设函数都是安全的</li><li>最优P为lowest <span class="math inline">\(E_{in}(h_{m})\)</span></li></ul>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning Foundation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Types of Learning</title>
      <link href="/Types-of-Learning/2019/02/15/"/>
      <url>/Types-of-Learning/2019/02/15/</url>
      
        <content type="html"><![CDATA[<h2 id="learning-with-different-output-space-gamma">Learning with Different Output Space <span class="math inline">\(\gamma\)</span></h2><h3 id="binary-classification">Binary classification</h3><ul><li><p>Y = {−1, +1}</p></li><li><figure><img src="binary.png" alt="binary classification"><figcaption>binary classification</figcaption></figure></li></ul><h3 id="multiclass-classification">Multiclass Classification</h3><ul><li>classify US coins (1c, 5c, 10c, 25c) by (size, mass)</li><li><span class="math inline">\(\gamma = {1c,5c,10c,25c}\)</span>,or <span class="math inline">\(\gamma = {1,2,··· ,K}\)</span> (abstractly)</li><li>binary classification: special case with K =2</li><li><img src="multiclass.png" title="fig:" alt="multiclass.png"></li></ul><h3 id="regression">Regression</h3><ul><li><span class="math inline">\(\gamma = \mathbb{R}\)</span> or <span class="math inline">\(\gamma = [lower, upper] \subset \mathbb{R}\)</span> (bounded regression)</li></ul><h3 id="structured-learning-sequence-tagging-problem">Structured Learning: Sequence Tagging Problem</h3><ul><li>a fancy but complicated learning problem</li><li>sentence -&gt; structure (class of each word)</li><li><span class="math inline">\(\gamma = \{PVN,PVP,NVN,PV,···\}\)</span>, not including VVVVV</li><li>huge multiclass classification problem (<span class="math inline">\(structure \equiv hyperclass\)</span>) without <strong>explicit</strong> class definition</li></ul><h2 id="learning-with-different-data-label-y_n">Learning with Different Data Label <span class="math inline">\(y_n\)</span></h2><h3 id="supervised-learning">Supervised learning</h3><ul><li>every <span class="math inline">\(x_n\)</span> comes with corresponding <span class="math inline">\(y_n\)</span></li></ul><h3 id="unsupervised-learning">Unsupervised learning</h3><ul><li>clustering<ul><li>articles -&gt; topics</li><li>consumer profiles -&gt; consumer groups</li></ul></li><li>density estimation: {xn} -&gt; density(x)<ul><li>i.e. traffic reports with location -&gt; dangerous areas</li></ul></li><li>outlier detection: {xn} -&gt; unusual(x)<ul><li>i.e. Internet logs -&gt; intrusion alert</li></ul></li></ul><h3 id="semi-supervised-learning">Semi-supervised learning</h3><ul><li>leverage unlabeled data to avoid <strong>expensive</strong> labeling</li><li><img src="semi.png"></li></ul><h3 id="reinforcement-learning">Reinforcement Learning</h3><ul><li>Teach Your Dog: Say <strong>Sit Down</strong><ul><li>cannot easily show the dog that <span class="math inline">\(y_n\)</span> = sit when <span class="math inline">\(x_n\)</span> = sit down</li><li>but can <strong>punish</strong> to say <span class="math inline">\(\hat{y_n}\)</span> = pee is wrong</li><li>but can <font color="red">reward</font> to say <span class="math inline">\(\hat{y_n}\)</span> = sit is good</li></ul></li><li>learn with <font color="red">partial/implicit</font> information (often sequentially)</li></ul><h2 id="learning-with-different-protocol-f-rightarrow-x_ny_n">Learning with different Protocol <span class="math inline">\(f \rightarrow (x_n,y_n)\)</span></h2><h3 id="batch-learning">Batch Learning</h3><ul><li>batch supervised multiclass classification: learn from all known data</li></ul><h3 id="online-learning">Online Learning:</h3><ul><li>hypothesis <strong>improves</strong> through receiving data instances <font color="red">sequentially</font></li></ul><h3 id="active-learning-learning-by-asking">Active Learning: Learning by ‘Asking’</h3><ul><li>improve hypothesis with fewer labels (hopefully) by asking questions <font color="red">strategically</font></li></ul><h2 id="learning-with-different-input-space-chi">Learning with different Input Space <span class="math inline">\(\chi\)</span></h2><ul><li><font color="red">concrete features</font>: each dimension of <span class="math inline">\(\chi \in \mathbb{R}\)</span> represents <strong>sophisticated physical meaning</strong></li><li><font color="red">Raw Features</font><ul><li>simple physical meaning; thus more difficult for ML than concrete features</li><li>often need human or machines to convert to concrete ones</li></ul></li><li><font color="red">Abstract Features</font>: again need <strong>feature conversion/extraction/construction</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning Foundation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Learning to answer Yes or No</title>
      <link href="/Learning-to-answer-Yes-or-No/2019/02/15/"/>
      <url>/Learning-to-answer-Yes-or-No/2019/02/15/</url>
      
        <content type="html"><![CDATA[<h2 id="what-hypothesis-set-can-we-use">What hypothesis set can we use?</h2><figure><img src="question.png" alt="question.png"><figcaption>question.png</figcaption></figure><h2 id="a-simple-hypothesis-set-the-perceptron">A Simple Hypothesis Set: the "Perceptron"</h2><ul><li>Perceptron in <span class="math inline">\(\mathbb{R}^2\)</span></li></ul><p><span class="math display">\[h(x) = sign(w_0 + w_1x_1 + w_2x_2)\]</span> <img src="perceptron.png" alt="perceptron"></p><ul><li>features x: points on the plane (or points in <span class="math inline">\(\mathbb{R}^d\)</span> )</li><li>labels y: (+1), × (-1)</li><li>hypothesis h: lines (or hyperplanes in <span class="math inline">\(\mathbb{R}^d\)</span> ),positive on one side of a line, negative on the other side</li><li>different line classifies simples differently</li></ul><blockquote class="blockquote-center">perceptrons &lt;=&gt; linear (binary) classifiers</blockquote><h2 id="select-g-from-mathscrh">Select g from <span class="math inline">\(\mathscr{H}\)</span></h2><ul><li>want: <span class="math inline">\(g \approx f\)</span> (hard when f unknown)</li><li>almost necessary: <span class="math inline">\(g \approx f\)</span> on D, ideally <span class="math inline">\(g(x_n) = f(x_n) = y_n\)</span></li><li>difficult: H is of infinite size</li><li>idea: start from some <span class="math inline">\(g_0\)</span>, and <font color="red">correct</font> its mistakes on <span class="math inline">\(D\)</span></li></ul><h2 id="perceptron-learning-algorithm">Perceptron Learning Algorithm</h2><p><img src="algo.png" alt="Perceptron Learning Algorithm"> <img src="PLA01.png" alt="PLA01.png"> <img src="PLA02.png" alt="PLA02.png"></p><ul><li>if PLA halts (i.e. no more mistakes), (necessary condition) <span class="math inline">\(D\)</span> allows some w to make no mistake</li><li>call such <span class="math inline">\(D\)</span> linear separable<ul><li><img src="seperate.png"></li></ul></li><li>as long as linear separable and correct by mistake<ul><li>inner product of <span class="math inline">\(w_f\)</span> and <span class="math inline">\(w_t\)</span> grows fast; length of wt grows slowly</li><li>PLA ‘lines’ are more and more aligned with <span class="math inline">\(w_f \rightarrow halts\)</span></li></ul></li></ul><h2 id="line-with-noise-tolerance">Line with Noise Tolerance</h2><p><span class="math inline">\(D\)</span> is not linear separable?</p><figure><img src="np.png" alt="not linear separable"><figcaption>not linear separable</figcaption></figure><h2 id="pocket-algorithm">Pocket Algorithm</h2><p><strong>Find the best weights in pocket until enough iterations</strong></p><figure><img src="pocket.png" alt="pocket algorithm"><figcaption>pocket algorithm</figcaption></figure><h3 id="question">Question</h3><blockquote><p>Since we do not know whether D is linear separable in advance, we may decide to just go with pocket instead of PLA. If D is actually linear separable, what’s the difference between the two?<br>1 pocket on D is slower than PLA<br>2 pocket on D is faster than PLA<br>3 pocket on D returns a better g in approximating f than PLA<br>4 pocket on D returns a worse g in approximating f than PLA</p></blockquote><blockquote><p>answer: Because pocket need to check whether <span class="math inline">\(w_{t+1}\)</span> is better than <span class="math inline">\(\hat{w}\)</span> in each iteration, it is slower than PLA. On linear separable D, <span class="math inline">\(w_{POCKET}\)</span> is the same as <span class="math inline">\(w_{PLA}\)</span>, both making no mistakes.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning Foundation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Learning Problems</title>
      <link href="/The%20Learning%20Problems/2019/02/14/"/>
      <url>/The%20Learning%20Problems/2019/02/14/</url>
      
        <content type="html"><![CDATA[<h3 id="the-learning-problems">The Learning Problems</h3><ul><li>When Can Machines Learn? (illustrative + technical)</li><li>Why Can Machines Learn? (theoretical + illustrative)</li><li>How Can Machines Learn? (technical + practical)</li><li>How Can Machines Learn Better? (practical + theoretical)</li></ul><h3 id="when-can-machines-learn">When Can Machines Learn?</h3><ol type="1"><li>Some definitions</li></ol><p><strong>Learning</strong>: acquiring skill with experience accumulated from <strong>observations</strong></p><p><strong>Machine learning</strong>: acquiring skill with experience accumulated/computed from data</p><blockquote><p>data -----&gt; ML ------&gt; sklill</p></blockquote><p><strong>Skill</strong>: improve some <strong>performance measure</strong> (e.g. prediction accuracy)</p><blockquote><p>data -----&gt; ML ------&gt; improved performance measure</p></blockquote><h3 id="the-machine-learning-route">The Machine Learning Route</h3><p>ML: an <font color="red">alternative route</font> to build complicated systems</p><blockquote><p>Give a computer a fish, you feed it for a day; teach it how to fish, you feed it for a lifetime</p></blockquote><h3 id="key-essence-of-machine-learning">Key Essence of Machine Learning</h3><p><strong>Improving some performance measure with experience computed from data</strong></p><ul><li>exists some <font color="red">underlying pattern</font> to be learned</li><li>but no programmable (easy) definition</li><li>omehow there is data about the pattern</li></ul><h3 id="formalize-the-learning-problem">Formalize the Learning Problem</h3><ul><li>inputs: <span class="math inline">\(x \in \chi\)</span></li><li><p>outputs:<span class="math inline">\(y\in \gamma\)</span></p></li><li><p>unknown pattern to be learned &lt;=&gt; target function</p></li></ul><p><span class="math display">\[f: \chi \rightarrow \gamma\]</span></p><ul><li><p>data &lt;=&gt; training examples <span class="math display">\[D = \{(x_1,y_1),(x_2,y_2),......(x_N,y_N)\}\]</span></p></li><li><p>hypothesis &lt;=&gt; skill with hopefully good performance</p></li></ul><p><span class="math display">\[g: \chi \rightarrow \gamma\]</span></p><h3 id="learning-flow">Learning Flow</h3><figure><img src="Learning%20Model.png" alt="Learning Model.png"><figcaption>Learning Model.png</figcaption></figure><h3 id="learning-model">Learning Model</h3><figure><img src="Learning%20Flow.png" alt="Learning Flow.png"><figcaption>Learning Flow.png</figcaption></figure><h3 id="practical-definition-of-machine-learning">Practical Definition of Machine Learning</h3><blockquote class="blockquote-center">Machine Learning: use data to compute <font color="red">hypothesis g</font> that approximates <font color="red">target f</font></blockquote><h3 id="relationships-between-machine-learnig-data-mining-artifical-intelligence-and-statics">Relationships between Machine Learnig, Data Mining, Artifical Intelligence and Statics</h3><ul><li>Machine Learning</li></ul><blockquote><p>use data to compute hypothesis g that approximates target f</p></blockquote><ul><li>Data Mining</li></ul><blockquote><p>use (huge) data to find property that is interesting</p></blockquote><ul><li>Artifical Intelligence</li></ul><blockquote><p>compute something that shows intelligent behavior</p></blockquote><ul><li>ML can realize AI, among other routes</li><li><p><span class="math inline">\(g \approx f\)</span> is something that shows intelligent behavior</p></li><li><p>Statics</p></li></ul><blockquote><p>use data to make inference about an unknown process</p></blockquote><ul><li>statistics is a useful tool for ML</li></ul>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning Foundation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Introduction to Cloud Computing</title>
      <link href="/Introduction-to-Cloud-Computing/2019/02/14/"/>
      <url>/Introduction-to-Cloud-Computing/2019/02/14/</url>
      
        <content type="html"><![CDATA[<h2 id="overview">Overview</h2><ul><li>Why this course is about distributed system comcepts in cloud?<ul><li>clouds are distributed system</li></ul></li><li>Cloud examples<ul><li>MapReduce and Hadoops</li></ul></li></ul><h2 id="introduction">Introduction</h2><ul><li>Customers save money and time</li></ul><h3 id="two-categories-of-cloud">Two categories of cloud</h3><ol type="1"><li>public<ul><li>provide service to any paying customer</li></ul></li><li>private<ul><li>accessbile only to company employees</li></ul></li></ol><h2 id="what-is-a-cloud">What is a cloud?</h2><ol type="1"><li><p>Informal definition &gt; lots of storage + compute circle nearby</p></li><li>Components<ol type="1"><li>a single-site cloud<ul><li>Compute nodes (grouped into racks) (servers)</li><li>Switches, connecting the racks</li><li>A network topology, e.g. hierarchical</li><li>Storage(backend) nodes, connecting to the network</li><li>Front-end for submiting jobs and receiveing client requests</li><li>Software services</li></ul></li><li>a geographically distributed cloud<ul><li>Mutiple such sites</li><li>Each site perhaps with different structures and services</li></ul></li></ol></li></ol><p><img src="Introduction-to-Clouds01.png"></p><h3 id="four-major-characteristics">Four major characteristics</h3><p>Distinguish today's clouds from previous generations of distributed computing systems and problems</p><ol type="1"><li><strong>Massive scale</strong> Massive-scale essentially means that data centers are very large. They contain tens of thousands, sometimes hundreds of thousands of servers and you could run your computation across as many servers as you want and as many servers as your application will scale</li><li><strong>On-demand access</strong> Pay-as-you-go, no upfront commitment. Anyone can access it<ul><li>HaaS: Hardware as a Service</li><li>IaaS: Infrastructure as a Service(Ex: Amazon Web Services (AWS: EC2 and S3))</li><li>PaaS: Platform as a Service(You get access to flexible computing and storage infrastructure, coupled with a software platform (often tightly), Ex: Google’s AppEngine (Python, Java, Go))</li><li>SaaS: Software as a Service(You get access to software services, when you need them. Often said to subsume SOA (Service Oriented Architectures), Ex: Google docs, MS Office on demand)</li></ul></li><li><strong>Data-intensive Nature</strong><ul><li>Typically store data at datacenters</li><li>Use compute nodes nearby</li><li>Compute nodes run computation services</li><li>In data-intensive computing, <strong>the focus shifts from computation to the data</strong>: CPU utilization no longer the most important resource metric, instead I/O is (disk and/or network)</li></ul></li><li><strong>New Cloud Programming Paradigms</strong><ul><li>MapReduce/Hadoop, NoSQL/Cassandra/MongoDB and many others.</li><li>Easy to write and run highly parallel programs in new cloud programming paradigms:</li></ul></li></ol><h2 id="a-cloud-is-a-distribyted-system">A cloud is a distribyted system</h2><ol type="1"><li>A cloud consists of<ul><li>Hundreds to thousands of machines in a datacenter (server side)</li><li>Thousands to millions of machines accessing these services (client side)</li></ul></li><li>Servers communicate amongst one another<ul><li>Distributed System</li><li>Essentially a cluster!</li></ul></li><li>Clients communicate with servers<ul><li>Also a distributed system!</li></ul></li><li>Clients also communicate with each other<ul><li>Also a distributed system!</li><li><img src="Introduction-to-Clouds02.png"></li></ul></li><li><strong>Four Features of Clouds = All Distributed Systems Features</strong></li><li><strong>Cloud = A Fancy Word for a Distributed System</strong></li></ol><h2 id="economics-of-clouds">Economics of clouds</h2><p><img src="Introduction-to-Clouds03.png"></p><h2 id="what-is-a-distributed-system">What is a distributed system</h2><ul><li>A distributed system is a collection of independent computers that appear to the users of the system as a single computer.[Andrew Tanenbaum]</li><li>A distributed system is several computers doing something together. Thus, a distributed system has three primary characteristics: multiple computers, interconnections, and shared state. [Michael Schroeder]</li><li>A distributed system is a collection of entities, each of which is <strong>autonomous</strong>, <strong>programmable</strong>, <strong>asynchronous</strong> and failure- prone, and which communicate through an unreliable communication medium.<ul><li><strong>programmable</strong>,Eliminates “Humans Interacting with each other”</li><li><strong>asynchronous</strong>, Distinguishes distributed systems from parallel systems (e.g., multiprocessor systems)</li></ul></li></ul><h3 id="our-interest-in-distributed-systems-involves">Our interest in distributed systems involves</h3><ul><li>algorithmics</li><li>design and implementation</li><li>maintenance,</li><li>study</li></ul><h2 id="mapreduce-paradigm">MapReduce paradigm</h2><ul><li>(map square (1,2,3,4))<ul><li>output: (1,4,9,16) process each record sequentially and independently</li></ul></li><li>(reduce + (1,4,9,16))<ul><li>(+16 (+9 (+4)))</li><li>output: 30 process set of all records in batches</li></ul></li></ul><h3 id="map">Map</h3><ul><li>Map task processes each record <strong>sequentially and independently</strong></li><li><strong>Parallelly</strong> process different map tasks <img src="Introduction-to-Clouds04.png"></li></ul><h3 id="reduce">Reduce</h3><ul><li>Reduce process set of all records in batches</li><li>Parallelly process by partitioning records <img src="Introduction-to-Clouds05.png"></li></ul><h2 id="mapreduce-scheduling">MapReduce Scheduling</h2><p>1.Externally, for the user: 1. write map program, write reduce program 2. submit job; wait for result 3. need to know nothing about parallel programming</p><ol start="2" type="1"><li>Internally, for the paradigm and scheduler<ol type="1"><li>Parallelize Map<ul><li>each Map task is independent</li><li>all Map output records with teh same key should assign to the same Reducer</li></ul></li><li>Transfer data from Map to Reduce</li><li>Parallelize Reduce<ul><li>each Reduce task is independent</li><li>use partition function</li></ul></li><li>Implement Storage for Map input, Map output, Reduce input, Reduce output<ul><li>Map input: DFS</li><li>Map output: local disk</li><li>Reduce input: remote disk</li><li>Reduce output: DFS</li></ul></li></ol></li></ol><p><img src="Introduction-to-Clouds06.png"></p><h3 id="the-yarn-scheduler">The YARN SCHEDULER</h3><ul><li>Used in Hadoop 2.x +</li><li>YARN = Yet Another Resource Negotiator</li><li>Treats each server as a collection of containers<ul><li>Container = some CPU + some memory</li></ul></li><li>Has 3 main components<ul><li>Global Resource Manager (RM)<ul><li>scheduling</li></ul></li><li>Per-server Node Manager (NM)<ul><li>Daemon and server-specific functions</li></ul></li><li>Per-application (job) Application Master (AM)<ul><li>Container negotiation with RM and NMs</li><li>Detecting task failures of that job</li></ul></li></ul></li></ul><p><img src="Introduction-to-Clouds07.png"></p><h3 id="mapreduce-example">MapReduce Example</h3><p><img src="Introduction-to-Clouds08.png"></p><h2 id="fault-tolerance">Fault tolerance</h2><ul><li>Server failure<ul><li>NM,AM heartbeats to RM</li><li>NM keep track of each task running at its server</li></ul></li><li>RM failure<ul><li>use old checkpoints and bring up secondary RM</li></ul></li></ul><h3 id="stragglers">stragglers</h3><ul><li>the slowest machine slows the entire job</li><li><strong>speculative exection</strong>: backup execction of straggler task</li></ul><h3 id="locality">Locality</h3><p><img src="Introduction-to-Clouds09.png"></p><p><strong>Reference from some slides from Coursera course <a href="https://www.coursera.org/learn/cloud-computing" target="_blank" rel="noopener">Cloud Computing</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> Cloud Computing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cloud Computing of UIUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gossip,Member,Grid</title>
      <link href="/Gossip-Member-Grid/2019/02/14/"/>
      <url>/Gossip-Member-Grid/2019/02/14/</url>
      
        <content type="html"><![CDATA[<h2 id="gossip">Gossip</h2><h3 id="tree-based-multicast-protocol">Tree-Based Multicast Protocol</h3><ul><li>Build a spanning tree among the processes of the multicast group</li><li>Use spanning tree to disseminate multicasts</li><li>Use either acknowledgments (ACKs) or negative acknowledgements (NAKs) to repair multicasts not received</li><li><strong>SRM</strong> (Scalable Reliable Multicast)<ul><li>Uses NAKs</li><li>But adds random delays, and uses exponential backoff to avoid NAK storms</li></ul></li><li><strong>RMTP</strong> (Reliable Multicast Transport Protocol)<ul><li>Uses ACKs</li><li>But ACKs only sent to designated receivers, which then re-transmit missing multicasts</li></ul></li><li>These protocols still cause an O(N) ACK/NAK overhead</li><li><img src="gossip_member_grid01.png" title="fig:" alt="gossip_member_grid01.png"></li></ul><h3 id="epidemic-multicast">Epidemic Multicast</h3><p><img src="gossip_member_grid02.png"></p><ul><li><strong>Push</strong> gossip<ul><li>Once you have a multicast message, you start gossiping about it</li><li>Multiple messages? Gossip a random subset of them, or recently-received ones, or higher priority ones</li></ul></li><li><strong>Pull</strong> gossip<ul><li>Periodically poll a few randomly selected processes for new multicast messages that you haven’t received</li><li>Get those messages</li></ul></li><li><strong>Hybrid variant</strong>: Push-Pull<ul><li>As the name suggests</li></ul></li></ul><h3 id="topology-aware-gossip">Topology-Aware Gossip</h3><p><img src="gossip_member_grid03.png"></p><ul><li>Network topology is hierachical</li><li>Random gossip target selection =&gt; core routers face O(N) load</li><li>In subnet i, which contains <span class="math inline">\(n_i\)</span> nodes, pick gossip target in your subnet with probability <span class="math inline">\(\frac{1}{n_i}\)</span></li><li>Router <span class="math inline">\(load=O(1)\)</span></li><li>Dissemination <span class="math inline">\(time=O(log(N))\)</span></li></ul><h2 id="member">Member</h2><p><img src="gossip_member_grid04.png"></p><p>two sub-protocals</p><ul><li>Failure Detection</li><li>Dissemination</li></ul><h3 id="failure-detection">Failure Detection</h3><p>some process find out the failure process quickly</p><ul><li>Desirable propertities<ul><li>Completeness (most important)</li><li>Accuracy</li><li>Speed</li><li>Scale</li></ul></li></ul><h4 id="gossip-style-failure-detection">Gossip Style Failure Detection</h4><p><img src="gossip_member_grid05.png"> <img src="gossip_member_grid06.png"></p><p><strong>Could use mylti-level Gossip</strong></p><h4 id="swim-failure-detection">Swim Failure Detection</h4><ul><li>Two choice for the <span class="math inline">\(P_j\)</span>(failure process)</li><li>Directed ping to <span class="math inline">\(P_j\)</span> and indirected ping to <span class="math inline">\(P_j\)</span> (Randomly select another process and then send ping to <span class="math inline">\(P_j\)</span>)</li><li>Constant time =&gt; <span class="math inline">\(O(1)\)</span></li><li><img src="gossip_member_grid07.png"></li></ul><h3 id="dissemination">Dissemination</h3><ul><li>Multicast Dissemination(Hardware/IP)<ul><li>unreliable</li></ul></li><li>Point-to-Point<ul><li>expensive</li></ul></li><li>Infection style Dissemination</li></ul><h3 id="suspicion-mechanism">Suspicion Mechanism</h3><p>Suspect a process before <strong>declaring</strong> it as failed in the group</p><p><img src="gossip_member_grid08.png"></p><h2 id="grid">Grid</h2><figure><img src="gossip_member_grid09.png" alt="gossip_member_grid09.png"><figcaption>gossip_member_grid09.png</figcaption></figure><p>two level scheduling infrastructure</p><ul><li>Inter-site protol</li><li>Globus</li><li>No single entity controls the entire infrastructure(federate)</li></ul><p><strong>Reference from some slides from Coursera course <a href="https://www.coursera.org/learn/cloud-computing" target="_blank" rel="noopener">Cloud Computing</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> Cloud Computing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cloud Computing of UIUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2P System</title>
      <link href="/P2P-System/2019/02/14/"/>
      <url>/P2P-System/2019/02/14/</url>
      
        <content type="html"><![CDATA[<h2 id="why-study-peer-to-peer-systems">Why Study Peer-to-Peer Systems?</h2><ul><li>First distributed systems that seriously focused on <strong>scalability</strong> with respect to number of nodes</li><li>P2P techniques abound in cloud computing systems</li></ul><h2 id="napster">Napster</h2><p>(创始人Sean Parker, 看Social Network时有讲到，哈哈)</p><h3 id="napster-structure">Napster Structure</h3><figure><img src="p2p01.png" alt="p2p01.png"><figcaption>p2p01.png</figcaption></figure><h3 id="client">Client</h3><ul><li>Connect to a Napster server<ul><li>Upload list of music files that you want to share</li><li>Server maintains list of &lt;filename, ip_address, port_num&gt; tuples.</li><li><strong>Server stores no files</strong>.</li></ul></li><li>Search<ul><li>Send server keywords to search with</li><li>Server searches its list with the keywords</li><li>Server returns a list of hosts – &lt;ip_address, portnum&gt; tuples – to client</li><li>Client pings each host in the list to find transfer rates</li><li>Client fetches file from best host</li></ul></li><li>All communication uses TCP (Transmission Control Protocol)<ul><li>Reliable and ordered networking protocol</li><li><img src="p2p01.png" title="fig:" alt="p2p01.png"></li></ul></li></ul><h3 id="joining-a-p2p-system">Joining a P2P system</h3><ul><li>Send an http request to well-known url for that P2P service - http://www.myp2pservice.com</li><li>Message routed (after lookup in DNS) to introducer, a well known server that keeps track of some recently joined nodes in p2p system</li><li>Introducer initializes new peers’ neighbor table</li></ul><h2 id="gnutella">Gnutella</h2><ul><li>Eliminate the servers</li><li>Client machines search and retrieve amongst themselves</li><li>Clients act as servers too, called <strong>servents</strong></li><li>Gnutella protocol has 5 main message types<ul><li>Query (search)</li><li>QueryHit (response to query)</li><li>Ping (to probe network for other peers)</li><li>Pong (reply to ping, contains address of another peer)</li><li>Push (used to initiate file transfer)</li></ul></li></ul><h3 id="gnutella-structure">Gnutella Structure</h3><p><img src="p2p03.png" alt="p2p03.png"> - Connected in an <strong>overlay graph</strong></p><h3 id="search">Search</h3><p><img src="p2p04.png" alt="p2p04.png"> <img src="p2p05.png" alt="p2p05.png"> <img src="p2p06.png" alt="p2p06.png"></p><h3 id="avoiding-excessive-traffic">Avoiding excessive traffic</h3><ul><li>To avoid duplicate transmissions, each peer maintains a list of recently received messages</li><li>Query forwarded to all neighbors except peer from which received</li><li>Each Query (identified by DescriptorID) forwarded only once</li><li>QueryHit routed back only to peer from which Query received with same DescriptorID</li><li>Duplicates with same DescriptorID and Payload descriptor (msg type) are dropped</li><li>QueryHit with DescriptorID for which Query not seen is dropped</li></ul><h3 id="after-receiving-queryhit-messages">After receiving QueryHit messages</h3><ul><li><p>Requestor chooses “best” QueryHit responder <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /get/<span class="tag">&lt;<span class="name">File</span> <span class="attr">Index</span>&gt;</span>/<span class="tag">&lt;<span class="name">File</span> <span class="attr">Name</span>&gt;</span>/HTTP/1.0\r\n</span><br><span class="line">Connection: Keep-Alive\r\n </span><br><span class="line">Range: bytes=0-\r\n </span><br><span class="line">User-Agent: Gnutella\r\n \r\n</span><br></pre></td></tr></table></figure></p></li><li><p>Responder then replies with file packets after this message: <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTTP 200 OK\r\n</span><br><span class="line">Server: Gnutella\r\n </span><br><span class="line">Content-type:application/binary\r\n </span><br><span class="line">Content-length: 1024 \r\n</span><br><span class="line">\r\n</span><br></pre></td></tr></table></figure></p></li></ul><h3 id="dealing-with-firewalls">Dealing with Firewalls</h3><ul><li>Requestor sends Push to responder asking for file transfer</li><li><img src="p2p07.png" alt="p2p07.png"></li><li>Responder establishes a TCP connection at ip_address, port specified.</li><li>Requestor then sends GET to responder (as before) and file is transferred as explained earlier</li></ul><h3 id="ping-pong">Ping-Pong</h3><ul><li>Peers initiate Ping’s periodically</li><li>Ping’s flooded out like Query’s, Pong’s routed along reverse path like QueryHit’s</li><li>Pong replies used to update set of neighboring peers<ul><li>To keep neighbor lists fresh in spite of peers joining, leaving and failing</li></ul></li></ul><h3 id="gnutella-summary">Gnutella Summary</h3><ul><li>No servers</li><li>Peers/servents maintain “neighbors,” this forms an overlay graph</li><li>Peers store their own files</li><li>Queries flooded out, ttl restricted</li><li>QueryHit (replies) reverse path routed</li><li>Supports file transfer through firewalls</li><li>Periodic ping-pong to continuously refresh neighbor lists</li></ul><h2 id="fasttrack">FastTrack</h2><ul><li>Hybrid between Gnutella and Napster</li></ul><h3 id="fasttrack-structure">FastTrack Structure</h3><p><img src="p2p08.png" alt="p2p08.png"> - A supernode stores a directory listing a subset of nearby (&lt;filename,peer pointer&gt;), similar to Napster servers - Supernode membership changes over time - Any peer can become (and stay) a supernode, provided it has earned enough reputation - A peer searches by contacting a nearby supernode</p><h2 id="bittorrent">BitTorrent</h2><h3 id="bittorrent-structure">BitTorrent Structure</h3><p><img src="p2p09.png" alt="p2p09.png"> - File split into blocks (32 KB – 256 KB) - Download Local Rarest First block policy: prefer early download of blocks that are least replicated among neighbors - Tit for tat bandwidth usage: Provide blocks to neighbors that provided it the best download rates - Choking: Limit number of neighbors to which concurrent uploads &lt;= a number (5), i.e., the “best” neighbors</p><h3 id="bittorrent-原理简述">BitTorrent 原理简述</h3><p><strong>Reference from</strong> <a href="https://jaminzhang.github.io/p2p/BitTorrent-Principle-Introduction/" target="_blank" rel="noopener">https://jaminzhang.github.io/p2p/BitTorrent-Principle-Introduction/</a></p><p>与传统客户端/服务器网络通信模式不同，对等方到对等方（P2P）通信模式在近年来越来越流行起来。 在 P2P 模式中，服务和资源分布化，资源不集中存储在某些设备上，而是分散存储在运行 P2P 程序的设备上， 每一个对等方都可以为其他对等方提供服务。 BitTorrent（中文全称比特流，简称 BT）是一个网络文件传输协议，是能够实现点对点文件分享的技术。 在大多数人感觉中与 P2P 成了对等的一组概念，而它也将 P2P 技术发展到了近乎完美的地步。 研究 BitTorrent 协议对我们深入把握 P2P 技术，了解 Interent 网络发展的未来走向有很大的意义。</p><p>BitTorrent 协议是架构于 TCP/IP 协议之上的一个 P2P 文件传输协议，处于 TCP/IP 结构的应用层。 BitTorrent 协议本身也包含了很多具体的内容协议和扩展协议，并在不断扩充中。 如果有多个下载者并发的下载同一个文件，则每个下载者也同时为其它下载者上传文件， 这样，文件源可以支持大量的用户进行下载，而只带来适当的负载的增长。</p><p>BitTorrent 协议把提供下载的文件虚拟分成大小相等的块，块大小必须为 2k 的整数次方 （由于是虚拟分块，硬盘上并不产生各个块文件），并把每个块的索引信息和 Hash 验证码 写入 .torrent 文件（即种子文件，也简称为“种子”）中，作为被下载文件的“索引”。 下载者要下载文件内容，需要先得到相应的 .torrent 文件，然后使用 BT 客户端软件进行下载。</p><p>下载时，BT 客户端首先解析 .torrent 文件得到 Tracker 地址，然后连接 Tracker 服务器。 Tracker 服务器回应下载者的请求，提供下载者其他下载者（包括发布者）的 IP。 或者，BT客户端也可解析 .torrent 文件得到 nodes 路由表，然后连接路由表中的有效节点， 由网络节点提供下载者其他下载者的 IP。</p><p>下载者再连接其他下载者，根据 .torrent 文件，两者分别对方告知自己已经有的块， 然后交换对方没有的数据。此时不需要其他服务器参或者其他网络节点的参与， 分散了单个线路上的数据流量，因此减轻了服务器负担。 下载者每得到一个块，需要算出下载块的 Hash 验证码与 .torrent 文件中的对比， 如果一样则说明块正确，不一样则需要重新下载这个块。</p><p>因此，下载的人越多，提供的带宽也越多，种子也会越来越多，下载速度就越快。</p><p>从 BT 客户端角度考虑，下载原理分为以下几步：</p><p>一．根据 BitTorrent 协议，文件发布者会根据要发布的文件生成提供一个 .torrent 文件。 客户端可从 Web 服务器上下载种子文件，并从中得到 Tracker 服务器 URL 和 DHT 网络 nodes 等信息。</p><p>二．根据 Tracker URL 与 Tracker 服务器建立连接，并从服务器上得到 Peers 信息。 或者根据 nodes 与 DHT 网络中节点通信，并从节点上得到 Peers 信息。</p><p>三．根据 Peers 信息与一个 Peer 建立连接，依据 Peer wire 协议完成握手， 并从 Peer 端下载数据文件。同时监听 Peer 的连接，并给 Peer 上传数据文件。</p><p>依据得到 Peers 信息的途径的不同，可分为使用 Tracker 服务器和使用 Trackerless DHT 网络两种方式。</p><p>基于 HTTP 的 Tracker 协议， 基于 UDP 的 Trackerless 协议， 基于 TCP 的 Peer wire 协议。</p><h2 id="chord">Chord</h2><p>Uses Consistent Hashing on node’s (peer’s) address - SHA-1(ip_address,port) -&gt; 160 bit string - Truncated to m bits - Called peer id (number between 0 and 2m −1 ) - Not unique but id conflicts very unlikely - Can then map peers to one of 2m logical points on a circle</p><h3 id="comparative-performance">Comparative Performance</h3><figure><img src="p2p10.png" alt="p2p10.png"><figcaption>p2p10.png</figcaption></figure><h3 id="chord-structure">Chord Structure</h3><p>Tow pointers</p><h4 id="successors">successors</h4><p><img src="p2p11.png" alt="p2p11.png"> #### finger tables <img src="p2p12.png" alt="p2p12.png"></p><h3 id="files">Files</h3><p>Filenames also mapped using same consistent hash function - SHA-1(filename)-&gt;160 bit string (key) - File is stored at <strong>first peer with id greater than its key(mod 2^m)</strong> - Consistent Hashing =&gt; with K keys and N peers, each peer stores O(K/N) keys</p><h3 id="search-1">Search</h3><ul><li>At node n, send query for key k to largest successor/finger entry &lt;= k if none exist, send query to successor(n)</li><li><img src="p2p13.png" alt="p2p13.png"></li><li>Search takes O(log(N)) time</li><li>O(log(N)) search time holds for file insertions too (in general for routing to any key)</li><li>Failure in Chord<ul><li>maintain r multiple successor entries</li><li>replicate file/key at r successors and predecessors</li></ul></li></ul><h3 id="dynamic-changes">Dynamic changes</h3><ul><li>New peers joining<ul><li>Introducer directs N40 to N45 (and N32)</li><li>N32 updates successor to N40</li><li>N40 initializes successor to N45, and inits fingers from it N40 periodically talks to neighbors to update finger table</li><li>N40 may need to copy some files/keys from N45 (files with fileid between 32 and 40)</li><li>A new peer affects O(log(N)) other finger entries in the system, on average</li></ul></li><li>Stabilization Protocol <strong>Concurrent peer joins, leaves, failures might cause loopiness of pointers and failure of lookups</strong><ul><li>Chord peers periodically run a stabilization algorithm that checks and updates pointers and keys</li></ul></li></ul><h3 id="virtual-nodes">Virtual Nodes</h3><p><strong>Hash can get non-uniform -&gt; Bad load balancing</strong> - Treat each node as multiple virtual nodes behaving independently - Each joins the system - Reduces variance of load imbalance</p><h2 id="pastry">Pastry</h2><ul><li>Assigns ids to nodes, just like Chord (using a virtual ring)</li><li><strong>Leaf Set</strong> – Each node knows its successor(s) and predecessor(s)</li><li>Routing tables based prefix matching(Routing is thus based on prefix matching and is thus log(N))</li></ul><h3 id="pastry-locality">Pastry Locality</h3><ul><li>For each prefix, say 011, among all potential neighbors with a matching prefix, the neighbor with the shortest round-trip time is selected</li><li>Since shorter prefixes have many more candidates (spread out throughout the Internet), the neighbors for shorter prefixes are likely to be closer than the neighbors for longer prefixes</li><li>Thus, in the prefix routing, early hops are short and later hops are longer</li></ul><h3 id="kelips">Kelips</h3><p><strong>A 1 hop Lookup DHT</strong></p><h3 id="kelips-structure">Kelips Structure</h3><p><img src="p2p14.png" alt="p2p014.png"> - k “affinity groups” k ~ sqrt(N) - Each node hashed to a group (hash mod k) - Node’s neighbors - (Almost) all other nodes in its own affinity group - One contact node per foreign affinity group - File can be stored at any (few) node(s) - Decouple file replication/location (outside Kelips) from file querying (in Kelips) - Each filename hashed to a group - All nodes in the group replicate pointer information, i.e., &lt;filename, file location&gt; - Affinity group does not store files - Lookup - Find file affinity group - Go to your contact for the file affinity group - Failing that try another of your neighbors to find a contact</p><p><strong>Reference from some slides from Coursera course <a href="https://www.coursera.org/learn/cloud-computing" target="_blank" rel="noopener">Cloud Computing</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> Cloud Computing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cloud Computing of UIUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dive into blog</title>
      <link href="/Dive-into-blog/2019/02/13/"/>
      <url>/Dive-into-blog/2019/02/13/</url>
      
        <content type="html"><![CDATA[<p>前天为了搭建 hadoop 集群，被网络上语言含糊不清的教程搞得精疲力尽，于是萌发了自己写技术博客的想法。</p><h4 id="开始搭建了">开始搭建了</h4><ul><li>Hexo做博客框架不错，就它了。于是我纠结了两个小时选什么主题。Next肯定是第一个排除的，因为用的人太多了，我要不一样。Daily也不错，简洁大方，符合我的气质，就它吧。我去，Daily连个打赏系统都没集成啊，这不妨碍我赚钱吗。算了，还是Next吧。嗯，真香。</li><li>部署就选Github Page，没必要额外买服务器。</li><li><a href="https://zhangruochi.github.io" target="_blank" rel="noopener">zhangruochi.github.io</a>的域名不行，看上去不高端，散发着程序猿气质。于是我去买了<a href="https://zhangruochi.com">zhangruochi.com</a>，Godaddy上买的，二十多刀，很便宜。</li><li>第一个要做的功能必须是打赏系统，比较顺利，Next已经集成了。</li><li>评论系统纠结了很久, 后来发现没什么好纠结的。基本上要么被墙要么停止服务。什么，你说gitment？ 那也不考虑，我的博客怎么能局限于程序猿圈呢。就来必力吧，你看名字多可爱。</li><li>分享系统用自带的BaiduShare，虽然丑了点。</li></ul><h4 id="差不多可以上线了">差不多可以上线了</h4><ul><li>因为Github不会将站点信息提交给搜索引擎，<a href="https://zhangruochi.github.io" target="_blank" rel="noopener">Dore's blog</a>作为一个技术博客，baidu, google什么的都搜索不到，这不行，这么有价值的博文不是写给我自己看的。于是开始做seo优化。首先是验证站点，google和baidu两者都验证通不过，不管是文件验证 还是html标签验证。折腾了几个小时，发现文件验证不通过的原因是Hexo生成网站时会修改google和baidu提供的验证文件。这好办，在验证文件开头加上 <code>layout: false</code>。</li><li>生成sitemap, 提交sitemap，测试robots.txt，比较顺利。</li></ul><h4 id="终于能搜索到了">终于能搜索到了</h4><ul><li>不对啊，打开网站经常会显示website coming soon页面，但是多刷新几次又没问题，这是什么磨人的小bug。而且现在网站是http协议，不是https, Chorme总是显示Not Secure。去Github Page页面修改强行使用https，然而选择不了。折腾一圈发现是在 Godaddy上添加了一个多余的DNS解析，删除之后可以选择强制https了。</li><li>我去，强制https之后safari和chorme都显示网站不被信任, 进不去了。又找了一圈方案，说要购买ssl证书,然而Github Page不支持上传证书。后来找到解决方案，使用<strong>DNSPod</strong>解析DNS, 修改DNSPod为default nameserver.</li></ul><h4 id="终于能正常登陆了">终于能正常登陆了</h4><ul><li>然而，分享系统又不能用了，原来是因为BaiduShare不支持https. 我为什么要用百度家的产品? 想起小恶魔的台词，“Next time I have an idea like that, just punch me in the face.”</li><li>于是使用ShareSDK, 本地测试没问题，但是联网会出错。发现是https限制http的外链接。好的，修改一下src tag，可以了。但是ShareSDK长得丑啊，于是又来了一顿操作，添加新的css和js。</li></ul><h4 id="基本满意了">基本满意了</h4><p>我更加精疲力尽，写什么博客，<strong>Next time I have an idea like that, just punch me in the face</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> My Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>值得期待的一块零一分 --鹿麒序</title>
      <link href="/Hello-Blog/2019/02/12/"/>
      <url>/Hello-Blog/2019/02/12/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>那天一句玩笑说建好博客让鹿总给我写个序，今天终于看到了。挺不好意思的。别人一夸我，我就扭捏，总担心别人夸得还不够😝。以下是序的正文。</strong></p></blockquote><p>狄更斯说，这是最好的时代，这是最坏的时代；有人直上天堂，有人直下地狱。所以当下的这个时代给予我们的到底是什么，我觉得这是一个很难回答的问题。</p><p>应该是从大三开始，在即将面临社会的时候我产生了更多的自我怀疑，经常问自己“你到底想做什么，你以后会做什么呢”。那个时候我很羡慕两种人。一种是从来不会认真思考这个问题，随遇而安的人，另一种是有着明确的目标，并为之不断努力的人。老实说，其实这是两种极端，前一种人说得难听的可以是“不思进取”，但是往往他们也容易满足，能在自己的世界里过得很幸福。后一种人可以说是“野心太大”，但是这样的人也容易充实自己。反观我，就是那种不尴不尬，不上不下的一类。不满足于现在的生活可是也没有明确的目标。</p><p>也是在这种情况下，我选择出国留学，觉得对我来说这也是逃避社会逃避现实的好的方式。圈子广了，接触的人多了，但是大部分人也还是可以按照上面说的道理分成三种。张若驰（以下称为张老师，叫他全名实在有点不习惯）就是我说的目标明确并且不断努力的人。</p><p>其实张老师让我写序，我也不知道写点啥，于是打算讲讲我对他的看法。</p><p>张老师是这样一种人：他从来不避讳自己取得的一些成绩，也从来不会夸大自己的成就。也可能是他真的太厉害，所以不管他在生活里还是朋友圈里怎么讲自己，我的第一反应总是“牛逼，不愧是张老师”。其实，跟他相处的时候只要你好好留意，就会发现他是个很有目标性的人。比如说，他吃饭的时候很快，往往我吃了一半还不到，他已经差不多了。他等你的这个时候，大部分时间里他都是一个人在沉思或者跟你讲讲他对自己未来有什么规划。因为和国内的时差，他也经常性会在半夜开会。为了自己项目里的问题或者刷题，在图书馆熬夜，通宵也是常有的事。打开他的linkedin，上面也写满了他发的论文和上过的有分量的课。可能也是为什么我发现他的眼眶下面是青黑的原因吧。</p><p>说实话，这样的生活如果安在我身上，那我多半受不了。但是我也没有问过他累不累，因为每次这种时候我都会想到之前问我发小“一直这么努力不会觉得很辛苦吗”，她当时回答我“习惯了就不觉得了”。</p><p>张老师跟许多程序员不一样的是，通过跟他的接触，你会发现他是一个读过很多书，对这个社会很有想法的文化人。同时，张老师跟许多人不一样的是，大家都知道自己是被生活推着走，但是他在被推着走的时候，也在思考怎样最大化发挥自己的价值去影响这个世界。</p><p>写到这儿我顿悟了。一开始他自己写这个blog我只觉得这是文化人和处女座对于一些完美事物的执着，但是现在我明白了，这个blog或许也是他的一种知识输出，是一种他用来影响别人的方式。而我，作为一个被用来测试网站的小白羊，对张老师的blog充满了自信。刚起步的时候，张老师的知识分享也都是比较浅显的东西，但这几天我每天睡醒都会看到他半夜给我发的告诉我他又做了哪方面的改进。虽然现在我只花了一块零一分，但这样我也算是入股了吧，等到以后这个blog真的开始发挥它的价值的时候，我觉得我的一块零一分的价值也会乘十乘百乘千乘万乘亿地增长。 和它一起的，我相信也一定是张老师之于这个社会，这个时代的价值。</p><p>所以，只要够主动够幸运够优秀，这个时代给予我们的东西，总有一天是能通过自己的身体力行去感知的。 最后，我想代表我们大家对张老师说一句：“苟富贵，勿相忘。”</p>]]></content>
      
      
      <categories>
          
          <category> Gossip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gossip </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
