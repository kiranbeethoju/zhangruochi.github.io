<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Minimum Spanning Trees</title>
    <url>/Minimum-Spanning-Trees/2020/01/25/</url>
    <content><![CDATA[<h3 id="Minimum-Spanning-Trees"><a href="#Minimum-Spanning-Trees" class="headerlink" title="Minimum Spanning Trees"></a>Minimum Spanning Trees</h3><ul>
<li>Kruskal’s Algorithm <ul>
<li>O(n + m lg(n))</li>
</ul>
</li>
<li>Prim’s Algorithm<ul>
<li>O(n lg(n) + m lg(n))</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, nodes)</span>:</span></span><br><span class="line">        self.parent =  &#123;v: <span class="number">-1</span> <span class="keyword">for</span> v <span class="keyword">in</span> nodes&#125;</span><br><span class="line">        self.rank = &#123;r: <span class="number">0</span> <span class="keyword">for</span> r <span class="keyword">in</span> nodes&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_root</span><span class="params">(self, i)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.parent[i] == <span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">        self.parent[i] = self.get_root(self.parent[i])</span><br><span class="line">        <span class="keyword">return</span> self.parent[i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(self, i, j)</span>:</span></span><br><span class="line">        i_root = self.get_root(i)</span><br><span class="line">        j_root = self.get_root(j)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> i_root != j_root:</span><br><span class="line">            <span class="keyword">if</span> self.rank[i_root] == self.rank[j_root]:</span><br><span class="line">                self.parent[i_root] = j_root</span><br><span class="line">                self.rank[j_root] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> self.rank[i_root] &gt; self.rank[j_root]:</span><br><span class="line">                self.parent[j_root] = i_root</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.parent[i_root] = j_root</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_connected</span><span class="params">(self, i, j)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.get_root(i) == self.get_root(j)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHeap</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, initial = None, key = None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> key:</span><br><span class="line">            self.key = <span class="keyword">lambda</span> x: x.weight</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> initial:</span><br><span class="line">           self._data = [(key(item), item) <span class="keyword">for</span> item <span class="keyword">in</span> initial]</span><br><span class="line">           heapq.heapify(self._data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">           self._data = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="comment"># print(self._data)</span></span><br><span class="line">        heapq.heappush(self._data, (self.key(item), item))</span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">       <span class="keyword">return</span> heapq.heappop(self._data)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">empty</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span> <span class="keyword">if</span> self._data <span class="keyword">else</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure>
<h1 id="KruskalMST-G"><a href="#KruskalMST-G" class="headerlink" title="KruskalMST(G):"></a>KruskalMST(G):</h1><h1 id="DisjointSets-forest"><a href="#DisjointSets-forest" class="headerlink" title="DisjointSets forest"></a>DisjointSets forest</h1><h1 id="foreach-Vertex-v-G"><a href="#foreach-Vertex-v-G" class="headerlink" title="foreach (Vertex v : G):"></a>foreach (Vertex v : G):</h1><h1 id="forest-makeSet-v"><a href="#forest-makeSet-v" class="headerlink" title="forest.makeSet(v)"></a>forest.makeSet(v)</h1><h1 id="PriorityQueue-Q-min-edge-weight"><a href="#PriorityQueue-Q-min-edge-weight" class="headerlink" title="PriorityQueue Q    // min edge weight"></a>PriorityQueue Q    // min edge weight</h1><h1 id="foreach-Edge-e-G"><a href="#foreach-Edge-e-G" class="headerlink" title="foreach (Edge e : G):"></a>foreach (Edge e : G):</h1><h1 id="Q-insert-e"><a href="#Q-insert-e" class="headerlink" title="Q.insert(e)"></a>Q.insert(e)</h1><h1 id="Graph-T-V"><a href="#Graph-T-V" class="headerlink" title="Graph T = (V, {})"></a>Graph T = (V, {})</h1><h1 id="while-T-edges-lt-n-1"><a href="#while-T-edges-lt-n-1" class="headerlink" title="while |T.edges()| &lt; n-1:"></a>while |T.edges()| &lt; n-1:</h1><h1 id="Edge-u-v-Q-removeMin"><a href="#Edge-u-v-Q-removeMin" class="headerlink" title="Edge (u, v) = Q.removeMin()"></a>Edge (u, v) = Q.removeMin()</h1><h1 id="if-forest-find-u-forest-find-v"><a href="#if-forest-find-u-forest-find-v" class="headerlink" title="if forest.find(u) != forest.find(v):"></a>if forest.find(u) != forest.find(v):</h1><h1 id="T-addEdge-u-v"><a href="#T-addEdge-u-v" class="headerlink" title="T.addEdge(u, v)"></a>T.addEdge(u, v)</h1><h1 id="forest-union-forest-find-u"><a href="#forest-union-forest-find-u" class="headerlink" title="forest.union(forest.find(u)),"></a>forest.union(forest.find(u)),</h1><h1 id="return-T"><a href="#return-T" class="headerlink" title="return T"></a>return T</h1><h1 id><a href="#" class="headerlink" title></a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def kruskal(graph):</span><br><span class="line"></span><br><span class="line">    edge = namedtuple(&quot;edge&quot;,(&apos;u&apos;,&apos;v&apos;,&apos;weight&apos;))        </span><br><span class="line">    heap = MyHeap()</span><br><span class="line">    union_find = UnionFind(graph.keys())</span><br><span class="line"></span><br><span class="line">    path = []</span><br><span class="line">    weight = 0</span><br><span class="line"></span><br><span class="line">    for u in graph:</span><br><span class="line">        for v in graph[u]:</span><br><span class="line">            heap.push(edge(u,v,graph[u][v]))</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">    while len(path) &lt; len(graph)-1:</span><br><span class="line">        edge = heap.pop()</span><br><span class="line">        if not union_find.is_connected(edge.u, edge.v):</span><br><span class="line">            path.append(edge)</span><br><span class="line">            weight += edge.weight</span><br><span class="line">            union_find.union(edge.u,edge.v)</span><br><span class="line"></span><br><span class="line">    return weight,path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># PrimMST(G, s):</span><br><span class="line">#     foreach (Vertex v : G):</span><br><span class="line">#         d[v] = +inf</span><br><span class="line">#         p[v] = NULL</span><br><span class="line">#     d[s] = 0</span><br><span class="line">#     PriorityQueue Q // min distance, defined by d[v] </span><br><span class="line">#     Q.buildHeap(G.vertices())</span><br><span class="line"></span><br><span class="line">#     Graph T // &quot;labeled set&quot;</span><br><span class="line"></span><br><span class="line">#     repeat n times:</span><br><span class="line">#         Vertex m = Q.removeMin()</span><br><span class="line">#         T.add(m)</span><br><span class="line">#         foreach (Vertex v : neighbors of m not in T):</span><br><span class="line">#             if cost(v, m) &lt; d[v]:</span><br><span class="line">#                 d[v] = cost(v, m)</span><br><span class="line">#                 p[v] = m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def prim(graph, root):</span><br><span class="line"></span><br><span class="line">    # Input: G, Graph;</span><br><span class="line">    #      s, vertex in G, starting vertex</span><br><span class="line">    # Output: T, a minimum spanning tree (MST) of G</span><br><span class="line"></span><br><span class="line">    prev = None</span><br><span class="line">    path = []</span><br><span class="line">    total = 0                   # Total cost of edges in tree</span><br><span class="line">    visited = set()            # Set of vertices in tree</span><br><span class="line">    Node = namedtuple(&quot;Node&quot;,(&quot;v&quot;,&quot;weight&quot;))</span><br><span class="line">    heap = MyHeap()   # Unexplored edges ordered by cost</span><br><span class="line">    heap.push(Node(root,0))</span><br><span class="line">    </span><br><span class="line">    while not heap.empty():</span><br><span class="line">        cur_node = heap.pop()</span><br><span class="line">        if cur_node.v not in visited:</span><br><span class="line">            visited.add(cur_node.v)</span><br><span class="line">            total += cur_node.weight</span><br><span class="line">            if prev:</span><br><span class="line">                path.append((prev,cur_node.v,cur_node.weight))</span><br><span class="line">            prev = cur_node.v</span><br><span class="line">            for neighbour in graph[cur_node.v]:</span><br><span class="line">                if neighbour not in visited:</span><br><span class="line">                    heap.push(Node(neighbour, graph[cur_node.v][neighbour]))</span><br><span class="line"></span><br><span class="line">    return total,path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    return weight,path</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    graph_dict = &#123;  &quot;v1&quot;:&#123;&quot;v2&quot;: 32, &quot;v4&quot;: 17&#125;,</span><br><span class="line">                    &quot;v2&quot;:&#123;&quot;v1&quot;:32, &quot;v5&quot;: 45&#125;,</span><br><span class="line">                    &quot;v3&quot;:&#123;&quot;v7&quot;:5,&quot;v4&quot;:18&#125;,</span><br><span class="line">                    &quot;v4&quot;:&#123;&quot;v3&quot;:18,&quot;v1&quot;:17, &quot;v5&quot;:10,&quot;v8&quot;:3&#125;,</span><br><span class="line">                    &quot;v5&quot;:&#123;&quot;v4&quot;:10,&quot;v2&quot;:45,&quot;v9&quot;:25,&quot;v6&quot;:28&#125;,</span><br><span class="line">                    &quot;v6&quot;:&#123;&quot;v5&quot;:28,&quot;v10&quot;:6&#125;,</span><br><span class="line">                    &quot;v7&quot;:&#123;&quot;v3&quot;:5,&quot;v8&quot;:59&#125;,</span><br><span class="line">                    &quot;v8&quot;:&#123;&quot;v4&quot;:3,&quot;v7&quot;:59,&quot;v9&quot;:4&#125;,</span><br><span class="line">                    &quot;v9&quot;:&#123;&quot;v8&quot;:4,&quot;v5&quot;:25,&quot;v10&quot;:12&#125;,</span><br><span class="line">                    &quot;v10&quot;:&#123;&quot;v9&quot;:12,&quot;v6&quot;:6&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    weight,path = prim(graph_dict, &apos;v1&apos;)</span><br><span class="line">    print(weight)</span><br><span class="line">    print(path)</span><br><span class="line"></span><br><span class="line">    weight,path = kruskal(graph_dict)</span><br><span class="line">    print(weight)</span><br><span class="line">    print(path)</span><br></pre></td></tr></table></figure></h1>]]></content>
      <categories>
        <category>Data Structure and Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>Unordered Data Structure</title>
    <url>/Unordered-Data-Structure/2020/01/24/</url>
    <content><![CDATA[<h3 id="Hashing"><a href="#Hashing" class="headerlink" title="Hashing"></a>Hashing</h3><p>We want to define a keyspace, a (mathematical) description of the keys for a set of data, using a <code>function</code> to map the keyspace into a small set of integers.</p>
<p>A Hash Table consists of three things:</p>
<ul>
<li>Hash Function</li>
<li>An array</li>
<li>Collision</li>
</ul>
<h4 id="Hash-Function"><a href="#Hash-Function" class="headerlink" title="Hash Function"></a>Hash Function</h4><p>Our hash function consists of two parts:</p>
<ul>
<li>A hash: transfrom input to an integer(index)</li>
<li>A compression: make the hash function within the bounds of the arrays(%N).</li>
</ul>
<p>Characteristics of a good hash function:</p>
<ul>
<li>Computation Time</li>
<li>Deterministic</li>
<li>Satisfythe SUHA(simple unifrom hashing assumption)</li>
</ul>
<h4 id="std-map"><a href="#std-map" class="headerlink" title="std::map"></a>std::map</h4><ol>
<li><code>std::map</code></li>
</ol>
<ul>
<li>std::operator[] </li>
<li>::insert ::erase</li>
<li>::lower_bound(key) -&gt; Iterator to first element ≤ key </li>
<li>::upper_bound(key) -&gt; Iterator to first element &gt; key</li>
</ul>
<ol>
<li>std::unordered_map</li>
</ol>
<ul>
<li>std::operator[]</li>
<li>std::insert </li>
<li>std::erase</li>
<li>std::load_factor()</li>
<li>std::max_load_factor(ml) -&gt; Sets the max load factor</li>
</ul>
<h3 id="Disjoint-Sets"><a href="#Disjoint-Sets" class="headerlink" title="Disjoint Sets"></a>Disjoint Sets</h3><blockquote>
<p><a href="https://zhangruochi.com/Union-Find/2019/11/19/">https://zhangruochi.com/Union-Find/2019/11/19/</a></p>
</blockquote>
<ul>
<li>Maintain a collection S = {$s_0$, $s_1$, \cdots,  $s_k$}.</li>
<li>Each set has a <strong>representative member</strong>.</li>
</ul>
<h4 id="Disjoint-Sets-ADT"><a href="#Disjoint-Sets-ADT" class="headerlink" title="Disjoint Sets ADT"></a>Disjoint Sets ADT</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeSet</span><span class="params">(<span class="keyword">const</span> T &amp; t)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">const</span> T &amp; k1, <span class="keyword">const</span> T &amp; k2)</span></span>; </span><br><span class="line"><span class="function">T &amp; <span class="title">find</span><span class="params">(<span class="keyword">const</span> T &amp; k)</span></span>;</span><br></pre></td></tr></table></figure>
<p>In an Disjoint Sets implemented with smart unions and path compression on find</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> DisjointSets::find(<span class="keyword">int</span> i) &#123; </span><br><span class="line">    <span class="keyword">if</span> ( s[i] &lt; <span class="number">0</span> ) &#123; </span><br><span class="line">        <span class="keyword">return</span> i; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="keyword">return</span> _find( s[i] ); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> DisjointSets::unionBySize(<span class="keyword">int</span> root1, <span class="keyword">int</span> root2) &#123; </span><br><span class="line">    <span class="keyword">int</span> newSize = arr_[root1] + arr_[root2];</span><br><span class="line"><span class="comment">// If arr_[root1] is less than (more negative), it is the larger set; // we union the smaller set, root2, with root1.</span></span><br><span class="line">    <span class="keyword">if</span> ( arr_[root1] &lt; arr_[root2] ) &#123;</span><br><span class="line">        arr_[root2] = root1;</span><br><span class="line">        arr_[root1] = newSize; </span><br><span class="line">    &#125;</span><br><span class="line">      <span class="comment">// Otherwise, do the opposite:</span></span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        arr_[root1] = root2;</span><br><span class="line">        arr_[root2] = newSize; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DisjointSets</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> s[<span class="number">256</span>];</span><br><span class="line"></span><br><span class="line">    DisjointSets() &#123; <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) s[i] = <span class="number">-1</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Modify the find() method below</span></span><br><span class="line"><span class="comment"> * to implement path compression</span></span><br><span class="line"><span class="comment"> * so that element i and all of</span></span><br><span class="line"><span class="comment"> * its ancestors in the up-tree</span></span><br><span class="line"><span class="comment"> * point to directly to the root</span></span><br><span class="line"><span class="comment"> * after find() completes.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> DisjointSets::find(<span class="keyword">int</span> i) &#123;</span><br><span class="line">  <span class="keyword">if</span> ( s[i] &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    s[i] = find(s[i]);</span><br><span class="line">    <span class="keyword">return</span> s[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  DisjointSets d;</span><br><span class="line"></span><br><span class="line">  d.s[<span class="number">1</span>] = <span class="number">3</span>;</span><br><span class="line">  d.s[<span class="number">3</span>] = <span class="number">5</span>;</span><br><span class="line">  d.s[<span class="number">5</span>] = <span class="number">7</span>;</span><br><span class="line">  d.s[<span class="number">7</span>] = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"d.find(3) = "</span> &lt;&lt; d.find(<span class="number">3</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"d.s(1) = "</span> &lt;&lt; d.s[<span class="number">1</span>] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"d.s(3) = "</span> &lt;&lt; d.s[<span class="number">3</span>] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"d.s(5) = "</span> &lt;&lt; d.s[<span class="number">5</span>] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"d.s(7) = "</span> &lt;&lt; d.s[<span class="number">7</span>] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Graph"><a href="#Graph" class="headerlink" title="Graph"></a>Graph</h3><h4 id="Graph-ADT"><a href="#Graph-ADT" class="headerlink" title="Graph ADT"></a>Graph ADT</h4><p>Data:</p>
<ul>
<li>Vertices</li>
<li>Edges</li>
<li>Some data structure maintaining the structure between vertices and edges.</li>
</ul>
<p>Functions:</p>
<ul>
<li>insertVertex(K key);</li>
<li>insertEdge(Vertex v1, Vertex v2, K key);</li>
<li>removeVertex(Vertex v);</li>
<li>removeEdge(Vertex v1, Vertex v2);</li>
<li>incidentEdges(Vertex v);</li>
<li>areAdjacent(Vertex v1, Vertex v2);</li>
<li>origin(Edge e);</li>
<li>destination(Edge e);</li>
</ul>
<h4 id="Graph-Implementation-Edge-List"><a href="#Graph-Implementation-Edge-List" class="headerlink" title="Graph Implementation: Edge List"></a>Graph Implementation: Edge List</h4><ul>
<li>insertVertex: O(1)</li>
<li>removeVertex: O(1)</li>
<li>areAdjancet: O(m)</li>
<li>incidentEdges: O(m)</li>
</ul>
<h4 id="Graph-Implementation-Adjacnecy-Matrix"><a href="#Graph-Implementation-Adjacnecy-Matrix" class="headerlink" title="Graph Implementation: Adjacnecy Matrix"></a>Graph Implementation: Adjacnecy Matrix</h4><ul>
<li>insertVertex: O(n)</li>
<li>removeVertex: O(n)</li>
<li>areAdjancet: O(1)</li>
<li>incidentEdges: O(n)</li>
</ul>
<h4 id="Graph-Implementation-Adjacnecy-List"><a href="#Graph-Implementation-Adjacnecy-List" class="headerlink" title="Graph Implementation: Adjacnecy List"></a>Graph Implementation: Adjacnecy List</h4><ul>
<li>insertVertex: O(1)</li>
<li>removeVertex: O(degree v)</li>
<li>areAdjancet: min(dgree(v1), degree(v2))</li>
<li>incidentEdges: O(degree v)</li>
</ul>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="1.png" width="50%" height="50%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Graph</div>
</center>


]]></content>
      <categories>
        <category>Data Structure and Algorithm</category>
        <category>Programming Language</category>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>C Plus Plus Reference</title>
    <url>/C-Plus-Plus-Reference/2020/01/23/</url>
    <content><![CDATA[<ul>
<li>在引用的使用中，单纯给某个变量取个别名是毫无意义的，引用的目的主要用于在函数参数传递中，解决大块数据或对象的传递效率和空间不如意的问题。</li>
<li>用引用传递函数的参数，能保证参数传递中不产生副本，提高传递的效率，且通过const的使用，保证了引用传递的安全性。</li>
<li>引用与指针的区别是，指针通过某个指针变量指向一个对象后，对它所指向的变量间接操作。程序中使用指针，程序的可读性差；而引用本身就是目标变量的别名，对引用的操作就是对目标变量的操作。</li>
<li>使用引用的时机。流操作符&lt;&lt;和&gt;&gt;、赋值操作符=的返回值、拷贝构造函数的参数、赋值操作符=的参数、其它情况都推荐使用引用。</li>
</ul>
<h3 id="引用作为参数"><a href="#引用作为参数" class="headerlink" title="引用作为参数"></a>引用作为参数</h3><p>引用的一个重要作用就是作为函数的参数。以前的C语言中函数参数传递是值传递，如果有大块数据作为参数传递的时候，采用的方案往往是指针，因为这样可以避免将整块数据全部压栈，可以提高程序的效率。但是现在（C++中）又增加了一种同样有效率的选择（在某些特殊情况下又是必须的选择），就是引用。</p>
<p>传递引用给函数与传递指针的效果是一样的。这时，被调函数的形参就成为原来主调函数中的实参变量或对象的一个别名来使用，所以在被调函数中对形参变量的操作就是对其相应的目标对象（在主调函数中）的操作。</p>
<p>使用引用传递函数的参数，在内存中并没有产生实参的副本，它是直接对实参操作；而使用一般变量传递函数的参数，当发生函数调用时，需要给形参分配存储单元，形参变量是实参变量的副本；如果传递的是对象，还将调用拷贝构造函数。因此，当参数传递的数据较大时，用引用比用一般变量传递参数的效率和所占空间都好。</p>
<p>使用指针作为函数的参数虽然也能达到与使用引用的效果，但是，在被调函数中同样要给形参分配存储单元，且需要重复使用”*指针变量名”的形式进行运算，这很容易产生错误且程序的阅读性较差；另一方面，在主调函数的调用点处，必须用变量的地址作为实参。而引用更容易使用，更清晰。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> &amp;p1,  <span class="keyword">int</span> &amp;p2)</span>  <span class="comment">//此处函数的形参p1, p2都是引用 </span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">int</span> p;</span><br><span class="line">    p=p1;  p1=p2;  p2=p; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">swap(a,b);  <span class="comment">//直接以变量a和b作为实参调用swap函数</span></span><br></pre></td></tr></table></figure>
<h3 id="常引用"><a href="#常引用" class="headerlink" title="常引用"></a>常引用</h3><p>常引用声明方式：</p>
<blockquote>
<p>const 类型标识符 &amp;引用名=目标变量名；</p>
</blockquote>
<p>用这种方式声明的引用，不能通过引用对目标变量的值进行修改,从而使引用的目标成为const，达到了引用的安全性。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a ;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;ra=a;</span><br><span class="line">ra=<span class="number">1</span>;  <span class="comment">//错误，不能通过引用对目标变量的值进行修改</span></span><br><span class="line">a=<span class="number">1</span>;  <span class="comment">//正确</span></span><br></pre></td></tr></table></figure>
<h3 id="引用作为返回值"><a href="#引用作为返回值" class="headerlink" title="引用作为返回值"></a>引用作为返回值</h3><ul>
<li>以引用返回函数值，定义函数时需要在函数名前加 <code>&amp;</code></li>
<li>用引用返回一个函数值的最大好处是，在内存中不产生被返回值的副本</li>
<li>将引用作为函数返回值时应该注意不能返回局部数据（例如局部变量、局部对象、局部数组等）的引用，因为当函数调用完成后局部数据就会被销毁，有可能在下次使用时数据就不存在了，C++ 编译器检测到该行为时也会给出警告；</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> &amp; <span class="title">func</span><span class="params">(<span class="keyword">int</span> &amp;n)</span> </span>&#123;</span><br><span class="line">    n += <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> &amp;b = func(a);   <span class="comment">// 传递a的引用给b</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a = %d, b = %d, &amp;a = %p, &amp;b = %p\n"</span>, a, b, &amp;a, &amp;b);</span><br><span class="line">    b++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a = %d, b = %d\n"</span>, a, b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> y = func(x);    <span class="comment">// 用y接收func()的返回值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"x = %d, y = %d, &amp;x = %p, &amp;y = %p\n"</span>, x, y, &amp;x, &amp;y);</span><br><span class="line">    y++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"x = %d, y = %d\n"</span>, x, y);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a = 20, b = 20, &amp;a = 0x7fff159e9214, &amp;b = 0x7fff159e9214</span></span><br><span class="line"><span class="comment">// a = 21, b = 21</span></span><br><span class="line"><span class="comment">// x = 20, y = 20, &amp;x = 0x7fff159e9218, &amp;y = 0x7fff159e921c</span></span><br><span class="line"><span class="comment">// x = 20, y = 21</span></span><br></pre></td></tr></table></figure>
<h3 id="引用类型的类成员变量"><a href="#引用类型的类成员变量" class="headerlink" title="引用类型的类成员变量"></a>引用类型的类成员变量</h3><ol>
<li>不能有默认构造函数，必须提供构造函数</li>
<li>构造函数的形参必须为引用类型</li>
<li>初始化必须在成员初始化链表内完成</li>
</ol>
<p>凡是有引用类型的成员变量的类，不能有缺省构造函数。默认构造函数没有对引用成员提供默认的初始化机制，也因此造成引用未初始化的编译错误。</p>
<p>不能直接在构造函数里初始化，必须用到初始化列表，且形参也必须是引用类型。构造函数分为初始化和计算两个阶段，前者对应成员初始化链表，后者对应构造函数函数体。引用必须在初始化阶段，也即在成员初始化链表中完成，否则编译时会报错（引用未初始化）。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ref</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">        Ref (<span class="keyword">int</span> &amp;target) : myref(target) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Ref constructor"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">printRef</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"myref is: "</span> &lt;&lt; myref &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">virtual</span> ~Ref () &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">int</span> &amp;myref;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">20</span>;</span><br><span class="line">    <span class="function">Ref <span class="title">r</span><span class="params">(a)</span></span>;</span><br><span class="line">    r.printRef();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> &amp;b = a;</span><br><span class="line">    <span class="function">Ref <span class="title">r1</span><span class="params">(b)</span></span>;</span><br><span class="line">    r1.printRef();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// error:引用定义时必须初始化</span></span><br><span class="line">    <span class="comment">// int &amp;c;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.cnblogs.com/xiaofengkang/archive/2011/05/16/2048262.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiaofengkang/archive/2011/05/16/2048262.html</a></li>
<li><a href="https://www.zfl9.com/cpp-refer.html" target="_blank" rel="noopener">https://www.zfl9.com/cpp-refer.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Programming Language</category>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>Ordered Data Structures</title>
    <url>/Ordered-Data-Structures/2020/01/22/</url>
    <content><![CDATA[<h3 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h3><center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="1.png" width="70%" height="70%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Arrays</div>
</center>

<h4 id="Initialization"><a href="#Initialization" class="headerlink" title="Initialization"></a>Initialization</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 静态分配</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>&#125;; <span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>]=&#123;<span class="number">0</span>&#125;; <span class="comment">//正确，省略初始化最后一个元素,最后省略的元素初始化为0</span></span><br><span class="line"><span class="keyword">int</span> a[n]=&#123;<span class="number">0</span>&#125;; <span class="comment">// 注意n必须为const类型，否则错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态分配</span></span><br><span class="line"><span class="keyword">int</span> *a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>] ();  <span class="comment">// 每个元素初始化为0,括号内不能写其他值，只能初始化为0</span></span><br><span class="line"><span class="keyword">int</span>* a = <span class="keyword">new</span> <span class="keyword">int</span>[n];<span class="comment">// 注意n必须为const</span></span><br></pre></td></tr></table></figure>
<h4 id="Array-Limitation-1"><a href="#Array-Limitation-1" class="headerlink" title="Array Limitation #1"></a>Array Limitation #1</h4><p>All data in an array must be of the same type</p>
<ul>
<li>An integer array must only contain integers. </li>
<li>A string array must only contain strings.</li>
</ul>
<p>We know two facts about arrays:</p>
<ul>
<li>Elements are all the same type.</li>
<li>The size (number of bytes) of the type of data is known.</li>
</ul>
<p>We can calculate the offset to any given index from the start of the array:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Create an array of 10 primes:</span></span><br><span class="line">  <span class="keyword">int</span> values[<span class="number">10</span>] = &#123; <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">17</span>, <span class="number">21</span>, <span class="number">23</span> &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Print the size of each type `int`:</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">int</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(values) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Using pointer arithmetic, ask the computer to calculate</span></span><br><span class="line">  <span class="comment">// the offset from the beginning of the array to [2]:</span></span><br><span class="line">  <span class="keyword">int</span> offset = (<span class="keyword">long</span>)&amp;(values[<span class="number">2</span>]) - (<span class="keyword">long</span>)&amp;(values[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; offset &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output: </span></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 40</span></span><br><span class="line"><span class="comment">// 8</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Simple C++ class for representing a Cube (with constructors).</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @author</span></span><br><span class="line"><span class="comment"> *   Wade Fagen-Ulmschneider &lt;waf@illinois.edu&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> uiuc &#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Cube</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">      Cube(<span class="keyword">double</span> length);  <span class="comment">// One argument constructor</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">double</span> <span class="title">getVolume</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">double</span> <span class="title">getSurfaceArea</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">setLength</span><span class="params">(<span class="keyword">double</span> length)</span></span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> Cube &amp; other);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">      <span class="keyword">double</span> length_;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Calculating the memory seperation of elements in an array.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @author</span></span><br><span class="line"><span class="comment"> *   Wade Fagen-Ulmschneider &lt;waf@illinois.edu&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../Cube.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> uiuc::Cube;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Create an array of 3 `Cube`s:</span></span><br><span class="line">  Cube cubes[<span class="number">3</span>] = &#123; Cube(<span class="number">11</span>), Cube(<span class="number">42</span>), Cube(<span class="number">400</span>) &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Print the size of each type `Cube`:</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">double</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(Cube) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Using pointer arithmetic, ask the computer to calculate</span></span><br><span class="line">  <span class="comment">// the offset from the beginning of the array to [2]:</span></span><br><span class="line">  <span class="keyword">int</span> offset = (<span class="keyword">long</span>)&amp;(cubes[<span class="number">2</span>]) - (<span class="keyword">long</span>)&amp;(cubes[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; offset &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 8</span></span><br><span class="line"><span class="comment">// 8</span></span><br><span class="line"><span class="comment">// 16</span></span><br></pre></td></tr></table></figure>
<h4 id="Array-Limitation-2"><a href="#Array-Limitation-2" class="headerlink" title="Array Limitation #2"></a>Array Limitation #2</h4><p>Arrays have a fixed capacity.</p>
<ul>
<li>Arrays must store their data sequentially in memory.</li>
<li>The <code>capacity</code> of an array is the maximum number of elements that can be stored.</li>
<li>The <code>size</code> of an array is the current number of elements stored in the array.</li>
</ul>
<p>The only way to add another element is to allocate a new, larger array and copy over all of the data</p>
<h3 id="std-vector"><a href="#std-vector" class="headerlink" title="std::vector"></a>std::vector</h3><p>The std::vector implements an array that dynamically grows in size automatically. However, all properties remain true:</p>
<ul>
<li>Array elements are a fixed data type.</li>
<li>At any given point, the array has a fixed capacity.</li>
<li>The array must be expanded when the capacity is reached.</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Calculating the memory seperation of elements in a std::vector.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @author</span></span><br><span class="line"><span class="comment"> *   Wade Fagen-Ulmschneider &lt;waf@illinois.edu&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../Cube.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> uiuc::Cube;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Cube&gt; cubes = &#123; Cube(<span class="number">11</span>), Cube(<span class="number">42</span>), Cube(<span class="number">400</span>) &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Examine capacity:  </span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Initial Capacity: "</span> &lt;&lt; cubes.capacity() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  cubes.push_back( Cube(<span class="number">800</span>) );</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Size after adding: "</span> &lt;&lt; cubes.size() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Capacity after adding: "</span> &lt;&lt; cubes.capacity() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Using pointer arithmetic, ask the computer to calculate</span></span><br><span class="line">  <span class="comment">// the offset from the beginning of the array to [2]:</span></span><br><span class="line">  <span class="keyword">int</span> offset = (<span class="keyword">long</span>)&amp;(cubes[<span class="number">2</span>]) - (<span class="keyword">long</span>)&amp;(cubes[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Memory separation: "</span> &lt;&lt; offset &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Find a specific `target` cube in the array:</span></span><br><span class="line">  Cube target = Cube(<span class="number">400</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">0</span>; i &lt; cubes.size(); i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (target == cubes[i]) &#123;</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Found target at ["</span> &lt;&lt; i &lt;&lt; <span class="string">"]"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Linked-List"><a href="#Linked-List" class="headerlink" title="Linked List"></a>Linked List</h3><p>A list <code>node</code> refers to pair of both the data and the link. Zero or more ListNode elements linked together form a Linked List.</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="2.png" width="70%" height="70%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Linked List</div>
</center>

<ul>
<li>A pointer called the “head pointer” stores the link to the beginning of the list.</li>
<li>A pointer to NULL (Ø) marks the end of the list.</li>
</ul>
<blockquote>
<p>List.h</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">const</span> T &amp; <span class="keyword">operator</span>[](<span class="keyword">unsigned</span> index);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertAtFront</span><span class="params">(<span class="keyword">const</span> T &amp; data)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We define this constructor to make sure that head_ is null-initialized.</span></span><br><span class="line">    List() : head_(<span class="literal">nullptr</span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We define a destructor to delete the memory allocated for the ListNode</span></span><br><span class="line">    <span class="comment">// objects when the List is destroyed.</span></span><br><span class="line">    ~List() &#123;</span><br><span class="line">      <span class="comment">// We'll walk through from the head.</span></span><br><span class="line">      ListNode *thru = head_;</span><br><span class="line">      <span class="keyword">while</span> (thru != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="comment">// Copy the address that the "thru" pointer has currently.</span></span><br><span class="line">        ListNode* toDelete = thru;</span><br><span class="line">        <span class="comment">// Step the pointer to the "next" pointer of the current node.</span></span><br><span class="line">        thru = thru-&gt;next;</span><br><span class="line">        <span class="comment">// Now, finally, we can delete the toDelete pointer. We could not</span></span><br><span class="line">        <span class="comment">// delete it before we stepped away from it above, because we needed</span></span><br><span class="line">        <span class="comment">// the next pointer information first.</span></span><br><span class="line">        <span class="keyword">delete</span> toDelete;</span><br><span class="line">        <span class="comment">// We don't strictly need to set toDelete to nullptr here because</span></span><br><span class="line">        <span class="comment">// it goes out of scope immediately after, but remember that you</span></span><br><span class="line">        <span class="comment">// should generally do this after deleting a pointer:</span></span><br><span class="line">        toDelete = <span class="literal">nullptr</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line">      <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">const</span> T &amp; data;</span><br><span class="line">        ListNode *next;</span><br><span class="line">        ListNode(<span class="keyword">const</span> T &amp; data) : data(data), next(<span class="literal">nullptr</span>) &#123; &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    ListNode *head_;   <span class="comment">/*&lt; Head pointer for our List */</span></span><br><span class="line">    </span><br><span class="line">    ListNode* _find(<span class="keyword">const</span> T &amp; data);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>List.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Simple linked-memory, templated list class.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @author</span></span><br><span class="line"><span class="comment"> *   Wade Fagen-Ulmschneider &lt;waf@illinois.edu&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Redundantly make sure theat List.h is included. Since List.h is written</span></span><br><span class="line"><span class="comment">// to include this file, we won't need to explicitly include List.hpp in</span></span><br><span class="line"><span class="comment">// the main.cpp file.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"List.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">const</span> T &amp; List&lt;T&gt;::<span class="keyword">operator</span>[](<span class="keyword">unsigned</span> index) &#123;</span><br><span class="line">  <span class="comment">// Start a `thru` pointer to advance thru the list:</span></span><br><span class="line">  ListNode *thru = head_;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Loop until the end of the list (or until a `nullptr`):</span></span><br><span class="line">  <span class="keyword">while</span> (index &gt; <span class="number">0</span> &amp;&amp; thru-&gt;next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    thru = thru-&gt;next;</span><br><span class="line">    index--;</span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line">  <span class="comment">// Return the data:</span></span><br><span class="line">  <span class="keyword">return</span> thru-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> List&lt;T&gt;::insertAtFront(<span class="keyword">const</span> T &amp; data) &#123;</span><br><span class="line">  <span class="comment">// Create a new ListNode on the heap:</span></span><br><span class="line">  ListNode *node = <span class="keyword">new</span> ListNode(data);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set the new node’s next pointer point the current</span></span><br><span class="line">  <span class="comment">// head of the List:</span></span><br><span class="line">  node-&gt;next = head_;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set the List’s head pointer to be the new node:</span></span><br><span class="line">  head_ = node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Finds and returns the ListNode containing `data` in the</span></span><br><span class="line"><span class="comment"> * List or `nullptr` if the data is not found.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">typename</span> List&lt;T&gt;::ListNode *List&lt;T&gt;::_find(<span class="keyword">const</span> T &amp; data) &#123;</span><br><span class="line">  ListNode *thru = head_;</span><br><span class="line">  <span class="keyword">while</span> (thru != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (thru-&gt;data == data) &#123; <span class="keyword">return</span> thru; &#125;</span><br><span class="line">    thru = thru-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nullptr</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="List-Capacity"><a href="#List-Capacity" class="headerlink" title="List Capacity"></a>List Capacity</h4><p>In a list, the time it takes to access a given index grows based on the size of the list.(In contrast, an array can access any element in a constant, fixed amount of time. Therefore, for accessing a given index, an array is faster than a list.)</p>
<h4 id="Linked-Memory"><a href="#Linked-Memory" class="headerlink" title="Linked Memory"></a>Linked Memory</h4><ul>
<li>Linked memory stores data in “nodes” linked together by “links” (pointers).</li>
<li>A basic linked memory structure is a Linked List, which consists of zero or more ListNodes lined together and a head pointer.</li>
<li>A linked list provides a flexible alternative to an array.</li>
</ul>
<h3 id="Array-and-List-Operations"><a href="#Array-and-List-Operations" class="headerlink" title="Array and List Operations"></a>Array and List Operations</h3><p>Arrays and Lists are both ordered collections of data. There are several key operations common to both all ordered collections that are worth analyzing.</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="3.png" width="70%" height="70%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Array and List</div>
</center>

<ol>
<li>Objective: Access a given index in the collection.<ul>
<li>Array: <code>O(1)</code></li>
<li>List: <code>O(n)</code></li>
</ul>
</li>
<li>Objective: Insert an element at the front<ul>
<li>Array: <code>O(1)</code> (Amortized constant time when array size is doubled when copied)</li>
<li>List: <code>O(1)</code></li>
</ul>
</li>
<li>Objective: Given data, find the location of that data in the collection.<ul>
<li>Unsorted Array: <code>O(n)</code></li>
<li>Sorted Array: <code>O( lg(n) )</code></li>
<li>List: <code>O(n)</code></li>
</ul>
</li>
<li>Objective: Given an element (array index), insert a new element immediately afterwards.<ul>
<li>Array: <code>O(n)</code></li>
<li>List: <code>O(1)</code></li>
</ul>
</li>
<li>Objective: Given an element (ListNode or index), delete the element immediately afterwards.<ul>
<li>Array: <code>O(n)</code></li>
<li>List: <code>O(1)</code></li>
</ul>
</li>
</ol>
<h3 id="Queue-Data-Structure"><a href="#Queue-Data-Structure" class="headerlink" title="Queue (Data Structure)"></a>Queue (Data Structure)</h3><p>A queue is a first-in first-out data structure that is similar to waiting in a line or <code>queue</code>.</p>
<p>A structure’s Abstract Data Type (ADT) is how data interacts with the structure. An ADT is not an implementation, it is a description.</p>
<h4 id="Queue-ADT"><a href="#Queue-ADT" class="headerlink" title="Queue ADT"></a>Queue ADT</h4><ul>
<li><strong>create</strong> : Creates an empty queue</li>
<li><strong>push</strong> : Adds data to the back of the queue</li>
<li><strong>pop</strong> : Removes data from the front of the queue empty è Returns true if the queue is empty</li>
<li><strong>empty</strong> : Returns true if the queue is empty</li>
</ul>
<p>A queue may be implemented with an array or a doubly-linked list. Both an array-based and a list-based implementation can be built to run in constant, O(1) running time.</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="4.png" width="70%" height="70%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Queue</div>
</center>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Create a std::queue:Duquesne Light</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; q;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add several strings to the queue:</span></span><br><span class="line">  q.push( <span class="string">"Orange"</span> );</span><br><span class="line">  q.push( <span class="string">"Blue"</span> );</span><br><span class="line">  q.push( <span class="string">"Illinois"</span> );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Print the front of the queue out and pop it off:</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"First pop(): "</span> &lt;&lt; q.front() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  q.pop();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add another string and then print ouf the front of the queue:</span></span><br><span class="line">  q.push( <span class="string">"Illini"</span> );</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Second pop(): "</span> &lt;&lt; q.front() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Stack-Data-Structure"><a href="#Stack-Data-Structure" class="headerlink" title="Stack (Data Structure)"></a>Stack (Data Structure)</h3><p>A stack is a last-in first-out data structure that is similar to a pile (stack) of papers.</p>
<h4 id="Stack-ADT"><a href="#Stack-ADT" class="headerlink" title="Stack ADT"></a>Stack ADT</h4><ul>
<li><strong>create</strong> : Creates an empty stack </li>
<li><strong>push</strong> : Adds data to the top of the stack</li>
<li><strong>pop</strong> : Removes data from the top of the stack </li>
<li><strong>empty</strong> : Returns true if the stack is empty</li>
</ul>
<p>A stack may be implemented with an array or a linked list. Both an array-based and a list-based implementation can be built to run in constant, O(1) running time.</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="5.png" width="70%" height="70%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Stack</div>
</center>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Create a std::stack:</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">stack</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; s;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add several strings to the stack:</span></span><br><span class="line">  s.push( <span class="string">"Orange"</span> );</span><br><span class="line">  s.push( <span class="string">"Blue"</span> );</span><br><span class="line">  s.push( <span class="string">"Illinois"</span> );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Print the front of the stack out and pop it off:</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"First pop(): "</span> &lt;&lt; s.top() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  s.pop();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add another string and then print ouf the front of the stack:</span></span><br><span class="line">  s.push( <span class="string">"Illini"</span> );</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Second pop(): "</span> &lt;&lt; s.top() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Tree"><a href="#Tree" class="headerlink" title="Tree"></a>Tree</h3><center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="6.png" width="70%" height="70%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Tree</div>
</center>

<h4 id="Terminology"><a href="#Terminology" class="headerlink" title="Terminology"></a>Terminology</h4><p>Most ancestry terms apply as expected:</p>
<ul>
<li>Sibling<br><code>B</code> and <code>D</code> are siblings. </li>
<li>Ancestor<br><code>M</code>, <code>L</code>, and <code>D</code> share <code>A</code> as a common ancestor.</li>
<li>Grandchild / grandchildren<br><code>M</code> is a <code>D</code>’s grandchild.</li>
<li><p>Grandparent<br><code>D</code> is <code>M</code>’s grandparent.</p>
</li>
<li><p>Trees formed with nodes and edges.</p>
</li>
<li>Trees must be <code>rooted</code>, <code>directed</code>, and <code>acyclic</code>.</li>
<li>The relationship between nodes in a tree follow classical ancestry terms (parent, child, etc).</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinaryTree</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line">      <span class="keyword">public</span>:</span><br><span class="line">        <span class="comment">// *See note below about how references are being used here.</span></span><br><span class="line">        T &amp; data;</span><br><span class="line">        <span class="comment">// Note that you can declare multiple pointers on the same line as</span></span><br><span class="line">        <span class="comment">// shorthand, like this:</span></span><br><span class="line">        <span class="comment">//   TreeNode *left, *right;</span></span><br><span class="line">        <span class="comment">// But since this requires you to write the "*" with each variable</span></span><br><span class="line">        <span class="comment">// name, it can be a little confusing, or prone to making a mistake.</span></span><br><span class="line">        <span class="comment">// Instead, you can declare the pointers on separate lines like this:</span></span><br><span class="line">        TreeNode* left;</span><br><span class="line">        TreeNode* right;</span><br><span class="line">        <span class="comment">// **See note below about how this initialization list is styled.</span></span><br><span class="line">        TreeNode(T &amp; data) : data(data), left(<span class="literal">nullptr</span>), right(<span class="literal">nullptr</span>) &#123; &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    TreeNode *root_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="Property"><a href="#Property" class="headerlink" title="Property"></a>Property</h4><ul>
<li>The <code>height</code> of a binary tree is the number of edges in the longest path from the root to a leaf.</li>
<li>A binary tree is <code>full</code> if and only if every node has either zero children or two children.</li>
<li>A binary tree is <code>perfect</code> if and only if all interior nodes have two children and leaves are at the same level.</li>
<li>A binary tree is <code>complete</code> if and only if the tree is perfect up until the last level and all leaf nodes on the last level are pushed to the left.</li>
</ul>
<h3 id="Binary-Search-Tree"><a href="#Binary-Search-Tree" class="headerlink" title="Binary Search Tree"></a>Binary Search Tree</h3><p>A binary search tree (BST) is an ordered binary tree capable of being used as a search structure:</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="7.png" width="70%" height="70%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">BST</div>
</center>


<p>A binary tree is a BST if for every node in the tree:</p>
<ul>
<li>Nodes in the left subtree are less than itself.</li>
<li>Nodes in the right subtree are greater than itself.</li>
</ul>
<h4 id="Dictionary-ADT"><a href="#Dictionary-ADT" class="headerlink" title="Dictionary ADT"></a>Dictionary ADT</h4><ul>
<li><strong>find</strong> : Finds the data associated with a key in the dictionary</li>
<li><strong>insert</strong> : Adds a key/data pair to the dictionary </li>
<li><strong>remove</strong> : Removes a key from the dictionary </li>
<li><strong>empty</strong> Returns true if the dictionary is empty</li>
</ul>
<p>BST-Based Dictionary</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="8.png" width="70%" height="70%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">BST Dictionary</div>
</center>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> D&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dictionary</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Dictionary();</span><br><span class="line">    <span class="function"><span class="keyword">const</span> D &amp; <span class="title">find</span><span class="params">(<span class="keyword">const</span> K &amp; key)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> K &amp; key, <span class="keyword">const</span> D &amp; data)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> D &amp; <span class="title">remove</span><span class="params">(<span class="keyword">const</span> K &amp; key)</span></span>;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line">      <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">const</span> K &amp; key;</span><br><span class="line">        <span class="keyword">const</span> D &amp; data;</span><br><span class="line">        TreeNode *left, *right;</span><br><span class="line">        TreeNode(<span class="keyword">const</span> K &amp; key, <span class="keyword">const</span> D &amp; data)</span><br><span class="line">: key(key), data(data), left(<span class="literal">nullptr</span>), right(<span class="literal">nullptr</span>) &#123; &#125;</span><br><span class="line">&#125;;</span><br><span class="line">  TreeNode *head_;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="In-Order-Predecessor-IOP"><a href="#In-Order-Predecessor-IOP" class="headerlink" title="In-Order Predecessor (IOP):"></a>In-Order Predecessor (IOP):</h4><p>The in-order predecessor is the previous node in an in-order traversal of a BST. The IOP of a node will always be the right-most node in<br>the node’s left sub-tree.</p>
<h4 id="BST-remove"><a href="#BST-remove" class="headerlink" title="BST::remove"></a>BST::remove</h4><ul>
<li>Zero children: Simple, delete the node. </li>
<li>One child: Simple, works like a linked list.</li>
<li>Two children:<ul>
<li>Find the IOP of the node to be removed.</li>
<li>Swap with the IOP.</li>
<li>Remove the node in it’s new position.</li>
</ul>
</li>
</ul>
<h4 id="BST-Analysis"><a href="#BST-Analysis" class="headerlink" title="BST Analysis"></a>BST Analysis</h4><ul>
<li>There are <strong>n!</strong> different ways to create BSTs with the same data.<ul>
<li>The worst-case BST will have a height proportional to the number of nodes.</li>
<li>An average BST will have a height proportional to the logarithm of the number of nodes.</li>
</ul>
</li>
<li>Using a height balance factor, we can formalize if a given BST is balanced.</li>
</ul>
<h3 id="Balanced-BST"><a href="#Balanced-BST" class="headerlink" title="Balanced BST"></a>Balanced BST</h3><p>Balanced BSTs are height-balanced trees that ensures nearly half of the data is<br>located in each subtree:</p>
<h4 id="BST-Rotations"><a href="#BST-Rotations" class="headerlink" title="BST Rotations"></a>BST Rotations</h4><p><a href="https://zhangruochi.com/AVL-Tree/2019/09/15/">https://zhangruochi.com/AVL-Tree/2019/09/15/</a></p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="9.png" width="70%" height="70%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">BST Dictionary</div>
</center>

<ul>
<li>BST rotations restore the <code>balance property</code> to a tree after an insert causes a BST to be out of balance.</li>
<li>Four possible rotations: L, R, LR, RL<br>  – Rotations are local operations.<br>  – Rotations do not impact the broader tree.<br>  – Rotations run in O(1) time.’</li>
</ul>
<h3 id="B-tree"><a href="#B-tree" class="headerlink" title="B tree"></a>B tree</h3><blockquote>
<p><a href="https://www.cnblogs.com/nullzx/p/8729425.html" target="_blank" rel="noopener">https://www.cnblogs.com/nullzx/p/8729425.html</a></p>
</blockquote>
<p>大规模数据存储中，实现索引查询这样一个实际背景下，树节点存储的元素数量是有限的（如果元素数量非常多的话，查找就退化成节点内部的线性查找了），这样导致二叉查找树结构由于树的深度过大而造成磁盘I/O读写过于频繁，进而导致查询效率低下，因此我们该想办法降低树的深度，从而减少磁盘查找存取的次数。一个基本的想法就是：采用多叉树结构（由于树节点元素数量是有限的，自然该节点的子树数量也就是有限的）。</p>
<h4 id="B-Tree-Properties"><a href="#B-Tree-Properties" class="headerlink" title="B-Tree Properties"></a>B-Tree Properties</h4><p>For a B-tree “of order m”:</p>
<ol>
<li>All keys within a node are in sorted order. </li>
<li>Each node contains no more than m-1 keys.</li>
<li>Each internal node has exactly one more child than key(at most m children, so a B-tree of order m is like an m-way tree). <ul>
<li>A root node can be a leaf or have [2, m] children.</li>
<li>Each non-root, internal node has [ceil(m/2), m] children.</li>
</ul>
</li>
<li>All leaves are on the same level.</li>
</ol>
<h4 id="B-Tree-Insert"><a href="#B-Tree-Insert" class="headerlink" title="B-Tree Insert"></a>B-Tree Insert</h4><p>插入操作是指插入一条记录，即（key,value）的键值对。如果B树中已存在需要插入的键值对，则用需要插入的value替换旧的value。若B树不存在这个key,则一定是在叶子结点中进行插入操作。</p>
<ul>
<li>根据要插入的key的值，找到叶子结点并插入。</li>
<li>判断当前结点key的个数是否小于等于m-1，若满足则结束，否则进行第3步。</li>
<li>以结点中间的key为中心分裂成左右两部分，然后将这个中间的key插入到父结点中，这个key的左子树指向分裂后的左半部分，这个key的右子支指向分裂后的右半部分，然后将当前结点指向父结点，继续进行第3步。</li>
</ul>
<h4 id="B-tree-Search"><a href="#B-tree-Search" class="headerlink" title="B-tree Search"></a>B-tree Search</h4><p>Use can use the binary search ti replace the linear seach. But it is not important because the process of comsuming most time is <code>_fetchChild</code>.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * BTree class outline.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @author</span></span><br><span class="line"><span class="comment"> *   Wade Fagen-Ulmschneider &lt;waf@illinois.edu&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BTree</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BTreeNode</span> &#123;</span></span><br><span class="line">      <span class="keyword">public</span>:</span><br><span class="line">        K* keys_;</span><br><span class="line">        <span class="keyword">unsigned</span> keys_ct_;</span><br><span class="line">        <span class="keyword">bool</span> _isLeaf;</span><br><span class="line"></span><br><span class="line">        BTreeNode() : keys_(<span class="literal">nullptr</span>), keys_ct_(<span class="number">0</span>), _isLeaf(<span class="literal">true</span>) &#123; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">isLeaf</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    BTreeNode *root_;</span><br><span class="line"></span><br><span class="line">    BTreeNode &amp; _fetchChild(<span class="keyword">unsigned</span> index);</span><br><span class="line">    <span class="keyword">bool</span> _exists(BTreeNode &amp; node, <span class="keyword">const</span> K &amp; key);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"BTree.hpp"</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * An empty BTree.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @author</span></span><br><span class="line"><span class="comment"> *   Wade Fagen-Ulmschneider &lt;waf@illinois.edu&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"BTree.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K&gt;</span><br><span class="line"><span class="keyword">bool</span> BTree&lt;K&gt;::_exists(BTree&lt;K&gt;::BTreeNode &amp; node, <span class="keyword">const</span> K &amp; key) &#123;</span><br><span class="line">  <span class="keyword">unsigned</span> i;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; node.keys_ct_ &amp;&amp; key &lt; node.keys_[i]; i++) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( i &lt; node.keys_ct_ &amp;&amp; key == node.keys_[i] ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( node.isLeaf() ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    BTreeNode nextChild = node._fetchChild(i);</span><br><span class="line">    <span class="keyword">return</span> _exists(nextChild, key);</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K&gt;</span><br><span class="line"><span class="keyword">bool</span> BTree&lt;K&gt;::BTreeNode::isLeaf() <span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="comment">// Stub implementation </span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K&gt;</span><br><span class="line"><span class="keyword">typename</span> BTree&lt;K&gt;::BTreeNode &amp; BTree&lt;K&gt;::_fetchChild(<span class="keyword">unsigned</span> index) &#123;</span><br><span class="line">  <span class="comment">// Stub implementation </span></span><br><span class="line">  <span class="keyword">return</span> *root_;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Heap"><a href="#Heap" class="headerlink" title="Heap"></a>Heap</h3><p>(min)Heap: A <strong>complete</strong> binary tree T is a min-heap if:</p>
<ul>
<li>T={} or</li>
<li>T = {r, $T_L$, $T_R$}, where r is less than the roots of {$T_L$, $T_R$} and {$T_L$, $T_R$} are min-heaps.</li>
</ul>
<h4 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">Heap</span>&lt;T&gt;:</span>:_insert(<span class="keyword">const</span> T &amp; key) &#123;</span><br><span class="line"><span class="comment">// Check to ensure there’s space to insert an element // ...if not, grow the array</span></span><br><span class="line"><span class="keyword">if</span> ( size_ == capacity_ ) &#123; _growArray(); &#125;</span><br><span class="line"><span class="comment">// Insert the new element at the end of the array item_[++size] = key;</span></span><br><span class="line">   <span class="comment">// Restore the heap property</span></span><br><span class="line">_heapifyUp(size); </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">Heap</span>&lt;T&gt;:</span>:_insert(<span class="keyword">const</span> T &amp; key) &#123;</span><br><span class="line"><span class="comment">// Check to ensure there’s space to insert an element // ...if not, grow the array</span></span><br><span class="line">    <span class="keyword">if</span> ( size_ == capacity_ ) &#123; _growArray(); &#125;</span><br><span class="line"><span class="comment">// Insert the new element at the end of the array item_[++size] = key;</span></span><br><span class="line">  <span class="comment">// Restore the heap property</span></span><br><span class="line">    _heapifyUp(size); </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">Heap</span>&lt;T&gt;:</span>:_heapifyUp( _________________ ) &#123;</span><br><span class="line">    <span class="keyword">if</span> ( index &gt; _________ ) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( item_[index] &lt; item_[ parent(index) ] ) &#123;</span><br><span class="line">            <span class="built_in">std</span>::swap( item_[index], item_[ parent(index) ] );</span><br><span class="line">            _heapifyUp( ________________ );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="removeMin"><a href="#removeMin" class="headerlink" title="removeMin"></a>removeMin</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">Heap</span>&lt;T&gt;:</span>:_removeMin() &#123;</span><br><span class="line"><span class="comment">// Swap with the last value </span></span><br><span class="line">    T minValue = item_[<span class="number">1</span>]; </span><br><span class="line">    item_[<span class="number">1</span>] = item_[size_]; </span><br><span class="line">    size--;</span><br><span class="line"><span class="comment">// Restore the heap property </span></span><br><span class="line">    _heapifyDown();</span><br><span class="line">  <span class="comment">// Return the minimum value</span></span><br><span class="line">  <span class="keyword">return</span> minValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">Heap</span>&lt;T&gt;:</span>:_heapifyDown(<span class="keyword">int</span> index) &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !_isLeaf(index) ) &#123;</span><br><span class="line">        T minChildIndex = _minChild(index);</span><br><span class="line">        <span class="keyword">if</span> ( item_[index] ___ item_[minChildIndex] ) &#123;</span><br><span class="line">            <span class="built_in">std</span>::swap( item_[index], item_[minChildIndex] );</span><br><span class="line">            _heapifyDown( ________________ ); &#125;</span><br><span class="line">        &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Build-heap"><a href="#Build-heap" class="headerlink" title="Build heap"></a>Build heap</h4><ol>
<li>Sort the array–it’s a heap!</li>
<li><p>heapifyUp</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">Heap</span>&lt;T&gt;:</span>:buildHeap() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">2</span>; i &lt;= size_; i++) &#123;</span><br><span class="line">        heapifyUp(i); A P N O W</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>heapifyDown</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">Heap</span>&lt;T&gt;:</span>:buildHeap() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = parent(size); i &gt; <span class="number">0</span>; i--) &#123; </span><br><span class="line">        heapifyDown(i);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>Data Structure and Algorithm</category>
        <category>Programming Language</category>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>C++ Review</title>
    <url>/C-Plus-Plus-Review/2020/01/21/</url>
    <content><![CDATA[<p>C++ is a strongly typed programming language where every variable has a <code>type</code>, <code>name</code>, <code>value</code>, and <code>location</code> in memory.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> value = <span class="number">42</span>;</span><br></pre></td></tr></table></figure>
<h3 id="C-types"><a href="#C-types" class="headerlink" title="C++ types"></a>C++ types</h3><p>the type of a variable defines the contents of the variable. Every <code>type</code> is either:</p>
<h4 id="Primitive"><a href="#Primitive" class="headerlink" title="Primitive"></a>Primitive</h4><ul>
<li>int, stores integers</li>
<li>char, stores single characters/single byte</li>
<li>bool, stores a Boolean (true or false)</li>
<li>float, stores a floating point number</li>
<li>double, stores a double-precision floating point number </li>
<li>void, denotes the absence of a value</li>
</ul>
<h4 id="User-defined"><a href="#User-defined" class="headerlink" title="User-defined"></a>User-defined</h4><ul>
<li>Std</li>
<li>An unbounded number of user-defined types can exist – we’ll create many of our own!</li>
</ul>
<h3 id="C-program"><a href="#C-program" class="headerlink" title="C++ program"></a>C++ program</h3><p>Every C++ program must contain a starting point. By the C++ standard, the starting point is a function:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<p>By convention, the return value of main is 0 (zero) if the program was successful and non-zero on errors.</p>
<h3 id="Classes"><a href="#Classes" class="headerlink" title="Classes"></a>Classes</h3><h4 id="Encapsulation-1"><a href="#Encapsulation-1" class="headerlink" title="Encapsulation #1"></a>Encapsulation #1</h4><p>C++ classes encapsulate <strong>data</strong> and associated <strong>functionality</strong> into an object.</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="1.png" width="80%" height="90%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Encapsulation</div>
</center>

<p>In C++, data and functionality are separated into two separate protections: public and private.</p>
<ul>
<li>Public members can be accessed by client code.</li>
<li>Private members cannot be accessed by client code (only used within the class itself).</li>
</ul>
<h4 id="Encapsulation-2"><a href="#Encapsulation-2" class="headerlink" title="Encapsulation #2"></a>Encapsulation #2</h4><p>In C++, the interface (.h file) to the class is defined separately from the implementation (.cpp file).</p>
<p>A header file (.h) defines the interface to the class, which includes:</p>
<ul>
<li>Declaration of all member variables</li>
<li>Declaration of all member functions</li>
</ul>
<p>An implementation file (.cpp) contains the code to implement the class (or other C++ code).</p>
<h3 id="C-standard-library"><a href="#C-standard-library" class="headerlink" title="C++ standard library"></a>C++ standard library</h3><p>The C++ standard library (std) provides a set of commonly used functionality and data structures to build upon.</p>
<h4 id="Std-Organization"><a href="#Std-Organization" class="headerlink" title="Std Organization"></a>Std Organization</h4><p>The C++ standard library is organized into many separate sub-libraries that can be #include’d in any C++ program.</p>
<ul>
<li>The iostream header includes operations for reading/writing to files and the console itself, including std::cout.</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>All functionality used from the standard library will be part of the <code>std namespace</code>.<ul>
<li>Namespaces allow us to avoid name conflicts for commonly used names.</li>
<li>If a feature from a namespace is used often, it can be imported into the global space with using:<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>Cube.h</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Simple C++ class for representing a Cube.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @author</span></span><br><span class="line"><span class="comment"> *   Wade Fagen-Ulmschneider &lt;waf@illinois.edu&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// All header (.h) files start with "#pragma once":</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// A class is defined with the `class` keyword, the name</span></span><br><span class="line"><span class="comment">// of the class, curly braces, and a required semicolon</span></span><br><span class="line"><span class="comment">// at the end:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cube</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:  <span class="comment">// Public members:</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getVolume</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getSurfaceArea</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setLength</span><span class="params">(<span class="keyword">double</span> length)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>: <span class="comment">// Private members:</span></span><br><span class="line">    <span class="keyword">double</span> length_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Cube.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Simple C++ class for representing a Cube.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @author</span></span><br><span class="line"><span class="comment"> *   Wade Fagen-Ulmschneider &lt;waf@illinois.edu&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Cube.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> Cube::getVolume() &#123;</span><br><span class="line">  <span class="keyword">return</span> length_ * length_ * length_;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> Cube::getSurfaceArea() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">6</span> * length_ * length_;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Cube::setLength(<span class="keyword">double</span> length) &#123;</span><br><span class="line">  length_ = length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>main.cpp</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * C++ code for creating a Cube of length 2.4 units.</span></span><br><span class="line"><span class="comment"> * - See ../cpp-std/main.cpp for a similar program with print statements.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @author</span></span><br><span class="line"><span class="comment"> *   Wade Fagen-Ulmschneider &lt;waf@illinois.edu&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Cube.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Cube c;</span><br><span class="line"></span><br><span class="line">  c.setLength(<span class="number">3.48</span>);</span><br><span class="line">  <span class="keyword">double</span> volume = c.getVolume();</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Volume: "</span> &lt;&lt; volume &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Stack-Memory"><a href="#Stack-Memory" class="headerlink" title="Stack Memory"></a>Stack Memory</h3><p>In C++, the programmer has control over the memory and lifecycle of every variable! By default, variables live in stack memory.</p>
<p>Stack memory is associated with the <code>current</code> function and the memory’s lifecycle is tied to the function(When the function returns or ends, the stack memory of that function is released).</p>
<p>Stack memory always starts from high addresses and grows down.</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="2.png" width="50%" height="50%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Encapsulation</div>
</center>


<h4 id="amp"><a href="#amp" class="headerlink" title="&amp;"></a>&amp;</h4><p>In C++, the &amp; operator returns the memory address of a variable.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * C++ program using the &amp; operator to find the address of a variable in memory.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @author</span></span><br><span class="line"><span class="comment"> *   Wade Fagen-Ulmschneider &lt;waf@illinois.edu&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> num = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Value: "</span>   &lt;&lt;  num &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Address: "</span> &lt;&lt; &amp;num &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Pointer"><a href="#Pointer" class="headerlink" title="Pointer"></a>Pointer</h4><p>A pointer is a variable that stores the memory address of the data.</p>
<ul>
<li>Simply put: pointers are a level of indirection from the data.</li>
<li>In C++, a pointer is defined by adding an * to the type of the variable.</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> * p = &amp;num;</span><br></pre></td></tr></table></figure>
<ul>
<li>Given a pointer, a level of indirection can be removed with the dereference operator *.</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> * p = &amp;num;</span><br><span class="line"><span class="keyword">int</span> value_in_num = *p; </span><br><span class="line">*p = <span class="number">42</span>;</span><br></pre></td></tr></table></figure>
<h4 id="Puzzle"><a href="#Puzzle" class="headerlink" title="Puzzle"></a>Puzzle</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">someOtherFunction</span><span class="params">()</span></span>;  <span class="comment">// Forward decl</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Cube.h"</span></span></span><br><span class="line"><span class="keyword">using</span> uiuc::Cube;</span><br><span class="line"></span><br><span class="line"><span class="function">Cube *<span class="title">CreateUnitCube</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Cube cube;</span><br><span class="line">  cube.setLength(<span class="number">15</span>);</span><br><span class="line">  <span class="keyword">return</span> &amp;cube;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Cube *c = CreateUnitCube();</span><br><span class="line">  someOtherFunction();</span><br><span class="line">  <span class="keyword">double</span> a = c-&gt;getSurfaceArea();</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Surface Area: "</span> &lt;&lt; a &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">double</span> v = c-&gt;getVolume();</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Volume: "</span> &lt;&lt; v &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="3.png" width="50%" height="50%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Stack Memory</div>
</center>

<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="4.png" width="50%" height="50%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Stack Memory</div>
</center>


<h3 id="Heap-Memory"><a href="#Heap-Memory" class="headerlink" title="Heap Memory"></a>Heap Memory</h3><p>Heap memory allows us to create memory independent of the lifecycle of a function.</p>
<ul>
<li>The only way to create heap memory in C++ is with the <code>new</code> operator.</li>
<li>The new operator returns a <code>pointer</code> to the memory storing the data – not an instance of the data itself.</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> * numPtr = <span class="keyword">new</span> <span class="keyword">int</span>;</span><br></pre></td></tr></table></figure>
<h4 id="nullptr"><a href="#nullptr" class="headerlink" title="nullptr"></a>nullptr</h4><p>The C++ keyword nullptr is a pointer that points to the memory address 0x0.</p>
<ul>
<li>nullptr represents a pointer to <code>nowhere</code></li>
<li>Address 0x0 is reserved and never used by the system</li>
<li>Address 0x0 will always generate an “segmentation fault” when accessed.</li>
<li>Calls to delete 0x0 are ignored</li>
</ul>
<h4 id="Arrow-Operator-gt"><a href="#Arrow-Operator-gt" class="headerlink" title="Arrow Operator (-&gt;)"></a>Arrow Operator (-&gt;)</h4><p>When an object is stored via a pointer, access can be made to member functions using the <code>-&gt;</code> operator:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c -&gt; getVolume();</span><br><span class="line">(*c).getVolume();</span><br></pre></td></tr></table></figure>
<h3 id="C-program’s-source-code-organization"><a href="#C-program’s-source-code-organization" class="headerlink" title="C++ program’s source code organization"></a>C++ program’s source code organization</h3><ul>
<li><p><code>.h</code> files are “header files”. These usually have definitions of objects and declarations of global functions. Recently, some people name header files with a “.hpp” suffix instead.</p>
</li>
<li><p><code>.cpp</code> files are often called the “implementation files,” or simply the “source files”. This is where most function definitions and main program logic go.</p>
</li>
</ul>
<p>Take the <code>Cube</code> code above as example:</p>
<p>When you write #include <iostream>, the compiler will look for the iostream header file in a system-wide library path that is located outside of your current directory.</iostream></p>
<p>#include “Cube.h” just like in the Cube.cpp file. You have to include the necessary headers in every cpp file where they are needed. However, you shouldn’t use #include to literally include one cpp file in another! There is no need to write #include “Cube.cpp” because the function definitions in the Cube.cpp file will be compiled separately and then linked to the code from the main.cpp file.</p>
<p>The Cube.cpp files and main.cpp files make requests to include various header files. (The compiler might automatically skip some requests because of #pragma once to avoid including multiple times in the same file.) The contents of the requested header files will be temporarily copied into the cpp source code file where they are included. Then, the cpp file with all of its extra included content will be compiled into something called an object file. (Our provided examples keep the object files hidden in a subdirectory, so you don’t need to bother with them. But, if you see a file that has a .o extension, that is an object file.) Each cpp file is separately compiled into an object file. So, in this case Cube.cpp will be compiled into Cube.o, and main.cpp will be compiled into <code>main.o</code>.</p>
<h3 id="Class-Constructors"><a href="#Class-Constructors" class="headerlink" title="Class Constructors"></a>Class Constructors</h3><p><code>Automatic Default Constructor</code>:  If we do not provide any custom constructors, the C++ compiler provides an automatic default constructor for our class for free. The automatic default constructor will only initialize all member variables to their default values. If any custom constructor is defined, an automatic default constructor is not defined.</p>
<p><code>Custom Default Constructor</code>: The simplest constructor we can provide is a custom default constructor that specifies the state of the object when the object is constructed. We define one by creating:</p>
<ul>
<li>A member function with the same name of the class</li>
<li>The function takes zero parameters.</li>
<li>The function does not have a return type.</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Cube::Cube()  <span class="comment">// custom default constructor</span></span><br></pre></td></tr></table></figure>
<p><code>Custom Constructors</code>: We can also specify custom, non-default constructors that require client code to supply arguments.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Cube::Cube(<span class="keyword">double</span> length)</span><br><span class="line"><span class="comment">// one-argument ctor specifying initial length</span></span><br></pre></td></tr></table></figure>
<h3 id="Copy-Constructors"><a href="#Copy-Constructors" class="headerlink" title="Copy Constructors"></a>Copy Constructors</h3><p>In C++, a copy constructor is a special constructor that exists to make a copy of an existing object.</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="5.png" width="70%" height="70%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">copy constructor</div>
</center>

<p>If we do not provide a custom copy constructor, the C++ compiler provides an automatic copy constructor for our class for free. The automatic copy constructor will copy the contents of all member variables.</p>
<p>A custom copy constructor is:</p>
<ul>
<li>Has exactly one argument<br>– The argument must be const reference of the same type as the class.</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Cube::Cube(const Cube &amp; obj)</span><br></pre></td></tr></table></figure>
<p>Often, copy constructors are invoked automatically:</p>
<ul>
<li>Passing an object as a parameter (by value) </li>
<li>Returning an object from a function (by value) </li>
<li>Initializing a new object</li>
</ul>
<h3 id="Assignment-Operator"><a href="#Assignment-Operator" class="headerlink" title="Assignment Operator"></a>Assignment Operator</h3><p>A custom assignment operator is:</p>
<ul>
<li>Is a public member function of the class.</li>
<li>Has the function name <code>operator=</code>.</li>
<li>Has a return value of a reference of the class’ type.</li>
<li>Has exactly one argument<br>– The argument must be const reference of the class’ type.</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Cube &amp; Cube::<span class="keyword">operator</span>=(<span class="keyword">const</span> Cube &amp; obj) &#123;</span><br><span class="line">  length_ = obj.length_;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Assignment operator invoked!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Variable-Storage"><a href="#Variable-Storage" class="headerlink" title="Variable Storage"></a>Variable Storage</h3><p> In C++, an instance of a variable can be stored directly <code>in memory</code>, <code>accessed by pointer</code>, or <code>accessed by reference</code>.</p>
 <center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="4.png" width="70%" height="70%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Variable Storage</div>
</center>

<h4 id="Direct-Storage"><a href="#Direct-Storage" class="headerlink" title="Direct Storage"></a>Direct Storage</h4><p>By default, variables are stored directly in memory. </p>
<ul>
<li>The type of a variable has no modifiers.</li>
<li>The object takes up exactly its size in memory.</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Cube c;            <span class="comment">// Stores a Cube in memory</span></span><br><span class="line"><span class="keyword">int</span> i;             <span class="comment">// Stores an integer in memory</span></span><br><span class="line">uiuc::HSLAPixel p; <span class="comment">// Stores a pixel in memory</span></span><br></pre></td></tr></table></figure>
<h4 id="Storage-by-Pointer"><a href="#Storage-by-Pointer" class="headerlink" title="Storage by Pointer"></a>Storage by Pointer</h4><ul>
<li>The type of a variable is modified with an asterisk (*). </li>
<li>A pointer takes a “memory address width” of memory<br>(ex: 64 bits on a 64-bit system).</li>
<li>The pointer “points” to the allocated space of the object.</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Cube *c;            <span class="comment">// Pointer to a Cube in memory</span></span><br><span class="line"><span class="keyword">int</span> *i;             <span class="comment">// Pointer to an integer in memory</span></span><br><span class="line">uiuc::HSLAPixel *p; <span class="comment">// Pointer to a pixel in memory</span></span><br></pre></td></tr></table></figure>
<h4 id="Storage-by-Reference"><a href="#Storage-by-Reference" class="headerlink" title="Storage by Reference"></a>Storage by Reference</h4><ul>
<li>A reference is an alias to existing memory and is denoted in the type with an ampersand (&amp;).</li>
<li>A reference <code>does not store</code> memory itself, it is only an alias to another variable.</li>
<li>The alias must be assigned when the variable is initialized.</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Cube &amp;c = cube; <span class="comment">// Alias to the variable `cube` </span></span><br><span class="line"><span class="keyword">int</span> &amp;i = count; <span class="comment">// Alias to the variable `i` uiuc::HSLAPixel &amp;p; // Illegal! Must alias something</span></span><br><span class="line">when variable is initialized.</span><br></pre></td></tr></table></figure>
<h4 id="Pass-by"><a href="#Pass-by" class="headerlink" title="Pass by"></a>Pass by</h4><p>Identical to storage, arguments can be passed to functions in three different ways:</p>
<ul>
<li>Pass by <strong>value</strong> (default)</li>
<li>Pass by <strong>pointer</strong> (modified with *)</li>
<li>Pass by <strong>reference</strong> (modified with &amp;, acts as an alias)</li>
</ul>
<h3 id="Class-Destructor"><a href="#Class-Destructor" class="headerlink" title="Class Destructor"></a>Class Destructor</h3><p>When an instance of a class is cleaned up, the class destructor is the last call in a class’s lifecycle.</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="7.png" width="80%" height="90%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Destructor</div>
</center>

<p>An destructor should never be called directly. Instead, it is automatically called when the object’s memory is being reclaimed by the system.</p>
<ul>
<li>If the object is on the stack, when the function returns</li>
<li>If the object is on the heap, when <code>delete</code> is used</li>
</ul>
<p>To add custom behavior to the end-of-life of the function, a custom destructor can be defined as:</p>
<ul>
<li>A custom destructor is a member function.</li>
<li>The function’s destructor is the name of the class,<br>preceded by a tilde ~.</li>
<li>All destructors have zero arguments and no return type.</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Cube::~Cube(); <span class="comment">// Custom destructor</span></span><br></pre></td></tr></table></figure>
<p>A custom destructor is essential when an object allocates an external resource that must be closed or freed when the object is destroyed. Examples:</p>
<ul>
<li>Heap memory</li>
<li>Open files</li>
<li>Shared memory</li>
</ul>
<h3 id="Creating-Templated-Types"><a href="#Creating-Templated-Types" class="headerlink" title="Creating Templated Types"></a>Creating Templated Types</h3><p>A template variable is defined by declaring it before the beginning of a class or function</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span> &#123;</span> </span><br><span class="line">  ...</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  T data_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(T a, T b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b) &#123; <span class="keyword">return</span> a; &#125; </span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h3><p>A base class is a generic form of a specialized, derived class.</p>
<h4 id="Initialization"><a href="#Initialization" class="headerlink" title="Initialization"></a>Initialization</h4><p>When a derived class is initialized, the derived class must construct the base class:</p>
<ul>
<li>Cube must construct Shape</li>
<li>By default, uses default constructor</li>
<li>Custom constructor can be used with an initialization list</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A `Cube` class inheriting from a `Shape`</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @author</span></span><br><span class="line"><span class="comment"> *   Wade Fagen-Ulmschneider &lt;waf@illinois.edu&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Cube.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Shape.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> uiuc &#123;</span><br><span class="line">  Cube::Cube(<span class="keyword">double</span> width, uiuc::HSLAPixel color) : Shape(width) &#123;</span><br><span class="line">    color_ = color;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">double</span> Cube::getVolume() <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="comment">// Cannot access Shape::width_ due to it being `private`</span></span><br><span class="line">    <span class="comment">// ...instead we use the public Shape::getWidth(), a public function</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> getWidth() * getWidth() * getWidth();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Access-Control"><a href="#Access-Control" class="headerlink" title="Access Control"></a>Access Control</h4><p>When a base class is inherited, the derived class:</p>
<ul>
<li>Can access all public members of the base class</li>
<li>Can not access private members of the base class</li>
</ul>
<h4 id="Initializer-List"><a href="#Initializer-List" class="headerlink" title="Initializer List"></a>Initializer List</h4><p>The syntax to initialize the base class is called the initializer list and can be used for several purposes:</p>
<ul>
<li>Initialize a base class</li>
<li>Initialize the current class using another constructor </li>
<li>Initialize the default values of member variables</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Shape.h"</span></span></span><br><span class="line"></span><br><span class="line">Shape::Shape() : Shape(<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="comment">// Nothing.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Shape::Shape(<span class="keyword">double</span> width) : width_(width) &#123;</span><br><span class="line">  <span class="comment">// Nothing.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> Shape::getWidth() <span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> width_;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Programming Language</category>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>rails tutorials: sessions</title>
    <url>/rails-tutorials-sessions/2020/01/20/</url>
    <content><![CDATA[<p>HTTP 协议没有状态，每个请求都是独立的事务，无法使用之前请求中的信息。所以，在 HTTP 协议中无法 在两个页面之间记住用户的身份。需要用户登录的应用必须使用会话(session)。会话是两台电脑(例如运 行 Web 浏览器的客户端电脑和运行 Rails 的服务器)之间的半永久性连接。在 Rails 中实现会话最常见的方式是使用 cookie。cookie 是存储在用户浏览器中的少量文本。访问其他页面时，cookie 中存储的信息仍在，所以可以在 cookie 中存储一些信息，例如用户的 ID，让应用从数据库中检索 已登录的用户。这一节使用 Rails 提供的 session 方法实现临时会话，浏览器关闭后会话自动失效。</p>
<p>把会话看成 REST 式资源便于操作，访问登录页面时渲染一个用于创建会话的表单，登录时创建会话，退出 时再把会话销毁。</p>
<h3 id="创建-sessions-控制器"><a href="#创建-sessions-控制器" class="headerlink" title="创建 sessions 控制器"></a>创建 sessions 控制器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rails generate controller Sessions new</span><br></pre></td></tr></table></figure>
<h3 id="获得会话的标准-REST-式动作"><a href="#获得会话的标准-REST-式动作" class="headerlink" title="获得会话的标准 REST 式动作"></a>获得会话的标准 REST 式动作</h3><blockquote>
<p>config/routes.rb</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Rails.application.routes.draw <span class="keyword">do</span></span><br><span class="line">     </span><br><span class="line">  root <span class="string">"todo_lists#index"</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># # For details on the DSL available within this file, see https://guides.rubyonrails.org/routing.html</span></span><br><span class="line">  <span class="comment"># resources :todo_lists do</span></span><br><span class="line">  <span class="comment">#   resources :todo_items</span></span><br><span class="line">  <span class="comment"># end</span></span><br><span class="line"></span><br><span class="line">  get  <span class="string">'/login'</span>,   <span class="symbol">to:</span> <span class="string">'sessions#new'</span></span><br><span class="line">  post <span class="string">'/login'</span>,   <span class="symbol">to:</span> <span class="string">'sessions#create'</span></span><br><span class="line">  delete <span class="string">"/logout"</span>,<span class="symbol">to:</span> <span class="string">"sessions#destroy"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="创建登录表单"><a href="#创建登录表单" class="headerlink" title="创建登录表单"></a>创建登录表单</h3><blockquote>
<p>app/views/sessions/new.html.erb</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;Login&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;%= form_with(url: login_path, scope: :session, local: true) do |f| %&gt;</span></span><br><span class="line"><span class="regexp">&lt;div class="field"&gt;</span></span><br><span class="line"><span class="regexp">&lt;%= f.label :username %&gt; &lt;br/</span>&gt; &lt;%= f.text_field <span class="symbol">:username</span> %&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;p/</span>&gt;</span><br><span class="line">&lt;div class="field"&gt;</span><br><span class="line">&lt;%= f.label <span class="symbol">:password</span> %&gt; &lt;br/&gt;</span><br><span class="line">&lt;%= f.password_field <span class="symbol">:password</span> %&gt; &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;p/</span>&gt;</span><br><span class="line">&lt;div class="actions"&gt;</span><br><span class="line">&lt;%= f.submit <span class="string">"Login"</span> %&gt; &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;% end %&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="编写控制器"><a href="#编写控制器" class="headerlink" title="编写控制器"></a>编写控制器</h3><blockquote>
<p>app/controllers/application_controller.rb</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplicationController</span> &lt; ActionController::Base</span></span><br><span class="line">  before_action <span class="symbol">:ensure_login</span></span><br><span class="line">  helper_method <span class="symbol">:logged_in?</span>, <span class="symbol">:current_user</span></span><br><span class="line"></span><br><span class="line">  protected</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">ensure_login</span></span></span><br><span class="line">        redirect_to login_path <span class="keyword">unless</span> logged_in?</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">logged_in?</span></span></span><br><span class="line">          session[<span class="symbol">:user_id</span>] <span class="comment"># nil is false</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">current_user</span></span></span><br><span class="line">          @current_user <span class="params">||</span>= User.find(session[<span class="symbol">:user_id</span>])</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>app/controllers/sessions_controller.rb</p>
</blockquote>
<figure class="highlight rb"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SessionsController</span> &lt; ApplicationController</span></span><br><span class="line"></span><br><span class="line">  skip_before_action <span class="symbol">:ensure_login</span>, <span class="symbol">only:</span> [<span class="symbol">:new</span>, <span class="symbol">:create</span>]</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">new</span></span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">create</span></span></span><br><span class="line">    user = User.find_by(<span class="symbol">username:</span> params[<span class="symbol">:session</span>][<span class="symbol">:username</span>])</span><br><span class="line">    <span class="keyword">if</span> user &amp;&amp; user.authenticate(params[<span class="symbol">:session</span>][<span class="symbol">:password</span>])</span><br><span class="line">        session[<span class="symbol">:user_id</span>] = user.id</span><br><span class="line">        redirect_to root_path, <span class="symbol">notice:</span> <span class="string">"Logged in successfully"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        flash.now[<span class="symbol">:danger</span>] = <span class="string">'Invalid username/password combination'</span></span><br><span class="line">        redirect_to login_path, <span class="symbol">alert:</span> <span class="string">"Invalid username/password combination"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">destroy</span></span></span><br><span class="line">    reset_session</span><br><span class="line">    redirect_to login_path, <span class="symbol">notice:</span> <span class="string">"You have been logged out"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="修改其他布局"><a href="#修改其他布局" class="headerlink" title="修改其他布局"></a>修改其他布局</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> <span class="attr">logged_in</span>? %&gt;</span></span><br><span class="line"># 登录用户看到的链接</span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">else</span> %&gt;</span></span><br><span class="line"># 未登录用户看到的链接</span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">end</span> %&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Full Stack</category>
        <category>Ruby on Rails</category>
      </categories>
  </entry>
  <entry>
    <title>rails tutorials: ActionPack</title>
    <url>/rails-tutorials-ActionPack/2020/01/19/</url>
    <content><![CDATA[<p>ActionPack is Controller and View work together to let you interact with resources in the Model layer</p>
<h3 id="REST-Representational-State-Transfer"><a href="#REST-Representational-State-Transfer" class="headerlink" title="REST(Representational State Transfer)"></a>REST(Representational State Transfer)</h3><p>REST is all about resources, You should be to able to:</p>
<ol>
<li>List available resources</li>
<li>Show a specific resource</li>
<li>Destroy an existing resource</li>
<li>Provide a way to create a new resource</li>
<li>Create a new resource</li>
<li>Provide a way to update an existing resource</li>
<li>Update an existing resource</li>
</ol>
<h3 id="REST-A-Simple-Rails-Convention"><a href="#REST-A-Simple-Rails-Convention" class="headerlink" title="REST: A Simple Rails Convention"></a>REST: A Simple Rails Convention</h3><center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="1.png" width="80%" height="80%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Rails Convention</div>
</center>

<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="2.png" width="80%" height="80%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Named Routes From</div>
</center>

<h3 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h3><p>Index action retrieves resources from Data layer. Then, implicitly invokes either HTML or JSON templates.</p>
<blockquote>
<p>app/controllers/posts_controller.rb</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostsController</span> &lt; ApplicationController</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="comment"># GET /posts</span></span><br><span class="line">  <span class="comment"># GET /posts.json</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">index</span></span></span><br><span class="line">    @posts = Post.all</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  ...</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>app/views/posts/show.html.erb</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"notice"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">notice</span> %&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Listing Posts<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">"3"</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> @<span class="attr">posts.each</span> <span class="attr">do</span> |<span class="attr">post</span>| %&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">post.title</span> %&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">post.content</span> %&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">link_to</span> '<span class="attr">Show</span>', <span class="attr">post</span> %&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">link_to</span> '<span class="attr">Edit</span>', <span class="attr">edit_post_path</span>(<span class="attr">post</span>) %&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">link_to</span> '<span class="attr">Destroy</span>', <span class="attr">post</span>, <span class="attr">method:</span> <span class="attr">:delete</span>, <span class="attr">data:</span> &#123; <span class="attr">confirm:</span> '<span class="attr">Are</span> <span class="attr">you</span> <span class="attr">sure</span>?' &#125; %&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">end</span> %&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">link_to</span> '<span class="attr">New</span> <span class="attr">Post</span>', <span class="attr">new_post_path</span> %&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>post = post_path(post)</li>
<li><code>Destroy</code> 和 <code>Show</code>  的 named route 都是 <code>post</code>, 因此 <code>Destroy</code> 需要指定 <code>method: :delete</code></li>
</ul>
<h3 id="Show"><a href="#Show" class="headerlink" title="Show"></a>Show</h3><ul>
<li>Retrieve specific post based on id parameter passed in (as part of URL)</li>
<li>(Implicit) Look for show.html.erb template to render response</li>
</ul>
<blockquote>
<p>app/controllers/posts_controller.rb</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostsController</span> &lt; ApplicationController</span></span><br><span class="line">  before_action <span class="symbol">:set_post</span>, <span class="symbol">only:</span> [<span class="symbol">:show</span>, <span class="symbol">:edit</span>, <span class="symbol">:update</span>, <span class="symbol">:destroy</span>]</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="comment"># GET /posts/1</span></span><br><span class="line">  <span class="comment"># GET /posts/1.json</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">show</span></span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  private</span><br><span class="line">    <span class="comment"># Use callbacks to share common setup or constraints between actions.</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_post</span></span></span><br><span class="line">      @post = Post.find(params[<span class="symbol">:id</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>app/views/posts/show.html.erb</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"notice"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">notice</span> %&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Title:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%=</span> @<span class="attr">post.title</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Content:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%=</span> @<span class="attr">post.content</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">link_to</span> '<span class="attr">Edit</span>', <span class="attr">edit_post_path</span>(@<span class="attr">post</span>) %&gt;</span> |</span><br><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">link_to</span> '<span class="attr">Back</span>', <span class="attr">posts_path</span> %&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><p>destroy action destroys a resource and then <code>redirects</code> the browser to another page</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostsController</span> &lt; ApplicationController</span></span><br><span class="line">  before_action <span class="symbol">:set_post</span>, <span class="symbol">only:</span> [<span class="symbol">:show</span>, <span class="symbol">:edit</span>, <span class="symbol">:update</span>, <span class="symbol">:destroy</span>]</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="comment"># DELETE /posts/1</span></span><br><span class="line">  <span class="comment"># DELETE /posts/1.json</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">destroy</span></span></span><br><span class="line">    @post.destroy</span><br><span class="line">    respond_to <span class="keyword">do</span> <span class="params">|format|</span></span><br><span class="line">      format.html &#123; redirect_to posts_url, <span class="symbol">notice:</span> <span class="string">'Post was successfully destroyed.'</span> &#125;</span><br><span class="line">      format.json &#123; head <span class="symbol">:no_content</span> &#125;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  private</span><br><span class="line">    <span class="comment"># Use callbacks to share common setup or constraints between actions.</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_post</span></span></span><br><span class="line">      @post = Post.find(params[<span class="symbol">:id</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h4 id="respond-to"><a href="#respond-to" class="headerlink" title="respond_to"></a>respond_to</h4><ul>
<li>Rails helper that specifies how to respond to a request based on a request format</li>
<li>Takes an optional block where the argument is the format</li>
<li>Block specifies how to handle each format:<ul>
<li>format.format_name – matching template</li>
<li>format.format_name {do_something_other_than_just_displaying_the_ matching_template}</li>
</ul>
</li>
</ul>
<h4 id="redirect-to"><a href="#redirect-to" class="headerlink" title="redirect_to"></a>redirect_to</h4><ul>
<li>Instead of rendering a template – send a response to the browser: “Go here!”</li>
</ul>
<h3 id="New-and-Create"><a href="#New-and-Create" class="headerlink" title="New and Create"></a>New and Create</h3><ol>
<li>New</li>
</ol>
<ul>
<li>Create a new empty post object </li>
<li>(Implicit) Look for new.html.erb</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostsController</span> &lt; ApplicationController</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># GET /posts/new</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">new</span></span></span><br><span class="line">    @post = Post.new</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>New Post<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">render</span> '<span class="attr">form</span>' %&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">link_to</span> '<span class="attr">Back</span>', <span class="attr">posts_path</span> %&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>Create</li>
</ol>
<ul>
<li>Create a new post object with parameters that were passed from the new form</li>
<li>Try to save the object to the database</li>
<li>If successful, redirect to show template</li>
<li>If unsuccessful, render new action (template - again)</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostsController</span> &lt; ApplicationController</span></span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="comment"># POST /posts</span></span><br><span class="line">  <span class="comment"># POST /posts.json</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">create</span></span></span><br><span class="line">    @post = Post.new(post_params)</span><br><span class="line"></span><br><span class="line">    respond_to <span class="keyword">do</span> <span class="params">|format|</span></span><br><span class="line">      <span class="keyword">if</span> @post.save</span><br><span class="line">        flash[<span class="symbol">:success</span>] = <span class="string">"Welcome to the Sample App!"</span></span><br><span class="line">        format.html &#123; redirect_to @post, <span class="symbol">notice:</span> <span class="string">'Post was successfully created.'</span> &#125;</span><br><span class="line">        format.json &#123; render <span class="symbol">:show</span>, <span class="symbol">status:</span> <span class="symbol">:created</span>, <span class="symbol">location:</span> @post &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        format.html &#123; render <span class="symbol">:new</span> &#125;</span><br><span class="line">        format.json &#123; render <span class="symbol">json:</span> @post.errors, <span class="symbol">status:</span> <span class="symbol">:unprocessable_entity</span> &#125;</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  private</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Never trust parameters from the scary internet, only allow the white list through.</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post_params</span></span></span><br><span class="line">      params.<span class="keyword">require</span>(<span class="symbol">:post</span>).permit(<span class="symbol">:title</span>, <span class="symbol">:content</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h4 id="Strong-parameters"><a href="#Strong-parameters" class="headerlink" title="Strong parameters"></a>Strong parameters</h4><p>With strong parameters, Action Controller parameters are <strong>forbidden</strong> to be used in Active Model mass assigments until they have been whitelisted.</p>
<h4 id="Flash"><a href="#Flash" class="headerlink" title="Flash"></a>Flash</h4><p>a hash where the data you put in persists for exactly ONE request AFTER the current request.</p>
<ul>
<li>Two very common attributes are <code>:notice</code> (good) and <code>:alert</code> (bad)</li>
<li>These are so common in fact, that the redirect_to takes a <code>:notice</code> or <code>:alert</code> keys</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">flash[<span class="symbol">:attribute</span>] = value</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">flash.each</span> <span class="attr">do</span> |<span class="attr">message_type</span>, <span class="attr">message</span>| %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-&lt;%= message_type %&gt;"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">message</span> %&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">end</span> %&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Edit-and-Update"><a href="#Edit-and-Update" class="headerlink" title="Edit and Update"></a>Edit and Update</h3><ol>
<li>Edit</li>
</ol>
<ul>
<li>Retrieve a post object based on the id provided (as part of the URl)</li>
<li>(Implicit) Look for edit.html.erb</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostsController</span> &lt; ApplicationController</span></span><br><span class="line">  before_action <span class="symbol">:set_post</span>, <span class="symbol">only:</span> [<span class="symbol">:show</span>, <span class="symbol">:edit</span>, <span class="symbol">:update</span>, <span class="symbol">:destroy</span>]</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="comment"># GET /posts/1/edit</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">edit</span></span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">  private</span><br><span class="line">    <span class="comment"># Use callbacks to share common setup or constraints between actions.</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_post</span></span></span><br><span class="line">      @post = Post.find(params[<span class="symbol">:id</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Editing Post<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">render</span> '<span class="attr">form</span>' %&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">link_to</span> '<span class="attr">Show</span>', @<span class="attr">post</span> %&gt;</span> |</span><br><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">link_to</span> '<span class="attr">Back</span>', <span class="attr">posts_path</span> %&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>Update</li>
</ol>
<ul>
<li>Retrieve an existing post using id parameter</li>
<li>Update post object with (strong) parameters that were<br>passed from the edit form</li>
<li>Try to (re)save the object to the database</li>
<li>If successful, redirect to show template</li>
<li>If unsuccessful, render edit action (template) again</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostsController</span> &lt; ApplicationController</span></span><br><span class="line">  before_action <span class="symbol">:set_post</span>, <span class="symbol">only:</span> [<span class="symbol">:show</span>, <span class="symbol">:edit</span>, <span class="symbol">:update</span>, <span class="symbol">:destroy</span>]</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">  <span class="comment"># PATCH/PUT /posts/1</span></span><br><span class="line">  <span class="comment"># PATCH/PUT /posts/1.json</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">update</span></span></span><br><span class="line">    respond_to <span class="keyword">do</span> <span class="params">|format|</span></span><br><span class="line">      <span class="keyword">if</span> @post.update(post_params)</span><br><span class="line">        format.html &#123; redirect_to @post, <span class="symbol">notice:</span> <span class="string">'Post was successfully updated.'</span> &#125;</span><br><span class="line">        format.json &#123; render <span class="symbol">:show</span>, <span class="symbol">status:</span> <span class="symbol">:ok</span>, <span class="symbol">location:</span> @post &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        format.html &#123; render <span class="symbol">:edit</span> &#125;</span><br><span class="line">        format.json &#123; render <span class="symbol">json:</span> @post.errors, <span class="symbol">status:</span> <span class="symbol">:unprocessable_entity</span> &#125;</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  private</span><br><span class="line">    <span class="comment"># Use callbacks to share common setup or constraints between actions.</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_post</span></span></span><br><span class="line">      @post = Post.find(params[<span class="symbol">:id</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Never trust parameters from the scary internet, only allow the white list through.</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post_params</span></span></span><br><span class="line">      params.<span class="keyword">require</span>(<span class="symbol">:post</span>).permit(<span class="symbol">:title</span>, <span class="symbol">:content</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p><code>html</code></p>
]]></content>
      <categories>
        <category>Full Stack</category>
        <category>Ruby on Rails</category>
      </categories>
  </entry>
  <entry>
    <title>rails tutorials: Association</title>
    <url>/rails-tutorials-Association/2020/01/18/</url>
    <content><![CDATA[<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="1.png" width="80%" height="80%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">ER</div>
</center>


<h2 id="One-to-One-Association"><a href="#One-to-One-Association" class="headerlink" title="One-to-One Association"></a>One-to-One Association</h2><ul>
<li>One person has exactly one personal_info entry</li>
<li>One personal_info entry belongs to exactly one person</li>
<li>The “belongs to” side is the one with a foreign key</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rails g model personal_info height:<span class="built_in">float</span> weight:<span class="built_in">float</span> person:references</span><br></pre></td></tr></table></figure>
<blockquote>
<p>db/migrate/_create_personal_info.rb</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreatePersonalInfos</span> &lt; ActiveRecord::Migration[6.0]</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">change</span></span></span><br><span class="line">    create_table <span class="symbol">:personal_infos</span> <span class="keyword">do</span> <span class="params">|t|</span></span><br><span class="line">      t.float <span class="symbol">:height</span></span><br><span class="line">      t.float <span class="symbol">:weight</span></span><br><span class="line">      t.references <span class="symbol">:person</span>, <span class="symbol">null:</span> <span class="literal">false</span>, <span class="symbol">foreign_key:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">      t.timestamps</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rake db:migrate</span><br></pre></td></tr></table></figure>
<blockquote>
<p>app/models/person.rb</p>
</blockquote>
<figure class="highlight rb"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &lt; ApplicationRecord</span></span><br><span class="line">    has_one <span class="symbol">:personal_info</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>app/models/personal_info.rb</p>
</blockquote>
<figure class="highlight rb"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonalInfo</span> &lt; ApplicationRecord</span></span><br><span class="line">  belongs_to <span class="symbol">:person</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="More-Methods"><a href="#More-Methods" class="headerlink" title="More Methods"></a>More Methods</h3><p>you have <code>build_personal_info(hash)</code> and <code>create_personal_info(hash)</code> methods on a person instance</p>
<h3 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zhang = Person.first</span><br><span class="line">pi1 = PersonalInfo.create height: 6.5 weight: 220</span><br><span class="line">zhang.personal_info = pi1</span><br><span class="line"></span><br><span class="line">zhang.build_personal_info height: 6.5 weight: 220</span><br></pre></td></tr></table></figure>
<h2 id="One-to-Many-Association"><a href="#One-to-Many-Association" class="headerlink" title="One-to-Many Association"></a>One-to-Many Association</h2><ul>
<li>One person has one or more jobs</li>
<li>One job entry belongs to exactly one person</li>
<li>The “belongs to” side is the one with a foreign key</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rails g model job title company position_id person:references</span><br></pre></td></tr></table></figure>
<blockquote>
<p>db/migrate/_create_jobs.rb</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateJobs</span> &lt; ActiveRecord::Migration[6.0]</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">change</span></span></span><br><span class="line">    create_table <span class="symbol">:jobs</span> <span class="keyword">do</span> <span class="params">|t|</span></span><br><span class="line">      t.string <span class="symbol">:title</span></span><br><span class="line">      t.string <span class="symbol">:company</span></span><br><span class="line">      t.string <span class="symbol">:position_id</span></span><br><span class="line">      t.references <span class="symbol">:person</span>, <span class="symbol">null:</span> <span class="literal">false</span>, <span class="symbol">foreign_key:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">      t.timestamps</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rake db:migrate</span><br></pre></td></tr></table></figure>
<blockquote>
<p>app/models/person.rb</p>
</blockquote>
<figure class="highlight rb"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &lt; ApplicationRecord</span></span><br><span class="line">    has_one <span class="symbol">:personal_info</span></span><br><span class="line">    has_many <span class="symbol">:jobs</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>app/models/job.rb</p>
</blockquote>
<figure class="highlight rb"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Job</span> &lt; ApplicationRecord</span></span><br><span class="line">  belongs_to <span class="symbol">:person</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="More-Methods-1"><a href="#More-Methods-1" class="headerlink" title="More Methods"></a>More Methods</h3><ul>
<li>person.jobs = jobs</li>
<li>person.jobs &lt;&lt; job(s)</li>
<li>person.jobs.clear</li>
</ul>
<h2 id="Many-to-Many"><a href="#Many-to-Many" class="headerlink" title="Many-to-Many"></a>Many-to-Many</h2><ul>
<li>One person can have many hobbies</li>
<li>One hobby can be shared by many people</li>
<li>Need to create an extra (a.k.a. join) table (<strong>without</strong> a model, i.e. just a migration)</li>
<li>Convention: Plural model names separated by an underscore in alphabetical order</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rails g model hobby name</span><br><span class="line">rails g migration create_hobbies_people person:references hobby:references</span><br></pre></td></tr></table></figure>
<blockquote>
<p>db/migrate/_create_habbies_people.rb</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateHabbiesPeople</span> &lt; ActiveRecord::Migration[6.0]</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">change</span></span></span><br><span class="line">    create_table <span class="symbol">:habbies_people</span>, <span class="symbol">id:</span><span class="literal">false</span> <span class="keyword">do</span> <span class="params">|t|</span></span><br><span class="line">      t.references <span class="symbol">:person</span>, <span class="symbol">null:</span> <span class="literal">false</span>, <span class="symbol">index:</span> <span class="literal">false</span>, <span class="symbol">foreign_key:</span> <span class="literal">true</span></span><br><span class="line">      t.references <span class="symbol">:hobby</span>, <span class="symbol">null:</span> <span class="literal">false</span>, <span class="symbol">index:</span> <span class="literal">false</span>, <span class="symbol">foreign_key:</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rake db:migrate</span><br></pre></td></tr></table></figure>
<blockquote>
<p>app/models/person.rb</p>
</blockquote>
<figure class="highlight rb"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &lt; ApplicationRecord</span></span><br><span class="line">    has_one <span class="symbol">:personal_info</span></span><br><span class="line">    has_many <span class="symbol">:jobs</span></span><br><span class="line">    has_and_belongs_to_many <span class="symbol">:hobbies</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>app/models/hobby.rb</p>
</blockquote>
<figure class="highlight rb"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hobby</span> &lt; ApplicationRecord</span></span><br><span class="line">    has_and_belongs_to_many <span class="symbol">:people</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h2 id="Rich-Many-to-Many-Association"><a href="#Rich-Many-to-Many-Association" class="headerlink" title="Rich Many-to-Many Association"></a>Rich Many-to-Many Association</h2><ul>
<li>Sometimes, you need to keep some data on the join table</li>
<li>You need to store grandchild relationships on a model, like Person -&gt; Job -&gt; SalaryRange</li>
<li>ActiveRecord provides a <code>:through</code> option for this purpose</li>
<li><strong>Basic idea</strong>: you first create a regular <code>parent-child</code> relationship and then use the child model as a <strong>join</strong> between the parent and grandchild.</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rails g model salary_range min_salary:<span class="built_in">float</span>  max_salary:<span class="built_in">float</span> job:references</span><br></pre></td></tr></table></figure>
<blockquote>
<p>db/migrate/_create_salary_ranges.rb</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateSalaryRanges</span> &lt; ActiveRecord::Migration[6.0]</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">change</span></span></span><br><span class="line">    create_table <span class="symbol">:salary_ranges</span> <span class="keyword">do</span> <span class="params">|t|</span></span><br><span class="line">      t.float <span class="symbol">:min_salary</span></span><br><span class="line">      t.float <span class="symbol">:max_salary</span></span><br><span class="line">      t.references <span class="symbol">:job</span>, <span class="symbol">null:</span> <span class="literal">false</span>, <span class="symbol">foreign_key:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">      t.timestamps</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rake db:migrate</span><br></pre></td></tr></table></figure>
<blockquote>
<p>app/models/salary_range.rb</p>
</blockquote>
<figure class="highlight rb"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SalaryRange</span> &lt; ApplicationRecord</span></span><br><span class="line">  belongs_to <span class="symbol">:job</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>app/models/job.rb</p>
</blockquote>
<figure class="highlight rb"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Job</span> &lt; ApplicationRecord</span></span><br><span class="line">  belongs_to <span class="symbol">:person</span></span><br><span class="line">  has_one <span class="symbol">:salary_range</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>app/models/person.rb<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &lt; ApplicationRecord</span></span><br><span class="line">    has_one <span class="symbol">:personal_info</span></span><br><span class="line">    has_many <span class="symbol">:jobs</span></span><br><span class="line">    has_and_belongs_to_many <span class="symbol">:hobbies</span></span><br><span class="line">    has_many <span class="symbol">:approx_salaries</span>, <span class="symbol">through:</span> <span class="symbol">:jobs</span>, <span class="symbol">source:</span> <span class="symbol">:salary_range</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">max_salary</span></span></span><br><span class="line">      approx_salaries.maximum(<span class="symbol">:max_salary</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment"># Average, minimum and sum also available...</span></span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="More-Methods-2"><a href="#More-Methods-2" class="headerlink" title="More Methods"></a>More Methods</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">lebron = Person.find_by <span class="symbol">last_name:</span> <span class="string">"James"</span></span><br><span class="line">lebron.max_salary</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Full Stack</category>
        <category>Ruby on Rails</category>
      </categories>
  </entry>
  <entry>
    <title>rails tutorials: Active Record CURD</title>
    <url>/rails-tutorials-Active-Record-CURD/2020/01/18/</url>
    <content><![CDATA[<p>ActiveRecord is the name of Rails’ default ORM</p>
<blockquote>
<p>ORM (Object-Relational Mapping): Bridges the gap between <code>relational databases</code>, which are designed around mathematical Set Theory and Object-Oriented programming languages that deal with objects and their behavior. Greatly simplifies writing code for accessing the database.</p>
</blockquote>
<h3 id="Three-Prerequisites"><a href="#Three-Prerequisites" class="headerlink" title="Three Prerequisites"></a>Three Prerequisites</h3><ol>
<li>ActiveRecord has to know how to find your database (when Rails<br>is loaded, this info is read from config/database.yml file)</li>
<li>(Convention) There is a table with a <code>plural name</code> that corresponds<br>to ActiveRecord::Base subclass with a <code>singular name</code></li>
<li>(Convention) Expects the table to have a primary key named <code>id</code></li>
</ol>
<h3 id="CURD"><a href="#CURD" class="headerlink" title="CURD"></a>CURD</h3><h4 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h4><ol>
<li><p>Use an empty constructor and (ghost) attributes to set the values and then call save.</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">p1 = Person.new</span><br><span class="line">p1.first_name = <span class="string">"zhang"</span></span><br><span class="line">p1.email = <span class="string">"zrc720@gmail.com"</span></span><br><span class="line">p1.save</span><br></pre></td></tr></table></figure>
</li>
<li><p>Pass a hash of attributes into the constructor and then call save.</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">p2 = Person.new(<span class="symbol">name:</span> <span class="string">"zhang"</span>, <span class="symbol">email:</span> <span class="string">"zrc720@gmail.com"</span>)</span><br><span class="line">p2.save</span><br></pre></td></tr></table></figure>
</li>
<li><p>Use create method with a hash to create an object and save it to the database in one step.</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">p3 = Person.create(<span class="symbol">name:</span> <span class="string">"zhang"</span>, <span class="symbol">email:</span> <span class="string">"zrc720@gmail.com"</span>)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="Retrieve"><a href="#Retrieve" class="headerlink" title="Retrieve"></a>Retrieve</h4><ol>
<li><p><code>find(id)</code> or <code>find(id1, id2)</code><br>Throws a RecordNotFound exception if not found</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Person.find(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>first</code>, <code>last</code>, <code>take</code>, <code>all</code><br>Return the results you expect or nil if nothing is found</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Person.first</span><br><span class="line">Person.last</span><br><span class="line">Person.take</span><br><span class="line">Person.all</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>order(:column)</code> or <code>order(column: :desc)</code><br>Allows ordering of the results. Ascending or descending</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Person.all.order(<span class="symbol">first_name:</span> <span class="symbol">:desc</span>)</span><br><span class="line">Person.all.order(<span class="symbol">:first_name</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>pluck</code><br>Use pluck as a shortcut to select one or more attributes without loading a bunch of records just to grab the attributes you want.</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Person.pluck(<span class="symbol">:id</span>, <span class="symbol">:name</span>)</span><br><span class="line"><span class="comment"># SELECT people.id, people.name FROM people</span></span><br><span class="line"><span class="comment"># =&gt; [[1, 'David'], [2, 'Jeremy'], [3, 'Jose']]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>take</code><br>Gives a record (or N records if a parameter is supplied) without any implied order. The order will depend on the database implementation. If an order is supplied it will be respected.</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Person.take <span class="comment"># returns an object fetched by SELECT * FROM people LIMIT 1</span></span><br><span class="line">Person.take(<span class="number">5</span>) <span class="comment"># returns 5 objects fetched by SELECT * FROM people LIMIT 5</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>where(hash)</code><br>Enables you to supply conditions for your search</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Person.where(<span class="symbol">name:</span> <span class="string">"zhangruochi"</span>)</span><br><span class="line">Person.where([<span class="string">"name = ? and email = ?"</span>, <span class="string">"Joe"</span>, <span class="string">"joe@example.com"</span>])</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">7. `</span>find_by<span class="string">`</span></span><br><span class="line"><span class="string">Same as where, but returns a single result or nil if a record with the specified conditions is not found</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>ruby</span><br><span class="line">User.find_by(<span class="symbol">name:</span> <span class="string">"zhangruochi"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>limit</code><br>Enables you to limit how many records come back</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Person.offset(<span class="number">1</span>).limit(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>offset(n)</code><br>Don’t start from the beginning; skip a few</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Person.offset(<span class="number">1</span>).limit(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h4><ol>
<li><p>Retrieve a record, modify the values and then call save</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">zhang = User.where(<span class="symbol">name:</span> <span class="string">"zhangruochi"</span>)</span><br><span class="line">zhang.email = <span class="string">"lvduzhen@gmail.com"</span></span><br><span class="line">zhang.save</span><br></pre></td></tr></table></figure>
</li>
<li><p>Retrieve a record and then call update method passing in a hash of attributes with new values</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">zhang = User.where(<span class="symbol">name:</span> <span class="string">"zhangruochi"</span>)</span><br><span class="line">zhang.update(<span class="symbol">email:</span> <span class="string">"lvduzhen@gmail.com"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>There is also <code>update_all</code> for batch updates</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">User.where(<span class="symbol">email:</span> <span class="string">'zrc720@gmail.com'</span>).update_all(<span class="symbol">name:</span> <span class="string">'ruochi'</span>)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h4><ol>
<li>destroy(id) or destroy<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">zhang = User.first</span><br><span class="line">zhang.destroy</span><br><span class="line"></span><br><span class="line">User.destroy(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Full Stack</category>
        <category>Ruby on Rails</category>
      </categories>
  </entry>
  <entry>
    <title>Metaprogramming in Ruby</title>
    <url>/Metaprogramming-in-Ruby/2020/01/17/</url>
    <content><![CDATA[<h2 id="Dynamic-Dispatch"><a href="#Dynamic-Dispatch" class="headerlink" title="Dynamic Dispatch"></a>Dynamic Dispatch</h2><ul>
<li>There is another way to call a method in Ruby - using the <code>send</code> method</li>
<li>First parameter is the method name/symbol; the rest (if any) are method arguments</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bark</span></span></span><br><span class="line">        puts <span class="string">"Woof, woof!"</span> </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">greet</span><span class="params">(greeting)</span></span> </span><br><span class="line">        puts greeting</span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">dog = Dog.new</span><br><span class="line">dog.bark <span class="comment"># =&gt; Woof, woof! dog.send("bark") # =&gt; Woof, woof! dog.send(:bark) # =&gt; Woof, woof! method_name = :bark</span></span><br><span class="line">dog.send method_name <span class="comment"># =&gt; Woof, woof!</span></span><br><span class="line">dog.send(<span class="symbol">:greet</span>, <span class="string">"hello"</span>) <span class="comment"># =&gt; hello</span></span><br></pre></td></tr></table></figure>
<h2 id="Dynamic-Method"><a href="#Dynamic-Method" class="headerlink" title="Dynamic Method"></a>Dynamic Method</h2><ul>
<li>Not only can you call methods dynamically (with send), you can also define methods dynamically</li>
<li><code>define_method :method_name</code> and a <code>block</code> which<br>contains the method definition</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Whatever</span></span></span><br><span class="line">    define_method <span class="symbol">:make_it_up</span> <span class="keyword">do</span></span><br><span class="line">        puts <span class="string">"Whatever..."</span> </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">whatever = Whatever.new whatever.make_it_up <span class="comment"># =&gt; Whatever...</span></span><br></pre></td></tr></table></figure>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">require_relative <span class="string">'store'</span> </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReportingSystem</span></span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span></span></span><br><span class="line">        @store = Store.new</span><br><span class="line">        @store.methods.grep(<span class="regexp">/^get_(.*)_desc/</span>) &#123; ReportingSystem.define_report_methods_for $1 &#125;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">define_report_methods_for</span> <span class="params">(item)</span></span> </span><br><span class="line">        define_method(<span class="string">"get_<span class="subst">#&#123;item&#125;</span>_desc"</span>) &#123; @store.send(<span class="string">"get_<span class="subst">#&#123;item&#125;</span>_desc"</span>)&#125; define_method(<span class="string">"get_<span class="subst">#&#123;item&#125;</span>_price"</span>) &#123; @store.send(<span class="string">"get_<span class="subst">#&#123;item&#125;</span>_price"</span>)&#125;</span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">rs = ReportingSystem.new</span><br><span class="line">puts <span class="string">"<span class="subst">#&#123;rs.get_piano_desc&#125;</span> costs <span class="subst">#&#123;rs.get_piano_price.to_s.ljust(<span class="number">6</span>, <span class="string">'0'</span>)&#125;</span>"</span> <span class="comment"># =&gt; Excellent piano costs 120.00</span></span><br></pre></td></tr></table></figure>
<h2 id="Ghost-Methods"><a href="#Ghost-Methods" class="headerlink" title="Ghost Methods"></a>Ghost Methods</h2><ul>
<li>method_missing gives you the power to “fake” the methods</li>
<li>Called “ghost methods” because the methods don’t really exist</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mystery</span></span></span><br><span class="line"><span class="comment"># no_methods defined</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">method_missing</span> <span class="params">(method, *args)</span></span></span><br><span class="line">        puts <span class="string">"Looking for..."</span></span><br><span class="line">        puts <span class="string">"\"<span class="subst">#&#123;method&#125;</span>\" with params (<span class="subst">#&#123;args.join(<span class="string">','</span>)&#125;</span>) ?"</span> puts <span class="string">"Sorry... He is on vacation..."</span></span><br><span class="line">        <span class="keyword">yield</span> <span class="string">"Ended up in method_missing"</span> <span class="keyword">if</span> block_given?</span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">m = Mystery.new</span><br><span class="line">m.solve_mystery(<span class="string">"abc"</span>, <span class="number">123123</span>) <span class="keyword">do</span> <span class="params">|answer|</span></span><br><span class="line">    puts <span class="string">"And the answer is: <span class="subst">#&#123;answer&#125;</span>"</span> </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h2 id="Struct-and-OpenStruct"><a href="#Struct-and-OpenStruct" class="headerlink" title="Struct and OpenStruct"></a>Struct and OpenStruct</h2><ul>
<li><code>Struct</code>: Generator of specific classes, each one of which is defined to hold a set of variables and their accessors (“Dynamic Methods”)</li>
<li><code>OpenStruct</code>: Object (similar to Struct) whose attributes are created dynamically when first assigned (“Ghost methods”)</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Customer = Struct.new(<span class="symbol">:name</span>, <span class="symbol">:address</span>) <span class="keyword">do</span> <span class="comment"># block is optional </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_s</span></span></span><br><span class="line">        <span class="string">"<span class="subst">#&#123;name&#125;</span> lives at <span class="subst">#&#123;address&#125;</span>"</span> </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">jim = Customer.new(<span class="string">"Jim"</span>, <span class="string">"-1000 Wall Street"</span>) puts jim <span class="comment"># =&gt; Jim lives at -1000 Wall Street</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'ostruct'</span> <span class="comment"># =&gt; need to require ostruct for OpenStruct</span></span><br><span class="line">some_obj = OpenStruct.new(<span class="symbol">name:</span> <span class="string">"Joe"</span>, <span class="symbol">age:</span> <span class="number">15</span>) </span><br><span class="line">some_obj.sure = <span class="string">"three"</span></span><br><span class="line">some_obj.really = <span class="string">"yes, it is true"</span> some_obj.not_only_strings = <span class="number">10</span></span><br><span class="line">puts <span class="string">"<span class="subst">#&#123;some_obj.name&#125;</span> <span class="subst">#&#123;some_obj.age&#125;</span> <span class="subst">#&#123;some_obj.really&#125;</span>"</span> <span class="comment"># =&gt; Joe 15 yes, it is true</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programming Language</category>
        <category>Metaprogramming</category>
      </categories>
  </entry>
  <entry>
    <title>rails tutorils: signup</title>
    <url>/rails-tutorils-signup/2020/01/17/</url>
    <content><![CDATA[<h3 id="Users-资源"><a href="#Users-资源" class="headerlink" title="Users 资源"></a>Users 资源</h3><blockquote>
<p>config/routes.rb</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Rails.application.routes.draw <span class="keyword">do</span></span><br><span class="line">    root <span class="string">'static_pages#home'</span></span><br><span class="line">    get <span class="string">'/help'</span>, <span class="symbol">to:</span> <span class="string">'static_pages#help'</span> </span><br><span class="line">    get <span class="string">'/about'</span>, <span class="symbol">to:</span> <span class="string">'static_pages#about'</span> </span><br><span class="line">    get <span class="string">'/contact'</span>, <span class="symbol">to:</span> <span class="string">'static_pages#contact'</span> </span><br><span class="line">    get <span class="string">'/signup'</span>, <span class="symbol">to:</span> <span class="string">'users#new'</span></span><br><span class="line">    </span><br><span class="line">    resources <span class="symbol">:users</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="users.png" width="80%" height="80%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Users Resources</div>
</center>


<h3 id="Gravatar-头像和侧边栏"><a href="#Gravatar-头像和侧边栏" class="headerlink" title="Gravatar 头像和侧边栏"></a>Gravatar 头像和侧边栏</h3><blockquote>
<p>app/views/users/show.html.erb</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">provide</span>(<span class="attr">:title</span>, @<span class="attr">user.name</span>) %&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"user_info"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">%=</span> <span class="attr">gravatar_for</span> @<span class="attr">user</span> %&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">%=</span> @<span class="attr">user.name</span> %&gt;</span> <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>app/assets/stylesheets/custom.scss</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* sidebar */</span></span><br><span class="line"><span class="selector-tag">aside</span> &#123; </span><br><span class="line">    section.user_info &#123;</span><br><span class="line">        <span class="selector-tag">margin-top</span>: 20<span class="selector-tag">px</span>; &#125;</span><br><span class="line">    <span class="selector-tag">section</span> &#123;</span><br><span class="line">        padding: 10px 0; margin-top: 20px; &amp;:first-child &#123;</span><br><span class="line">            <span class="selector-tag">border</span>: 0;</span><br><span class="line">            <span class="selector-tag">padding-top</span>: 0; &#125;</span><br><span class="line">        <span class="selector-tag">span</span> &#123;</span><br><span class="line">            <span class="attribute">display</span>: block; <span class="attribute">margin-bottom</span>: <span class="number">3px</span>; <span class="attribute">line-height</span>: <span class="number">1</span>;&#125;</span><br><span class="line">        <span class="selector-tag">h1</span> &#123;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">1.4em</span>; <span class="attribute">text-align</span>: left; <span class="attribute">letter-spacing</span>: -<span class="number">1px</span>; <span class="attribute">margin-bottom</span>: <span class="number">3px</span>; <span class="attribute">margin-top</span>: <span class="number">0px</span>;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.gravatar</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left; <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.gravatar_edit</span> &#123; </span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>app/helpers/users_helper.rb</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">UsersHelper</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gravatar_for</span><span class="params">(user, options = &#123; <span class="symbol">size:</span> <span class="number">80</span> &#125;)</span></span></span><br><span class="line">        size = options[<span class="symbol">:size</span>]</span><br><span class="line">        gravatar_id = Digest::MD5::hexdigest(user.email.downcase)</span><br><span class="line">        gravatar_url = <span class="string">"https://secure.gravatar.com/avatar/<span class="subst">#&#123;gravatar_id&#125;</span>?s=<span class="subst">#&#123;size&#125;</span>"</span> </span><br><span class="line">        image_tag(gravatar_url, <span class="symbol">alt:</span> user.name, <span class="class"><span class="keyword">class</span>: "<span class="title">gravatar</span>")</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="用户注册表单"><a href="#用户注册表单" class="headerlink" title="用户注册表单"></a>用户注册表单</h3><blockquote>
<p>app/views/users/new.html.erb</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">provide</span>(<span class="attr">:title</span>, '<span class="attr">Sign</span> <span class="attr">up</span>') %&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Sign up<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6 col-md-offset-3"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%=</span> <span class="attr">form_with</span>(<span class="attr">model:</span> @<span class="attr">user</span>, <span class="attr">local:</span> <span class="attr">true</span>) <span class="attr">do</span> |<span class="attr">f</span>| %&gt;</span> <span class="tag">&lt;<span class="name">%=</span> <span class="attr">render</span> '<span class="attr">shared</span>/<span class="attr">error_messages</span>' %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%=</span> <span class="attr">f.label</span> <span class="attr">:name</span> %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%=</span> <span class="attr">f.text_field</span> <span class="attr">:name</span>, <span class="attr">class:</span> '<span class="attr">form-control</span>' %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%=</span> <span class="attr">f.label</span> <span class="attr">:email</span> %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%=</span> <span class="attr">f.email_field</span> <span class="attr">:email</span>, <span class="attr">class:</span> '<span class="attr">form-control</span>' %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%=</span> <span class="attr">f.label</span> <span class="attr">:password</span> %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%=</span> <span class="attr">f.password_field</span> <span class="attr">:password</span>, <span class="attr">class:</span> '<span class="attr">form-control</span>' %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%=</span> <span class="attr">f.label</span> <span class="attr">:password_confirmation</span>, "<span class="attr">Confirmation</span>" %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%=</span> <span class="attr">f.password_field</span> <span class="attr">:password_confirmation</span>, <span class="attr">class:</span> '<span class="attr">form-control</span>' %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%=</span> <span class="attr">f.submit</span> "<span class="attr">Create</span> <span class="attr">my</span> <span class="attr">account</span>", <span class="attr">class:</span> "<span class="attr">btn</span> <span class="attr">btn-primary</span>" %&gt;</span> <span class="tag">&lt;<span class="name">%</span> <span class="attr">end</span> %&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>app/assets/stylesheets/custom.scss</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">/* forms *<span class="regexp">/</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">input, textarea, select, .uneditable-input &#123; </span></span><br><span class="line"><span class="regexp">    border: 1px solid #bbb;</span></span><br><span class="line"><span class="regexp">    width: 100%;</span></span><br><span class="line"><span class="regexp">    margin-bottom: 15px;</span></span><br><span class="line"><span class="regexp">    @include box_sizing; </span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">    input &#123;</span></span><br><span class="line"><span class="regexp">    height: auto !important;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>
<p>注意，在上面的代码中，渲染的局部视图名为 ‘shared/error_messages’，这里用到了 Rails 的一个约定:如 果局部视图要在多个控制器中使用(10.1.1 节)，则把它存放在专门的 shared/ 目录中。</p>
<blockquote>
<p>app/views/shared/_error_messages.html.erb</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> @<span class="attr">user.errors.any</span>? %&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"error_explanation"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-danger"</span>&gt;</span></span><br><span class="line">            The form contains <span class="tag">&lt;<span class="name">%=</span> <span class="attr">pluralize</span>(@<span class="attr">user.errors.count</span>, "<span class="attr">error</span>") %&gt;</span>.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%</span> @<span class="attr">user.errors.full_messages.each</span> <span class="attr">do</span> |<span class="attr">msg</span>| %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">msg</span> %&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">%</span> <span class="attr">end</span> %&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">end</span> %&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* forms */</span></span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"><span class="selector-id">#error_explanation</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red; </span><br><span class="line">    ul &#123;</span><br><span class="line">        <span class="selector-tag">color</span>: <span class="selector-tag">red</span>;</span><br><span class="line">        <span class="selector-tag">margin</span>: 0 0 30<span class="selector-tag">px</span> 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.field_with_errors</span> &#123; </span><br><span class="line">    @extend .has-error; </span><br><span class="line">    <span class="selector-class">.form-control</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: $state-danger-text; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UsersController</span> &lt; ApplicationController .</span></span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span></span></span><br><span class="line">        @user = User.new(user_params) </span><br><span class="line">        <span class="keyword">if</span> @user.save</span><br><span class="line">            <span class="comment"># 处理注册成功的情况 else</span></span><br><span class="line">            redirect_to @user</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    private</span><br><span class="line">    </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">user_params</span></span></span><br><span class="line">            params.<span class="keyword">require</span>(<span class="symbol">:user</span>).permit(<span class="symbol">:name</span>, <span class="symbol">:email</span>, <span class="symbol">:password</span>,</span><br><span class="line">            <span class="symbol">:password_confirmation</span>)</span><br><span class="line">        <span class="keyword">end</span> </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="闪现消息"><a href="#闪现消息" class="headerlink" title="闪现消息"></a>闪现消息</h3><blockquote>
<p>app/controllers/users_controller.rb</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UsersController</span> &lt; ApplicationController .</span></span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span></span></span><br><span class="line">        @user = User.new(user_params) </span><br><span class="line">        <span class="keyword">if</span> @user.save</span><br><span class="line">            flash[<span class="symbol">:success</span>] = <span class="string">"Welcome to the Sample App!"</span></span><br><span class="line">            <span class="comment"># 处理注册成功的情况 else</span></span><br><span class="line">            redirect_to @user</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    private</span><br><span class="line">    </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">user_params</span></span></span><br><span class="line">            params.<span class="keyword">require</span>(<span class="symbol">:user</span>).permit(<span class="symbol">:name</span>, <span class="symbol">:email</span>, <span class="symbol">:password</span>,</span><br><span class="line">            <span class="symbol">:password_confirmation</span>)</span><br><span class="line">        <span class="keyword">end</span> </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>app/views/layouts/application.html.erb</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%=</span> <span class="attr">render</span> '<span class="attr">layouts</span>/<span class="attr">header</span>' %&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%</span> <span class="attr">flash.each</span> <span class="attr">do</span> |<span class="attr">message_type</span>, <span class="attr">message</span>| %&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-&lt;%= message_type %&gt;"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">message</span> %&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%</span> <span class="attr">end</span> %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%=</span> <span class="attr">yield</span> %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%=</span> <span class="attr">render</span> '<span class="attr">layouts</span>/<span class="attr">footer</span>' %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%=</span> <span class="attr">debug</span>(<span class="attr">params</span>) <span class="attr">if</span> <span class="attr">Rails.env.development</span>? %&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            .</span><br><span class="line">            .</span><br><span class="line">            .</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="专业部署方案"><a href="#专业部署方案" class="headerlink" title="专业部署方案"></a>专业部署方案</h3><h4 id="在生产环境中使用-SSL"><a href="#在生产环境中使用-SSL" class="headerlink" title="在生产环境中使用 SSL"></a>在生产环境中使用 SSL</h4><blockquote>
<p>config/environments/production.rb</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Rails.application.configure <span class="keyword">do</span> .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    <span class="comment"># Force all access to the app over SSL, use Strict-Transport-Security,</span></span><br><span class="line">    <span class="comment"># and use secure cookies. </span></span><br><span class="line">    config.force_ssl = <span class="literal">true</span></span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h4 id="生产环境中的-Web-服务器"><a href="#生产环境中的-Web-服务器" class="headerlink" title="生产环境中的 Web 服务器"></a>生产环境中的 Web 服务器</h4><blockquote>
<p>config/puma.rb</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Puma configuration file.</span></span><br><span class="line">max_threads_count = ENV.fetch(<span class="string">"RAILS_MAX_THREADS"</span>) &#123; <span class="number">5</span> &#125; min_threads_count = ENV.fetch(<span class="string">"RAILS_MIN_THREADS"</span>) &#123; max_threads_count &#125; threads min_threads_count, max_threads_count</span><br><span class="line">port ENV.fetch(<span class="string">"PORT"</span>) &#123; <span class="number">3000</span> &#125;</span><br><span class="line">environment ENV.fetch(<span class="string">"RAILS_ENV"</span>) &#123; ENV[<span class="string">'RACK_ENV'</span>] <span class="params">||</span> <span class="string">"development"</span> &#125; pidfile ENV.fetch(<span class="string">"PIDFILE"</span>) &#123; <span class="string">"tmp/pids/server.pid"</span> &#125;</span><br><span class="line">workers ENV.fetch(<span class="string">"WEB_CONCURRENCY"</span>) &#123; <span class="number">2</span> &#125;</span><br><span class="line">preload_app!</span><br><span class="line">plugin <span class="symbol">:tmp_restart</span></span><br></pre></td></tr></table></figure>
<p>最后，我们要新建一个 Procfile 文件，告诉 Heroku 在生产环境运行一个 Puma 进程。这个文件的内容如代 码清单 7.36 所示。Procfile 文件和 Gemfile 文件一样，应该放在应用的根目录中。</p>
<blockquote>
<p>./Procfile</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">web: bundle <span class="built_in">exec</span> puma -C config/puma.rb</span><br></pre></td></tr></table></figure>
<h4 id="配置生产数据库"><a href="#配置生产数据库" class="headerlink" title="配置生产数据库"></a>配置生产数据库</h4><blockquote>
<p>config/database.yml</p>
</blockquote>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">default:</span> <span class="meta">&amp;default</span></span><br><span class="line"><span class="attr">      adapter:</span> <span class="string">sqlite3</span></span><br><span class="line"><span class="attr">      pool:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">      timeout:</span> <span class="number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">development:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="meta">*default</span></span><br><span class="line"><span class="attr">    database:</span> <span class="string">db/development.sqlite3</span></span><br><span class="line"><span class="comment"># Warning: The database defined as "test" will be erased and</span></span><br><span class="line"><span class="comment"># re-generated from your development database when you run "rake".</span></span><br><span class="line"><span class="comment"># Do not set this db to the same as development or production. </span></span><br><span class="line"></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="meta">*default</span></span><br><span class="line"><span class="attr">    database:</span> <span class="string">db/test.sqlite3</span></span><br><span class="line"></span><br><span class="line"><span class="attr">production:</span></span><br><span class="line"><span class="attr">    adapter:</span> <span class="string">postgresql</span></span><br><span class="line"><span class="attr">    encoding:</span> <span class="string">unicode</span></span><br><span class="line">    <span class="comment"># For details on connection pooling, see Rails configuration guide # https://guides.rubyonrails.org/configuring.html#database-pooling pool: &lt;%= ENV.fetch("RAILS_MAX_THREADS") &#123; 5 &#125; %&gt;</span></span><br><span class="line"><span class="attr">    database:</span> <span class="string">sample_app_production</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">sample_app</span></span><br><span class="line"><span class="attr">    password:</span> &lt;%=<span class="ruby"> ENV[<span class="string">'SAMPLE_APP_DATABASE_PASSWORD'</span>] </span>%&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Full Stack</category>
        <category>Ruby on Rails</category>
      </categories>
  </entry>
  <entry>
    <title>rails tutorials: data model</title>
    <url>/rails-tutorials-data-model/2020/01/17/</url>
    <content><![CDATA[<h3 id="生成-User-Model"><a href="#生成-User-Model" class="headerlink" title="生成 User Model"></a>生成 User Model</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rails g model User name:string email:string</span><br></pre></td></tr></table></figure>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><blockquote>
<p>app/models/user.rb</p>
</blockquote>
<h4 id="存在性验证"><a href="#存在性验证" class="headerlink" title="存在性验证"></a>存在性验证</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ApplicationRecord </span></span><br><span class="line">    validates <span class="symbol">:name</span>, <span class="symbol">presence:</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h4 id="长度验证"><a href="#长度验证" class="headerlink" title="长度验证"></a>长度验证</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ApplicationRecord</span></span><br><span class="line">    validates <span class="symbol">:name</span>, <span class="symbol">presence:</span> <span class="literal">true</span>, <span class="symbol">length:</span> &#123; <span class="symbol">maximum:</span> <span class="number">50</span> &#125; </span><br><span class="line">    validates <span class="symbol">:email</span>, <span class="symbol">presence:</span> <span class="literal">true</span>, <span class="symbol">length:</span> &#123; <span class="symbol">maximum:</span> <span class="number">255</span> &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h4 id="电子邮件格式验证"><a href="#电子邮件格式验证" class="headerlink" title="电子邮件格式验证"></a>电子邮件格式验证</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ApplicationRecord</span></span><br><span class="line">    VALID_EMAIL_REGEX = <span class="regexp">/\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i</span></span><br><span class="line">    validates <span class="symbol">:name</span>, <span class="symbol">presence:</span> <span class="literal">true</span>, <span class="symbol">length:</span> &#123; <span class="symbol">maximum:</span> <span class="number">50</span> &#125; </span><br><span class="line">    validates <span class="symbol">:email</span>, <span class="symbol">presence:</span> <span class="literal">true</span>, <span class="symbol">length:</span> &#123; <span class="symbol">maximum:</span> <span class="number">255</span> &#125;,</span><br><span class="line">                      <span class="symbol">format:</span> &#123;<span class="symbol">with:</span> VALID_EMAIL_REGEX&#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h4 id="唯一性验证"><a href="#唯一性验证" class="headerlink" title="唯一性验证"></a>唯一性验证</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ApplicationRecord</span></span><br><span class="line">    VALID_EMAIL_REGEX = <span class="regexp">/\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i</span></span><br><span class="line">    validates <span class="symbol">:name</span>, <span class="symbol">presence:</span> <span class="literal">true</span>, <span class="symbol">length:</span> &#123; <span class="symbol">maximum:</span> <span class="number">50</span> &#125; </span><br><span class="line">    validates <span class="symbol">:email</span>, <span class="symbol">presence:</span> <span class="literal">true</span>, <span class="symbol">length:</span> &#123; <span class="symbol">maximum:</span> <span class="number">255</span> &#125;,</span><br><span class="line">                      <span class="symbol">format:</span> &#123;<span class="symbol">with:</span> VALID_EMAIL_REGEX&#125;,</span><br><span class="line">                      <span class="symbol">uniqueness:</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="数据库层唯一性验证"><a href="#数据库层唯一性验证" class="headerlink" title="数据库层唯一性验证"></a>数据库层唯一性验证</h3><blockquote>
<p>rails generate migration add_index_to_users_email</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddIndexToUsersEmail</span> &lt; ActiveRecord::Migration[6.0] </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">change</span></span></span><br><span class="line">        add_index <span class="symbol">:users</span>, <span class="symbol">:email</span>, <span class="symbol">unique:</span> <span class="literal">true</span> </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rails db:migrate</span><br></pre></td></tr></table></figure>
<h3 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h3><p>保证存储在数据库中的电子邮件都是小写字母的形式</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ApplicationRecord</span></span><br><span class="line">    before_save &#123; <span class="keyword">self</span>.email = email.downcase &#125;</span><br><span class="line">    validates <span class="symbol">:name</span>, <span class="symbol">presence:</span> <span class="literal">true</span>, <span class="symbol">length:</span> &#123; <span class="symbol">maximum:</span> <span class="number">50</span> &#125; </span><br><span class="line">    VALID_EMAIL_REGEX = <span class="regexp">/\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i</span> </span><br><span class="line">    validates <span class="symbol">:email</span>, <span class="symbol">presence:</span> <span class="literal">true</span>, <span class="symbol">length:</span> &#123; <span class="symbol">maximum:</span> <span class="number">255</span> &#125;,</span><br><span class="line">                      <span class="symbol">format:</span> &#123; <span class="symbol">with:</span> VALID_EMAIL_REGEX &#125;, <span class="symbol">uniqueness:</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="添加安全密码"><a href="#添加安全密码" class="headerlink" title="添加安全密码"></a>添加安全密码</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ApplicationRecord</span></span><br><span class="line">    ......</span><br><span class="line">    has_secure_password</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>在模型中调用这个方法后，会自动添加如下功能:</p>
<ol>
<li>在数据库中的password_digest列存储安全的密码哈希值;</li>
<li>获得一对虚拟属性，20password和password_confirmation，而且创建用户对象时会执行存在性验证和 匹配验证;</li>
<li>获得authenticate方法，如果密码正确，返回对应的用户对象，否则返回false。</li>
</ol>
<p>has_secure_password 发挥功效的唯一要求是，对应的模型中有个名为 password_digest 的属性。因此，创建一个适当的迁移文件，添加 password_digest 列。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rails generate migration add_password_digest_to_users password_digest:string</span><br></pre></td></tr></table></figure>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddPasswordDigestToUsers</span> &lt; ActiveRecord::Migration[6.0] </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">change</span></span></span><br><span class="line">        add_column <span class="symbol">:users</span>, <span class="symbol">:password_digest</span>, <span class="symbol">:string</span> </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rails db:migrate</span><br></pre></td></tr></table></figure>
<p>has_secure_password 方法使用先进的 bcrypt 哈希算法计算密码摘要。使用 bcrypt 计算密码哈希值，就算攻击者设法获得了数据库副本也无法登录网站。我们要把 bcrypt gem 添加到 Gemfile 文件中。</p>
]]></content>
      <categories>
        <category>Full Stack</category>
        <category>Ruby on Rails</category>
      </categories>
  </entry>
  <entry>
    <title>rails-tutorials: static page and automated testing</title>
    <url>/rails-tutorials-static-page-and-automated-testing/2020/01/11/</url>
    <content><![CDATA[<h3 id="生成静态页面的控制器"><a href="#生成静态页面的控制器" class="headerlink" title="生成静态页面的控制器"></a>生成静态页面的控制器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rails generate controller StaticPages home <span class="built_in">help</span></span><br></pre></td></tr></table></figure>
<h3 id="撤销操作"><a href="#撤销操作" class="headerlink" title="撤销操作"></a>撤销操作</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rails generate controller StaticPages home <span class="built_in">help</span></span><br><span class="line">rails destroy  controller StaticPages home <span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">rails generate model User name:string email:string</span><br><span class="line">rails destroy model User</span><br><span class="line"></span><br><span class="line">rails db:migrate</span><br><span class="line">rails db:rollback</span><br><span class="line">rails db:migrate VERSION=0</span><br></pre></td></tr></table></figure>
<h3 id="TDD"><a href="#TDD" class="headerlink" title="TDD"></a>TDD</h3><blockquote>
<p>test/controllers/static_pages_controller_test.rb</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticPagesControllerTest</span> &lt; ActionDispatch::IntegrationTest</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @base_title = <span class="string">"Ruby on Rails Tutorial Sample App"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    test <span class="string">"should get home"</span> <span class="keyword">do</span></span><br><span class="line">        get static_pages_home_url</span><br><span class="line">        assert_response <span class="symbol">:success</span></span><br><span class="line">        assert_select <span class="string">"title"</span>, <span class="string">"Home | <span class="subst">#&#123;@base_title&#125;</span>"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    test <span class="string">"should get help"</span> <span class="keyword">do</span></span><br><span class="line">        get static_pages_help_url</span><br><span class="line">        assert_response <span class="symbol">:success</span></span><br><span class="line">        assert_select <span class="string">"title"</span>, <span class="string">"Help | <span class="subst">#&#123;@base_title&#125;</span>"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    test <span class="string">"should get about"</span> <span class="keyword">do</span></span><br><span class="line">        get static_pages_about_url</span><br><span class="line">        assert_response <span class="symbol">:success</span></span><br><span class="line">        assert_select <span class="string">"title"</span>, <span class="string">"About | <span class="subst">#&#123;@base_title&#125;</span>"</span></span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>app/views/static_pages/home.html.erb</p>
</blockquote>
<p>通过&lt;% … %&gt;调用Rails提供的<code>provide</code>函数，把字符串”Home”赋给:title。11然后，在标题中，我们使<br>用类似的符号&lt;%= … %&gt;，通过Ruby的<code>yield</code>函数把标题插入模板中。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">provide</span>(<span class="attr">:title</span>, "<span class="attr">Home</span>") %&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">yield</span>(<span class="attr">:title</span>) %&gt;</span> | Ruby on Rails Tutorial Sample App<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Sample App<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        This is the home page for the</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.railstutorial.org/"</span>&gt;</span>Ruby on Rails Tutorial<span class="tag">&lt;/<span class="name">a</span>&gt;</span> sample application.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>为了提取出共用的结构，Rails 提供了一个特别的布局文件，名为 application.html.erb。</p>
<blockquote>
<p>app/views/layouts/application.html.erb</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">yield</span>(<span class="attr">:title</span>) %&gt;</span> | Ruby on Rails Tutorial Sample App<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">%=</span> <span class="attr">csrf_meta_tags</span> %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%=</span> <span class="attr">csp_meta_tag</span> %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%=</span> <span class="attr">stylesheet_link_tag</span> '<span class="attr">application</span>', <span class="attr">media:</span> '<span class="attr">all</span>', '<span class="attr">data-turbolinks-track</span>'<span class="attr">:</span> '<span class="attr">reload</span>' %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%=</span> <span class="attr">javascript_pack_tag</span> '<span class="attr">application</span>', '<span class="attr">data-turbolinks-track</span>'<span class="attr">:</span> '<span class="attr">reload</span>' %&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%=</span> <span class="attr">yield</span> %&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这几行代码的作用是，引入应用的样式表和 JavaScript 文件; Rails 提供的 csp_meta_tag 方法实现内容安全策略(Content Security Policy，CSP)，避免遭受跨站脚本(cross-site scripting，XSS)攻击;Rails 提供的 csrf_meta_tags 方法用于避免跨站请求伪造(Cross-Site Request Forgery，CSRF)攻击。</p>
<blockquote>
<p>app/views/static_pages/home.html.erb</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">provide</span>(<span class="attr">:title</span>, "<span class="attr">Home</span>") %&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Sample App<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    This is the home page for the</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.railstutorial.org/"</span>&gt;</span>Ruby on Rails Tutorial<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line">    sample application.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>&lt;%= yield %&gt;</code>这行代码的作用是，把每个页面的内容插入布局中。在布局 中使用这行代码后，访问 /static_pages/home 时会把 home.html.erb 中的内容转换成 HTML，然后插入 <code>&lt;%= yield %&gt;</code> 所在的位置。</p>
]]></content>
      <categories>
        <category>Full Stack</category>
        <category>Ruby on Rails</category>
      </categories>
  </entry>
  <entry>
    <title>rails tutorials - toy_app</title>
    <url>/rails-tutorials-toy-app/2020/01/11/</url>
    <content><![CDATA[<h3 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rails new toy_app</span><br><span class="line"><span class="built_in">cd</span> toy_app</span><br></pre></td></tr></table></figure>
<h3 id="修改-Gemfile"><a href="#修改-Gemfile" class="headerlink" title="修改 Gemfile"></a>修改 Gemfile</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">group :development, :<span class="built_in">test</span> <span class="keyword">do</span></span><br><span class="line">    gem <span class="string">'sqlite3'</span>, <span class="string">'1.4.1'</span></span><br><span class="line">    gem <span class="string">'byebug'</span>, <span class="string">'11.0.1'</span>, platforms: [:mri, :mingw, :x64_mingw]</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">group :production <span class="keyword">do</span> </span><br><span class="line">    gem <span class="string">'pg'</span>, <span class="string">'1.1.4'</span></span><br><span class="line">end</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装gem时要指定--without production选项，禁止安装生产环境使用的gem </span></span><br><span class="line">bundle install --without production</span><br></pre></td></tr></table></figure>
<h3 id="使用-git-版本控制系统"><a href="#使用-git-版本控制系统" class="headerlink" title="使用 git 版本控制系统"></a>使用 git 版本控制系统</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git add -A</span><br><span class="line">git commit -m <span class="string">"Initialize repository"</span></span><br><span class="line"></span><br><span class="line">git remote add origin https://github.com/&lt;username&gt;/toy_app.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
<h3 id="修改-root-route"><a href="#修改-root-route" class="headerlink" title="修改 root route"></a>修改 root route</h3><center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="route.png" width="50%" height="50%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">routes</div>
</center>


<blockquote>
<p>app/controllers/application_controller.rb</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplicationController</span> &lt; ActionController::Base</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hello</span></span></span><br><span class="line">        render <span class="symbol">html:</span> <span class="string">"hello, world!"</span></span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>config/routes.rb</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Rails.application.routes.draw <span class="keyword">do</span> </span><br><span class="line">    root <span class="string">'application#hello'</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="创建数据资源"><a href="#创建数据资源" class="headerlink" title="创建数据资源"></a>创建数据资源</h3><center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="users.png" width="50%" height="50%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">User model</div>
</center>

<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="microposts.png" width="50%" height="50%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">microposts model</div>
</center>

<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="relation.png" width="50%" height="50%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">relation between user and micropost</div>
</center>


<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rails generate scaffold User name:string email:string</span><br><span class="line">rails generate scaffold Micropost content:text user_id:<span class="built_in">integer</span></span><br></pre></td></tr></table></figure>
<h3 id="修改根路由"><a href="#修改根路由" class="headerlink" title="修改根路由"></a>修改根路由</h3><blockquote>
<p>config/routes.rb</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Rails.application.routes.draw <span class="keyword">do</span> </span><br><span class="line">    resources <span class="symbol">:users</span></span><br><span class="line">    root <span class="string">'users#index'</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="模型验证"><a href="#模型验证" class="headerlink" title="模型验证"></a>模型验证</h3><blockquote>
<p>app/models/micropost.rb</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Micropost</span> &lt; ApplicationRecord</span></span><br><span class="line">    belongs_to <span class="symbol">:user</span></span><br><span class="line">    validates <span class="symbol">:content</span>, <span class="symbol">length:</span> &#123; <span class="symbol">maximum:</span> <span class="number">140</span> &#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ApplicationRecord </span></span><br><span class="line">    has_many <span class="symbol">:microposts</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="数据库迁移"><a href="#数据库迁移" class="headerlink" title="数据库迁移"></a>数据库迁移</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rails db:migrate</span><br></pre></td></tr></table></figure>
<h3 id="部署到heroku"><a href="#部署到heroku" class="headerlink" title="部署到heroku"></a>部署到<code>heroku</code></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add -A</span><br><span class="line">git commit -m <span class="string">"Finish toy app"</span></span><br><span class="line">git push</span><br><span class="line"></span><br><span class="line">heroku run rails db:migrate</span><br><span class="line">git push heroku</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Full Stack</category>
        <category>Ruby on Rails</category>
      </categories>
  </entry>
  <entry>
    <title>Fastai Data Block API</title>
    <url>/Fastai-Data-Block-API/2019/12/29/</url>
    <content><![CDATA[<p>Essentially steps:</p>
<ol>
<li><p>Define the source of your inputs(X values)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ImageItemList.from_folder(path) </span><br><span class="line"></span><br><span class="line"><span class="comment">## This step generate the `ItemList` class. </span></span><br><span class="line"></span><br><span class="line"><span class="comment">## ItemBase: The ItemBase class defines what an “item” in your inputs or your targets looks like. </span></span><br><span class="line"></span><br><span class="line"><span class="comment">## ItemList: An ItemList defines a collections of `items` (e.g., ItemBase objects) including how they are individually fetched and displayed.</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Define how you want to split your inputs into training and validation datasets using one of the built-in mechanisms for doing so.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ImageItemList.from_folder(path)</span><br><span class="line">             .split_by_folder()</span><br><span class="line"></span><br><span class="line"><span class="comment">## This step generate the `ItemLists` class. </span></span><br><span class="line"></span><br><span class="line"><span class="comment">## ItemLists: A collection of ItemList instances for your inputs or targets. the `split` function above will return a separate ItemList instance for both your training and validation sets in an `ItemLists` object.</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Define the source of your targets (that is your y values) and combine them with the inputs of your training and validation datasets in the form of fastai <code>LabelList</code> objects. LabelList subclasses the PyTorch <code>Dataset</code> class.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ImageItemList.from_folder(path)</span><br><span class="line">             .split_by_folder()</span><br><span class="line">             .label_from_folder()</span><br><span class="line"></span><br><span class="line"><span class="comment">## This step generate the `LabelLists` class</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## LabelList: A LabelList is a PyTorch Dataset that combines your input and target ItemList classes (an inputs ItemList + a targets ItemList = a LabelList). </span></span><br><span class="line"></span><br><span class="line"><span class="comment">## LabelLists: A collection of LabelList instances you get as a result of your `labeling` function. Again, a LabelList` is a PyTorch Dataset and essentially defines the things, your inputs and optionally targets, fed into the forward function of your model.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Pre-Processing: This is also where any PreProcessor classes you’ve passed into your ItemList class run. These classes define things you want done to your data once before they are turned into PyTorch Datasets/DataLoaders. Examples include things like tokenizing and numericalizing text, filling in missing values in tabular, etc…. You can define a default `PreProcessor` or collection of PreProcessors you want ran by overloading the _processor class variable in your custom ItemList.</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Add a test dataset (optional).</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = (ImageItemList.from_folder(path) </span><br><span class="line">                     .split_by_folder()</span><br><span class="line">                     .label_from_folder()</span><br><span class="line">                     .add_test_folder())</span><br><span class="line"></span><br><span class="line"><span class="comment">## If you add a test set, like we do above, the same pre-processing applied to your validation set will be applied to your test.</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Add transforms to your <code>LabelList</code> objects (optional). Here you can apply data augmentation to either, or both, your inputs and targets.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = (ImageItemList.from_folder(path) </span><br><span class="line">                     .split_by_folder()</span><br><span class="line">                     .label_from_folder()</span><br><span class="line">                     .add_test_folder()</span><br><span class="line">                     .transform(tfms, size=<span class="number">64</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">## Transforms define data augmentation you want done to either, or both, of your inputs and targets datasets.</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Build PyTorch DataLoaders from the Datasets defined above and package them up into a fastai <code>DataBunch</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = (ImageItemList.from_folder(path) </span><br><span class="line">                     .split_by_folder()</span><br><span class="line">                     .label_from_folder()</span><br><span class="line">                     .add_test_folder()</span><br><span class="line">                     .transform(tfms, size=<span class="number">64</span>)</span><br><span class="line">                     .databunch())</span><br><span class="line"></span><br><span class="line"><span class="comment">## The step generate the `DataBunch` class</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## A DataBunch is a collection of PyTorch DataLoaders returned when you call the databunch function. It also defines how they are created from your training, validation, and optionally test LabelList instances.</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>Once this is done, you’ll have everything you need to train, validate, and test any PyTorch nn.Module using the fastai library. You’ll also have everything you need to later do inference on future data.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImageTuple</span><span class="params">(ItemBase)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    we need to create a custom type of items since we feed the model tuples of images.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, img1, img2)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">         The basis is to code the data attribute that is what will be </span></span><br><span class="line"><span class="string">         given to the model. Note that we still keep track of the </span></span><br><span class="line"><span class="string">         initial object (usuall in an obj attribute) to be able to show </span></span><br><span class="line"><span class="string">         nice representations later on. </span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.img1 = img1</span><br><span class="line">        self.img2 = img2</span><br><span class="line">        self.obj = (img1,img2)</span><br><span class="line">        self.data = [<span class="number">-1</span>+<span class="number">2</span>*img1.data,<span class="number">-1</span>+<span class="number">2</span>*img2.data]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">apply_tfms</span><span class="params">(self, tfms, **kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Then we want to apply data augmentation to our tuple of images. </span></span><br><span class="line"><span class="string">        That's done by writing an apply_tfms method as we saw before. </span></span><br><span class="line"><span class="string">        Here we pass that call to the two underlying images then update the data.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.img1 = self.img1.apply_tfms(tfms, **kwargs)</span><br><span class="line">        self.img2 = self.img2.apply_tfms(tfms, **kwargs)</span><br><span class="line">        self.data = [<span class="number">-1</span>+<span class="number">2</span>*self.img1.data,<span class="number">-1</span>+<span class="number">2</span>*self.img2.data]</span><br><span class="line">        <span class="keyword">return</span> self   </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_one</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        We define a last method to stack the two images next to each other, which we </span></span><br><span class="line"><span class="string">        will use later for a customized show_batch / show_results behavior.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> Image(<span class="number">0.5</span>+torch.cat(self.data,<span class="number">2</span>)/<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TargetTupleList</span><span class="params">(ItemList)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reconstruct</span><span class="params">(self, t:Tensor)</span>:</span> </span><br><span class="line">        <span class="keyword">if</span> len(t.size()) == <span class="number">0</span>: <span class="keyword">return</span> t</span><br><span class="line">        <span class="keyword">return</span> ImageTuple(Image(t[<span class="number">0</span>]/<span class="number">2</span>+<span class="number">0.5</span>),Image(t[<span class="number">1</span>]/<span class="number">2</span>+<span class="number">0.5</span>))</span><br></pre></td></tr></table></figure>
<ul>
<li><code>_bunch</code> contains the name of the class that will be used to create a DataBunch</li>
<li><code>_processor</code> contains a class (or a list of classes) of PreProcessor that will then be used as the default to create processor for this ItemList</li>
<li><code>_label_cls</code> contains the class that will be used to create the labels by default</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImageTupleList</span><span class="params">(ImageList)</span>:</span></span><br><span class="line">    _label_cls=TargetTupleList</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, items, itemsB=None, **kwargs)</span>:</span></span><br><span class="line">        super().__init__(items, **kwargs)</span><br><span class="line">        self.itemsB = itemsB</span><br><span class="line">        self.copy_new.append(<span class="string">'itemsB'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, i)</span>:</span></span><br><span class="line">        img1 = super().get(i)</span><br><span class="line">        fn = self.itemsB[random.randint(<span class="number">0</span>, len(self.itemsB)<span class="number">-1</span>)]</span><br><span class="line">        <span class="keyword">return</span> ImageTuple(img1, open_image(fn))</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reconstruct</span><span class="params">(self, t:Tensor)</span>:</span> </span><br><span class="line">        <span class="keyword">return</span> ImageTuple(Image(t[<span class="number">0</span>]/<span class="number">2</span>+<span class="number">0.5</span>),Image(t[<span class="number">1</span>]/<span class="number">2</span>+<span class="number">0.5</span>))</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_folders</span><span class="params">(cls, path, folderA, folderB, **kwargs)</span>:</span></span><br><span class="line">        itemsB = ImageList.from_folder(path/folderB).items</span><br><span class="line">        res = super().from_folder(path/folderA, itemsB=itemsB, **kwargs)</span><br><span class="line">        res.path = path</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_xys</span><span class="params">(self, xs, ys, figsize:Tuple[int,int]=<span class="params">(<span class="number">12</span>,<span class="number">6</span>)</span>, **kwargs)</span>:</span></span><br><span class="line">        <span class="string">"Show the `xs` and `ys` on a figure of `figsize`. `kwargs` are passed to the show method."</span></span><br><span class="line">        rows = int(math.sqrt(len(xs)))</span><br><span class="line">        fig, axs = plt.subplots(rows,rows,figsize=figsize)</span><br><span class="line">        <span class="keyword">for</span> i, ax <span class="keyword">in</span> enumerate(axs.flatten() <span class="keyword">if</span> rows &gt; <span class="number">1</span> <span class="keyword">else</span> [axs]):</span><br><span class="line">            xs[i].to_one().show(ax=ax, **kwargs)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_xyzs</span><span class="params">(self, xs, ys, zs, figsize:Tuple[int,int]=None, **kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""Show `xs` (inputs), `ys` (targets) and `zs` (predictions) on a figure of `figsize`.</span></span><br><span class="line"><span class="string">        `kwargs` are passed to the show method."""</span></span><br><span class="line">        figsize = ifnone(figsize, (<span class="number">12</span>,<span class="number">3</span>*len(xs)))</span><br><span class="line">        fig,axs = plt.subplots(len(xs), <span class="number">2</span>, figsize=figsize)</span><br><span class="line">        fig.suptitle(<span class="string">'Ground truth / Predictions'</span>, weight=<span class="string">'bold'</span>, size=<span class="number">14</span>)</span><br><span class="line">        <span class="keyword">for</span> i,(x,z) <span class="keyword">in</span> enumerate(zip(xs,zs)):</span><br><span class="line">            x.to_one().show(ax=axs[i,<span class="number">0</span>], **kwargs)</span><br><span class="line">            z.to_one().show(ax=axs[i,<span class="number">1</span>], **kwargs)</span><br></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://blog.usejournal.com/finding-data-block-nirvana-a-journey-through-the-fastai-data-block-api-c38210537fe4" target="_blank" rel="noopener">https://blog.usejournal.com/finding-data-block-nirvana-a-journey-through-the-fastai-data-block-api-c38210537fe4</a></li>
<li><a href="https://docs.fast.ai/tutorial.itemlist.html" target="_blank" rel="noopener">https://docs.fast.ai/tutorial.itemlist.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Deep Learning</category>
      </categories>
  </entry>
  <entry>
    <title>Face Blindness Saver</title>
    <url>/Face-Blindness-Saver/2019/12/25/</url>
    <content><![CDATA[<h1 id="Creating-your-own-dataset-from-Google-Images"><a href="#Creating-your-own-dataset-from-Google-Images" class="headerlink" title="Creating your own dataset from Google Images"></a>Creating your own dataset from Google Images</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastai.vision <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure>
<h2 id="Get-a-list-of-URLs"><a href="#Get-a-list-of-URLs" class="headerlink" title="Get a list of URLs"></a>Get a list of URLs</h2><h3 id="Search-and-scroll"><a href="#Search-and-scroll" class="headerlink" title="Search and scroll"></a>Search and scroll</h3><p>Go to <a href="http://images.google.com" target="_blank" rel="noopener">Google Images</a> and search for the images you are interested in. The more specific you are in your Google Search, the better the results and the less manual pruning you will have to do.</p>
<p>Scroll down until you’ve seen all the images you want to download, or until you see a button that says ‘Show more results’. All the images you scrolled past are now available to download. To get more, click on the button, and continue scrolling. The maximum number of images Google Images shows is 700.</p>
<p>It is a good idea to put things you want to exclude into the search query, for instance if you are searching for the Eurasian wolf, “canis lupus lupus”, it might be a good idea to exclude other variants:</p>
<pre><code>&quot;canis lupus lupus&quot; -dog -arctos -familiaris -baileyi -occidentalis
</code></pre><p>You can also limit your results to show only photos by clicking on Tools and selecting Photos from the Type dropdown.</p>
<h3 id="Download-into-file"><a href="#Download-into-file" class="headerlink" title="Download into file"></a>Download into file</h3><p>Now you must run some Javascript code in your browser which will save the URLs of all the images you want for you dataset.</p>
<p>In Google Chrome press <kbd>Ctrl</kbd><kbd>Shift</kbd><kbd>j</kbd> on Windows/Linux and <kbd>Cmd</kbd><kbd>Opt</kbd><kbd>j</kbd> on macOS, and a small window the javascript ‘Console’ will appear. In Firefox press <kbd>Ctrl</kbd><kbd>Shift</kbd><kbd>k</kbd> on Windows/Linux or <kbd>Cmd</kbd><kbd>Opt</kbd><kbd>k</kbd> on macOS. That is where you will paste the JavaScript commands.</p>
<p>You will need to get the urls of each of the images. Before running the following commands, you may want to disable ad blocking extensions (uBlock, AdBlockPlus etc.) in Chrome. Otherwise the window.open() command doesn’t work. Then you can run the following commands:</p>
<h3 id="Create-directory-and-upload-urls-file-into-your-server"><a href="#Create-directory-and-upload-urls-file-into-your-server" class="headerlink" title="Create directory and upload urls file into your server"></a>Create directory and upload urls file into your server</h3><p>Choose an appropriate name for your labeled images. You can run these steps multiple times to create different labels.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">help(download_images)</span><br></pre></td></tr></table></figure>
<pre><code>Help on function download_images in module fastai.vision.data:

download_images(urls:Collection[str], dest:Union[pathlib.Path, str], max_pics:int=1000, max_workers:int=8, timeout=4)
    Download images listed in text file `urls` to path `dest`, at most `max_pics`
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">path = Path(<span class="string">'data/dogs'</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">folder = <span class="string">'akita'</span></span><br><span class="line">file = <span class="string">'akita.csv'</span></span><br><span class="line">dest = path/folder</span><br><span class="line">dest.mkdir(parents=<span class="keyword">True</span>, exist_ok=<span class="keyword">True</span>)</span><br><span class="line">urls = path/file</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">download_images(urls=urls, dest=dest, max_pics=<span class="number">200</span>)</span><br></pre></td></tr></table></figure>
<pre><code>Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?






Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">folder = <span class="string">'husky'</span></span><br><span class="line">file = <span class="string">'husky.csv'</span></span><br><span class="line">dest = path/folder</span><br><span class="line">dest.mkdir(parents=<span class="keyword">True</span>, exist_ok=<span class="keyword">True</span>)</span><br><span class="line">urls = path/file</span><br><span class="line">download_images(urls=urls, dest=dest, max_pics=<span class="number">200</span>)</span><br></pre></td></tr></table></figure>
<pre><code>Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?






Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">folder = <span class="string">'shibaInu'</span></span><br><span class="line">file = <span class="string">'shibaInu.csv'</span></span><br><span class="line">dest = path/folder</span><br><span class="line">dest.mkdir(parents=<span class="keyword">True</span>, exist_ok=<span class="keyword">True</span>)</span><br><span class="line">urls = path/file</span><br><span class="line">download_images(urls=urls, dest=dest, max_pics=<span class="number">200</span>)</span><br></pre></td></tr></table></figure>
<pre><code>Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?






Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">folder = <span class="string">'alaska'</span></span><br><span class="line">file = <span class="string">'alaska.csv'</span></span><br><span class="line">dest = path/folder</span><br><span class="line">dest.mkdir(parents=<span class="keyword">True</span>, exist_ok=<span class="keyword">True</span>)</span><br><span class="line">urls = path/file</span><br><span class="line">download_images(urls=urls, dest=dest, max_pics=<span class="number">200</span>)</span><br></pre></td></tr></table></figure>
<pre><code>Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?
</code></pre><h3 id="View-data"><a href="#View-data" class="headerlink" title="View data"></a>View data</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">help(DataBunch)</span><br></pre></td></tr></table></figure>
<pre><code>Help on class DataBunch in module fastai.basic_data:

class DataBunch(builtins.object)
 |  Bind `train_dl`,`valid_dl` and `test_dl` in a data object.
 |  
 |  Methods defined here:
 |  
 |  __getattr__(self, k:int) -&gt; Any
 |  
 |  __init__(self, train_dl:torch.utils.data.dataloader.DataLoader, valid_dl:torch.utils.data.dataloader.DataLoader, fix_dl:torch.utils.data.dataloader.DataLoader=None, test_dl:Union[torch.utils.data.dataloader.DataLoader, NoneType]=None, device:torch.device=None, dl_tfms:Union[Collection[Callable], NoneType]=None, path:Union[pathlib.Path, str]=&#39;.&#39;, collate_fn:Callable=&lt;function data_collate at 0x7f14501736a8&gt;, no_check:bool=False)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self) -&gt; str
 |      Return repr(self).
 |  
 |  __setstate__(self, data:Any)
 |  
 |  add_test(self, items:Iterator, label:Any=None, tfms=None, tfm_y=None) -&gt; None
 |      Add the `items` as a test set. Pass along `label` otherwise label them with `EmptyLabel`.
 |  
 |  add_tfm(self, tfm:Callable) -&gt; None
 |  
 |  dl(self, ds_type:fastai.basic_data.DatasetType=&lt;DatasetType.Valid: 2&gt;) -&gt; fastai.basic_data.DeviceDataLoader
 |      Returns appropriate `Dataset` for validation, training, or test (`ds_type`).
 |  
 |  export(self, file:Union[pathlib.Path, str, _io.BufferedWriter, _io.BytesIO]=&#39;export.pkl&#39;)
 |      Export the minimal state of `self` for inference in `self.path/file`. `file` can be file-like (file or buffer)
 |  
 |  one_batch(self, ds_type:fastai.basic_data.DatasetType=&lt;DatasetType.Train: 1&gt;, detach:bool=True, denorm:bool=True, cpu:bool=True) -&gt; Collection[torch.Tensor]
 |      Get one batch from the data loader of `ds_type`. Optionally `detach` and `denorm`.
 |  
 |  one_item(self, item, detach:bool=False, denorm:bool=False, cpu:bool=False)
 |      Get `item` into a batch. Optionally `detach` and `denorm`.
 |  
 |  pre_transform = _db_pre_transform(self, train_tfm:List[Callable], valid_tfm:List[Callable])
 |      Call `train_tfm` and `valid_tfm` after opening image, before converting from `PIL.Image`
 |  
 |  presize = _presize(self, size:int, val_xtra_size:int=32, scale:Tuple[float]=(0.08, 1.0), ratio:Tuple[float]=(0.75, 1.3333333333333333), interpolation:int=2)
 |      Resize images to `size` using `RandomResizedCrop`, passing along `kwargs` to train transform
 |  
 |  remove_tfm(self, tfm:Callable) -&gt; None
 |  
 |  sanity_check(self)
 |      Check the underlying data in the training set can be properly loaded.
 |  
 |  save(self, file:Union[pathlib.Path, str, _io.BufferedWriter, _io.BytesIO]=&#39;data_save.pkl&#39;) -&gt; None
 |      Save the `DataBunch` in `self.path/file`. `file` can be file-like (file or buffer)
 |  
 |  show_batch(self, rows:int=5, ds_type:fastai.basic_data.DatasetType=&lt;DatasetType.Train: 1&gt;, reverse:bool=False, **kwargs) -&gt; None
 |      Show a batch of data in `ds_type` on a few `rows`.
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  create(train_ds:torch.utils.data.dataset.Dataset, valid_ds:torch.utils.data.dataset.Dataset, test_ds:Union[torch.utils.data.dataset.Dataset, NoneType]=None, path:Union[pathlib.Path, str]=&#39;.&#39;, bs:int=64, val_bs:int=None, num_workers:int=6, dl_tfms:Union[Collection[Callable], NoneType]=None, device:torch.device=None, collate_fn:Callable=&lt;function data_collate at 0x7f14501736a8&gt;, no_check:bool=False, **dl_kwargs) -&gt; &#39;DataBunch&#39; from builtins.type
 |      Create a `DataBunch` from `train_ds`, `valid_ds` and maybe `test_ds` with a batch size of `bs`. Passes `**dl_kwargs` to `DataLoader()`
 |  
 |  load_empty = _databunch_load_empty(path, fname:str=&#39;export.pkl&#39;) from builtins.type
 |      Load an empty `DataBunch` from the exported file in `path/fname` with optional `tfms`.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  batch_size
 |  
 |  dls
 |      Returns a list of all DeviceDataLoaders. If you need a specific DeviceDataLoader, access via the relevant property (`train_dl`, `valid_dl`, etc) as the index of DLs in this list is not guaranteed to remain constant.
 |  
 |  empty_val
 |  
 |  fix_ds
 |  
 |  is_empty
 |  
 |  loss_func
 |  
 |  single_ds
 |  
 |  test_ds
 |  
 |  train_ds
 |  
 |  valid_ds
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">help(ImageDataBunch.from_folder)</span><br></pre></td></tr></table></figure>
<pre><code>Help on method from_folder in module fastai.vision.data:

from_folder(path:Union[pathlib.Path, str], train:Union[pathlib.Path, str]=&#39;train&#39;, valid:Union[pathlib.Path, str]=&#39;valid&#39;, test:Union[pathlib.Path, str, NoneType]=None, valid_pct=None, seed:int=None, classes:Collection=None, **kwargs:Any) -&gt; &#39;ImageDataBunch&#39; method of builtins.type instance
    Create from imagenet style dataset in `path` with `train`,`valid`,`test` subfolders (or provide `valid_pct`).
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">help(ImageDataBunch.from_folder)</span><br></pre></td></tr></table></figure>
<pre><code>Help on method from_folder in module fastai.vision.data:

from_folder(path:Union[pathlib.Path, str], train:Union[pathlib.Path, str]=&#39;train&#39;, valid:Union[pathlib.Path, str]=&#39;valid&#39;, test:Union[pathlib.Path, str, NoneType]=None, valid_pct=None, seed:int=None, classes:Collection=None, **kwargs:Any) -&gt; &#39;ImageDataBunch&#39; method of builtins.type instance
    Create from imagenet style dataset in `path` with `train`,`valid`,`test` subfolders (or provide `valid_pct`).
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.seed(<span class="number">7</span>)</span><br><span class="line">data = ImageDataBunch.from_folder(path,train = <span class="string">"."</span>, valid_pct = <span class="number">0.2</span>, size = <span class="number">224</span>, ds_tfms=get_transforms()).normalize(imagenet_stats)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.show_batch(rows = <span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<p><img src="output_16_0.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.classes,data.c, len(data.train_ds), len(data.valid_ds)</span><br></pre></td></tr></table></figure>
<pre><code>([&#39;akita&#39;, &#39;alaska&#39;, &#39;husky&#39;, &#39;shibaInu&#39;], 4, 512, 128)
</code></pre><h2 id="Models"><a href="#Models" class="headerlink" title="Models"></a>Models</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">learn = cnn_learner(data,models.resnet34, metrics = error_rate)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">learn.fit_one_cycle(<span class="number">4</span>)</span><br></pre></td></tr></table></figure>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: left;">
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>error_rate</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>1.609119</td>
      <td>0.857839</td>
      <td>0.328125</td>
      <td>00:05</td>
    </tr>
    <tr>
      <td>1</td>
      <td>1.124259</td>
      <td>0.611583</td>
      <td>0.250000</td>
      <td>00:05</td>
    </tr>
    <tr>
      <td>2</td>
      <td>0.894434</td>
      <td>0.618738</td>
      <td>0.218750</td>
      <td>00:05</td>
    </tr>
    <tr>
      <td>3</td>
      <td>0.738053</td>
      <td>0.625707</td>
      <td>0.242188</td>
      <td>00:05</td>
    </tr>
  </tbody>
</table>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lean.load(<span class="string">"stage-1"</span>)</span><br></pre></td></tr></table></figure>
<pre><code>Learner(data=ImageDataBunch;

Train: LabelList (512 items)
x: ImageList
Image (3, 224, 224),Image (3, 224, 224),Image (3, 224, 224),Image (3, 224, 224),Image (3, 224, 224)
y: CategoryList
shibaInu,shibaInu,shibaInu,shibaInu,shibaInu
Path: data/dogs;

Valid: LabelList (128 items)
x: ImageList
Image (3, 224, 224),Image (3, 224, 224),Image (3, 224, 224),Image (3, 224, 224),Image (3, 224, 224)
y: CategoryList
shibaInu,alaska,akita,shibaInu,husky
Path: data/dogs;

Test: None, model=Sequential(
  (0): Sequential(
    (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace)
    (3): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (2): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (2): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (3): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (2): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (3): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (4): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (5): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (2): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (1): Sequential(
    (0): AdaptiveConcatPool2d(
      (ap): AdaptiveAvgPool2d(output_size=1)
      (mp): AdaptiveMaxPool2d(output_size=1)
    )
    (1): Flatten()
    (2): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): Dropout(p=0.25)
    (4): Linear(in_features=1024, out_features=512, bias=True)
    (5): ReLU(inplace)
    (6): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (7): Dropout(p=0.5)
    (8): Linear(in_features=512, out_features=4, bias=True)
  )
), opt_func=functools.partial(&lt;class &#39;torch.optim.adam.Adam&#39;&gt;, betas=(0.9, 0.99)), loss_func=FlattenedLoss of CrossEntropyLoss(), metrics=[&lt;function error_rate at 0x7f144e518e18&gt;], true_wd=True, bn_wd=True, wd=0.01, train_bn=True, path=PosixPath(&#39;data/dogs&#39;), model_dir=&#39;models&#39;, callback_fns=[functools.partial(&lt;class &#39;fastai.basic_train.Recorder&#39;&gt;, add_time=True, silent=False)], callbacks=[], layer_groups=[Sequential(
  (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace)
  (3): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (6): ReLU(inplace)
  (7): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (8): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (9): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (10): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (11): ReLU(inplace)
  (12): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (14): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (15): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (16): ReLU(inplace)
  (17): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (18): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (19): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
  (20): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (21): ReLU(inplace)
  (22): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (23): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (24): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
  (25): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (26): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (27): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (28): ReLU(inplace)
  (29): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (30): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (31): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (32): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (33): ReLU(inplace)
  (34): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (35): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (36): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (37): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (38): ReLU(inplace)
  (39): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (40): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
), Sequential(
  (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
  (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace)
  (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (5): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
  (6): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (7): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (8): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (9): ReLU(inplace)
  (10): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (11): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (13): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (14): ReLU(inplace)
  (15): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (16): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (17): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (18): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (19): ReLU(inplace)
  (20): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (21): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (22): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (23): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (24): ReLU(inplace)
  (25): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (26): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (27): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (28): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (29): ReLU(inplace)
  (30): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (31): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (32): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
  (33): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (34): ReLU(inplace)
  (35): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (36): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (37): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
  (38): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (39): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (40): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (41): ReLU(inplace)
  (42): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (43): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (44): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (45): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (46): ReLU(inplace)
  (47): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (48): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
), Sequential(
  (0): AdaptiveAvgPool2d(output_size=1)
  (1): AdaptiveMaxPool2d(output_size=1)
  (2): Flatten()
  (3): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (4): Dropout(p=0.25)
  (5): Linear(in_features=1024, out_features=512, bias=True)
  (6): ReLU(inplace)
  (7): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (8): Dropout(p=0.5)
  (9): Linear(in_features=512, out_features=4, bias=True)
)], add_time=True, silent=False)
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lean.unfreeze()</span><br><span class="line">lean.lr_find()</span><br></pre></td></tr></table></figure>
<pre><code>LR Finder is complete, type {learner_name}.recorder.plot() to see the graph.
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lean.recorder.plot()</span><br></pre></td></tr></table></figure>
<p><img src="output_23_0.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lean.fit_one_cycle(<span class="number">4</span>,max_lr=slice(<span class="number">1e-4</span>,<span class="number">3e-3</span>))</span><br></pre></td></tr></table></figure>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: left;">
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>error_rate</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>0.676978</td>
      <td>0.840263</td>
      <td>0.406250</td>
      <td>00:06</td>
    </tr>
    <tr>
      <td>1</td>
      <td>0.629555</td>
      <td>0.816797</td>
      <td>0.437500</td>
      <td>00:06</td>
    </tr>
    <tr>
      <td>2</td>
      <td>0.582286</td>
      <td>0.740251</td>
      <td>0.335938</td>
      <td>00:06</td>
    </tr>
    <tr>
      <td>3</td>
      <td>0.535621</td>
      <td>0.722407</td>
      <td>0.289062</td>
      <td>00:06</td>
    </tr>
  </tbody>
</table>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">learn.save(<span class="string">'stage-2'</span>)</span><br></pre></td></tr></table></figure>
<h2 id="Intepretation"><a href="#Intepretation" class="headerlink" title="Intepretation"></a>Intepretation</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">interp = ClassificationInterpretation.from_learner(lean)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">interp.plot_confusion_matrix()</span><br></pre></td></tr></table></figure>
<p><img src="output_28_0.png" alt="png"></p>
<h2 id="Cleaning-Up"><a href="#Cleaning-Up" class="headerlink" title="Cleaning Up"></a>Cleaning Up</h2><p>Some of our top losses aren’t due to bad performance by our model. There are images in our data set that shouldn’t be.</p>
<p>Using the <code>ImageCleaner</code> widget from <code>fastai.widgets</code> we can prune our top losses, removing photos that don’t belong.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastai.widgets <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure>
<p>First we need to get the file paths from our top_losses. We can do this with <code>.from_toplosses</code>. We then feed the top losses indexes and corresponding dataset to <code>ImageCleaner</code>.</p>
<p>Notice that the widget will not delete images directly from disk but it will create a new csv file <code>cleaned.csv</code> from where you can create a new ImageDataBunch with the corrected labels to continue training your model.</p>
<p>In order to clean the entire set of images, we need to create a new dataset without the split. The video lecture demostrated the use of the <code>ds_type</code> param which no longer has any effect. See <a href="https://forums.fast.ai/t/duplicate-widget/30975/10" target="_blank" rel="noopener">the thread</a> for more details.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">db = (ImageList.from_folder(path)</span><br><span class="line">                   .split_none()</span><br><span class="line">                   .label_from_folder()</span><br><span class="line">                   .transform(get_transforms(), size=<span class="number">224</span>)</span><br><span class="line">                   .databunch()</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">learn_cln = cnn_learner(db, models.resnet34, metrics=error_rate)</span><br><span class="line">learn_cln.load(<span class="string">'stage-2'</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ds, idxs = DatasetFormatter().from_toplosses(learn_cln)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ImageCleaner(ds, idxs, path)</span><br></pre></td></tr></table></figure>
<pre><code>&#39;No images to show :)&#39;
</code></pre><p>You can also find duplicates in your dataset and delete them! To do this, you need to run <code>.from_similars</code> to get the potential duplicates’ ids and then run <code>ImageCleaner</code> with <code>duplicates=True</code>. The API works in a similar way as with misclassified images: just choose the ones you want to delete and click ‘Next Batch’ until there are no more images left.</p>
<p>Make sure to recreate the databunch and <code>learn_cln</code> from the <code>cleaned.csv</code> file. Otherwise the file would be overwritten from scratch, losing all the results from cleaning the data from toplosses.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">doc(ImageDataBunch.from_csv)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data_cleand = ImageDataBunch.from_csv(path,csv_labels = <span class="string">"cleaned.csv"</span>,ds_tfms=get_transforms(),valid_pct = <span class="number">0.2</span>, size = <span class="number">224</span>, bs = <span class="number">32</span>).normalize()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data_cleand.show_batch(rows=<span class="number">4</span>)</span><br></pre></td></tr></table></figure>
<p><img src="output_39_0.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">final_learn = cnn_learner(data_cleand, models.resnet50, metrics = error_rate)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">final_learn.fit_one_cycle(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: left;">
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>error_rate</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>1.187646</td>
      <td>0.361647</td>
      <td>0.114943</td>
      <td>00:07</td>
    </tr>
    <tr>
      <td>1</td>
      <td>0.830483</td>
      <td>0.527104</td>
      <td>0.149425</td>
      <td>00:06</td>
    </tr>
    <tr>
      <td>2</td>
      <td>0.620431</td>
      <td>0.356172</td>
      <td>0.126437</td>
      <td>00:06</td>
    </tr>
    <tr>
      <td>3</td>
      <td>0.493722</td>
      <td>0.324358</td>
      <td>0.114943</td>
      <td>00:06</td>
    </tr>
    <tr>
      <td>4</td>
      <td>0.417320</td>
      <td>0.308305</td>
      <td>0.103448</td>
      <td>00:06</td>
    </tr>
  </tbody>
</table>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">final_learn.save(<span class="string">"stage-1"</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># final_learn.unfreeze()</span></span><br><span class="line">final_learn.lr_find()</span><br></pre></td></tr></table></figure>
<pre><code>LR Finder is complete, type {learner_name}.recorder.plot() to see the graph.
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">final_learn.recorder.plot()</span><br></pre></td></tr></table></figure>
<p><img src="output_44_0.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">final_learn.fit_one_cycle(<span class="number">1</span>, max_lr=slice(<span class="number">1e-3</span>,<span class="number">3e-3</span>))</span><br></pre></td></tr></table></figure>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: left;">
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>error_rate</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>0.218457</td>
      <td>0.279203</td>
      <td>0.080460</td>
      <td>00:06</td>
    </tr>
  </tbody>
</table>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">final_learn.save(<span class="string">"stage-final"</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">interp = ClassificationInterpretation.from_learner(final_learn)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">interp.plot_confusion_matrix()</span><br></pre></td></tr></table></figure>
<p><img src="output_48_0.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">interp.plot_top_losses(<span class="number">9</span>, figsize=(<span class="number">15</span>,<span class="number">11</span>))</span><br></pre></td></tr></table></figure>
<p><img src="output_49_0.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">final_learn.export()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">defaults.device = torch.device(<span class="string">'cpu'</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">img = open_image(path/<span class="string">'akita'</span>/<span class="string">'00000100.jpg'</span>)</span><br><span class="line">img</span><br></pre></td></tr></table></figure>
<p><img src="output_53_0.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">serving_model = load_learner(path)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pred_class,pred_idx,outputs = learn.predict(img)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pred_class</span><br></pre></td></tr></table></figure>
<pre><code>Category akita
</code></pre><h2 id="Model-Serving"><a href="#Model-Serving" class="headerlink" title="Model Serving"></a>Model Serving</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> starlette.applications <span class="keyword">import</span> Starlette</span><br><span class="line"><span class="keyword">from</span> starlette.responses <span class="keyword">import</span> JSONResponse</span><br><span class="line"><span class="comment"># from starlette.routing import Route</span></span><br><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> fastai</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastai.vision <span class="keyword">import</span> *</span><br><span class="line">defaults.device = torch.device(<span class="string">'cpu'</span>)</span><br><span class="line">learner = load_learner(<span class="string">"."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Starlette(debug=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get_bytes</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> response:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">await</span> response.read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/", methods=["GET"])</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">homepage</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> JSONResponse(&#123;<span class="string">'hello'</span>: <span class="string">'world'</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/classify-url", methods=["GET"])</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">classify_url</span><span class="params">(request)</span>:</span></span><br><span class="line">    bytes = <span class="keyword">await</span> get_bytes(request.query_params[<span class="string">"url"</span>])</span><br><span class="line">    img = open_image(BytesIO(bytes))</span><br><span class="line">    pred_class,pred_idx,outputs = learner.predict(img)</span><br><span class="line">    <span class="keyword">return</span> JSONResponse(&#123;</span><br><span class="line">        <span class="string">"predictions"</span>:  str(pred_class)&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    uvicorn.run(app, host=<span class="string">"0.0.0.0"</span>, port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Project</tag>
        <tag>Computer Vision</tag>
      </tags>
  </entry>
  <entry>
    <title>ELMo,OpenAI GPT,BERT</title>
    <url>/ELMo-OpenAI-GPT-BERT/2019/12/21/</url>
    <content><![CDATA[<h2 id="The-problems-of-RNN"><a href="#The-problems-of-RNN" class="headerlink" title="The problems of RNN"></a>The problems of RNN</h2><ol>
<li>Sequential computation inhibit parallelization</li>
<li>No explicit modeling of long and short range</li>
<li>We want to model hierarchy (RNNs seem wasteful)</li>
</ol>
<h2 id="ELMo"><a href="#ELMo" class="headerlink" title="ELMo"></a>ELMo</h2><p>ELMo means <code>Embeddings from Language Models</code>. the original paper is from <a href="https://arxiv.org/abs/1802.05365" target="_blank" rel="noopener">https://arxiv.org/abs/1802.05365</a></p>
<ol>
<li>Breakout version of word token vectors or contextual word vectors</li>
<li>Learn word token vectors using long contexts not context windows (here, whole sentence, could be longer)</li>
<li>Learn a deep Bi-NLM and use all its layers in prediction</li>
</ol>
<h3 id="What’s-ELMo’s-secret"><a href="#What’s-ELMo’s-secret" class="headerlink" title="What’s ELMo’s secret?"></a>What’s ELMo’s secret?</h3><p>ELMo gained its language understanding from being trained to predict the next word in a sequence of words - a task called <code>Language Modeling</code>. This is convenient because we have vast amounts of text data that such a model can learn from without needing labels.</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="elmo2.png" width="70%" height="70%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">char cnn embedding from ELMo</div>
</center>

<p>A step in the pre-training process of ELMo: Given “Let’s stick to” as input, predict the next most likely word – a language modeling task. When trained on a large dataset, the model starts to pick up on language patterns. It’s unlikely it’ll accurately guess the next word in this example. More realistically, after a word such as “hang”, it will assign a higher probability to a word like “out” (to spell “hang out”) than to “camera”.</p>
<h3 id="bilstm-LM"><a href="#bilstm-LM" class="headerlink" title="bilstm LM"></a>bilstm LM</h3><p>ELMo actually goes a step further and trains a bi-directional LSTM – so that its language model doesn’t only have a sense of the next word, but also the previous word.</p>
<ol>
<li>前向LSTM结构:<script type="math/tex; mode=display">p(t_1,t_2,...,t_N) = \prod^N_{k=1}p(t_k|t_1,t_2,...,t_{k-1})</script></li>
<li>反向LSTM结构:<script type="math/tex; mode=display">p(t_1,t_2,...,t_N) = \prod^N_{k=1}p(t_k|t_{k+1},t_{k+2},...,t_{N})</script></li>
<li>最大似然函数:<script type="math/tex; mode=display">\sum_{k=1}^N(logp(t_k|t_1,t_2,...,t_{k-1}) + logp(t_k|t_{k+1},t_{k+2},...,t_{N}))</script></li>
<li>线性组合公式：<script type="math/tex; mode=display">\textrm{ELMo}_k^{task} = E(R_k;\Theta^{task}) = \gamma^{task}\sum_{j=0}^L s_j^{task}h_{k,j}^{LM} \tag{1}</script></li>
</ol>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="elmo.png" width="70%" height="70%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">bilstm from ELMo</div>
</center>




<h3 id="Char-cnn-embedding"><a href="#Char-cnn-embedding" class="headerlink" title="Char cnn embedding"></a>Char cnn embedding</h3><p>The input of elmo is char embedding, see the details from <a href="https://zhangruochi.com/Subword-Models/2019/12/19/">https://zhangruochi.com/Subword-Models/2019/12/19/</a></p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="char_cnn.png" width="70%" height="70%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">char cnn embedding from ELMo</div>
</center>


<h2 id="How-to-use-ELMo-when-after-pre-training"><a href="#How-to-use-ELMo-when-after-pre-training" class="headerlink" title="How to use ELMo when after pre-training"></a>How to use ELMo when after pre-training</h2><p>We can feed our input data to the pre-trained ELMo and get the representation of <code>dynamic word vectors</code>. And then we use them to our specific tasks.</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="elmo3.png" width="70%" height="70%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">ELMo used in a sequence tagger</div>
</center>


<h2 id="OpenAI-Transformer-Pre-training-a-Transformer-Decoder-for-Language-Modeling"><a href="#OpenAI-Transformer-Pre-training-a-Transformer-Decoder-for-Language-Modeling" class="headerlink" title="OpenAI Transformer: Pre-training a Transformer Decoder for Language Modeling"></a>OpenAI Transformer: Pre-training a Transformer Decoder for Language Modeling</h2><p>It turns out we don’t need an entire Transformer to adopt transfer learning and a fine-tunable language model for NLP tasks. We can do with just the decoder of the transformer. The decoder is a good choice because it’s a natural choice for language modeling (predicting the next word) since it’s built to <code>mask future tokens</code> – a valuable feature when it’s generating a translation word by word.</p>
<p>The model stacked twelve decoder layers. Since there is no encoder in this set up, these decoder layers would not have the encoder-decoder attention sublayer that vanilla transformer decoder layers have. It would still have the self-attention layer, however (masked so it doesn’t peak at future tokens).</p>
<p>With this structure, we can proceed to train the model on the same language modeling task: predict the next word using massive (unlabeled) datasets. Just, throw the text of 7,000 books at it and have it learn! Books are great for this sort of task since it allows the model to learn to associate related information even if they’re separated by a lot of text – something you don’t get for example, when you’re training with tweets, or articles.</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="openai.png" width="70%" height="70%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;"></div>
</center>


<script type="math/tex; mode=display">
\begin{split}
h_0 & =UW_e+W_p \\
h_l & = transformer\_block(h_{l-1}) \\
P(u) & = softmax(h_n W_e^T)
\end{split}</script><p>$W_e$ is the embedding matrix, $W_p$ is the positional embedding matrix(Note that it is different with classicial transformer)</p>
<h3 id="Fine-Tuning-with-OpenAI"><a href="#Fine-Tuning-with-OpenAI" class="headerlink" title="Fine-Tuning with OpenAI"></a>Fine-Tuning with OpenAI</h3><p>Now that the OpenAI transformer is pre-trained and its layers have been tuned to reasonably handle language, we can start using it for downstream tasks. Let’s first look at sentence classification (classify an email message as “spam” or “not spam”):</p>
<p>If our input sequence is $x_1,\cdots,x_m$, and the label is y. We can add a <code>softmax layer</code> to do classification and use the cross entrophy to calculate the loss.</p>
<script type="math/tex; mode=display">L_2(\mathcal{C})=\sum{x,y}logP(y|x^1,...,x^m)</script><p>In general, we should update the parameters to minimize the $L_2$, but we can use <code>Multi-task Learning</code> to get a more generalize model. Therefore we can get the max likelihood of $L3$</p>
<script type="math/tex; mode=display">L_3(\mathcal{C})=L_2(\mathcal{C})+\lambda \times L_1(\mathcal{C})</script><p>$L_1$ if the loss of previous language model.</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="openai2.png" width="70%" height="70%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">How to use a pre-trained OpenAI transformer to do sentence clasification</div>
</center>


<p>The OpenAI paper outlines a number of input transformations to handle the inputs for different types of tasks. The following image from the paper shows the structures of the models and input transformations to carry out different tasks.</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="openai3.png" width="70%" height="70%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">How to use a pre-trained OpenAI transformer to do different tasks</div>
</center>


<h2 id="BERT-From-Decoders-to-Encoders"><a href="#BERT-From-Decoders-to-Encoders" class="headerlink" title="BERT: From Decoders to Encoders"></a>BERT: From Decoders to Encoders</h2><p>The openAI transformer gave us a fine-tunable pre-trained model based on the Transformer. But something went missing in this transition from LSTMs to Transformers. ELMo’s language model was bi-directional, but the openAI transformer only trains a forward language model. Could we build a transformer-based model whose language model looks both forward and backwards (in the technical jargon – “is conditioned on both left and right context”)?</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>The input representation of BERT is shown in the figure below. For example, the two sentences “my dog ​​is cute” and “he likes playing” are entered. I’ll explain why two sentences are needed later. Here, the two sentences similar to GPT are used. First, a special Token <code>[CLS]</code> is added at the beginning of the first sentence, and a <code>[SEP]</code> is added after the cute to indicate the end of the first sentence. After ##ing, A <code>[SEP]</code> will be added later. Note that the word segmentation here will divide “playing” into “play” and “##ing” two tokens. This method of dividing words into more fine-grained Word Pieces was introduced in the previous machine translation section. This is a kind of Common methods to resolve unregistered words. Then perform 3 Embeddings on each Token: </p>
<ol>
<li>Embedding of words;</li>
<li>Embedding of positions; </li>
<li>Embedding of segments. </li>
</ol>
<p>The word Embedding is familiar to everyone, and the position Embedding is similar to the word embedding, mapping a position (such as 2) into a low-dimensional dense vector. And Segment embedding has only two, either belong to the first sentence (segment) or belong to the second sentence. Segment Embedding of the same sentence is shared so that it can learn information belonging to different segments. For tasks such as sentiment classification, there is only one sentence, so the Segment id is always 0; for the Entailment task, the input is two sentences, so the Segment is 0 or 1.</p>
<p>The BERT model requires a fixed sequence length, such as 128. If it is not enough, then padding in the back, otherwise it will intercept the excess Token, so as to ensure that the input is a fixed-length Token sequence. The first token is always special <code>[CLS]</code>. It does not have any semantics, so it will (must) encode the semantics of the entire sentence (other words).</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="bert.png" width="70%" height="70%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Input of Bert/div>
</div></center>

<h3 id="Masked-Language-Model"><a href="#Masked-Language-Model" class="headerlink" title="Masked Language Model"></a>Masked Language Model</h3><p>Finding the right task to train a Transformer stack of encoders is a complex hurdle that BERT resolves by adopting a <code>masked language model</code> concept from earlier literature (where it’s called a Cloze task).</p>
<p>Beyond masking 15% of the input, BERT also mixes things a bit in order to improve how the model later fine-tunes. Sometimes it randomly replaces a word with another word and asks the model to predict the correct word in that position.</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="bert2.png" width="70%" height="70%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">masked language model</div>
</center>

<h3 id="Two-sentence-Tasks"><a href="#Two-sentence-Tasks" class="headerlink" title="Two-sentence Tasks"></a>Two-sentence Tasks</h3><p>If you look back up at the input transformations the OpenAI transformer does to handle different tasks, you’ll notice that some tasks require the model to say something intelligent about two sentences (e.g. are they simply paraphrased versions of each other? Given a wikipedia entry as input, and a question regarding that entry as another input, can we answer that question?).</p>
<p>To make BERT better at handling relationships between multiple sentences, the pre-training process includes an additional task: Given two sentences (A and B), is B likely to be the sentence that follows A, or not?</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="bert3.png" width="70%" height="70%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">The second task BERT is pre-trained on is a two-sentence classification task.</div>
</center>

<h3 id="Task-specific-Models"><a href="#Task-specific-Models" class="headerlink" title="Task specific-Models"></a>Task specific-Models</h3><p>The BERT paper shows a number of ways to use BERT for different tasks.</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="bert4.png" width="70%" height="70%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">different ways to use BERT</div>
</center>

<ol>
<li>For common classification tasks, the input is a sequence, as shown in the upper right of the figure. All tokens belong to the same Segment (Id = 0). We use the last layer of the first special token <code>[CLS]</code> to connect it. Softmax is used for classification, and classified data is used for Fine-Tuning.</li>
<li>For tasks such as similarity calculation that are input as two sequences, the process is shown in the upper left. The tokens of the two sequences correspond to different segments (Id = 0/1). We also use the last layer output of the first special token [CLS] to connect with softmax for classification, and then use the classification data for Fine-Tuning.</li>
<li>The third type is a question-and-answer type question, such as the SQuAD v1.1 dataset. The input is a question and a long paragraph containing the answer (Paragraph), and the output finds the answer to the question in this paragraph.</li>
<li>The forth type of task is sequence labeling, such as named entity recognition. The input is a sentence (Token sequence). Except for [CLS] and [SEP], there will be output tags at each moment. For example, B-PER indicates the beginning of a person’s name. </li>
</ol>
<h3 id="BERT-for-feature-extraction"><a href="#BERT-for-feature-extraction" class="headerlink" title="BERT for feature extraction"></a>BERT for feature extraction</h3><p>The fine-tuning approach isn’t the only way to use BERT. Just like ELMo, you can use the pre-trained BERT to create contextualized word embeddings. Then you can feed these embeddings to your existing model – a process the paper shows yield results not far behind fine-tuning BERT on a task such as named-entity recognition.</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="bert5.png" width="70%" height="70%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Feature extraction</div>
</center>

<p>Which vector works best as a contextualized embedding? I would think it depends on the task. The paper examines six choices (Compared to the fine-tuned model which achieved a score of 96.4):</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="bert6.png" width="70%" height="70%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Feature extraction</div>
</center>


<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="http://fancyerii.github.io/2019/03/09/bert-theory/#词汇扩展" target="_blank" rel="noopener">http://fancyerii.github.io/2019/03/09/bert-theory/#词汇扩展</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/63115885" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/63115885</a></li>
<li><a href="http://jalammar.github.io/illustrated-bert/" target="_blank" rel="noopener">http://jalammar.github.io/illustrated-bert/</a></li>
</ol>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>cs224n</tag>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title>Transformer</title>
    <url>/Transformer/2019/12/20/</url>
    <content><![CDATA[<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU, ByteNet and ConvS2S, all of which use convolutional neural networks as basic building block, computing hidden representations in parallel for all input and output positions. In these models, the number of operations required to relate signals from two arbitrary input or output positions grows in the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. This makes it more difficult to learn dependencies between distant positions. In the Transformer this is reduced to a constant number of operations, albeit at the cost of reduced effective resolution due to averaging attention-weighted positions, an effect we counteract with Multi-Head Attention.</p>
<p>Self-attention, sometimes called intra-attention is an attention mechanism relating different positions of a single sequence in order to compute a representation of the sequence. Self-attention has been used successfully in a variety of tasks including reading comprehension, abstractive summarization, textual entailment and learning task-independent sentence representations. End-to-end memory networks are based on a recurrent attention mechanism instead of sequencealigned recurrence and have been shown to perform well on simple-language question answering and<br>language modeling tasks.</p>
<p>To the best of our knowledge, however, the Transformer is the first transduction model relying entirely on self-attention to compute representations of its input and output without using sequence aligned RNNs or convolution. </p>
<h2 id="Embeddings-and-Softmax"><a href="#Embeddings-and-Softmax" class="headerlink" title="Embeddings and Softmax"></a>Embeddings and Softmax</h2><p>Similarly to other sequence transduction models, we use learned embeddings to convert the input tokens and output tokens to vectors of dimension $d_{\text{model}}$.  We also use the usual learned linear transformation and softmax function to convert the decoder output to predicted next-token probabilities.  In our model, we share the same weight matrix between the two embedding layers and the pre-softmax linear transformation, similar to <a href="https://arxiv.org/abs/1608.05859" target="_blank" rel="noopener">(cite)</a>. In the embedding layers, we multiply those weights by $\sqrt{d_{\text{model}}}$.           </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Embeddings</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, d_model, vocab)</span>:</span></span><br><span class="line">        super(Embeddings, self).__init__()</span><br><span class="line">        self.lut = nn.Embedding(vocab, d_model)</span><br><span class="line">        self.d_model = d_model</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.lut(x) * math.sqrt(self.d_model)</span><br></pre></td></tr></table></figure>
<h2 id="Positional-Encoding"><a href="#Positional-Encoding" class="headerlink" title="Positional Encoding"></a>Positional Encoding</h2><p>Since our model contains no recurrence and no convolution, <strong>in order for the model to make use of the order of the sequence</strong>, we must inject some information about the relative or absolute position of the tokens in the sequence.  To this end, we add “positional encodings” to the input embeddings at the bottoms of the encoder and decoder stacks.  The positional encodings have the same dimension $d_{\text{model}}$ as the embeddings, so that the two can be summed.   There are many choices of positional encodings, learned and fixed <a href="https://arxiv.org/pdf/1705.03122.pdf" target="_blank" rel="noopener">(cite)</a>. </p>
<p>In this work, we use sine and cosine functions of different frequencies:    </p>
<script type="math/tex; mode=display">PE_{(pos,2i)} = sin(pos / 10000^{2i/d_{\text{model}}})</script><script type="math/tex; mode=display">PE_{(pos,2i+1)} = cos(pos / 10000^{2i/d_{\text{model}}})</script><p>where $pos$ is the position and $i$ is the dimension.  That is, each dimension of the positional encoding corresponds to a sinusoid.  The wavelengths form a geometric progression from $2\pi$ to $10000 \cdot 2\pi$.  We chose this function because we hypothesized it would allow the model to easily learn to attend by relative positions, since for any fixed offset $k$, $PE_{pos+k}$ can be represented as a linear function of $PE_{pos}$. </p>
<p>In addition, we apply dropout to the sums of the embeddings and the positional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of $P_{drop}=0.1$. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PositionalEncoding</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="string">"Implement the PE function."</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, d_model, dropout, max_len=<span class="number">5000</span>)</span>:</span></span><br><span class="line">        super(PositionalEncoding, self).__init__()</span><br><span class="line">        self.dropout = nn.Dropout(p=dropout)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Compute the positional encodings once in log space.</span></span><br><span class="line">        pe = torch.zeros(max_len, d_model)</span><br><span class="line">        position = torch.arange(<span class="number">0</span>, max_len).unsqueeze(<span class="number">1</span>)</span><br><span class="line">        div_term = torch.exp(torch.arange(<span class="number">0</span>, d_model, <span class="number">2</span>) *</span><br><span class="line">                             -(math.log(<span class="number">10000.0</span>) / d_model))</span><br><span class="line">        pe[:, <span class="number">0</span>::<span class="number">2</span>] = torch.sin(position * div_term)</span><br><span class="line">        pe[:, <span class="number">1</span>::<span class="number">2</span>] = torch.cos(position * div_term)</span><br><span class="line">        pe = pe.unsqueeze(<span class="number">0</span>)</span><br><span class="line">        self.register_buffer(<span class="string">'pe'</span>, pe)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x = x + Variable(self.pe[:, :x.size(<span class="number">1</span>)], </span><br><span class="line">                         requires_grad=<span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">return</span> self.dropout(x)</span><br></pre></td></tr></table></figure>
<h2 id="Layer-Norm-and-residual-connection"><a href="#Layer-Norm-and-residual-connection" class="headerlink" title="Layer Norm and residual connection"></a>Layer Norm and residual connection</h2><p>We employ a residual connection <a href="https://arxiv.org/abs/1512.03385" target="_blank" rel="noopener">(cite)</a> around each of the two sub-layers, followed by layer normalization <a href="https://arxiv.org/abs/1607.06450" target="_blank" rel="noopener">(cite)</a>.  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LayerNorm</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="string">"Construct a layernorm module (See citation for details)."</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, features, eps=<span class="number">1e-6</span>)</span>:</span></span><br><span class="line">        super(LayerNorm, self).__init__()</span><br><span class="line">        self.a_2 = nn.Parameter(torch.ones(features))</span><br><span class="line">        self.b_2 = nn.Parameter(torch.zeros(features))</span><br><span class="line">        self.eps = eps</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        mean = x.mean(<span class="number">-1</span>, keepdim=<span class="keyword">True</span>)</span><br><span class="line">        std = x.std(<span class="number">-1</span>, keepdim=<span class="keyword">True</span>)</span><br><span class="line">        <span class="keyword">return</span> self.a_2 * (x - mean) / (std + self.eps) + self.b_2</span><br></pre></td></tr></table></figure>
<p>That is, the output of each sub-layer is $\mathrm{LayerNorm}(x + \mathrm{Sublayer}(x))$, where $\mathrm{Sublayer}(x)$ is the function implemented by the sub-layer itself.  We apply dropout <a href="http://jmlr.org/papers/v15/srivastava14a.html" target="_blank" rel="noopener">(cite)</a> to the output of each sub-layer, before it is added to the sub-layer input and normalized.  </p>
<p>To facilitate these residual connections, all sub-layers in the model, as well as the embedding layers, produce outputs of dimension $d_{\text{model}}=512$.  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SublayerConnection</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    A residual connection followed by a layer norm.</span></span><br><span class="line"><span class="string">    Note for code simplicity the norm is first as opposed to last.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, size, dropout)</span>:</span></span><br><span class="line">        super(SublayerConnection, self).__init__()</span><br><span class="line">        self.norm = LayerNorm(size)</span><br><span class="line">        self.dropout = nn.Dropout(dropout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x, sublayer)</span>:</span></span><br><span class="line">        <span class="string">"Apply residual connection to any sublayer with the same size."</span></span><br><span class="line">        <span class="keyword">return</span> x + self.dropout(sublayer(self.norm(x)))</span><br></pre></td></tr></table></figure>
<p>Each layer has two sub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, position-wise fully connected feed-forward network.</p>
<h2 id="Attention"><a href="#Attention" class="headerlink" title="Attention"></a>Attention</h2><h3 id="Scaled-Dot-Product-Attention"><a href="#Scaled-Dot-Product-Attention" class="headerlink" title="Scaled Dot-Product Attention"></a>Scaled Dot-Product Attention</h3><p>An attention function can be described as mapping a <code>query</code> and a set of <code>key</code>-<code>value</code> pairs to an output, where the query, keys, values, and output are all vectors.  The output is computed as a weighted sum of the values, where the weight assigned to each value is computed by a compatibility function of the query with the corresponding key.</p>
<p>We call our particular attention <code>Scaled Dot-Product Attention</code>.   The input consists of queries and keys of dimension $d_k$, and values of dimension $d_v$.  We compute the dot products of the query with all keys, divide each by $\sqrt{d_k}$, and apply a softmax function to obtain the weights on the values.</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="ModalNet-19.png" width="20%" height="20%">
</center>

<p>In practice, we compute the attention function on a set of queries simultaneously, packed together into a matrix $Q$.   The keys and values are also packed together into matrices $K$ and $V$.  We compute the matrix of outputs as:                      </p>
<script type="math/tex; mode=display">\mathrm{Attention}(Q, K, V) = \mathrm{softmax}(\frac{QK^T}{\sqrt{d_k}})V</script><p>The two most commonly used attention functions are additive attention <a href="https://arxiv.org/abs/1409.0473" target="_blank" rel="noopener">(cite)</a>, and dot-product (multiplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor of $\frac{1}{\sqrt{d_k}}$. Additive attention computes the compatibility function using a feed-forward network with a single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is much faster and more space-efficient in practice, since it can be implemented using highly optimized matrix multiplication code.</p>
<p>While for small values of $d_k$ the two mechanisms perform similarly, additive attention outperforms dot product attention without scaling for larger values of $d_k$ <a href="https://arxiv.org/abs/1703.03906" target="_blank" rel="noopener">(cite)</a>. We suspect that for large values of $d_k$, the dot products grow large in magnitude, pushing the softmax function into regions where it has extremely small gradients  (To illustrate why the dot products get large, assume that the components of $q$ and $k$ are independent random variables with mean $0$ and variance $1$.  Then their dot product, $q \cdot k = \sum_{i=1}^{d_k} q_ik_i$, has mean $0$ and variance $d_k$.). To counteract this effect, we scale the dot products by $\frac{1}{\sqrt{d_k}}$.          </p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="attention.png" width="50%" height="50%">
</center>


<h3 id="Multi-head-attention"><a href="#Multi-head-attention" class="headerlink" title="Multi-head attention"></a>Multi-head attention</h3><p>Multi-head attention allows the model to jointly attend to information from different representation subspaces at different positions. With a single attention head, averaging inhibits this.</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="ModalNet-20.png" width="50%" height="50%">
</center>

<script type="math/tex; mode=display">
\mathrm{MultiHead}(Q, K, V) = \mathrm{Concat}(\mathrm{head_1}, ..., \mathrm{head_h})W^O    \\                                           
    \text{where}~\mathrm{head_i} = \mathrm{Attention}(QW^Q_i, KW^K_i, VW^V_i)</script><p>Where the projections are parameter matrices $W^Q_i \in \mathbb{R}^{d_{\text{model}} \times d_k}$, $W^K_i \in \mathbb{R}^{d_{\text{model}} \times d_k}$, $W^V_i \in \mathbb{R}^{d_{\text{model}} \times d_v}$ and $W^O \in \mathbb{R}^{hd_v \times d_{\text{model}}}$.                                                                                                                                                                                            In this work we employ $h=8$ parallel attention layers, or heads. For each of these we use $d_k=d_v=d_{\text{model}}/h=64$. Due to the reduced dimension of each head, the total computational cost is similar to that of single-head attention with full dimensionality. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultiHeadedAttention</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, h, d_model, dropout=<span class="number">0.1</span>)</span>:</span></span><br><span class="line">        <span class="string">"Take in model size and number of heads."</span></span><br><span class="line">        super(MultiHeadedAttention, self).__init__()</span><br><span class="line">        <span class="keyword">assert</span> d_model % h == <span class="number">0</span></span><br><span class="line">        <span class="comment"># We assume d_v always equals d_k</span></span><br><span class="line">        self.d_k = d_model // h</span><br><span class="line">        self.h = h</span><br><span class="line">        self.linears = clones(nn.Linear(d_model, d_model), <span class="number">4</span>)</span><br><span class="line">        self.attn = <span class="keyword">None</span></span><br><span class="line">        self.dropout = nn.Dropout(p=dropout)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, query, key, value, mask=None)</span>:</span></span><br><span class="line">        <span class="string">"Implements Figure 2"</span></span><br><span class="line">        <span class="keyword">if</span> mask <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="comment"># Same mask applied to all h heads.</span></span><br><span class="line">            mask = mask.unsqueeze(<span class="number">1</span>)</span><br><span class="line">        nbatches = query.size(<span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 1) Do all the linear projections in batch from d_model =&gt; h x d_k </span></span><br><span class="line">        query, key, value = \</span><br><span class="line">            [l(x).view(nbatches, <span class="number">-1</span>, self.h, self.d_k).transpose(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">             <span class="keyword">for</span> l, x <span class="keyword">in</span> zip(self.linears, (query, key, value))]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 2) Apply attention on all the projected vectors in batch. </span></span><br><span class="line">        x, self.attn = attention(query, key, value, mask=mask, </span><br><span class="line">                                 dropout=self.dropout)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 3) "Concat" using a view and apply a final linear. </span></span><br><span class="line">        x = x.transpose(<span class="number">1</span>, <span class="number">2</span>).contiguous() \</span><br><span class="line">             .view(nbatches, <span class="number">-1</span>, self.h * self.d_k)</span><br><span class="line">        <span class="keyword">return</span> self.linears[<span class="number">-1</span>](x)</span><br></pre></td></tr></table></figure>
<h3 id="Applications-of-Attention-in-our-Model"><a href="#Applications-of-Attention-in-our-Model" class="headerlink" title="Applications of Attention in our Model"></a>Applications of Attention in our Model</h3><p>The Transformer uses multi-head attention in three different ways:                                                        </p>
<ol>
<li><p>In <strong>encoder-decoder attention</strong> layers, the queries come from the previous decoder layer, and the memory keys and values come from the <code>output of the encoder</code>.   This allows every position in the decoder to attend over all positions in the input sequence.  This mimics the typical encoder-decoder attention mechanisms in sequence-to-sequence models such as <a href="https://arxiv.org/abs/1609.08144" target="_blank" rel="noopener">(cite)</a>.    </p>
</li>
<li><p>The encoder contains self-attention layers.  In a self-attention layer all of the keys, values and queries come from the same place, in this case, the output of the previous layer in the encoder.   Each position in the encoder can attend to all positions in the previous layer of the encoder.                                                   </p>
</li>
<li>Similarly, self-attention layers in the decoder allow each position in the decoder to attend to all positions in the decoder up to and including that position.  We need to prevent leftward information flow in the decoder to preserve the auto-regressive property.  We implement this inside of scaled dot-product attention by masking out (setting to $-\infty$) all values in the input of the softmax which correspond to illegal connections. </li>
</ol>
<h2 id="Position-wise-Feed-Forward-Networks"><a href="#Position-wise-Feed-Forward-Networks" class="headerlink" title="Position-wise Feed-Forward Networks"></a>Position-wise Feed-Forward Networks</h2><p>In addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully connected feed-forward network, which is applied to each position separately and identically.  This consists of two linear transformations with a ReLU activation in between.</p>
<script type="math/tex; mode=display">\mathrm{FFN}(x)=\max(0, xW_1 + b_1) W_2 + b_2</script><p>While the linear transformations are the same across different positions, they use different parameters from layer to layer. Another way of describing this is as two convolutions with kernel size 1.  The dimensionality of input and output is $d_{\text{model}}=512$, and the inner-layer has dimensionality $d_{ff}=2048$. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PositionwiseFeedForward</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="string">"Implements FFN equation."</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, d_model, d_ff, dropout=<span class="number">0.1</span>)</span>:</span></span><br><span class="line">        super(PositionwiseFeedForward, self).__init__()</span><br><span class="line">        self.w_1 = nn.Linear(d_model, d_ff)</span><br><span class="line">        self.w_2 = nn.Linear(d_ff, d_model)</span><br><span class="line">        self.dropout = nn.Dropout(dropout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.w_2(self.dropout(F.relu(self.w_1(x))))</span><br></pre></td></tr></table></figure>
<h2 id="Model-Architecture"><a href="#Model-Architecture" class="headerlink" title="Model Architecture"></a>Model Architecture</h2><p>Most competitive neural sequence transduction models have an encoder-decoder structure <a href="https://arxiv.org/abs/1409.0473" target="_blank" rel="noopener">(cite)</a>. Here, the encoder maps an input sequence of symbol representations $(x_1, …, x_n)$ to a sequence of continuous representations $\mathbf{z} = (z_1, …, z_n)$. Given $\mathbf{z}$, the decoder then generates an output sequence $(y_1,…,y_m)$ of symbols one element at a time. At each step the model is auto-regressive <a href="https://arxiv.org/abs/1308.0850" target="_blank" rel="noopener">(cite)</a>, consuming the previously generated symbols as additional input when generating the next. </p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="ModalNet-21.png" width="50%" height="50%">
</center>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EncoderDecoder</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    A standard Encoder-Decoder architecture. Base for this and many </span></span><br><span class="line"><span class="string">    other models.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, encoder, decoder, src_embed, tgt_embed, generator)</span>:</span></span><br><span class="line">        super(EncoderDecoder, self).__init__()</span><br><span class="line">        self.encoder = encoder</span><br><span class="line">        self.decoder = decoder</span><br><span class="line">        self.src_embed = src_embed</span><br><span class="line">        self.tgt_embed = tgt_embed</span><br><span class="line">        self.generator = generator</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, src, tgt, src_mask, tgt_mask)</span>:</span></span><br><span class="line">        <span class="string">"Take in and process masked src and target sequences."</span></span><br><span class="line">        <span class="keyword">return</span> self.decode(self.encode(src, src_mask), src_mask,</span><br><span class="line">                            tgt, tgt_mask)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encode</span><span class="params">(self, src, src_mask)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.encoder(self.src_embed(src), src_mask)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(self, memory, src_mask, tgt, tgt_mask)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.decoder(self.tgt_embed(tgt), memory, src_mask, tgt_mask)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Generator</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="string">"Define standard linear + softmax generation step."</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, d_model, vocab)</span>:</span></span><br><span class="line">        super(Generator, self).__init__()</span><br><span class="line">        self.proj = nn.Linear(d_model, vocab)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> F.log_softmax(self.proj(x), dim=<span class="number">-1</span>)</span><br></pre></td></tr></table></figure>
<h2 id="Encoder-and-Decoder-Stacks"><a href="#Encoder-and-Decoder-Stacks" class="headerlink" title="Encoder and Decoder Stacks"></a>Encoder and Decoder Stacks</h2><h3 id="Encoder"><a href="#Encoder" class="headerlink" title="Encoder"></a>Encoder</h3><p>The encoder is composed of a stack of $N=6$ identical layers. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clones</span><span class="params">(module, N)</span>:</span></span><br><span class="line">    <span class="string">"Produce N identical layers."</span></span><br><span class="line">    <span class="keyword">return</span> nn.ModuleList([copy.deepcopy(module) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Encoder</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="string">"Core encoder is a stack of N layers"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, layer, N)</span>:</span></span><br><span class="line">        super(Encoder, self).__init__()</span><br><span class="line">        self.layers = clones(layer, N)</span><br><span class="line">        self.norm = LayerNorm(layer.size)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x, mask)</span>:</span></span><br><span class="line">        <span class="string">"Pass the input (and mask) through each layer in turn."</span></span><br><span class="line">        <span class="keyword">for</span> layer <span class="keyword">in</span> self.layers:</span><br><span class="line">            x = layer(x, mask)</span><br><span class="line">        <span class="keyword">return</span> self.norm(x)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EncoderLayer</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="string">"Encoder is made up of self-attn and feed forward (defined below)"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, size, self_attn, feed_forward, dropout)</span>:</span></span><br><span class="line">        super(EncoderLayer, self).__init__()</span><br><span class="line">        self.self_attn = self_attn</span><br><span class="line">        self.feed_forward = feed_forward</span><br><span class="line">        self.sublayer = clones(SublayerConnection(size, dropout), <span class="number">2</span>)</span><br><span class="line">        self.size = size</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x, mask)</span>:</span></span><br><span class="line">        <span class="string">"Follow Figure 1 (left) for connections."</span></span><br><span class="line">        x = self.sublayer[<span class="number">0</span>](x, <span class="keyword">lambda</span> x: self.self_attn(x, x, x, mask))</span><br><span class="line">        <span class="keyword">return</span> self.sublayer[<span class="number">1</span>](x, self.feed_forward)</span><br></pre></td></tr></table></figure>
<h3 id="Decoder"><a href="#Decoder" class="headerlink" title="Decoder"></a>Decoder</h3><p>The decoder is also composed of a stack of $N=6$ identical layers.  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decoder</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="string">"Generic N layer decoder with masking."</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, layer, N)</span>:</span></span><br><span class="line">        super(Decoder, self).__init__()</span><br><span class="line">        self.layers = clones(layer, N)</span><br><span class="line">        self.norm = LayerNorm(layer.size)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x, memory, src_mask, tgt_mask)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> layer <span class="keyword">in</span> self.layers:</span><br><span class="line">            x = layer(x, memory, src_mask, tgt_mask)</span><br><span class="line">        <span class="keyword">return</span> self.norm(x)</span><br></pre></td></tr></table></figure>
<p>In addition to the two sub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head attention over the output of the encoder stack.  Similar to the encoder, we employ residual connections around each of the sub-layers, followed by layer normalization.<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecoderLayer</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="string">"Decoder is made of self-attn, src-attn, and feed forward (defined below)"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, size, self_attn, src_attn, feed_forward, dropout)</span>:</span></span><br><span class="line">        super(DecoderLayer, self).__init__()</span><br><span class="line">        self.size = size</span><br><span class="line">        self.self_attn = self_attn</span><br><span class="line">        self.src_attn = src_attn</span><br><span class="line">        self.feed_forward = feed_forward</span><br><span class="line">        self.sublayer = clones(SublayerConnection(size, dropout), <span class="number">3</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x, memory, src_mask, tgt_mask)</span>:</span></span><br><span class="line">        <span class="string">"Follow Figure 1 (right) for connections."</span></span><br><span class="line">        m = memory</span><br><span class="line">        x = self.sublayer[<span class="number">0</span>](x, <span class="keyword">lambda</span> x: self.self_attn(x, x, x, tgt_mask))</span><br><span class="line">        x = self.sublayer[<span class="number">1</span>](x, <span class="keyword">lambda</span> x: self.src_attn(x, m, m, src_mask))</span><br><span class="line">        <span class="keyword">return</span> self.sublayer[<span class="number">2</span>](x, self.feed_forward)</span><br></pre></td></tr></table></figure></p>
<p>We also modify the self-attention sub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This masking, combined with fact that the output embeddings are offset by one position, ensures that the predictions for position $i$ can depend only on the known outputs at positions less than $i$.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subsequent_mask</span><span class="params">(size)</span>:</span></span><br><span class="line">    <span class="string">"Mask out subsequent positions."</span></span><br><span class="line">    attn_shape = (<span class="number">1</span>, size, size)</span><br><span class="line">    subsequent_mask = np.triu(np.ones(attn_shape), k=<span class="number">1</span>).astype(<span class="string">'uint8'</span>)</span><br><span class="line">    <span class="keyword">return</span> torch.from_numpy(subsequent_mask) == <span class="number">0</span></span><br></pre></td></tr></table></figure>
<h2 id="Full-Model"><a href="#Full-Model" class="headerlink" title="Full Model"></a>Full Model</h2><p>Here we define a function from hyperparameters to a full model. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_model</span><span class="params">(src_vocab, tgt_vocab, N=<span class="number">6</span>, </span></span></span><br><span class="line"><span class="function"><span class="params">               d_model=<span class="number">512</span>, d_ff=<span class="number">2048</span>, h=<span class="number">8</span>, dropout=<span class="number">0.1</span>)</span>:</span></span><br><span class="line">    <span class="string">"Helper: Construct a model from hyperparameters."</span></span><br><span class="line">    c = copy.deepcopy</span><br><span class="line">    attn = MultiHeadedAttention(h, d_model)</span><br><span class="line">    ff = PositionwiseFeedForward(d_model, d_ff, dropout)</span><br><span class="line">    position = PositionalEncoding(d_model, dropout)</span><br><span class="line">    model = EncoderDecoder(</span><br><span class="line">        Encoder(EncoderLayer(d_model, c(attn), c(ff), dropout), N),</span><br><span class="line">        Decoder(DecoderLayer(d_model, c(attn), c(attn), </span><br><span class="line">                             c(ff), dropout), N),</span><br><span class="line">        nn.Sequential(Embeddings(d_model, src_vocab), c(position)),</span><br><span class="line">        nn.Sequential(Embeddings(d_model, tgt_vocab), c(position)),</span><br><span class="line">        Generator(d_model, tgt_vocab))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># This was important from their code. </span></span><br><span class="line">    <span class="comment"># Initialize parameters with Glorot / fan_avg.</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> model.parameters():</span><br><span class="line">        <span class="keyword">if</span> p.dim() &gt; <span class="number">1</span>:</span><br><span class="line">            nn.init.xavier_uniform(p)</span><br><span class="line">    <span class="keyword">return</span> model</span><br></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="http://nlp.seas.harvard.edu/2018/04/03/attention.html" target="_blank" rel="noopener">http://nlp.seas.harvard.edu/2018/04/03/attention.html</a></li>
<li><a href="https://jalammar.github.io/illustrated-transformer/" target="_blank" rel="noopener">https://jalammar.github.io/illustrated-transformer/</a></li>
</ol>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>cs224n</tag>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title>Subword Models</title>
    <url>/Subword-Models/2019/12/19/</url>
    <content><![CDATA[<h2 id="Character-Level-Models"><a href="#Character-Level-Models" class="headerlink" title="Character-Level Models"></a>Character-Level Models</h2><ol>
<li>Word embeddings can be composed from character embeddings<ul>
<li>Generates embeddings for unknown words</li>
<li>Similar spellings share similar embeddings</li>
<li>Solves OOV problem</li>
</ul>
</li>
<li>Motivation<ul>
<li>Derive a powerful,robust language model effective across a variety of languages.</li>
<li>Encode subword relatedness:eventful,eventfully, uneventful…</li>
<li>Address rare-word problem of prior models. </li>
<li>Obtain comparable expressivity with fewer parameters.</li>
</ul>
</li>
</ol>
<h2 id="Two-trends"><a href="#Two-trends" class="headerlink" title="Two trends"></a>Two trends</h2><ol>
<li>Same architecture as forword-level model but use smaller units: “word pieces”</li>
<li>Hybrid architectures: Main model has words; something else for characters</li>
</ol>
<h2 id="Byte-Pair-Encoding"><a href="#Byte-Pair-Encoding" class="headerlink" title="Byte Pair Encoding"></a>Byte Pair Encoding</h2><p>A word segmentation algorithm:</p>
<ul>
<li>Start with a vocabulary of characters</li>
<li>Most frequent ngram pairs -&gt; a new ngram</li>
<li>Have a target vocabulary size and stop when you reach it</li>
<li>Do deterministic longest piece segmentation of words</li>
<li>Segmentation is only within words identified by some prior tokenizer</li>
</ul>
<p>For example, all the words in our documents database and their frequency are</p>
<blockquote>
<p>{‘l o w’: 5, ‘l o w e r’: 2, ‘n e w e s t’: 6, ‘w i d e s t’: 3}</p>
</blockquote>
<p>We can initialize our vocabulary library as:  </p>
<blockquote>
<p>{ ‘l’, ‘o’, ‘w’, ‘e’, ‘r’, ‘n’, ‘w’, ‘s’, ‘t’, ‘i’, ‘d’}</p>
</blockquote>
<p>The most frequent ngram pair is (‘e’,’s’) and its count is 9. So we add the ‘es’ to our vocabulary library. </p>
<p>Our documents database now is:</p>
<blockquote>
<p>{‘l o w’: 5, ‘l o w e r’: 2, ‘n e w es t’: 6, ‘w i d es t’: 3}.</p>
</blockquote>
<p>Our vocabulary library now is:</p>
<blockquote>
<p>{ ‘l’, ‘o’, ‘w’, ‘e’, ‘r’, ‘n’, ‘w’, ‘s’, ‘t’, ‘i’, ‘d’, ‘es’}</p>
</blockquote>
<p><strong>Again</strong>, the most frequent ngram pair is (‘es’,’t’) and its count is 9，So we add the ‘est’ to our vocabulary library.</p>
<p>Our documents database now is: </p>
<blockquote>
<p>{‘l o w’: 5, ‘l o w e r’: 2, ‘n e w est’: 6, ‘w i d est’: 3}</p>
</blockquote>
<p>Our vocabulary library now is:</p>
<blockquote>
<p>{ ‘l’, ‘o’, ‘w’, ‘e’, ‘r’, ‘n’, ‘w’, ‘s’, ‘t’, ‘i’, ‘d’, ‘es’,’est’}</p>
</blockquote>
<p>the rest can be done in the same manner. We can set a threshold of total count of our vocabulary library. By doing so, we can use BPE to construct a vocabulary library to represent all the words based on subword unit.</p>
<p>Google NMT(GNMT) uses a variant of this:</p>
<ul>
<li>V1: wordpiece model (Word piece model tokenizes inside words)</li>
<li>V2: sentencepiece model (Sentence piece model works from raw text)</li>
</ul>
<h2 id="Character-level-to-build-word-level"><a href="#Character-level-to-build-word-level" class="headerlink" title="Character-level to build word-level"></a>Character-level to build word-level</h2><ol>
<li>Convolution over characters to generate word embeddings<center>
 <img style="border-radius: 0.3125em;
 box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="1.png" width="50%" height="50%">
</center></li>
<li>Character-based LSTM to build word representation<center>
 <img style="border-radius: 0.3125em;
 box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="2.png" width="50%" height="50%">
</center>


</li>
</ol>
<h2 id="CS224n-Assignment5"><a href="#CS224n-Assignment5" class="headerlink" title="CS224n Assignment5"></a>CS224n Assignment5</h2><h3 id="Character-based-convolutional-encoder-for-NMT"><a href="#Character-based-convolutional-encoder-for-NMT" class="headerlink" title="Character-based convolutional encoder for NMT."></a>Character-based convolutional encoder for NMT.</h3><center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="3.png" width="80%" height="80%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Figure from cs224n. Character-based convolutional encoder, which ultimately produces a word embedding of length $e_{word}$</div>
</center>

<ol>
<li>Convert word to character indices. We have a word $x$ (e.g. Anarchy in above figure) that we wish to represent. Assume we have a predefined ‘vocabulary’ of characters (for example, all lowercase letters, uppercase letters, numbers, and some punctuation). By looking up the index of each character, we can thus represent the length-l word x as a vector of integers:<script type="math/tex; mode=display">x = \left[ c_1,c_2,\cdots,c_l  \right ] \in \mathbb{Z}^{l}</script>where each $c_i$ is an integer index into the character vocabulary.</li>
<li><p>Padding and embedding lookup. Using a special <pad> ‘character’, we pad (or truncate) every word so that it has length $m_word$ (this is some predefined hyperparameter representing maximum word length):</pad></p>
<script type="math/tex; mode=display">x_{padded} = \left [ c_1,c_2,\cdots,c_{m_{word}}  \right ] \in \mathbb{Z}^{m_{word}}</script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad_sents_char</span><span class="params">(sents, char_pad_token)</span>:</span></span><br><span class="line">    <span class="string">""" Pad list of sentences according to the longest sentence in the batch and max_word_length.</span></span><br><span class="line"><span class="string">    @param sents (list[list[list[int]]]): list of sentences, result of `words2charindices()`</span></span><br><span class="line"><span class="string">        from `vocab.py`</span></span><br><span class="line"><span class="string">    @param char_pad_token (int): index of the character-padding token</span></span><br><span class="line"><span class="string">    @returns sents_padded (list[list[list[int]]]): list of sentences where sentences/words shorter</span></span><br><span class="line"><span class="string">        than the max length sentence/word are padded out with the appropriate pad token, such that</span></span><br><span class="line"><span class="string">        each sentence in the batch now has same number of words and each word has an equal</span></span><br><span class="line"><span class="string">        number of characters</span></span><br><span class="line"><span class="string">        Output shape: (batch_size, max_sentence_length, max_word_length)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># Words longer than 21 characters should be truncated</span></span><br><span class="line">    max_word_length = <span class="number">21</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">### YOUR CODE HERE for part 1f</span></span><br><span class="line">    <span class="comment">### <span class="doctag">TODO:</span></span></span><br><span class="line">    <span class="comment">###     Perform necessary padding to the sentences in the batch similar to the pad_sents()</span></span><br><span class="line">    <span class="comment">###     method below using the padding character from the arguments. You should ensure all</span></span><br><span class="line">    <span class="comment">###     sentences have the same number of words and each word has the same number of</span></span><br><span class="line">    <span class="comment">###     characters.</span></span><br><span class="line">    <span class="comment">###     Set padding words to a `max_word_length` sized vector of padding characters.</span></span><br><span class="line">    <span class="comment">###</span></span><br><span class="line">    <span class="comment">###     You should NOT use the method `pad_sents()` below because of the way it handles</span></span><br><span class="line">    <span class="comment">###     padding and unknown words.</span></span><br><span class="line">    sents_padded = []</span><br><span class="line">    max_sent_len = max([len(sent) <span class="keyword">for</span> sent <span class="keyword">in</span> sents])</span><br><span class="line">    <span class="keyword">for</span> sent <span class="keyword">in</span> sents:</span><br><span class="line">        sent = sent + [[] <span class="keyword">for</span> i <span class="keyword">in</span> range(max_sent_len - len(sent))]</span><br><span class="line">        <span class="keyword">assert</span> len(sent) == max_sent_len</span><br><span class="line">        tmp_sent = []</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> sent:</span><br><span class="line">            word = word[:max_word_length]</span><br><span class="line">            diff = max_word_length - len(word)</span><br><span class="line">            word = word + [char_pad_token] * diff</span><br><span class="line">            <span class="keyword">assert</span> len(word) == max_word_length</span><br><span class="line">            tmp_sent.append(word)</span><br><span class="line">        sents_padded.append(tmp_sent)</span><br><span class="line"></span><br><span class="line">    <span class="comment">### END YOUR CODE</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sents_padded</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VocabEntry</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># ......</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">words2charindices</span><span class="params">(self, sents)</span>:</span></span><br><span class="line">            <span class="string">""" Convert list of sentences of words into list of list of list of character indices.</span></span><br><span class="line"><span class="string">            @param sents (list[list[str]]): sentence(s) in words</span></span><br><span class="line"><span class="string">            @return word_ids (list[list[list[int]]]): sentence(s) in indices</span></span><br><span class="line"><span class="string">            """</span></span><br><span class="line">            <span class="comment">### YOUR CODE HERE for part 1e</span></span><br><span class="line">            <span class="comment">### <span class="doctag">TODO:</span> </span></span><br><span class="line">            <span class="comment">###     This method should convert characters in the input sentences into their </span></span><br><span class="line">            <span class="comment">###     corresponding character indices using the character vocabulary char2id </span></span><br><span class="line">            <span class="comment">###     defined above.</span></span><br><span class="line">            <span class="comment">###</span></span><br><span class="line">            <span class="comment">###     You must prepend each word with the `start_of_word` character and append </span></span><br><span class="line">            <span class="comment">###     with the `end_of_word` character. </span></span><br><span class="line"></span><br><span class="line">            word_ids = []</span><br><span class="line">            <span class="keyword">for</span> sent <span class="keyword">in</span> sents:</span><br><span class="line">                sent_chars_id = []</span><br><span class="line">                <span class="keyword">for</span> word <span class="keyword">in</span> sent:</span><br><span class="line">                    sent_chars_id.append([<span class="number">1</span>] + [ self.char2id.get(char,<span class="number">3</span>) <span class="keyword">for</span> char <span class="keyword">in</span> word ] + [<span class="number">2</span>])</span><br><span class="line">                word_ids.append(sent_chars_id)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> word_ids</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">to_input_tensor_char</span><span class="params">(self, sents: List[List[str]], device: torch.device)</span> -&gt; torch.Tensor:</span></span><br><span class="line">        <span class="string">""" Convert list of sentences (words) into tensor with necessary padding for </span></span><br><span class="line"><span class="string">        shorter sentences.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @param sents (List[List[str]]): list of sentences (words)</span></span><br><span class="line"><span class="string">        @param device: device on which to load the tensor, i.e. CPU or GPU</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @returns sents_var: tensor of (max_sentence_length, batch_size, max_word_length)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment">### YOUR CODE HERE for part 1g</span></span><br><span class="line">        <span class="comment">### <span class="doctag">TODO:</span> </span></span><br><span class="line">        <span class="comment">###     Connect `words2charindices()` and `pad_sents_char()` which you've defined in </span></span><br><span class="line">        <span class="comment">###     previous parts</span></span><br><span class="line">        char_sents =  self.words2charindices(sents)</span><br><span class="line">        padded_char_sents = pad_sents_char(char_sents, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        sents_var = torch.tensor(padded_char_sents, dtype=torch.int8, device= device)</span><br><span class="line">        sents_var = sents_var.permute(<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sents_var</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ......</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>For each of these characters $c_i$, we lookup a dense character embedding (which has shape $e_{char}$). This yields a tensor $x_{emb}$:</p>
<script type="math/tex; mode=display">x_{emb} = CharEmbedding(X_{padded}) \in \mathbb{R}^{m_{word} \times e_{char}}</script><p>We’ll reshape $x_{emb}$ to obtain $x_{reshaped} in \mathbb{R}^{e_{char} \times m_{word}}$ before feeding into the convolutional network.</p>
</li>
<li><p><strong>Convolutional network</strong>. To combine these character embeddings, we’ll use 1-dimensional convolutions. The convolutional layer has two hyperparameters: the kernel size $k$ (also called window size), which dictates the size of the window used to compute features, and the number of filters $f$, (also called number of output features or number of output channels). The convolutional layer has a weight matrix $W \in \mathbb{R}^{f \times e_{char} \times k}$ and a bias vector $b \in \mathbb{R}^{f}$. Overall this produces output $x_{conv}$.</p>
<script type="math/tex; mode=display">x_{conv} = Conv1D(x_{reshaped}) \in \mathbb{R}^{f \times {m_{word} - k + 1}}</script><p>For our application, we’ll set $f$ to be equal to $e_{word}$, the size of the final word embedding for word x. Therefore,</p>
<script type="math/tex; mode=display">x_{conv} \in \mathbb{R}^{e_{word} \times (m_{word} - k + 1)}</script><p>Finally, we apply the <code>ReLU</code> function to $x_{conv}$, then use max-pooling to reduce this to a single vector $x_{conv_out} \in \mathbb{R}^{e_{word}}$, which is the final output of the Convolutional Network:</p>
<script type="math/tex; mode=display">x_{conv\_out} = MaxPool(ReLU(x_{conv})) \in \mathbb{R}^{e_{word}}</script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">CS224N 2018-19: Homework 5</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### YOUR CODE HERE for part 1i</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### END YOUR CODE</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CNN</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="string">""" </span></span><br><span class="line"><span class="string">        Init CNN which is a 1-D cnn.</span></span><br><span class="line"><span class="string">        @param embed_size (int): embedding size of char (dimensionality)</span></span><br><span class="line"><span class="string">        @param k: kernel size, also called window size</span></span><br><span class="line"><span class="string">        @param f: number of filters, should be embed_size of word</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,</span></span></span><br><span class="line"><span class="function"><span class="params">            embed_size: int = <span class="number">50</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 m_word: int = <span class="number">21</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 k: int = <span class="number">5</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 f: int = <span class="number">50</span>)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="string">""" </span></span><br><span class="line"><span class="string">        Init CNN which is a 1-D cnn.</span></span><br><span class="line"><span class="string">        @param embed_size (int): embedding size of char (dimensionality)</span></span><br><span class="line"><span class="string">        @param k: kernel size, also called window size</span></span><br><span class="line"><span class="string">        @param f: number of filters, should be embed_size of word</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        super(CNN, self).__init__()</span><br><span class="line">        self.conv1d = nn.Conv1d(in_channels = embed_size, </span><br><span class="line">                    out_channels = f,</span><br><span class="line">                    kernel_size = k)</span><br><span class="line"></span><br><span class="line">        self.maxpool = nn.MaxPool1d(kernel_size = m_word - k + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, X_reshaped: torch.Tensor)</span> -&gt; torch.Tensor:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        map from X_reshaped to X_conv_out</span></span><br><span class="line"><span class="string">        @param X_reshaped (Tensor): Tensor of char-level embedding with shape ( </span></span><br><span class="line"><span class="string">                                    batch_size, e_char, m_word), where e_char = embed_size of char, </span></span><br><span class="line"><span class="string">                                    m_word = max_word_length.</span></span><br><span class="line"><span class="string">        @return X_conv_out (Tensor): Tensor of word-level embedding with shape (max_sentence_length,</span></span><br><span class="line"><span class="string">                                    batch_size)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        X_conv = self.conv1d(X_reshaped)</span><br><span class="line">        <span class="comment"># print(X_conv.size())</span></span><br><span class="line">        X_conv_out = self.maxpool(F.relu(X_conv))</span><br><span class="line">        <span class="comment"># print(X_conv_out.size())</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> X_conv_out.squeeze(<span class="number">-1</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Highway layer and dropout</strong>. Highway Networks6 have a skip-connection controlled by a dynamic gate. Given the input $x_{conv\_out} \in \mathbb{R}^{e_{word}}$, we compute:<br><center>
 <img style="border-radius: 0.3125em;
 box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="4.png" width="70%" height="70%">
 <div style="color:orange; border-bottom: 1px solid #d9d9d9;
 display: inline-block;
 color: #999;
 padding: 2px;">Figure from cs224n. Highway Network (Srivastava et al. 2015)</div>
</center></p>
<script type="math/tex; mode=display">
\begin{align}
& x_{proj} = RELU(W_{proj}x_{conv\_cout} + b_{proj}) \quad \in \mathbb{R}^{e_{word}} \\
& x_{gate} = \sigma(W_{gate}x_{conv\_out} + b_{gate}) \quad \in \mathbb{R}^{e_{word}} \\
& x_{highway} = x_{gate} \circ x_{proj} + ( 1 - x_{gate}) \circ x_{conv\_out}  \quad \in \mathbb{R}^{e_{word}}\\
& x_{word_emb} = Dropout(x_{highway}) \quad \in \mathbb{R}^{e_{word}} 
\end{align}</script><p>Where $W_{proj},W_{gate} \in \mathbb{R}^{e_{word} \times e_{word}}$, and $\circ$ denotes element-wise multiplication.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">CS224N 2018-19: Homework 5</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"><span class="comment">### YOUR CODE HERE for part 1h</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Highway</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="string">""" Highway network for ConvNN</span></span><br><span class="line"><span class="string">        - Relu</span></span><br><span class="line"><span class="string">        - Sigmoid</span></span><br><span class="line"><span class="string">        - gating mechanism from LSTM</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,embed_size)</span>:</span></span><br><span class="line">        <span class="string">""" Init Higway network</span></span><br><span class="line"><span class="string">            @param embed_size (int): Embedding size of word, in handout, </span></span><br><span class="line"><span class="string">                                     it's e_&#123;word&#125; (dimensionality)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        super(Highway, self).__init__()</span><br><span class="line"></span><br><span class="line">        self.projection = nn.Linear(embed_size,embed_size,bias = <span class="keyword">True</span>)</span><br><span class="line">        self.gate = nn.Linear(embed_size,embed_size, bias = <span class="keyword">True</span>)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, X_conv_out)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">            Take mini-batch of sentence of ConvNN</span></span><br><span class="line"><span class="string">            @param X_conv_out (Tensor): Tensor with shape (max_sentence_length, batch_size, embed_size)</span></span><br><span class="line"><span class="string">            @return X_highway (Tensor): combinded output with shape (max_sentence_length, batch_size, embed_size)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        </span><br><span class="line">        X_proj = F.relu(self.projection(X_conv_out))</span><br><span class="line">        X_gate = torch.sigmoid(self.gate(X_conv_out))</span><br><span class="line">        X_highway =  torch.mul(X_gate, X_proj) + torch.mul((<span class="number">1</span> - X_gate),X_conv_out)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> X_highway</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### END YOUR CODE</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Combine above steps together to get our <strong>Character-based word embedding model</strong>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">CS224N 2018-19: Homework 5</span></span><br><span class="line"><span class="string">model_embeddings.py: Embeddings for the NMT model</span></span><br><span class="line"><span class="string">Pencheng Yin &lt;pcyin@cs.cmu.edu&gt;</span></span><br><span class="line"><span class="string">Sahil Chopra &lt;schopra8@stanford.edu&gt;</span></span><br><span class="line"><span class="string">Anand Dhoot &lt;anandd@stanford.edu&gt;</span></span><br><span class="line"><span class="string">Michael Hahn &lt;mhahn2@stanford.edu&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="comment"># Do not change these imports; your module names should be</span></span><br><span class="line"><span class="comment">#   `CNN` in the file `cnn.py`</span></span><br><span class="line"><span class="comment">#   `Highway` in the file `highway.py`</span></span><br><span class="line"><span class="comment"># Uncomment the following two imports once you're ready to run part 1(j)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> cnn <span class="keyword">import</span> CNN</span><br><span class="line"><span class="keyword">from</span> highway <span class="keyword">import</span> Highway</span><br><span class="line"></span><br><span class="line"><span class="comment"># End "do not change" </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelEmbeddings</span><span class="params">(nn.Module)</span>:</span> </span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Class that converts input words to their CNN-based embeddings.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, embed_size, vocab)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Init the Embedding layer for one language</span></span><br><span class="line"><span class="string">        @param embed_size (int): Embedding size (dimensionality) for the output </span></span><br><span class="line"><span class="string">        @param vocab (VocabEntry): VocabEntry object. See vocab.py for documentation.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        super(ModelEmbeddings, self).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="comment">## A4 code</span></span><br><span class="line">        <span class="comment"># pad_token_idx = vocab.src['&lt;pad&gt;']</span></span><br><span class="line">        <span class="comment"># self.embeddings = nn.Embedding(len(vocab.src), embed_size, padding_idx=pad_token_idx)</span></span><br><span class="line">        <span class="comment">## End A4 code</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">### YOUR CODE HERE for part 1j</span></span><br><span class="line">        pad_token_idx = vocab.char2id[<span class="string">'&lt;pad&gt;'</span>]</span><br><span class="line">        self.embed_size = embed_size</span><br><span class="line">        char_embed_size = <span class="number">50</span></span><br><span class="line">        self.char_embedding = nn.Embedding(len(vocab.char2id),</span><br><span class="line">                                           char_embed_size,</span><br><span class="line">                                           pad_token_idx)</span><br><span class="line">        self.convNN = CNN(f=self.embed_size)</span><br><span class="line">        self.highway = Highway(embed_size=self.embed_size)</span><br><span class="line">        self.dropout = nn.Dropout(p=<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">### END YOUR CODE</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, input)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Looks up character-based CNN embeddings for the words in a batch of sentences.</span></span><br><span class="line"><span class="string">        @param input: Tensor of integers of shape (sentence_length, batch_size, max_word_length) where</span></span><br><span class="line"><span class="string">            each integer is an index into the character vocabulary</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @param output: Tensor of shape (sentence_length, batch_size, embed_size), containing the </span></span><br><span class="line"><span class="string">            CNN-based embeddings for each word of the sentences in the batch</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment">## A4 code</span></span><br><span class="line">        <span class="comment"># output = self.embeddings(input)</span></span><br><span class="line">        <span class="comment"># return output</span></span><br><span class="line">        <span class="comment">## End A4 code</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">### YOUR CODE HERE for part 1j</span></span><br><span class="line">        X_word_emb_list = []</span><br><span class="line">        <span class="keyword">for</span> X_padded <span class="keyword">in</span> input:</span><br><span class="line">            <span class="comment"># (batch_size,max_word_length) -&gt; (batch_size,max_word_length,embed_size)</span></span><br><span class="line">            X_emb = self.char_embedding(X_padded)</span><br><span class="line">            <span class="comment"># print(X_emb.size())</span></span><br><span class="line">            X_reshaped = X_emb.permute(<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">            X_conv_out = self.convNN(X_reshaped)</span><br><span class="line">            X_highway = self.highway(X_conv_out)</span><br><span class="line">            X_word_emb = self.dropout(X_highway)</span><br><span class="line">            X_word_emb_list.append(X_word_emb)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># (sentence_length, batch_size, embed_size)</span></span><br><span class="line">        X_word_emb = torch.stack(X_word_emb_list, dim=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> X_word_emb</span><br><span class="line">        <span class="comment">### END YOUR CODE</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Character-based-LSTM-decoder-for-NMT"><a href="#Character-based-LSTM-decoder-for-NMT" class="headerlink" title="Character-based LSTM decoder for NMT"></a>Character-based LSTM decoder for NMT</h3><p>We will now add a LSTM-based character-level decoder to our NMT system. The main idea is that when our word-level decoder produces and <code>&lt;UNK&gt;</code> token, we run our character-level decoder (which you can think of as a character-level conditional language model) to instead generate the target word one character at a time, as shown in below figure. This will help us to produce rare and out-of-vocabulary target words.</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="5.png" width="50%" height="50%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Figure from cs224n. A character-based decoder which is triggered if the word-based decoder produces an UNK. Figure courtesy of Luong & Manning.</div>
</center>

<p>We now describe the model in three sections:</p>
<ol>
<li><p><strong>Forward computation of Character Decoder</strong>: Given a sequence of integers $x_i,\cdots,x_n \in \mathbb{Z}$ representing a sequence of characters, we lookup their character embeddings $x_i,\cdots,x_n \in \mathbb{Z}^{e_{char}}$ and pass these as input in to the(unidirectional)LSTM,obtaining hidden states $h1, \cdots, h_n$ and cell states $c_1, \cdots, c_n$</p>
<script type="math/tex; mode=display">h_t,c_t = CharDecoderLSTM(x_t,h_{t-1},c_{t-1}) \quad \text{where} \quad h_t,c_t \in \mathbb{R}^{h}</script><p>where h is the hidden size of the CharDecoderLSTM. The initial hidden and cell states $h_0$ and $c_0$ are both set to the <strong>combined output</strong> vector (attentioned) for the current timestep of the main word-level NMT decoder.<br>For every timestep $t \in { 1, \cdots, n }$ we compute scores (also called logits) $s_t \in \mathbb{R}^{V_{char}}$</p>
<script type="math/tex; mode=display">s_t = W_{dec}h_t + b_{dec} \in \mathbb{R}^{V_{char}}</script><p>Where the weight matrix $W_{dec} \in \mathbb{R}^{V_{char} \times h}$ and the bias vector $b_{dec} \in \mathbb{R}^{V_{char}}$. If we passed $s_t$ through a softmax function, we would have the probability distribution for the next character in the sequence.</p>
</li>
<li><p><strong>Training of Character Decoder</strong> When we train the NMT system, we train the character decoder on <strong>every word</strong> in the target sentence (not just the words represented by <unk>). For example, on a particular step of the main NMT decoder, if the target word is music then the input sequence for the CharDecoderLSTM is $[x_1,…,x_n]$ = [<start>,m,u,s,i,c] and the target sequence for the CharDecoderLSTM is $[x_{2}, . . . , x_{n+1}]$ = [m,u,s,i,c,<end>].<br>We pass the input sequence $x_1, \cdots, x_n$, along with the initial states $h_0$ and $c_0$ obtained from the combined output vector) into the CharDecoderLSTM, thus obtaining scores $s_1,\cdots, s_n$ which we will compare to the target sequence $x_2,\cdots, x_{n+1}$. We optimize with respect to sum of the cross-entropy loss:</end></start></unk></p>
<script type="math/tex; mode=display">p_t = softmax(s_t) \in \mathbb{R}^{V_{char}}</script><script type="math/tex; mode=display">loss_{char\_dec} = -\sum_{t=1}^{n}log p_t(x_{t+1})</script></li>
<li><p><strong>Decoding from the Character Decoder</strong> t test time, first we produce a translation from our word- based NMT system in the usual way (e.g. a decoding algorithm like beam search). If the translation contains any <unk> tokens, then for each of those positions, we use the word-based decoder’s combined output vector to initialize the CharDecoderLSTM initial $h_0$ and $c_0$, then use CharDecoderLSTM to generate a sequence of characters. To generate the sequence of characters, we use the greedy decoding algorithm, which repeatedly chooses the most probable next character, until either the <end> token is produced or we reach a predetermined max length. The algorithm is given below, for a single example (not batched).</end></unk></p>
<center>
 <img style="border-radius: 0.3125em;
 box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="6.png" width="100%" height="100%">
 <div style="color:orange; border-bottom: 1px solid #d9d9d9;
 display: inline-block;
 color: #999;
 padding: 2px;">Figure from cs224n. Greedy Decoding</div>
</center>

</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">CS224N 2018-19: Homework 5</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CharDecoder</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, hidden_size, char_embedding_size=<span class="number">50</span>, target_vocab=None)</span>:</span></span><br><span class="line">        <span class="string">""" Init Character Decoder.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @param hidden_size (int): Hidden size of the decoder LSTM</span></span><br><span class="line"><span class="string">        @param char_embedding_size (int): dimensionality of character embeddings</span></span><br><span class="line"><span class="string">        @param target_vocab (VocabEntry): vocabulary for the target language. See vocab.py for documentation.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment">### YOUR CODE HERE for part 2a</span></span><br><span class="line">        <span class="comment">### TODO - Initialize as an nn.Module.</span></span><br><span class="line">        <span class="comment">###      - Initialize the following variables:</span></span><br><span class="line">        <span class="comment">###        self.charDecoder: LSTM. Please use nn.LSTM() to construct this.</span></span><br><span class="line">        <span class="comment">###        self.char_output_projection: Linear layer, called W_&#123;dec&#125; and b_&#123;dec&#125; in the PDF</span></span><br><span class="line">        <span class="comment">###        self.decoderCharEmb: Embedding matrix of character embeddings</span></span><br><span class="line">        <span class="comment">###        self.target_vocab: vocabulary for the target language</span></span><br><span class="line">        <span class="comment">###</span></span><br><span class="line">        <span class="comment">### Hint: - Use target_vocab.char2id to access the character vocabulary for the target language.</span></span><br><span class="line">        <span class="comment">###       - Set the padding_idx argument of the embedding matrix.</span></span><br><span class="line">        <span class="comment">###       - Create a new Embedding layer. Do not reuse embeddings created in Part 1 of this assignment.</span></span><br><span class="line">        </span><br><span class="line">        super(CharDecoder, self).__init__()</span><br><span class="line"></span><br><span class="line">        self.char_embedding_size = char_embedding_size</span><br><span class="line">        self.target_vocab = target_vocab</span><br><span class="line">        self.padding_idx = self.target_vocab.char2id[<span class="string">'&lt;pad&gt;'</span>]</span><br><span class="line">        self.decoderCharEmb = nn.Embedding(len(self.target_vocab.char2id),</span><br><span class="line">                                           char_embedding_size,</span><br><span class="line">                                           self.padding_idx)</span><br><span class="line">        self.charDecoder = nn.LSTM(input_size=char_embedding_size,</span><br><span class="line">                                   hidden_size=hidden_size)</span><br><span class="line">        self.char_output_projection = nn.Linear(hidden_size,</span><br><span class="line">                                                len(self.target_vocab.char2id))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">### END YOUR CODE</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, input, dec_hidden=None)</span>:</span></span><br><span class="line">        <span class="string">""" Forward pass of character decoder.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @param input: tensor of integers, shape (length, batch)</span></span><br><span class="line"><span class="string">        @param dec_hidden: internal state of the LSTM before reading the input characters. A tuple of two tensors of shape (1, batch, hidden_size)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @returns scores: called s_t in the PDF, shape (length, batch, self.vocab_size)</span></span><br><span class="line"><span class="string">        @returns dec_hidden: internal state of the LSTM after reading the input characters. A tuple of two tensors of shape (1, batch, hidden_size)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment">### YOUR CODE HERE for part 2b</span></span><br><span class="line">        <span class="comment">### TODO - Implement the forward pass of the character decoder.</span></span><br><span class="line">        char_embeddings = self.decoderCharEmb(input)        <span class="comment"># (length, batch, char_embed_size)</span></span><br><span class="line">        hidden_states, dec_hidden = self.charDecoder(</span><br><span class="line">            char_embeddings, dec_hidden)    <span class="comment"># (length, batch, hidden_size)</span></span><br><span class="line">        scores = self.char_output_projection(hidden_states)     <span class="comment"># (len, batch, vocab)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> scores, dec_hidden</span><br><span class="line">        <span class="comment">### END YOUR CODE</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">train_forward</span><span class="params">(self, char_sequence, dec_hidden=None)</span>:</span></span><br><span class="line">        <span class="string">""" Forward computation during training.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @param char_sequence: tensor of integers, shape (length, batch). Note that "length" here and in forward() need not be the same.</span></span><br><span class="line"><span class="string">        @param dec_hidden: initial internal state of the LSTM, obtained from the output of the word-level decoder. A tuple of two tensors of shape (1, batch, hidden_size)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @returns The cross-entropy loss, computed as the *sum* of cross-entropy losses of all the words in the batch.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment">### YOUR CODE HERE for part 2c</span></span><br><span class="line">        <span class="comment">### TODO - Implement training forward pass.</span></span><br><span class="line">        <span class="comment">###</span></span><br><span class="line">        <span class="comment">### Hint: - Make sure padding characters do not contribute to the cross-entropy loss.</span></span><br><span class="line">        <span class="comment">###       - char_sequence corresponds to the sequence x_1 ... x_&#123;n+1&#125; from the handout (e.g., &lt;START&gt;,m,u,s,i,c,&lt;END&gt;).</span></span><br><span class="line">        scores, dec_hidden = self.forward(char_sequence[:<span class="number">-1</span>], dec_hidden)</span><br><span class="line">        <span class="comment"># char_embeddings = self.decoderCharEmb(char_sequence)</span></span><br><span class="line">        <span class="comment"># hidden_states, dec_hidden = self.charDecoder(char_embeddings[:-1], dec_hidden)</span></span><br><span class="line">        <span class="comment"># scores = self.char_output_projection(hidden_states)  # (len, batch, vocab)</span></span><br><span class="line">        loss = nn.CrossEntropyLoss(ignore_index=self.padding_idx,</span><br><span class="line">                                   reduction=<span class="string">'sum'</span>)</span><br><span class="line">        ce_loss = loss(scores.permute(<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>),</span><br><span class="line">                       char_sequence[<span class="number">1</span>:].transpose(<span class="number">1</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ce_loss</span><br><span class="line"></span><br><span class="line">        <span class="comment">### END YOUR CODE</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decode_greedy</span><span class="params">(self, initialStates, device, max_length=<span class="number">21</span>)</span>:</span></span><br><span class="line">        <span class="string">""" Greedy decoding</span></span><br><span class="line"><span class="string">        @param initialStates: initial internal state of the LSTM, a tuple of two tensors of size (1, batch, hidden_size)</span></span><br><span class="line"><span class="string">        @param device: torch.device (indicates whether the model is on CPU or GPU)</span></span><br><span class="line"><span class="string">        @param max_length: maximum length of words to decode</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @returns decodedWords: a list (of length batch) of strings, each of which has length &lt;= max_length.</span></span><br><span class="line"><span class="string">                              The decoded strings should NOT contain the start-of-word and end-of-word characters.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">### YOUR CODE HERE for part 2d</span></span><br><span class="line">        <span class="comment">### TODO - Implement greedy decoding.</span></span><br><span class="line">        <span class="comment">### Hints:</span></span><br><span class="line">        <span class="comment">###      - Use target_vocab.char2id and target_vocab.id2char to convert between integers and characters</span></span><br><span class="line">        <span class="comment">###      - Use torch.tensor(..., device=device) to turn a list of character indices into a tensor.</span></span><br><span class="line">        <span class="comment">###      - We use curly brackets as start-of-word and end-of-word characters. That is, use the character '&#123;' for &lt;START&gt; and '&#125;' for &lt;END&gt;.</span></span><br><span class="line">        <span class="comment">###        Their indices are self.target_vocab.start_of_word and self.target_vocab.end_of_word, respectively.</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">### END YOUR CODE</span></span><br><span class="line"></span><br><span class="line">        output_words = []</span><br><span class="line">        decodedWords = []</span><br><span class="line">        start_idx = self.target_vocab.start_of_word</span><br><span class="line">        end_idx = self.target_vocab.end_of_word</span><br><span class="line">        dec_hidden = initialStates</span><br><span class="line">        batch_size = dec_hidden[<span class="number">0</span>].shape[<span class="number">1</span>]</span><br><span class="line">        current_char = torch.tensor([[start_idx] * batch_size],</span><br><span class="line">                                    device=device)  <span class="comment"># idx of '&lt;start&gt;' token</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(max_length):</span><br><span class="line">            scores, dec_hidden = self.forward(current_char, dec_hidden)</span><br><span class="line">            current_char = scores.argmax(<span class="number">-1</span>)</span><br><span class="line">            output_words += [current_char]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        output_words = torch.cat(output_words).t().tolist()</span><br><span class="line">        <span class="keyword">for</span> foo <span class="keyword">in</span> output_words:</span><br><span class="line">            word = <span class="string">""</span></span><br><span class="line">            <span class="keyword">for</span> bar <span class="keyword">in</span> foo:</span><br><span class="line">                <span class="keyword">if</span> bar == end_idx:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                word += self.target_vocab.id2char[bar]</span><br><span class="line">            decodedWords += [word]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> decodedWords</span><br><span class="line">        <span class="comment">### END YOUR CODE</span></span><br></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li>Course note and slides of <a href="http://web.stanford.edu/class/cs224n/" target="_blank" rel="noopener">cs224n</a></li>
</ul>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>cs224n</tag>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title>Attention</title>
    <url>/Attention/2019/12/16/</url>
    <content><![CDATA[<h2 id="General-definition-of-attention"><a href="#General-definition-of-attention" class="headerlink" title="General definition of attention"></a>General definition of attention</h2><p>Given a set of vector <strong>values</strong>, and a vector <strong>query</strong>, attention is a technique to compute a <strong>weighted sum</strong> of the values, dependent on the query.</p>
<ul>
<li>We sometimes say that the query attends to the values.</li>
<li>For example, in the seq2seq + attention model, each decoder hidden state (query) attends to all the encoder hidden states<br>75 (values).<ul>
<li>The weighted sum is a <strong>selective</strong> summary of the information contained in the values, where the query determines which values to focus on.</li>
<li>Attention is a way to obtain a <strong>fixed-size representation</strong> of an arbitrary set of representations (the values), dependent on some other representation (the query).</li>
</ul>
</li>
</ul>
<h2 id="How-to-do-attention"><a href="#How-to-do-attention" class="headerlink" title="How to do attention"></a>How to do attention</h2><ol>
<li>We have some <strong>values</strong> $h1$,$\cdots$,$h_N$ $\in \mathbb{R}^{d_1}$ and a <strong>query</strong> $s \in \mathbb{R}^{d_2}$</li>
<li>Computing the attention scores (multiple ways to do this)<script type="math/tex; mode=display">e \in \mathbb{R}^{N}</script></li>
<li>Taking softmax to get attention distribution $\alpha$<script type="math/tex; mode=display">\alpha = softmax(e) \in \mathbb{R}^{N}</script></li>
<li>Using attention distribution to take weighted sum of values:<script type="math/tex; mode=display">a = \sum_{i=1}^{N}\alpha_i h_i \in \mathbb{R}^{d_1}</script>thus obtaining the attention output a (sometimes called the <strong>context vector</strong>)</li>
</ol>
<h2 id="Bidirectional-RNNs"><a href="#Bidirectional-RNNs" class="headerlink" title="Bidirectional RNNs"></a>Bidirectional RNNs</h2><center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="1.png" width="50%" height="50%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">picture from lecture notes of cs224n</div>
    <br>
    <br>
</center>

<p>Bidirectional RNNs fix this problem by traversing a sequence in both directions and concatenating the resulting outputs (both cell outputs and final hidden states). For every RNN cell, we simply add another cell but feed inputs to it in the opposite direction; the output $O_t$ corresponding to the $t\prime$ word is the concatenated vector $\left [ o_t^{(f)}, o_t^{(b)}  \right ]$ where $o_t^{(f)}$ is the output of the forward-direction RNN on word t and $o_t^{(b)}$ is the corresponding output from the reverse-direction RNN. Similarly, the final hidden state is $h = \left [   h^{(f)}, h^{(b)}  \right ]$.</p>
<h2 id="Seq2Seq"><a href="#Seq2Seq" class="headerlink" title="Seq2Seq"></a>Seq2Seq</h2><p>Sequence-to-sequence, or “Seq2Seq”, is a relatively new paradigm,with its first published usage in 2014 for English-French translation. At a high level, a sequence-to-sequence model is an end-to-end model made up of two recurrent neural networks:<br>Sutskever et al. 2014, “Sequence to Sequence Learning with Neural Networks”</p>
<ul>
<li>an encoder, which takes the model’s input sequence as input and encodes it into a fixed-size “context vector”</li>
<li>a decoder, which uses the context vector from above as a “seed” from which to generate an output sequence.<br>For this reason, Seq2Seq models are often referred to as “encoder- decoder models.” We’ll look at the details of these two networks separately.</li>
</ul>
<h3 id="Seq2Seq-architecture-encoder"><a href="#Seq2Seq-architecture-encoder" class="headerlink" title="Seq2Seq architecture - encoder"></a>Seq2Seq architecture - encoder</h3><blockquote>
<p>Encoder RNN produces an encoding of the source sentence.</p>
</blockquote>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="2.png" width="50%" height="50%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">picture from lecture notes of cs224n</div>
    <br>
    <br>
</center>

<p>The encoder network’s job is to read the input sequence to our Seq2Seq model and generate a fixed-dimensional context vector <strong>C</strong> for the sequence. To do so, the encoder will use a recurrent neural network cell – usually an LSTM – to read the input tokens one at a time. The final hidden state of the cell will then become C. However, because it’s so difficult to compress an arbitrary-length sequence into a single fixed-size vector (especially for difficult tasks like transla- tion), the encoder will usually consist of stacked LSTMs: a series of LSTM “layers” where each layer’s outputs are the input sequence to the next layer. The final layer’s LSTM hidden state will be used as <strong>C</strong>.</p>
<p>Seq2Seq encoders will often do something strange: they will pro- cess the input sequence in reverse. This is actually done on purpose. The idea is that, by doing this, the last thing that the encoder sees will (roughly) corresponds to the first thing that the model outputs; this makes it easier for the decoder to “get started” on the output, which makes then gives the decoder an easier time generating a proper output sentence. In the context of translation, we’re allowing the network to translate the first few words of the input as soon as it sees them; once it has the first few words translated correctly, it’s much easier to go on to construct a correct sentence than it is to do so from scratch.</p>
<h3 id="Seq2Seq-architecture-decoder"><a href="#Seq2Seq-architecture-decoder" class="headerlink" title="Seq2Seq architecture - decoder"></a>Seq2Seq architecture - decoder</h3><blockquote>
<p>Decoder RNN is a Language Model that generates target sentence, conditioned on encoding.</p>
</blockquote>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="3.png" width="50%" height="50%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">picture from lecture notes of cs224n</div>
    <br>
    <br>
</center>

<p>The decoder is also an LSTM network, but its usage is a little more complex than the encoder network. Essentially, we’d like to use it as a <strong>language model</strong> that’s “aware” of the words that it’s generated so far and of the input. To that end, we’ll keep the “stacked” LSTM architecture from the encoder, but we’ll initialize the hidden state of our first layer with the context vector from above; the decoder will literally use the context of the input to generate an output.</p>
<p>Once the decoder is set up with its context, we’ll pass in a special token to signify the start of output generation; in literature, this is usually an <eos> token appended to the end of the input (there’s also one at the end of the output). Then, we’ll run all three layers of LSTM, one after the other, following up with a softmax on the final layer’s output to generate the first output word. Then, we pass that word into the first layer, and repeat the generation. This is how we get the LSTMs to act like a language model. See Fig. 2 for an example of a decoder network.</eos></p>
<p>Once we have the output sequence, we use the same learning strat- egy as usual. We define a loss, the cross entropy on the prediction sequence, and we minimize it with a gradient descent algorithm and back-propagation. Both the encoder and decoder are trained at the same time, so that they both learn the same context vector represen- tation.</p>
<h2 id="Training-a-Neural-Machine-Translation-system"><a href="#Training-a-Neural-Machine-Translation-system" class="headerlink" title="Training a Neural Machine Translation system"></a>Training a Neural Machine Translation system</h2><center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="4.png" width="70%" height="70%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">picture from lecture notes of cs224n</div>
    <br>
    <br>
</center>

<h3 id="Greedy-Search"><a href="#Greedy-Search" class="headerlink" title="Greedy Search"></a>Greedy Search</h3><p>At each time step, we pick the most probable token. In other words</p>
<script type="math/tex; mode=display">x_t = argmax_{\tilde{x_t} \mathbb{P}(\tilde(x_t)| x_1, \cdots, x_t)}</script><p>This technique is efficient and natural, however it explores a small part of the search space and if we make a mistake at one time step, the rest of the sentence could be heavily impacted.</p>
<h3 id="Beam-search-decoding"><a href="#Beam-search-decoding" class="headerlink" title="Beam search decoding"></a>Beam search decoding</h3><center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="5.png" width="70%" height="70%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">picture from lecture notes of cs224n</div>
    <br>
    <br>
</center>

<p>the idea is to maintain K candidates at each time step.</p>
<script type="math/tex; mode=display">H_t = \left\{ (x_1^{1}, \cdots, x_t^1), \cdots, (x_1^k, \cdots, x_t^k) \right\}</script><p>and compute $H_{t+1}$ by expanding $H_t$ and keeping the best K candi- dates. In other words, we pick the best K sequence in the following set</p>
<script type="math/tex; mode=display">\tilde{H_{t+1}} = \cup_{k=1}^{k}H_{t+1}^{\tilde{k}}</script><p>where</p>
<script type="math/tex; mode=display">\tilde{H_t} = \left\{ (x_1^{k}, \cdots, x_t^{k}, v_1), \cdots, (x_1^{k}, \cdots, x_t^{k}, V_{|v|}) \right\}</script><p>As we increase K, we gain precision and we are asymptotically exact. However, the improvement is not monotonic and we can set a K that combines reasonable performance and computational efficiency. </p>
<h2 id="CS224n-Assignment4"><a href="#CS224n-Assignment4" class="headerlink" title="CS224n Assignment4"></a>CS224n Assignment4</h2><p>In Machine Translation, our goal is to convert a sentence from the source language (e.g. Spanish) to the target language (e.g. English). In this assignment, we will implement a sequence-to-sequence (Seq2Seq) network with attention, to build a Neural Machine Translation (NMT) system. In this section, we describe the training procedure for the proposed NMT system, which uses a Bidirectional LSTM Encoder and a Unidirectional LSTM Decoder.</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="6.png" width="70%" height="70%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">picture from lecture notes of cs224n</div>
    <br>
    <br>
</center>




<h3 id="Initialize"><a href="#Initialize" class="headerlink" title="Initialize"></a>Initialize</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, embed_size, hidden_size, vocab, dropout_rate=<span class="number">0.2</span>)</span>:</span></span><br><span class="line">        <span class="string">""" Init NMT Model.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @param embed_size (int): Embedding size (dimensionality)</span></span><br><span class="line"><span class="string">        @param hidden_size (int): Hidden Size (dimensionality)</span></span><br><span class="line"><span class="string">        @param vocab (Vocab): Vocabulary object containing src and tgt languages</span></span><br><span class="line"><span class="string">                              See vocab.py for documentation.</span></span><br><span class="line"><span class="string">        @param dropout_rate (float): Dropout probability, for attention</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        super(NMT, self).__init__()</span><br><span class="line">        self.model_embeddings = ModelEmbeddings(embed_size, vocab)</span><br><span class="line">        self.hidden_size = hidden_size</span><br><span class="line">        self.dropout_rate = dropout_rate</span><br><span class="line">        self.vocab = vocab</span><br><span class="line"></span><br><span class="line">        <span class="comment"># default values</span></span><br><span class="line">        self.encoder = <span class="keyword">None</span> </span><br><span class="line">        self.decoder = <span class="keyword">None</span></span><br><span class="line">        self.h_projection = <span class="keyword">None</span></span><br><span class="line">        self.c_projection = <span class="keyword">None</span></span><br><span class="line">        self.att_projection = <span class="keyword">None</span></span><br><span class="line">        self.combined_output_projection = <span class="keyword">None</span></span><br><span class="line">        self.target_vocab_projection = <span class="keyword">None</span></span><br><span class="line">        self.dropout = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">### YOUR CODE HERE (~8 Lines)</span></span><br><span class="line">        <span class="comment">### TODO - Initialize the following variables:</span></span><br><span class="line">        <span class="comment">###     self.encoder (Bidirectional LSTM with bias)</span></span><br><span class="line">        <span class="comment">###     self.decoder (LSTM Cell with bias)</span></span><br><span class="line">        <span class="comment">###     self.h_projection (Linear Layer with no bias), called W_&#123;h&#125; in the PDF.</span></span><br><span class="line">        <span class="comment">###     self.c_projection (Linear Layer with no bias), called W_&#123;c&#125; in the PDF.</span></span><br><span class="line">        <span class="comment">###     self.att_projection (Linear Layer with no bias), called W_&#123;attProj&#125; in the PDF.</span></span><br><span class="line">        <span class="comment">###     self.combined_output_projection (Linear Layer with no bias), called W_&#123;u&#125; in the PDF.</span></span><br><span class="line">        <span class="comment">###     self.target_vocab_projection (Linear Layer with no bias), called W_&#123;vocab&#125; in the PDF.</span></span><br><span class="line">        <span class="comment">###     self.dropout (Dropout Layer)</span></span><br><span class="line">        <span class="comment">###</span></span><br><span class="line">        <span class="comment">### Use the following docs to properly initialize these variables:</span></span><br><span class="line">        <span class="comment">###     LSTM:</span></span><br><span class="line">        <span class="comment">###         https://pytorch.org/docs/stable/nn.html#torch.nn.LSTM</span></span><br><span class="line">        <span class="comment">###     LSTM Cell:</span></span><br><span class="line">        <span class="comment">###         https://pytorch.org/docs/stable/nn.html#torch.nn.LSTMCell</span></span><br><span class="line">        <span class="comment">###     Linear Layer:</span></span><br><span class="line">        <span class="comment">###         https://pytorch.org/docs/stable/nn.html#torch.nn.Linear</span></span><br><span class="line">        <span class="comment">###     Dropout Layer:</span></span><br><span class="line">        <span class="comment">###         https://pytorch.org/docs/stable/nn.html#torch.nn.Dropout</span></span><br><span class="line"></span><br><span class="line">        self.encoder = nn.LSTM(embed_size, self.hidden_size, dropout=self.dropout_rate,bias = <span class="keyword">True</span>, bidirectional = <span class="keyword">True</span>)</span><br><span class="line">        self.decoder = nn.LSTMCell(embed_size + self.hidden_size, self.hidden_size, bias = <span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">        self.h_projection = nn.Linear(<span class="number">2</span> * self.hidden_size, self.hidden_size, bias = <span class="keyword">False</span>)</span><br><span class="line">        self.c_projection = nn.Linear(<span class="number">2</span> * self.hidden_size, self.hidden_size, bias = <span class="keyword">False</span>)</span><br><span class="line">        self.att_projection = nn.Linear(<span class="number">2</span> * self.hidden_size, self.hidden_size, bias = <span class="keyword">False</span>)</span><br><span class="line">        self.combined_output_projection = nn.Linear(<span class="number">3</span> * self.hidden_size, self.hidden_size, bias=<span class="keyword">False</span>)</span><br><span class="line">        self.target_vocab_projection = nn.Linear(self.hidden_size, self.model_embeddings.target.weight.shape[<span class="number">0</span>])</span><br><span class="line">        self.dropout = nn.Dropout(p = self.dropout_rate)</span><br><span class="line"></span><br><span class="line">        <span class="comment">### END YOUR CODE</span></span><br></pre></td></tr></table></figure>
<h3 id="Encode"><a href="#Encode" class="headerlink" title="Encode"></a>Encode</h3><p>Given a sentence in the source language, we look up the word embeddings from an embeddings matrix, yielding $x_1,\cdots,x_m | x_i \in \mathbb{R}^{e x 1}$,  where m is the length of the source sentence and e is the embedding size. We feed these embeddings to the bidirectional Encoder, yielding hidden states and cell states for both the forwards (-&gt;) and backwards (&lt;-) LSTMs. The forwards and backwards versions are concatenated<br>to give hidden states $h_i^{enc}$ and cell states $c_i^{enc}$</p>
<script type="math/tex; mode=display">
\begin{align}
& h_i^{enc} = \left [  \overleftarrow{h_i^{enc}}; \overrightarrow{h_i^{enc}} \right ] \qquad \text{where} \qquad h_i^{enc} \in \mathbb{R}^{2h x 1},  \overleftarrow{h_i^{enc}}, \overrightarrow{h_i^{enc}} \in \mathbb{R}^{h x 1}  \qquad 1 \leq i \leq m  \\
& c_i^{enc} = \left [  \overleftarrow{c_i^{enc}}; \overrightarrow{c_i^{enc}} \right ] \qquad \text{where}  \qquad c_i^{enc} \in \mathbb{R}^{2h x 1},  \overleftarrow{c_i^{enc}}, \overrightarrow{c_i^{enc}} \in \mathbb{R}^{h x 1}  \qquad 1 \leq i \leq m \\ 
\end{align}</script><p>We then initialize the Decoder’s first hidden state $h_0^{dec}$ and cell state $c_0^{dec}$ with a linear projection of the Encoder’s final hidden state and final cell state</p>
<script type="math/tex; mode=display">
\begin{align}
& h_0^{dec} = W_h \left [  \overleftarrow{h_1^{enc}}; \overrightarrow{h_m^{enc}} \right ] \qquad \text{where} \qquad h_0^{dec} \in \mathbb{R}^{h x 1},  W_h \in \mathbb{R}^{h x 2h} \\
& c_0^{dec} = W_h \left [  \overleftarrow{c_1^{enc}}; \overrightarrow{c_m^{enc}} \right ] \qquad \text{where} \qquad c_0^{dec} \in \mathbb{R}^{h x 1},  W_c \in \mathbb{R}^{h x 2h} \\
\end{align}</script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span><span class="params">(self, source_padded: torch.Tensor, source_lengths: List[int])</span> -&gt; Tuple[torch.Tensor, Tuple[torch.Tensor, torch.Tensor]]:</span></span><br><span class="line">        <span class="string">""" Apply the encoder to source sentences to obtain encoder hidden states.</span></span><br><span class="line"><span class="string">            Additionally, take the final states of the encoder and project them to obtain initial states for decoder.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @param source_padded (Tensor): Tensor of padded source sentences with shape (src_len, b), where</span></span><br><span class="line"><span class="string">                                        b = batch_size, src_len = maximum source sentence length. Note that </span></span><br><span class="line"><span class="string">                                       these have already been sorted in order of longest to shortest sentence.</span></span><br><span class="line"><span class="string">        @param source_lengths (List[int]): List of actual lengths for each of the source sentences in the batch</span></span><br><span class="line"><span class="string">        @returns enc_hiddens (Tensor): Tensor of hidden units with shape (b, src_len, h*2), where</span></span><br><span class="line"><span class="string">                                        b = batch size, src_len = maximum source sentence length, h = hidden size.</span></span><br><span class="line"><span class="string">        @returns dec_init_state (tuple(Tensor, Tensor)): Tuple of tensors representing the decoder's initial</span></span><br><span class="line"><span class="string">                                                hidden state and cell.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        enc_hiddens, dec_init_state = <span class="keyword">None</span>, <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">### YOUR CODE HERE (~ 8 Lines)</span></span><br><span class="line">        <span class="comment">### <span class="doctag">TODO:</span></span></span><br><span class="line">        <span class="comment">###     1. Construct Tensor `X` of source sentences with shape (src_len, b, e) using the source model embeddings.</span></span><br><span class="line">        <span class="comment">###         src_len = maximum source sentence length, b = batch size, e = embedding size. Note</span></span><br><span class="line">        <span class="comment">###         that there is no initial hidden state or cell for the decoder.</span></span><br><span class="line">        <span class="comment">###     2. Compute `enc_hiddens`, `last_hidden`, `last_cell` by applying the encoder to `X`.</span></span><br><span class="line">        <span class="comment">###         - Before you can apply the encoder, you need to apply the `pack_padded_sequence` function to X.</span></span><br><span class="line">        <span class="comment">###         - After you apply the encoder, you need to apply the `pad_packed_sequence` function to enc_hiddens.</span></span><br><span class="line">        <span class="comment">###         - Note that the shape of the tensor returned by the encoder is (src_len b, h*2) and we want to</span></span><br><span class="line">        <span class="comment">###           return a tensor of shape (b, src_len, h*2) as `enc_hiddens`.</span></span><br><span class="line">        <span class="comment">###     3. Compute `dec_init_state` = (init_decoder_hidden, init_decoder_cell):</span></span><br><span class="line">        <span class="comment">###         - `init_decoder_hidden`:</span></span><br><span class="line">        <span class="comment">###             `last_hidden` is a tensor shape (2, b, h). The first dimension corresponds to forwards and backwards.</span></span><br><span class="line">        <span class="comment">###             Concatenate the forwards and backwards tensors to obtain a tensor shape (b, 2*h).</span></span><br><span class="line">        <span class="comment">###             Apply the h_projection layer to this in order to compute init_decoder_hidden.</span></span><br><span class="line">        <span class="comment">###             This is h_0^&#123;dec&#125; in the PDF. Here b = batch size, h = hidden size</span></span><br><span class="line">        <span class="comment">###         - `init_decoder_cell`:</span></span><br><span class="line">        <span class="comment">###             `last_cell` is a tensor shape (2, b, h). The first dimension corresponds to forwards and backwards.</span></span><br><span class="line">        <span class="comment">###             Concatenate the forwards and backwards tensors to obtain a tensor shape (b, 2*h).</span></span><br><span class="line">        <span class="comment">###             Apply the c_projection layer to this in order to compute init_decoder_cell.</span></span><br><span class="line">        <span class="comment">###             This is c_0^&#123;dec&#125; in the PDF. Here b = batch size, h = hidden size</span></span><br><span class="line">        <span class="comment">###</span></span><br><span class="line">        <span class="comment">### See the following docs, as you may need to use some of the following functions in your implementation:</span></span><br><span class="line">        <span class="comment">###     Pack the padded sequence X before passing to the encoder:</span></span><br><span class="line">        <span class="comment">###         https://pytorch.org/docs/stable/nn.html#torch.nn.utils.rnn.pack_padded_sequence</span></span><br><span class="line">        <span class="comment">###     Pad the packed sequence, enc_hiddens, returned by the encoder:</span></span><br><span class="line">        <span class="comment">###         https://pytorch.org/docs/stable/nn.html#torch.nn.utils.rnn.pad_packed_sequence</span></span><br><span class="line">        <span class="comment">###     Tensor Concatenation:</span></span><br><span class="line">        <span class="comment">###         https://pytorch.org/docs/stable/torch.html#torch.cat</span></span><br><span class="line">        <span class="comment">###     Tensor Permute:</span></span><br><span class="line">        <span class="comment">###         https://pytorch.org/docs/stable/tensors.html#torch.Tensor.permute</span></span><br><span class="line"></span><br><span class="line">        X = self.model_embeddings.source(source_padded)</span><br><span class="line">        output, (h_enc, c_enc) = self.encoder(</span><br><span class="line">            pack_padded_sequence(X, source_lengths))</span><br><span class="line">        enc_hiddens,sequence_length = pad_packed_sequence(output, batch_first = <span class="keyword">True</span>) <span class="comment"># output of shape (batch, seq_len, num_directions * hidden_size)</span></span><br><span class="line">        h_0_dec = self.h_projection(torch.cat((h_enc[<span class="number">0</span>,:],h_enc[<span class="number">1</span>,:]), <span class="number">1</span>))</span><br><span class="line">        c_0_dec = self.c_projection(torch.cat((c_enc[<span class="number">0</span>,:],c_enc[<span class="number">1</span>,:]), <span class="number">1</span>))</span><br><span class="line">        dec_init_state = (h_0_dec,c_0_dec)</span><br><span class="line"></span><br><span class="line">        <span class="comment">### END YOUR CODE</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> enc_hiddens, dec_init_state</span><br></pre></td></tr></table></figure>
<h3 id="Decode"><a href="#Decode" class="headerlink" title="Decode"></a>Decode</h3><p>With the Decoder initialized, we must now feed it a matching sentence in the target language. On the $t^{th}$ step, we look up the embedding for the $t^{th}$ word, $y_t \in \mathbb{R}^{e x 1}$, we then concatenate $y_t$ with the combined-output vector $O_{t-1} \in \mathbb{R}^{h x 1}$ from the previous step to produce $\bar{y_t} \in \mathbb{R}^{(e+h) x 1}$. Note that for the first target word $O_0$ is zero-vector. We then fedd $\bar{y_t}$ as input to the Decoder LSTM.</p>
<script type="math/tex; mode=display">h_t^{dec}, c_t^{dec} = Decoder(\bar{y_t},h_{t-1}^{dec}, c_{t-1}^{dec} ) \quad \text{where} \quad h_t^{dec} \in \mathbb{R}^{h x 1}</script><p><strong>We then use $h_t^{dec}$ to compute multiplicative attention ovev $h_t^{enc}, \cdots, h_m^{enc}$</strong></p>
<script type="math/tex; mode=display">\begin{align}
& e_{t_i} = (h_t^{dec})^{T}W_{attProj}h_i^{enc} \quad \text{where} \quad e_t \in \mathbb{R}^{m x 1}, W_{attProj} \in \mathbb{R}^{h x 2h} \\ 
& \alpha_{t} = Softmax(e_t) \quad \text{where} \quad \alpha_t \in \mathbb{R}^{m x 1} \\ 
& a_t = \sum_i^{m} \alpha_{t,i}h_i^{enc}  \quad \text{where} \quad a_t \in \mathbb{R}^{2h x 1}\\
\end{align}</script><p>We now <strong>concatenate</strong> the attention output $a_t$ with the decoder hidden state $h_t^{dec}$ and pass this through a linear layer, Tanh, and Dropout to attain the <strong>combined-output vector</strong> $o_t$</p>
<script type="math/tex; mode=display">\begin{align}
& u_t = \left[ a_t; h_t^{dec} \right ]  \quad \text{where} \quad u_t \in \mathbb{R}^{3h x 1} \\
& v_t = W_u u_t \quad \text{where} \quad v_t \in \mathbb{R}^{h x 1}, W_u \in \mathbb{R}^{h x 1} \\
& O_t = Dropout(Tanh(v_t)) \quad \text{where} \quad o_t \in \mathbb{R}^{h x 1} \\
\end{align}</script><p>Then, we produce a probability distribution $P_t$ over target words at the $t^{th}$ timestep:</p>
<script type="math/tex; mode=display">P_t = Softmax(W_{vocab}O_t)  \quad \text{where} \quad P_t \in \mathbb{R}^{v_t x h}</script><p>Here, $V_t$ is the size of  the target vocabulary. Finally, to train the network we then compute the softmax cross entropy loss between $P_t$ and $g_t$, where $g_t$ is the 1-hot vector of the target word at timestep t:</p>
<script type="math/tex; mode=display">J(\theta) = CE(P_t, g_t)</script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(self, enc_hiddens: torch.Tensor, enc_masks: torch.Tensor,</span></span></span><br><span class="line"><span class="function"><span class="params">                dec_init_state: Tuple[torch.Tensor, torch.Tensor], target_padded: torch.Tensor)</span> -&gt; torch.Tensor:</span></span><br><span class="line">        <span class="string">"""Compute combined output vectors for a batch.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @param enc_hiddens (Tensor): Hidden states (b, src_len, h*2), where</span></span><br><span class="line"><span class="string">                                     b = batch size, src_len = maximum source sentence length, h = hidden size.</span></span><br><span class="line"><span class="string">        @param enc_masks (Tensor): Tensor of sentence masks (b, src_len), where</span></span><br><span class="line"><span class="string">                                     b = batch size, src_len = maximum source sentence length.</span></span><br><span class="line"><span class="string">        @param dec_init_state (tuple(Tensor, Tensor)): Initial state and cell for decoder</span></span><br><span class="line"><span class="string">        @param target_padded (Tensor): Gold-standard padded target sentences (tgt_len, b), where</span></span><br><span class="line"><span class="string">                                       tgt_len = maximum target sentence length, b = batch size. </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @returns combined_outputs (Tensor): combined output tensor  (tgt_len, b,  h), where</span></span><br><span class="line"><span class="string">                                        tgt_len = maximum target sentence length, b = batch_size,  h = hidden size</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># Chop of the &lt;END&gt; token for max length sentences.</span></span><br><span class="line">        target_padded = target_padded[:<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Initialize the decoder state (hidden and cell)</span></span><br><span class="line">        dec_state = dec_init_state</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Initialize previous combined output vector o_&#123;t-1&#125; as zero</span></span><br><span class="line">        batch_size = enc_hiddens.size(<span class="number">0</span>)</span><br><span class="line">        o_prev = torch.zeros(batch_size, self.hidden_size, device=self.device)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Initialize a list we will use to collect the combined output o_t on each step</span></span><br><span class="line">        combined_outputs = []</span><br><span class="line"></span><br><span class="line">        <span class="comment">### YOUR CODE HERE (~9 Lines)</span></span><br><span class="line">        <span class="comment">### <span class="doctag">TODO:</span></span></span><br><span class="line">        <span class="comment">###     1. Apply the attention projection layer to `enc_hiddens` to obtain `enc_hiddens_proj`,</span></span><br><span class="line">        <span class="comment">###         which should be shape (b, src_len, h),</span></span><br><span class="line">        <span class="comment">###         where b = batch size, src_len = maximum source length, h = hidden size.</span></span><br><span class="line">        <span class="comment">###         This is applying W_&#123;attProj&#125; to h^enc, as described in the PDF.</span></span><br><span class="line">        <span class="comment">###     2. Construct tensor `Y` of target sentences with shape (tgt_len, b, e) using the target model embeddings.</span></span><br><span class="line">        <span class="comment">###         where tgt_len = maximum target sentence length, b = batch size, e = embedding size.</span></span><br><span class="line">        <span class="comment">###     3. Use the torch.split function to iterate over the time dimension of Y.</span></span><br><span class="line">        <span class="comment">###         Within the loop, this will give you Y_t of shape (1, b, e) where b = batch size, e = embedding size.</span></span><br><span class="line">        <span class="comment">###             - Squeeze Y_t into a tensor of dimension (b, e). </span></span><br><span class="line">        <span class="comment">###             - Construct Ybar_t by concatenating Y_t with o_prev.</span></span><br><span class="line">        <span class="comment">###             - Use the step function to compute the the Decoder's next (cell, state) values</span></span><br><span class="line">        <span class="comment">###               as well as the new combined output o_t.</span></span><br><span class="line">        <span class="comment">###             - Append o_t to combined_outputs</span></span><br><span class="line">        <span class="comment">###             - Update o_prev to the new o_t.</span></span><br><span class="line">        <span class="comment">###     4. Use torch.stack to convert combined_outputs from a list length tgt_len of</span></span><br><span class="line">        <span class="comment">###         tensors shape (b, h), to a single tensor shape (tgt_len, b, h)</span></span><br><span class="line">        <span class="comment">###         where tgt_len = maximum target sentence length, b = batch size, h = hidden size.</span></span><br><span class="line">        <span class="comment">###</span></span><br><span class="line">        <span class="comment">### Note:</span></span><br><span class="line">        <span class="comment">###    - When using the squeeze() function make sure to specify the dimension you want to squeeze</span></span><br><span class="line">        <span class="comment">###      over. Otherwise, you will remove the batch dimension accidentally, if batch_size = 1.</span></span><br><span class="line">        <span class="comment">###   </span></span><br><span class="line">        <span class="comment">### Use the following docs to implement this functionality:</span></span><br><span class="line">        <span class="comment">###     Zeros Tensor:</span></span><br><span class="line">        <span class="comment">###         https://pytorch.org/docs/stable/torch.html#torch.zeros</span></span><br><span class="line">        <span class="comment">###     Tensor Splitting (iteration):</span></span><br><span class="line">        <span class="comment">###         https://pytorch.org/docs/stable/torch.html#torch.split</span></span><br><span class="line">        <span class="comment">###     Tensor Dimension Squeezing:</span></span><br><span class="line">        <span class="comment">###         https://pytorch.org/docs/stable/torch.html#torch.squeeze</span></span><br><span class="line">        <span class="comment">###     Tensor Concatenation:</span></span><br><span class="line">        <span class="comment">###         https://pytorch.org/docs/stable/torch.html#torch.cat</span></span><br><span class="line">        <span class="comment">###     Tensor Stacking:</span></span><br><span class="line">        <span class="comment">###         https://pytorch.org/docs/stable/torch.html#torch.stack</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#   (b, src_len, h*2) * [2h , h]  = (b, src_len, h)</span></span><br><span class="line">        enc_hiddens_proj = self.att_projection(enc_hiddens)</span><br><span class="line">        <span class="comment">#   (tgt_len, b, e)</span></span><br><span class="line">        Y = self.model_embeddings.target(target_padded)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> Y_t <span class="keyword">in</span> torch.split(Y, split_size_or_sections = <span class="number">1</span>, dim = <span class="number">0</span>):</span><br><span class="line">            squeezed_Y_t = torch.squeeze(Y_t) <span class="comment"># (b, e) + (b,h) = (b,e+h)</span></span><br><span class="line">            Ybar_t = torch.cat((o_prev,squeezed_Y_t), dim = <span class="number">1</span>)</span><br><span class="line">            dec_state, o_t, _ = self.step(Ybar_t,dec_state,enc_hiddens,enc_hiddens_proj,enc_masks)</span><br><span class="line">            combined_outputs.append(o_t)</span><br><span class="line">            o_prev = o_t</span><br><span class="line"></span><br><span class="line">        <span class="comment">#  (b, h) -&gt; (tgt_len, b, h)</span></span><br><span class="line">        combined_outputs = torch.stack(combined_outputs,dim = <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">### END YOUR CODE</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> combined_outputs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">step</span><span class="params">(self, Ybar_t: torch.Tensor,</span></span></span><br><span class="line"><span class="function"><span class="params">            dec_state: Tuple[torch.Tensor, torch.Tensor],</span></span></span><br><span class="line"><span class="function"><span class="params">            enc_hiddens: torch.Tensor,</span></span></span><br><span class="line"><span class="function"><span class="params">            enc_hiddens_proj: torch.Tensor,</span></span></span><br><span class="line"><span class="function"><span class="params">            enc_masks: torch.Tensor)</span> -&gt; Tuple[Tuple, torch.Tensor, torch.Tensor]:</span></span><br><span class="line">        <span class="string">""" Compute one forward step of the LSTM decoder, including the attention computation.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @param Ybar_t (Tensor): Concatenated Tensor of [Y_t o_prev], with shape (b, e + h). The input for the decoder,</span></span><br><span class="line"><span class="string">                                where b = batch size, e = embedding size, h = hidden size.</span></span><br><span class="line"><span class="string">        @param dec_state (tuple(Tensor, Tensor)): Tuple of tensors both with shape (b, h), where b = batch size, h = hidden size.</span></span><br><span class="line"><span class="string">                First tensor is decoder's prev hidden state, second tensor is decoder's prev cell.</span></span><br><span class="line"><span class="string">        @param enc_hiddens (Tensor): Encoder hidden states Tensor, with shape (b, src_len, h * 2), where b = batch size,</span></span><br><span class="line"><span class="string">                                    src_len = maximum source length, h = hidden size.</span></span><br><span class="line"><span class="string">        @param enc_hiddens_proj (Tensor): Encoder hidden states Tensor, projected from (h * 2) to h. Tensor is with shape (b, src_len, h),</span></span><br><span class="line"><span class="string">                                    where b = batch size, src_len = maximum source length, h = hidden size.</span></span><br><span class="line"><span class="string">        @param enc_masks (Tensor): Tensor of sentence masks shape (b, src_len),</span></span><br><span class="line"><span class="string">                                    where b = batch size, src_len is maximum source length. </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @returns dec_state (tuple (Tensor, Tensor)): Tuple of tensors both shape (b, h), where b = batch size, h = hidden size.</span></span><br><span class="line"><span class="string">                First tensor is decoder's new hidden state, second tensor is decoder's new cell.</span></span><br><span class="line"><span class="string">        @returns combined_output (Tensor): Combined output Tensor at timestep t, shape (b, h), where b = batch size, h = hidden size.</span></span><br><span class="line"><span class="string">        @returns e_t (Tensor): Tensor of shape (b, src_len). It is attention scores distribution.</span></span><br><span class="line"><span class="string">                                Note: You will not use this outside of this function.</span></span><br><span class="line"><span class="string">                                      We are simply returning this value so that we can sanity check</span></span><br><span class="line"><span class="string">                                      your implementation.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        combined_output = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">### YOUR CODE HERE (~3 Lines)</span></span><br><span class="line">        <span class="comment">### <span class="doctag">TODO:</span></span></span><br><span class="line">        <span class="comment">###     1. Apply the decoder to `Ybar_t` and `dec_state`to obtain the new dec_state.</span></span><br><span class="line">        <span class="comment">###     2. Split dec_state into its two parts (dec_hidden, dec_cell)</span></span><br><span class="line">        <span class="comment">###     3. Compute the attention scores e_t, a Tensor shape (b, src_len). </span></span><br><span class="line">        <span class="comment">###        Note: b = batch_size, src_len = maximum source length, h = hidden size.</span></span><br><span class="line">        <span class="comment">###</span></span><br><span class="line">        <span class="comment">###       Hints:</span></span><br><span class="line">        <span class="comment">###         - dec_hidden is shape (b, h) and corresponds to h^dec_t in the PDF (batched)</span></span><br><span class="line">        <span class="comment">###         - enc_hiddens_proj is shape (b, src_len, h) and corresponds to W_&#123;attProj&#125; h^enc (batched).</span></span><br><span class="line">        <span class="comment">###         - Use batched matrix multiplication (torch.bmm) to compute e_t.</span></span><br><span class="line">        <span class="comment">###         - To get the tensors into the right shapes for bmm, you will need to do some squeezing and unsqueezing.</span></span><br><span class="line">        <span class="comment">###         - When using the squeeze() function make sure to specify the dimension you want to squeeze</span></span><br><span class="line">        <span class="comment">###             over. Otherwise, you will remove the batch dimension accidentally, if batch_size = 1.</span></span><br><span class="line">        <span class="comment">###</span></span><br><span class="line">        <span class="comment">### Use the following docs to implement this functionality:</span></span><br><span class="line">        <span class="comment">###     Batch Multiplication:</span></span><br><span class="line">        <span class="comment">###        https://pytorch.org/docs/stable/torch.html#torch.bmm</span></span><br><span class="line">        <span class="comment">###     Tensor Unsqueeze:</span></span><br><span class="line">        <span class="comment">###         https://pytorch.org/docs/stable/torch.html#torch.unsqueeze</span></span><br><span class="line">        <span class="comment">###     Tensor Squeeze:</span></span><br><span class="line">        <span class="comment">###         https://pytorch.org/docs/stable/torch.html#torch.squeeze</span></span><br><span class="line"></span><br><span class="line">        dec_state = self.decoder(Ybar_t, dec_state)</span><br><span class="line">        h_t_dec, c_t_dec = dec_state</span><br><span class="line">        <span class="comment">#  enc_hiddens_proj(b, src_len, h) * h_t_dec (b,h,1) = (b,src_len)</span></span><br><span class="line">        e_t = torch.squeeze(torch.bmm(enc_hiddens_proj, torch.unsqueeze(h_t_dec,<span class="number">2</span>)),<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">### END YOUR CODE</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Set e_t to -inf where enc_masks has 1</span></span><br><span class="line">        <span class="keyword">if</span> enc_masks <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            e_t.data.masked_fill_(enc_masks.byte(), -float(<span class="string">'inf'</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment">### YOUR CODE HERE (~6 Lines)</span></span><br><span class="line">        <span class="comment">### <span class="doctag">TODO:</span></span></span><br><span class="line">        <span class="comment">###     1. Apply softmax to e_t to yield alpha_t</span></span><br><span class="line">        <span class="comment">###     2. Use batched matrix multiplication between alpha_t and enc_hiddens to obtain the</span></span><br><span class="line">        <span class="comment">###         attention output vector, a_t.</span></span><br><span class="line">        <span class="comment">#$$     Hints:</span></span><br><span class="line">        <span class="comment">###           - alpha_t is shape (b, src_len)</span></span><br><span class="line">        <span class="comment">###           - enc_hiddens is shape (b, src_len, 2h)</span></span><br><span class="line">        <span class="comment">###           - a_t should be shape (b, 2h)</span></span><br><span class="line">        <span class="comment">###           - You will need to do some squeezing and unsqueezing.</span></span><br><span class="line">        <span class="comment">###     Note: b = batch size, src_len = maximum source length, h = hidden size.</span></span><br><span class="line">        <span class="comment">###</span></span><br><span class="line">        <span class="comment">###     3. Concatenate dec_hidden with a_t to compute tensor U_t</span></span><br><span class="line">        <span class="comment">###     4. Apply the combined output projection layer to U_t to compute tensor V_t</span></span><br><span class="line">        <span class="comment">###     5. Compute tensor O_t by first applying the Tanh function and then the dropout layer.</span></span><br><span class="line">        <span class="comment">###</span></span><br><span class="line">        <span class="comment">### Use the following docs to implement this functionality:</span></span><br><span class="line">        <span class="comment">###     Softmax:</span></span><br><span class="line">        <span class="comment">###         https://pytorch.org/docs/stable/nn.html#torch.nn.functional.softmax</span></span><br><span class="line">        <span class="comment">###     Batch Multiplication:</span></span><br><span class="line">        <span class="comment">###        https://pytorch.org/docs/stable/torch.html#torch.bmm</span></span><br><span class="line">        <span class="comment">###     Tensor View:</span></span><br><span class="line">        <span class="comment">###         https://pytorch.org/docs/stable/tensors.html#torch.Tensor.view</span></span><br><span class="line">        <span class="comment">###     Tensor Concatenation:</span></span><br><span class="line">        <span class="comment">###         https://pytorch.org/docs/stable/torch.html#torch.cat</span></span><br><span class="line">        <span class="comment">###     Tanh:</span></span><br><span class="line">        <span class="comment">###         https://pytorch.org/docs/stable/torch.html#torch.tanh</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># (b,src_len)</span></span><br><span class="line">        alpha_t = nn.functional.softmax(e_t, dim = <span class="number">1</span>) </span><br><span class="line">        <span class="comment"># alpha_t(b,src_len) - (b,1,src_len) * enc_hiddens(b, src_len, h * 2) = (b, 1, h * 2) -&gt; (b,2h)</span></span><br><span class="line">        a_t = torch.squeeze(torch.bmm(torch.unsqueeze(alpha_t,<span class="number">1</span>),enc_hiddens),<span class="number">1</span>)</span><br><span class="line">        <span class="comment">#(b,2h) + (b,h)</span></span><br><span class="line">        U_t = torch.cat((a_t,h_t_dec), dim = <span class="number">1</span>)</span><br><span class="line">        V_t = self.combined_output_projection(U_t)</span><br><span class="line">        O_t = self.dropout(nn.functional.tanh(V_t))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">### END YOUR CODE</span></span><br><span class="line">        combined_output = O_t</span><br><span class="line">        <span class="keyword">return</span> dec_state, combined_output, e_t</span><br></pre></td></tr></table></figure>
<h3 id="Helpers"><a href="#Helpers" class="headerlink" title="Helpers"></a>Helpers</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, source: List[List[str]], target: List[List[str]])</span> -&gt; torch.Tensor:</span></span><br><span class="line">        <span class="string">""" Take a mini-batch of source and target sentences, compute the log-likelihood of</span></span><br><span class="line"><span class="string">        target sentences under the language models learned by the NMT system.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @param source (List[List[str]]): list of source sentence tokens</span></span><br><span class="line"><span class="string">        @param target (List[List[str]]): list of target sentence tokens, wrapped by `&lt;s&gt;` and `&lt;/s&gt;`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @returns scores (Tensor): a variable/tensor of shape (b, ) representing the</span></span><br><span class="line"><span class="string">                                    log-likelihood of generating the gold-standard target sentence for</span></span><br><span class="line"><span class="string">                                    each example in the input batch. Here b = batch size.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># Compute sentence lengths</span></span><br><span class="line">        source_lengths = [len(s) <span class="keyword">for</span> s <span class="keyword">in</span> source]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Convert list of lists into tensors</span></span><br><span class="line">        source_padded = self.vocab.src.to_input_tensor(source, device=self.device)   <span class="comment"># Tensor: (src_len, b)</span></span><br><span class="line">        target_padded = self.vocab.tgt.to_input_tensor(target, device=self.device)   <span class="comment"># Tensor: (tgt_len, b)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">###     Run the network forward:</span></span><br><span class="line">        <span class="comment">###     1. Apply the encoder to `source_padded` by calling `self.encode()`</span></span><br><span class="line">        <span class="comment">###     2. Generate sentence masks for `source_padded` by calling `self.generate_sent_masks()`</span></span><br><span class="line">        <span class="comment">###     3. Apply the decoder to compute combined-output by calling `self.decode()`</span></span><br><span class="line">        <span class="comment">###     4. Compute log probability distribution over the target vocabulary using the</span></span><br><span class="line">        <span class="comment">###        combined_outputs returned by the `self.decode()` function.</span></span><br><span class="line"></span><br><span class="line">        enc_hiddens, dec_init_state = self.encode(source_padded, source_lengths)</span><br><span class="line">        enc_masks = self.generate_sent_masks(enc_hiddens, source_lengths)</span><br><span class="line">        combined_outputs = self.decode(enc_hiddens, enc_masks, dec_init_state, target_padded)</span><br><span class="line">        P = F.log_softmax(self.target_vocab_projection(combined_outputs), dim=<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Zero out, probabilities for which we have nothing in the target text</span></span><br><span class="line">        target_masks = (target_padded != self.vocab.tgt[<span class="string">'&lt;pad&gt;'</span>]).float()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Compute log probability of generating true target words</span></span><br><span class="line">        target_gold_words_log_prob = torch.gather(P, index=target_padded[<span class="number">1</span>:].unsqueeze(<span class="number">-1</span>), dim=<span class="number">-1</span>).squeeze(<span class="number">-1</span>) * target_masks[<span class="number">1</span>:]</span><br><span class="line">        scores = target_gold_words_log_prob.sum(dim=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> scores</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">CS224N 2018-19: Homework 4</span></span><br><span class="line"><span class="string">model_embeddings.py: Embeddings for the NMT model</span></span><br><span class="line"><span class="string">Pencheng Yin &lt;pcyin@cs.cmu.edu&gt;</span></span><br><span class="line"><span class="string">Sahil Chopra &lt;schopra8@stanford.edu&gt;</span></span><br><span class="line"><span class="string">Anand Dhoot &lt;anandd@stanford.edu&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelEmbeddings</span><span class="params">(nn.Module)</span>:</span> </span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Class that converts input words to their embeddings.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, embed_size, vocab)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Init the Embedding layers.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @param embed_size (int): Embedding size (dimensionality)</span></span><br><span class="line"><span class="string">        @param vocab (Vocab): Vocabulary object containing src and tgt languages</span></span><br><span class="line"><span class="string">                              See vocab.py for documentation.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        super(ModelEmbeddings, self).__init__()</span><br><span class="line">        self.embed_size = embed_size</span><br><span class="line"></span><br><span class="line">        <span class="comment"># default values</span></span><br><span class="line">        self.source = <span class="keyword">None</span></span><br><span class="line">        self.target = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        src_pad_token_idx = vocab.src[<span class="string">'&lt;pad&gt;'</span>]</span><br><span class="line">        tgt_pad_token_idx = vocab.tgt[<span class="string">'&lt;pad&gt;'</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment">### YOUR CODE HERE (~2 Lines)</span></span><br><span class="line">        <span class="comment">### TODO - Initialize the following variables:</span></span><br><span class="line">        <span class="comment">###     self.source (Embedding Layer for source language)</span></span><br><span class="line">        <span class="comment">###     self.target (Embedding Layer for target langauge)</span></span><br><span class="line">        <span class="comment">###</span></span><br><span class="line">        <span class="comment">### Note:</span></span><br><span class="line">        <span class="comment">###     1. `vocab` object contains two vocabularies:</span></span><br><span class="line">        <span class="comment">###            `vocab.src` for source</span></span><br><span class="line">        <span class="comment">###            `vocab.tgt` for target</span></span><br><span class="line">        <span class="comment">###     2. You can get the length of a specific vocabulary by running:</span></span><br><span class="line">        <span class="comment">###             `len(vocab.&lt;specific_vocabulary&gt;)`</span></span><br><span class="line">        <span class="comment">###     3. Remember to include the padding token for the specific vocabulary</span></span><br><span class="line">        <span class="comment">###        when creating your Embedding.</span></span><br><span class="line">        <span class="comment">###</span></span><br><span class="line">        <span class="comment">### Use the following docs to properly initialize these variables:</span></span><br><span class="line">        <span class="comment">###     Embedding Layer:</span></span><br><span class="line">        <span class="comment">###         https://pytorch.org/docs/stable/nn.html#torch.nn.Embedding</span></span><br><span class="line">        self.source = nn.Embedding(len(vocab.src),self.embed_size, padding_idx = src_pad_token_idx)</span><br><span class="line">        self.target = nn.Embedding(len(vocab.tgt), self.embed_size, padding_idx = tgt_pad_token_idx) </span><br><span class="line">        <span class="comment">### END YOUR CODE</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad_sents</span><span class="params">(sents, pad_token)</span>:</span></span><br><span class="line">    <span class="string">""" Pad list of sentences according to the longest sentence in the batch.</span></span><br><span class="line"><span class="string">    @param sents (list[list[str]]): list of sentences, where each sentence</span></span><br><span class="line"><span class="string">                                    is represented as a list of words</span></span><br><span class="line"><span class="string">    @param pad_token (str): padding token</span></span><br><span class="line"><span class="string">    @returns sents_padded (list[list[str]]): list of sentences where sentences shorter</span></span><br><span class="line"><span class="string">        than the max length sentence are padded out with the pad_token, such that</span></span><br><span class="line"><span class="string">        each sentences in the batch now has equal length.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    sents_padded = []</span><br><span class="line"></span><br><span class="line">    <span class="comment">### YOUR CODE HERE (~6 Lines)</span></span><br><span class="line">    max_sentence_len = max([len(s) <span class="keyword">for</span> s <span class="keyword">in</span> sents])</span><br><span class="line">    <span class="keyword">for</span> sent <span class="keyword">in</span> sents:</span><br><span class="line">        sents_padded.append(sent + [pad_token] * (max_sentence_len - len(sent)))</span><br><span class="line"></span><br><span class="line">    <span class="comment">### END YOUR CODE</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sents_padded</span><br></pre></td></tr></table></figure>
<h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><ol>
<li>course slides and notes from cs224n (<a href="http://web.stanford.edu/class/cs224n/" target="_blank" rel="noopener">http://web.stanford.edu/class/cs224n/</a>)</li>
</ol>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>cs224n</tag>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title>Gated RNN Units</title>
    <url>/Gated-RNN-Units/2019/12/15/</url>
    <content><![CDATA[<h2 id="GRU"><a href="#GRU" class="headerlink" title="GRU"></a>GRU</h2><p>RNNs have been found to perform better with the use of more complex units for activation. Here, we discuss the use of a gated activation function thereby modifying the RNN architecture. What motivates this? Well, although RNNs can theoretically capture long-term dependencies, they are very hard to actually train to do this. Gated recurrent units are designed in a manner to have more persistent memory thereby making it easier for RNNs to capture long-term dependencies. Let us see mathematically how a GRU uses $h_{t−1}$ and $x_t$ to generate the next hidden state ht. We will then dive into the intuition of this architecture.</p>
<script type="math/tex; mode=display">\begin{aligned}
& z_t = \sigma(W^{(z)}x_t + U^{(z)}h_{t-1}) & \text{(Update gate)} \\ 
& r_t = \sigma(W^{(r)}x_t + U^{(r)}h_{t-1})  & \text{(Reset gate)}\\ 
& \tilde{h_t} = tanh{r_t \circ Uh_{t-1} + Wx_t} & \text{(New memory)} \\ 
& h_t = (1 - z_t) \circ \tilde{h_t} + z_t \circ h_{t-1} & \text{(Hidden state)}
\end{aligned}</script><p>The above equations can be thought of a GRU’s four fundamental operational stages and they have intuitive interpretations that make this model much more intellectually.</p>
<ol>
<li><strong>Reset gate</strong>: controls what parts of previous hidden state are used to compute new content</li>
<li><strong>Update gate</strong>: controls what parts of hidden state are updated vs preserved</li>
<li><strong>New hidden state content</strong>: reset gate selects useful parts of prev hidden state. Use this and current input to compute new hidden content.</li>
<li><strong>Hidden state</strong>: update gate simultaneously controls what is kept from previous hidden state, and what is updated to new hidden state content</li>
</ol>
<h2 id="LSTM"><a href="#LSTM" class="headerlink" title="LSTM"></a>LSTM</h2><p>Long-Short-Term-Memories are another type of complex activation unit that differ a little from GRUs. The motivation for using these is similar to those for GRUs however the architecture of such units does differ. Let us first take a look at the mathematical formulation of LSTM units before diving into the intuition behind this design:</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="LSTM3.png" width="80%" height="80%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">slides of cs224n</div>
</center>

<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="LSTM1.png" width="80%" height="80%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Source: http://colah.github.io/posts/2015-08-Understanding-LSTMs/</div>
</center>

<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="LSTM2.png" width="80%" height="80%">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Source: http://colah.github.io/posts/2015-08-Understanding-LSTMs/</div>
</center>

<ol>
<li>The LSTM architecture makes it easier for the RNN to preserve information over many timesteps<ul>
<li>e.g. if the forget gate is set to remember everything on every timestep, then the info in the cell is preserved indefinitely</li>
<li>By contrast, it’s harder for vanilla RNN to learn a recurrent weight matrix Wh that preserves info in hidden state</li>
</ul>
</li>
<li>LSTM doesn’t guarantee that there is no vanishing/exploding gradient, but it does provide an easier way for the model to learn long-distance dependencies.</li>
</ol>
<h2 id="LSTM-vs-GRU"><a href="#LSTM-vs-GRU" class="headerlink" title="LSTM vs GRU"></a>LSTM vs GRU</h2><ul>
<li>Researchers have proposed many gated RNN variants, but LSTM and GRU are the most widely-used</li>
<li>The biggest difference is that GRU is quicker to compute and has fewer parameters</li>
<li>There is no conclusive evidence that one consistently performs better than the other</li>
<li>LSTM is a good default choice (especially if your data has particularly long dependencies, or you have lots of training data)</li>
<li><strong>Rule of thumb</strong>: start with LSTM, but switch to GRU if you want something more efficient</li>
</ul>
<h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><ol>
<li>course slides and notes from cs224n (<a href="http://web.stanford.edu/class/cs224n/" target="_blank" rel="noopener">http://web.stanford.edu/class/cs224n/</a>)</li>
</ol>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>cs224n</tag>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title>Human Factor</title>
    <url>/Human-Factor/2019/12/12/</url>
    <content><![CDATA[<h2 id="Course-Description"><a href="#Course-Description" class="headerlink" title="Course Description"></a>Course Description</h2><p> This course provides an introduction to human factors research and applications with emphasis on mature areas such as sensation and perception and manual control. <strong>Each class will introduce some concrete human factors problem and explore theory and application relevant to solving it</strong>. The term long conceptual design assignment is intended to help maintain focus on applications to design.</p>
<h2 id="Week1"><a href="#Week1" class="headerlink" title="Week1"></a>Week1</h2><p>Learning Objectives:</p>
<ol>
<li><strong>Theoretical understanding</strong>: Develop an understanding of the historical context, disciplines, and schools of thought that led to the development of the current field of human factors engineering/psychology; Develop an acquaintance with basic elements of <strong>scientific method</strong> and <strong>decision making</strong> including tests of hypotheses, dependent and independent variables, and inferential and descriptive use of statistics. </li>
<li><strong>Apply theory and skills</strong>: Use scientific methods including selection of measures and experimental tasks to evaluate the utility of a variety of pointing devices</li>
<li><strong>Proficiency in information related skills</strong>: Learn how to conduct a critical incident-based evaluation of an interactive system and to perform a standard task analysis for such a system</li>
</ol>
<h3 id="Research-Methods"><a href="#Research-Methods" class="headerlink" title="Research Methods"></a>Research Methods</h3><ol>
<li>IV &amp; DV</li>
<li>Cause vs. Chance</li>
<li>Descriptive vs. Inferential Statistics</li>
<li>Null hypothesis(H0) &amp; Experimentalhypothesis(H1)</li>
<li>Hypothesis Testing</li>
<li>Statistical Significance &amp; Practical Significance</li>
<li>Graph &amp; Interpetation</li>
</ol>
<h3 id="Goals-of-System-Evaluation"><a href="#Goals-of-System-Evaluation" class="headerlink" title="Goals of System Evaluation"></a>Goals of System Evaluation</h3><ul>
<li>Functionality<ul>
<li>Can it do what it is supposed to do?</li>
</ul>
</li>
<li>Usability<ul>
<li>Does it make the task easier?</li>
</ul>
</li>
<li>Diagnosticity<ul>
<li>Does it pinpoint what is wrong?</li>
</ul>
</li>
</ul>
<ol>
<li>User Population<ul>
<li>Who are they?</li>
<li>What are their goals?</li>
<li>What do they already know how to do?</li>
<li>Ask, don’t assume!</li>
</ul>
</li>
<li>Research Objectives<ul>
<li>Generalizability</li>
<li>Precision</li>
<li>Realism</li>
</ul>
</li>
<li>Usability Testing</li>
<li>Design an Experiment</li>
</ol>
<h3 id="Two-Models-for-Human-Factors"><a href="#Two-Models-for-Human-Factors" class="headerlink" title="Two Models for Human Factors"></a>Two Models for Human Factors</h3><ul>
<li>System component (computer)</li>
<li>Embedded organism (cybernetic)</li>
</ul>
<h3 id="Task-Analyses"><a href="#Task-Analyses" class="headerlink" title="Task Analyses"></a>Task Analyses</h3><p>为了研究如何使系统更好地和人的能力相匹配所进行的一种描述人机交互的方法</p>
<ul>
<li><strong>Sequential</strong><br>  任务的顺序和不同任务在时间序列上的关系<ul>
<li>Procedural</li>
<li>Therp</li>
</ul>
</li>
<li><strong>Hierarchical</strong><br>  描述一个大的任务如何由子任务组成以及这些任务又是如何联系起来体现其功能的<ul>
<li>HTA</li>
<li>GOMS</li>
<li>Cognitive</li>
</ul>
</li>
</ul>
<h4 id="Evaluation"><a href="#Evaluation" class="headerlink" title="Evaluation"></a>Evaluation</h4><ul>
<li>Types of Evaluation<ul>
<li>Laboratory Studies</li>
<li>Field Studies</li>
<li>Participatory Design/Rapid Prototyping</li>
<li>Brainstorming</li>
<li>StoryBoarding/Wizard of Oz</li>
<li>Workshops/Role Playing</li>
<li>Walkthrough/Talkthrough</li>
</ul>
</li>
<li>Observation Evaluation</li>
</ul>
<h4 id="Function-Allocation"><a href="#Function-Allocation" class="headerlink" title="Function Allocation"></a>Function Allocation</h4><p>每个功能由人来实现还是系统来实现</p>
<ul>
<li>Mandatory</li>
<li>Relative value</li>
<li>Cost based</li>
<li>Cognitive/affective</li>
</ul>
<h2 id="Week2-Sensation"><a href="#Week2-Sensation" class="headerlink" title="Week2 Sensation"></a>Week2 Sensation</h2><p>Learning Objectives:</p>
<ul>
<li>Psychophysical methods &amp; the problem of separating bias from measurement </li>
<li>Signal Detection: Perform specific calculations      <ul>
<li><strong>Conceptual model</strong> (associating hits, FA’s, misses, &amp; CR with areas under the curves) </li>
<li><strong>Computational understanding</strong> (interpreting problems, using table, &amp; finding d’) </li>
<li><strong>Vigilance</strong> - what the vigilance decrement is and how signal detection has been used to better understand it </li>
</ul>
</li>
<li>DESIGN: understanding of the cognitive information capabilities of humans General knowledge- wide range of sensitivity, approximately logarithmic, etc. </li>
<li>Place encoding of frequency and its consequences for: <ul>
<li>Masking </li>
<li>Threshold shift &amp; frequency related loss, etc. </li>
</ul>
</li>
<li>Measurement issues<ul>
<li>Loudness &amp; equal loudness contours </li>
<li>SPL meters </li>
<li>Articulation index, SIL, and other speech &amp; noise issues </li>
<li>Noise &amp; annoyance </li>
</ul>
</li>
</ul>
<h3 id="Classical-Errors"><a href="#Classical-Errors" class="headerlink" title="Classical Errors"></a>Classical Errors</h3><p>Error of Habituation</p>
<ul>
<li>Keep on saying the same thing<br>Error of Anticipation </li>
<li>Shift to new response</li>
</ul>
<h3 id="Signal-Detection-Model"><a href="#Signal-Detection-Model" class="headerlink" title="Signal Detection Model"></a>Signal Detection Model</h3><p><img src="resources/E893E7BC11981E867B4A94DA85979D8E.png" alt="Screen Shot 2019-10-24 at 00.00.37.png"><br><img src="resources/C2A377503B642EB567613413A81A15E0.png" alt="Screen Shot 2019-10-24 at 00.00.54.png"></p>
<h3 id="Vigilance"><a href="#Vigilance" class="headerlink" title="Vigilance"></a>Vigilance</h3><p>警报的设计必须建立在对人类的听觉加工充分了解的基础上</p>
<ul>
<li>Near threshold signals</li>
<li>Low rate of occurrence</li>
<li>Extended Watch</li>
<li>Inspection(definitetrial)</li>
<li>Free response time arbitrarily brokeninto intervals</li>
<li>Successive(noavailablestandard)</li>
<li>Simultaneous(signal to standard comparison)</li>
</ul>
<h3 id="Fatigue"><a href="#Fatigue" class="headerlink" title="Fatigue"></a>Fatigue</h3><ol>
<li>Sustained attention leads to fatigue</li>
<li>Load on working memory to keep target in mind depletes resources</li>
</ol>
<h3 id="Expectancy"><a href="#Expectancy" class="headerlink" title="Expectancy"></a>Expectancy</h3><h3 id="Remedies"><a href="#Remedies" class="headerlink" title="Remedies"></a>Remedies</h3><h3 id="Sound"><a href="#Sound" class="headerlink" title="Sound"></a>Sound</h3><p>Patterns of rare faction/compression of air</p>
<ol>
<li>Physics<ul>
<li>Intensity = amplitude</li>
<li>Frequency = cycles(hz)</li>
</ul>
</li>
<li>Perception<ul>
<li>Loudness</li>
<li>Pitch</li>
</ul>
</li>
</ol>
<ul>
<li>强度决定响度</li>
<li>频率决定音调</li>
<li>位置决定听觉定位</li>
<li>品质由频率及其掩蔽来决定</li>
</ul>
<h3 id="DECIBEL"><a href="#DECIBEL" class="headerlink" title="DECIBEL"></a>DECIBEL</h3><ul>
<li>dB(a): dB weighted by threshold equal loudness curve</li>
<li>dB(c)/dB (spl): dB with no weighting</li>
<li>dB(d) weighted by equal annoyance curves</li>
</ul>
<h3 id="Encoding-Pitch-by-Place"><a href="#Encoding-Pitch-by-Place" class="headerlink" title="Encoding Pitch by Place"></a>Encoding Pitch by Place</h3><h3 id="Auditory-Masking"><a href="#Auditory-Masking" class="headerlink" title="Auditory Masking"></a>Auditory Masking</h3><p>the presence of tone that inhibits the perception of another tone that occurs before, at the same time, or after it.</p>
<h2 id="Week3-Vision-and-Color"><a href="#Week3-Vision-and-Color" class="headerlink" title="Week3 Vision and Color"></a>Week3 Vision and Color</h2><p>Learning Objectives:</p>
<ul>
<li>Even more than place perception of pitch vision is all about relative differences (contrasts) and adaptation</li>
<li>The relation between what we experience and what is physically out there isn’t direct</li>
<li>Good Human Factors engineering requires designing so our users don’t notice</li>
</ul>
<p>Overview of vision</p>
<ul>
<li>Peripheral/central processing</li>
<li>Dark Adaptation &amp; Illusions &amp; their relation to the structure of the eye &amp; vision</li>
<li>Visual angle &amp; spatial frequency</li>
<li>VDTs, visual fatigue, &amp; ergonomic effects</li>
<li>Color measurement Munsell color wheel vs. CIE</li>
</ul>
<h3 id="Rods-and-Cones"><a href="#Rods-and-Cones" class="headerlink" title="Rods and Cones"></a>Rods and Cones</h3><ol>
<li>位置 location</li>
<li>视敏度 acuity（解析细节的能力）</li>
<li>敏感性 sensitivity (即使光很少，Rods也能工作)</li>
<li>color sensitivity （rods 是色盲）</li>
<li>adaption （rods 受光刺激的影响大）</li>
<li>diffrrential wavelength sensitivity (cones对所有光敏感，rods对红光不敏感）</li>
</ol>
<h3 id="对比敏感度"><a href="#对比敏感度" class="headerlink" title="对比敏感度"></a>对比敏感度</h3><p>c = (L-D) / (L+D)</p>
<h3 id="color-sensation"><a href="#color-sensation" class="headerlink" title="color sensation"></a>color sensation</h3><p>对单色进行设计，然后将颜色作为冗余编码信息提供</p>
<h3 id="dark-sensation"><a href="#dark-sensation" class="headerlink" title="dark sensation"></a>dark sensation</h3><p>当照明条件比较差时，所有空间评率的对比度都会降低</p>
<h3 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h3><ul>
<li>在很多系统中，影响作业绩效的重要因素是密切相关的两个过程：视觉搜索和物体或时间的检测</li>
<li>在视觉搜索领域，一旦某个项目被确定可能是目标，就必须对它是否是真的目标进行确认。</li>
<li>d’ 反映了一个操作者从噪音中分辨出信号的能力，它等于好结果的数目除以所有结果的总和</li>
</ul>
<h3 id="Peripheral-Processing"><a href="#Peripheral-Processing" class="headerlink" title="Peripheral Processing"></a>Peripheral Processing</h3><ul>
<li>Photo receptors are interconnected and can reciprocally inhibit one another</li>
<li>Can be tuned for featurere cognition</li>
</ul>
<h3 id="Adaptation"><a href="#Adaptation" class="headerlink" title="Adaptation"></a>Adaptation</h3><p>Adaptation is a major characteristic of sensation</p>
<h2 id="Week4-Reaction-time"><a href="#Week4-Reaction-time" class="headerlink" title="Week4 Reaction time"></a>Week4 Reaction time</h2><p>Learning Objectives:</p>
<ul>
<li>Subtractive&amp;additive factors analyses of choice reaction time</li>
<li>Limits&amp;values of psychological experimentation</li>
<li>Human bottleneck in choice responses</li>
<li>Power law of learning</li>
<li>Automaticvs.controlledresponding</li>
<li>Information theoretic interpretations of reaction time</li>
</ul>
<h3 id="Hick’s-Law"><a href="#Hick’s-Law" class="headerlink" title="Hick’s Law"></a>Hick’s Law</h3><p>Hick’s Law holds that choice reaction time is proportional to log2 of the number of alternatives.（反应时间是log2N的函数）<br>RT = a + blog2N</p>
<h3 id="Conventional-Controls-amp-Displays"><a href="#Conventional-Controls-amp-Displays" class="headerlink" title="Conventional Controls &amp; Displays"></a>Conventional Controls &amp; Displays</h3><ul>
<li>conventional practice in design of controls</li>
<li>displays Acquire familiarity with human factors design principles and heuristics </li>
</ul>
<h3 id="Control"><a href="#Control" class="headerlink" title="Control"></a>Control</h3><p>Controls are used by the human operator to communicate with the machine/device in the system. It’simportantthatcontrolsservetheirfunction. Based on:</p>
<ul>
<li>Ease of operation (considering population, biomechanics, etc.).</li>
<li>Nature of the task (force, precision, etc.). </li>
<li>Arrangement.</li>
</ul>
<h3 id="Basic-dimensions"><a href="#Basic-dimensions" class="headerlink" title="Basic dimensions:"></a>Basic dimensions:</h3><ul>
<li>Discrete (e.g., light switch) vs. continuous (e.g., dimmer)</li>
<li>Linear vs. rotary</li>
<li>Unidimensional vs. multidimensional</li>
<li>Isometric vs. isotonic</li>
<li>Plus mass, shape, range of motion, resistance to movement.</li>
</ul>
<h3 id="Control-Features"><a href="#Control-Features" class="headerlink" title="Control Features"></a>Control Features</h3><ol>
<li>Control resistance<ul>
<li>Elastic resistance: Spring loaded.<ul>
<li>Resistance increases as control gets farther from neutral.</li>
<li>Gives proprioceptive feedback about <strong>control position</strong>.</li>
<li>Returns to neutral when released (deadman switch).</li>
</ul>
</li>
<li>Frictional resistance<ul>
<li>Static friction for resting state, decreases when pushed. </li>
<li>Sliding friction not influenced by velocity or position.</li>
</ul>
</li>
<li>Viscous resistance<ul>
<li>Increases as a function of velocity.</li>
<li>Gives proprioceptive feedback about speed.</li>
<li>Promotes smooth movement.</li>
</ul>
</li>
<li>Inertial resistance<ul>
<li>Hard to start and stop.</li>
<li>Users tend to overshoot (revolving doors).</li>
</ul>
</li>
<li>Performance and resistance<ul>
<li>For frictional and inertial, the JND is 10%-20% of resting state.</li>
<li>Lighter controls preferred to heavy.</li>
<li>Viscous preferred to frictional.</li>
<li>For continuous, inertial hurts performance; </li>
<li>Elastic is the best.</li>
<li>For all of these, hard-and-fast rules are not available. It’s a function of the system.</li>
</ul>
</li>
</ul>
</li>
<li>Control-display ratio: <ul>
<li>Ratio of magnitude of control adjustment to magnitude of change in display.</li>
</ul>
</li>
<li>Gain: <ul>
<li>Responsiveness of control.</li>
</ul>
</li>
</ol>
<h3 id="Control-Panels"><a href="#Control-Panels" class="headerlink" title="Control Panels"></a>Control Panels</h3><ol>
<li>Location coding<ul>
<li>Need to be able to reliably distinguish locations.</li>
<li>Vertical localization is easier than horizontal.</li>
<li>Overuse of location coding is still a factor in some aircraft designs.</li>
</ul>
</li>
<li>Labels<ul>
<li>Not recommended as the sole code</li>
</ul>
</li>
<li>General rules for labels<ul>
<li>Locate labels systematically with respect to controls (all above, etc.).</li>
<li>Make labels brief.</li>
<li>Avoid abstract symbols; use standards.</li>
<li>Attend to fonts.</li>
<li>Position labels so they can be seen while the control is in use.</li>
</ul>
</li>
<li>Coding of controls<ul>
<li>Color coding</li>
<li>Shape coding</li>
<li>Size coding</li>
<li>Texture coding.<br>– Coding by type of operation.<br>– Redundant coding: Multiple dimensions</li>
</ul>
</li>
<li>Control arrangements<ul>
<li>Grouping is important.</li>
<li>Population stereotypes for control arrangements can be device specific</li>
<li>Attend to the reach envelope</li>
</ul>
</li>
<li>Preventing accidental operation</li>
<li>Specific Controls<ul>
<li>Hand operated controls</li>
<li>Foot operated controls</li>
<li>Specialized controls</li>
</ul>
</li>
</ol>
<h3 id="Visual-Displays"><a href="#Visual-Displays" class="headerlink" title="Visual Displays"></a>Visual Displays</h3><p>Display - anything that conveys information</p>
<ol>
<li>Requirements:<ul>
<li>Compatibility to senses</li>
<li>Language compatibility</li>
<li>Right info at the right time</li>
</ul>
</li>
<li>Types of information to display: <ul>
<li>Instructional</li>
<li>Command - direct orders </li>
<li>Advisory</li>
<li>Historical/predictive</li>
<li>Answers</li>
</ul>
</li>
<li>Functions of Dynamic Visual<br>Displays<ul>
<li>Continuous System Control</li>
<li>System Status Monitoring</li>
<li>Briefing</li>
<li>Search and Identification</li>
<li>Decision Making</li>
</ul>
</li>
<li>Visual Display Technology<ul>
<li>Mechanical </li>
<li>Electronic</li>
<li>Optical Projection</li>
</ul>
</li>
<li>General Display Principles<ul>
<li>Color</li>
<li>Shape</li>
<li>Coding</li>
<li>Approximation<ul>
<li>Get attention with one display<br>– Present detailed info with another</li>
</ul>
</li>
<li>Integration</li>
</ul>
</li>
</ol>
<h3 id="Principles-of-Display-Design"><a href="#Principles-of-Display-Design" class="headerlink" title="Principles of Display Design"></a>Principles of Display Design</h3><ul>
<li>Perceptual Principles<ul>
<li>Avoid absolute judgments</li>
<li>Top-down processing （信号的显示方式尽量与人的经验相符合）</li>
<li>Redundancy gain</li>
<li>Discriminability</li>
<li><img src="resources/088856BA3C1FA5A601838DAD16F27045.png" alt="Screen Shot 2019-12-11 at 14.23.03.png"></li>
</ul>
</li>
<li>Mental Model Principles （显示方式与操作员的心理模型一致，有助于提高正确操作）<ul>
<li>Pictorial realism （形如其表）</li>
<li>Principle of the moving part （运动一致）</li>
</ul>
</li>
<li>Principles Based on Attention<ul>
<li>Minimizing information access costs （将访问信息的消耗降到最低）</li>
<li>Proximity compatibility principle （接近相容原则）</li>
<li>Principle of multiple resources （要同时对多种信息进行加工时，可以将信息的呈现方式区分开）</li>
</ul>
</li>
<li>Memory Principles<ul>
<li>Principle of predictive aiding （预测辅助原则）</li>
<li>Principle of knowledge in the world （利用知识降低记忆负荷）</li>
<li>Principle of consistency （一致性原则）</li>
</ul>
</li>
</ul>
<ul>
<li>Two-Valued Info</li>
<li>Quantitative Information</li>
<li>Qualitative readings</li>
<li>Check Reading</li>
<li>Situation awareness</li>
</ul>
<h3 id="Three-Heuristics"><a href="#Three-Heuristics" class="headerlink" title="Three Heuristics"></a>Three Heuristics</h3><ol>
<li>Minimize Information</li>
<li>Promote Good C-D mappings</li>
<li>Provide Feedback</li>
</ol>
<h2 id="Spatial-amp-Integrative-Displays"><a href="#Spatial-amp-Integrative-Displays" class="headerlink" title="Spatial &amp; Integrative Displays"></a>Spatial &amp; Integrative Displays</h2><p>Learning Objectives:</p>
<ul>
<li>6 DOF &amp; moving &amp; orienting in 3 space</li>
<li>Problems with viewpoint &amp; situation awareness</li>
<li>Applications VR, games, &amp; robotics – Attitude &amp; pose</li>
<li>Navigation &amp; search</li>
<li><p>Cues to depth &amp; distance</p>
</li>
<li><p>Use of emergent features and perceptual salience to integrate displays</p>
</li>
<li>TMI and need to provide context to events</li>
</ul>
<h3 id="6-Degrees-of-Freedom-6DOF"><a href="#6-Degrees-of-Freedom-6DOF" class="headerlink" title="6 Degrees of Freedom (6DOF)"></a>6 Degrees of Freedom (6DOF)</h3><p>– Position (X,Y, Z)<br>– Orientation (Yaw, Pitch, Roll)</p>
<h3 id="3d-display-on-2d-panels"><a href="#3d-display-on-2d-panels" class="headerlink" title="3d display on 2d panels"></a>3d display on 2d panels</h3><ul>
<li>Depth is often poorly represented &amp; less discernable than other dimensions</li>
</ul>
<h3 id="Configural-Displays"><a href="#Configural-Displays" class="headerlink" title="Configural Displays"></a>Configural Displays</h3><ul>
<li>Low level data: usually individual sensor data</li>
<li>High level relation: a more global and general display of what the data means</li>
<li>Emergent property or emergent feature: a pattern or shape that is created from the low level data, is recognisable and has meaning</li>
</ul>
<h3 id="Separable"><a href="#Separable" class="headerlink" title="Separable"></a>Separable</h3><p>Show each variable as a single output</p>
<h3 id="Separable-vs-Configural-vs-Integral"><a href="#Separable-vs-Configural-vs-Integral" class="headerlink" title="Separable vs Configural vs Integral"></a>Separable vs Configural vs Integral</h3><ul>
<li>Separable generally makes it easier to extract low level information</li>
<li>Integral Show high level information but not low level information</li>
<li>Configural Arrange low level data into a meaningful form,whole is greater than the sum of the parts</li>
<li>Configural makes it harder to extract low level information</li>
</ul>
<h2 id="Tracking-manual-control"><a href="#Tracking-manual-control" class="headerlink" title="Tracking (manual control)"></a>Tracking (manual control)</h2><p>Learning Objectives:</p>
<ul>
<li>Fitts’ Law Ability to apply theory and skills: Design Use Fitts’ Law to evaluate/predict pointing performance </li>
<li>Theoretical understanding: Order of control </li>
</ul>
<h3 id="Open-versus-Closed-Loop-Systems"><a href="#Open-versus-Closed-Loop-Systems" class="headerlink" title="Open versus Closed Loop Systems"></a>Open versus Closed Loop Systems</h3><h3 id="Tracking-Terms"><a href="#Tracking-Terms" class="headerlink" title="Tracking Terms"></a>Tracking Terms</h3><ul>
<li>Control movement</li>
<li>Controlled element</li>
<li>Target</li>
<li>Forcing function- disturbances to target</li>
</ul>
<h3 id="Pursuit-and-Compensatory"><a href="#Pursuit-and-Compensatory" class="headerlink" title="Pursuit and Compensatory"></a>Pursuit and Compensatory</h3><p>补偿追踪与尾随追踪</p>
<ul>
<li>Pursuit   <ul>
<li>Target moved</li>
<li>Usually more accurate</li>
</ul>
</li>
<li>Compensatory<ul>
<li>Target fixed</li>
<li>Target &amp; control movements confounded</li>
</ul>
</li>
</ul>
<h3 id="Fitts-Law"><a href="#Fitts-Law" class="headerlink" title="Fitts Law"></a>Fitts Law</h3><p>MT(movement time) = a + blog2(2A/W)</p>
<h3 id="Tracking-vs-pointing"><a href="#Tracking-vs-pointing" class="headerlink" title="Tracking vs. pointing"></a>Tracking vs. pointing</h3><p>Pointing as expressed by Fitts law is a very special case of tracking.<br>In pointing:</p>
<ul>
<li>Stationary target</li>
<li>No lag</li>
<li>Gain is only control system parameter</li>
</ul>
<h3 id="Gain-amp-C-D-ratio"><a href="#Gain-amp-C-D-ratio" class="headerlink" title="Gain &amp; C/D ratio"></a>Gain &amp; C/D ratio</h3><ul>
<li>Gain describes the change in the controlled element (display) corresponding to a movement of the control: gain = y/x..</li>
<li>C/D ratio describes the movement of a control needed for a given change in the display: C/D = x/y</li>
</ul>
<h3 id="Order-of-Control"><a href="#Order-of-Control" class="headerlink" title="Order of Control"></a>Order of Control</h3><ul>
<li>0 order: Position<ul>
<li>A 0 order system has <strong>no</strong> integrations between input and output</li>
</ul>
</li>
<li>1 order: Velocity<ul>
<li>A 1 order system has <strong>one</strong> integrations between input and output</li>
</ul>
</li>
<li>2 order Acceleration<ul>
<li>A 2 order system has <strong>two</strong> integrations between input and output</li>
</ul>
</li>
</ul>
<h2 id="Week-8-HIP-amp-Workload"><a href="#Week-8-HIP-amp-Workload" class="headerlink" title="Week 8 HIP &amp; Workload"></a>Week 8 HIP &amp; Workload</h2><p>Learning Objectives:</p>
<ol>
<li>What is mental workload?<br> – Subjective, performance, &amp; physiological measures</li>
<li>HIP &amp; human factors<br> – Working memory, absolute judgment, &amp; other aspects of the bottleneck</li>
<li>Mental representation &amp; difficulty</li>
</ol>
<h3 id="Basic-approaches-to-measuring-mental-workload"><a href="#Basic-approaches-to-measuring-mental-workload" class="headerlink" title="Basic approaches to measuring mental workload"></a>Basic approaches to measuring mental workload</h3><ul>
<li>Analytic<br>  – Task difficulty<ul>
<li>Number of simultaneous tasks</li>
</ul>
</li>
<li>Task performance <ul>
<li>Primary task</li>
<li>Secondary task</li>
</ul>
</li>
<li>Physiological (arousal/effort)<ul>
<li>heart rate</li>
<li>evoked response amplitude</li>
<li>……</li>
</ul>
</li>
<li>Subjective assessment<ul>
<li>Cooper-Harris</li>
<li>SWAT</li>
<li>NASA</li>
</ul>
</li>
</ul>
<p><img src="resources/B1FE7729E735139A9174D4D525B76743.png" alt="Screen Shot 2019-12-11 at 17.05.25.png"></p>
<h3 id="Selective-Attention"><a href="#Selective-Attention" class="headerlink" title="Selective Attention"></a>Selective Attention</h3><p>通道的选择性注意主要受下面因素的影响<br><img src="resources/505A2612DA444E6ABADCD8DA347E4794.png" alt="Screen Shot 2019-12-11 at 17.04.47.png"></p>
<h3 id="Three-aspects-of-perception"><a href="#Three-aspects-of-perception" class="headerlink" title="Three aspects of perception"></a>Three aspects of perception</h3><ol>
<li>Sensory based<ul>
<li><strong>Bottom-up</strong> feature analysis<ul>
<li>clear stimuli/minimize sensory similarities</li>
</ul>
</li>
</ul>
</li>
<li>Memory based<ul>
<li><strong>Unitization</strong><br>  – perceive grouped features as a whole (Gestalt)</li>
<li><strong>Top-down</strong> [correct guesses &amp; fill-ins]</li>
</ul>
</li>
</ol>
<h3 id="working-memory"><a href="#working-memory" class="headerlink" title="working memory"></a>working memory</h3><ul>
<li>working memory</li>
<li>long term memory</li>
</ul>
<p><img src="resources/8424FD27B3344B794E85F01390B2C560.png" alt="Screen Shot 2019-12-12 at 03.50.04.png"></p>
<h3 id="90’s-model-nods-to-Baddeley-amp-Schneider"><a href="#90’s-model-nods-to-Baddeley-amp-Schneider" class="headerlink" title="90’s model (nods to Baddeley &amp; Schneider)"></a>90’s model (nods to Baddeley &amp; Schneider)</h3><p><img src="resources/2D6E557C69F004CC508948E5AF2DA91B.png" alt="Screen Shot 2019-12-11 at 17.13.34.png"></p>
<ol>
<li>Central executive<ul>
<li>Coordinate multiple tasks (OS)</li>
<li>Hold &amp; manipulate info from LTM (RAM)</li>
<li>Control retrieval strategies from LTM (data<br>access)</li>
<li>Attend selectively to stimuli (time share)</li>
<li>协调两个存储子系统</li>
</ul>
</li>
<li>Visual sketchpad<ul>
<li>以模拟的，空间的形式保持正在使用的信息</li>
</ul>
</li>
<li>Phonological store<ul>
<li>存储以声音的形式存在的信息</li>
</ul>
</li>
</ol>
<h2 id="Human-Error-and-Reliability"><a href="#Human-Error-and-Reliability" class="headerlink" title="Human Error and Reliability"></a>Human Error and Reliability</h2><ol>
<li>Understanding Mechanisms underlying human error </li>
<li>What types of errors can be predicted? </li>
<li>Proficiency in information-related skills: Analysis Perform THERP analyses to predict errors for a design/task </li>
</ol>
<h3 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h3><ul>
<li>Any act with adverse consequences</li>
<li>An act resulting from an inappropriate intention</li>
<li>Keeping the pressurizer level under control</li>
</ul>
<h3 id="Action-Schema"><a href="#Action-Schema" class="headerlink" title="Action Schema"></a>Action Schema</h3><p><img src="resources/5CB1A89659EE40E74A848B269D451306.png" alt="Screen Shot 2019-12-11 at 19.22.21.png"></p>
<ol>
<li>Intention<ul>
<li>mode errors</li>
<li>description errors</li>
</ul>
</li>
<li>Activation<ul>
<li>capture errors</li>
<li>data-driven</li>
<li>associative activation</li>
<li>loss of activation</li>
<li>sequence error</li>
</ul>
</li>
<li>Faulty Triggering<ul>
<li>Out of sequence and “mangled” execution..</li>
</ul>
</li>
</ol>
<h3 id="Reliability-Engineering"><a href="#Reliability-Engineering" class="headerlink" title="Reliability Engineering"></a>Reliability Engineering</h3><ul>
<li>The <strong>Key</strong> to reliability is Redundancy</li>
</ul>
<h3 id="Components-in-Series"><a href="#Components-in-Series" class="headerlink" title="Components in Series"></a>Components in Series</h3><p><img src="resources/E81CF8AF176C7942E34394DC8A2FF674.png" alt="Screen Shot 2019-12-12 at 03.52.33.png"></p>
<h3 id="Components-in-Parallel"><a href="#Components-in-Parallel" class="headerlink" title="Components in Parallel"></a>Components in Parallel</h3><p><img src="resources/9C5CE086D1C126A6965F4602030EB667.png" alt="Screen Shot 2019-12-12 at 03.52.39.png"></p>
<h3 id="Tradeoffs-Redundant-or-not"><a href="#Tradeoffs-Redundant-or-not" class="headerlink" title="Tradeoffs (Redundant or not)"></a>Tradeoffs (Redundant or not)</h3><h3 id="How-redundancy-works"><a href="#How-redundancy-works" class="headerlink" title="How redundancy works"></a>How redundancy works</h3><p>For the mathematics to work out the probabilities of failure for redundant components or subsystems must be <strong>completely independent</strong></p>
<h3 id="What-Reliability-Engineers-do"><a href="#What-Reliability-Engineers-do" class="headerlink" title="What Reliability Engineers do"></a>What Reliability Engineers do</h3><ul>
<li>The primary task of a reliability engineer is to defend redundancy against <strong>unexpected violations of independence</strong>.</li>
<li>In a well designed system only the <strong>human operator</strong> bridges these islands of independence</li>
</ul>
<h3 id="THERP"><a href="#THERP" class="headerlink" title="THERP"></a>THERP</h3><ul>
<li>Quality control method for estimating errors</li>
<li>Model<ul>
<li><strong>Errors</strong>: such as reading or omitting an instructional step, or choosing the wrong switch, are presumed to occur at constant rates</li>
<li>If tasks can be broken down into subtasks for which errors can be predicted, then the probability of the successful completion of the overall task can be predicted</li>
<li>The probability of successfully completing the task (if its something like warhead assembly) is then simply the <strong>joint probability</strong> that everything is done correctly</li>
</ul>
</li>
</ul>
<h3 id="Points-on-THERP-analyses"><a href="#Points-on-THERP-analyses" class="headerlink" title="Points on THERP analyses"></a>Points on THERP analyses</h3><ul>
<li>Tree is not sacrosanct but a convenient way to organize independent tasks</li>
<li>Probabilities for errors and recoveries should be entered into trees at level of aggregation at which independence holds</li>
<li>Method is ultimately simply a way to make our commonsense about the likelihood of failing more explicit</li>
</ul>
<p><img src="resources/81B1E00736CFE5835EC5B0CB6ED3E51C.png" alt="Screen Shot 2019-12-11 at 20.05.14.png"></p>
<h2 id="Human-Computer-interaction"><a href="#Human-Computer-interaction" class="headerlink" title="Human-Computer interaction"></a>Human-Computer interaction</h2><ol>
<li>Understand basic assumptions and mechanics of constructing GOMS keystroke level model</li>
<li>Contrast the HIP vs. Ecological vision of problems in HCI</li>
<li>Standard visualizations and the problem(s) they solve- finding context for local views</li>
</ol>
<h3 id="GOMS-Models"><a href="#GOMS-Models" class="headerlink" title="GOMS Models"></a>GOMS Models</h3><p>用于设计的用户绩效模型</p>
<ul>
<li>Goals</li>
<li>Operators </li>
<li>Methods</li>
<li>Selection rules</li>
</ul>
<p>用户可以通过方法和选择形成他们要达到的目标和子目标。方法是一系列知觉的、认知的或行为操作的步骤。</p>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ul>
<li>列出目标和子目标</li>
<li>明确达到问题的方法</li>
<li>写出选择关系</li>
<li>揭示问题</li>
</ul>
<h3 id="Norman’s-7-Stages-amp-design"><a href="#Norman’s-7-Stages-amp-design" class="headerlink" title="Norman’s 7 Stages &amp; design"></a>Norman’s 7 Stages &amp; design</h3><p>用户导向界面设计的七阶段理论<br><img src="resources/64FB6BD735C5ACC5560D714AD40CEBF1.png" alt="Screen Shot 2019-12-11 at 20.22.00.png"></p>
<ol>
<li>实施的鸿沟：用户的目的和软件所支持的行为之间的错误匹配（通过好的人因学方案解决，input tracking position）</li>
<li>评价的鸿沟：用户期望与系统状态的不匹配 (好的说明性显示)</li>
</ol>
<h3 id="Mplications-of-working-memory-amp-absolute-judgment-limitations"><a href="#Mplications-of-working-memory-amp-absolute-judgment-limitations" class="headerlink" title="Mplications of working memory &amp; absolute judgment limitations"></a>Mplications of working memory &amp; absolute judgment limitations</h3><ul>
<li>Recognition is MUCH easier than Recall :Make the objects of working memory available to perception..</li>
</ul>
<h3 id="The-Power-Law-of-Practice"><a href="#The-Power-Law-of-Practice" class="headerlink" title="The Power Law of Practice"></a>The Power Law of Practice</h3><p>Improvement in performance is logarithmic in the N of trials</p>
<h3 id="Mental-Models"><a href="#Mental-Models" class="headerlink" title="Mental Models"></a>Mental Models</h3><p>跨越实施和评价的鸿沟依赖于心理模型，好的心理模型可以帮助房主错误和改进绩效</p>
<ul>
<li>Allows people to make predictions about how things will work</li>
<li>Mental models are often wrong</li>
</ul>
<h3 id="Conceptual-Models"><a href="#Conceptual-Models" class="headerlink" title="Conceptual Models"></a>Conceptual Models</h3><p>使用户看不见的部分变为可见 比如”房间”</p>
<h3 id="State-Transition-Models-of-Devices"><a href="#State-Transition-Models-of-Devices" class="headerlink" title="State Transition Models of Devices"></a>State Transition Models of Devices</h3><p><img src="resources/B8C3FE244974F3F50AE2A26BFAE36589.png" alt="Screen Shot 2019-12-11 at 20.45.26.png"></p>
<h2 id="Speech"><a href="#Speech" class="headerlink" title="Speech"></a>Speech</h2><ul>
<li>Theoretical Understanding: Problems in building applications using speech recognition Design</li>
<li>Strategies for getting good performance despite poor recognition </li>
<li>Theoretical Understanding: Computer supported cooperative work </li>
<li>Theoretical Understanding: Design Strategies for using sensors to augment human inputs and improve interaction </li>
</ul>
<h3 id="Basic-Speech-Parameters"><a href="#Basic-Speech-Parameters" class="headerlink" title="Basic Speech Parameters"></a>Basic Speech Parameters</h3><ul>
<li>Speaker Dependent/Independent</li>
<li>Size/Type of Vocabulary</li>
<li>Isolated word vs. Continuous Speech</li>
<li>Grammar/constraint</li>
<li>Environment/noise tolerance</li>
<li>Noise canceling unidirectional microphones<br>– Quiet environments</li>
</ul>
<h3 id="Rec-System-maximizes-chance-of-getting-things-right-by"><a href="#Rec-System-maximizes-chance-of-getting-things-right-by" class="headerlink" title="Rec System maximizes chance of getting things right by"></a>Rec System maximizes chance of getting things right by</h3><ul>
<li>Restricting vocabulary</li>
<li>Specifying order &amp; transitions for recognition</li>
<li>Associating actions/meaning with partial recognition of phrase</li>
<li>Use of context particularly within dialog to adjust constraints</li>
</ul>
<h3 id="Lombard-Effect"><a href="#Lombard-Effect" class="headerlink" title="Lombard Effect"></a>Lombard Effect</h3><p>During noise, speakers have an automatic normalization response that causes systematic speech modifications, including increased volume, reduced speaking rate, and changes in articulation and pitch.</p>
<h3 id="Issues-in-Ubicomp"><a href="#Issues-in-Ubicomp" class="headerlink" title="Issues in Ubicomp"></a>Issues in Ubicomp</h3><p>Issues in Ubicomp</p>
<ul>
<li>Context</li>
<li>Uneven conditioning</li>
<li>Inferring user intent</li>
<li>System interoperation</li>
</ul>
<h2 id="Decision-Making-amp-Diagnosis"><a href="#Decision-Making-amp-Diagnosis" class="headerlink" title="Decision Making &amp; Diagnosis"></a>Decision Making &amp; Diagnosis</h2><p>Learning Objectives</p>
<ul>
<li>Theoretical Understanding: Normative vs. Behavioral theories of decision making</li>
<li>Models of decision making in diagnosis Name &amp; illustrate standard fallacies in decision making </li>
</ul>
<h3 id="Rational-Decision-Making"><a href="#Rational-Decision-Making" class="headerlink" title="Rational Decision Making"></a>Rational Decision Making</h3><ul>
<li>A rational decision maker is one who chooses the alternative which maximizes his expected utility.</li>
<li>A rational decision maker is presumed to maximize her <strong>Subjective Utility</strong> which is likely to be some function of objective</li>
</ul>
<h3 id="Prospect-theory"><a href="#Prospect-theory" class="headerlink" title="Prospect theory"></a>Prospect theory</h3><p>Loss hurts more than Gain helps （抛硬币，正面赢20，反面输 10，大多数人选择不玩）</p>
<h3 id="Base-Rate-Fallacy"><a href="#Base-Rate-Fallacy" class="headerlink" title="Base Rate Fallacy"></a>Base Rate Fallacy</h3><p>Undervalue base rates!! </p>
<h3 id="Behavioral-Decision-Making"><a href="#Behavioral-Decision-Making" class="headerlink" title="Behavioral Decision Making"></a>Behavioral Decision Making</h3><ol>
<li>Treate extreme values as more moderate  （感知不到极端数值，就比如考试明明只剩三天，但还觉得时间很充裕不好好看hf）</li>
<li>Imperfections in memory （记忆缺陷， 不能收集到所有过去的信息帮助做决策，比如期中复习hf就十分紧张期末还是这样） </li>
<li>Inability to do complex math in our heads （做不了复杂算数） </li>
</ol>
<h3 id="Gambler’s-Fallacy"><a href="#Gambler’s-Fallacy" class="headerlink" title="Gambler’s Fallacy"></a>Gambler’s Fallacy</h3><p>Error: treating independent events as though they were dependent</p>
<h3 id="Availability-heuristic可得性偏差"><a href="#Availability-heuristic可得性偏差" class="headerlink" title="Availability heuristic可得性偏差"></a>Availability heuristic可得性偏差</h3><p>人们做决策总会基于 avaliability &amp; imaginability </p>
<h3 id="Imaginability"><a href="#Imaginability" class="headerlink" title="Imaginability"></a>Imaginability</h3><h3 id="Confirmation-bias"><a href="#Confirmation-bias" class="headerlink" title="Confirmation bias"></a>Confirmation bias</h3><p>确定偏差:简而言之就是听不进新的观点，无论怎样论证都是认为自己原本认为的是对的， 本质还是overconfidence<br>例如：给一些本身对于某件事有观点的人接受正反两面信息，人们通常都只注意到支持自己观点的理论，暗中反驳不符合自己观点的理论 </p>
<h3 id="Representativeness-bias-代表性偏差"><a href="#Representativeness-bias-代表性偏差" class="headerlink" title="Representativeness bias 代表性偏差"></a>Representativeness bias 代表性偏差</h3><p>人类在对事件做出判断的时候，过度关注于这个事件的某个特征，而忽略了这个事件发生的大环境概率和样本大小。<br>例如，你看到一家公司连续3年利润都翻番，然后立即对它的股票做出判断——买！错在代表性偏差。连续3年利润翻番，是一个好公司的代表性特征。但这并不意味着这家公司真的就是一家好公司，这家公司还有好多信息都被你忽略掉了。比如说，业绩可能是有意调整出来的；再比如说，这家公司未来的盈利机会消失，业绩不能持续。 </p>
<h3 id="Anchoring锚定效应"><a href="#Anchoring锚定效应" class="headerlink" title="Anchoring锚定效应"></a>Anchoring锚定效应</h3><p>人们在对某人某事做出判断时，易受第一印象影响从而先入为主 </p>
]]></content>
      <categories>
        <category>Product Design</category>
      </categories>
  </entry>
  <entry>
    <title>Dependency Parsing and Assignment3 of CS224n</title>
    <url>/Dependency-Parsing-and-Assignment3-of-CS224n/2019/12/10/</url>
    <content><![CDATA[<h2 id="Dependency-Grammar-and-Dependency-Structure"><a href="#Dependency-Grammar-and-Dependency-Structure" class="headerlink" title="Dependency Grammar and Dependency Structure"></a>Dependency Grammar and Dependency Structure</h2><p>Parse trees in NLP, analogous to those in compilers, are used to analyze the syntactic structure of sentences. There are two main types of structures used:</p>
<ol>
<li>constituency structures</li>
<li>dependency structures</li>
</ol>
<p>Dependency structure of sentences shows which words depend on (modify or are arguments of) which other words. These binary asymmetric relations between the words are called dependencies and are depicted as arrows going from the <strong>head</strong> (or governor, superior, regent) to the <strong>dependent</strong> (or modifier, inferior, subordinate).  Usually these dependencies form a tree structure. They are often typed with the name of grammatical relations (subject, prepositional object, apposition, etc.). An example of such a dependency tree is shown in below</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="1.png" width="80%" height="80%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Figure from cs224n</div>
</center>

<p>Usually some constraints:</p>
<ol>
<li>Only one word is adependent of ROOT</li>
<li>Don’twantcyclesA-&gt;B,B-&gt;A (tree structure)</li>
<li>Final issue is whether arrows can cross (non-projective) or not<ul>
<li>Defn: There are no crossing dependency arcs when the words are laid out in their linear order, with all arcs above the words</li>
<li>Dependencies parallel to a CFG tree must be <strong>projective</strong>: Forming dependencies by taking 1 child of each category as head</li>
<li>But dependency theory normally does allow non-projective structures to account for displaced constituents: You can’t easily get the semantics of certain constructions right without these <strong>non-projective</strong> dependencies</li>
</ul>
</li>
</ol>
<h2 id="Parsing"><a href="#Parsing" class="headerlink" title="Parsing"></a>Parsing</h2><p>Given a parsing model M and a sentence S, derive the optimal dependency graph D for S according to M.</p>
<ol>
<li><strong>Dynamic programming</strong><br>Eisner (1996) gives a clever algorithm with complexity O(n3), by producing parse items with heads at the ends rather than in the middle</li>
<li><strong>Graph algorithms</strong><br>You create a Minimum Spanning Tree for a sentence McDonald et al.’s (2005) MSTParser scores dependencies independently using an ML classifier (he uses MIRA, for online learning, but it can be something else)</li>
<li><strong>Constraint Satisfaction</strong><br>Edges are eliminated that don’t satisfy hard constraints. Karlsson (1990), etc.</li>
<li><strong>Transition-based parsing</strong> or <strong>deterministic dependency parsing</strong><br>Greedy choice of attachments guided by good machine learning classifiers MaltParser (Nivre et al. 2008). Has proven highly effective.</li>
</ol>
<h2 id="Neural-Transition-Based-Dependency-Parsing"><a href="#Neural-Transition-Based-Dependency-Parsing" class="headerlink" title="Neural Transition-Based Dependency Parsing"></a>Neural Transition-Based Dependency Parsing</h2><p>A dependency parser analyzes the grammatical structure of a sentence, establishing relationships between head words, and words which modify those heads. Your implementation will be a transition-based parser, which incrementally builds up a parse one step at a time. At every step it maintains a partial parse, which is represented as follows:</p>
<ul>
<li>A <strong>stack</strong> of words that are currently being processed. </li>
<li>A <strong>buffer</strong> of words yet to be processed.</li>
<li>A <strong>list</strong> of dependencies predicted by the parser.</li>
</ul>
<p>Initially, the stack only contains ROOT, the dependencies list is empty, and the buffer contains all words of the sentence in order. At each step, the parser applies a transition to the partial parse until its buffer is empty and the stack size is 1. The following transitions can be applied:</p>
<ul>
<li><strong>SHIFT</strong>: removes the first word from the buffer and pushes it onto the stack.</li>
<li><strong>LEFT-ARC</strong>: marks the second (second most recently added) item on the stack as a dependent of<br>the first item and removes the second item from the stack.</li>
<li><strong>RIGHT-ARC</strong>: marks the first (most recently added) item on the stack as a dependent of the second item and removes the first item from the stack.</li>
</ul>
<p>On each step, your parser will decide among the three transitions using a neural network classifier.Go through the sequence of transitions needed for parsing the sentence “I parsed this sentence correctly”. The dependency tree for the sentence is shown below. At each step, give the configuration of the stack and buffer, as well as what transition was applied this step and what new dependency was added (if any). The first three steps are provided below as an example.</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="2.png" width="100%" height="100%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Figure from cs224n</div>
</center>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">CS224N 2018-19: Homework 3</span></span><br><span class="line"><span class="string">parser_transitions.py: Algorithms for completing partial parsess.</span></span><br><span class="line"><span class="string">Sahil Chopra &lt;schopra8@stanford.edu&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PartialParse</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sentence)</span>:</span></span><br><span class="line">        <span class="string">"""Initializes this partial parse.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @param sentence (list of str): The sentence to be parsed as a list of words.</span></span><br><span class="line"><span class="string">                                        Your code should not modify the sentence.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># The sentence being parsed is kept for bookkeeping purposes. Do not alter it in your code.</span></span><br><span class="line">        self.sentence = sentence</span><br><span class="line"></span><br><span class="line">        <span class="comment">### YOUR CODE HERE (3 Lines)</span></span><br><span class="line">        <span class="comment">### Your code should initialize the following fields:</span></span><br><span class="line">        <span class="comment">###     self.stack: The current stack represented as a list with the top of the stack as the</span></span><br><span class="line">        <span class="comment">###                 last element of the list.</span></span><br><span class="line">        <span class="comment">###     self.buffer: The current buffer represented as a list with the first item on the</span></span><br><span class="line">        <span class="comment">###                  buffer as the first item of the list</span></span><br><span class="line">        <span class="comment">###     self.dependencies: The list of dependencies produced so far. Represented as a list of</span></span><br><span class="line">        <span class="comment">###             tuples where each tuple is of the form (head, dependent).</span></span><br><span class="line">        <span class="comment">###             Order for this list doesn't matter.</span></span><br><span class="line">        <span class="comment">###</span></span><br><span class="line">        <span class="comment">### Note: The root token should be represented with the string "ROOT"</span></span><br><span class="line">        <span class="comment">###</span></span><br><span class="line"></span><br><span class="line">        self.stack = [<span class="string">"ROOT"</span>]</span><br><span class="line">        self.buffer = sentence[:]</span><br><span class="line">        self.dependencies = []</span><br><span class="line"></span><br><span class="line">        <span class="comment">### END YOUR CODE</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_step</span><span class="params">(self, transition)</span>:</span></span><br><span class="line">        <span class="string">"""Performs a single parse step by applying the given transition to this partial parse</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @param transition (str): A string that equals "S", "LA", or "RA" representing the shift,</span></span><br><span class="line"><span class="string">                                left-arc, and right-arc transitions. You can assume the provided</span></span><br><span class="line"><span class="string">                                transition is a legal transition.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment">### YOUR CODE HERE (~7-10 Lines)</span></span><br><span class="line">        <span class="comment">### <span class="doctag">TODO:</span></span></span><br><span class="line">        <span class="comment">###     Implement a single parsing step, i.e. the logic for the following as</span></span><br><span class="line">        <span class="comment">###     described in the pdf handout:</span></span><br><span class="line">        <span class="comment">###         1. Shift</span></span><br><span class="line">        <span class="comment">###         2. Left Arc</span></span><br><span class="line">        <span class="comment">###         3. Right Arc</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># if self.buffer and transition == "S":</span></span><br><span class="line">        <span class="comment">#     self.stack.append(self.buffer.pop(0))</span></span><br><span class="line">        <span class="comment"># elif len(self.stack) &gt;=2 and self.stack[-2] != "ROOT" and transition == "LA":</span></span><br><span class="line">        <span class="comment">#     self.dependencies.append(( self.stack[-1],self.stack[-2]))</span></span><br><span class="line">        <span class="comment">#     self.stack.pop(-2)</span></span><br><span class="line">        <span class="comment"># elif len(self.stack) &gt;= 2 and transition == "RA":</span></span><br><span class="line">        <span class="comment">#     self.dependencies.append((self.stack[-2], self.stack[-1]))</span></span><br><span class="line">        <span class="comment">#     self.stack.pop()</span></span><br><span class="line">        <span class="keyword">if</span> self.buffer <span class="keyword">and</span> transition == <span class="string">"S"</span>:</span><br><span class="line">            self.stack.append(self.buffer.pop(<span class="number">0</span>))</span><br><span class="line">        <span class="keyword">elif</span> len(self.stack) &gt;= <span class="number">2</span> <span class="keyword">and</span> transition == <span class="string">"LA"</span>:</span><br><span class="line">            self.dependencies.append((self.stack[<span class="number">-1</span>], self.stack[<span class="number">-2</span>]))</span><br><span class="line">            self.stack.pop(<span class="number">-2</span>)</span><br><span class="line">        <span class="keyword">elif</span> len(self.stack) &gt;= <span class="number">2</span> <span class="keyword">and</span> transition == <span class="string">"RA"</span>:</span><br><span class="line">            self.dependencies.append((self.stack[<span class="number">-2</span>], self.stack[<span class="number">-1</span>]))</span><br><span class="line">            self.stack.pop(<span class="number">-1</span>)</span><br><span class="line">        <span class="comment">### END YOUR CODE</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, transitions)</span>:</span></span><br><span class="line">        <span class="string">"""Applies the provided transitions to this PartialParse</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @param transitions (list of str): The list of transitions in the order they should be applied</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @return dsependencies (list of string tuples): The list of dependencies produced when</span></span><br><span class="line"><span class="string">                                                        parsing the sentence. Represented as a list of</span></span><br><span class="line"><span class="string">                                                        tuples where each tuple is of the form (head, dependent).</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">for</span> transition <span class="keyword">in</span> transitions:</span><br><span class="line">            self.parse_step(transition)</span><br><span class="line">        <span class="keyword">return</span> self.dependencies</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minibatch_parse</span><span class="params">(sentences, model, batch_size)</span>:</span></span><br><span class="line">    <span class="string">"""Parses a list of sentences in minibatches using a model.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    @param sentences (list of list of str): A list of sentences to be parsed</span></span><br><span class="line"><span class="string">                                            (each sentence is a list of words and each word is of type string)</span></span><br><span class="line"><span class="string">    @param model (ParserModel): The model that makes parsing decisions. It is assumed to have a function</span></span><br><span class="line"><span class="string">                                model.predict(partial_parses) that takes in a list of PartialParses as input and</span></span><br><span class="line"><span class="string">                                returns a list of transitions predicted for each parse. That is, after calling</span></span><br><span class="line"><span class="string">                                    transitions = model.predict(partial_parses)</span></span><br><span class="line"><span class="string">                                transitions[i] will be the next transition to apply to partial_parses[i].</span></span><br><span class="line"><span class="string">    @param batch_size (int): The number of PartialParses to include in each minibatch</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    @return dependencies (list of dependency lists): A list where each element is the dependencies</span></span><br><span class="line"><span class="string">                                                    list for a parsed sentence. Ordering should be the</span></span><br><span class="line"><span class="string">                                                    same as in sentences (i.e., dependencies[i] should</span></span><br><span class="line"><span class="string">                                                    contain the parse for sentences[i]).</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    dependencies = []</span><br><span class="line"></span><br><span class="line">    <span class="comment">### YOUR CODE HERE (~8-10 Lines)</span></span><br><span class="line">    <span class="comment">### <span class="doctag">TODO:</span></span></span><br><span class="line">    <span class="comment">###     Implement the minibatch parse algorithm as described in the pdf handout</span></span><br><span class="line">    <span class="comment">###</span></span><br><span class="line">    <span class="comment">###     Note: A shallow copy (as denoted in the PDF) can be made with the "=" sign in python, e.g.</span></span><br><span class="line">    <span class="comment">###                 unfinished_parses = partial_parses[:].</span></span><br><span class="line">    <span class="comment">###             Here `unfinished_parses` is a shallow copy of `partial_parses`.</span></span><br><span class="line">    <span class="comment">###             In Python, a shallow copied list like `unfinished_parses` does not contain new instances</span></span><br><span class="line">    <span class="comment">###             of the object stored in `partial_parses`. Rather both lists refer to the same objects.</span></span><br><span class="line">    <span class="comment">###             In our case, `partial_parses` contains a list of partial parses. `unfinished_parses`</span></span><br><span class="line">    <span class="comment">###             contains references to the same objects. Thus, you should NOT use the `del` operator</span></span><br><span class="line">    <span class="comment">###             to remove objects from the `unfinished_parses` list. This will free the underlying memory that</span></span><br><span class="line">    <span class="comment">###             is being accessed by `partial_parses` and may cause your code to crash.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> batch_size != <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    partial_parses = [PartialParse(s) <span class="keyword">for</span> s <span class="keyword">in</span> sentences]</span><br><span class="line">    unfinished_parses = partial_parses</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> unfinished_parses:</span><br><span class="line">        batch_parser = unfinished_parses[:batch_size]</span><br><span class="line">        <span class="keyword">while</span> batch_parser:</span><br><span class="line">            transitions = model.predict(batch_parser)</span><br><span class="line">            <span class="comment"># print(transitions)</span></span><br><span class="line">            <span class="keyword">for</span> parser,transition <span class="keyword">in</span> zip(batch_parser,transitions):</span><br><span class="line">                parser.parse_step(transition)</span><br><span class="line">            batch_parser = [parser <span class="keyword">for</span> parser <span class="keyword">in</span> batch_parser <span class="keyword">if</span> len(parser.stack) &gt; <span class="number">1</span> <span class="keyword">or</span> parser.buffer]</span><br><span class="line">            <span class="comment"># print(len(batch_parser))</span></span><br><span class="line">        unfinished_parses = unfinished_parses[batch_size:]</span><br><span class="line">    </span><br><span class="line">    dependencies = [parser.dependencies <span class="keyword">for</span> parser <span class="keyword">in</span> partial_parses]</span><br><span class="line">    <span class="comment">### END YOUR CODE</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dependencies</span><br></pre></td></tr></table></figure>
<p>We are now going to train a neural network to predict, given the state of the stack, buffer, and<br>dependencies, which transition should be applied next. First, the model extracts a feature vector<br>representing the current state. They can be represented as a list of integers $[w_1,w_2,\cdots,w_m]$ where m is the number of features and each $0 \leq w_i &lt; |V|$ is the index of a token in the vocabulary (|V| is the vocabulary size). First our network looks up an embedding for each word and concatenates them into a single input vector:</p>
<script type="math/tex; mode=display">x = [E_{w_1},\cdots,E_{w_m} ] \in \mathbb{R}^{dm}</script><p>We then compute our prediction as:</p>
<script type="math/tex; mode=display">
\begin{aligned}
& h = ReLU(xW + b_1) \\
& l = hU + b_2 \\ 
& \hat{y} = softmax(l)
\end{aligned}</script><p>where $h$ is referred to as the hidden layer,$l$ is referred to as the logits, $\hat{y}$ is referred to as the predictions. We will train the model to minimize cross-entropy loss:</p>
<script type="math/tex; mode=display">J(\theta) = CE(y,\hat{y}) = -\sum_{i=1}^{3}y_i log{\hat{y_i}}</script><center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="3.png" width="100%" height="100%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">Figure from cs224n</div>
</center>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">CS224N 2018-19: Homework 3</span></span><br><span class="line"><span class="string">parser_model.py: Feed-Forward Neural Network for Dependency Parsing</span></span><br><span class="line"><span class="string">Sahil Chopra &lt;schopra8@stanford.edu&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParserModel</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="string">""" Feedforward neural network with an embedding layer and single hidden layer.</span></span><br><span class="line"><span class="string">    The ParserModel will predict which transition should be applied to a</span></span><br><span class="line"><span class="string">    given partial parse configuration.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    PyTorch Notes:</span></span><br><span class="line"><span class="string">        - Note that "ParserModel" is a subclass of the "nn.Module" class. In PyTorch all neural networks</span></span><br><span class="line"><span class="string">            are a subclass of this "nn.Module".</span></span><br><span class="line"><span class="string">        - The "__init__" method is where you define all the layers and their respective parameters</span></span><br><span class="line"><span class="string">            (embedding layers, linear layers, dropout layers, etc.).</span></span><br><span class="line"><span class="string">        - "__init__" gets automatically called when you create a new instance of your class, e.g.</span></span><br><span class="line"><span class="string">            when you write "m = ParserModel()".</span></span><br><span class="line"><span class="string">        - Other methods of ParserModel can access variables that have "self." prefix. Thus,</span></span><br><span class="line"><span class="string">            you should add the "self." prefix layers, values, etc. that you want to utilize</span></span><br><span class="line"><span class="string">            in other ParserModel methods.</span></span><br><span class="line"><span class="string">        - For further documentation on "nn.Module" please see https://pytorch.org/docs/stable/nn.html.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, embeddings, n_features=<span class="number">36</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        hidden_size=<span class="number">200</span>, n_classes=<span class="number">3</span>, dropout_prob=<span class="number">0.5</span>)</span>:</span></span><br><span class="line">        <span class="string">""" Initialize the parser model.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @param embeddings (Tensor): word embeddings (num_words, embedding_size)</span></span><br><span class="line"><span class="string">        @param n_features (int): number of input features</span></span><br><span class="line"><span class="string">        @param hidden_size (int): number of hidden units</span></span><br><span class="line"><span class="string">        @param n_classes (int): number of output classes</span></span><br><span class="line"><span class="string">        @param dropout_prob (float): dropout probability</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        super(ParserModel, self).__init__()</span><br><span class="line">        self.n_features = n_features</span><br><span class="line">        self.n_classes = n_classes</span><br><span class="line">        self.dropout_prob = dropout_prob</span><br><span class="line">        self.embed_size = embeddings.shape[<span class="number">1</span>]</span><br><span class="line">        self.hidden_size = hidden_size</span><br><span class="line">        self.pretrained_embeddings = nn.Embedding(embeddings.shape[<span class="number">0</span>], self.embed_size)</span><br><span class="line">        self.pretrained_embeddings.weight = nn.Parameter(torch.tensor(embeddings))</span><br><span class="line"></span><br><span class="line">        <span class="comment">### YOUR CODE HERE (~5 Lines)</span></span><br><span class="line">        <span class="comment">### <span class="doctag">TODO:</span></span></span><br><span class="line">        <span class="comment">###     1) Construct `self.embed_to_hidden` linear layer, initializing the weight matrix</span></span><br><span class="line">        <span class="comment">###         with the `nn.init.xavier_uniform_` function with `gain = 1` (default)</span></span><br><span class="line">        <span class="comment">###     2) Construct `self.dropout` layer.</span></span><br><span class="line">        <span class="comment">###     3) Construct `self.hidden_to_logits` linear layer, initializing the weight matrix</span></span><br><span class="line">        <span class="comment">###         with the `nn.init.xavier_uniform_` function with `gain = 1` (default)</span></span><br><span class="line">        <span class="comment">###</span></span><br><span class="line">        <span class="comment">### Note: Here, we use Xavier Uniform Initialization for our Weight initialization.</span></span><br><span class="line">        <span class="comment">###         It has been shown empirically, that this provides better initial weights</span></span><br><span class="line">        <span class="comment">###         for training networks than random uniform initialization.</span></span><br><span class="line">        <span class="comment">###         For more details checkout this great blogpost:</span></span><br><span class="line">        <span class="comment">###             http://andyljones.tumblr.com/post/110998971763/an-explanation-of-xavier-initialization </span></span><br><span class="line">        <span class="comment">### Hints:</span></span><br><span class="line">        <span class="comment">###     - After you create a linear layer you can access the weight</span></span><br><span class="line">        <span class="comment">###       matrix via:</span></span><br><span class="line">        <span class="comment">###         linear_layer.weight</span></span><br><span class="line">        <span class="comment">###</span></span><br><span class="line">        <span class="comment">### Please see the following docs for support:</span></span><br><span class="line">        <span class="comment">###     Linear Layer: https://pytorch.org/docs/stable/nn.html#torch.nn.Linear</span></span><br><span class="line">        <span class="comment">###     Xavier Init: https://pytorch.org/docs/stable/nn.html#torch.nn.init.xavier_uniform_</span></span><br><span class="line">        <span class="comment">###     Dropout: https://pytorch.org/docs/stable/nn.html#torch.nn.Dropout</span></span><br><span class="line">        </span><br><span class="line">        self.embed_to_hidden = nn.Linear(self.embed_size * self.n_features, hidden_size)</span><br><span class="line">        self.dropout = nn.Dropout(p = self.dropout_prob)</span><br><span class="line">        self.hidden_to_logits = nn.Linear(hidden_size,self.n_classes)</span><br><span class="line">        nn.init.xavier_uniform_(self.embed_to_hidden.weight,gain=<span class="number">1</span>)</span><br><span class="line">        nn.init.xavier_uniform_(self.hidden_to_logits.weight,gain=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">### END YOUR CODE</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">embedding_lookup</span><span class="params">(self, t)</span>:</span></span><br><span class="line">        <span class="string">""" Utilize `self.pretrained_embeddings` to map input `t` from input tokens (integers)</span></span><br><span class="line"><span class="string">            to embedding vectors.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            PyTorch Notes:</span></span><br><span class="line"><span class="string">                - `self.pretrained_embeddings` is a torch.nn.Embedding object that we defined in __init__</span></span><br><span class="line"><span class="string">                - Here `t` is a tensor where each row represents a list of features. Each feature is represented by an integer (input token).</span></span><br><span class="line"><span class="string">                - In PyTorch the Embedding object, e.g. `self.pretrained_embeddings`, allows you to</span></span><br><span class="line"><span class="string">                    go from an index to embedding. Please see the documentation (https://pytorch.org/docs/stable/nn.html#torch.nn.Embedding)</span></span><br><span class="line"><span class="string">                    to learn how to use `self.pretrained_embeddings` to extract the embeddings for your tensor `t`.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            @param t (Tensor): input tensor of tokens (batch_size, n_features)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            @return x (Tensor): tensor of embeddings for words represented in t</span></span><br><span class="line"><span class="string">                                (batch_size, n_features * embed_size)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment">### YOUR CODE HERE (~1-3 Lines)</span></span><br><span class="line">        <span class="comment">### <span class="doctag">TODO:</span></span></span><br><span class="line">        <span class="comment">###     1) Use `self.pretrained_embeddings` to lookup the embeddings for the input tokens in `t`.</span></span><br><span class="line">        <span class="comment">###     2) After you apply the embedding lookup, you will have a tensor shape (batch_size, n_features, embedding_size).</span></span><br><span class="line">        <span class="comment">###         Use the tensor `view` method to reshape the embeddings tensor to (batch_size, n_features * embedding_size)</span></span><br><span class="line">        <span class="comment">###</span></span><br><span class="line">        <span class="comment">### Note: In order to get batch_size, you may need use the tensor .size() function:</span></span><br><span class="line">        <span class="comment">###         https://pytorch.org/docs/stable/tensors.html#torch.Tensor.size</span></span><br><span class="line">        <span class="comment">###</span></span><br><span class="line">        <span class="comment">###  Please see the following docs for support:</span></span><br><span class="line">        <span class="comment">###     Embedding Layer: https://pytorch.org/docs/stable/nn.html#torch.nn.Embedding</span></span><br><span class="line">        <span class="comment">###     View: https://pytorch.org/docs/stable/tensors.html#torch.Tensor.view</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">### END YOUR CODE</span></span><br><span class="line">        tmp_features = self.pretrained_embeddings(t)</span><br><span class="line">        shape = tmp_features.size()</span><br><span class="line">        x = tmp_features.view(shape[<span class="number">0</span>],shape[<span class="number">1</span>]*shape[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, t)</span>:</span></span><br><span class="line">        <span class="string">""" Run the model forward.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            Note that we will not apply the softmax function here because it is included in the loss function nn.CrossEntropyLoss</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            PyTorch Notes:</span></span><br><span class="line"><span class="string">                - Every nn.Module object (PyTorch model) has a `forward` function.</span></span><br><span class="line"><span class="string">                - When you apply your nn.Module to an input tensor `t` this function is applied to the tensor.</span></span><br><span class="line"><span class="string">                    For example, if you created an instance of your ParserModel and applied it to some `t` as follows,</span></span><br><span class="line"><span class="string">                    the `forward` function would called on `t` and the result would be stored in the `output` variable:</span></span><br><span class="line"><span class="string">                        model = ParserModel()</span></span><br><span class="line"><span class="string">                        output = model(t) # this calls the forward function</span></span><br><span class="line"><span class="string">                - For more details checkout: https://pytorch.org/docs/stable/nn.html#torch.nn.Module.forward</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @param t (Tensor): input tensor of tokens (batch_size, n_features)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @return logits (Tensor): tensor of predictions (output after applying the layers of the network)</span></span><br><span class="line"><span class="string">                                 without applying softmax (batch_size, n_classes)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment">###  YOUR CODE HERE (~3-5 lines)</span></span><br><span class="line">        <span class="comment">### <span class="doctag">TODO:</span></span></span><br><span class="line">        <span class="comment">###     1) Apply `self.embedding_lookup` to `t` to get the embeddings</span></span><br><span class="line">        <span class="comment">###     2) Apply `embed_to_hidden` linear layer to the embeddings</span></span><br><span class="line">        <span class="comment">###     3) Apply relu non-linearity to the output of step 2 to get the hidden units.</span></span><br><span class="line">        <span class="comment">###     4) Apply dropout layer to the output of step 3.</span></span><br><span class="line">        <span class="comment">###     5) Apply `hidden_to_logits` layer to the output of step 4 to get the logits.</span></span><br><span class="line">        <span class="comment">###</span></span><br><span class="line">        <span class="comment">### Note: We do not apply the softmax to the logits here, because</span></span><br><span class="line">        <span class="comment">### the loss function (torch.nn.CrossEntropyLoss) applies it more efficiently.</span></span><br><span class="line">        <span class="comment">###</span></span><br><span class="line">        <span class="comment">### Please see the following docs for support:</span></span><br><span class="line">        <span class="comment">###     ReLU: https://pytorch.org/docs/stable/nn.html?highlight=relu#torch.nn.functional.relu</span></span><br><span class="line">        x = self.embedding_lookup(t)</span><br><span class="line">        x = self.embed_to_hidden(x)</span><br><span class="line">        x = nn.functional.relu(x)</span><br><span class="line">        x = self.dropout(x)</span><br><span class="line">        logits = self.hidden_to_logits(x)</span><br><span class="line"></span><br><span class="line">        <span class="comment">### END YOUR CODE</span></span><br><span class="line">        <span class="keyword">return</span> logits</span><br></pre></td></tr></table></figure>
<h2 id="Runing-the-model"><a href="#Runing-the-model" class="headerlink" title="Runing the model"></a>Runing the model</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">CS224N 2018-19: Homework 3</span></span><br><span class="line"><span class="string">run.py: Run the dependency parser.</span></span><br><span class="line"><span class="string">Sahil Chopra &lt;schopra8@stanford.edu&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn, optim</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> parser_model <span class="keyword">import</span> ParserModel</span><br><span class="line"><span class="keyword">from</span> utils.parser_utils <span class="keyword">import</span> minibatches, load_and_preprocess_data, AverageMeter</span><br><span class="line"></span><br><span class="line"><span class="comment"># -----------------</span></span><br><span class="line"><span class="comment"># Primary Functions</span></span><br><span class="line"><span class="comment"># -----------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(parser, train_data, dev_data, output_path, batch_size=<span class="number">1024</span>, n_epochs=<span class="number">10</span>, lr=<span class="number">0.0005</span>)</span>:</span></span><br><span class="line">    <span class="string">""" Train the neural dependency parser.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    @param parser (Parser): Neural Dependency Parser</span></span><br><span class="line"><span class="string">    @param train_data ():</span></span><br><span class="line"><span class="string">    @param dev_data ():</span></span><br><span class="line"><span class="string">    @param output_path (str): Path to which model weights and results are written.</span></span><br><span class="line"><span class="string">    @param batch_size (int): Number of examples in a single batch</span></span><br><span class="line"><span class="string">    @param n_epochs (int): Number of training epochs</span></span><br><span class="line"><span class="string">    @param lr (float): Learning rate</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    best_dev_UAS = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">### YOUR CODE HERE (~2-7 lines)</span></span><br><span class="line">    <span class="comment">### <span class="doctag">TODO:</span></span></span><br><span class="line">    <span class="comment">###      1) Construct Adam Optimizer in variable `optimizer`</span></span><br><span class="line">    <span class="comment">###      2) Construct the Cross Entropy Loss Function in variable `loss_func`</span></span><br><span class="line">    <span class="comment">###</span></span><br><span class="line">    <span class="comment">### Hint: Use `parser.model.parameters()` to pass optimizer</span></span><br><span class="line">    <span class="comment">###       necessary parameters to tune.</span></span><br><span class="line">    <span class="comment">### Please see the following docs for support:</span></span><br><span class="line">    <span class="comment">###     Adam Optimizer: https://pytorch.org/docs/stable/optim.html</span></span><br><span class="line">    <span class="comment">###     Cross Entropy Loss: https://pytorch.org/docs/stable/nn.html#crossentropyloss</span></span><br><span class="line">    optimizer = optim.Adam(parser.model.parameters(),lr=lr)</span><br><span class="line">    loss_func = nn.CrossEntropyLoss()</span><br><span class="line">    <span class="comment">### END YOUR CODE</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(n_epochs):</span><br><span class="line">        print(<span class="string">"Epoch &#123;:&#125; out of &#123;:&#125;"</span>.format(epoch + <span class="number">1</span>, n_epochs))</span><br><span class="line">        dev_UAS = train_for_epoch(parser, train_data, dev_data, optimizer, loss_func, batch_size)</span><br><span class="line">        <span class="keyword">if</span> dev_UAS &gt; best_dev_UAS:</span><br><span class="line">            best_dev_UAS = dev_UAS</span><br><span class="line">            print(<span class="string">"New best dev UAS! Saving model."</span>)</span><br><span class="line">            torch.save(parser.model.state_dict(), output_path)</span><br><span class="line">        print(<span class="string">""</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_for_epoch</span><span class="params">(parser, train_data, dev_data, optimizer, loss_func, batch_size)</span>:</span></span><br><span class="line">    <span class="string">""" Train the neural dependency parser for single epoch.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Note: In PyTorch we can signify train versus test and automatically have</span></span><br><span class="line"><span class="string">    the Dropout Layer applied and removed, accordingly, by specifying</span></span><br><span class="line"><span class="string">    whether we are training, `model.train()`, or evaluating, `model.eval()`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    @param parser (Parser): Neural Dependency Parser</span></span><br><span class="line"><span class="string">    @param train_data ():</span></span><br><span class="line"><span class="string">    @param dev_data ():</span></span><br><span class="line"><span class="string">    @param optimizer (nn.Optimizer): Adam Optimizer</span></span><br><span class="line"><span class="string">    @param loss_func (nn.CrossEntropyLoss): Cross Entropy Loss Function</span></span><br><span class="line"><span class="string">    @param batch_size (int): batch size</span></span><br><span class="line"><span class="string">    @param lr (float): learning rate</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    @return dev_UAS (float): Unlabeled Attachment Score (UAS) for dev data</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    parser.model.train() <span class="comment"># Places model in "train" mode, i.e. apply dropout layer</span></span><br><span class="line">    n_minibatches = math.ceil(len(train_data) / batch_size)</span><br><span class="line">    loss_meter = AverageMeter()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> tqdm(total=(n_minibatches)) <span class="keyword">as</span> prog:</span><br><span class="line">        <span class="keyword">for</span> i, (train_x, train_y) <span class="keyword">in</span> enumerate(minibatches(train_data, batch_size)):</span><br><span class="line">            optimizer.zero_grad()   <span class="comment"># remove any baggage in the optimizer</span></span><br><span class="line">            loss = <span class="number">0.</span> <span class="comment"># store loss for this batch here</span></span><br><span class="line">            train_x = torch.from_numpy(train_x).long()</span><br><span class="line">            train_y = torch.from_numpy(train_y.nonzero()[<span class="number">1</span>]).long()</span><br><span class="line"></span><br><span class="line">            <span class="comment">### YOUR CODE HERE (~5-10 lines)</span></span><br><span class="line">            <span class="comment">### <span class="doctag">TODO:</span></span></span><br><span class="line">            <span class="comment">###      1) Run train_x forward through model to produce `logits`</span></span><br><span class="line">            <span class="comment">###      2) Use the `loss_func` parameter to apply the PyTorch CrossEntropyLoss function.</span></span><br><span class="line">            <span class="comment">###         This will take `logits` and `train_y` as inputs. It will output the CrossEntropyLoss</span></span><br><span class="line">            <span class="comment">###         between softmax(`logits`) and `train_y`. Remember that softmax(`logits`)</span></span><br><span class="line">            <span class="comment">###         are the predictions (y^ from the PDF).</span></span><br><span class="line">            <span class="comment">###      3) Backprop losses</span></span><br><span class="line">            <span class="comment">###      4) Take step with the optimizer</span></span><br><span class="line">            <span class="comment">### Please see the following docs for support:</span></span><br><span class="line">            <span class="comment">###     Optimizer Step: https://pytorch.org/docs/stable/optim.html#optimizer-step</span></span><br><span class="line">            logits = parser.model.forward(train_x)</span><br><span class="line">            loss = loss_func(logits,train_y)</span><br><span class="line">            loss.backward()</span><br><span class="line">            optimizer.step()</span><br><span class="line"></span><br><span class="line">            <span class="comment">### END YOUR CODE</span></span><br><span class="line">            prog.update(<span class="number">1</span>)</span><br><span class="line">            loss_meter.update(loss.item())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"Average Train Loss: &#123;&#125;"</span>.format(loss_meter.avg))</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Evaluating on dev set"</span>,)</span><br><span class="line">    parser.model.eval() <span class="comment"># Places model in "eval" mode, i.e. don't apply dropout layer</span></span><br><span class="line">    dev_UAS, _ = parser.parse(dev_data)</span><br><span class="line">    print(<span class="string">"- dev UAS: &#123;:.2f&#125;"</span>.format(dev_UAS * <span class="number">100.0</span>))</span><br><span class="line">    <span class="keyword">return</span> dev_UAS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment"># Note: Set debug to False, when training on entire corpus</span></span><br><span class="line">    debug = <span class="keyword">True</span></span><br><span class="line">    <span class="comment"># debug = False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span>(torch.__version__ == <span class="string">"1.0.0"</span>),  <span class="string">"Please install torch version 1.0.0"</span></span><br><span class="line"></span><br><span class="line">    print(<span class="number">80</span> * <span class="string">"="</span>)</span><br><span class="line">    print(<span class="string">"INITIALIZING"</span>)</span><br><span class="line">    print(<span class="number">80</span> * <span class="string">"="</span>)</span><br><span class="line">    parser, embeddings, train_data, dev_data, test_data = load_and_preprocess_data(debug)</span><br><span class="line"></span><br><span class="line">    start = time.time()</span><br><span class="line">    model = ParserModel(embeddings)</span><br><span class="line">    parser.model = model</span><br><span class="line">    print(<span class="string">"took &#123;:.2f&#125; seconds\n"</span>.format(time.time() - start))</span><br><span class="line"></span><br><span class="line">    print(<span class="number">80</span> * <span class="string">"="</span>)</span><br><span class="line">    print(<span class="string">"TRAINING"</span>)</span><br><span class="line">    print(<span class="number">80</span> * <span class="string">"="</span>)</span><br><span class="line">    output_dir = <span class="string">"results/&#123;:%Y%m%d_%H%M%S&#125;/"</span>.format(datetime.now())</span><br><span class="line">    output_path = output_dir + <span class="string">"model.weights"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(output_dir):</span><br><span class="line">        os.makedirs(output_dir)</span><br><span class="line"></span><br><span class="line">    train(parser, train_data, dev_data, output_path, batch_size=<span class="number">1024</span>, n_epochs=<span class="number">10</span>, lr=<span class="number">0.0005</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> debug:</span><br><span class="line">        print(<span class="number">80</span> * <span class="string">"="</span>)</span><br><span class="line">        print(<span class="string">"TESTING"</span>)</span><br><span class="line">        print(<span class="number">80</span> * <span class="string">"="</span>)</span><br><span class="line">        print(<span class="string">"Restoring the best model weights found on the dev set"</span>)</span><br><span class="line">        parser.model.load_state_dict(torch.load(output_path))</span><br><span class="line">        print(<span class="string">"Final evaluation on test set"</span>,)</span><br><span class="line">        parser.model.eval()</span><br><span class="line">        UAS, dependencies = parser.parse(test_data)</span><br><span class="line">        print(<span class="string">"- test UAS: &#123;:.2f&#125;"</span>.format(UAS * <span class="number">100.0</span>))</span><br><span class="line">        print(<span class="string">"Done!"</span>)</span><br></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li>slides and course notes of <a href="http://web.stanford.edu/class/cs224n/" target="_blank" rel="noopener">cs224n</a></li>
</ol>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>cs224n</tag>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title>CS224n Assignment 2</title>
    <url>/CS224n-Assignment-2/2019/12/07/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> utils.gradcheck <span class="keyword">import</span> gradcheck_naive</span><br><span class="line"><span class="keyword">from</span> utils.utils <span class="keyword">import</span> normalizeRows, softmax</span><br></pre></td></tr></table></figure>
<h2 id="Helper-functions"><a href="#Helper-functions" class="headerlink" title="Helper functions"></a>Helper functions</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Compute the sigmoid function for the input here.</span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    x -- A scalar or numpy array.</span></span><br><span class="line"><span class="string">    Return:</span></span><br><span class="line"><span class="string">    s -- sigmoid(x)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">### YOUR CODE HERE</span></span><br><span class="line">    s = <span class="number">1.</span>/(<span class="number">1.</span> + np.exp(-x))</span><br><span class="line">    <span class="comment">### END YOUR CODE</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getNegativeSamples</span><span class="params">(outsideWordIdx, dataset, K)</span>:</span></span><br><span class="line">    <span class="string">""" Samples K indexes which are not the outsideWordIdx """</span></span><br><span class="line"></span><br><span class="line">    negSampleWordIndices = [<span class="keyword">None</span>] * K</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(K):</span><br><span class="line">        newidx = dataset.sampleTokenIdx()</span><br><span class="line">        <span class="keyword">while</span> newidx == outsideWordIdx:</span><br><span class="line">            newidx = dataset.sampleTokenIdx()</span><br><span class="line">        negSampleWordIndices[k] = newidx</span><br><span class="line">    <span class="keyword">return</span> negSampleWordIndices</span><br></pre></td></tr></table></figure>
<h2 id="Naive-Softmax-Loss-And-Its-Gradient"><a href="#Naive-Softmax-Loss-And-Its-Gradient" class="headerlink" title="Naive Softmax Loss And Its Gradient"></a>Naive Softmax Loss And Its Gradient</h2><p>In word2vec, the conditional probability distribution is given by taking vector dot-products and applying the softmax function:</p>
<script type="math/tex; mode=display">P(o\|c) = \frac{exp^{u_o^{T}v_c}}{\sum_{w\in v}exp^{u_w^{T}v_c}}</script><ul>
<li>$u_o$ is the ‘outside’ vector representing outside word o</li>
<li>$v_c$ is the ‘center’ vector representing center word c</li>
</ul>
<p>The Cross Entropy Loss between the true (discrete) probability distribution p and another distribution q is:</p>
<script type="math/tex; mode=display">-\sum_i p_i log(q_i)</script><p>So that the naive-softmax loss for word2vec given in following equation is the same as the cross-entropy loss between $y$ and $\hat{y}$:</p>
<script type="math/tex; mode=display">-\sum_{w \in Vocab} y_w log(\hat{y}_w) = -log(\hat{y}_o)</script><p>For the backpropagation, lets introduce the intermediate variable $p$, which is a vector of the (normalized) probabilities. The loss for one example is:</p>
<script type="math/tex; mode=display">p_k = \frac{e^{f_k}}{ \sum_j e^{f_j} } \hspace{1in} L_i =-\log\left(p_{y_i}\right)</script><p>We now wish to understand how the computed scores inside $f$ should change to decrease the loss $L_i$  that this example contributes to the full objective. In other words, we want to derive the gradient $\frac{\partial L_i}{\partial f_k}$. The loss $L_i$ is computed from $p$ which in turn depends on $f$.</p>
<script type="math/tex; mode=display">\frac{\partial L_i }{ \partial f_k } = p_k - \mathbb{1}(y_i = k)</script><p>Notice how elegant and simple this expression is. Suppose the probabilities we computed were <code>p = [0.2, 0.3, 0.5]</code>, and that the correct class was the middle one (with probability <code>0.3</code>). According to this derivation the gradient on the scores would be <code>df = [0.2, -0.7, 0.5]</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">naiveSoftmaxLossAndGradient</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    centerWordVec,</span></span></span><br><span class="line"><span class="function"><span class="params">    outsideWordIdx,</span></span></span><br><span class="line"><span class="function"><span class="params">    outsideVectors,</span></span></span><br><span class="line"><span class="function"><span class="params">    dataset</span></span></span><br><span class="line"><span class="function"><span class="params">)</span>:</span></span><br><span class="line">    <span class="string">""" Naive Softmax loss &amp; gradient function for word2vec models</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Implement the naive softmax loss and gradients between a center word's </span></span><br><span class="line"><span class="string">    embedding and an outside word's embedding. This will be the building block</span></span><br><span class="line"><span class="string">    for our word2vec models.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    centerWordVec -- numpy ndarray, center word's embedding</span></span><br><span class="line"><span class="string">                    (v_c in the pdf handout)</span></span><br><span class="line"><span class="string">    outsideWordIdx -- integer, the index of the outside word</span></span><br><span class="line"><span class="string">                    (o of u_o in the pdf handout)</span></span><br><span class="line"><span class="string">    outsideVectors -- outside vectors (rows of matrix) for all words in vocab</span></span><br><span class="line"><span class="string">                      (U in the pdf handout)</span></span><br><span class="line"><span class="string">    dataset -- needed for negative sampling, unused here.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Return:</span></span><br><span class="line"><span class="string">    loss -- naive softmax loss</span></span><br><span class="line"><span class="string">    gradCenterVec -- the gradient with respect to the center word vector</span></span><br><span class="line"><span class="string">                     (dJ / dv_c in the pdf handout)</span></span><br><span class="line"><span class="string">    gradOutsideVecs -- the gradient with respect to all the outside word vectors</span></span><br><span class="line"><span class="string">                    (dJ / dU)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">### YOUR CODE HERE</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">### Please use the provided softmax function (imported earlier in this file)</span></span><br><span class="line">    <span class="comment">### This numerically stable implementation helps you avoid issues pertaining</span></span><br><span class="line">    <span class="comment">### to integer overflow. </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># centerWordVec:  (embedding_dim,1)</span></span><br><span class="line">    <span class="comment"># outsideVectors: (vocab_size,embedding_dim)</span></span><br><span class="line"></span><br><span class="line">    scores = np.matmul(outsideVectors, centerWordVec)   <span class="comment"># (vocab_size,1)</span></span><br><span class="line">    <span class="comment"># print(scores.shape)</span></span><br><span class="line">    probs = softmax(scores)                          <span class="comment"># (vocab_size,1)  y_hat</span></span><br><span class="line"></span><br><span class="line">    loss = -np.log(probs[outsideWordIdx])</span><br><span class="line"></span><br><span class="line">    dscores = probs.copy()   <span class="comment"># (vocab_size,1)</span></span><br><span class="line">    dscores[outsideWordIdx] = dscores[outsideWordIdx] - <span class="number">1</span>   <span class="comment">#  y_hat minus y</span></span><br><span class="line">    gradCenterVec = np.matmul(outsideVectors.T, dscores)  <span class="comment"># (embedding_dim,1)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(dscores.shape) # (5,)</span></span><br><span class="line">    <span class="comment"># print(centerWordVec.shape) # (3,)</span></span><br><span class="line">    <span class="comment"># exit()</span></span><br><span class="line"></span><br><span class="line">    gradOutsideVecs = np.outer(dscores, centerWordVec) <span class="comment"># (vocab_size,embedding_dim)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">### END YOUR CODE</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> loss, gradCenterVec, gradOutsideVecs</span><br></pre></td></tr></table></figure>
<h2 id="Negative-Sampling-Loss-And-Its-Gradient"><a href="#Negative-Sampling-Loss-And-Its-Gradient" class="headerlink" title="Negative Sampling Loss And Its Gradient"></a>Negative Sampling Loss And Its Gradient</h2><p>Now we shall consider the Negative Sampling loss, which is an alternative to the Naive Softmax loss. Assume that K negative samples (words) are drawn from the vocabulary. For simplicity of notation we shall refer to them as $w_1,w_2,\cdots,w_k$ and their outside vectors as $u_1,\cdots,u_k$. Note that $o \in {w_1, \cdots, w_k}$. For a center word c and an outside word o, the negative sampling loss function is given by:</p>
<script type="math/tex; mode=display">J_{neg-sample}(v_c,o,U) = -log(\sigma(u_o^{T}v_c)) - \sum_{k=1}^{k}log(\sigma(-u_k^{T},v_c))</script><p>The sigmoid function and its gradient is as follows:</p>
<script type="math/tex; mode=display">\sigma(x) = \frac{1}{1+e^{-x}} \\\\
\rightarrow \hspace{0.3in} \frac{d\sigma(x)}{dx} = \frac{e^{-x}}{(1+e^{-x})^2} = \left( \frac{1 + e^{-x} - 1}{1 + e^{-x}} \right) \left( \frac{1}{1+e^{-x}} \right) 
= \left( 1 - \sigma(x) \right) \sigma(x)</script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">negSamplingLossAndGradient</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    centerWordVec,</span></span></span><br><span class="line"><span class="function"><span class="params">    outsideWordIdx,</span></span></span><br><span class="line"><span class="function"><span class="params">    outsideVectors,</span></span></span><br><span class="line"><span class="function"><span class="params">    dataset,</span></span></span><br><span class="line"><span class="function"><span class="params">    K=<span class="number">10</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span>:</span></span><br><span class="line">    <span class="string">""" Negative sampling loss function for word2vec models</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Implement the negative sampling loss and gradients for a centerWordVec</span></span><br><span class="line"><span class="string">    and a outsideWordIdx word vector as a building block for word2vec</span></span><br><span class="line"><span class="string">    models. K is the number of negative samples to take.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Note: The same word may be negatively sampled multiple times. For</span></span><br><span class="line"><span class="string">    example if an outside word is sampled twice, you shall have to</span></span><br><span class="line"><span class="string">    double count the gradient with respect to this word. Thrice if</span></span><br><span class="line"><span class="string">    it was sampled three times, and so forth.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments/Return Specifications: same as naiveSoftmaxLossAndGradient</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Negative sampling of words is done for you. Do not modify this if you</span></span><br><span class="line">    <span class="comment"># wish to match the autograder and receive points!</span></span><br><span class="line">    negSampleWordIndices = getNegativeSamples(outsideWordIdx, dataset, K)</span><br><span class="line">    indices = [outsideWordIdx] + negSampleWordIndices</span><br><span class="line"></span><br><span class="line">    <span class="comment">### YOUR CODE HERE</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">### Please use your implementation of sigmoid in here.</span></span><br><span class="line">    gradCenterVec   = np.zeros(centerWordVec.shape)</span><br><span class="line">    gradOutsideVecs = np.zeros(outsideVectors.shape)</span><br><span class="line">    loss = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">    u_o = outsideVectors[outsideWordIdx]</span><br><span class="line">    z = sigmoid(np.dot(u_o,centerWordVec))</span><br><span class="line">    loss -= np.log(z)</span><br><span class="line">    gradCenterVec += u_o*(z<span class="number">-1</span>)</span><br><span class="line">    gradOutsideVecs[outsideWordIdx] = centerWordVec*(z<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(K):</span><br><span class="line">        neg_id = indices[i+<span class="number">1</span>]</span><br><span class="line">        u_k = outsideVectors[neg_id]</span><br><span class="line">        z = sigmoid(-np.dot(u_k,centerWordVec))</span><br><span class="line">        loss -= np.log(z)</span><br><span class="line">        gradCenterVec += u_k*(<span class="number">1</span>-z)</span><br><span class="line">        gradOutsideVecs[neg_id] += centerWordVec*(<span class="number">1</span>-z)</span><br><span class="line">    <span class="comment">### END YOUR CODE</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> loss, gradCenterVec, gradOutsideVecs</span><br></pre></td></tr></table></figure>
<h2 id="SkipGram"><a href="#SkipGram" class="headerlink" title="SkipGram"></a>SkipGram</h2><p>Suppose the center word is $c = w_t$ and the context window is $[w_{t-m},\cdots,w_{t-1},\cdots, w_{t}, \cdots, w_{t+1}, \cdots,w_{t+m} ]$, where m is the context window size. Recall that for the skip-gram version of word2vec, the total loss for the context window is:</p>
<script type="math/tex; mode=display">J_{skip-gram} (v_c,w_{t−m},\cdots,w_{t+m}, U) = \sum_{-m \leq j \leq m, j \neq 0} J(v_c,w_{t+j},U)</script><p>Here, $J(v_c,w_{t+j},U)$ represents an arbitrary loss term for the center word $c = w_t$ and outside word</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">skipgram</span><span class="params">(currentCenterWord, windowSize, outsideWords, word2Ind,</span></span></span><br><span class="line"><span class="function"><span class="params">             centerWordVectors, outsideVectors, dataset,</span></span></span><br><span class="line"><span class="function"><span class="params">             word2vecLossAndGradient=naiveSoftmaxLossAndGradient)</span>:</span></span><br><span class="line">    <span class="string">""" Skip-gram model in word2vec</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Implement the skip-gram model in this function.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    currentCenterWord -- a string of the current center word</span></span><br><span class="line"><span class="string">    windowSize -- integer, context window size</span></span><br><span class="line"><span class="string">    outsideWords -- list of no more than 2*windowSize strings, the outside words</span></span><br><span class="line"><span class="string">    word2Ind -- a dictionary that maps words to their indices in</span></span><br><span class="line"><span class="string">              the word vector list</span></span><br><span class="line"><span class="string">    centerWordVectors -- center word vectors (as rows) for all words in vocab</span></span><br><span class="line"><span class="string">                        (V in pdf handout)</span></span><br><span class="line"><span class="string">    outsideVectors -- outside word vectors (as rows) for all words in vocab</span></span><br><span class="line"><span class="string">                    (U in pdf handout)</span></span><br><span class="line"><span class="string">    word2vecLossAndGradient -- the loss and gradient function for</span></span><br><span class="line"><span class="string">                               a prediction vector given the outsideWordIdx</span></span><br><span class="line"><span class="string">                               word vectors, could be one of the two</span></span><br><span class="line"><span class="string">                               loss functions you implemented above.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Return:</span></span><br><span class="line"><span class="string">    loss -- the loss function value for the skip-gram model</span></span><br><span class="line"><span class="string">            (J in the pdf handout)</span></span><br><span class="line"><span class="string">    gradCenterVecs -- the gradient with respect to the center word vectors</span></span><br><span class="line"><span class="string">            (dJ / dV in the pdf handout)</span></span><br><span class="line"><span class="string">    gradOutsideVectors -- the gradient with respect to the outside word vectors</span></span><br><span class="line"><span class="string">                        (dJ / dU in the pdf handout)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    loss = <span class="number">0.0</span></span><br><span class="line">    gradCenterVecs = np.zeros(centerWordVectors.shape)</span><br><span class="line">    gradOutsideVectors = np.zeros(outsideVectors.shape)</span><br><span class="line"></span><br><span class="line">    <span class="comment">### YOUR CODE HERE</span></span><br><span class="line">    center_id = word2Ind[currentCenterWord]</span><br><span class="line">    centerWordVec = centerWordVectors[center_id]</span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> outsideWords:</span><br><span class="line">        outside_id = word2Ind[word]</span><br><span class="line">        loss_mini, gradCenter_mini, gradOutside_mini= \</span><br><span class="line">        word2vecLossAndGradient(centerWordVec=centerWordVec,</span><br><span class="line">            outsideWordIdx=outside_id,outsideVectors=outsideVectors,dataset=dataset)</span><br><span class="line">        loss += loss_mini</span><br><span class="line">        <span class="comment"># print(gradCenterVecs[center_id].shape, gradCenter_mini.shape)</span></span><br><span class="line">        <span class="comment"># exit()</span></span><br><span class="line">        gradCenterVecs[center_id] += gradCenter_mini</span><br><span class="line">        gradOutsideVectors += gradOutside_mini</span><br><span class="line">    <span class="comment">### END YOUR CODE</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> loss, gradCenterVecs, gradOutsideVectors</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>cs224n</tag>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title>Computational Graph</title>
    <url>/Computational-Graph/2019/12/06/</url>
    <content><![CDATA[<h2 id="General-Computation-Graph"><a href="#General-Computation-Graph" class="headerlink" title="General Computation Graph"></a>General Computation Graph</h2><ol>
<li>Fprop: visit nodes in <strong>topological sort</strong> order<ul>
<li>Compute value of node given predecessors</li>
</ul>
</li>
<li>Bprop:<ul>
<li>initialize output gradient = 1 </li>
<li>visit nodes in reverse order:<ul>
<li>Compute gradient wrt each node using gradient wrt successors<script type="math/tex; mode=display">{y_1,y_2, \cdots, y_n} = successors of x</script><script type="math/tex; mode=display">\frac{\partial z}{\partial x} = \sum_{i=1}^{n}\frac{\partial z}{\partial y_i}\frac{\partial y_i}{\partial x}</script>Done correctly, big O() complexity of fprop and bprop is the same</li>
</ul>
</li>
</ul>
</li>
</ol>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="1.png" width="50%" height="50%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">picture from lecture note of cs224n</div>
</center>

<h2 id="Automatic-Differentiation"><a href="#Automatic-Differentiation" class="headerlink" title="Automatic Differentiation"></a>Automatic Differentiation</h2><ul>
<li>The gradient computation canbe automatically inferred from the symbolic expression of the fprop</li>
<li>Each node type needs to know how to compute its output and how to compute the gradient wrt its inputs given the gradient wrt its output</li>
<li>Modern DL frameworks(Tensorflow, PyTorch, etc.) do backpropagation for you but mainly leave layer/node writer to hand-calculate the local derivative</li>
</ul>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="2.png" width="50%" height="50%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">picture from lecture note of cs224n</div>
</center>



<h2 id="Example-Sigmoid"><a href="#Example-Sigmoid" class="headerlink" title="Example: Sigmoid"></a>Example: Sigmoid</h2><p>The gates we introduced above are relatively arbitrary. Any kind of <strong>differentiable function</strong> can act as a gate, and we can group multiple gates into a single gate, or decompose a function into multiple gates whenever it is convenient. Lets look at another expression that illustrates this point:</p>
<script type="math/tex; mode=display">f(w,x) = \frac{1}{1+e^{-(w_0x_0 + w_1x_1 + w_2)}}</script><p>We have the knowlege of derivatives</p>
<script type="math/tex; mode=display">\begin{aligned}
f(x) = \frac{1}{x} \hspace{1in} & \rightarrow \hspace{1in} \frac{df}{dx} = -1/x^2 \\
f_c(x) = c + x\hspace{1in}  & \rightarrow  \hspace{1in} \frac{df}{dx} = 1 \\
f(x) = e^x\hspace{1in}  & \rightarrow  \hspace{1in} \frac{df}{dx} = e^x \\
f_a(x) = ax\hspace{1in} & \rightarrow  \hspace{1in} \frac{df}{dx} = a \\
\end{aligned}</script><p>the picture blow shows the visual representation of the computation. The forward pass computes values from inputs to output (shown in green). The backward pass then performs backpropagation which starts at the end and recursively applies the chain rule to compute the gradients (shown in red) all the way to the inputs of the circuit. The gradients can be thought of as flowing backwards through the circuit.</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="4.png" width="80%" height="80%">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">picture from lecture note of cs231n</div>
</center>



<p>It turns out that the derivative of the sigmoid function with respect to its input simplifies if you perform the derivation (after a fun tricky part where we add and subtract a 1 in the numerator):</p>
<script type="math/tex; mode=display">\sigma(x) = \frac{1}{1+e^{-x}} \\\\
\rightarrow \hspace{0.3in} \frac{d\sigma(x)}{dx} = \frac{e^{-x}}{(1+e^{-x})^2} = \left( \frac{1 + e^{-x} - 1}{1 + e^{-x}} \right) \left( \frac{1}{1+e^{-x}} \right) 
= \left( 1 - \sigma(x) \right) \sigma(x)</script><p>As we see, the gradient turns out to simplify and becomes surprisingly simple. For example, the sigmoid expression receives the input 1.0 and computes the output 0.73 during the forward pass. The derivation above shows that the local gradient would simply be (1 - 0.73) * 0.73 = 0.2, as the circuit computed before (see the image above), except this way it would be done with a single, simple and efficient expression (and with less numerical issues). Therefore, in any real practical application it would be very useful to group these operations into a single gate. Lets see the backprop for this neuron in code:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">w = [<span class="number">2</span>,<span class="number">-3</span>,<span class="number">-3</span>] <span class="comment"># assume some random weights and data</span></span><br><span class="line">x = [<span class="number">-1</span>, <span class="number">-2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># forward pass</span></span><br><span class="line">dot = w[<span class="number">0</span>]*x[<span class="number">0</span>] + w[<span class="number">1</span>]*x[<span class="number">1</span>] + w[<span class="number">2</span>]</span><br><span class="line">f = <span class="number">1.0</span> / (<span class="number">1</span> + math.exp(-dot)) <span class="comment"># sigmoid function</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># backward pass through the neuron (backpropagation)</span></span><br><span class="line">ddot = (<span class="number">1</span> - f) * f <span class="comment"># gradient on dot variable, using the sigmoid gradient derivation</span></span><br><span class="line">dx = [w[<span class="number">0</span>] * ddot, w[<span class="number">1</span>] * ddot] <span class="comment"># backprop into x</span></span><br><span class="line">dw = [x[<span class="number">0</span>] * ddot, x[<span class="number">1</span>] * ddot, <span class="number">1.0</span> * ddot] <span class="comment"># backprop into w</span></span><br><span class="line"><span class="comment"># we're done! we have the gradients on the inputs to the circuit</span></span><br></pre></td></tr></table></figure>
<h2 id="Staged-computation"><a href="#Staged-computation" class="headerlink" title="Staged computation"></a>Staged computation</h2><p>Lets see this with another example. Suppose that we have a function of the form:</p>
<script type="math/tex; mode=display">f(x,y) = \frac{x + \sigma(y)}{\sigma(x) + (x+y)^2}</script><p>We don’t need to have an explicit function written down that evaluates the gradient. We only have to know how to compute it. Here is how we would structure the <strong>forward pass</strong> of such expression:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">3</span> <span class="comment"># example values</span></span><br><span class="line">y = <span class="number">-4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># forward pass</span></span><br><span class="line">sigy = <span class="number">1.0</span> / (<span class="number">1</span> + math.exp(-y)) <span class="comment"># sigmoid in numerator   #(1)</span></span><br><span class="line">num = x + sigy <span class="comment"># numerator                               #(2)</span></span><br><span class="line">sigx = <span class="number">1.0</span> / (<span class="number">1</span> + math.exp(-x)) <span class="comment"># sigmoid in denominator #(3)</span></span><br><span class="line">xpy = x + y                                              <span class="comment">#(4)</span></span><br><span class="line">xpysqr = xpy**<span class="number">2</span>                                          <span class="comment">#(5)</span></span><br><span class="line">den = sigx + xpysqr <span class="comment"># denominator                        #(6)</span></span><br><span class="line">invden = <span class="number">1.0</span> / den                                       <span class="comment">#(7)</span></span><br><span class="line">f = num * invden <span class="comment"># done!                                 #(8)</span></span><br></pre></td></tr></table></figure>
<p>Computing the backprop pass is easy: We’ll go backwards and for every variable along the way in the forward pass (sigy, num, sigx, xpy, xpysqr, den, invden) we will have the same variable, but one that begins with a <code>d</code>, which will hold the gradient of the output of the circuit with respect to that variable.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># backprop f = num * invden</span></span><br><span class="line">dnum = invden <span class="comment"># gradient on numerator                             #(8)</span></span><br><span class="line">dinvden = num                                                     <span class="comment">#(8)</span></span><br><span class="line"><span class="comment"># backprop invden = 1.0 / den </span></span><br><span class="line">dden = (<span class="number">-1.0</span> / (den**<span class="number">2</span>)) * dinvden                                <span class="comment">#(7)</span></span><br><span class="line"><span class="comment"># backprop den = sigx + xpysqr</span></span><br><span class="line">dsigx = (<span class="number">1</span>) * dden                                                <span class="comment">#(6)</span></span><br><span class="line">dxpysqr = (<span class="number">1</span>) * dden                                              <span class="comment">#(6)</span></span><br><span class="line"><span class="comment"># backprop xpysqr = xpy**2</span></span><br><span class="line">dxpy = (<span class="number">2</span> * xpy) * dxpysqr                                        <span class="comment">#(5)</span></span><br><span class="line"><span class="comment"># backprop xpy = x + y</span></span><br><span class="line">dx = (<span class="number">1</span>) * dxpy                                                   <span class="comment">#(4)</span></span><br><span class="line">dy = (<span class="number">1</span>) * dxpy                                                   <span class="comment">#(4)</span></span><br><span class="line"><span class="comment"># backprop sigx = 1.0 / (1 + math.exp(-x))</span></span><br><span class="line">dx += ((<span class="number">1</span> - sigx) * sigx) * dsigx <span class="comment"># Notice += !! See notes below  #(3)</span></span><br><span class="line"><span class="comment"># backprop num = x + sigy</span></span><br><span class="line">dx += (<span class="number">1</span>) * dnum                                                  <span class="comment">#(2)</span></span><br><span class="line">dsigy = (<span class="number">1</span>) * dnum                                                <span class="comment">#(2)</span></span><br><span class="line"><span class="comment"># backprop sigy = 1.0 / (1 + math.exp(-y))</span></span><br><span class="line">dy += ((<span class="number">1</span> - sigy) * sigy) * dsigy                                 <span class="comment">#(1)</span></span><br><span class="line"><span class="comment"># done! phew</span></span><br></pre></td></tr></table></figure>
<h2 id="Patterns"><a href="#Patterns" class="headerlink" title="Patterns"></a>Patterns</h2><ol>
<li><strong>add distributes the upstream gradient</strong>: The add gate always takes the gradient on its output and distributes it equally to all of its inputs, regardless of what their values were during the forward pass. This follows from the fact that the local gradient for the add operation is simply +1.0, so the gradients on all inputs will exactly equal the gradients on the output because it will be multiplied by x1.0 (and remain unchanged).</li>
<li><strong>max “routes” the upstream gradient</strong>: The max gate routes the gradient. Unlike the add gate which distributed the gradient unchanged to all its inputs, the max gate distributes the gradient (unchanged) to exactly one of its inputs (the input that had the highest value during the forward pass). This is because the local gradient for a max gate is 1.0 for the highest value, and 0.0 for all other values.</li>
<li><strong>mul switches the upstream gradient</strong>: The multiply gate is a little less easy to interpret. Its local gradients are the input values (except switched), and this is multiplied by the gradient on its output during the chain rule. </li>
</ol>
<h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="3.png" width="30%" height="30%">
    <br>
<!--     <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;"></div> -->
</center>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultiplyGate</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self,x,y)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line">        z = x*y</span><br><span class="line">        <span class="keyword">return</span> z</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backward</span><span class="params">(dz)</span>:</span></span><br><span class="line">        dx = self.y * dz <span class="comment"># [dz/dz * dL/dz]</span></span><br><span class="line">        dy = self.x * dz <span class="comment"># [dz/dy * dL/dz]</span></span><br><span class="line">        <span class="keyword">return</span> [dx,dy]</span><br></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li>lecture notes and slides from <a href="http://cs231n.github.io/optimization-2/" target="_blank" rel="noopener">http://cs231n.github.io/optimization-2/</a></li>
<li>lecture notes and slides from <a href="http://web.stanford.edu/class/cs224n/" target="_blank" rel="noopener">http://web.stanford.edu/class/cs224n/</a></li>
</ol>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>cs224n</tag>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title>Word Vectors</title>
    <url>/Word-Vectors/2019/12/04/</url>
    <content><![CDATA[<h2 id="Why-we-need-Word-Vectors"><a href="#Why-we-need-Word-Vectors" class="headerlink" title="Why we need Word Vectors ?"></a>Why we need Word Vectors ?</h2><p>We want to encode word tokens each into some vector that represents a point in some sort of “word” space. This is paramount for a number of reasons but the most intuitive reason is that perhaps there actually exists some N-dimensional space (such that N &lt;&lt; 13 million) that is sufficient to encode all semantics of our language. Each dimension would encode some meaning that we transfer using speech. For instance, semantic dimensions might indicate tense (past vs. present vs. future), count (singular vs. plural), and gender (masculine vs. feminine).</p>
<h2 id="One-hot-vector"><a href="#One-hot-vector" class="headerlink" title="One-hot vector"></a>One-hot vector</h2><p>Represent every word as an $\mathbb{R}^{|v|\cdot 1}$ vector with all 0s and one 1 at the index of that word in the sorted english language. $|V|$ is the size of our vocabulary. Word vectors in this type of encoding would appear as the following:</p>
<script type="math/tex; mode=display">
W^{abandon} = \begin{bmatrix} 
1 \\
0 \\
0 \\
0 \\
\vdots \\
0 \\
\end{bmatrix}</script><p>We represent each word as a completely independent entity. This word representation <strong>does not</strong> give us directly any notion of similarity. For instance,</p>
<script type="math/tex; mode=display">(W^{hotel})^{T}W^{motel} =(W^{hotel})^{T}W^{cat} = 0</script><h2 id="SVD-Based-Methods"><a href="#SVD-Based-Methods" class="headerlink" title="SVD Based Methods"></a>SVD Based Methods</h2><p>For this class of methods to find word embeddings (otherwise known as word vectors), we first loop over a massive dataset and accumulate word co-occurrence counts in some form of a matrix X, and then perform Singular Value Decomposition on X to get a<br>$USV^{T}$ decomposition. We then use the rows of U as the word embeddings for all words in our dictionary. Let us discuss a few choices of X.</p>
<h3 id="Word-Document-Matrix"><a href="#Word-Document-Matrix" class="headerlink" title="Word-Document Matrix"></a>Word-Document Matrix</h3><p>As our first attempt, we make the bold conjecture that words thatare related will often appear in the <strong>same documents</strong>. We use this fact to build a word-document matrix, $X$ in the following manner: Loop over billions of documents and for each time word $i$ appears in document $j$, we add one to entry $X_{ij}$. This is obviously a very large matrix $\mathbb{R}^{|v|\cdot M}$ and it scales with the number of documents (M). So perhaps we can try something better.</p>
<h3 id="Window-based-Co-occurrence-Matrix"><a href="#Window-based-Co-occurrence-Matrix" class="headerlink" title="Window based Co-occurrence Matrix"></a>Window based Co-occurrence Matrix</h3><p>A co-occurrence matrix counts how often things co-occur in some environment. Given some word $w_i$ occurring in the document, we consider the <em>context window</em> surrounding $w_i$. Supposing our fixed window size is $n$, then this is the $n$ preceding and $n$ subsequent words in that document, i.e. words $w_{i-n} \dots w_{i-1}$ and $w_{i+1} \dots w_{i+n}$. We build a <em>co-occurrence matrix</em> $M$, which is a symmetric word-by-word matrix in which $M_{ij}$ is the number of times $w_j$ appears inside $w_i$’s window.</p>
<p><strong>Example: Co-Occurrence with Fixed Window of n=1</strong>:</p>
<ul>
<li>Document 1: “all that glitters is not gold”</li>
<li>Document 2: “all is well that ends well”</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>*</th>
<th>START</th>
<th>all</th>
<th>that</th>
<th>glitters</th>
<th>is</th>
<th>not</th>
<th>gold</th>
<th>well</th>
<th>ends</th>
<th>END</th>
</tr>
</thead>
<tbody>
<tr>
<td>START</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>all</td>
<td>2</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>that</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>glitters</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>is</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>not</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>gold</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>well</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>ends</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>END</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
</tbody>
</table>
</div>
<p><strong>Note:</strong> In NLP, we often add START and END tokens to represent the beginning and end of sentences, paragraphs or documents. In thise case we imagine START and END tokens encapsulating each document, e.g., “START All that glitters is not gold END”, and include these tokens in our co-occurrence counts.</p>
<p>The rows (or columns) of this matrix provide one type of word vectors (those based on word-word co-occurrence), but the vectors will be large in general (linear in the number of distinct words in a corpus). Thus, our next step is to run <em>dimensionality reduction</em>. In particular, we will run <em>SVD (Singular Value Decomposition)</em>, which is a kind of generalized <em>PCA (Principal Components Analysis)</em> to select the top $k$ principal components. Here’s a visualization of dimensionality reduction with SVD. In this picture our co-occurrence matrix is $A$ with $n$ rows corresponding to $n$ words. We obtain a full matrix decomposition, with the singular values ordered in the diagonal $S$ matrix, and our new, shorter length-$k$ word vectors in $U_k$.</p>
<h3 id="SVD"><a href="#SVD" class="headerlink" title="SVD"></a>SVD</h3><p><strong>Eigenvalues</strong> quantify the importance of information along the line of <strong>eigenvectors</strong>. Equipped with this information, we know what part of the information can be ignored and how to compress information (SVD, Dimension reduction &amp; PCA). It also helps us to extract features in developing machine learning models. Sometimes, it makes the model easier to train because of the reduction of tangled information. It also serves the purpose to visualize tangled raw data.</p>
<p>for Eigenvalues $\lambda$ and Eigenvector $V$, we have:</p>
<script type="math/tex; mode=display">AV = \lambda V</script><p>the dimension of A is $\mathbb{R}^{n\cdot n}$ and $V$ is a $\mathbb{R}^{n\cdot 1}$ vector.</p>
<h4 id="Diagonalizable"><a href="#Diagonalizable" class="headerlink" title="Diagonalizable"></a>Diagonalizable</h4><p>Let’s assume a matrix A has two eigenvalues and eigenvectors.</p>
<script type="math/tex; mode=display">Av_1 = \lambda_1 v_1</script><script type="math/tex; mode=display">Av_2 = \lambda_2 v_2</script><p>We can concatenate them together and rewrite the equations in the matrix form.</p>
<script type="math/tex; mode=display">
A \begin{bmatrix} v1 & v2 \end{bmatrix} = \begin{bmatrix} \lambda_1 v_1 & \lambda_2 v_2 \end{bmatrix} = \begin{bmatrix} v1 & v2 \end{bmatrix} \begin{bmatrix} \lambda_1 & 0 \\ 0 & \lambda_2 \end{bmatrix}</script><p>We can generalize it into any number of eigenvectors as</p>
<script type="math/tex; mode=display">AV = V\land</script><p>A square matrix A is diagonalizable if we can convert it into a diagonal matrix, like</p>
<script type="math/tex; mode=display">V^{-1} A V = \land</script><p>An n × n square matrix is diagonalizable if it has n linearly independent eigenvectors. If a matrix is symmetric, it is diagonalizable. If a matrix does not have repeated eigenvalue, it always generates enough linearly independent eigenvectors to diagonalize a vector. If it has repeated eigenvalues, there is no guarantee we have enough eigenvectors. Some will not be diagonalizable.</p>
<p>If $A$ is a square matrix with $N$ linearly independent eigenvectors ($v_1$, $v_2$, $\cdots$, $v_n$) and corresponding eigenvalues ($\lambda_1$, $\lambda_2$, $\cdots$, $\lambda_n$), we can rearrange</p>
<script type="math/tex; mode=display">V^{-1} A V = \land</script><p>into </p>
<script type="math/tex; mode=display">A = V \land V^{-1}</script><p>For example,</p>
<p><img src="diagonalizable.png" alt></p>
<h4 id="Singular-vectors-amp-singular-values"><a href="#Singular-vectors-amp-singular-values" class="headerlink" title="Singular vectors &amp; singular values"></a>Singular vectors &amp; singular values</h4><p>However, the above method is possible only if $A$ is a square matrix and $A$ has n linearly independent eigenvectors. Now, it is time to develop a solution for all matrices using SVD.</p>
<p>The matrix $AA^{T}$ and $A^{T}A$ are very special in linear algebra. Consider any m × n matrix A, we can multiply it with $A^{T}$ to form $AA^{T}$ and $A^{T}A$ separately. These matrices are</p>
<ul>
<li>symmetrical,</li>
<li>square,</li>
<li>at least positive semidefinite (eigenvalues are zero or positive),</li>
<li>both matrices have the same positive eigenvalues, and</li>
<li>both have the same rank r as A.</li>
</ul>
<p>We name the eigenvectors for $AA^{T}$ as $u_i$ and $A^{T}A$ as $v_i$ here and call these sets of eigenvectors $u$ and $v$ the <strong>singular vectors</strong> of A. Both matrices have the same positive eigenvalues. The square roots of these eigenvalues are called <strong>singular values</strong>. We concatenate vectors $u_i$ into $U$ and $v_i$ into $V$ to form orthogonal matrices.</p>
<p><strong>SVD states that any matrix A can be factorized as</strong>:</p>
<script type="math/tex; mode=display">A_{m\cdot n} = U_{m\cdot m} S_{m\cdot n} V_{n\cdot n}^{T}</script><p>S is a diagonal matrix with r elements equal to the root of the positive eigenvalues of $AA^{T}$ or $A^{T}A$ (both matrics have the same positive eigenvalues anyway).</p>
<p><img src="usv.png" alt></p>
<h4 id="Applying-SVD-to-the-cooccurrence-matrix"><a href="#Applying-SVD-to-the-cooccurrence-matrix" class="headerlink" title="Applying SVD to the cooccurrence matrix"></a>Applying SVD to the cooccurrence matrix</h4><p><img src="svd.png" alt="Picture of an SVD"></p>
<p>This reduced-dimensionality co-occurrence representation preserves semantic relationships between words, e.g. <em>doctor</em> and <em>hospital</em> will be closer than <em>doctor</em> and <em>dog</em>. </p>
<p>Although these methods give us word vectors that are more than sufficient to encode semantic and syntactic (part of speech) information but are associated with many other problems:</p>
<ul>
<li>The dimensions of the matrix change very often (new words are added very frequently and corpus changes in size).</li>
<li>The matrix is extremely sparse since most words do not co-occur.</li>
<li>The matrix is very high dimensional in general (≈ 10e6 × 10e6)</li>
<li>Quadratic cost to train (i.e. to perform SVD)</li>
<li>Requires the incorporation of some hacks on X to account for the drastic imbalance in word frequency</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_co_occurrence_matrix</span><span class="params">(corpus, window_size=<span class="number">4</span>)</span>:</span></span><br><span class="line">    <span class="string">""" Compute co-occurrence matrix for the given corpus and window_size (default of 4).</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">        Note: Each word in a document should be at the center of a window. Words near edges will have a smaller</span></span><br><span class="line"><span class="string">              number of co-occurring words.</span></span><br><span class="line"><span class="string">              </span></span><br><span class="line"><span class="string">              For example, if we take the document "START All that glitters is not gold END" with window size of 4,</span></span><br><span class="line"><span class="string">              "All" will co-occur with "START", "that", "glitters", "is", and "not".</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">        Params:</span></span><br><span class="line"><span class="string">            corpus (list of list of strings): corpus of documents</span></span><br><span class="line"><span class="string">            window_size (int): size of context window</span></span><br><span class="line"><span class="string">        Return:</span></span><br><span class="line"><span class="string">            M (numpy matrix of shape (number of corpus words, number of corpus words)): </span></span><br><span class="line"><span class="string">                Co-occurence matrix of word counts. </span></span><br><span class="line"><span class="string">                The ordering of the words in the rows/columns should be the same as the ordering of the words given by the distinct_words function.</span></span><br><span class="line"><span class="string">            word2Ind (dict): dictionary that maps word to index (i.e. row/column number) for matrix M.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    words, num_words = distinct_words(corpus)</span><br><span class="line">    M = <span class="keyword">None</span></span><br><span class="line">    word2Ind = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    word2Ind = &#123;word:idx <span class="keyword">for</span> word,idx <span class="keyword">in</span> zip(words, range(num_words))&#125;</span><br><span class="line">    M = np.zeros((num_words,num_words))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> doc <span class="keyword">in</span> corpus:</span><br><span class="line">        <span class="keyword">for</span> index, central_word <span class="keyword">in</span> enumerate(doc):</span><br><span class="line">            left = max(<span class="number">0</span>,index - window_size)</span><br><span class="line">            right = min(num_words, index + window_size+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span> context_word <span class="keyword">in</span> doc[left:right]:</span><br><span class="line">                <span class="keyword">if</span> context_word == central_word:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                M[word2Ind[central_word]][word2Ind[context_word]] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> M, word2Ind</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reduce_to_k_dim</span><span class="params">(M, k=<span class="number">2</span>)</span>:</span></span><br><span class="line">    <span class="string">""" Reduce a co-occurence count matrix of dimensionality (num_corpus_words, num_corpus_words)</span></span><br><span class="line"><span class="string">        to a matrix of dimensionality (num_corpus_words, k) using the following SVD function from Scikit-Learn:</span></span><br><span class="line"><span class="string">            - http://scikit-learn.org/stable/modules/generated/sklearn.decomposition.TruncatedSVD.html</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">        Params:</span></span><br><span class="line"><span class="string">            M (numpy matrix of shape (number of corpus words, number of corpus words)): co-occurence matrix of word counts</span></span><br><span class="line"><span class="string">            k (int): embedding size of each word after dimension reduction</span></span><br><span class="line"><span class="string">        Return:</span></span><br><span class="line"><span class="string">            M_reduced (numpy matrix of shape (number of corpus words, k)): matrix of k-dimensioal word embeddings.</span></span><br><span class="line"><span class="string">                    In terms of the SVD from math class, this actually returns U * S</span></span><br><span class="line"><span class="string">    """</span>    </span><br><span class="line">    n_iters = <span class="number">10</span>     <span class="comment"># Use this parameter in your call to `TruncatedSVD`</span></span><br><span class="line">    M_reduced = <span class="keyword">None</span></span><br><span class="line">    print(<span class="string">"Running Truncated SVD over %i words..."</span> % (M.shape[<span class="number">0</span>]))</span><br><span class="line">    </span><br><span class="line">    t_svd = TruncatedSVD(n_components=k, n_iter = n_iters)</span><br><span class="line">    M_reduced = t_svd.fit_transform(M)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># ------------------</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Done."</span>)</span><br><span class="line">    <span class="keyword">return</span> M_reduced</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_embeddings</span><span class="params">(M_reduced, word2Ind, words)</span>:</span></span><br><span class="line">    <span class="string">""" Plot in a scatterplot the embeddings of the words specified in the list "words".</span></span><br><span class="line"><span class="string">        NOTE: do not plot all the words listed in M_reduced / word2Ind.</span></span><br><span class="line"><span class="string">        Include a label next to each point.</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Params:</span></span><br><span class="line"><span class="string">            M_reduced (numpy matrix of shape (number of unique words in the corpus , k)): matrix of k-dimensioal word embeddings</span></span><br><span class="line"><span class="string">            word2Ind (dict): dictionary that maps word to indices for matrix M</span></span><br><span class="line"><span class="string">            words (list of strings): words whose embeddings we want to visualize</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    print(M_reduced.shape)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i,word <span class="keyword">in</span> enumerate(words):</span><br><span class="line">        x = M_reduced[i][<span class="number">0</span>]</span><br><span class="line">        y = M_reduced[i][<span class="number">1</span>]</span><br><span class="line">        plt.scatter(x, y, marker=<span class="string">'x'</span>, color=<span class="string">'red'</span>)</span><br><span class="line">        plt.text(x, y, word, fontsize=<span class="number">9</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>
<h2 id="Iteration-Based-Methods-Word2vec"><a href="#Iteration-Based-Methods-Word2vec" class="headerlink" title="Iteration Based Methods - Word2vec"></a>Iteration Based Methods - Word2vec</h2><p>Instead of computing and storing global information about some huge dataset (which might be billions of sentences), we can try to create a model that will be able to learn one iteration at a time and eventually be able to encode the probability of a word given its context. The idea is to design a model whose parameters are the word vec- tors. Then, train the model on a certain objective. At every iteration we run our model, evaluate the errors, and follow an update rule that has some notion of penalizing the model parameters that caused the error. Thus, we learn our word vectors.</p>
<p>Word2vec is a software package that actually includes :</p>
<ul>
<li><strong>2 algorithms</strong>: continuous bag-of-words (CBOW) and skip-gram. CBOW aims to predict a center word from the surrounding context in terms of word vectors. Skip-gram does the opposite, and predicts the distribution (probability) of context words from a center word.</li>
<li><strong>2 training methods</strong>: negative sampling and hierarchical softmax. Negative sampling defines an objective by sampling negative exam- ples, while hierarchical softmax defines an objective using an efficient tree structure to compute probabilities for all the vocabulary.</li>
</ul>
<h3 id="Language-Models"><a href="#Language-Models" class="headerlink" title="Language Models"></a>Language Models</h3><p>First, we need to create such a model that will assign a probability to a sequence of tokens. Let us start with an example:</p>
<blockquote>
<p>“The cat jumped over the puddle.”</p>
</blockquote>
<p>A good language model will give this sentence a high probability because this is a completely valid sentence, syntactically and semantically. Mathematically, we can call this probability on any given sequence of n words:</p>
<script type="math/tex; mode=display">P(w_1,w_2,\cdots,w_n)</script><p>We can take the unary language model approach and break apart this probability by assuming the word occurrences are completely independent:</p>
<script type="math/tex; mode=display">P(w_1,w_2,\cdots,w_n) = \prod_{i=1}^{n} P(w_i)</script><p>However, we know this is a bit ludicrous because we know the next word is highly contingent upon the previous sequence of words. And the silly sentence example might actually score highly. So perhaps we let the probability of the sequence depend on the pairwise probability of a word in the sequence and the word next to it. We call this the bigram model and represent it as: </p>
<script type="math/tex; mode=display">P(w_1,w_2,\cdots,w_n) = \prod_{i=1}^{n} P(w_i|w_{i-1})</script><p>Again this is certainly a bit naive since we are only concerning ourselves with pairs of neighboring words rather than evaluating a whole sentence, but as we will see, this representation gets us pretty far along.</p>
<h3 id="Skip-gram"><a href="#Skip-gram" class="headerlink" title="Skip-gram"></a>Skip-gram</h3><p>One approach is to create a model such that given the center word “jumped”, the model will be able to predict or generate the surrounding words “The”, “cat”, “over”, “the”, “puddle”. Here we call the word “jumped” the context. We call this type of model a Skip-Gram model.<br><img src="Skip.png" alt><br><img src="Skip_2.png" alt></p>
<p>We breakdown the way this model works in these 6 steps:</p>
<ol>
<li>We generate our one hot input vector $x \in \mathbb{R}^{|v|}$ of the center word.</li>
<li>We get our embedded word vector for the center word<script type="math/tex; mode=display">v_c = Vx  \qquad \in \mathbb{R}^{|v|}</script></li>
<li>Generate a score vector<script type="math/tex; mode=display">z = Uv_c  \qquad \in \mathbb{R}^{|v|}</script></li>
<li>Turn the score vector into probabilities,$\hat{y} = softmax(z)$<script type="math/tex; mode=display">\hat y_{c-m}, \cdots, \hat y_{c-1}, \cdots, \hat y_{c+m}</script></li>
<li>We desire our probability vector generated to match the true prob- abilities which is the one hot vectors of the actual output.<script type="math/tex; mode=display">y_{c-m}, \cdots, y_{c-1}, \cdots, y_{c+m}</script></li>
</ol>
<h4 id="Objective-function"><a href="#Objective-function" class="headerlink" title="Objective function"></a>Objective function</h4><p><img src="objective.png" alt></p>
<p><strong> How to calculate $P(o|c)$? We will use two vectors per word w</strong>:</p>
<ul>
<li>$V_w$ when w is a center word</li>
<li>$U_w$ when w is a context word</li>
</ul>
<p>Then for a center word c and a context word o:</p>
<script type="math/tex; mode=display">P(o|c) = \frac{exp^{u_o^{T}v_c}}{\sum_{w\in v}exp^{u_w^{T}v_c}}</script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SkipGram</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="string">"""x --&gt; batch_size x word_index</span></span><br><span class="line"><span class="string">       output --&gt; batch_size x context_predicted x vocabulary"""</span>    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, vocabulary_size, embedding_features, context_len, padding_idx=<span class="number">0</span> )</span>:</span></span><br><span class="line">        super(SkipGram, self).__init__()</span><br><span class="line">        self.context_len = context_len</span><br><span class="line">        self.embedding = nn.Embedding(num_embeddings = vocabulary_size, embedding_dim=embedding_features, padding_idx=padding_idx)</span><br><span class="line">        self.fc = nn.Linear(in_features = embedding_features, out_features = vocabulary_size)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        context_out = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.context_len):</span><br><span class="line">            wordvec_x = self.embedding(x)</span><br><span class="line">            context_word_i = self.fc(wordvec_x)</span><br><span class="line">            context_out.append(context_word_i)</span><br><span class="line">        log_prob = F.log_softmax(torch.stack(context_out, dim=<span class="number">1</span>).squeeze(), dim=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> log_prob</span><br><span class="line"></span><br><span class="line">loss_function = nn.NLLLoss()</span><br><span class="line">model = SkipGram()</span><br><span class="line">log_prob = model(centre_word)</span><br><span class="line">loss=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(log_prob.shape[<span class="number">1</span>]):</span><br><span class="line">    loss_i = loss_function(log_prob[:,i,], context_word_i[:,i])</span><br><span class="line">    loss *= loss_i</span><br><span class="line">loss = loss/(i+<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h3 id="Continuous-Bag-of-Words-Model-CBOW"><a href="#Continuous-Bag-of-Words-Model-CBOW" class="headerlink" title="Continuous Bag of Words Model (CBOW)"></a>Continuous Bag of Words Model (CBOW)</h3><p>Another approach is to treat {“The”, “cat”, ’over”, “the’, “puddle”} as a <strong>context</strong> and from these words, be able to predict or generate the <strong>center word</strong> “jumped”. This type of model we call a Continuous Bag of Words (CBOW) Model.</p>
<p><img src="CBOW.png" alt></p>
<p>We breakdown the way this model works in these steps:</p>
<ol>
<li>We generate our one hot word vectors for the input context of size m:<script type="math/tex; mode=display">x^{(c−m)},\cdots,x^{(c−1)},x^{(c+1)},\cdots,x^{(c+m)}\in\mathbb{R}^{|v|}</script></li>
<li>We get our embedded word vectors for the context:<script type="math/tex; mode=display">V_{c-m} = Vx^{(c−m)},V_{c-m+1} = Vx^{(c−m+1)},\cdots,V_{c+m} = Vx^{(c+m)}</script></li>
<li>Average these vectors to get <script type="math/tex; mode=display">\hat{v} = \frac{v_{c-m} + v_{c-m+1} + \cdots + v_{c+m}}{2m}</script></li>
<li>Generate a score vector <script type="math/tex; mode=display">z = U\hat{v}  \qquad \in \mathbb{R}^{|v|}</script>As dot product of similar vectors is higher, it will push similar words close to each other in order to achieve a high score.</li>
<li>Turnthescoresintoprobabilities <script type="math/tex; mode=display">\hat{y} = softmax(z)  \qquad \in \mathbb{R}^{|v|}</script></li>
<li>We desire our probabilities generated, $\hat{y} \in \mathbb{R}^{|v|}$, to match the true probabilities, $y \in \mathbb{R}^{|v|}$ which also happens to be the one hot vector of the actual word.</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CBOW</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="string">"""input  -- &gt; batch_size x context_size</span></span><br><span class="line"><span class="string">       output --&gt; batch_size x vocabulary"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, vocabulary_size, embedding_features, padding_idx=<span class="number">0</span>)</span>:</span></span><br><span class="line">        <span class="string">"""nn.Embedding holds a tensor of dimmension (vocabulary_size, feature_size)--&gt;N(0,1)"""</span></span><br><span class="line">        super(CBOW, self).__init__()</span><br><span class="line">        self.embedding = nn.Embedding(num_embeddings = vocabulary_size, embedding_dim = embedding_features, padding_idx=padding_idx)</span><br><span class="line">        self.fc = nn.Linear(in_features = embedding_features, out_features = vocabulary_size)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, context_words)</span>:</span></span><br><span class="line">        wordvecs = self.embedding(context_words)</span><br><span class="line">        mean_wordvecs = wordvecs.sum(dim=<span class="number">1</span>)/x.shape[<span class="number">1</span>] </span><br><span class="line">        log_prob = F.log_softmax(self.fc(mean_wordvecs), dim=<span class="number">1</span>).unsqueeze(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> log_prob</span><br><span class="line"></span><br><span class="line">loss_function = nn.NLLLoss()</span><br><span class="line">model  = CBOW()</span><br><span class="line">log_prob = model(context_words)</span><br><span class="line">loss = loss_function(log_prob.squeeze(), centre_word.squeeze())</span><br></pre></td></tr></table></figure>
<h3 id="Negative-Sampling"><a href="#Negative-Sampling" class="headerlink" title="Negative Sampling"></a>Negative Sampling</h3><p>Lets take a second to look at the objective function. Note that the summation over |V| is computationally huge! Any update we do or evaluation of the objective function would take O(|V|) time which if we recall is in the millions. A simple idea is we could instead just approximate it.</p>
<p><strong>For every training step, instead of looping over the entire vocabulary, we can just sample several negative examples!</strong> We “sample” from a noise distribution $P_n(w)$ whose probabilities match the ordering of the frequency of the vocabulary. Unlike the probabilistic model of Word2Vec where for each input word probability is computed from all the target words in the vocabulary, here for each input word has only few target words (few true and rest randomly selected false targets). <strong>The key difference compared to the probabilistic model is the use of sigmoid activation as final discriminator replacing softmax function in the probabilistic model.</strong></p>
<p>Given this example(We get positive example by using the same skip-grams technique, a fixed window that goes around):</p>
<blockquote>
<p>“I want a glass of orange juice to go along with my cereal”</p>
</blockquote>
<p>The sampling will look like this:</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">Context</th>
<th style="text-align:left">Word</th>
<th style="text-align:left">target</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">orange</td>
<td style="text-align:left">juice</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">orange</td>
<td style="text-align:left">king</td>
<td style="text-align:left">0</td>
</tr>
<tr>
<td style="text-align:left">orange</td>
<td style="text-align:left">book</td>
<td style="text-align:left">0</td>
</tr>
<tr>
<td style="text-align:left">orange</td>
<td style="text-align:left">the</td>
<td style="text-align:left">0</td>
</tr>
<tr>
<td style="text-align:left">orange</td>
<td style="text-align:left">of</td>
<td style="text-align:left">0</td>
</tr>
</tbody>
</table>
</div>
<p>So the steps to generate the samples are:</p>
<ol>
<li>Pick a positive context</li>
<li>Pick a k negative contexts from the dictionary.<br>We will have a k negative examples to 1 positive ones in the data we are collecting.</li>
</ol>
<p><img src="negative_sampling.png" alt></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Merge</span><br><span class="line"><span class="keyword">from</span> keras.layers.core <span class="keyword">import</span> Dense, Reshape</span><br><span class="line"><span class="keyword">from</span> keras.layers.embeddings <span class="keyword">import</span> Embedding</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"></span><br><span class="line"><span class="comment"># build skip-gram architecture</span></span><br><span class="line">word_model = Sequential()</span><br><span class="line">word_model.add(Embedding(vocab_size, embed_size,</span><br><span class="line">                         embeddings_initializer=<span class="string">"glorot_uniform"</span>,</span><br><span class="line">                         input_length=<span class="number">1</span>))</span><br><span class="line">word_model.add(Reshape((embed_size, )))</span><br><span class="line"></span><br><span class="line">context_model = Sequential()</span><br><span class="line">context_model.add(Embedding(vocab_size, embed_size,</span><br><span class="line">                  embeddings_initializer=<span class="string">"glorot_uniform"</span>,</span><br><span class="line">                  input_length=<span class="number">1</span>))</span><br><span class="line">context_model.add(Reshape((embed_size,)))</span><br><span class="line"></span><br><span class="line">model = Sequential()</span><br><span class="line">model.add(Merge([word_model, context_model], mode=<span class="string">"dot"</span>))</span><br><span class="line">model.add(Dense(<span class="number">1</span>, kernel_initializer=<span class="string">"glorot_uniform"</span>, activation=<span class="string">"sigmoid"</span>))</span><br><span class="line">model.compile(loss=<span class="string">"mean_squared_error"</span>, optimizer=<span class="string">"rmsprop"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## training</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">    loss = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i, elem <span class="keyword">in</span> enumerate(skip_grams):</span><br><span class="line">        pair_first_elem = np.array(list(zip(*elem[<span class="number">0</span>]))[<span class="number">0</span>], dtype=<span class="string">'int32'</span>)</span><br><span class="line">        pair_second_elem = np.array(list(zip(*elem[<span class="number">0</span>]))[<span class="number">1</span>], dtype=<span class="string">'int32'</span>)</span><br><span class="line">        labels = np.array(elem[<span class="number">1</span>], dtype=<span class="string">'int32'</span>)</span><br><span class="line">        X = [pair_first_elem, pair_second_elem]</span><br><span class="line">        Y = labels</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">10000</span> == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">'Processed &#123;&#125; (skip_first, skip_second, relevance) pairs'</span>.format(i))</span><br><span class="line">        loss += model.train_on_batch(X,Y)  </span><br><span class="line"></span><br><span class="line">    print(<span class="string">'Epoch:'</span>, epoch, <span class="string">'Loss:'</span>, loss)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## get word embedding</span></span><br><span class="line">merge_layer = model.layers[<span class="number">0</span>]</span><br><span class="line">word_model = merge_layer.layers[<span class="number">0</span>]</span><br><span class="line">word_embed_layer = word_model.layers[<span class="number">0</span>]</span><br><span class="line">weights = word_embed_layer.get_weights()[<span class="number">0</span>][<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">print(weights.shape)</span><br><span class="line">pd.DataFrame(weights, index=id2word.values()).head()</span><br></pre></td></tr></table></figure>
<h3 id="hierarchical-softmax"><a href="#hierarchical-softmax" class="headerlink" title="hierarchical softmax"></a>hierarchical softmax</h3><p>hierarchical softmax is a much more efficient alternative to the normal softmax. In practice, hierarchical softmax tends to be better for infrequent words, while negative sampling works better for frequent words and lower dimensional vectors.</p>
<p>Hierarchical softmax uses a binary tree to represent all words in the vocabulary. Each leaf of the tree is a word, and there is a unique path from root to leaf. In this model, there is no output representation for words. Instead, each node of the graph (except the root and the leaves) is associated to a vector that the model is going to learn.</p>
<p>In this model, the probability of a word w given a vector $w_i$, p(w|w_i),is equal to the probability of a random walk starting in the root and ending in the leaf node corresponding to w. The main advantage in computing the probability this way is that the cost is only O(log(|V|)), corresponding to the length of the path.<br><img src="hafftree.png" alt></p>
<p>Taking $w_2$ in above figure, we must take two left edges and<br>then a right edge to reach w2 from the root, so</p>
<script type="math/tex; mode=display">p(w_2) = p(n(w_2,1),left) \cdot p(n(w_2,2),left) \cdot p(n(w_2,3),right) \\ 
= \sigma({\theta_{n(w_2,1)}}^T \cdot h) \cdot \sigma({\theta_{n(w_2,2)}}^T \cdot h) \cdot 
\sigma({-\theta_{n(w_2,3)}}^T \cdot h)</script><p>Therefore,</p>
<script type="math/tex; mode=display">p(w)=\prod_{j=1}^{L(w)-1}\sigma( sign(w,j)\cdot {\theta_{n(w,j)}}^Th )</script><script type="math/tex; mode=display">sign(w,j)= 
\begin{cases} 
1, & \text{if n(w,j+1) is the left child of n(w,j)} \\ 
-1,& \text{if n(w,j+1) is the right child of n(w,j)}
\end{cases}</script><ul>
<li>$\theta_{n(w,j)}$ is the vector representation of $n(w,j)$</li>
<li>$h$ is the output of hidden layer</li>
</ul>
<h3 id="Global-Vectors-for-Word-Representation-GloVe"><a href="#Global-Vectors-for-Word-Representation-GloVe" class="headerlink" title="Global Vectors for Word Representation (GloVe)"></a>Global Vectors for Word Representation (GloVe)</h3><p>So far, we have looked at two main classes of methods to find word embeddings. </p>
<ul>
<li>The first set are count-based and rely on matrix factor- ization (e.g. LSA, HAL). While these methods effectively leverage global statistical information, they are primarily used to capture word similarities and do poorly on tasks such as word analogy, indi- cating a sub-optimal vector space structure. </li>
<li>The other set of methods are shallow window-based (e.g. the skip-gram and the CBOW mod- els), which learn word embeddings by making predictions in local context windows. These models demonstrate the capacity to capture complex linguistic patterns beyond word similarity, but fail to make use of the global co-occurrence statistics.</li>
</ul>
<p>In comparison, GloVe consists of a weighted least squares model that trains on global word-word co-occurrence counts and thus makes efficient use of statistics. The model produces a word vector space with meaningful sub-structure. It shows state-of-the-art per- formance on the word analogy task, and outperforms other current methods on several word similarity tasks.</p>
<ol>
<li>Construct co-occurrence Matrix</li>
<li>Construct relationships between word vectors and co-occurrence Matrix<ul>
<li>Let X denote the word-word co-occurrence matrix, where $X_{ij}$ indicates the number of times word j occur in the context of word i</li>
<li>$w_{i}$,$\tilde{w_{j}}$ is the word vector</li>
<li>$b_i,b_j$ is the bias term<script type="math/tex; mode=display">w_{i}^{T}\tilde{w_{j}} + b_i + \tilde{b_j} = \log(X_{ij}) \tag{1}</script></li>
</ul>
</li>
<li>Construct loss function: Mean Square Loss<script type="math/tex; mode=display">J = \sum_{i,j=1}^{V} f(X_{ij})(w_{i}^{T}\tilde{w_{j}} + b_i + \tilde{b_j} – \log(X_{ij}) )^2</script><script type="math/tex; mode=display">f(x)=\begin{equation} 
\begin{cases} 
(x/x_{max})^{\alpha}  & \text{if} \ x < x_{max} \\ 
1 & \text{otherwise} 
\end{cases} 
\end{equation}</script></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">weight_func</span><span class="params">(x, x_max, alpha)</span>:</span></span><br><span class="line">    wx = (x/x_max)**alpha</span><br><span class="line">    wx = torch.min(wx, torch.ones_like(wx))</span><br><span class="line">    <span class="keyword">return</span> wx</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wmse_loss</span><span class="params">(weights, inputs, targets)</span>:</span></span><br><span class="line">    loss = weights * F.mse_loss(inputs, targets, reduction=<span class="string">'none'</span>)</span><br><span class="line">    <span class="keyword">return</span> torch.mean(loss)</span><br><span class="line"></span><br><span class="line">EMBED_DIM = <span class="number">300</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GloveModel</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num_embeddings, embedding_dim)</span>:</span></span><br><span class="line">        super(GloveModel, self).__init__()</span><br><span class="line">        self.wi = nn.Embedding(num_embeddings, embedding_dim)</span><br><span class="line">        self.wj = nn.Embedding(num_embeddings, embedding_dim)</span><br><span class="line">        self.bi = nn.Embedding(num_embeddings, <span class="number">1</span>)</span><br><span class="line">        self.bj = nn.Embedding(num_embeddings, <span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        self.wi.weight.data.uniform_(<span class="number">-1</span>, <span class="number">1</span>)</span><br><span class="line">        self.wj.weight.data.uniform_(<span class="number">-1</span>, <span class="number">1</span>)</span><br><span class="line">        self.bi.weight.data.zero_()</span><br><span class="line">        self.bj.weight.data.zero_()</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, i_indices, j_indices)</span>:</span></span><br><span class="line">        w_i = self.wi(i_indices)</span><br><span class="line">        w_j = self.wj(j_indices)</span><br><span class="line">        b_i = self.bi(i_indices).squeeze()</span><br><span class="line">        b_j = self.bj(j_indices).squeeze()</span><br><span class="line">        </span><br><span class="line">        x = torch.sum(w_i * w_j, dim=<span class="number">1</span>) + b_i + b_j</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">glove = GloveModel(dataset._vocab_len, EMBED_DIM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">outputs = glove(i_idx, j_idx)</span><br><span class="line">weights_x = weight_func(x_ij, X_MAX, ALPHA)</span><br><span class="line">loss = wmse_loss(weights_x, outputs, torch.log(x_ij))</span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure>
<p>In conclusion, the GloVe model efficiently leverages global statistical information by training only on the nonzero elements in a word- word co-occurrence matrix, and produces a vector space with mean- ingful sub-structure. It consistently outperforms word2vec on the word analogy task, given the same corpus, vocabulary, window size, and training time. It achieves better results faster, and also obtains the best results irrespective of speed.</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li>Course note and slides of <a href="http://web.stanford.edu/class/cs224n/" target="_blank" rel="noopener">cs224n</a></li>
<li><a href="https://medium.com/@jonathan_hui/machine-learning-singular-value-decomposition-svd-principal-component-analysis-pca-1d45e885e491" target="_blank" rel="noopener">Machine Learning — Singular Value Decomposition (SVD) &amp; Principal Component Analysis (PCA)</a></li>
<li><a href="https://lilianweng.github.io/lil-log/2017/10/15/learning-word-embedding.html" target="_blank" rel="noopener">https://lilianweng.github.io/lil-log/2017/10/15/learning-word-embedding.html</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/42651829" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/42651829</a></li>
<li><a href="https://nlpython.com/implementing-glove-model-with-pytorch/" target="_blank" rel="noopener">https://nlpython.com/implementing-glove-model-with-pytorch/</a></li>
</ul>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>cs224n</tag>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title>Composition</title>
    <url>/Composition/2019/12/01/</url>
    <content><![CDATA[<h2 id="What-is-Composition"><a href="#What-is-Composition" class="headerlink" title="What is Composition?"></a>What is Composition?</h2><ol>
<li>组合是指将不同的部分结合成一个整体的行为。使用面向对象的组合技术，可以将简单的、独立的对象组合成更大更复杂的整体。</li>
<li>从本质上讲，参与组合的那些对象都很小，他们在结构上都是独立的。这使得他们能够无缝低转换为可插入、可互换的组件。</li>
</ol>
<h2 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h2><h3 id="创建零件"><a href="#创建零件" class="headerlink" title="创建零件"></a>创建零件</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bicycle</span></span></span><br><span class="line">    <span class="keyword">attr_reader</span> <span class="symbol">:size</span>, <span class="symbol">:parts</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(args = &#123;&#125;)</span></span></span><br><span class="line">        @size = args[<span class="symbol">:size</span>]</span><br><span class="line">        @parts = args[<span class="symbol">:parts</span>]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spares</span></span></span><br><span class="line">        parts.spares</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parts</span> &lt; Array</span></span><br><span class="line">    <span class="keyword">attr_reader</span> <span class="symbol">:parts</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(parts)</span></span></span><br><span class="line">        @parts = parts</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spares</span></span></span><br><span class="line">        parts.select &#123;<span class="params">|part|</span> part.needs_spare&#125;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">size</span></span></span><br><span class="line">        parts.size</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Part</span></span></span><br><span class="line">    <span class="keyword">attr_reader</span> <span class="symbol">:name</span>, <span class="symbol">:description</span>, <span class="symbol">:needs_spare</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(args)</span></span></span><br><span class="line">        @name = args[<span class="symbol">:name</span>]</span><br><span class="line">        @description = args[<span class="symbol">:description</span>]</span><br><span class="line">        @needs_spare = args.fetch(<span class="symbol">:needs_spare</span>,<span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chain = Part.new(<span class="symbol">name:</span> <span class="string">"chain"</span>, <span class="symbol">description:</span> <span class="string">'10-speed'</span>)</span><br><span class="line">road_tire = Part.new(<span class="symbol">name:</span> <span class="string">"tire_size"</span>, <span class="symbol">description:</span> <span class="string">'23'</span>)</span><br><span class="line">tape = Part.new(<span class="symbol">name:</span> <span class="string">"tape_color"</span>, <span class="symbol">description:</span> <span class="string">'red'</span>)</span><br><span class="line">mountain_tire = Part.new(<span class="symbol">name:</span> <span class="string">"tire_size"</span>, <span class="symbol">description:</span> <span class="string">'2.1'</span>)</span><br><span class="line">rear_shock = Part.new(<span class="symbol">name:</span> <span class="string">"rear_shock"</span>, <span class="symbol">description:</span> <span class="string">'Fox'</span>)</span><br><span class="line">front_shock = Part.new(<span class="symbol">name:</span> <span class="string">'front_shock'</span>, <span class="symbol">description:</span> <span class="string">'Manitou'</span>, <span class="symbol">needs_spare:</span> <span class="literal">false</span>)</span><br></pre></td></tr></table></figure>
<h3 id="组装"><a href="#组装" class="headerlink" title="组装"></a>组装</h3><p>此时<code>size</code>能正常响应，但是不能执行数组之间的加法会导致问题. 尽管<code>+</code>连接的是 <code>Parts</code> 对象，但是<code>+</code> 返回的对象是 <code>Array</code>实例。<code>Array</code>并不知道如何响应<code>spares</code></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">road_bike_parts = Parts.new([chain, road_tire, tape])</span><br><span class="line">p road_bike_parts.spares</span><br><span class="line">p road_bike_parts.size</span><br></pre></td></tr></table></figure>
<h3 id="让Parts对象更像一个数组"><a href="#让Parts对象更像一个数组" class="headerlink" title="让Parts对象更像一个数组"></a>让Parts对象更像一个数组</h3><ol>
<li>The Forwardable module<br>Forwardable is a module that can be used to add behavior to all the <strong>instances</strong> of a given class. This module is included to the singleton class using the extend keyword in order to add methods at class-level (to keep it simple).</li>
<li>The Forwardable#def_delegator method allows an object to forward a message to a defined receiver.<ul>
<li>The first argument correspond to the receiver of the message forwarding.</li>
<li>The second argument is the message to forward.</li>
<li>And finally the third argument is an alias of the message.</li>
</ul>
</li>
<li>The def_delegators method</li>
<li>The delegate method<br> The delegate method accepts a hash as argument where:<ul>
<li>the key is one or more messages</li>
<li>the value is the receiver of the messages defined as key<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># in forwardable.rb</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'forwardable'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span></span></span><br><span class="line">  attr <span class="symbol">:cores</span>, <span class="symbol">:screens</span></span><br><span class="line">  extend Forwardable</span><br><span class="line">  delegate %I[size]   =&gt; <span class="symbol">:</span>@cores,</span><br><span class="line">           %I[length] =&gt; <span class="symbol">:</span>@screens</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize</span></span></span><br><span class="line">    @cores  = (<span class="number">1</span>..<span class="number">8</span>).to_a</span><br><span class="line">    @screens = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">macrosoft = Computer.new</span><br><span class="line">puts <span class="string">"Cores:   <span class="subst">#&#123;macrosoft.size&#125;</span>"</span></span><br><span class="line">puts <span class="string">"Screens: <span class="subst">#&#123;macrosoft.length&#125;</span>"</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<p>The 2 main differences with the def_delegator method is that it takes a set of methods to forward and the methods cannot be aliased<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'forwardable'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bicycle</span></span></span><br><span class="line">    <span class="keyword">attr_reader</span> <span class="symbol">:size</span>, <span class="symbol">:parts</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(args = &#123;&#125;)</span></span></span><br><span class="line">        @size = args[<span class="symbol">:size</span>]</span><br><span class="line">        @parts = args[<span class="symbol">:parts</span>]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spares</span></span></span><br><span class="line">        parts.spares</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parts</span></span></span><br><span class="line">    extend Forwardable</span><br><span class="line">    def_delegators <span class="symbol">:</span>@parts, <span class="symbol">:size</span>, <span class="symbol">:each</span></span><br><span class="line">    <span class="keyword">include</span> Enumerable</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(parts)</span></span></span><br><span class="line">        @parts = parts</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spares</span></span></span><br><span class="line">        select &#123;<span class="params">|part|</span> part.needs_spare&#125;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Part</span></span></span><br><span class="line">    <span class="keyword">attr_reader</span> <span class="symbol">:name</span>, <span class="symbol">:description</span>, <span class="symbol">:needs_spare</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(args)</span></span></span><br><span class="line">        @name = args[<span class="symbol">:name</span>]</span><br><span class="line">        @description = args[<span class="symbol">:description</span>]</span><br><span class="line">        @needs_spare = args.fetch(<span class="symbol">:needs_spare</span>,<span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chain = Part.new(<span class="symbol">name:</span> <span class="string">"chain"</span>, <span class="symbol">description:</span> <span class="string">'10-speed'</span>)</span><br><span class="line">road_tire = Part.new(<span class="symbol">name:</span> <span class="string">"tire_size"</span>, <span class="symbol">description:</span> <span class="string">'23'</span>)</span><br><span class="line">tape = Part.new(<span class="symbol">name:</span> <span class="string">"tape_color"</span>, <span class="symbol">description:</span> <span class="string">'red'</span>)</span><br><span class="line">mountain_tire = Part.new(<span class="symbol">name:</span> <span class="string">"tire_size"</span>, <span class="symbol">description:</span> <span class="string">'2.1'</span>)</span><br><span class="line">rear_shock = Part.new(<span class="symbol">name:</span> <span class="string">"rear_shock"</span>, <span class="symbol">description:</span> <span class="string">'Fox'</span>)</span><br><span class="line">front_shock = Part.new(<span class="symbol">name:</span> <span class="string">'front_shock'</span>, <span class="symbol">description:</span> <span class="string">'Manitou'</span>, <span class="symbol">needs_spare:</span> <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">mountain_bike = Bicycle.new(</span><br><span class="line">    <span class="symbol">size:</span> <span class="string">'L'</span>,</span><br><span class="line">    <span class="symbol">parts:</span> Parts.new([chain, mountain_tire, front_shock, rear_shock])</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">road_bike = Bicycle.new(</span><br><span class="line">    <span class="symbol">size:</span> <span class="string">'L'</span>,</span><br><span class="line">    <span class="symbol">parts:</span> Parts.new([chain, road_tire, tape])</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">p mountain_bike.size</span><br><span class="line">p road_bike.size</span><br></pre></td></tr></table></figure></p>
<h3 id="创建零件工厂"><a href="#创建零件工厂" class="headerlink" title="创建零件工厂"></a>创建零件工厂</h3><p>对象如何创建的知识，最好放在<code>工厂里面</code>。这样你就只需要一个说明书，就能创建对象。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">road_config = [[<span class="string">'chain'</span>,<span class="string">'10-speed'</span>],</span><br><span class="line">               [<span class="string">'tire_size'</span>,<span class="string">'23'</span>],</span><br><span class="line">               [<span class="string">'tape_color'</span>,<span class="string">'red'</span>]</span><br><span class="line">           ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">PartsFactory</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">build</span><span class="params">(config, part_class = Part, parts_class = Parts)</span></span></span><br><span class="line">        parts_class.new(</span><br><span class="line">            config.collect &#123;<span class="params">|part_config|</span></span><br><span class="line">                part_class.new (&#123;</span><br><span class="line">                    <span class="symbol">name:</span> part_config[<span class="number">0</span>],</span><br><span class="line">                    <span class="symbol">description:</span> part_config[<span class="number">1</span>],</span><br><span class="line">                    <span class="symbol">needs_spare:</span> part_config.fetch(<span class="number">2</span>,<span class="literal">true</span>)&#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">road_parts = PartsFactory.build(road_config)</span><br><span class="line">p road_parts.spares</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programming Language</category>
        <category>Object Oriented Design</category>
      </categories>
  </entry>
  <entry>
    <title>Role</title>
    <url>/Role/2019/12/01/</url>
    <content><![CDATA[<h2 id="理解角色"><a href="#理解角色" class="headerlink" title="理解角色"></a>理解角色</h2><p>有些问题需要在其他不相关的对象之间共享行为。这种公共行为对类来说是正交的，他是对象所扮演的角色。当之前无关的对象开始扮演某个公共的角色时，他们便与自己扮演的角色所对应的对象之间建立了一层关系，这些关系与经典继承要求的子类/父类关系有所不同，他们不可见，但又确实存在。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Schedule</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">scheduled?</span><span class="params">(schedulable, start_date, end_date)</span></span></span><br><span class="line">        puts <span class="string">"this <span class="subst">#&#123;schedulable.<span class="keyword">class</span>&#125;</span> is not schedulable between <span class="subst">#&#123;start_date&#125;</span> and <span class="subst">#&#123;end_date&#125;</span>"</span></span><br><span class="line">        <span class="literal">false</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Schedulable</span></span></span><br><span class="line">    <span class="keyword">attr_writer</span> <span class="symbol">:schedule</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">schedulable?</span><span class="params">(start_date, end_date)</span></span></span><br><span class="line">        !scheduled?(start_date - lead_days, end_date)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">scheduled?</span><span class="params">(start_date, end_date)</span></span></span><br><span class="line">        schedule.scheduled?(<span class="keyword">self</span>, start_date, end_date)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lead_days</span></span></span><br><span class="line">        <span class="number">0</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bicycle</span></span></span><br><span class="line">    <span class="keyword">include</span> Schedulable</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lead_days</span></span></span><br><span class="line">        <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ...... </span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span></span></span><br><span class="line">    <span class="keyword">include</span> Schedulable</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lead_days</span></span></span><br><span class="line">        <span class="number">3</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ......</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h2 id="编写可替代性的代码"><a href="#编写可替代性的代码" class="headerlink" title="编写可替代性的代码"></a>编写可替代性的代码</h2><h3 id="识别出反模式"><a href="#识别出反模式" class="headerlink" title="识别出反模式"></a>识别出反模式</h3><ol>
<li>使用类似 <code>type</code> 和 <code>category</code> 这类名字的变量来确定发送给<code>self</code>的是何种消息的对象，会包含两个高度相关但又有所不同的对象。</li>
<li>当某个发送对象要检查接受对象的类以确定所发送的消息时，你一定忽略了某个鸭子类型的存在。</li>
<li>除了共享接口，鸭子类型也可能共享行为。</li>
</ol>
<h3 id="坚持抽象"><a href="#坚持抽象" class="headerlink" title="坚持抽象"></a>坚持抽象</h3><ol>
<li>抽象父类里的所有代码都应该适用于每一个继承它的类；</li>
<li>错误的抽象会导致继承对象不正确的行为；</li>
</ol>
<h3 id="重视契约"><a href="#重视契约" class="headerlink" title="重视契约"></a>重视契约</h3><p><strong>里氏替换原则</strong>: 对于一个健全的类型系统，其子类必须能够替换他的父类型。</p>
<h3 id="使用模板方法模式"><a href="#使用模板方法模式" class="headerlink" title="使用模板方法模式"></a>使用模板方法模式</h3><p>用于创建可继承代码的基本编码技术是模板方法模式。这种模式可以让你将抽象与具体分离开来。抽象代码用于定义算法，具体代码可以继承这个抽象，并通过改写这些模板方法来提供特殊化。</p>
<h3 id="预先将类解耦"><a href="#预先将类解耦" class="headerlink" title="预先将类解耦"></a>预先将类解耦</h3><p>尽量避免编写继承者需要发送super消息的代码。可以通过钩子消息让子类参与进来，同时还可免除它们要知道抽象算法的职责。</p>
<h3 id="创建浅层结构"><a href="#创建浅层结构" class="headerlink" title="创建浅层结构"></a>创建浅层结构</h3><p>钩子方法的局限性在于它仅适用于创建浅层结构。深层次结构的问题在于，他们定义了一条很长的用于消息查找的搜索路径，并且为对象提供了大量的机会，让他们在那条路径上可以随着消息的传递添加行为。因为对象依赖于它之上的所有事物，所以深层次的结构拥有一个很大的内奸依赖关系集合。深层次结构的另外一个问题在于程序员往往只是对处于顶端和底部的类比较熟悉。</p>
]]></content>
      <categories>
        <category>Programming Language</category>
        <category>Object Oriented Design</category>
      </categories>
  </entry>
  <entry>
    <title>Inheritance</title>
    <url>/Inheritance/2019/12/01/</url>
    <content><![CDATA[<h2 id="What-is-inheritance"><a href="#What-is-inheritance" class="headerlink" title="What is inheritance ?"></a>What is inheritance ?</h2><ol>
<li>继承的核心是 <code>实现消息的自动委托</code>。</li>
</ol>
<h2 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bicycle</span></span></span><br><span class="line">    <span class="keyword">attr_reader</span> <span class="symbol">:style</span>,<span class="symbol">:size</span>,<span class="symbol">:tape_color</span>,<span class="symbol">:front_shock</span>,<span class="symbol">:rear_shock</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(args)</span></span></span><br><span class="line">        @style = args[<span class="symbol">:style</span>]</span><br><span class="line">        @size = args[<span class="symbol">:size</span>]</span><br><span class="line">        @tape_color = args[<span class="symbol">:tape_color</span>]</span><br><span class="line">        @front_shock = args[<span class="symbol">:front_shock</span>]</span><br><span class="line">        @rear_shock = args[<span class="symbol">:rear_shock</span>]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spares</span></span></span><br><span class="line">        <span class="keyword">if</span> style == <span class="symbol">:read</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="symbol">chain:</span> <span class="string">'10-speed'</span>,</span><br><span class="line">                <span class="symbol">tire_size:</span> <span class="string">'23'</span>, </span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="symbol">chain:</span> <span class="string">'10-speed'</span>,</span><br><span class="line">                <span class="symbol">tire_size:</span> <span class="string">'2.1'</span>,</span><br><span class="line">                <span class="symbol">rear_shock:</span> rear_shock</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<ol>
<li><strong>找出抽象</strong>：子类是其父类的特殊化。子类应该包含父类的一切内容，外加更多内容。任何期待父类的对象应该都能够与其子类进行交互。</li>
<li><p><strong>创建抽象父类</strong>先将所有的代码下放到子类然后逐渐地、部分地提升是重构操作的重要组成部分。因为一开始只将部分行为下放到子类，然后试图将某个现有的类从具体转换为抽象，那么有可能会不小心残留下具体的行为。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bicycle</span></span></span><br><span class="line">    <span class="comment"># 这个类为空</span></span><br><span class="line">    <span class="comment"># 所有的代码都移动到了 RoadBike</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RoadBike</span> &lt; Bicycle</span></span><br><span class="line">    <span class="keyword">attr_reader</span> <span class="symbol">:style</span>,<span class="symbol">:size</span>,<span class="symbol">:tape_color</span>,<span class="symbol">:front_shock</span>,<span class="symbol">:rear_shock</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(args)</span></span></span><br><span class="line">        @style = args[<span class="symbol">:style</span>]</span><br><span class="line">        @size = args[<span class="symbol">:size</span>]</span><br><span class="line">        @tape_color = args[<span class="symbol">:tape_color</span>]</span><br><span class="line">        @front_shock = args[<span class="symbol">:front_shock</span>]</span><br><span class="line">        @rear_shock = args[<span class="symbol">:rear_shock</span>]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spares</span></span></span><br><span class="line">        <span class="keyword">if</span> style == <span class="symbol">:read</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="symbol">chain:</span> <span class="string">'10-speed'</span>,</span><br><span class="line">                <span class="symbol">tire_size:</span> <span class="string">'23'</span>, </span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="symbol">chain:</span> <span class="string">'10-speed'</span>,</span><br><span class="line">                <span class="symbol">tire_size:</span> <span class="string">'2.1'</span>,</span><br><span class="line">                <span class="symbol">rear_shock:</span> rear_shock</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mountain</span> &lt; Bicycle</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>提升抽象行为</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bicycle</span></span></span><br><span class="line">    <span class="keyword">attr_reader</span> <span class="symbol">:size</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(args = &#123;&#125;)</span></span></span><br><span class="line">        @size = args[<span class="symbol">:size</span>]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RoadBike</span> &lt; Bicycle</span></span><br><span class="line">    <span class="keyword">attr_reader</span> <span class="symbol">:tape_color</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(args)</span></span></span><br><span class="line">        @tape_color = args[<span class="symbol">:tape_color</span>]</span><br><span class="line">        <span class="keyword">super</span>(args)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ......</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mountain</span> &lt; Bicycle</span></span><br><span class="line">    <span class="comment"># ......</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用模板方法模式<br>在负类定义好几本结构，并通过发送消息来获取子类特有的实现，这种方法称为<code>模板方法模式</code>。使用模板方法模式的类都必须给它所发送的每一条消息提供一个实现。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bicycle</span></span></span><br><span class="line">    <span class="keyword">attr_reader</span> <span class="symbol">:size</span>,<span class="symbol">:chain</span>,<span class="symbol">:tire_size</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(args = &#123;&#125;)</span></span></span><br><span class="line">        @size = args[<span class="symbol">:size</span>]</span><br><span class="line">        @chain = args[<span class="symbol">:chain</span>] <span class="params">||</span> default_chain</span><br><span class="line">        @tire_size = args[<span class="symbol">:tire_size</span>] <span class="params">||</span> default_tire_size</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">default_chain</span></span></span><br><span class="line">        <span class="string">'10-speed'</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">default_tire_size</span></span></span><br><span class="line">        raise NotImplememtedError</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RoadBike</span> &lt; Bicycle</span></span><br><span class="line">    <span class="keyword">attr_reader</span> <span class="symbol">:tape_color</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(args)</span></span></span><br><span class="line">        @tape_color = args[<span class="symbol">:tape_color</span>]</span><br><span class="line">        <span class="keyword">super</span>(args)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">default_chain</span></span></span><br><span class="line">        <span class="string">'9-speed'</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mountain</span> &lt; Bicycle</span></span><br><span class="line">    <span class="comment"># ......</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>管理父类和子类之间的耦合<br>一如既往，当知道其他类相关的事情，变回创建依赖关系。发送<code>super</code>消息的子类，不仅需要知道自己在干什么，还需要知道自己与父类是如何交互的。可以使用<strong>钩子消息</strong>解耦子类。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bicycle</span></span></span><br><span class="line">    <span class="keyword">attr_reader</span> <span class="symbol">:size</span>,<span class="symbol">:chain</span>,<span class="symbol">:tire_size</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(args = &#123;&#125;)</span></span></span><br><span class="line">        @size = args[<span class="symbol">:size</span>]</span><br><span class="line">        @chain = args[<span class="symbol">:chain</span>] <span class="params">||</span> default_chain</span><br><span class="line">        @tire_size = args[<span class="symbol">:tire_size</span>] <span class="params">||</span> default_tire_size</span><br><span class="line"></span><br><span class="line">        post_initialize(args)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spares</span></span></span><br><span class="line">        &#123;<span class="symbol">tire_size:</span> tire_size,</span><br><span class="line">            <span class="symbol">chain:</span> chain&#125;.mege(local_spares)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">local_spares</span></span></span><br><span class="line">        &#123;&#125;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post_initialize</span><span class="params">(args)</span></span></span><br><span class="line">        <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">default_chain</span></span></span><br><span class="line">        <span class="string">'10-speed'</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">default_tire_size</span></span></span><br><span class="line">        raise NotImplememtedError</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RoadBike</span> &lt; Bicycle</span></span><br><span class="line">    <span class="keyword">attr_reader</span> <span class="symbol">:tape_color</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post_initialize</span><span class="params">(args)</span></span></span><br><span class="line">        @tape_color = args[<span class="symbol">:tape_color</span>]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">local_spares</span></span></span><br><span class="line">        &#123;<span class="symbol">tape_color:</span> tape_color&#125;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">default_tire_size</span></span></span><br><span class="line">        <span class="string">'23'</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mountain</span> &lt; Bicycle</span></span><br><span class="line">    <span class="comment"># ......</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>Programming Language</category>
        <category>Object Oriented Design</category>
      </categories>
  </entry>
  <entry>
    <title>Interface Segmentation Principle</title>
    <url>/Interface-Segmentation-Principle/2019/12/01/</url>
    <content><![CDATA[<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>接口有很多不同的概念，在这里，这个术语指的是类里的接口。类实现了许多方法，有些方法旨在被其他对象使用，这些方法就组成了它的公共接口。那些组成类的公共接口的方法组成了这个类呈现给外部世界的全貌。他们：</p>
<ol>
<li>暴露了其主要的职责</li>
<li>期望被其它对象调用</li>
<li>不会因一时兴起而改变</li>
<li>对其他依赖它的对象来说很安全</li>
<li>在测试里被详细记录</li>
</ol>
<h2 id="领域对象"><a href="#领域对象" class="headerlink" title="领域对象"></a>领域对象</h2><p>Domain Object 显而易见，因为他们代表了这个应用程序，代表了现实世界里的很大的、易于发现的事物。应该要注意的是，Domain Object 往往是给粗心大意设立的陷进。因为如果过度关注他们，就会倾向于给他们强加上行为。<strong>我们应该重点关注的是他们之间的消息传递</strong>，这些消息会引导你去发现其他的对象，而这些对象可远没有这么明显。</p>
<h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><p>时序图的价值在于，他们明确制定了对象之间消息的传递。因为对象间只应使用公共接口进行通信，时序图便是一种用于暴露、实验并最终定义这些接口的工具。</p>
<h2 id="请询问“要什么”，别告知“如何做”"><a href="#请询问“要什么”，别告知“如何做”" class="headerlink" title="请询问“要什么”，别告知“如何做”"></a>请询问“要什么”，别告知“如何做”</h2><p>如下图， <code>Trip</code> 告知 <code>Mechanic</code> 如何去准备每一辆 bicycle.<br><img src="1.jpg" alt></p>
<p>下图里，<code>Trip</code> 要求 <code>Mechanic</code> 去准备每一个 bicycle</p>
<p><img src="2.jpg" alt></p>
<p>消息的这种变化是代码可维护性的一个巨大改进。因为它大大缩短了公共接口，大大减少出现“违背其承诺，然后强迫许多类进行更改”的情况。</p>
<h2 id="最小化上下文（context）"><a href="#最小化上下文（context）" class="headerlink" title="最小化上下文（context）"></a>最小化上下文（context）</h2><p>对象所了解到的关于其他对象的那些事情便构成了它的上下文。对象所期待的上下文会直接影响到它的重用难度。具有简单上下文的对象易于使用，也易于测试，他们对周边的环境期望很少。最好的情况是对象与他的上下文完全独立。如果某个对象在与其他对象进行合作时，不知道他们是谁，也不知道他们所做的事情，那么这个对象便可以按各种千奇百怪和完全无法预测的方式重用。</p>
<h2 id="信任其他对象"><a href="#信任其他对象" class="headerlink" title="信任其他对象"></a>信任其他对象</h2><p><code>我知道我需要什么，并且我相信你会做好你的本职工作。</code> 这种盲目的信任是面向对象设计的基石。在允许对象进行合作的同时，它无需将自己束缚在上下文里，并且在任何期望壮大和变化的应用程序里它都是必不可少的。</p>
<h2 id="创建显式接口"><a href="#创建显式接口" class="headerlink" title="创建显式接口"></a>创建显式接口</h2><ol>
<li>被明确标识；</li>
<li>多与 <code>做什么</code> 有关，少于 <code>怎么做</code> 有关；</li>
<li>尽可能让这些名字都稳定不变；</li>
<li>将散列表作为参数</li>
</ol>
<h2 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h2><p>迪米特法则会限制可以向某个方法发送消息的对象集合。它会禁止这样的做法：将某条消息通过第二个不同类型的对象转发给第三个对象。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不合理</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trip</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">depart</span></span></span><br><span class="line">        customer.bicycle.wheel.tire</span><br><span class="line">        customer.bicycle.wheel.rotate</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="comment"># ......</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 合理</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trip</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">depart</span></span></span><br><span class="line">        customer.go</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="comment"># ......</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h2 id="鸭子类型"><a href="#鸭子类型" class="headerlink" title="鸭子类型"></a>鸭子类型</h2><p><code>Ducking Type</code> 指的是不会绑定到任何特定类的公共接口。这种跨类的接口能为应用程序带来巨大的灵活性，所采用的方式是利用更加宽容的消息依赖取代昂贵的类依赖。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 不好的写法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trip</span></span></span><br><span class="line">    <span class="keyword">attr_reader</span> <span class="symbol">:bicycles</span>, <span class="symbol">:customers</span>, <span class="symbol">:vehicle</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prepare</span><span class="params">(preparers)</span></span></span><br><span class="line">        preparers.each &#123;<span class="params">|preparer|</span></span><br><span class="line">            <span class="keyword">case</span> preparer</span><br><span class="line">            <span class="keyword">when</span> Mechanic</span><br><span class="line">                preparer.prepare_bicycles(bicycles)</span><br><span class="line">            <span class="keyword">when</span> TripCoordinator</span><br><span class="line">                preparer.buy_food(customers)</span><br><span class="line">            <span class="keyword">when</span> Driver</span><br><span class="line">                preparer.gas_up(vehicle)</span><br><span class="line">                preparer.fill_water_tank(vehicle)</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>删除依赖关系的关键是要意识到：<code>Trip</code>和<code>Prepare</code>方法只服务于单个目的，因此它的参数出现在这里是希望可以协作完成同一个目标。每一个参数都因同样的理由出现在这里，具体的原因与这些参数的底层类无关。<br>设计鸭子类型的挑战是：<strong>要注意到你需要一个鸭子类型，并且要将其接口抽象出来</strong></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 好的写法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trip</span></span></span><br><span class="line">    <span class="keyword">attr_reader</span> <span class="symbol">:bicycles</span>, <span class="symbol">:customers</span>, <span class="symbol">:vehicle</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prepare</span><span class="params">(preparers)</span></span></span><br><span class="line">        preparers.each &#123;<span class="params">|preparer|</span> preparer.prepare_trip(<span class="keyword">self</span>)&#125;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mechanic</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prepare_trip</span><span class="params">(trip)</span></span></span><br><span class="line">        trip.bicycles.each &#123;<span class="params">|bicycle|</span> prepare_bicycles(bicycle)&#125;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programming Language</category>
        <category>Object Oriented Design</category>
      </categories>
  </entry>
  <entry>
    <title>Dependency Management Principle</title>
    <url>/Dependency-Management-Principle/2019/11/28/</url>
    <content><![CDATA[<p>通过精心设计的对象都具有单一的职责，因此他们实际上是通过<strong>合作</strong>来完成复杂的任务。这种合作强大而危险。为了实现一个合作，一个对象必须知道其他对象的某些情况。这种<strong>知道</strong>便创建了一种依赖关系。当两三个对象耦合在一起，它们变回表现得像一个整体，不可能只重用其中的一个。如果对依赖关系不仔细加以管理，那么这些依赖关系将毁掉整个应用程序。</p>
<p><img src="dependency.jpg" alt></p>
<h2 id="理解依赖关系"><a href="#理解依赖关系" class="headerlink" title="理解依赖关系"></a>理解依赖关系</h2><ol>
<li>知道另外一个类的名字<blockquote>
<p><code>Gear</code> 对 <code>Wheel</code> 的引用深入到 <code>gear_inches</code> 方法里，并将其硬编码，那么这便是明确说明它只愿意为 <code>Wheel.gear</code> 的实例计算齿轮英寸数，从而拒绝与其他任何类型的对象合作。</p>
</blockquote>
</li>
<li>消息的名字<blockquote>
<p><code>Gear</code> 需要访问可以相应 <code>diameter</code> 的对象。实际上，对 <code>Gear</code> 来说，计算 <code>gear_inches</code> 并不需要知道这个对象的类，只要这个对象可以相应 <code>diameter</code> 就行了。我们可以把这个对象理解成鸭子类型。</p>
</blockquote>
</li>
<li>消息所要求的参数<blockquote>
<p><code>Gear</code> 也并不需要知道 <code>Wheel</code> 需要使用 <code>rim</code> 和 <code>tire</code> 进行初始化</p>
</blockquote>
</li>
<li>参数的顺序<blockquote>
<p><code>Gear</code> 不需要知道 <code>Wheel</code> 初始化时参数的顺序</p>
</blockquote>
</li>
</ol>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gear</span></span></span><br><span class="line">    <span class="keyword">attr_reader</span> <span class="symbol">:chainring</span>, <span class="symbol">:cog</span>, <span class="symbol">:rim</span>, <span class="symbol">:tire</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(chainring,cog,rim,tire)</span></span></span><br><span class="line">        @chainring = chainring</span><br><span class="line">        @cog = cog</span><br><span class="line">        @rim = rim</span><br><span class="line">        @tire = tire</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ratio</span></span></span><br><span class="line">        chainring / cog.to_f   </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gear_inches</span></span></span><br><span class="line">        ratio * Wheel.new(rim,tire).diameter   <span class="comment"># &lt;---- 知道类的名字，知道消息的名字，知道参数，知道参数的顺序</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wheel</span></span></span><br><span class="line">    <span class="keyword">attr_reader</span> <span class="symbol">:rim</span>,<span class="symbol">:tire</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(rim,tire)</span></span></span><br><span class="line">        @rim = rim</span><br><span class="line">        @tire = tire</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">diameter</span></span></span><br><span class="line">        rim + (tire * <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">circumference</span></span></span><br><span class="line">        diameter * Math::PI</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h2 id="隔离依赖关系"><a href="#隔离依赖关系" class="headerlink" title="隔离依赖关系"></a>隔离依赖关系</h2><h3 id="隔离实例的创建"><a href="#隔离实例的创建" class="headerlink" title="隔离实例的创建"></a>隔离实例的创建</h3><p>虽然此时 <code>Gear</code> 类仍然知道得太多，但是已经有所改进。如下的编码风格减少了 <code>gear_inches</code> 的依赖关系数量，同时公开暴露了 <code>Gear</code> 对 <code>Wheel</code> 的依赖。它们没有将依赖关系<strong>隐藏</strong>起来，而是将它们<strong>显露</strong>出来。这样降低了重用这段代码的门槛。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gear</span></span></span><br><span class="line">    <span class="keyword">attr_reader</span> <span class="symbol">:chainring</span>, <span class="symbol">:cog</span>, <span class="symbol">:rim</span>, <span class="symbol">:tire</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(chainring,cog,rim,tire)</span></span></span><br><span class="line">        @chainring = chainring</span><br><span class="line">        @cog = cog</span><br><span class="line">        @rim = rim</span><br><span class="line">        @tire = tire</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ratio</span></span></span><br><span class="line">        chainring / cog.to_f   </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gear_inches</span></span></span><br><span class="line">        ratio * wheel.diameter</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wheel</span>        <span class="comment">## &lt;--- 隔离实例的创建</span></span></span><br><span class="line">        @wheel <span class="params">||</span>= Wheel.new(rim,tire)   </span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="隔离外部消息"><a href="#隔离外部消息" class="headerlink" title="隔离外部消息"></a>隔离外部消息</h3><p>如下的编码方式，<code>wheel.diameter</code>被深度嵌套在 <code>gear_inches</code> 方法里。这个方法依赖 <code>Gear</code> 才能相应 Wheel，并且依赖<code>Wheel</code>才能响应diameter。完全没有必要在<code>gear_inches</code>里嵌入这种外部依赖，这使得 <code>Gear</code> 更加脆弱。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gear_inches</span></span></span><br><span class="line">    <span class="comment"># .... 假设存在额外的数学运算</span></span><br><span class="line">    ratio * wheel.diameter</span><br><span class="line">    <span class="comment"># .... 假设还存在额外的数学运算</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>现在我们将<code>wheel.gear</code>隔离在一个单独的方法里，并且 <code>gear_inches</code>可以依赖于某条发送给自己的消息。如果 <code>Wheel</code> 更改了<code>diameter</code>的名字或者签名，那么对<code>Gear</code>的副作用将会限定在一个简单的包裹方法里。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gear_inches</span></span></span><br><span class="line">    <span class="comment"># .... 假设存在额外的数学运算</span></span><br><span class="line">    ratio * diameter</span><br><span class="line">    <span class="comment"># .... 假设还存在额外的数学运算</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">diameter</span></span></span><br><span class="line">    wheel.diameter</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="移除参数顺序依赖关系"><a href="#移除参数顺序依赖关系" class="headerlink" title="移除参数顺序依赖关系"></a>移除参数顺序依赖关系</h3><ol>
<li><p>使用散列表来进行初始化同时显示地指定默认值</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gear</span></span></span><br><span class="line">    <span class="keyword">attr_reader</span> <span class="symbol">:chainring</span>, <span class="symbol">:cog</span>, <span class="symbol">:wheel</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(args)</span></span></span><br><span class="line">        <span class="comment"># args = defaults.merge(args)</span></span><br><span class="line">        @chainring = args.fetch(<span class="symbol">:chainring</span>,<span class="number">40</span>)</span><br><span class="line">        @cog = args.fetch(<span class="symbol">:cog</span>,<span class="number">18</span>)</span><br><span class="line">        @wheel = args[<span class="symbol">:wheel</span>]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># def defaults</span></span><br><span class="line">    <span class="comment">#     &#123;:chainring =&gt; 40, :cog =&gt; 18&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># .......</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>隔离多参数初始化操作<br>有时候我们会被迫依赖某个要求参数初始化顺序的固定方法，由于那里不属于我们的地盘，我们无法更改这个方法。此时可以创建一个单一的方法，将外部接口包裹起来。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">SomeFramework</span></span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Gear</span></span></span><br><span class="line">        <span class="keyword">attr_reader</span> <span class="symbol">:chainring</span>, <span class="symbol">:cog</span>, <span class="symbol">:wheel</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(chainring,cog,wheel)</span></span></span><br><span class="line">            @chainring = chainring</span><br><span class="line">            @cog = cog</span><br><span class="line">            @wheel = wheel</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">ratio</span></span></span><br><span class="line">            chainring / cog.to_f   </span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">gear_inches</span></span></span><br><span class="line">            ratio * wheel.diameter</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wheel</span></span></span><br><span class="line">    <span class="keyword">attr_reader</span> <span class="symbol">:rim</span>,<span class="symbol">:tire</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(rim,tire)</span></span></span><br><span class="line">        @rim = rim</span><br><span class="line">        @tire = tire</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">diameter</span></span></span><br><span class="line">        rim + (tire * <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">circumference</span></span></span><br><span class="line">        diameter * Math::PI</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">GearWrapper</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">gear</span><span class="params">(args)</span></span></span><br><span class="line">        SomeFramework::Gear.new(args[<span class="symbol">:chainring</span>],args[<span class="symbol">:cog</span>],args[<span class="symbol">:wheel</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">p GearWrapper.gear(<span class="symbol">:chainring</span> =&gt; <span class="number">52</span>, <span class="symbol">:cog</span> =&gt; <span class="number">11</span>, <span class="symbol">:wheel</span> =&gt; Wheel.new(<span class="number">16</span>,<span class="number">1.5</span>)).gear_inches</span><br></pre></td></tr></table></figure>
</li>
<li><p>反转依赖关系</p>
</li>
</ol>
<ul>
<li>有些类比其他类更容易管理</li>
<li>具体类比抽象类更容易发生变化</li>
<li>更改拥有许多关系的类会造成广泛的变化<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gear</span></span></span><br><span class="line">    <span class="keyword">attr_reader</span> <span class="symbol">:chainring</span>, <span class="symbol">:cog</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(chainring,cog)</span></span></span><br><span class="line">        @chainring = chainring</span><br><span class="line">        @cog = cog</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ratio</span></span></span><br><span class="line">        chainring / cog.to_f   </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gear_inches</span><span class="params">(diameter)</span></span></span><br><span class="line">        ratio * diameter</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wheel</span></span></span><br><span class="line">    <span class="keyword">attr_reader</span> <span class="symbol">:rim</span>,<span class="symbol">:tire</span>, <span class="symbol">:gear</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(rim, tire, chainring, cog)</span></span></span><br><span class="line">        @rim = rim</span><br><span class="line">        @tire = tire</span><br><span class="line">        @gear = Gear.new(chainring, cog)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">diameter</span></span></span><br><span class="line">        rim + (tire * <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gear_inches</span></span></span><br><span class="line">        gear.gear_inches diameter</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p Wheel.new(<span class="number">16</span>,<span class="number">1.5</span>, <span class="number">52</span>,<span class="number">11</span>).gear_inches</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>Programming Language</category>
        <category>Object Oriented Design</category>
      </categories>
  </entry>
  <entry>
    <title>Single Responsibility Principle</title>
    <url>/Single-Responsibility-Principle/2019/11/27/</url>
    <content><![CDATA[<blockquote class="blockquote-center">设计是保留可变性的艺术，而非达到完美性的行为</blockquote>



<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gear</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(chainring, cog, rim, tire)</span></span></span><br><span class="line">        @chainring = chainring</span><br><span class="line">        @cog = cog</span><br><span class="line">        @rim = rim</span><br><span class="line">        @tire = tire</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ratio</span></span></span><br><span class="line">        @chainring / @cog.to_f      <span class="comment"># &lt;------- 依赖数据</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gear_inches</span> </span></span><br><span class="line">        @ratio * (@rim + (@tire * <span class="number">2</span>))   <span class="comment"># &lt;------- 不符合单一职责，依赖数据</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">puts Gear.new(<span class="number">52</span>,<span class="number">11</span>,<span class="number">26</span>,<span class="number">1.5</span>).gear_inches</span><br></pre></td></tr></table></figure>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObscuringReference</span></span></span><br><span class="line">    <span class="keyword">attr_reader</span> <span class="symbol">:data</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(data)</span></span></span><br><span class="line">        @data = data</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">diameters</span></span></span><br><span class="line">        data.collect &#123;<span class="params">|cell|</span></span><br><span class="line">            cell[<span class="number">0</span>] + (cell[<span class="number">1</span>] * <span class="number">2</span>)   <span class="comment"># &lt;---- 依赖数据结构</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h2 id="如何确定单一职责"><a href="#如何确定单一职责" class="headerlink" title="如何确定单一职责"></a>如何确定单一职责</h2><ol>
<li>假设它存在意识，然后质询它<ul>
<li>齿轮先生，请问你的比率是多少？ ## 靠谱的询问</li>
<li>齿轮先生，请问你的轮胎尺寸是多少？## 荒唐可笑的询问</li>
</ul>
</li>
<li>尝试用一句话来描述类，如果出现 and 或者 or，则说明不遵循单一职责原则</li>
<li>高内聚(cohesion)<br>OO的设计者使用内聚来描述某个类的所有内容都与其<strong>中心目标</strong>相关联的情况。<strong>一个类有责任设计其目标。</strong></li>
</ol>
<h2 id="依赖行为，不要依赖数据"><a href="#依赖行为，不要依赖数据" class="headerlink" title="依赖行为，不要依赖数据"></a>依赖行为，不要依赖数据</h2><ol>
<li>实例变量被引用多次，如果需要进行调整，则需要大量重改。</li>
<li>将数据处理成行为，对行为的一次更改，可以作用在被引用的所有数据上。</li>
<li>隐藏数据结构<br>方法 diameters 不仅知道如何计算直径，他还知道在哪里找到钢圈(cell[0])和轮胎(cell[1]).</li>
</ol>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol>
<li><p>将数据结构的知识，封装在单一方法内部。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Wheel = Struct.new(<span class="symbol">:rim</span>,<span class="symbol">:tire</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wheelify</span><span class="params">(data)</span></span></span><br><span class="line">    data.collect &#123;</span><br><span class="line">        <span class="params">|cell|</span> Wheel.new(cell[<span class="number">0</span>],cell[<span class="number">1</span>])</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">diameters</span></span></span><br><span class="line">    wheels.collect &#123;<span class="params">|wheel|</span> wheel.rim * (wheel.tire * <span class="number">2</span>)&#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>将额外的责任从方法里提取出来</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">diameters</span></span></span><br><span class="line">    wheels.collect &#123;<span class="params">|wheel|</span> diameter wheel&#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">diameter</span><span class="params">(wheel)</span></span></span><br><span class="line">    wheel.rim + (wheel.tire * <span class="number">2</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gear_inches</span></span></span><br><span class="line">    ration * diameter</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>将类里的职责隔离<br>暂时缺乏足够的信息证明Wheel需要一个独立的类。有的时候，我们是否需要创建一个新的对象并不是有明确界限的。<strong>隔离起来总是不错的选择</strong>。同时要注意，不要讲无关的职责混入自己的类。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gear</span></span></span><br><span class="line">    <span class="keyword">attr_reader</span> <span class="symbol">:chainring</span>, <span class="symbol">:cog</span>, <span class="symbol">:wheel</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(chainring,cog,rim,tire)</span></span></span><br><span class="line">        @chainring = chainring</span><br><span class="line">        @cog = cog</span><br><span class="line">        @wheel = Wheel.new(rim,tire)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ratio</span></span></span><br><span class="line">        chainring / cog.to_f   </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gear_inches</span></span></span><br><span class="line">        ratio * wheel.diameter</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    Wheel = Struct.new(<span class="symbol">:rim</span>,<span class="symbol">:tire</span>) <span class="keyword">do</span>  <span class="comment"># &lt;----- 虽然Wheel存在于Gear里不算很好的选择，但是隔离Wheel的职责是不错的选择</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">diameter</span></span></span><br><span class="line">            rim + (tire * <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">puts Gear.new(<span class="number">52</span>,<span class="number">11</span>,<span class="number">26</span>,<span class="number">1.5</span>).gear_inches</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="需求的更改"><a href="#需求的更改" class="headerlink" title="需求的更改"></a>需求的更改</h2><p>如果此时，我们需要计算轮子的周长。<strong>这正是我们一直等待的信息，因为它提供了做下一步设计决定时所需要的信息。</strong> 注意敏捷开发里设计和代码迭代互相交互的原则。</p>
<p>现在我们有理由将Wheel独立成一个类了。因为我们将Wheel的职责隔离过，此时独立出它是很容易的。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gear</span></span></span><br><span class="line">    <span class="keyword">attr_reader</span> <span class="symbol">:chainring</span>, <span class="symbol">:cog</span>, <span class="symbol">:wheel</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(chainring,cog,wheel = <span class="literal">nil</span>)</span></span></span><br><span class="line">        @chainring = chainring</span><br><span class="line">        @cog = cog</span><br><span class="line">        @wheel = wheel</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ratio</span></span></span><br><span class="line">        chainring / cog.to_f   </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gear_inches</span></span></span><br><span class="line">        ratio * wheel.diameter</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wheel</span></span></span><br><span class="line">    <span class="keyword">attr_reader</span> <span class="symbol">:rim</span>,<span class="symbol">:tire</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(rim,tire)</span></span></span><br><span class="line">        @rim = rim</span><br><span class="line">        @tire = tire</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">diameter</span></span></span><br><span class="line">        rim + (tire * <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">circumference</span></span></span><br><span class="line">        diameter * Math::PI</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">@wheel = Wheel.new(<span class="number">12</span>,<span class="number">1.5</span>)</span><br><span class="line">puts @wheel.circumference</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">puts Gear.new(<span class="number">52</span>,<span class="number">11</span>,@wheel).gear_inches</span><br><span class="line">puts Gear.new(<span class="number">52</span>,<span class="number">11</span>).ratio</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Programming Language</category>
        <category>Object Oriented Design</category>
      </categories>
  </entry>
  <entry>
    <title>Object Oriented Design</title>
    <url>/Object-Oriented-Design/2019/11/27/</url>
    <content><![CDATA[<h2 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h2><p>应用程序面对的最大的问题是将如何应对变化。将代码有效编排应对变化是设计的事情。最常见的设计要素是原则和模式。</p>
<h2 id="什么是面向对象设计"><a href="#什么是面向对象设计" class="headerlink" title="什么是面向对象设计"></a>什么是面向对象设计</h2><p>面向对象设计(OOD)认为世界是由多个对象以及对象之间的一系列消息传递构成的。</p>
<h2 id="设计赞歌"><a href="#设计赞歌" class="headerlink" title="设计赞歌"></a>设计赞歌</h2><h3 id="设计要解决的问题"><a href="#设计要解决的问题" class="headerlink" title="设计要解决的问题"></a>设计要解决的问题</h3><p>事情总是会发生变化，这是<strong>永恒不变</strong>的。客户并不知道他们自己想要什么，他们也说不清楚自己的意图。变化的需求是编程中的摩擦力与重力，这些力会作用到周密的设计上，从而形成出人意料的压力，这是这种意外的变化使得设计变得如此重要。因此，<strong>设计为了解决意外变化的问题</strong>。</p>
<h3 id="为何程序难以更改"><a href="#为何程序难以更改" class="headerlink" title="为何程序难以更改"></a>为何程序难以更改</h3><p>面向对象的应用程序由交互产生整体行为，对象是产生交互的零件，而交互则体现在他们之间传递的消息里。想要获得发送给正确目标的正确消息，需要消息的发送者对接受者有所了解。这一点会在两者之间创建许多依赖于联系，并且这些联系还在不断变化中。<br>面向对象设计与依赖关系管理相关，它是一套对依赖关系进行编排，以便各个对象能够容忍更改的编码技术。在缺乏设计的情形里，非托管的依赖关系很容易造成严重的破坏，因为这些对象互相之间了解太多，更改其中之一就会强制合作者也要随之发生变化。</p>
<h3 id="设计的定义"><a href="#设计的定义" class="headerlink" title="设计的定义"></a>设计的定义</h3><p>设计是一门艺术，一门编排代码的艺术。设计的工作具有高度的复杂性：需要对应用程序的需求有总体的理解，与各种设计原则的利与弊的知识组合起来，然后设计出当前算是成本最低，而在将来也能继续保持那个样子的代码编排。</p>
<h2 id="设计工具"><a href="#设计工具" class="headerlink" title="设计工具"></a>设计工具</h2><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><ol>
<li>单一职责</li>
<li>开闭原则</li>
<li>里氏替换原则</li>
<li>接口隔离原则</li>
<li>依赖倒置原则</li>
<li>不重复原则</li>
</ol>
<p>优秀的设计原则代表的是可测量的真理，遵循它们能改善你的代码。</p>
<h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><p>设计模式是在面向对象的软件设计过程中，<strong>针对特定问题的简单而优雅的解决方案</strong>。他是每位设计师的工具箱里的工具。</p>
<h2 id="设计行为"><a href="#设计行为" class="headerlink" title="设计行为"></a>设计行为</h2><h3 id="设计失败"><a href="#设计失败" class="headerlink" title="设计失败"></a>设计失败</h3><ol>
<li>缺乏设计知识</li>
<li>过度设计</li>
<li>设计与编程分开 </li>
</ol>
<h3 id="设计时机"><a href="#设计时机" class="headerlink" title="设计时机"></a>设计时机</h3><p>敏捷开发方法相信，大规模预先设计是完全没有意义的，因为它不可能正确。也没有人知道什么时候应用程序会完成。用户在看到具体的软件之前，对所想要的软件是没有概念的，所以向他们展示软件的时机宜早不宜迟。基于这个逻辑，我们的程序应该以<strong>微增量</strong>的方式来构建软件，逐步将你的方法迭代成满足客户真正需求的应用程序。</p>
]]></content>
      <categories>
        <category>Programming Language</category>
        <category>Object Oriented Design</category>
      </categories>
  </entry>
  <entry>
    <title>Basic Calculator</title>
    <url>/Basic-Calculator/2019/11/26/</url>
    <content><![CDATA[<h2 id="Leetcode-224-Basic-Calculator"><a href="#Leetcode-224-Basic-Calculator" class="headerlink" title="Leetcode 224. Basic Calculator"></a>Leetcode 224. <a href="https://leetcode.com/problems/basic-calculator/" target="_blank" rel="noopener">Basic Calculator</a></h2><p><img src="tree.png" alt></p>
<h3 id="中缀表达式"><a href="#中缀表达式" class="headerlink" title="中缀表达式"></a>中缀表达式</h3><p>中缀表达式是一种通用的算术或逻辑公式表示方法，操作符以中缀形式处于操作数的中间。中缀表达式是人们常用的算术表示方法，它是由相应的语法树的中序遍历的结果得到的。</p>
<blockquote>
<p>A + B * ( C - D ) - E * F</p>
</blockquote>
<h3 id="后缀表达式"><a href="#后缀表达式" class="headerlink" title="后缀表达式"></a>后缀表达式</h3><p>首先要知道什么是后缀表达式，后缀表达式又叫做逆波兰式吗它是由相应的语法树的后序遍历的结果得到的。如下图的后缀表达式为： </p>
<blockquote>
<p>A B C D - * + E F * -</p>
</blockquote>
<h3 id="中缀表达式转化为后缀表达式"><a href="#中缀表达式转化为后缀表达式" class="headerlink" title="中缀表达式转化为后缀表达式"></a>中缀表达式转化为后缀表达式</h3><ol>
<li>从左到右遍历中缀表达式的每个数字和符号;</li>
<li>若是数字就输出，即成为后缀表达式的一部分;</li>
<li>若是符号：<ol>
<li>如果是左括号，入栈；</li>
<li>如果是右括号，输出栈顶元素直到左括号为止，括号不输出；</li>
<li>如果不是括号，判断其与栈顶符号的优先级，优先级<strong>低于</strong>栈顶符号（乘除优先加减），则栈顶元素依次出栈并输出，并将当前符号进栈。优先级<strong>高于</strong>栈顶符号，入栈。</li>
</ol>
</li>
</ol>
<h3 id="根据后缀表达式计算算式的值"><a href="#根据后缀表达式计算算式的值" class="headerlink" title="根据后缀表达式计算算式的值"></a>根据后缀表达式计算算式的值</h3><ol>
<li>维护一个栈，遍历后缀表达式</li>
<li>遇到数字入栈</li>
<li>遇到操作符，弹出两个栈顶元素，计算结果，将结果入栈</li>
<li>最后栈顶元素即为所求 </li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    opr = &#123;<span class="string">"+"</span>:<span class="number">0</span>,<span class="string">"-"</span>:<span class="number">0</span>,<span class="string">"*"</span>:<span class="number">1</span>,<span class="string">"/"</span>:<span class="number">1</span>,<span class="string">"("</span>: <span class="number">-1</span>,<span class="string">")"</span>: <span class="number">-1</span>&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_postfix</span><span class="params">(self,s)</span>:</span></span><br><span class="line">        </span><br><span class="line">        stack = []</span><br><span class="line">        res = []</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; len(s):</span><br><span class="line">            <span class="keyword">if</span> s[i] == <span class="string">" "</span>:</span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> s[i] <span class="keyword">not</span> <span class="keyword">in</span> self.opr:</span><br><span class="line">                num = <span class="string">""</span></span><br><span class="line">                <span class="keyword">while</span> i &lt; len(s) <span class="keyword">and</span> s[i] <span class="keyword">not</span> <span class="keyword">in</span> self.opr:</span><br><span class="line">                    num += s[i]</span><br><span class="line">                    i+=<span class="number">1</span></span><br><span class="line">                res.append(int(num))</span><br><span class="line">                num =<span class="string">""</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> s[i] == <span class="string">"("</span>:</span><br><span class="line">                    stack.append(s[i])</span><br><span class="line">                <span class="keyword">elif</span> s[i] == <span class="string">")"</span>:</span><br><span class="line">                    <span class="keyword">while</span> stack[<span class="number">-1</span>] != <span class="string">"("</span>:</span><br><span class="line">                        op = stack.pop()</span><br><span class="line">                        res += op</span><br><span class="line">                    stack.pop()</span><br><span class="line">                <span class="keyword">elif</span> (<span class="keyword">not</span> stack) <span class="keyword">or</span> self.opr[stack[<span class="number">-1</span>]] &lt; self.opr[s[i]]: <span class="comment">## 栈顶操作符优先级低，直接入栈</span></span><br><span class="line">                    stack.append(s[i])</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment">## 栈顶操作符优先级大于等于当前操作符，一直弹出，直到栈顶元素的优先级小于当前元素为止</span></span><br><span class="line">                    <span class="keyword">while</span> stack <span class="keyword">and</span> self.opr[stack[<span class="number">-1</span>]] &gt;= self.opr[s[i]]:</span><br><span class="line">                        op = stack.pop()</span><br><span class="line">                        res += op</span><br><span class="line">                    stack.append(s[i])</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            res += stack.pop()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calculate_postfix</span><span class="params">(self,s)</span>:</span></span><br><span class="line"></span><br><span class="line">        print(s)</span><br><span class="line"></span><br><span class="line">        add = <span class="keyword">lambda</span> x,y: x+y</span><br><span class="line">        sub = <span class="keyword">lambda</span> x,y: x-y</span><br><span class="line">        mul = <span class="keyword">lambda</span> x,y: x*y</span><br><span class="line">        div = <span class="keyword">lambda</span> x,y: x//y</span><br><span class="line"></span><br><span class="line">        self.opr_func = &#123;<span class="string">"+"</span>:add,<span class="string">"-"</span>:sub,<span class="string">"*"</span>:mul,<span class="string">"/"</span>:div&#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        stack = []</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> self.opr:</span><br><span class="line">                stack.append(int(char))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                second = stack.pop()</span><br><span class="line">                first = stack.pop()</span><br><span class="line">                stack.append(self.opr_func[char](first,second))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> stack[<span class="number">-1</span>]</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calculate</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> self.calculate_postfix(self.to_postfix(s))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Data Structure and Algorithm</category>
      </categories>
      <tags>
        <tag>Project</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Longest common subsequence &amp; subarray &amp; substring</title>
    <url>/Longest-common-subsequence-subarray-substring/2019/11/26/</url>
    <content><![CDATA[<h2 id="LeetCode-718-Maximum-Length-of-Repeated-Subarray"><a href="#LeetCode-718-Maximum-Length-of-Repeated-Subarray" class="headerlink" title="LeetCode 718. Maximum Length of Repeated Subarray"></a>LeetCode 718. <a href="https://leetcode.com/problems/maximum-length-of-repeated-subarray/" target="_blank" rel="noopener">Maximum Length of Repeated Subarray</a></h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Given two <span class="built_in">integer</span> arrays A and B, <span class="built_in">return</span> the maximum length of an subarray that appears <span class="keyword">in</span> both arrays.</span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input:</span><br><span class="line">A: [1,2,3,2,1]</span><br><span class="line">B: [3,2,1,4,7]</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: </span><br><span class="line">The repeated subarray with maximum length is [3, 2, 1].</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Note:</span><br><span class="line"></span><br><span class="line">1 &lt;= len(A), len(B) &lt;= 1000</span><br><span class="line">0 &lt;= A[i], B[i] &lt; 100</span><br></pre></td></tr></table></figure>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这道题给了我们两个数组A和B，让返回连个数组的最长重复子数组。那么如果将数组换成字符串，实际这道题就是求 Longest Common Substring 的问题了。<strong>注意需要跟最长子序列 Longest Common Subsequence 区分开</strong>。 既然是子数组，那么重复的地方一定是连续的。对于这种求极值的问题，动态规划 Dynamic Programming 一直都是一个很好的选择，这里使用一个二维的 DP 数组，其中 dp[i][j] 表示数组A的前i个数字和数组B的前j个数字的最长子数组的长度，如果 dp[i][j] 不为0，则A中第i个数组和B中第j个数字必须相等，比对于这两个数组 [1,2,2] 和 [3,1,2]，dp 数组为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">  3 1 2</span><br><span class="line">1 0 1 0</span><br><span class="line">2 0 0 2</span><br><span class="line">2 0 0 1</span><br></pre></td></tr></table></figure>
<ul>
<li>dp[i][j] := max length of (A[0:i], B[0:j])</li>
<li>dp[i][j] = dp[i – 1][j – 1] + 1 if A[i-1] == B[j-1] else 0</li>
<li>Time complexity: O(m*n)</li>
<li>Space complexity: O(m*n) -&gt; O(n)</li>
</ul>
<h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findLength</span><span class="params">(self, A: List[int], B: List[int])</span> -&gt; int:</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># A --&gt; j</span></span><br><span class="line">        <span class="comment"># B --&gt; i</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> A <span class="keyword">or</span> <span class="keyword">not</span> B:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        dp = [[<span class="number">0</span>]*len(A) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(B))]</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(A)):</span><br><span class="line">            <span class="keyword">if</span> A[j] == B[<span class="number">0</span>]:</span><br><span class="line">                dp[<span class="number">0</span>][j] = <span class="number">1</span></span><br><span class="line">                res = max(res,dp[<span class="number">0</span>][j])</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(B)):</span><br><span class="line">            <span class="keyword">if</span> B[i] == A[<span class="number">0</span>]:</span><br><span class="line">                dp[i][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">                res = max(res,dp[i][<span class="number">0</span>])</span><br><span class="line">    </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(A)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,len(B)):</span><br><span class="line">                <span class="keyword">if</span> B[i] == A[j]:</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>] + <span class="number">1</span></span><br><span class="line">                    res = max(res,dp[i][j])</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<h2 id="Leetoce-1143-Longest-Common-Subsequence"><a href="#Leetoce-1143-Longest-Common-Subsequence" class="headerlink" title="Leetoce 1143. Longest Common Subsequence"></a>Leetoce 1143. <a href="https://leetcode.com/problems/longest-common-subsequence/" target="_blank" rel="noopener">Longest Common Subsequence</a></h2><blockquote>
<p>A subsequence of a string is a new string generated from the original string with some characters(can be none) deleted without changing the relative order of the remaining characters. (eg, “ace” is a subsequence of “abcde” while “aec” is not). A common subsequence of two strings is a subsequence that is common to both strings.</p>
</blockquote>
<h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Given two strings text1 and text2, <span class="built_in">return</span> the length of their longest common subsequence.</span><br><span class="line"></span><br><span class="line">A subsequence of a string is a new string generated from the original string with some characters(can be none) deleted without changing the relative order of the remaining characters. (eg, <span class="string">"ace"</span> is a subsequence of <span class="string">"abcde"</span> <span class="keyword">while</span> <span class="string">"aec"</span> is not). A common subsequence of two strings is a subsequence that is common to both strings.</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">If there is no common subsequence, <span class="built_in">return</span> 0.</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: text1 = <span class="string">"abcde"</span>, text2 = <span class="string">"ace"</span> </span><br><span class="line">Output: 3  </span><br><span class="line">Explanation: The longest common subsequence is <span class="string">"ace"</span> and its length is 3.</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: text1 = <span class="string">"abc"</span>, text2 = <span class="string">"abc"</span></span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The longest common subsequence is <span class="string">"abc"</span> and its length is 3.</span><br><span class="line">Example 3:</span><br><span class="line"></span><br><span class="line">Input: text1 = <span class="string">"abc"</span>, text2 = <span class="string">"def"</span></span><br><span class="line">Output: 0</span><br><span class="line">Explanation: There is no such common subsequence, so the result is 0.</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Constraints:</span><br><span class="line"></span><br><span class="line">1 &lt;= text1.length &lt;= 1000</span><br><span class="line">1 &lt;= text2.length &lt;= 1000</span><br><span class="line">The input strings consist of lowercase English characters only.</span><br></pre></td></tr></table></figure>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ul>
<li>dp[i][j] stands for length of LCS between text1 up to i and text2 up to j.</li>
<li>dp[i][j] = dp[i-1][j-1] + 1 if text1[i] == text2[j] </li>
<li>Otherwise, dp[i][j] = max(dp[i][j-1], dp[i-1][j])</li>
</ul>
<h3 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonSubsequence</span><span class="params">(self, text1: str, text2: str)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> text1 <span class="keyword">or</span> <span class="keyword">not</span> text2:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        dp = [[<span class="number">0</span>] * len(text1) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(text2))]</span><br><span class="line">        <span class="comment">## text1 --&gt;j; text2--&gt;i</span></span><br><span class="line">        </span><br><span class="line">        flag = <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(text2)):</span><br><span class="line">            <span class="keyword">if</span> text2[i] == text1[<span class="number">0</span>]:</span><br><span class="line">                flag = <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">if</span> flag:</span><br><span class="line">                dp[i][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        flag = <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(text1)):</span><br><span class="line">            <span class="keyword">if</span> text1[j] == text2[<span class="number">0</span>]:</span><br><span class="line">                flag = <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">if</span> flag:</span><br><span class="line">                dp[<span class="number">0</span>][j] = <span class="number">1</span></span><br><span class="line">                </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(text2)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,len(text1)):</span><br><span class="line">                <span class="keyword">if</span> text2[i] == text1[j]:</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>] + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dp[i][j] = max(dp[i<span class="number">-1</span>][j],dp[i][j<span class="number">-1</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[i][j]</span><br></pre></td></tr></table></figure>
<h2 id="Leetoce-583-Delete-Operation-for-Two-Strings"><a href="#Leetoce-583-Delete-Operation-for-Two-Strings" class="headerlink" title="Leetoce 583. Delete Operation for Two Strings"></a>Leetoce 583. <a href="https://leetcode.com/problems/delete-operation-for-two-strings/" target="_blank" rel="noopener">Delete Operation for Two Strings</a></h2><h3 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Given two words word1 and word2, find the minimum number of steps required to make word1 and word2 the same, <span class="built_in">where</span> <span class="keyword">in</span> each step you can delete one character <span class="keyword">in</span> either string.</span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: <span class="string">"sea"</span>, <span class="string">"eat"</span></span><br><span class="line">Output: 2</span><br><span class="line">Explanation: You need one step to make <span class="string">"sea"</span> to <span class="string">"ea"</span> and another step to make <span class="string">"eat"</span> to <span class="string">"ea"</span>.</span><br><span class="line">Note:</span><br><span class="line"></span><br><span class="line">The length of given words won<span class="string">'t exceed 500.</span></span><br><span class="line"><span class="string">Characters in given words can only be lower-case letters.</span></span><br></pre></td></tr></table></figure>
<h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>这题实际上是求两个字符串的 Longest Common Subsequence. 然后用两个字符串的长度和减去 2*LCS. DP的思路与上题一样。</p>
<h3 id="code-2"><a href="#code-2" class="headerlink" title="code"></a>code</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minDistance</span><span class="params">(self, word1: str, word2: str)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> word1 <span class="keyword">or</span> <span class="keyword">not</span> word2:</span><br><span class="line">            same = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            dp = [[<span class="number">0</span>] * len(word1) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(word2))]</span><br><span class="line">            <span class="comment">## text1 --&gt;j; text2--&gt;i</span></span><br><span class="line"></span><br><span class="line">            flag = <span class="keyword">False</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(word2)):</span><br><span class="line">                <span class="keyword">if</span> word2[i] == word1[<span class="number">0</span>]:</span><br><span class="line">                    flag = <span class="keyword">True</span></span><br><span class="line">                <span class="keyword">if</span> flag:</span><br><span class="line">                    dp[i][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            flag = <span class="keyword">False</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(word1)):</span><br><span class="line">                <span class="keyword">if</span> word1[j] == word2[<span class="number">0</span>]:</span><br><span class="line">                    flag = <span class="keyword">True</span></span><br><span class="line">                <span class="keyword">if</span> flag:</span><br><span class="line">                    dp[<span class="number">0</span>][j] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(word2)):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,len(word1)):</span><br><span class="line">                    <span class="keyword">if</span> word2[i] == word1[j]:</span><br><span class="line">                        dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>] + <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        dp[i][j] = max(dp[i<span class="number">-1</span>][j],dp[i][j<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">            same = dp[i][j]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> len(word1) + len(word2) - same*<span class="number">2</span></span><br></pre></td></tr></table></figure>
<h2 id="Leetcode-1092-Shortest-Common-Supersequence"><a href="#Leetcode-1092-Shortest-Common-Supersequence" class="headerlink" title="Leetcode 1092. Shortest Common Supersequence"></a>Leetcode 1092. <a href="https://leetcode.com/problems/shortest-common-supersequence/" target="_blank" rel="noopener">Shortest Common Supersequence</a></h2><h3 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Given two strings str1 and str2, <span class="built_in">return</span> the shortest string that has both str1 and str2 as subsequences.  If multiple answers exist, you may <span class="built_in">return</span> any of them.</span><br><span class="line"></span><br><span class="line">(A string S is a subsequence of string T <span class="keyword">if</span> deleting some number of characters from T (possibly 0, and the characters are chosen anywhere from T) results <span class="keyword">in</span> the string S.)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: str1 = <span class="string">"abac"</span>, str2 = <span class="string">"cab"</span></span><br><span class="line">Output: <span class="string">"cabac"</span></span><br><span class="line">Explanation: </span><br><span class="line">str1 = <span class="string">"abac"</span> is a subsequence of <span class="string">"cabac"</span> because we can delete the first <span class="string">"c"</span>.</span><br><span class="line">str2 = <span class="string">"cab"</span> is a subsequence of <span class="string">"cabac"</span> because we can delete the last <span class="string">"ac"</span>.</span><br><span class="line">The answer provided is the shortest such string that satisfies these properties.</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Note:</span><br><span class="line"></span><br><span class="line">1 &lt;= str1.length, str2.length &lt;= 1000</span><br><span class="line">str1 and str2 consist of lowercase English letters.</span><br></pre></td></tr></table></figure>
<h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p><img src="lcs.png" alt></p>
<h3 id="code-3"><a href="#code-3" class="headerlink" title="code"></a>code</h3><pre><code class="lang-python">class Solution:
    def shortestCommonSupersequence(self, str1: str, str2: str) -&gt; str:

        if not str1 or not str2:
            return &quot;&quot;


        dp = [[0] * (len(str2)+1) for i in range(len(str1)+1)]

        # dp[i][j] --&gt;  i: str1, j: str2

        for i in range(1,len(str1)+1):
            for j in range(1,len(str2)+1):
                if str1[i-1] == str2[j-1]:
                    dp[i][j] = dp[i-1][j-1] + 1
                else:
                    dp[i][j] = max(dp[i-1][j],dp[i][j-1])

        l1 = len(str1); l2 = len(str2)

        res = []

        while l1 or l2:
            if not l1:
                char = str2[l2-1]
                l2 -= 1
            elif not l2:
                char = str1[l1-1]
                l1 -= 1
            elif str1[l1-1] == str2[l2-1]:
                char = str1[l1-1]
                l1 -= 1
                l2 -= 1
            elif dp[l1-1][l2] == dp[l1][l2]:
                char = str1[l1-1]
                l1 -= 1
            elif dp[l1][l2-1] == dp[l1][l2]:
                char = str2[l2-1]
                l2 -= 1

            res.append(char)

        return &quot;&quot;.join(res[::-1])
</code></pre>
<blockquote>
<p>reference from <a href="https://zxi.mytechroad.com/blog/dynamic-programming/leetcode-1092-shortest-common-supersequence/" target="_blank" rel="noopener">https://zxi.mytechroad.com/blog/dynamic-programming/leetcode-1092-shortest-common-supersequence/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Data Structure and Algorithm</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Ruby Hightlights</title>
    <url>/Ruby-Hightlights/2019/11/24/</url>
    <content><![CDATA[<h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">标识符</th>
<th style="text-align:left">例子</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">局部变量</td>
<td style="text-align:left">first_name</td>
</tr>
<tr>
<td style="text-align:left">实例变量</td>
<td style="text-align:left">@first_name</td>
</tr>
<tr>
<td style="text-align:left">类变量</td>
<td style="text-align:left">@@first_name</td>
</tr>
<tr>
<td style="text-align:left">全局变量</td>
<td style="text-align:left">$FIRST_NAME</td>
</tr>
<tr>
<td style="text-align:left">常量</td>
<td style="text-align:left">FIRST_NAME</td>
</tr>
<tr>
<td style="text-align:left">关键字</td>
<td style="text-align:left">class</td>
</tr>
<tr>
<td style="text-align:left">方法名</td>
<td style="text-align:left">同局部变量</td>
</tr>
</tbody>
</table>
</div>
<h3 id="类变量"><a href="#类变量" class="headerlink" title="类变量"></a>类变量</h3><p>类变量的作用域并不属于类作用域，而是输入类层级的作用域。它提供了一种可以在类和类的实例之间共享数据的存储机制，但是对其他对象不可见。<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span></span><br><span class="line">    @@makes = []</span><br><span class="line">    @@cars = &#123;&#125;</span><br><span class="line">    @@total_count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">attr_reader</span> <span class="symbol">:make</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">add_make</span><span class="params">(make)</span></span></span><br><span class="line">        <span class="keyword">unless</span> @@makes.<span class="keyword">include</span>?(make)</span><br><span class="line">            @@makes &lt;&lt; make</span><br><span class="line">            @@cars[make] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">total_count</span></span></span><br><span class="line">        puts <span class="string">"<span class="subst">#&#123;@@total_count&#125;</span>"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(make)</span></span></span><br><span class="line">        <span class="keyword">if</span> @@makes.<span class="keyword">include</span>? make</span><br><span class="line">            puts <span class="string">"Create a new make <span class="subst">#&#123;make&#125;</span>"</span></span><br><span class="line">            @make = make</span><br><span class="line">            @@cars[make] += <span class="number">1</span></span><br><span class="line">            @@total_count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            raise <span class="string">"no such make"</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_mates</span></span></span><br><span class="line">        @@cars[<span class="keyword">self</span>.make]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">total_count</span></span></span><br><span class="line">        puts <span class="string">"<span class="subst">#&#123;@@total_count&#125;</span>"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># my_car = Car.new "xx"</span></span><br><span class="line">Car.add_make(<span class="string">"BMW"</span>)</span><br><span class="line">my_car = Car.new <span class="string">"BMW"</span></span><br><span class="line">Car.total_count</span><br><span class="line">puts my_car.make</span><br><span class="line">my_car.total_count</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">=begin</span></span><br><span class="line"><span class="comment">Create a new make BMW</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">BMW</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">=end</span></span><br></pre></td></tr></table></figure></p>
<h3 id="父类和子类共享类变量"><a href="#父类和子类共享类变量" class="headerlink" title="父类和子类共享类变量"></a>父类和子类共享类变量</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span></span><br><span class="line">    @@value = <span class="number">100</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> &lt; Parent</span></span><br><span class="line">    @@value = <span class="number">200</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span></span><br><span class="line">    puts @@value</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Parent.new <span class="comment"># 200</span></span><br></pre></td></tr></table></figure>
<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>定义在类中的实例方法可以看到同样定义在类中的常量，但其他程序也可以看到这些常量</p>
<h3 id="私有方法"><a href="#私有方法" class="headerlink" title="私有方法"></a>私有方法</h3><p>私有方法不能显式地被接收者调用。因为当没有明确接收对象时，接收对象是self。所以如果接收对象是Test的一个实例时，是可以调用成功的。<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">a</span></span></span><br><span class="line">        puts <span class="string">"a"</span> </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">b</span></span></span><br><span class="line">        <span class="comment"># self.a error</span></span><br><span class="line">        a</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    private <span class="symbol">:a</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">test = Test.new</span><br><span class="line">test.a <span class="comment"># error!</span></span><br><span class="line">test.b <span class="comment"># "a"</span></span><br></pre></td></tr></table></figure></p>
<h3 id="保护方法"><a href="#保护方法" class="headerlink" title="保护方法"></a>保护方法</h3><p>只能在此对象的实例方法或此类(或子类)的另一个对象中直接调用受保护的方法。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">a</span></span></span><br><span class="line">        puts <span class="string">"a"</span> </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">b</span></span></span><br><span class="line">        a</span><br><span class="line">        puts <span class="string">"<span class="subst">#&#123;<span class="keyword">self</span>&#125;</span>"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    protected <span class="symbol">:a</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">test = Test.new</span><br><span class="line">test.b</span><br></pre></td></tr></table></figure>
<h2 id="Class-and-object"><a href="#Class-and-object" class="headerlink" title="Class and object"></a>Class and object</h2><h3 id="查看对象的原生方法"><a href="#查看对象的原生方法" class="headerlink" title="查看对象的原生方法"></a>查看对象的原生方法</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">p Object.new.methods.sort</span><br><span class="line"><span class="comment">=begin</span></span><br><span class="line"><span class="comment">[:!, :!=, :!~, :&lt;=&gt;, :==, :===, :=~, :__id__, :__send__, :class, :clone, :define_singleton_method, :display, :dup, :enum_for, :eql?, :equal?, :extend, :freeze, :frozen?, :hash, :inspect, :instance_eval, :instance_exec, :instance_of?, :instance_variable_defined?, :instance_variable_get, :instance_variable_set, :instance_variables, :is_a?, :itself, :kind_of?, :method, :methods, :nil?, :object_id, :private_methods, :protected_methods, :public_method, :public_methods, :public_send, :remove_instance_variable, :respond_to?, :send, :singleton_class, :singleton_method, :singleton_methods, :taint, :tainted?, :tap, :then, :to_enum, :to_s, :trust, :untaint, :untrust, :untrusted?, :yield_self]</span></span><br><span class="line"><span class="comment">=end</span></span><br></pre></td></tr></table></figure>
<h3 id="重开类"><a href="#重开类" class="headerlink" title="重开类"></a>重开类</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">m</span></span></span><br><span class="line">        puts <span class="string">"method m"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">y</span></span></span><br><span class="line">        puts <span class="string">"methods y"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">p C.new.methods.sort</span><br><span class="line"></span><br><span class="line"><span class="comment"># [...... :m, ...... :y, ......]</span></span><br></pre></td></tr></table></figure>
<h3 id="单例方法"><a href="#单例方法" class="headerlink" title="单例方法"></a>单例方法</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">obj = Object.new</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">obj</span>.<span class="title">test</span></span></span><br><span class="line">    p <span class="string">"test"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">cla = Class.new</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cla</span>.<span class="title">test</span></span></span><br><span class="line">    p <span class="string">"test"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">obj.test</span><br><span class="line">cla.test</span><br><span class="line"></span><br><span class="line"><span class="comment"># "test"</span></span><br><span class="line"><span class="comment"># "test"</span></span><br></pre></td></tr></table></figure>
<h3 id="对象方法查找规则"><a href="#对象方法查找规则" class="headerlink" title="对象方法查找规则"></a>对象方法查找规则</h3><p><img src="methods.jpg" alt></p>
<h3 id="类对象怎样查找方法"><a href="#类对象怎样查找方法" class="headerlink" title="类对象怎样查找方法"></a>类对象怎样查找方法</h3><ul>
<li>类是对象</li>
<li>类的实例也是对象</li>
<li>类对象有自己的方法、自己的状态和唯一标识</li>
</ul>
<p>因此，类的对象方法查找规则是</p>
<ol>
<li>从他的类</li>
<li>从超类和他们类更早的祖先</li>
<li>从存储在他们自身的单例方法</li>
</ol>
<h3 id="顶层方法"><a href="#顶层方法" class="headerlink" title="顶层方法"></a>顶层方法</h3><p>顶层方法作为Object类的私有方法被保存下来，它在任何地方可用，但是不能现式地指定接收者。</p>
<h2 id="Self"><a href="#Self" class="headerlink" title="Self"></a>Self</h2><p><img src="self.jpg" alt></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">puts <span class="string">"In top level, self is:  <span class="subst">#&#123;<span class="keyword">self</span>&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">A</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">n</span></span></span><br><span class="line">        puts <span class="string">"In module A, self is:  <span class="subst">#&#123;<span class="keyword">self</span>&#125;</span>"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line">    puts <span class="string">"In Test, self is: <span class="subst">#&#123;<span class="keyword">self</span>&#125;</span>"</span>  <span class="comment"># 类对象</span></span><br><span class="line">    <span class="keyword">include</span> A</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">x</span></span></span><br><span class="line">        puts <span class="string">"In x, self is: <span class="subst">#&#123;<span class="keyword">self</span>&#125;</span>"</span>   <span class="comment"># 类对象</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">m</span></span></span><br><span class="line">        puts <span class="string">"In m, self is: <span class="subst">#&#123;<span class="keyword">self</span>&#125;</span>"</span>  <span class="comment"># 实例对象</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">test = Test.new</span><br><span class="line">Test.x</span><br><span class="line">test.m</span><br><span class="line">test.n</span><br><span class="line"></span><br><span class="line"><span class="comment">=begin</span></span><br><span class="line"><span class="comment">In top level, self is:  main</span></span><br><span class="line"><span class="comment">In Test, self is: Test</span></span><br><span class="line"><span class="comment">In x, self is: Test</span></span><br><span class="line"><span class="comment">In m, self is: #&lt;Test:0x00007fa01a04cbc8&gt;</span></span><br><span class="line"><span class="comment">In module A, self is:  #&lt;Test:0x00007fa01a04cbc8&gt;</span></span><br><span class="line"><span class="comment">=end</span></span><br></pre></td></tr></table></figure>
<h2 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h2><p><img src="scope.jpg" alt></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">a = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">t</span></span></span><br><span class="line">    puts <span class="string">"Top level method t"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">x</span></span></span><br><span class="line">        a = <span class="number">2</span></span><br><span class="line">        puts <span class="string">"C.x, a = <span class="subst">#&#123;a&#125;</span>"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">m</span></span></span><br><span class="line">        a = <span class="number">3</span></span><br><span class="line">        puts <span class="string">"C#m; a = <span class="subst">#&#123;a&#125;</span>"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">n</span></span></span><br><span class="line">        a = <span class="number">4</span></span><br><span class="line">        puts <span class="string">"C#n; a = <span class="subst">#&#123;a&#125;</span>"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    puts <span class="string">"class scope: a = <span class="subst">#&#123;a&#125;</span>"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C.x</span><br><span class="line">c = C.new</span><br><span class="line">c.m</span><br><span class="line">c.n</span><br><span class="line"></span><br><span class="line"><span class="comment">=begin</span></span><br><span class="line"><span class="comment">class scope: a = 1</span></span><br><span class="line"><span class="comment">C.x, a = 2</span></span><br><span class="line"><span class="comment">C#m; a = 3</span></span><br><span class="line"><span class="comment">C#n; a = 4</span></span><br><span class="line"><span class="comment">=end</span></span><br></pre></td></tr></table></figure>
<h2 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h2><h3 id="case-子句"><a href="#case-子句" class="headerlink" title="case 子句"></a>case 子句</h3><p>每个 ruby 对象都有一个 case 相等性判断方法: <strong>===</strong></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line">    <span class="keyword">attr_accessor</span> <span class="symbol">:age</span>, <span class="symbol">:height</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(age,height)</span></span></span><br><span class="line">        <span class="keyword">self</span>.age = age</span><br><span class="line">        <span class="keyword">self</span>.height = height</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">===</span><span class="params">(other_obj)</span></span></span><br><span class="line">        (<span class="keyword">self</span>.age == other_obj.age) &amp; (<span class="keyword">self</span>.height == other_obj.height)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$person1 = Person.new(<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line">$person2 = Person.new(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(person)</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> person</span><br><span class="line">    <span class="keyword">when</span> $person1</span><br><span class="line">        puts <span class="string">"person 1"</span></span><br><span class="line">    <span class="keyword">when</span> $person2</span><br><span class="line">        puts <span class="string">"person"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        puts <span class="string">"not matching"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">person = Person.new(<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line">test(person) <span class="comment"># person 1</span></span><br></pre></td></tr></table></figure>
<h3 id="比较和-Comparable-模块"><a href="#比较和-Comparable-模块" class="headerlink" title="比较和 Comparable 模块"></a>比较和 Comparable 模块</h3><p>如果类需要有完整的比较方法，可以由如下解决方案：</p>
<ul>
<li>混合名为 Comparable 的模块</li>
<li>定义 <strong>&lt;=&gt;</strong> 的比较方法做为实例方法，在这个方法内部需要定义”小于”，”等于”，”大于”的含义。</li>
</ul>
<h3 id="代码块（block-和-关键字-yield"><a href="#代码块（block-和-关键字-yield" class="headerlink" title="代码块（block) 和 关键字 (yield)"></a>代码块（block) 和 关键字 (yield)</h3><p>ruby 中的每个方法调用都遵循如下语法：</p>
<ol>
<li>接收者对象或者变量</li>
<li>点（如果有明确的接收者则为必要条件）</li>
<li>方法名</li>
<li>参数列表（可选，默认为（））</li>
<li>代码块 （可选，没有默认）</li>
</ol>
<ul>
<li>代码块可以使用 {}, 也可以使用 do while 提供；</li>
<li>如果提供的代码块在方法中不能提供，并不会发生错误；</li>
<li>代码块和方法一样，可以接受参数；</li>
<li>yeild 的实际总用是转移控制权与作用域到代码块（可以跳回来）。</li>
<li>代码块是一个闭包(closure)</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">block_scope</span></span></span><br><span class="line">    x = <span class="number">10</span></span><br><span class="line">    <span class="number">1</span>.times &#123; puts x&#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">block_scope <span class="comment"># 10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">block_scope</span></span></span><br><span class="line">    x = <span class="number">10</span></span><br><span class="line">    <span class="number">1</span>.times <span class="keyword">do</span></span><br><span class="line">        x = <span class="number">20</span></span><br><span class="line">        puts x</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">block_scope <span class="comment"># 20</span></span><br></pre></td></tr></table></figure>
<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><ol>
<li><p>here-doc</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">text = &lt;&lt;EOM.to_i</span><br><span class="line"><span class="number">10</span></span><br><span class="line">EOM</span><br><span class="line"></span><br><span class="line">puts text <span class="comment"># 10</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>索引</p>
</li>
</ol>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">string = <span class="string">"zhangruochi"</span></span><br><span class="line"></span><br><span class="line">puts string[<span class="number">0</span>,<span class="number">2</span>] <span class="comment"># zh</span></span><br><span class="line">puts string[<span class="number">0</span>..<span class="number">2</span>] <span class="comment"># zha</span></span><br><span class="line">puts string[<span class="number">0</span>...<span class="number">2</span>] <span class="comment"># zh</span></span><br><span class="line">puts string[<span class="number">0</span>..-<span class="number">1</span>] <span class="comment"># zhangruochi</span></span><br><span class="line">puts string[<span class="string">"zhang"</span>] <span class="comment">#zhang</span></span><br><span class="line">puts string[<span class="string">"xxx"</span>] <span class="comment">#nil</span></span><br></pre></td></tr></table></figure>
<h2 id="Enumerable"><a href="#Enumerable" class="headerlink" title="Enumerable"></a>Enumerable</h2><p>在ruby中，对象之间共有的特性通常都被放在模块里，集合类型也不例外：Ruby中的集合类型对象通常都包含 Enumerable 模块。</p>
<h2 id="Each"><a href="#Each" class="headerlink" title="Each"></a>Each</h2><p>任何枚举类型都包含一个each方法，其作用是将其中的元素逐个地作为参数传递给代码块。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这里的每个方法都是基于each构建</span></span><br><span class="line">p Enumerable.instance_methods(<span class="literal">false</span>).sort</span><br><span class="line"><span class="comment">=begin</span></span><br><span class="line"><span class="comment">[:all?, :any?, :chain, :chunk, :chunk_while, :collect, :collect_concat, :count, :cycle, :detect, :drop, :drop_while, :each_cons, :each_entry, :each_slice, :each_with_index, :each_with_object, :entries, :filter, :find, :find_all, :find_index, :first, :flat_map, :grep, :grep_v, :group_by, :include?, :inject, :lazy, :map, :max, :max_by, :member?, :min, :min_by, :minmax, :minmax_by, :none?, :one?, :partition, :reduce, :reject, :reverse_each, :select, :slice_after, :slice_before, :slice_when, :sort, :sort_by, :sum, :take, :take_while, :to_a, :to_h, :uniq, :zip]</span></span><br><span class="line"><span class="comment">=end</span></span><br></pre></td></tr></table></figure>
<p><strong>Rainbow 混合了Enumerable模块，则自动赋予了整套基于 each 方法构建的方法。</strong><br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rainbow</span></span></span><br><span class="line">    <span class="keyword">include</span> Enumerable</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">each</span></span></span><br><span class="line">        <span class="keyword">yield</span> <span class="string">"Red"</span></span><br><span class="line">        <span class="keyword">yield</span> <span class="string">"Orange"</span></span><br><span class="line">        <span class="keyword">yield</span> <span class="string">"Green"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">a = Rainbow.new</span><br><span class="line">p a.map(&amp;<span class="symbol">:upcase</span>)</span><br><span class="line"><span class="comment"># ["RED", "ORANGE", "GREEN"]</span></span><br></pre></td></tr></table></figure></p>
<h2 id="符号参数"><a href="#符号参数" class="headerlink" title="符号参数"></a>符号参数</h2><p>可以在方法参数的位置使用如<strong>:upcase</strong>这样的符号并在前面加上&amp;，它的效果与在代码块中调用每个元素同符号名称相等的方法的作用相同。<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">p [<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>].map(&amp;<span class="symbol">:downcase</span>)</span><br></pre></td></tr></table></figure></p>
<h2 id="Enumerator-枚举器"><a href="#Enumerator-枚举器" class="headerlink" title="Enumerator(枚举器)"></a>Enumerator(枚举器)</h2><ol>
<li>迭代器本质上是一个方法，它将一个或多个元素传递到代码块中。</li>
<li>枚举器本质上一枚举器是一个简单的可枚举对象。它有 each 方法，并使用Enumerable模块定义其所有常用的方法。</li>
<li>枚举器只需要有一个“迭代每一个”的逻辑，它已经知道后面的事情可以一一展开。<ul>
<li>Enumerator.new 伴随一个包含稍后会用到的 each 逻辑的代码块</li>
<li>创建一个基于可存在枚举对象的枚举器，这样枚举器的 each 方法就会从那个枚举对象的特定方法中抽取它的元素用于迭代</li>
</ul>
</li>
</ol>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">e = Enumerator.new <span class="keyword">do</span> <span class="params">|y|</span></span><br><span class="line">    y &lt;&lt; <span class="number">1</span></span><br><span class="line">    y &lt;&lt; <span class="number">2</span></span><br><span class="line">    y &lt;&lt; <span class="number">3</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p e.to_a</span><br><span class="line">p e.map &#123;<span class="params">|x|</span> x * <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programming Language</category>
      </categories>
  </entry>
  <entry>
    <title>Topological Sorting</title>
    <url>/Topological-Sorting/2019/11/20/</url>
    <content><![CDATA[<p>在图论中，拓扑排序（Topological Sorting）是一个有向无环图（DAG, Directed Acyclic Graph）的所有顶点的线性序列。且该序列必须满足下面两个条件：</p>
<ol>
<li>每个顶点出现且只出现一次。</li>
<li>若存在一条从顶点 A 到顶点 B 的路径，那么在序列中顶点 A 出现在顶点 B 的前面。</li>
</ol>
<p>有向无环图（DAG）才有拓扑排序，非DAG图没有拓扑排序一说。例如，下面这个图：</p>
<p><img src="1.png" alt></p>
<p>它是一个 DAG 图，那么如何写出它的拓扑排序呢？这里说一种比较常用的方法：</p>
<ol>
<li>从 DAG 图中选择一个 没有前驱（即入度为0）的顶点并输出。</li>
<li>从图中删除该顶点和所有以它为起点的有向边。</li>
<li>重复 1 和 2 直到当前的 DAG 图为空。</li>
<li><strong>当前图中不存在无前驱的顶点说明有向图中必然存在环</strong></li>
</ol>
<p><img src="2.png" alt></p>
<p>于是，得到拓扑排序后的结果是[1, 2, 4, 3, 5]。 通常，一个有向无环图可以有一个或多个拓扑排序序列。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">topoSort</span><span class="params">(G)</span>:</span></span><br><span class="line">    in_degree = &#123;node:<span class="number">0</span> <span class="keyword">for</span> node <span class="keyword">in</span> G&#125;</span><br><span class="line">    <span class="keyword">for</span> u <span class="keyword">in</span> G:</span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> G[u]:</span><br><span class="line">            in_degree[v] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    queue = [u <span class="keyword">for</span> u <span class="keyword">in</span> in_degree <span class="keyword">if</span> in_degree[u] == <span class="number">0</span>]</span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">while</span> queue:</span><br><span class="line">        s = queue.pop()</span><br><span class="line">        res.append(s)</span><br><span class="line">        <span class="keyword">for</span> u <span class="keyword">in</span> G[s]:</span><br><span class="line">            in_degree[u] -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> in_degree[u] == <span class="number">0</span>:</span><br><span class="line">                queue.append(u)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">G=&#123;</span><br><span class="line">    <span class="number">1</span>: [<span class="number">2</span>,<span class="number">4</span>],</span><br><span class="line">    <span class="number">2</span>: [<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">    <span class="number">3</span>: [<span class="number">5</span>],</span><br><span class="line">    <span class="number">4</span>: [<span class="number">3</span>,<span class="number">5</span>],</span><br><span class="line">    <span class="number">5</span>: [],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res=topoSort(G)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
<h2 id="Leetcode-207-Course-Schedule"><a href="#Leetcode-207-Course-Schedule" class="headerlink" title="Leetcode 207 Course Schedule"></a>Leetcode 207 <a href="https://leetcode.com/problems/course-schedule/" target="_blank" rel="noopener">Course Schedule</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">There are a total of n courses you have to take, labeled from 0 to n-1.</span><br><span class="line"></span><br><span class="line">Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]</span><br><span class="line"></span><br><span class="line">Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?</span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: 2, [[1,0]] </span><br><span class="line">Output: true</span><br><span class="line">Explanation: There are a total of 2 courses to take. </span><br><span class="line">             To take course 1 you should have finished course 0. So it is possible.</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: 2, [[1,0],[0,1]]</span><br><span class="line">Output: false</span><br><span class="line">Explanation: There are a total of 2 courses to take. </span><br><span class="line">             To take course 1 you should have finished course 0, and to take course 0 you should</span><br><span class="line">             also have finished course 1. So it is impossible.</span><br><span class="line">Note:</span><br><span class="line"></span><br><span class="line">The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.</span><br><span class="line">You may assume that there are no duplicate edges in the input prerequisites.</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canFinish</span><span class="params">(self, numCourses: int, prerequisites: List[List[int]])</span> -&gt; bool:</span></span><br><span class="line">        G = &#123;node:[] <span class="keyword">for</span> node <span class="keyword">in</span> range(numCourses)&#125;</span><br><span class="line">        <span class="keyword">for</span> edge <span class="keyword">in</span> prerequisites:</span><br><span class="line">            G[edge[<span class="number">1</span>]].append(edge[<span class="number">0</span>])</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">top_sort</span><span class="params">(G)</span>:</span></span><br><span class="line">            in_degree = &#123;node: <span class="number">0</span> <span class="keyword">for</span> node <span class="keyword">in</span> G&#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> u <span class="keyword">in</span> G:</span><br><span class="line">                <span class="keyword">for</span> v <span class="keyword">in</span> G[u]:</span><br><span class="line">                    in_degree[v] += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">            queue = [node <span class="keyword">for</span> node <span class="keyword">in</span> in_degree <span class="keyword">if</span> in_degree[node] == <span class="number">0</span>]</span><br><span class="line">            res = []</span><br><span class="line">            <span class="keyword">while</span> queue:</span><br><span class="line">                cur_node = queue.pop()</span><br><span class="line">                res.append(cur_node)</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">for</span> v <span class="keyword">in</span> G[cur_node]:</span><br><span class="line">                    in_degree[v] -= <span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> in_degree[v] == <span class="number">0</span>:</span><br><span class="line">                        queue.append(v)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span> <span class="keyword">if</span> len(res) == len(G) <span class="keyword">else</span> <span class="keyword">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> top_sort(G)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>reference <a href="https://blog.csdn.net/lisonglisonglisong/article/details/45543451" target="_blank" rel="noopener">https://blog.csdn.net/lisonglisonglisong/article/details/45543451</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Data Structure and Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>Union Find</title>
    <url>/Union-Find/2019/11/19/</url>
    <content><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>并查集是一种树型的数据结构，用于处理一些不相交集合的合并及查询问题。常常在使用中以森林来表示。并查集有三种基本操作，获得根节点，判断两节点是否连通，以及将两不连通的节点相连（相当于将两节点各自的集合合并）。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>用UnionFind类来表示一个并查集，在构造函数中，初始化一个数组parent，parent[i]表示的含义为，索引为i的节点，它的直接父节点为parent[i]。初始化时各个节点都不相连，因此初始化parent[i]=i，让自己成为自己的父节点，从而实现各节点不互连。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n)</span>:</span></span><br><span class="line">    self.parent = list(range(n))</span><br></pre></td></tr></table></figure>
<p>由于parent[i]仅表示自己的直接父节点，查询两个节点是否相交需要比较它们的根节点是否相同。因此要封装一个查询自己根节点的方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_root</span><span class="params">(self, i)</span>:</span></span><br><span class="line">   <span class="keyword">while</span> i != self.parent[i]:</span><br><span class="line">       i = self.parent[i]</span><br><span class="line">   <span class="keyword">return</span> i</span><br></pre></td></tr></table></figure>
<p>接下来可以通过来比较根节点是否相同来判断两节点是否连通。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_connected</span><span class="params">(self, i, j)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self.get_root(i) == self.get_root(j)</span><br></pre></td></tr></table></figure>
<p>当要连通两个节点时，我们要将其中一个节点的根节点的parent，设置为另一个节点的根节点。注意，连通两个节点并非仅仅让两节点自身相连，实际上是让它们所属的集合实现合并。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(self, i, j)</span>:</span></span><br><span class="line">    i_root = self.get_root(i)</span><br><span class="line">    j_root = self.get_root(j)</span><br><span class="line">    <span class="keyword">if</span> i_root != j_root:</span><br><span class="line">        self.parent[i_root] = j_root</span><br></pre></td></tr></table></figure>
<h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>由于调用get_root时需要通过不断找自己的直接父节点，来寻找根节点，如果这棵树的层级过深，会导致性能受到严重影响。因此我们需要在union时，尽可能的减小合并后的树的高度。在构造函数中新建一个数组rank，rank[i]表示节点i所在的集合的树的高度。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n)</span>:</span></span><br><span class="line">    self.parent = list(range(n))</span><br><span class="line">    self.rank = [<span class="number">0</span>] * len(self.parent)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(self, i, j)</span>:</span></span><br><span class="line">    i_root = self.get_root(i)</span><br><span class="line">    j_root = self.get_root(j)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> self.rank[i_root] == self.rank[j_root]:</span><br><span class="line">        self.parent[i_root] = j_root</span><br><span class="line">        self.rank[j_root] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> self.rank[i_root] &gt; self.rank[j_root]:</span><br><span class="line">        self.parent[j_root] = i_root</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        self.parent[i_root] = j_root</span><br></pre></td></tr></table></figure>
<p>通过对union操作的改良可以防止树的高度过高。我们还可以对get_root操作本身进行优化。<br>当前每次执行get_root时，需要一层一层的找到自己的父节点，很费时。由于根节点没有父节点，并且文章开始处提到过如果一个节点没有父节点，那么它的父节点就是自己，因此可以说只有根节点的父节点是自己本身。现在我们加上一个判断，判断当前节点的父节点是否为根节点，如果不为根节点，就递归地将自己的父节点设置为根节点，最后返回自己的父节点。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_root</span><span class="params">(self, i)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.parent[i] != self.parent[self.parent[i]]:</span><br><span class="line">        self.parent[i] = self.get_root(self.parent[i])</span><br><span class="line">    <span class="keyword">return</span> self.parent[i]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Data Structure and Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>Greedy Algorithm</title>
    <url>/Greedy-Algorithm/2019/11/19/</url>
    <content><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong>贪心算法</strong>，是指在对问题求解时，总是做出再当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的仅是某种意义上的局部最优解。贪心算法没有固定算法框架，算法设计的关键是贪心策略的选择。必须注意的是，贪心算法不是对所有问题都能得到整体最优解，选择的贪心策略必须具备无后效性，即某个状态以后的过程不会影响以前的状态，只与当前状态有关。</p>
<h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><ol>
<li>建立数学模型来描述问题</li>
<li>把求解的问题分成若干个子问题</li>
<li>对每一子问题求解，得到子问题的局部最优解</li>
<li>把子问题的解局部最优解合成原来解问题的一个解</li>
</ol>
<h2 id="适用的问题"><a href="#适用的问题" class="headerlink" title="适用的问题"></a>适用的问题</h2><p><strong>局部最优策略能导致产生全局最优解</strong></p>
<h2 id="最小生成树问题"><a href="#最小生成树问题" class="headerlink" title="最小生成树问题"></a>最小生成树问题</h2><p>给定一个无向联通带权图G(V,E). G中的每一条边$E_i$权值为$w_i$。如果G的子图G’是一个包含G中所有顶点的子图，那么G’称为G的最小生成树，如果G’的边的权值最小.</p>
<p><img src="1.png" alt></p>
<h3 id="Kruskal算法"><a href="#Kruskal算法" class="headerlink" title="Kruskal算法"></a>Kruskal算法</h3><p>Kruskal算法是基于贪心的思想得到的。首先我们把所有的边按照权值先从小到大排列，接着按照顺序选取每条边，如果这条边的两个端点不属于同一集合，那么就将它们合并，直到所有的点都属于同一个集合为止。至于怎么合并到一个集合，那么这里我们就可以用到一个工具——-并查集。换而言之，Kruskal算法就是基于并查集的贪心算法。</p>
<ol>
<li>将图G看做一个森林，每个顶点为一棵独立的树</li>
<li>将所有的边加入集合S，即一开始S = E</li>
<li>从S中拿出一条最短的边(u,v)，如果(u,v)不在同一棵树内，则连接u,v合并这两棵树，同时将(u,v)加入生成树的边集E’</li>
<li>重复(3)直到所有点属于同一棵树，边集E’就是一棵最小生成树</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,items)</span>:</span></span><br><span class="line">        self.parent = &#123;item:item <span class="keyword">for</span> item <span class="keyword">in</span> items&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_root</span><span class="params">(self, i)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> i != self.parent[i]:</span><br><span class="line">            i = self.parent[i]</span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_connected</span><span class="params">(self, i, j)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.get_root(i) == self.get_root(j)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(self, i, j)</span>:</span></span><br><span class="line">        i_root = self.get_root(i)</span><br><span class="line">        j_root = self.get_root(j)</span><br><span class="line">        self.parent[i_root] = j_root</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kruskal</span><span class="params">(G)</span>:</span></span><br><span class="line">    nodes = list(G.keys())</span><br><span class="line">    uf = UnionFind(nodes)</span><br><span class="line"></span><br><span class="line">    res_deges = set()</span><br><span class="line">    res_weight = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    edges = set()</span><br><span class="line">    <span class="keyword">for</span> node_1 <span class="keyword">in</span> G:</span><br><span class="line">        <span class="keyword">for</span> node_2 <span class="keyword">in</span> G[node_1]:</span><br><span class="line">            <span class="keyword">if</span> node_1 &lt; node_2:</span><br><span class="line">                edges.add((node_1,node_2, G[node_1][node_2]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                edges.add((node_2,node_1, G[node_1][node_2]))</span><br><span class="line">    edges = list(edges)</span><br><span class="line">    edges.sort(key = <span class="keyword">lambda</span> edge: edge[<span class="number">-1</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> edge <span class="keyword">in</span> edges:</span><br><span class="line">        node_1,node_2,weight = edge</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> uf.is_connected(node_1,node_2):</span><br><span class="line">            uf.union(node_1,node_2)</span><br><span class="line">            res_deges.add(edge)</span><br><span class="line">            res_weight += weight</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res_deges,res_weight</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    graph = &#123;<span class="string">'A'</span>:&#123;<span class="string">'B'</span>:<span class="number">7</span>,<span class="string">'D'</span>:<span class="number">5</span>&#125;,</span><br><span class="line">             <span class="string">'B'</span>:&#123;<span class="string">'A'</span>:<span class="number">7</span>,<span class="string">'C'</span>:<span class="number">8</span>,<span class="string">'D'</span>:<span class="number">9</span>,<span class="string">'E'</span>:<span class="number">7</span>&#125;,</span><br><span class="line">             <span class="string">'C'</span>:&#123;<span class="string">'B'</span>:<span class="number">8</span>,<span class="string">'E'</span>:<span class="number">5</span>&#125;,</span><br><span class="line">             <span class="string">'D'</span>:&#123;<span class="string">'A'</span>:<span class="number">5</span>,<span class="string">'B'</span>:<span class="number">9</span>,<span class="string">'E'</span>:<span class="number">15</span>,<span class="string">'F'</span>:<span class="number">6</span>&#125;,</span><br><span class="line">             <span class="string">'E'</span>:&#123;<span class="string">'B'</span>:<span class="number">7</span>,<span class="string">'C'</span>:<span class="number">5</span>,<span class="string">'D'</span>:<span class="number">15</span>,<span class="string">'F'</span>:<span class="number">8</span>,<span class="string">'G'</span>:<span class="number">9</span>&#125;,</span><br><span class="line">             <span class="string">'F'</span>:&#123;<span class="string">'D'</span>:<span class="number">6</span>,<span class="string">'E'</span>:<span class="number">8</span>,<span class="string">'G'</span>:<span class="number">11</span>&#125;,</span><br><span class="line">             <span class="string">'G'</span>:&#123;<span class="string">'E'</span>:<span class="number">9</span>,<span class="string">'F'</span>:<span class="number">11</span>&#125;</span><br><span class="line">             &#125;</span><br><span class="line">    edges, weight = kruskal(graph)</span><br><span class="line">    print(edges)</span><br><span class="line">    print(weight)</span><br></pre></td></tr></table></figure>
<h2 id="Prim算法"><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h2><ol>
<li>以某一个点开始，寻找当前该点可以访问的所有的边；</li>
<li>在已经寻找的边中发现最小边，这个边必须有一个点还没有访问过，将还没有访问的点加入我们的集合，记录添加的边；</li>
<li>寻找当前集合可以访问的所有边，重复2的过程，直到没有新的点可以加入；</li>
<li>此时由所有边构成的树即为最小生成树。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prim</span><span class="params">(graph, root)</span>:</span></span><br><span class="line">    </span><br><span class="line">    nodes = list(graph)</span><br><span class="line">    nodes.remove(root)</span><br><span class="line">    visited = [root]</span><br><span class="line">    edges = set()</span><br><span class="line">    weight = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> nodes:</span><br><span class="line">        distance = float(<span class="string">'inf'</span>) </span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> visited:</span><br><span class="line">            <span class="keyword">for</span> d <span class="keyword">in</span> graph[s]:</span><br><span class="line">                <span class="keyword">if</span> d <span class="keyword">in</span> visited <span class="keyword">or</span> s == d:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> graph[s][d] &lt; distance:</span><br><span class="line">                    distance = graph[s][d]</span><br><span class="line">                    node_1 = s</span><br><span class="line">                    node_2 = d</span><br><span class="line">        edges.add((node_1,node_2,graph[node_1][node_2]))</span><br><span class="line">        weight += graph[node_1][node_2]</span><br><span class="line">        visited.append(node_2)</span><br><span class="line">        nodes.remove(node_2)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> edges,weight</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    graph = &#123;<span class="string">'A'</span>:&#123;<span class="string">'B'</span>:<span class="number">7</span>,<span class="string">'D'</span>:<span class="number">5</span>&#125;,</span><br><span class="line">             <span class="string">'B'</span>:&#123;<span class="string">'A'</span>:<span class="number">7</span>,<span class="string">'C'</span>:<span class="number">8</span>,<span class="string">'D'</span>:<span class="number">9</span>,<span class="string">'E'</span>:<span class="number">7</span>&#125;,</span><br><span class="line">             <span class="string">'C'</span>:&#123;<span class="string">'B'</span>:<span class="number">8</span>,<span class="string">'E'</span>:<span class="number">5</span>&#125;,</span><br><span class="line">             <span class="string">'D'</span>:&#123;<span class="string">'A'</span>:<span class="number">5</span>,<span class="string">'B'</span>:<span class="number">9</span>,<span class="string">'E'</span>:<span class="number">15</span>,<span class="string">'F'</span>:<span class="number">6</span>&#125;,</span><br><span class="line">             <span class="string">'E'</span>:&#123;<span class="string">'B'</span>:<span class="number">7</span>,<span class="string">'C'</span>:<span class="number">5</span>,<span class="string">'D'</span>:<span class="number">15</span>,<span class="string">'F'</span>:<span class="number">8</span>,<span class="string">'G'</span>:<span class="number">9</span>&#125;,</span><br><span class="line">             <span class="string">'F'</span>:&#123;<span class="string">'D'</span>:<span class="number">6</span>,<span class="string">'E'</span>:<span class="number">8</span>,<span class="string">'G'</span>:<span class="number">11</span>&#125;,</span><br><span class="line">             <span class="string">'G'</span>:&#123;<span class="string">'E'</span>:<span class="number">9</span>,<span class="string">'F'</span>:<span class="number">11</span>&#125;</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">    edges, weight = prim(graph,<span class="string">'A'</span>)</span><br><span class="line">    print(edges)</span><br><span class="line">    print(weight)</span><br></pre></td></tr></table></figure>
<h2 id="leetcode-455-Assign-Cookies"><a href="#leetcode-455-Assign-Cookies" class="headerlink" title="leetcode 455 Assign Cookies"></a>leetcode 455 <a href="https://leetcode.com/problems/assign-cookies/" target="_blank" rel="noopener">Assign Cookies</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie. Each child i has a greed factor gi, which is the minimum size of a cookie that the child will be content with; and each cookie j has a size sj. If sj &gt;= gi, we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number.</span><br><span class="line"></span><br><span class="line">Note:</span><br><span class="line">You may assume the greed factor is always positive. </span><br><span class="line">You cannot assign more than one cookie to one child.</span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: [1,2,3], [1,1]</span><br><span class="line"></span><br><span class="line">Output: 1</span><br><span class="line"></span><br><span class="line">Explanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. </span><br><span class="line">And even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.</span><br><span class="line">You need to output 1.</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: [1,2], [1,2,3]</span><br><span class="line"></span><br><span class="line">Output: 2</span><br><span class="line"></span><br><span class="line">Explanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. </span><br><span class="line">You have 3 cookies and their sizes are big enough to gratify all of the children, </span><br><span class="line">You need to output 2.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>因为最小的孩子最容易得到满足，因此先满足最小孩子。给一个孩子的饼干应当尽量小又能满足该孩子，这样大饼干就能拿来给满足度比较大的孩子。<br>假设在某次选择中，贪心策略选择给第 i 个孩子分配第 m 个饼干，并且第 i 个孩子满足度最小，第 m 个饼干为可以满足第 i 个孩子的最小饼干，利用贪心策略最终可以满足 k 个孩子。假设最优策略在这次选择中给 i 个孩子分配第 n 个饼干，并且这个饼干大于第 m 个饼干。我们发现使用第 m 个饼干去替代第 n 个饼干完全不影响后续的结果，因此不存在比贪心策略更优的策略，即贪心策略就是最优策略。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findContentChildren</span><span class="params">(self, g: List[int], s: List[int])</span> -&gt; int:</span></span><br><span class="line">        res = <span class="number">0</span>; i = <span class="number">0</span>; j = <span class="number">0</span></span><br><span class="line">        g.sort()</span><br><span class="line">        s.sort()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> i &lt; len(g) <span class="keyword">and</span> j &lt; len(s):</span><br><span class="line">            <span class="keyword">if</span> g[i] &lt;= s[j]:</span><br><span class="line">                res += <span class="number">1</span></span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">            j+=<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Data Structure and Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>Flee from famine</title>
    <url>/Flee-from-famine/2019/11/19/</url>
    <content><![CDATA[<p>我妈打电话给我说，觉得难受，感觉像在“逃荒”一样。<br>我会让一切都变好的。</p>
]]></content>
      <categories>
        <category>Private</category>
      </categories>
  </entry>
  <entry>
    <title>Knapsack problem</title>
    <url>/Knapsack-problem/2019/11/16/</url>
    <content><![CDATA[<h2 id="Backtracking"><a href="#Backtracking" class="headerlink" title="Backtracking"></a>Backtracking</h2><p>我们把物体依次排列，整个问题就分为n个阶段，每个阶段对应一个物品 i 怎样选择。</p>
<p><img src="bag.jpg" alt="bag.jpg"><br>观察解空间树，每个结点我们用(i,cw)来表示。i表示将要觉得i个物品是否装入背包，只有装和不装两种情况。cw 表示当前背包中的重量。比如(2,2)表示我们将要觉得第2个物品是否装入背包，在决策前，背包中物品的总重量是2。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">weights = [<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">3</span>]</span><br><span class="line">W = <span class="number">9</span></span><br><span class="line">n = <span class="number">5</span> </span><br><span class="line"></span><br><span class="line">max_weight = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backtracking_bag</span><span class="params">(i, cw, items)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> max_weight,methods</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    i: test the item i</span></span><br><span class="line"><span class="string">    cw: current total weight</span></span><br><span class="line"><span class="string">    weights: the weight of items</span></span><br><span class="line"><span class="string">    W: total weight the bag can load</span></span><br><span class="line"><span class="string">    n: the number of items</span></span><br><span class="line"><span class="string">    max_weight: the max weight the bag can load</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> i == n:</span><br><span class="line">        <span class="keyword">if</span> cw &lt;= W <span class="keyword">and</span> cw &gt;= max_weight:</span><br><span class="line">            <span class="keyword">if</span> cw &gt; max_weight:</span><br><span class="line">                max_weight = cw</span><br><span class="line">                methods = []</span><br><span class="line">                methods.append(items[:])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                methods.append(items[:])</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line"></span><br><span class="line">    backtracking_bag(i+<span class="number">1</span>,cw,items)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> cw + weights[i] &lt;= W:</span><br><span class="line">        items[i] = <span class="number">1</span></span><br><span class="line">        backtracking_bag(i+<span class="number">1</span>,cw+weights[i],items)</span><br><span class="line">        items[i] = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    items = [<span class="number">0</span>] * n</span><br><span class="line">    methods = []</span><br><span class="line">    backtracking_bag(<span class="number">0</span>,<span class="number">0</span>,items)</span><br><span class="line">    print(max_weight)</span><br><span class="line">    print(methods)</span><br></pre></td></tr></table></figure>
<h2 id="Backtracking-with-memory"><a href="#Backtracking-with-memory" class="headerlink" title="Backtracking with memory"></a>Backtracking with memory</h2><p>我们发现，很多子问题是重复的。比如f(2,2) 和 f(3,6)都被重复计算很多次。因此，我们可以用<strong>备忘录</strong>的方法来解决重复计算的问题。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">weights = [<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">3</span>]</span><br><span class="line">W = <span class="number">9</span></span><br><span class="line">n = <span class="number">5</span> </span><br><span class="line"></span><br><span class="line">max_weight = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backtracking_memory_bag</span><span class="params">(i, cw, items)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> max_weight,methods,memory</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    i: test the item i</span></span><br><span class="line"><span class="string">    cw: current total weight</span></span><br><span class="line"><span class="string">    weights: the weight of items</span></span><br><span class="line"><span class="string">    W: total weight the bag can load</span></span><br><span class="line"><span class="string">    n: the number of items</span></span><br><span class="line"><span class="string">    max_weight: the max weight the bag can load</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> i == n:</span><br><span class="line">        <span class="keyword">if</span> cw &lt;= W <span class="keyword">and</span> cw &gt;= max_weight:</span><br><span class="line">            <span class="keyword">if</span> cw &gt; max_weight:</span><br><span class="line">                max_weight = cw</span><br><span class="line">                methods = []</span><br><span class="line">                methods.append(items[:])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                methods.append(items[:])</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> memory[i][cw]:</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    memory[i][cw] = <span class="keyword">True</span>  <span class="comment"># remember the state of i </span></span><br><span class="line"></span><br><span class="line">    backtracking_bag(i+<span class="number">1</span>,cw,items)</span><br><span class="line">    <span class="keyword">if</span> cw + weights[i] &lt;= W:</span><br><span class="line">        items[i] = <span class="number">1</span></span><br><span class="line">        backtracking_bag(i+<span class="number">1</span>,cw+weights[i],items)</span><br><span class="line">        items[i] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    items = [<span class="number">0</span>] * n</span><br><span class="line">    methods = []</span><br><span class="line">    memory = [[<span class="keyword">False</span>]*W <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">    backtracking_bag(<span class="number">0</span>,<span class="number">0</span>,items)</span><br><span class="line">    print(max_weight)</span><br><span class="line">    print(methods)</span><br></pre></td></tr></table></figure>
<h2 id="Dynamic-Programming"><a href="#Dynamic-Programming" class="headerlink" title="Dynamic Programming"></a>Dynamic Programming</h2><p>我们把整个求解的过程分为n个阶段，每个阶段会决策一个物品是否放入背包中。每个物品决策完成后，背包中的重量会有多种情况。<br>动态规划问题的解决步骤一般可以总结为 3 步：</p>
<ol>
<li>定义数组元素的含义<br>我们用 dp[n][cw] 来表示在第n个阶段重量为cw的状态。</li>
<li>找出状态转移方程。<ul>
<li>把第 i 个物品装入背包中<script type="math/tex; mode=display">dp[i][cw + weights[i]] = true</script></li>
<li>不把第 i 个物品装入背包中<script type="math/tex; mode=display">dp[i][cw] = true</script>比如第 0 个物品的重量是2，要么装入背包，要么不装入背包。决策完之后会对应背包的两种状态，背包中物品的总重量为 0 或者 2。<br>我们用dp[0][0] = true 和 dp[0][2] = true表示。<br><img src="dp.jpg" alt><br><img src="dp2.jpg" alt></li>
</ul>
</li>
<li>初始值。</li>
</ol>
<ul>
<li>第 0 个物品不装: dp[0][0] = true</li>
<li>第 0 个物品装: dp[0][weights[i]] = true</li>
</ul>
<pre><code class="lang-python">import pprint

weights = [2,2,4,6,3]
W = 9
n = 5 

def dp_bag(weights,W,n):
    dp = [[0] * (W+1) for i in range(n)] 

    ## 第 0 个物品不装
    dp[0][0] = 1

    ##  第 0 个物品装
    if weights[0] &lt; W:
        dp[0][weights[0]] = 1

    for i in range(1,n):
        for j in range(W):
            ## 不把 i 放入背包中，当前背包重量不变
            if dp[i-1][j]:
                dp[i][j] = 1

        for j in range(W):
            ## 把 i 放入背包中
            if j + weights[i] &lt;= W and dp[i-1][j]:
                dp[i][j+weights[i]] = 1

    pprint.pprint(dp)

    for i in range(W,-1,-1):
        if dp[-1][i]:
            return i




if __name__ == &#39;__main__&#39;:

    max_weight = dp_bag(weights,W,n)
    print(max_weight)
</code></pre>
<blockquote>
<p>reference from 数据结构与算法之美 王争</p>
</blockquote>
]]></content>
      <categories>
        <category>Data Structure and Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>Dynamic Programming</title>
    <url>/Dynamic-Programming/2019/11/16/</url>
    <content><![CDATA[<blockquote>
<p>动态规划，无非就是利用历史记录，来避免我们的重复计算。</p>
</blockquote>
<ol>
<li><strong>最优子结构</strong>。最优子结构指的是问题的最优解包含子问题的最优解。反过来说，我们可以通过子问题的最优解来推导出问题的最优解。或者理解为后面阶段的状态可以由前面阶段的状态推导出来。</li>
<li><strong>无后效性</strong>。在推导后面阶段的状态的时候，我们只关心前面阶段的状态值，不关心这个状态是怎么一步步推导出来的。同时，某阶段的状态值一旦确定，就不受之后阶段的决策影响。</li>
<li><strong>重复子问题</strong>。不同的决策序列，到达某个相同的阶段时，可能会产生重复的状态。</li>
</ol>
<h2 id="动态规划三大步骤"><a href="#动态规划三大步骤" class="headerlink" title="动态规划三大步骤"></a>动态规划三大步骤</h2><ol>
<li>第一步骤：定义数组元素的含义，上面说了，我们会用一个数组，来保存历史数组，假设用一维数组 dp[] 吧。这个时候有一个非常非常重要的点，就是规定这个数组元素的含义，例如 dp[i] 是代表什么意思？</li>
<li>第二步骤：找出状态转移方程。当我们要计算 dp[n] 时，是可以利用 dp[n-1]，dp[n-2]…..dp[1]，来推出 dp[n] 的，也就是可以利用历史数据来推出新的元素值，所以我们要找出数组元素之间的关系式，例如 dp[n] = dp[n-1] + dp[n-2]，这个就是他们的关系式了。</li>
<li>第三步骤：找出初始值。学过数学归纳法的都知道，虽然我们知道了数组元素之间的关系式，例如 dp[n] = dp[n-1] + dp[n-2]，我们可以通过 dp[n-1] 和 dp[n-2] 来计算 dp[n]，但是，我们得知道初始值啊，例如一直推下去的话，会由 dp[3] = dp[2] + dp[1]。而 dp[2] 和 dp[1] 是不能再分解的了，所以我们必须要能够直接获得 dp[2] 和 dp[1] 的值，而这，就是所谓的初始值。</li>
</ol>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="leetcode-70-Climbing-Stairs"><a href="#leetcode-70-Climbing-Stairs" class="headerlink" title="leetcode 70 Climbing Stairs"></a>leetcode 70 <a href="https://leetcode.com/problems/climbing-stairs/" target="_blank" rel="noopener">Climbing Stairs</a></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">You are climbing a stair case. It takes n steps to reach to the top.</span><br><span class="line"></span><br><span class="line">Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</span><br><span class="line"></span><br><span class="line">Note: Given n will be a positive integer.</span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: 2</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: There are two ways to climb to the top.</span><br><span class="line">1. 1 step + 1 step</span><br><span class="line">2. 2 steps</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: 3</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: There are three ways to climb to the top.</span><br><span class="line">1. 1 step + 1 step + 1 step</span><br><span class="line">2. 1 step + 2 steps</span><br><span class="line">3. 2 steps + 1 step</span><br></pre></td></tr></table></figure>
<ol>
<li>定义数组元素的含义<br>我们就定义 dp[i] 的含义为：跳上一个 i 级的台阶总共有 dp[i] 种跳法。</li>
<li>找出数组元素间的关系式<br>青蛙到达第 n 级的台阶有两种方式: 从第 n-1 级跳上来 和 从第 n-2 级跳上来。因此关系式为： <script type="math/tex; mode=display">dp[n] = dp[n-1] + dp[n-2]</script></li>
<li>找出初始条件<br>dp[0] = 0. dp[1] = 1. 即 n &lt;= 1 时，dp[n] = n.</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">climbStairs</span><span class="params">(self, n: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> n &lt;= <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line">        dp = [<span class="number">-1</span>] * (n+<span class="number">1</span>)</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">        dp[<span class="number">2</span>] = <span class="number">2</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>,n+<span class="number">1</span>):</span><br><span class="line">            dp[i] = dp[i<span class="number">-1</span>] + dp[i<span class="number">-2</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>
<h3 id="leetcode-62-Unique-Paths"><a href="#leetcode-62-Unique-Paths" class="headerlink" title="leetcode 62   Unique Paths"></a>leetcode 62   <a href="https://leetcode-cn.com/problems/unique-paths/" target="_blank" rel="noopener">Unique Paths</a></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">问题描述：</span><br><span class="line"></span><br><span class="line">A robot is located at the top-left corner of a m x n grid (marked &apos;Start&apos; in the diagram below).</span><br><span class="line"></span><br><span class="line">The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked &apos;Finish&apos; in the diagram below).</span><br><span class="line"></span><br><span class="line">How many possible unique paths are there?</span><br><span class="line">Note: m and n will be at most 100.</span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: m = 3, n = 2</span><br><span class="line">Output: 3</span><br><span class="line">Explanation:</span><br><span class="line">From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:</span><br><span class="line">1. Right -&gt; Right -&gt; Down</span><br><span class="line">2. Right -&gt; Down -&gt; Right</span><br><span class="line">3. Down -&gt; Right -&gt; Right</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: m = 7, n = 3</span><br><span class="line">Output: 28</span><br></pre></td></tr></table></figure>
<ol>
<li>定义数组元素的含义<br>当机器人从左上角走到(i, j) 这个位置时，一共有 dp[i][j] 种路径</li>
<li>找出关系数组元素间的关系式<script type="math/tex; mode=display">dp[i][j] = dp[i-1][j] + dp[i][j-1]</script></li>
<li>找出初始值</li>
</ol>
<ul>
<li>dp[0][0…n-1] = 1; // 相当于最上面一行，机器人只能一直往左走</li>
<li>dp[0…m-1][0] = 1; // 相当于最左面一列，机器人只能一直往下走</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">uniquePaths</span><span class="params">(self, m: int, n: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> m <span class="keyword">or</span> <span class="keyword">not</span> n:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        dp = [[<span class="number">1</span>] * n <span class="keyword">for</span> i <span class="keyword">in</span> range(m)]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,n):</span><br><span class="line">                dp[i][j] = dp[i<span class="number">-1</span>][j] + dp[i][j<span class="number">-1</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>][<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>
<h3 id="leetcode-64-Minimum-Path-Sum"><a href="#leetcode-64-Minimum-Path-Sum" class="headerlink" title="leetcode 64  Minimum Path Sum"></a>leetcode 64  <a href="https://leetcode.com/problems/minimum-path-sum/" target="_blank" rel="noopener">Minimum Path Sum</a></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">问题描述：</span><br><span class="line"></span><br><span class="line">Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.</span><br><span class="line"></span><br><span class="line">Note: You can only move either down or right at any point in time.</span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line"></span><br><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  [1,3,1],</span><br><span class="line">  [1,5,1],</span><br><span class="line">  [4,2,1]</span><br><span class="line">]</span><br><span class="line">Output: 7</span><br><span class="line">Explanation: Because the path 1→3→1→1→1 minimizes the sum.</span><br></pre></td></tr></table></figure>
<ol>
<li>定义数组元素的含义<br>当机器人从左上角走到(i, j) 这个位置时，最小的路径和是 dp[i][j]</li>
<li>找出关系数组元素间的关系式<br>由于机器人可以向下走或者向右走，所以有两种方式到达:</li>
</ol>
<ul>
<li>一种是从 (i-1, j) 这个位置走一步到达</li>
<li>一种是从(i, j - 1) 这个位置走一步到达<br>不过这次不是计算所有可能路径，而是<strong>计算哪一个路径和是最小的</strong>，那么我们要从这两种方式中，选择一种，使得dp[i][j] 的值是最小的，显然有:<script type="math/tex; mode=display">dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + arr[i][j]</script></li>
</ul>
<ol>
<li>找出初始值</li>
</ol>
<ul>
<li>dp[0][j] = arr[0][j] + dp[0][j-1]; // 相当于最上面一行，机器人只能一直往左走</li>
<li>dp[i][0] = arr[i][0] + dp[i][0]; // 相当于最左面一列，机器人只能一直往下走</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minPathSum</span><span class="params">(self, grid: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        m,n = len(grid),len(grid[<span class="number">0</span>])</span><br><span class="line">        dp = [[<span class="number">0</span>] * n <span class="keyword">for</span> i <span class="keyword">in</span> range(m)]</span><br><span class="line">        </span><br><span class="line">        <span class="comment">## initialize </span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = grid[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n):</span><br><span class="line">            dp[<span class="number">0</span>][i] = grid[<span class="number">0</span>][i] + dp[<span class="number">0</span>][i<span class="number">-1</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,m):</span><br><span class="line">            dp[j][<span class="number">0</span>] = grid[j][<span class="number">0</span>] + dp[j<span class="number">-1</span>][<span class="number">0</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,n):</span><br><span class="line">                dp[i][j] = min(dp[i<span class="number">-1</span>][j],dp[i][j<span class="number">-1</span>]) + grid[i][j]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>][<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>
<h3 id="leetcode-72-Edit-Distance"><a href="#leetcode-72-Edit-Distance" class="headerlink" title="leetcode 72   Edit Distance"></a>leetcode 72   <a href="https://leetcode.com/problems/edit-distance/" target="_blank" rel="noopener">Edit Distance</a></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given two words word1 and word2, find the minimum number of operations required to convert word1 to word2.</span><br><span class="line"></span><br><span class="line">You have the following 3 operations permitted on a word:</span><br><span class="line"></span><br><span class="line">Insert a character</span><br><span class="line">Delete a character</span><br><span class="line">Replace a character</span><br><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: word1 = &quot;horse&quot;, word2 = &quot;ros&quot;</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: </span><br><span class="line">horse -&gt; rorse (replace &apos;h&apos; with &apos;r&apos;)</span><br><span class="line">rorse -&gt; rose (remove &apos;r&apos;)</span><br><span class="line">rose -&gt; ros (remove &apos;e&apos;)</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: word1 = &quot;intention&quot;, word2 = &quot;execution&quot;</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: </span><br><span class="line">intention -&gt; inention (remove &apos;t&apos;)</span><br><span class="line">inention -&gt; enention (replace &apos;i&apos; with &apos;e&apos;)</span><br><span class="line">enention -&gt; exention (replace &apos;n&apos; with &apos;x&apos;)</span><br><span class="line">exention -&gt; exection (replace &apos;n&apos; with &apos;c&apos;)</span><br><span class="line">exection -&gt; execution (insert &apos;u&apos;)</span><br></pre></td></tr></table></figure>
<ol>
<li>定义数组元素的含义<br>当字符串 word1 的长度为 i，字符串 word2 的长度为 j 时，将 word1 转化为 word2 所使用的最少操作次数为 dp[i][j]</li>
<li>找出关系数组元素间的关系式<br>比起其他题，这道题相对比较难找一点，但是，不管多难找，大部分情况下，dp[i][j] 和 dp[i-1] [j]、dp[i] [j-1]、dp[i-1] [j-1] 肯定存在某种关系。因为我们的目标就是，<strong>从规模小的，通过一些操作，推导出规模大的</strong>。对于这道题，我们可以对 word1 进行三种操作:<ul>
<li>插入一个字符 </li>
<li>删除一个字符 </li>
<li>替换一个字符</li>
</ul>
<ol>
<li>如果我们 word1[i] 与 word2 [j] 相等，这个时候不需要进行任何操作。<script type="math/tex; mode=display">dp[i][j] = dp[i-1][j-1]</script></li>
<li>如果我们 word1[i] 与 word2 [j] 不相等，这个时候我们就必须进行调整，而调整的操作有 3 种，我们要选择一种。三种操作对应的关系试如下(注意字符串与字符的区别):<ul>
<li>如果把字符 word1[i] 替换成与 word2[j] 相等，则有 <script type="math/tex; mode=display">dp[i][j] = dp[i-1][j-1] + 1</script></li>
<li>如果在字符串word1末尾插入一个与 word2[j] 相等的字符，则有:<script type="math/tex; mode=display">dp[i][j] = dp[i] [j-1] + 1</script></li>
<li>如果把字符 word1[i] 删除，则有:<script type="math/tex; mode=display">dp[i][j] = dp[i-1] [j] + 1</script>那么我们应该选择一种操作，使得 dp[i] [j] 的值最小，显然有:<script type="math/tex; mode=display">dp[i][j] = min(dp[i-1][j-1]，dp[i][j-1]，dp[[i-1][j]]) + 1</script></li>
</ul>
</li>
</ol>
</li>
<li>找出初始值<br>我们的初始值是计算出所有的 dp[0] [0…n] 和所有的 dp[0…m][0]。这个还是非常容易计算的，因为当有一个字符串的长度为 0 时，转化为另外一个字符串，那就只能一直进行插入或者删除操作了。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minDistance</span><span class="params">(self, word1: str, word2: str)</span> -&gt; int:</span></span><br><span class="line">        len_word2 = len(word2)</span><br><span class="line">        len_word1 = len(word1)</span><br><span class="line">            </span><br><span class="line">        dp = [[<span class="number">0</span>] * (len_word2+<span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(len_word1+<span class="number">1</span>)]</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,len_word2+<span class="number">1</span>):</span><br><span class="line">            dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j<span class="number">-1</span>]+<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len_word1+<span class="number">1</span>):</span><br><span class="line">            dp[i][<span class="number">0</span>] = dp[i<span class="number">-1</span>][<span class="number">0</span>] + <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(word1)+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,len(word2)+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> word1[i<span class="number">-1</span>] == word2[j<span class="number">-1</span>]:</span><br><span class="line">                     dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dp[i][j] = min([dp[i<span class="number">-1</span>][j<span class="number">-1</span>],dp[i][j<span class="number">-1</span>],dp[i<span class="number">-1</span>][j]]) + <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>][<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>reference from  <a href="https://zhuanlan.zhihu.com/p/91582909" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/91582909</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Data Structure and Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>熵与互信息</title>
    <url>/%E7%86%B5%E4%B8%8E%E4%BA%92%E4%BF%A1%E6%81%AF/2019/11/12/</url>
    <content><![CDATA[<h2 id="信息量"><a href="#信息量" class="headerlink" title="信息量"></a>信息量</h2><p>如果有人告诉我们一个相当不可能的时间发生了，我们收到的信息要多于我们被告知某个很可能发生的事件发生时收到的信息，如果我们知道某件事情一定会发生,那么我们就不会接收到信息。</p>
<p>于是，我们对于信息内容的度量将依赖于概率分布 $p(x)$ ，因此我们想要寻找一个函数 $h(x)$ ，它是概率 $p(x)$ 的单调递减函数，表达了信息的内容。 h(·) 的形式可以这样寻找: 如果我们有两个不相关的事件 $x$ 和 $y$ ,那么我们观察到两个事件同时发生时获得的信息应该等于观察到事件各自发生时获得的信息之和(采用概率分布的对数作为信息的量度的原因是其可加性)</p>
<script type="math/tex; mode=display">h(x, y) = h(x) + h(y)</script><p>因此，信息量的公式可以为:</p>
<script type="math/tex; mode=display">I(x_0)=-log(p(x_0))</script><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">—</th>
<th style="text-align:left">—</th>
<th style="text-align:left">—</th>
<th style="text-align:left">—</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">序号</td>
<td style="text-align:left">事件</td>
<td style="text-align:left">概率p</td>
<td style="text-align:left">信息量I</td>
</tr>
<tr>
<td style="text-align:left">A</td>
<td style="text-align:left">电脑正常开机</td>
<td style="text-align:left">0.7</td>
<td style="text-align:left">-log(p(A))=0.36</td>
</tr>
<tr>
<td style="text-align:left">B</td>
<td style="text-align:left">电脑无法开机</td>
<td style="text-align:left">0.2</td>
<td style="text-align:left">-log(p(B))=1.61</td>
</tr>
<tr>
<td style="text-align:left">C</td>
<td style="text-align:left">电脑爆炸了</td>
<td style="text-align:left">0.1</td>
<td style="text-align:left">-log(p(C))=2.30</td>
</tr>
</tbody>
</table>
</div>
<h2 id="熵"><a href="#熵" class="headerlink" title="熵"></a>熵</h2><p>假设一个发送者想传输一个随机变量的值给接收者。这个过程中,他们传输的平均信息量是关于概率分布 p(x) 的期望得到。即事件的概率分布和每个事件的信息量构成了一个随机变量，这个随机变量的均值（即期望）就是这个分布产生的信息量的平均值（即<strong>熵</strong>）。</p>
<script type="math/tex; mode=display">H(X)=-\sum_{i=1}^n p(x_i)log(p(x_i))</script><p>熵可以理解为不确定性的量度（或者说是多样性diversity的度量）。当所有态概率相等的时候最大，这个时候系统对取什么态没有偏向性，所以混乱度最大。</p>
<script type="math/tex; mode=display">\begin{eqnarray}
H(X)&=&-[p(A)log(p(A))+p(B)log(p(B))+p(C))log(p(C))]\\
&=&0.7\times 0.36+0.2\times 1.61+0.1\times 2.30\\
&=&0.804
\end{eqnarray}</script><h2 id="相对熵（KL离散度）"><a href="#相对熵（KL离散度）" class="headerlink" title="相对熵（KL离散度）"></a>相对熵（KL离散度）</h2><p>相对熵又称KL散度,如果我们对于同一个随机变量 x 有两个单独的概率分布 $P(x)$ 和 $Q(x)$，我们可以使用 KL 散度（Kullback-Leibler (KL) divergence）来衡量这两个分布的差异。</p>
<p>直观的理解就是如果用P来描述样本，那么就非常完美。而用Q来描述样本，虽然可以大致描述，但是不是那么的完美，信息量不足，需要额外的一些“信息增量”才能达到和P一样完美的描述。如果我们的Q通过反复训练，也能完美的描述样本，那么就不再需要额外的“信息增量”，Q等价于P。</p>
<script type="math/tex; mode=display">D_{KL}(p||q)=\sum_{i=1}^np(x_i)log(\frac{p(x_i)}{q(x_i)})</script><h2 id="交叉熵"><a href="#交叉熵" class="headerlink" title="交叉熵"></a>交叉熵</h2><p>对 KL离散度变形可得：</p>
<script type="math/tex; mode=display">\begin{eqnarray}
D_{KL}(p||q) &=& \sum_{i=1}^np(x_i)log(p(x_i))-\sum_{i=1}^np(x_i)log(q(x_i))\\
&=& -H(p(x))+[-\sum_{i=1}^np(x_i)log(q(x_i))]
\end{eqnarray}</script><p>等式的前一部分恰巧就是p的熵，等式的后一部分，就是交叉熵：</p>
<script type="math/tex; mode=display">H(p,q)=-\sum_{i=1}^np(x_i)log(q(x_i))</script><p>在机器学习中，我们需要评估label和predicts之间的差距，使用KL散度刚刚好，即$D_{KL}(y||\hat{y})$，由于KL散度中的前一部分$-H(y)$不变，故在优化过程中，只需要关注交叉熵就可以了。所以一般在机器学习中直接用用交叉熵做loss,评估模型。</p>
<h2 id="互信息"><a href="#互信息" class="headerlink" title="互信息"></a>互信息</h2><p><strong>互信息实际上是更广泛的相对熵的特殊情形</strong>。如果变量不是独立的,那么我们可以通过考察联合概率分布与边缘概率分布乘积之间的 Kullback-Leibler 散度来判断它们是否“接近”于相互独立。如果 $(X, Y) \sim p(x, y)$, X, Y 之间的互信息 $I(X; Y)$定义为:</p>
<script type="math/tex; mode=display">I(X;Y) = \sum_{x\in X}\sum_{y\in Y}p(x,y)log\frac{p(x,y)}{p(x)p(y)}</script><h2 id="点互信息PMI（Pointwise-Mutual-Information）"><a href="#点互信息PMI（Pointwise-Mutual-Information）" class="headerlink" title="点互信息PMI（Pointwise Mutual Information）"></a>点互信息PMI（Pointwise Mutual Information）</h2><p><strong>互信息其实就是对X和Y的所有可能的取值情况的点互信息PMI的加权和，点互信息只是对其中两个点进行相关性判断</strong>  </p>
<script type="math/tex; mode=display">PMI(x;y) = log\frac{p(x,y)}{p(x)p(y)} = log\frac{p(x|y)}{p(x)} = log\frac{p(y|x)}{p(y)}</script><blockquote>
<p>reference from <a href="https://blog.csdn.net/pipisorry/article/details/51695283" target="_blank" rel="noopener">https://blog.csdn.net/pipisorry/article/details/51695283</a><br>reference from <a href="https://blog.csdn.net/tsyccnh/article/details/79163834" target="_blank" rel="noopener">https://blog.csdn.net/tsyccnh/article/details/79163834</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Machine Learning</category>
        <category>Math</category>
        <category>Information Theory</category>
      </categories>
  </entry>
  <entry>
    <title>BFS and DFS</title>
    <url>/BFS-and-DFS/2019/10/17/</url>
    <content><![CDATA[<h2 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h2><p>广度优先搜索（Breadth-First-Search），我们平常都把简称为 BFS。直观地讲，它其实就是一种“地毯式”层层推进的搜索策略，即先查找离起始顶点最近的，然后是次近的，依次往外搜索。理解起来并不难，所以我画了一张示意图，你可以看下。</p>
<p><img src="1.png" alt></p>
<h3 id="时空分析"><a href="#时空分析" class="headerlink" title="时空分析"></a>时空分析</h3><p>每个节点入队和出队一次, 循环总次数为0(V), 检查邻接表所有的次数为O(E), 总时间为 O(V+E)</p>
<h3 id="最短路径-无权最短路径"><a href="#最短路径-无权最短路径" class="headerlink" title="最短路径(无权最短路径)"></a>最短路径(无权最短路径)</h3><ul>
<li>距离定义：从 s 到 v 经过的最少的边, 记为 d(s,v), 不可达 d(s,v) -&gt; +inf</li>
<li>引理:<script type="math/tex; mode=display">\forall(u,v) \in E, \ d(s,v) \leq d(s,u) + 1</script></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BFS</span><span class="params">(graph, s, t)</span>:</span></span><br><span class="line">    visited = [<span class="keyword">None</span>] * len(graph)</span><br><span class="line">    prev = [<span class="number">-1</span>] * len(graph)</span><br><span class="line">    queue = deque()</span><br><span class="line"></span><br><span class="line">    queue.append(s)</span><br><span class="line">    visited[s] = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> queue:</span><br><span class="line">        s = queue.popleft()</span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> graph[s]:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> visited[node]:</span><br><span class="line">                prev[node] = s</span><br><span class="line">                <span class="keyword">if</span> node == t:</span><br><span class="line">                    <span class="keyword">return</span> prev</span><br><span class="line">                visited[node] = <span class="keyword">True</span></span><br><span class="line">                queue.append(node)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_path</span><span class="params">(prev,s,t)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> prev[t] != <span class="number">-1</span> <span class="keyword">and</span> s != t:</span><br><span class="line">        print_path(prev,s, prev[t])</span><br><span class="line">    print(str(t), end = <span class="string">" "</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    g = &#123;<span class="number">0</span>:[<span class="number">1</span>,<span class="number">3</span>],<span class="number">1</span>:[<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>],<span class="number">2</span>:[<span class="number">1</span>,<span class="number">5</span>],<span class="number">3</span>:[<span class="number">0</span>,<span class="number">4</span>],<span class="number">4</span>:[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>],<span class="number">5</span>:[<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>],<span class="number">6</span>:[<span class="number">4</span>,<span class="number">7</span>],<span class="number">7</span>:[<span class="number">5</span>,<span class="number">6</span>]&#125;</span><br><span class="line">    prev = BFS(g,<span class="number">0</span>,<span class="number">7</span>)</span><br><span class="line">    print_path(prev,<span class="number">0</span>,<span class="number">7</span>)</span><br></pre></td></tr></table></figure>
<ol>
<li><p>visited是用来记录已经被访问的顶点，用来避免顶点被重复访问。如果顶点 q 被访问，那相应的 visited[q] 会被设置为 true。</p>
</li>
<li><p>queue是一个队列，用来存储已经被访问、但相连的顶点还没有被访问的顶点。因为广度优先搜索是逐层访问的，也就是说，我们只有把第 k 层的顶点都访问完成之后，才能访问第 k+1 层的顶点。当我们访问到第 k 层的顶点的时候，我们需要把第 k 层的顶点记录下来，稍后才能通过第 k 层的顶点来找第 k+1 层的顶点。所以，我们用这个队列来实现记录的功能。</p>
</li>
<li><p>prev用来记录搜索路径。当我们从顶点 s 开始，广度优先搜索到顶点 t 后，prev 数组中存储的就是搜索的路径。不过，这个路径是反向存储的。prev[w] 存储的是，顶点 w 是从哪个前驱顶点遍历过来的。比如，我们通过顶点 2 的邻接表访问到顶点 3，那 prev[3] 就等于 2。为了正向打印出路径，我们需要递归地来打印，你可以看下 print() 函数的实现方式。</p>
</li>
</ol>
<p><img src="2.png" alt><br><img src="3.png" alt></p>
<h2 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h2><p>深度优先搜索（Depth-First-Search），简称 DFS。最直观的例子就是“走迷宫”。</p>
<p>假设你站在迷宫的某个岔路口，然后想找到出口。你随意选择一个岔路口来走，走着走着发现走不通的时候，你就回退到上一个岔路口，重新选择一条路继续走，直到最终找到出口。这种走法就是一种深度优先搜索策略。</p>
<p>实际上，深度优先搜索用的是一种比较著名的算法思想，回溯思想。这种思想解决问题的过程，非常适合用递归来实现。</p>
<h3 id="时空分析-1"><a href="#时空分析-1" class="headerlink" title="时空分析"></a>时空分析</h3><p>深度优先搜索算法的消耗内存主要是 visited、prev 数组和递归调用栈。visited、prev 数组的大小跟顶点的个数 V 成正比，递归调用栈的最大深度不会超过顶点的个数，所以总的<strong>空间复杂度就是 O(V)</strong>。</p>
<p>深度优先搜索算法的时间复杂度是 O(E)，E 表示边的个数。</p>
<p><img src="4.png" alt></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_path</span><span class="params">(prev,s,t)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> prev[t] != <span class="number">-1</span> <span class="keyword">and</span> s != t:</span><br><span class="line">        print_path(prev,s, prev[t])</span><br><span class="line">    print(str(t), end = <span class="string">" "</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DFS</span><span class="params">(graph,s,t)</span>:</span></span><br><span class="line">    visited = [<span class="keyword">None</span>] * len(graph)</span><br><span class="line">    prev = [<span class="number">-1</span>] * len(graph)</span><br><span class="line">    visited[s] = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    res,flag = <span class="keyword">None</span>, <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recur_dfs</span><span class="params">(graph,s,t, prev, visited)</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> res, flag</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> s == t:</span><br><span class="line">            flag = <span class="keyword">True</span></span><br><span class="line">            res = copy.copy(prev)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> graph[s]:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> visited[node]:</span><br><span class="line">                prev[node] = s</span><br><span class="line">                visited[node] = <span class="keyword">True</span></span><br><span class="line">                recur_dfs(graph,node,t,prev,visited)</span><br><span class="line">                prev[node] = <span class="number">-1</span></span><br><span class="line">                visited[node] = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    recur_dfs(graph,s,t, prev, visited)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    g = &#123;<span class="number">0</span>:[<span class="number">1</span>,<span class="number">3</span>],<span class="number">1</span>:[<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>],<span class="number">2</span>:[<span class="number">1</span>,<span class="number">5</span>],<span class="number">3</span>:[<span class="number">0</span>,<span class="number">4</span>],<span class="number">4</span>:[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>],<span class="number">5</span>:[<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>],<span class="number">6</span>:[<span class="number">4</span>,<span class="number">7</span>],<span class="number">7</span>:[<span class="number">5</span>,<span class="number">6</span>]&#125;</span><br><span class="line">    res = DFS(g,<span class="number">0</span>,<span class="number">7</span>)</span><br><span class="line">    print_path(res,<span class="number">0</span>,<span class="number">7</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Data Structure and Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>Single Variable Calculus - Functions</title>
    <url>/Single-Variable-Calculus-Functions/2019/10/15/</url>
    <content><![CDATA[<h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><p>A function can be visualized as a machine that takes in an input $x$ and returns an output $f(x)$. The collection of all possible inputs is called the <strong>domain</strong>, and the collection of all possible outputs is called the <strong>range</strong>.</p>
<h2 id="Operations-on-Functions"><a href="#Operations-on-Functions" class="headerlink" title="Operations on Functions"></a>Operations on Functions</h2><h3 id="Composition"><a href="#Composition" class="headerlink" title="Composition"></a>Composition</h3><p>the composition of two function, $f$ and $g$, is defined to be the function that takes as its input x and returns as its output $g(x)$ fed into f.</p>
<script type="math/tex; mode=display">f \circ g(x) = f(g(x))</script><h3 id="Inverse"><a href="#Inverse" class="headerlink" title="Inverse"></a>Inverse</h3><p>The inverse is the function that undoes $f$. if you plug f(x) into $f^{-1}$ you will get $x$. Notice that this function works both ways. If you plug $f^{-1}(x)$ into $f(x)$, you will get back $x$ again.</p>
<script type="math/tex; mode=display">f^{-1}(f(x)) = x</script><script type="math/tex; mode=display">f(f^{-1}(x)) = x</script><ul>
<li>the $\arcsin$ function takes on values $[-\frac{\pi}{2},\frac{\pi}{2}]$ and has a restricted domain [-1,1].</li>
<li>The $\arccos$ function likewise has a restricted domain [-1,1], but it takes values $[0, \pi]$.</li>
<li>The $\arctan$ function has an unbounded domain, it is well defined for all inputs. But it has a restricted range $(-\frac{\pi}{2},\frac{\pi}{2})$</li>
</ul>
<h2 id="Classes-of-Functions"><a href="#Classes-of-Functions" class="headerlink" title="Classes of Functions"></a>Classes of Functions</h2><h3 id="Polynomials"><a href="#Polynomials" class="headerlink" title="Polynomials"></a>Polynomials</h3><p>A polynomial $P(x)$ is a function of the form </p>
<script type="math/tex; mode=display">P(x) = c_{0} + c_{1}x + c_{2}x^{2} + \cdots + c_{n}x^{n}</script><p>The top power $n$ is called the degree of the polynomial. We can also write a polynomial using a summation notation.</p>
<script type="math/tex; mode=display">P(x) = \sum^{n}_{k=1}c_{k}x^{k}</script><h3 id="Rational-Functions"><a href="#Rational-Functions" class="headerlink" title="Rational Functions"></a>Rational Functions</h3><p>Rational functions are functions of the form $\frac{P(x)}{Q(x)}$ where each is a polynomial. <strong>You have to be careful of the denominator. When the denominator takes a value of zero, the function may not be well-defined.</strong></p>
<h3 id="Powers"><a href="#Powers" class="headerlink" title="Powers"></a>Powers</h3><p>Power functions are functions of the form $cx^{n}$, where $c$ and $n$ are constant real numbers.</p>
<h3 id="Trigonometrics"><a href="#Trigonometrics" class="headerlink" title="Trigonometrics"></a>Trigonometrics</h3><p><img src="1.png" alt><br>Trigonometric Identities</p>
<p><img src="2.png" alt><br><img src="3.png" alt></p>
<h3 id="Exponentials"><a href="#Exponentials" class="headerlink" title="Exponentials"></a>Exponentials</h3><p> The most common such function, referred to as the exponential, is $e^{x}$. This is the most common because of its nice integral and differential properties (below).</p>
<p>Algebraic properties of the exponential function:</p>
<script type="math/tex; mode=display">e^{x}e^{y} = e^{x+y}</script><script type="math/tex; mode=display">(e^{x})^{y} = e^{xy}</script><p>Differential/integral properties:</p>
<script type="math/tex; mode=display">\frac{d}{dx}e^{x} = e^{x}</script><script type="math/tex; mode=display">\int e^{x}dx = e^{x} + C</script><p>Recall the graph of $e^{x}$, plotted here alongside its inverse, $lnx$<br><img src="4.png" alt></p>
<p>Note that the graphs are symmetric about the line $y = x$(as is true of the graphs of a function and its inverse).</p>
<h3 id="Euler’s-Formula"><a href="#Euler’s-Formula" class="headerlink" title="Euler’s Formula"></a>Euler’s Formula</h3><script type="math/tex; mode=display">e^{ix} = \cos{x} + i\sin{x}</script><p><img src="7.png" alt><br><img src="8.png" alt></p>
<h2 id="The-Exponential"><a href="#The-Exponential" class="headerlink" title="The Exponential"></a>The Exponential</h2><script type="math/tex; mode=display">e^{x} = 1 + x + \frac{x^2}{2!} + \frac{x^3}{3!} + \frac{x^4}{4!} + \cdots = \sum_{k=0}^{\infty}\frac{x^{k}}{k!}</script><h3 id="Properties-of-e-x"><a href="#Properties-of-e-x" class="headerlink" title="Properties of $e^{x}$"></a>Properties of $e^{x}$</h3><p>Polynomials are nice because they are easy to integrate and differentiate.</p>
<script type="math/tex; mode=display">\frac{\mathrm{d}}{\mathrm{d}x}x^{k} = kx^{x-1}</script><script type="math/tex; mode=display">\int x^{k}\mathrm{d}x = \frac{1}{k+1}x^{k+1} + c</script><ol>
<li>$e^{x+y} = e^{x}+e^{y}$</li>
<li>$e^{xy} = (e^{x})^{y} = (e^{y})^{x}$</li>
<li>$\frac{\mathrm{d}}{\mathrm{d}x}e^{x} = e^{x}$</li>
<li>$\int e^{k}\mathrm{d}x = e^{x} + C$</li>
</ol>
<p>Consider the last two properties in terms of the long polynomial.Taking the derivative of the long polynomial for $e^{x}$ gives</p>
<p><img src="5.png" alt></p>
<h3 id="More-on-the-long-polynomial"><a href="#More-on-the-long-polynomial" class="headerlink" title="More on the long polynomial"></a>More on the long polynomial</h3><p>The idea of a long polynomial is reasonable, because it actually comes from taking a sequence of polynomials with higher and higher degree:</p>
<script type="math/tex; mode=display">
\begin{equation}
\begin{array}{lr}    
& f_0(x) = 1  &\\
& f_1(x) = 1+x &\\
& f_2(x) = 1 + x + \frac{x^{2}}{2} &\\
& \cdots &\\
\end{array}
\end{equation}</script><p>Each polynomial in the sequence is, in a sense, the best approximation possible of that degree. Put another way, taking the first several terms of the long polynomial gives a good polynomial approximation of the function. The more terms included, the better the approximation. This is how calculators compute the exponential function (without having to add up infinitely many things).</p>
<blockquote>
<p>reference from <a href="https://web.archive.org/web/20160324155222/http://calculus.seas.upenn.edu/?n=Main.Functions" target="_blank" rel="noopener">https://web.archive.org/web/20160324155222/http://calculus.seas.upenn.edu/?n=Main.Functions</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Math</category>
        <category>Calculus</category>
      </categories>
  </entry>
  <entry>
    <title>BackPropagation through time</title>
    <url>/BackPropagation-through-time/2019/10/12/</url>
    <content><![CDATA[<p><img src="1.png" alt></p>
<p>The formula of recurrent neural network (rnn)</p>
<script type="math/tex; mode=display">s_{t} = tanh(U x_{t} + W s_{t-1})</script><script type="math/tex; mode=display">\hat{y_{t}} = softmax(V s_{t})</script><p>The loss is:</p>
<script type="math/tex; mode=display">E_{t}(y_{t},\hat{y_{t}}) = -y_{t}log(\hat{y_{t}})</script><script type="math/tex; mode=display">E_{t}(y,\hat{y}) = \sum_{t}E_{t}(y_{t},\hat{y_{t}})=-\sum_{t}y_{t}log(\hat{y_{t}})</script><p>Our purpose is to calculate the gradient of U,V,W and use it to update themself. Just like we add up the loss, we should add up the gradient of all the time steps.</p>
<script type="math/tex; mode=display">\frac{\partial E}{\partial W} = \sum_{t}\frac{\partial E_{t}}{\partial W}</script><p>Take $E_3$ for example:</p>
<script type="math/tex; mode=display">\frac{\partial E_{3}}{\partial V} = \frac{\partial E_{3}}{\partial \hat{y_{3}}} \frac{\partial \hat{y_{3}}}{\partial V} =\frac{\partial E_{3}}{\partial \hat{y_{3}}} \frac{\partial \hat{y_{3}}}{\partial z_{3}} \frac{\partial z_{3}}{\partial V}=(\hat{y_{3}} - y_{3}) \otimes s_{3}</script><p>What important here is $\frac{\partial E_{3}}{\partial V}$ just <strong>depend on current time step</strong></p>
<p>But $\frac{\partial E_{3}}{\partial W}$ is different. And u is same as w.</p>
<script type="math/tex; mode=display">\frac{\partial E_{3}}{\partial W}=\frac{\partial E_{3}}{\partial \hat{y_{3}}} \frac{\partial \hat{y_{3}}}{\partial s_{3}} \frac{\partial s_{3}}{\partial W}</script><p>$s_{3} = tanh(U x_{t} + W s_{2})$ depend on $s_{2}$ and $s_2$ depend on $W$ and $s_1$. if we calculate the gradient of $w$, we can not regard it as contant value.</p>
<p>We should add up gradient from all the time steps。In other words，the output of all the time steps depend on W.</p>
<p><img src="2.png" alt></p>
<h2 id="Why-gradient-vanish"><a href="#Why-gradient-vanish" class="headerlink" title="Why gradient vanish"></a>Why gradient vanish</h2><p>we can see the gradient formula:</p>
<script type="math/tex; mode=display">\frac{\partial E_{3}}{\partial W}= \sum_{k=0}^{3}\frac{\partial E_{3}}{\partial \hat{y_{3}}} \frac{\partial \hat{y_{3}}}{\partial s_{3}} \frac{\partial s_{3}}{\partial s_{k}} \frac{\partial s_{k}}{\partial W} = \frac{\partial E_{3}}{\partial \hat{y_{3}}} \frac{\partial \hat{y_{3}}}{\partial s_{3}} \frac{\partial s_{3}}{\partial s_{w}} + \frac{\partial E_{3}}{\partial \hat{y_{3}}} \frac{\partial \hat{y_{3}}}{\partial s_{3}} \frac{\partial s_{3}}{\partial s_{2}} \frac{\partial s_{2}}{\partial s_{w}} + \frac{\partial E_{3}}{\partial \hat{y_{3}}} \frac{\partial \hat{y_{3}}}{\partial s_{3}} \frac{\partial s_{3}}{\partial s_{2}} \frac{\partial s_{2}}{\partial s_{1}} \frac{\partial s_{1}}{\partial s_{w}}</script><p>$\frac{\partial s_{3}}{\partial s_{k}}$is a chian rule. for example: $\frac{\partial s_{3}}{\partial s_{1}} = \frac{\partial s_{3}}{\partial s_{2}} \frac{\partial s_{2}}{\partial s_{1}}$. if we reformula it:</p>
<script type="math/tex; mode=display">\frac{\partial E_{3}}{\partial W}=\sum_{k=0}^{3}\frac{\partial E_{3}}{\partial \hat{y_{3}}} \frac{\partial \hat{y_{3}}}{\partial s_{3}} (\prod_{j = k+1}^{3} \frac{\partial s_{j}}{\partial s_{j-1}}) \frac{\partial s_{k}}{\partial W}</script>]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Sequence Models</tag>
      </tags>
  </entry>
  <entry>
    <title>Variational Auto-Encoder</title>
    <url>/Variational-Auto-Encoder/2019/10/10/</url>
    <content><![CDATA[<h2 id="Pre-knowledge"><a href="#Pre-knowledge" class="headerlink" title="Pre-knowledge"></a>Pre-knowledge</h2><h3 id="什么是独立同分布-i-i-d-？"><a href="#什么是独立同分布-i-i-d-？" class="headerlink" title="什么是独立同分布(i.i.d)？"></a>什么是独立同分布(i.i.d)？</h3><p>在概率论与统计学中，独立同分布（英語：Independent and identically distributed，缩写为IID）是指一组随机变量中每个变量的概率分布都相同，且这些随机变量互相独立。</p>
<h3 id="什么是数据集的分布？"><a href="#什么是数据集的分布？" class="headerlink" title="什么是数据集的分布？"></a>什么是数据集的分布？</h3><ul>
<li>对于supervised learning，分布是指关于特征$X$和结果$Y$的联合分布$F(X,Y)$或者条件分布$F(Y|X)$。<br>我们说训练集和测试集服从同分布的意思是训练集和测试集都是由服从同一个分布的随机样本组成的，也就是：</li>
</ul>
<script type="math/tex; mode=display">(X_{train},Y_{train}), (X_{test},Y_{test}) \text{ i.i.d. } \sim F(X,Y)</script><ul>
<li><p>对于unsupervised learning，分布是指特征$X$的分布 F(X)，也就是：</p>
<script type="math/tex; mode=display">X_{train},X_{test} \text{ i.i.d. } \sim F(X)</script></li>
<li><p>但是现实中比较难做到这点，特别是当训练集是过去的数据，测试集是当下的数据，由于时间的因素，它们很可能不是完全同分布的，这就增加了预测难度。这也是为什么一般交叉验证的误差往往小于实际的测试误差。因为交叉验证中每折数据都是来自训练集，它们肯定是同分布的。如果训练集和测试集的分布风马牛不相及，那么根据训练集学习得到的模型在测试集上就几乎没有什么用了。所以我们训练模型和应用模型时一个重要的前提假设就是训练集和测试集是同分布的。另外一个方面是牵涉到过拟合问题，即使训练集和测试集是同分布的，由于数据量的问题，训练集的分布可能无法完整体现真实分布，当我们过分去学习训练集分布的时候，我们反而会远离真实分布（以及测试集的分布），造成预测不准确，这就造成过拟合。</p>
</li>
</ul>
<h3 id="隐变量（latent-variable）"><a href="#隐变量（latent-variable）" class="headerlink" title="隐变量（latent variable）"></a>隐变量（latent variable）</h3><p>什么是隐变量呢，让我们先简单的说一下，我们估计算法在做的一些事情，我们要做的其实就是估算出概率模型的参数，概率模型是什么呢？你可以简单把它理解成一个分布，甚至说可以把它理解成一个函数，我们的估计算法就是为了求解出这些函数的参数而存在的。</p>
<blockquote>
<p>如果你站在这个人旁边，你目睹了整个过程：这个人选了哪个袋子、抓出来的球是什么颜色的。然后你把每次选择的袋子和抓出来的球的颜色都记录下来（样本观察值），那个人不停地抓，你不停地记。最终你就可以通过你的记录，推测出每个袋子里每种球颜色的大致比例。并且你记录的越多，推测的就越准（中心极限定理）。然而，抓球的人觉得这样很不爽，于是决定不告诉你他从哪个袋子里抓的球，只告诉你抓出来的球的颜色是什么。这时候，“选袋子”的过程由于你看不见，其实就相当于是一个隐变量。隐变量在很多地方都是能够出现的。现在我们经常说的隐变量主要强调它的“latent”。所以广义上的隐变量主要就是指“不能被直接观察到，但是对系统的状态和能观察到的输出存在影响的一种东西”。所以说，很多人在研究隐变量。以及设计出各种更优(比如如可解释、可计算距离、可定义运算等性质)的隐变量的表示。</p>
</blockquote>
<h2 id="分布变换"><a href="#分布变换" class="headerlink" title="分布变换"></a>分布变换</h2><p>通常我们会拿VAE跟GAN比较，的确，它们两个的目标基本是一致的——希望构建一个从隐变量$Z$,生成目标数据$X$的模型，但是实现上有所不同。更准确地讲，它们是假设了$Z$服从某些常见的分布（比如正态分布或均匀分布），然后希望训练一个模型$X=g(Z)$这个模型能够将原来的概率分布映射到训练集的概率分布，也就是说，它们的目的都是进行<strong>分布之间的变换</strong>。</p>
<p>现在假设$Z$服从标准的正态分布，那么我就可以从中采样得到若干个$Z_1$,$Z_2$,…,$Z_n$, 然后对它做变换得到$hat{x_i} = g(Z_i)$，我们怎么判断这个通过$g$构造出来的数据集，它的分布跟我们目标的数据集分布是不是一样的呢？KL离散度不行，因为KL散度是根据两个概率分布的表达式来算它们的相似度的，然而目前我们并不知道它们的概率分布的表达式，我们只有一批从构造的分布采样而来的数据${\hat{x_i}}$，还有一批从真实的分布采样而来的数据${x_i}$。我们只有样本本身，没有分布表达式，当然也就没有方法算KL散度。</p>
<p><strong>GAN的思路很直接粗犷：既然没有合适的度量，那我干脆把这个度量也用神经网络训练出来吧。</strong></p>
<h2 id="Auto-Encoder"><a href="#Auto-Encoder" class="headerlink" title="Auto-Encoder"></a>Auto-Encoder</h2><p>标准自动编码器学会生成紧凑的表示和重建他们的输入，但除了能用于一些应用程序，如去噪自动编码器，他们是相当有限的。自动编码器的基本问题在于，它们将其输入转换成其编码矢量，其所在的潜在空间可能不连续，或者允许简单的插值。</p>
<p>例如，在MNIST数据集上训练一个自编码器，并从2D潜在空间中可视化编码，可以看到不同簇的形成。 这是有道理的，因为每种图像类型的不同编码使得解码器对它们进行解码变得更容易。如果你只是复制相同的图像，这是不错的。但是当你建立一个生成模型时，你不想准备复制你输入的相同图像。你想从潜在的空间随机抽样，或者从一个连续的潜在空间中产生输入图像的变化。</p>
<p><img src="3.png" alt></p>
<h2 id="VAE"><a href="#VAE" class="headerlink" title="VAE"></a>VAE</h2><p>变分自动编码器（VAEs）具有一个独特的性质，可以将它们与vanilla自动编码器分离开来，正是这种特性使其在生成建模时非常有用：它们的潜在空间在设计上是连续的，允许随机采样和插值。它通过做一些约束来达到这个目的：使编码器不输出大小为n的编码矢量，而是输出两个大小为n的矢量：平均矢量$\mu$和另一个标准偏差矢量$\sigma$。</p>
<p><img src="4.png" alt><br><img src="5.png" alt><br>这种随机生成意味着，即使对于相同的输入，虽然平均值和标准偏差保持不变，但是实际编码会在采样过程中发生些许变化。</p>
<p>首先我们有一批数据样本 $\{X_1,\dots,X_n\}$，其整体用 $X$ 表示，我们本想根据$\{X_1,\dots,X_n\}$来得到$X$的分布$P(x)$，如果能得到的话，那我直接根据$P(x)$来采样，就可以得到所有可能的$X$了。这是一个终极理想的生成模型了。当然，这个理想很难实现，于是我们将分布改一改。</p>
<script type="math/tex; mode=display">p(X)=\sum_Z p(X|Z)p(Z)\tag{1}</script><p>此时$p(X|Z)$就描述了一个由$Z$来生成$X$的模型，而我们假设$Z$服从标准正态分布，也就是$p(Z) \sim \mathcal{N}(0,I)$，如果这个理想能实现，那么我们就可以先从标准正态分布中采样一个$Z$，然后根据$Z$来算一个$X$，也是一个很棒的生成模型。接下来就是结合自编码器来实现重构，保证有效信息没有丢失，再加上一系列的推导，最后把模型实现。框架的示意图如下：</p>
<p><img src="1.png" alt></p>
<p>看出了什么问题了吗？如果像这个图的话，我们其实完全不清楚：究竟经过重新采样出来的$Z_k$是不是还对应着原来的$X_k$， 所以我们如果直接最小化$L(\hat{X_k},X_k)$是很不科学的。</p>
<p><strong>其实，在整个VAE模型中，我们并没有去使用$P(z)$（隐变量空间的分布）是正态分布的假设，我们用的是假设$p(Z|X)$后验分布）是正态分布</strong>具体来说，给定一个特征$X_K$，我们假设存在一个专属于$X_K$的后验分布$p(Z|X_k)$，并进一步假设这个分布是（独立的、多元的）正态分布。为什么要强调“专属”呢？因为我们后面要训练一个生成器$X = g(Z)$，希望能够把从分布p(Z|x_k)采样出来的一个$Z_k$还原为$X_k$。这时候每一个$X_k$都配上了一个专属的正态分布，才方便后面的生成器做还原。但这样有多少个$X$就有多少个正态分布了。我们知道正态分布有两组参数：均值$\mu$和$\sigma^{2}$（多元的话，它们都是向量），那我怎么找出专属于$X_k$的正态分布$p(Z|X_k)$的均值和方差呢？好像并没有什么直接的思路。那好吧，那我就用神经网络来拟合出来吧！这就是神经网络时代的哲学：难算的我们都用神经网络来拟合。</p>
<p><img src="2.png" alt></p>
<p>通过这种方法，我们现在将给定输入的每个潜在特征表示为概率分布。当从潜在状态解码时，我们将从每个潜在状态分布中随机采样，生成一个向量作为解码器模型的输入。</p>
<p><img src="6.png" alt></p>
<h3 id="Reparameterization-trick"><a href="#Reparameterization-trick" class="headerlink" title="Reparameterization trick"></a>Reparameterization trick</h3><p>其实很简单，就是我们要从$p(Z|X_k)$中采样一个$z_k$，出来，尽管我们知道了$p(Z|X_k)$是正态分布，但是均值方差都是靠模型算出来的，我们要靠这个过程反过来优化均值方差的模型，但是<strong>采样</strong>这个操作是不可导的，而采样的结果是可导的。我们利用</p>
<script type="math/tex; mode=display">\begin{aligned}&\frac{1}{\sqrt{2\pi\sigma^2}}\exp\left(-\frac{(z-\mu)^2}{2\sigma^2}\right)dz \\ 
=& \frac{1}{\sqrt{2\pi}}\exp\left[-\frac{1}{2}\left(\frac{z-\mu}{\sigma}\right)^2\right]d\left(\frac{z-\mu}{\sigma}\right)\end{aligned}\tag{6}</script><p>$(z-\mu)/\sigma=\varepsilon$是服从均值为0、方差为1的标准正态分布的，要同时把$dz$考虑进去，因为乘上$dz$才是概率，不乘是概率密度。</p>
<blockquote>
<p>从 $\mathcal{N}(\mu,\sigma^2)$中采样一个，相当于从$\mathcal{N}(0,I)$中采样一个$\varepsilon$，再让$Z=\mu + \varepsilon \times \sigma$.</p>
</blockquote>
<p>于是，我们将从$\mathcal{N}(\mu,\sigma^2)$采样，变化为从$\mathcal{N}(0,I)$中采样，然后通过参数变换得到从$\mathcal{N}(\mu,\sigma^2)$采样的结果。这样一来，“采样”这个操作就不用参与梯度下降了，改为采样的结果参与，使得整个模型可训练了。</p>
<h2 id="Project"><a href="#Project" class="headerlink" title="Project"></a>Project</h2><h2 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h2><p>For data let’s use MNIST dataset. Pytorch vision module has an easy way to create training and test dataset for MNIST</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets,transforms</span><br><span class="line"><span class="keyword">from</span> torchvision.utils <span class="keyword">import</span> make_grid</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> functional</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> torch.optim <span class="keyword">import</span> Adam</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">use_cuda = torch.cuda.is_available()</span><br><span class="line">device = torch.device(<span class="string">"cuda:0"</span> <span class="keyword">if</span> use_cuda <span class="keyword">else</span> <span class="string">"cpu"</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">BATCH_SIZE = <span class="number">100</span></span><br><span class="line">trainset = datasets.MNIST(<span class="string">'./data/'</span>, train=<span class="keyword">True</span>, download=<span class="keyword">True</span>,</span><br><span class="line">                   transform=transforms.ToTensor())</span><br><span class="line">train_generator = torch.utils.data.DataLoader(trainset, batch_size=BATCH_SIZE,</span><br><span class="line">                                          shuffle=<span class="keyword">True</span>, num_workers=<span class="number">4</span>)</span><br><span class="line"><span class="comment"># test</span></span><br><span class="line">testset = datasets.MNIST(<span class="string">'./data/'</span>, train=<span class="keyword">False</span>, download=<span class="keyword">False</span>,</span><br><span class="line">                   transform=transforms.ToTensor())</span><br><span class="line"></span><br><span class="line">test_generator = torch.utils.data.DataLoader(trainset, batch_size=BATCH_SIZE,</span><br><span class="line">                                          shuffle=<span class="keyword">True</span>, num_workers=<span class="number">4</span>)</span><br></pre></td></tr></table></figure>
<h2 id="Visualization"><a href="#Visualization" class="headerlink" title="Visualization"></a>Visualization</h2><p>Before proceeding, let’s visualize some data. For that I am using torchvision.utils.make_grid which creates a grid from multiple images:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_images</span><span class="params">(images)</span>:</span></span><br><span class="line">    images = make_grid(images)</span><br><span class="line">    show_image(images[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_image</span><span class="params">(img)</span>:</span></span><br><span class="line">    plt.imshow(img, cmap=<span class="string">'gray'</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">dataiter = iter(trainloader)</span><br><span class="line">images, labels = dataiter.next()</span><br><span class="line">show_images(images)</span><br></pre></td></tr></table></figure>
<p><img src="output_5_0.png" alt="png"></p>
<h2 id="Network-Architecture"><a href="#Network-Architecture" class="headerlink" title="Network Architecture"></a>Network Architecture</h2><p>Similar to deniosing auto encoder, VAE has an encoder and decoder.</p>
<h3 id="Encoder"><a href="#Encoder" class="headerlink" title="Encoder"></a>Encoder</h3><p>The encoder encodes an image to a varibale z with normal distribution. For normal distribution we just need to approximate mean m and standard deviation s. Therefore, the role of neural network is to learn a funcion from image to m and s. This implicitly means we are learning a function from image to a probability distribution for z. We implement that function approximator using linear matrix and RELU nonlinearity:</p>
<h3 id="Decoder"><a href="#Decoder" class="headerlink" title="Decoder"></a>Decoder</h3><p>The decoder gets the encoded value z, which in theory is reffered to as latent variable, and decodes that value to an image. Therefore, the role of decoder is to learn a function that maps a value of z to a vector of 782 real values. Note that z is in fact a random variable but here we just work with a realization (a.k.a a sampled value) of that random variable</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">shape = images[<span class="number">0</span>].shape</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VAE</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,latent_variable_dim)</span>:</span></span><br><span class="line">        super(VAE,self).__init__()</span><br><span class="line">        </span><br><span class="line">        <span class="comment">## encoder</span></span><br><span class="line">        self.fc1 = nn.Linear(np.prod(shape),<span class="number">400</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">## mean and std</span></span><br><span class="line">        self.fc_mean = nn.Linear(<span class="number">400</span>,latent_variable_dim)</span><br><span class="line">        self.fc_std = nn.Linear(<span class="number">400</span>, latent_variable_dim)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">## decoder</span></span><br><span class="line">        </span><br><span class="line">        self.fc3 = nn.Linear(latent_variable_dim, <span class="number">400</span>)</span><br><span class="line">        self.fc4 = nn.Linear(<span class="number">400</span>, np.prod(shape))</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reparameterize</span><span class="params">(self, log_var, mu)</span>:</span></span><br><span class="line">        s = torch.exp(<span class="number">0.5</span>*log_var)</span><br><span class="line">        eps = torch.rand_like(s) <span class="comment"># generate a iid standard normal same shape as s</span></span><br><span class="line">        <span class="keyword">return</span> eps.mul(s).add_(mu)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(self,x)</span>:</span></span><br><span class="line">        x = functional.relu(self.fc3(x))</span><br><span class="line">        x = torch.sigmoid(self.fc4(x))</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self,input)</span>:</span></span><br><span class="line">        x = input.view(<span class="number">-1</span>,<span class="number">784</span>)</span><br><span class="line">        x = functional.relu(self.fc1(x))</span><br><span class="line">        log_s = self.fc_std(x)</span><br><span class="line">        m = self.fc_mean(x)</span><br><span class="line">        z = self.reparameterize(log_s,m)</span><br><span class="line">        x = self.decode(z)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> x,m,log_s</span><br></pre></td></tr></table></figure>
<h2 id="Loss"><a href="#Loss" class="headerlink" title="Loss"></a>Loss</h2><p>For doing training we need a loss function. VAE combines two type of losses</p>
<ul>
<li>A loss from reconstructing the image. This is simply a Cross Entropy (CE) or Mean Square Error (MSE) between decoded image and original image</li>
<li>KL divergence: this loss function is for latent variable $Z$,What we like to do is to make $P(z | input)$,as close as possible to standard normal (with mean zero and variance 1). Since $z$ has normal distribution with mean m and variance s. $z ~ N(m, s)$ we can use this simple formula to calculate the loss function of z.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loss</span><span class="params">(input_image, recon_image, mu, log_var)</span>:</span></span><br><span class="line">    CE = functional.binary_cross_entropy(recon_image, input_image.view(<span class="number">-1</span>, np.prod(shape)), reduction=<span class="string">'sum'</span>)</span><br><span class="line">    KLD = <span class="number">-0.5</span> * torch.sum(<span class="number">1</span> + log_var - mu.pow(<span class="number">2</span>) - log_var.exp())</span><br><span class="line">    <span class="keyword">return</span> KLD + CE</span><br></pre></td></tr></table></figure>
<h2 id="Train"><a href="#Train" class="headerlink" title="Train"></a>Train</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">vae = VAE(<span class="number">40</span>)</span><br><span class="line">optimizer = Adam(vae.parameters())</span><br><span class="line">train_loss = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> i, data <span class="keyword">in</span> enumerate(train_generator):</span><br><span class="line">        images,labels = data</span><br><span class="line">        images = images.to(device)</span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        recon_image, s, mu = vae(images)</span><br><span class="line">        l = loss(images, recon_image, mu, s)</span><br><span class="line">        l.backward()</span><br><span class="line">        train_loss.append(l.item() / len(images))</span><br><span class="line">        optimizer.step()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> torchviz <span class="keyword">import</span> make_dot</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>blue boxes</strong>: these correspond to the tensors we use as parameters, the ones we’re asking PyTorch to compute gradients for;</li>
<li><strong>gray box</strong>: a Python operation that involves a gradient-computing tensor or its dependencies;</li>
<li><strong>green box</strong>: the same as the gray box, except it is the starting point for the computation of gradients (assuming the backward()method is called from the variable used to visualize the graph)— they are computed from the bottom-up in a graph.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">make_dot(l)</span><br></pre></td></tr></table></figure>
<p><img src="output_15_0.svg" alt="svg"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.plot(train_loss)</span><br></pre></td></tr></table></figure>
<pre><code>[&lt;matplotlib.lines.Line2D at 0x11afb1d50&gt;]
</code></pre><p><img src="output_16_1.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">    <span class="keyword">for</span> i, data <span class="keyword">in</span> enumerate(testloader, <span class="number">0</span>):</span><br><span class="line">        images, labels = data</span><br><span class="line">        images = images.to(device)</span><br><span class="line">        recon_image, s, mu = vae(images)</span><br><span class="line">        recon_image_ = recon_image.view(BATCH_SIZE, <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>)</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">            show_images(recon_image_)</span><br></pre></td></tr></table></figure>
<p><img src="output_17_0.png" alt="png"></p>
<p><img src="output_17_1.png" alt="png"></p>
<p><img src="output_17_2.png" alt="png"></p>
<p><img src="output_17_3.png" alt="png"></p>
<p><img src="output_17_4.png" alt="png"></p>
<p><img src="output_17_5.png" alt="png"></p>
<blockquote>
<p>reference <a href="https://kexue.fm/archives/5253" target="_blank" rel="noopener">https://kexue.fm/archives/5253</a><br><a href="http://sofasofa.io/forum_main_post.php?postid=1002963" target="_blank" rel="noopener">http://sofasofa.io/forum_main_post.php?postid=1002963</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Machine Learning</category>
      </categories>
  </entry>
  <entry>
    <title>Neural Network Training</title>
    <url>/Neural-Network-Training/2019/10/05/</url>
    <content><![CDATA[<h2 id="Data-Preprocessing"><a href="#Data-Preprocessing" class="headerlink" title="Data Preprocessing"></a>Data Preprocessing</h2><p><strong>Mean subtraction</strong> is the most common form of preprocessing. It involves subtracting the mean across every individual feature in the data, and has the geometric interpretation of centering the cloud of data around the origin along every dimension. In numpy, this operation would be implemented as: X -= np.mean(X, axis = 0). With images specifically, for convenience it can be common to subtract a single value from all pixels (e.g. X -= np.mean(X)), or to do so separately across the three color channels.</p>
<p><strong>Normalization</strong> refers to normalizing the data dimensions so that they are of approximately the same scale. There are two common ways of achieving this normalization. One is to divide each dimension by its standard deviation, once it has been zero-centered: (X /= np.std(X, axis = 0)). Another form of this preprocessing normalizes each dimension so that the min and max along the dimension is -1 and 1 respectively. It only makes sense to apply this preprocessing if you have a reason to believe that different input features have different scales (or units), but they should be of approximately equal importance to the learning algorithm. In case of images, the relative scales of pixels are already approximately equal (and in range from 0 to 255), so it is not strictly necessary to perform this additional preprocessing step.</p>
<p><strong>Common pitfall</strong>. An important point to make about the preprocessing is that any preprocessing statistics (e.g. the data mean) must only be computed on the training data, and then applied to the validation / test data. E.g. computing the mean and subtracting it from every image across the entire dataset and then splitting the data into train/val/test splits would be a mistake. Instead, the mean must be computed only over the training data and then subtracted equally from all splits (train/val/test).</p>
<h2 id="Weight-Initialization"><a href="#Weight-Initialization" class="headerlink" title="Weight Initialization"></a>Weight Initialization</h2><p>对于每个神经元的输入z这个随机变量，根据前面讲BP时的公式，它是由线性映射函数得到的:</p>
<script type="math/tex; mode=display">z = \sum_{i=1}^{n}w_i x_i</script><p>其中n是上一层神经元的数量。因此，根据概率统计里的两个随机变量乘积的方差展开式：</p>
<script type="math/tex; mode=display">Var(w_i x_i) = E[w_i]^2 Var(x_i) + E[x_i]^2 Var(w_i) + Var(w_i)Var(x_i)</script><p>可以得到，如果$E(xi)=E(wi)=0$（可以通过批量归一化Batch Normalization来满足，其他大部分情况也不会差太多），那么就有：</p>
<script type="math/tex; mode=display">Var(z) = \sum_{i=1}^{n}Var(x_i)Var(w_i)</script><p>如果随机变量xi和wi再满足独立同分布的话：</p>
<script type="math/tex; mode=display">Var(z) = \sum_{i=1}^{n}Var(x_i)Var(w_i) = nVar(w)Var(x)</script><p>试想一下，整个大型前馈神经网络无非就是一个超级大映射，将原始样本稳定的映射成它的类别。也就是将样本空间映射到类别空间。试想，如果样本空间与类别空间的分布差异很大，比如说类别空间特别稠密，样本空间特别稀疏辽阔，那么在类别空间得到的用于反向传播的误差丢给样本空间后简直变得微不足道，也就是会导致模型的训练非常缓慢。同样，如果类别空间特别稀疏，样本空间特别稠密，那么在类别空间算出来的误差丢给样本空间后简直是爆炸般的存在，即导致模型发散震荡，无法收敛。因此，我们要让样本空间与类别空间的分布差异（密度差别）不要太大，也就是要让它们的<strong>方差尽可能相等</strong>。</p>
<p>因此为了得到$Var(z)=Var(x)$，则得到：</p>
<script type="math/tex; mode=display">n \cdot Var(w)=1</script><script type="math/tex; mode=display">Var(w)=\frac{1}{n}</script><h2 id="Dropout"><a href="#Dropout" class="headerlink" title="Dropout"></a>Dropout</h2><p>Dropout is an extremely effective, simple and recently introduced regularization technique by Srivastava et al. While training, dropout is implemented by only keeping a neuron active with some probability $P$ (a hyperparameter), or setting it to zero otherwise.</p>
<p>we must scale the activations by $p$ at test time. Since test-time performance is so critical, it is always preferable to use inverted dropout, which performs the scaling at train time, leaving the forward pass at test time untouched. Additionally, this has the appealing property that the prediction code can remain untouched when you decide to tweak where you apply dropout, or if at all. Inverted dropout looks as follows:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">""" </span></span><br><span class="line"><span class="string">Inverted Dropout: Recommended implementation example.</span></span><br><span class="line"><span class="string">We drop and scale at train time and don't do anything at test time.</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">p = <span class="number">0.5</span> <span class="comment"># probability of keeping a unit active. higher = less dropout</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_step</span><span class="params">(X)</span>:</span></span><br><span class="line">  <span class="comment"># forward pass for example 3-layer neural network</span></span><br><span class="line">  H1 = np.maximum(<span class="number">0</span>, np.dot(W1, X) + b1)</span><br><span class="line">  U1 = (np.random.rand(*H1.shape) &lt; p) / p <span class="comment"># first dropout mask. Notice /p!</span></span><br><span class="line">  H1 *= U1 <span class="comment"># drop!</span></span><br><span class="line">  H2 = np.maximum(<span class="number">0</span>, np.dot(W2, H1) + b2)</span><br><span class="line">  U2 = (np.random.rand(*H2.shape) &lt; p) / p <span class="comment"># second dropout mask. Notice /p!</span></span><br><span class="line">  H2 *= U2 <span class="comment"># drop!</span></span><br><span class="line">  out = np.dot(W3, H2) + b3</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># backward pass: compute gradients... (not shown)</span></span><br><span class="line">  <span class="comment"># perform parameter update... (not shown)</span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(X)</span>:</span></span><br><span class="line">  <span class="comment"># ensembled forward pass</span></span><br><span class="line">  H1 = np.maximum(<span class="number">0</span>, np.dot(W1, X) + b1) <span class="comment"># no scaling necessary</span></span><br><span class="line">  H2 = np.maximum(<span class="number">0</span>, np.dot(W2, H1) + b2)</span><br><span class="line">  out = np.dot(W3, H2) + b3</span><br></pre></td></tr></table></figure>
<h2 id="Loss-functions"><a href="#Loss-functions" class="headerlink" title="Loss functions"></a>Loss functions</h2><p>It is important to note that the L2 loss is much harder to optimize than a more stable loss such as Softmax. Intuitively, it requires a very fragile and specific property from the network to output exactly one correct value for each input (and its augmentations). Notice that this is not the case with Softmax, where the precise value of each score is less important: It only matters that their magnitudes are appropriate. Additionally, the L2 loss is less robust because outliers can introduce huge gradients. When faced with a regression problem, first consider if it is absolutely inadequate to quantize the output into bins. For example, if you are predicting star rating for a product, it might work much better to use 5 independent classifiers for ratings of 1-5 stars instead of a regression loss. Classification has the additional benefit that it can give you a distribution over the regression outputs, not just a single output with no indication of its confidence. If you’re certain that classification is not appropriate, use the L2 but be careful: For example, the L2 is more fragile and applying dropout in the network (especially in the layer right before the L2 loss) is not a great idea.</p>
<blockquote>
<p>When faced with a regression task, first consider if it is absolutely necessary. Instead, have a strong preference to discretizing your outputs to bins and perform classification over them whenever possible.</p>
</blockquote>
<h2 id="Gradient-check"><a href="#Gradient-check" class="headerlink" title="Gradient check"></a>Gradient check</h2><p>In theory, performing a gradient check is as simple as comparing the analytic gradient to the numerical gradient. In practice, the process is much more involved and error prone. Here are some tips, tricks, and issues to watch out for:</p>
<p><strong>Use the centered formula</strong>. The formula you may have seen for the finite difference approximation when evaluating the numerical gradient looks as follows:</p>
<script type="math/tex; mode=display">\frac{df(x)}{dx} = \frac{f(x + h) - f(x)}{h} \hspace{0.1in} \text{(bad, do not use)}</script><p>Where $h$ is a very small number, in practice approximately 1e-5 or so. In practice, it turns out that it is much better to use the centered difference formula of the form:</p>
<script type="math/tex; mode=display">\frac{df(x)}{dx} = \frac{f(x + h) - f(x - h)}{2h} \hspace{0.1in} \text{(use instead)}</script><p><strong>Use relative error for the comparison.</strong></p>
<script type="math/tex; mode=display">\frac{\mid f'_{a} - f'_{n} \mid}{\max(\mid f'_{a} \mid, \mid f'_{n} \mid)}</script><ul>
<li>relative error &gt; 1e-2 usually means the gradient is probably wrong</li>
<li>1e-2 &gt; relative error &gt; 1e-4 should make you feel uncomfortable</li>
<li>1e-4 &gt; relative error is usually okay for objectives with kinks. But if there are no kinks (e.g. use of tanh nonlinearities and softmax), then 1e-4 is too high.</li>
<li>1e-7 and less you should be happy.</li>
</ul>
<h2 id="Annealing-the-learning-rate"><a href="#Annealing-the-learning-rate" class="headerlink" title="Annealing the learning rate"></a>Annealing the learning rate</h2><ul>
<li><strong>Step decay</strong>: Reduce the learning rate by some factor every few epochs. Typical values might be reducing the learning rate by a half every 5 epochs, or by 0.1 every 20 epochs. These numbers depend heavily on the type of problem and the model. One heuristic you may see in practice is to watch the validation error while training with a fixed learning rate, and reduce the learning rate by a constant (e.g. 0.5) whenever the validation error stops improving.</li>
<li><strong>Exponential decay.</strong> has the mathematical form $\alpha = \alpha_0 e^{-k t}$. where $\alpha_0, k$ are hyperparameters and $t$ is the iteration number (but you can also use units of epochs).</li>
<li>1/t decay has the mathematical form $\alpha = \alpha_0 / (1 + k t )$ where $a_0, k$, are hyperparameters and $t$ is the iteration number.</li>
</ul>
<p>In practice, we find that the step decay is slightly preferable because the hyperparameters it involves (the fraction of decay and the step timings in units of epochs) are more interpretable than the hyperparameter $k$.</p>
<h2 id="Second-order-methods"><a href="#Second-order-methods" class="headerlink" title="Second order methods"></a>Second order methods</h2><p>A second, popular group of methods for optimization in context of deep learning is based on Newton’s method, which iterates the following update:</p>
<script type="math/tex; mode=display">x \leftarrow x - [H f(x)]^{-1} \nabla f(x)</script><p>Here,$H f(x)$ is the Hessian matrix, which is a square matrix of second-order partial derivatives of the function. The term<br>$\nabla f(x)$ is the gradient vector, as seen in Gradient Descent. Intuitively, the Hessian describes the local curvature of the loss function, which allows us to perform a more efficient update. In particular, multiplying by the inverse Hessian leads the optimization to take more aggressive steps in directions of shallow curvature and shorter steps in directions of steep curvature. </p>
<p>我们主要集中讨论在一维的情形，对于一个需要求解的优化函数$f(x)$,求函数的极值的问题可以转化为求导函数 $f’(x) = 0$。对函数$f(x)$ 进行泰勒展开到二阶，得到:</p>
<script type="math/tex; mode=display">f(x) = f(x_k) + f'(x_k)(x-x_k) + \frac{1}{1}f''(x_k)(x - x_k)^{2}</script><p>对上式求导并令其为0，则为:</p>
<script type="math/tex; mode=display">f'(x_k) + f''(x_k)(x - x_k) = 0</script><p>得到：</p>
<script type="math/tex; mode=display">x = x_k - \frac{f'(x_k)}{f''(x_k)}</script><p>这是牛顿法的更新公式。</p>
<p><strong>梯度下降的目的是直接求解目标函数极小值，而牛顿法则变相地通过求解目标函数一阶导为零的参数值，进而求得目标函数最小值。</strong></p>
<p>However, the update above is impractical for most deep learning applications because computing (and inverting) the Hessian in its explicit form is a very costly process in both space and time. For instance, a Neural Network with one million parameters would have a Hessian matrix of size [1,000,000 x 1,000,000], occupying approximately 3725 gigabytes of RAM. Hence, a large variety of quasi-Newton methods have been developed that seek to approximate the inverse Hessian. Among these, the most popular is L-BFGS, which uses the information in the gradients over time to form the approximation implicitly (i.e. the full matrix is never computed).</p>
<p><strong>In practice</strong>, it is currently not common to see L-BFGS or similar second-order methods applied to large-scale Deep Learning and Convolutional Neural Networks. Instead, SGD variants based on (Nesterov’s) momentum are more standard because they are simpler and scale more easily.</p>
<h2 id="Per-parameter-adaptive-learning-rate-methods"><a href="#Per-parameter-adaptive-learning-rate-methods" class="headerlink" title="Per-parameter adaptive learning rate methods"></a>Per-parameter adaptive learning rate methods</h2><p>Adam. Adam is a recently proposed update that looks a bit like RMSProp with momentum. The (simplified) update looks as follows:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = beta1*m + (<span class="number">1</span>-beta1)*dx</span><br><span class="line">v = beta2*v + (<span class="number">1</span>-beta2)*(dx**<span class="number">2</span>)</span><br><span class="line">x += - learning_rate * m / (np.sqrt(v) + eps)</span><br></pre></td></tr></table></figure></p>
<p>Notice that the update looks exactly as RMSProp update, except the “smooth” version of the gradient m is used instead of the raw (and perhaps noisy) gradient vector dx. Recommended values in the paper are eps = 1e-8, beta1 = 0.9, beta2 = 0.999. In practice Adam is currently recommended as the default algorithm to use, and often works slightly better than RMSProp. However, it is often also worth trying SGD+Nesterov Momentum as an alternative. The full Adam update also includes a bias correction mechanism, which compensates for the fact that in the first few time steps the vectors m,v are both initialized and therefore biased at zero, before they fully “warm up”. With the bias correction mechanism, the update looks as follows:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># t is your iteration counter going from 1 to infinity</span></span><br><span class="line">m = beta1*m + (<span class="number">1</span>-beta1)*dx</span><br><span class="line">mt = m / (<span class="number">1</span>-beta1**t)</span><br><span class="line">v = beta2*v + (<span class="number">1</span>-beta2)*(dx**<span class="number">2</span>)</span><br><span class="line">vt = v / (<span class="number">1</span>-beta2**t)</span><br><span class="line">x += - learning_rate * mt / (np.sqrt(vt) + eps)</span><br></pre></td></tr></table></figure>
<h2 id="Hyperparameter-optimization"><a href="#Hyperparameter-optimization" class="headerlink" title="Hyperparameter optimization"></a>Hyperparameter optimization</h2><p>As we’ve seen, training Neural Networks can involve many hyperparameter settings. The most common hyperparameters in context of Neural Networks include:</p>
<ul>
<li>the initial learning rate</li>
<li>learning rate decay schedule (such as the decay constant)</li>
<li>regularization strength (L2 penalty, dropout strength)</li>
</ul>
<p>But as we saw, there are many more relatively less sensitive hyperparameters, for example in per-parameter adaptive learning methods, the setting of momentum and its schedule, etc. </p>
<p><strong>Hyperparameter ranges</strong>. Search for hyperparameters on log scale. For example, a typical sampling of the learning rate would look as follows: <code>learning_rate = 10 ** uniform(-6, 1)</code>.</p>
<p><strong>Prefer random search to grid search</strong>. As argued by Bergstra and Bengio in Random Search for Hyper-Parameter Optimization, “randomly chosen trials are more efficient for hyper-parameter optimization than trials on a grid”. As it turns out, this is also usually easier to implement.</p>
<p><strong>Careful with best values on border</strong>. Sometimes it can happen that you’re searching for a hyperparameter (e.g. learning rate) in a bad range. For example, suppose we use <code>learning_rate = 10 ** uniform(-6, 1)</code>. Once we receive the results, it is important to double check that the final learning rate is not at the edge of this interval, or otherwise you may be missing more optimal hyperparameter setting beyond the interval.</p>
<p><strong>Stage your search from coarse to fine</strong>. In practice, it can be helpful to first search in coarse ranges (e.g. 10 ** [-6, 1]), and then depending on where the best results are turning up, narrow the range. Also, it can be helpful to perform the initial coarse search while only training for 1 epoch or even less, because many hyperparameter settings can lead the model to not learn at all, or immediately explode with infinite cost. The second stage could then perform a narrower search with 5 epochs, and the last stage could perform a detailed search in the final range for many more epochs (for example).</p>
<h2 id="Model-Ensembles"><a href="#Model-Ensembles" class="headerlink" title="Model Ensembles"></a>Model Ensembles</h2><p>In practice, one reliable approach to improving the performance of Neural Networks by a few percent is to train multiple independent models, and at test time average their predictions. As the number of models in the ensemble increases, the performance typically monotonically improves (though with diminishing returns). Moreover, the improvements are more dramatic with higher model variety in the ensemble. There are a few approaches to forming an ensemble:</p>
<ul>
<li>Same model, different initializations. Use cross-validation to determine the best hyperparameters, then train multiple models with the best set of hyperparameters but with different random initialization. The danger with this approach is that the variety is only due to initialization.</li>
<li>Top models discovered during cross-validation. Use cross-validation to determine the best hyperparameters, then pick the top few (e.g. 10) models to form the ensemble. This improves the variety of the ensemble but has the danger of including suboptimal models. In practice, this can be easier to perform since it doesn’t require additional retraining of models after cross-validation</li>
<li>Different checkpoints of a single model. If training is very expensive, some people have had limited success in taking different checkpoints of a single network over time (for example after every epoch) and using those to form an ensemble. Clearly, this suffers from some lack of variety, but can still work reasonably well in practice. The advantage of this approach is that is very cheap.</li>
<li>Running average of parameters during training. Related to the last point, a cheap way of almost always getting an extra percent or two of performance is to maintain a second copy of the network’s weights in memory that maintains an exponentially decaying sum of previous weights during training. This way you’re averaging the state of the network over last several iterations. You will find that this “smoothed” version of the weights over last few steps almost always achieves better validation error. The rough intuition to have in mind is that the objective is bowl-shaped and your network is jumping around the mode, so the average has a higher chance of being somewhere nearer the mode.</li>
</ul>
<blockquote>
<p>reference <a href="https://zhuanlan.zhihu.com/p/27919794" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/27919794</a><br>cs231n lecture notes</p>
</blockquote>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>cs231n</tag>
      </tags>
  </entry>
  <entry>
    <title>Naive Bayes</title>
    <url>/Naive-Bayes/2019/10/02/</url>
    <content><![CDATA[<h2 id="Pre-knowledge"><a href="#Pre-knowledge" class="headerlink" title="Pre-knowledge"></a>Pre-knowledge</h2><ol>
<li>Conditionally independent<script type="math/tex; mode=display">P(X,Y)=P(X)P(Y)</script></li>
<li>Conditional probability<script type="math/tex; mode=display">P(Y|X)=\frac{P(X,Y)}{P(X)}</script></li>
<li>Total probability<script type="math/tex; mode=display">P(X)= \sum_{k}P(X|Y=Y_k)P(Y_k)</script></li>
<li>Bayes’ theorem<script type="math/tex; mode=display">P(Y_k|X) = \frac{P(X|Y_k)P(Y_k)}{\sum_k P(X|Y=Y_k)P(Y_k)}</script></li>
</ol>
<h2 id="Naive-Bayes"><a href="#Naive-Bayes" class="headerlink" title="Naive Bayes"></a>Naive Bayes</h2><p>若一个样本有n个特征，分别用$x_1,x_2,x_3,\cdots,x_n$表示，最终的目的是求将样本划分到类$y_k$的概率，即$P(y_k|x_1,x_2,x_3,\cdots,x_n)$。基于贝叶斯公式来估计后验概率$P(y_k|x)$的主要在于$P(x|c)$是所有属性上的联合概率。为了避开这个障碍，朴素贝叶斯采用“属性条件独立性假设”：对已知类别，假设所有属性相互独立。基于此，$P(y_k|x_1,x_2,x_3,\cdots,x_n)$可重写为：</p>
<script type="math/tex; mode=display">P(y_k|x_1,x_2,x_3,\cdots,x_n) = \frac{P(y_k)P(x_1,x_2,x_3,\cdots,x_n|y_k)}{P(X)} = \frac{P(y_k)}{P(X)}\prod_{i=1}^{n}p(x_i|y_k)</script><p>对于所有类别来说$P(X)$相同，因此最小化分类错误率的贝叶斯最优分类器为：</p>
<script type="math/tex; mode=display">h_{\theta}(X) = argmax_{y_k\in y}P(y_k)\prod_{i}^{n}P(x_i|y_k)</script><p><strong>显然，朴素贝叶斯分类器的训练过程就是基于训练集$D$来估计类先验概率$P(y_k)$,并为每个属性估计条件概率$P(x_i|y_k)$.</strong></p>
<p>令$D_{y_k}$表示训练集$D$中第$y_k$类样本组成的集合，若有充足的独立同分布样本，则可容易地估计出类先验概率:</p>
<script type="math/tex; mode=display">P(y_k) = \frac{|D_{y_k}|}{|D|}</script><p>对于离散属性而言，令$D_{y_k,x_i}$表示$D_{y_k}$中第i个属性上取值为$x_i$的样本组成的集合，则条件概率$P(x_i|y_k)$可估计为：</p>
<script type="math/tex; mode=display">P(x_i|y_k) = \frac{|D{y_k,x_i}|}{D_{y_k}}</script><h2 id="Gaussian-Naive-Bayes"><a href="#Gaussian-Naive-Bayes" class="headerlink" title="Gaussian Naive Bayes"></a>Gaussian Naive Bayes</h2><p>连续属性可以考虑概率密度函数,高斯朴素贝叶斯假设$y_k$上的属性$x_i$呈现高斯分布。假定$P(x_i|y_k) \sim \mathcal N (\mu_{i,y_k},\sigma^2_{i,y_k})$, 其中 $\mu_{i,y_k}$ 和 $\sigma^2_{i,y_k}$ 分别是第c类样本在第i个属性上取值的均值和方差，则有：</p>
<script type="math/tex; mode=display">P(x_i|y_k) = \frac{1}{\sqrt{2\pi}\sigma_{y_k i}}exp\lgroup-\frac{(x_i - \mu_{y_k,i}^{2})}{(2\sigma_{y_k i}^{2})}\rgroup</script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> GaussianNB</span><br><span class="line"></span><br><span class="line">iris = datasets.load_iris()</span><br><span class="line">clf = GaussianNB()</span><br><span class="line">clf.fit(iris.data, iris.target)</span><br><span class="line">print(clf.predict(iris.data[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure>
<h2 id="Multinomial-Naive-Bayes"><a href="#Multinomial-Naive-Bayes" class="headerlink" title="Multinomial Naive Bayes"></a>Multinomial Naive Bayes</h2><p>MultinomialNB假设特征的先验概率为多项式分布，即如下式：</p>
<script type="math/tex; mode=display">P(X_i|y_k) = \frac{N_{y_k x_i} + \lambda}{N_{y_k} + n\lambda}</script><p>其中,$N_{y_{k}x_{i}}$是类别$y_k$下第i个特征为$x_i$的样本出现的总次数,$N_{y_{k}}$是$y_k$类样本组成的集合。$\lambda$为一个大于0的常数，常常取为1，即拉普拉斯平滑。也可以取其他值。</p>
<p>该模型常用于文本分类，特征是单词，值是单词的出现次数。对应到文本分类里，如果单词word在一篇分类为label1的文档中出现了5次，那么$N_{label1 word}$的值会增加5。如果是去除了重复单词的，那么$N_{label1 word}$的值会增加1。$n$是特征的数量，在文本分类中就是去重后的所有单词的数量,$\lambda$的取值范围是[0,1]，比较常见的是取值为1。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">X = np.random.randint(<span class="number">5</span>, size=(<span class="number">6</span>, <span class="number">100</span>))</span><br><span class="line">y = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> MultinomialNB</span><br><span class="line">clf = MultinomialNB()</span><br><span class="line">clf.fit(X, y)</span><br><span class="line">MultinomialNB(alpha=<span class="number">1.0</span>, class_prior=<span class="keyword">None</span>, fit_prior=<span class="keyword">True</span>)</span><br><span class="line">print(clf.predict(X[<span class="number">2</span>]))</span><br></pre></td></tr></table></figure>
<p>值得注意的是，多项式模型在训练一个数据集结束后可以继续训练其他数据集而无需将两个数据集放在一起进行训练。在sklearn中，MultinomialNB()类的partial_fit()方法可以进行这种训练。这种方式特别适合于训练集大到内存无法一次性放入的情况。在第一次调用partial_fit()时需要给出所有的分类标号。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> MultinomialNB</span><br><span class="line">clf = MultinomialNB() </span><br><span class="line">clf.partial_fit(numpy.array([<span class="number">1</span>,<span class="number">1</span>]), numpy.array([<span class="string">'aa'</span>]), [<span class="string">'aa'</span>,<span class="string">'bb'</span>])</span><br><span class="line">GaussianNB()</span><br><span class="line">clf.partial_fit(numpy.array([<span class="number">6</span>,<span class="number">1</span>]), numpy.array([<span class="string">'bb'</span>]))</span><br><span class="line">GaussianNB()</span><br><span class="line">print(clf.predict(numpy.array([<span class="number">9</span>,<span class="number">1</span>])))</span><br></pre></td></tr></table></figure>
<h2 id="Bernoulli-Naive-Bayes"><a href="#Bernoulli-Naive-Bayes" class="headerlink" title="Bernoulli Naive Bayes"></a>Bernoulli Naive Bayes</h2><p>类 BernoulliNB 实现了对于服从多元伯努利分布的数据的朴素贝叶斯训练和分类算法； 也就是说，对于大量特征，每一个特征都是一个0-1变量 (Bernoulli, boolean)。 因此，这个类要求样本集合以0-1特征向量的方式展现。如果接收到了其他类型的数据作为参数， 一个 BernoulliNB 实例会把输入数据二元化(取决于 binarize 参数设置)。</p>
<p>BernoulliNB假设特征的先验概率为二元伯努利分布，即如下式：</p>
<script type="math/tex; mode=display">P(x_i|y_k) = P(i|y_k)x_i + (1 - p(i|y))(1-x_i)</script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> BernoulliNB</span><br><span class="line">X = np.random.randint(<span class="number">2</span>, size=(<span class="number">6</span>, <span class="number">100</span>))</span><br><span class="line">Y = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">clf = BernoulliNB()</span><br><span class="line">clf.fit(X, Y)</span><br><span class="line">BernoulliNB(alpha=<span class="number">1.0</span>, binarize=<span class="number">0.0</span>, class_prior=<span class="keyword">None</span>, fit_prior=<span class="keyword">True</span>)</span><br><span class="line">print(clf.predict(X[<span class="number">2</span>]))</span><br></pre></td></tr></table></figure>
<h2 id="不同的预测方法"><a href="#不同的预测方法" class="headerlink" title="不同的预测方法"></a>不同的预测方法</h2><ul>
<li>predict方法就是我们最常用的预测方法，直接给出测试集的预测类别输出。</li>
<li>predict_proba则不同，它会给出测试集样本在各个类别上预测的概率。容易理解，predict_proba预测出的各个类别概率里的最大值对应的类别，也就是predict方法得到类别。</li>
<li>predict_log_proba和predict_proba类似，它会给出测试集样本在各个类别上预测的概率的一个对数转化。</li>
</ul>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Machine Learning</category>
      </categories>
  </entry>
  <entry>
    <title>cs231n assignment1</title>
    <url>/cs231n-assignment1/2019/10/01/</url>
    <content><![CDATA[<h2 id="The-goals-of-this-assignment-are-as-follows"><a href="#The-goals-of-this-assignment-are-as-follows" class="headerlink" title="The goals of this assignment are as follows"></a>The goals of this assignment are as follows</h2><ul>
<li>understand the basic Image Classification pipeline and the data-driven approach (train/predict stages)</li>
<li>understand the train/val/test splits and the use of validation data for hyperparameter tuning.</li>
<li>develop proficiency in writing efficient vectorized code with numpy</li>
<li>implement and apply a k-Nearest Neighbor (kNN) classifier</li>
<li>implement and apply a Multiclass Support Vector Machine (SVM) classifier</li>
<li>implement and apply a Softmax classifier</li>
<li>implement and apply a Two layer neural network classifier</li>
<li>understand the differences and tradeoffs between these classifiers</li>
<li>get a basic understanding of performance improvements from using higher-level representations than raw pixels (e.g. color histograms, Histogram of Gradient (HOG) features)</li>
</ul>
<h2 id="k-Nearest-Neighbor-classifier"><a href="#k-Nearest-Neighbor-classifier" class="headerlink" title="k-Nearest Neighbor classifier"></a>k-Nearest Neighbor classifier</h2><p>The kNN classifier consists of two stages:</p>
<ul>
<li>During training, the classifier takes the training data and simply remembers it</li>
<li>During testing, kNN classifies every test image by comparing to all training images and transfering the labels of the k most similar training examples</li>
<li>The value of k is cross-validated</li>
</ul>
<p>In this exercise you will implement these steps and understand the basic Image Classification pipeline, cross-validation, and gain proficiency in writing efficient, vectorized code.</p>
<h3 id="Key-point"><a href="#Key-point" class="headerlink" title="Key point"></a>Key point</h3><ol>
<li>When we compute the distances wiout loop, these is a important observation</li>
</ol>
<script type="math/tex; mode=display">(a-b)^{2} = a^{2} + b^{2} - 2ab</script><p>for example, if we want to compute the distance between $\vec A$ and $\vec B$, the l2 norm is:</p>
<script type="math/tex; mode=display">\sqrt{\sum_{i=1}^{D}(A_i - B_i)^{2}}</script><p>so we can factoring the equation above:</p>
<script type="math/tex; mode=display">\sqrt{\sum_{i=1}^{D}(A_i)^{2} + \sum_{i=1}^{D}(B_i)^{2} - 2\sum_{i=1}^{D}(A_i\cdot B_i )}</script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test_sum = np.sum(np.square(X),axis = <span class="number">1</span>, keepdims = <span class="keyword">True</span>)</span><br><span class="line">train_sum = np.sum(np.square(self.X_train),axis = <span class="number">1</span>)</span><br><span class="line">cross_sum = X @ self.X_train.T</span><br><span class="line">dists = np.sqrt(train_sum + test_sum - <span class="number">2</span>*cross_sum)</span><br></pre></td></tr></table></figure>
<h3 id="KNN-code"><a href="#KNN-code" class="headerlink" title="KNN code"></a>KNN code</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> builtins <span class="keyword">import</span> range</span><br><span class="line"><span class="keyword">from</span> builtins <span class="keyword">import</span> object</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> past.builtins <span class="keyword">import</span> xrange</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KNearestNeighbor</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">""" a kNN classifier with L2 distance """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(self, X, y)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Train the classifier. For k-nearest neighbors this is just</span></span><br><span class="line"><span class="string">        memorizing the training data.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Inputs:</span></span><br><span class="line"><span class="string">        - X: A numpy array of shape (num_train, D) containing the training data</span></span><br><span class="line"><span class="string">          consisting of num_train samples each of dimension D.</span></span><br><span class="line"><span class="string">        - y: A numpy array of shape (N,) containing the training labels, where</span></span><br><span class="line"><span class="string">             y[i] is the label for X[i].</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.X_train = X</span><br><span class="line">        self.y_train = y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self, X, k=<span class="number">1</span>, num_loops=<span class="number">0</span>)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Predict labels for test data using this classifier.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Inputs:</span></span><br><span class="line"><span class="string">        - X: A numpy array of shape (num_test, D) containing test data consisting</span></span><br><span class="line"><span class="string">             of num_test samples each of dimension D.</span></span><br><span class="line"><span class="string">        - k: The number of nearest neighbors that vote for the predicted labels.</span></span><br><span class="line"><span class="string">        - num_loops: Determines which implementation to use to compute distances</span></span><br><span class="line"><span class="string">          between training points and testing points.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">        - y: A numpy array of shape (num_test,) containing predicted labels for the</span></span><br><span class="line"><span class="string">          test data, where y[i] is the predicted label for the test point X[i].</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> num_loops == <span class="number">0</span>:</span><br><span class="line">            dists = self.compute_distances_no_loops(X)</span><br><span class="line">        <span class="keyword">elif</span> num_loops == <span class="number">1</span>:</span><br><span class="line">            dists = self.compute_distances_one_loop(X)</span><br><span class="line">        <span class="keyword">elif</span> num_loops == <span class="number">2</span>:</span><br><span class="line">            dists = self.compute_distances_two_loops(X)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'Invalid value %d for num_loops'</span> % num_loops)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.predict_labels(dists, k=k)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compute_distances_two_loops</span><span class="params">(self, X)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Compute the distance between each test point in X and each training point</span></span><br><span class="line"><span class="string">        in self.X_train using a nested loop over both the training data and the</span></span><br><span class="line"><span class="string">        test data.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Inputs:</span></span><br><span class="line"><span class="string">        - X: A numpy array of shape (num_test, D) containing test data.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">        - dists: A numpy array of shape (num_test, num_train) where dists[i, j]</span></span><br><span class="line"><span class="string">          is the Euclidean distance between the ith test point and the jth training</span></span><br><span class="line"><span class="string">          point.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        num_test = X.shape[<span class="number">0</span>]</span><br><span class="line">        num_train = self.X_train.shape[<span class="number">0</span>]</span><br><span class="line">        dists = np.zeros((num_test, num_train))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(num_test):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(num_train):</span><br><span class="line">                <span class="comment">#####################################################################</span></span><br><span class="line">                <span class="comment"># <span class="doctag">TODO:</span>                                                             #</span></span><br><span class="line">                <span class="comment"># Compute the l2 distance between the ith test point and the jth    #</span></span><br><span class="line">                <span class="comment"># training point, and store the result in dists[i, j]. You should   #</span></span><br><span class="line">                <span class="comment"># not use a loop over dimension, nor use np.linalg.norm().          #</span></span><br><span class="line">                <span class="comment">#####################################################################</span></span><br><span class="line">                <span class="comment"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span></span><br><span class="line">                dists[i,j] = np.sqrt(np.sum(np.square(X[i] - self.X_train[j])))</span><br><span class="line"></span><br><span class="line">                <span class="comment"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span></span><br><span class="line">        <span class="keyword">return</span> dists</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compute_distances_one_loop</span><span class="params">(self, X)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Compute the distance between each test point in X and each training point</span></span><br><span class="line"><span class="string">        in self.X_train using a single loop over the test data.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Input / Output: Same as compute_distances_two_loops</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        num_test = X.shape[<span class="number">0</span>]</span><br><span class="line">        num_train = self.X_train.shape[<span class="number">0</span>]</span><br><span class="line">        dists = np.zeros((num_test, num_train))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(num_test):</span><br><span class="line">            <span class="comment">#######################################################################</span></span><br><span class="line">            <span class="comment"># <span class="doctag">TODO:</span>                                                               #</span></span><br><span class="line">            <span class="comment"># Compute the l2 distance between the ith test point and all training #</span></span><br><span class="line">            <span class="comment"># points, and store the result in dists[i, :].                        #</span></span><br><span class="line">            <span class="comment"># Do not use np.linalg.norm().                                        #</span></span><br><span class="line">            <span class="comment">#######################################################################</span></span><br><span class="line">            <span class="comment"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span></span><br><span class="line">            dists[i] = np.sqrt(np.sum(np.square(self.X_train-X[i]), axis = <span class="number">1</span>))</span><br><span class="line">            <span class="comment"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span></span><br><span class="line">        <span class="keyword">return</span> dists</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compute_distances_no_loops</span><span class="params">(self, X)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Compute the distance between each test point in X and each training point</span></span><br><span class="line"><span class="string">        in self.X_train using no explicit loops.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Input / Output: Same as compute_distances_two_loops</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        num_test = X.shape[<span class="number">0</span>]</span><br><span class="line">        num_train = self.X_train.shape[<span class="number">0</span>]</span><br><span class="line">        dists = np.zeros((num_test, num_train))</span><br><span class="line">        <span class="comment">#########################################################################</span></span><br><span class="line">        <span class="comment"># <span class="doctag">TODO:</span>                                                                 #</span></span><br><span class="line">        <span class="comment"># Compute the l2 distance between all test points and all training      #</span></span><br><span class="line">        <span class="comment"># points without using any explicit loops, and store the result in      #</span></span><br><span class="line">        <span class="comment"># dists.                                                                #</span></span><br><span class="line">        <span class="comment">#                                                                       #</span></span><br><span class="line">        <span class="comment"># You should implement this function using only basic array operations; #</span></span><br><span class="line">        <span class="comment"># in particular you should not use functions from scipy,                #</span></span><br><span class="line">        <span class="comment"># nor use np.linalg.norm().                                             #</span></span><br><span class="line">        <span class="comment">#                                                                       #</span></span><br><span class="line">        <span class="comment"># HINT: Try to formulate the l2 distance using matrix multiplication    #</span></span><br><span class="line">        <span class="comment">#       and two broadcast sums.                                         #</span></span><br><span class="line">        <span class="comment">#########################################################################</span></span><br><span class="line">        <span class="comment"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span></span><br><span class="line">        test_sum = np.sum(np.square(X),axis = <span class="number">1</span>, keepdims = <span class="keyword">True</span>)</span><br><span class="line">        train_sum = np.sum(np.square(self.X_train),axis = <span class="number">1</span>)</span><br><span class="line">        cross_sum = X @ self.X_train.T</span><br><span class="line"></span><br><span class="line">        dists = np.sqrt(train_sum + test_sum - <span class="number">2</span>*cross_sum)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span></span><br><span class="line">        <span class="keyword">return</span> dists</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict_labels</span><span class="params">(self, dists, k=<span class="number">1</span>)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Given a matrix of distances between test points and training points,</span></span><br><span class="line"><span class="string">        predict a label for each test point.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Inputs:</span></span><br><span class="line"><span class="string">        - dists: A numpy array of shape (num_test, num_train) where dists[i, j]</span></span><br><span class="line"><span class="string">          gives the distance betwen the ith test point and the jth training point.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">        - y: A numpy array of shape (num_test,) containing predicted labels for the</span></span><br><span class="line"><span class="string">          test data, where y[i] is the predicted label for the test point X[i].</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        num_test = dists.shape[<span class="number">0</span>]</span><br><span class="line">        y_pred = np.zeros(num_test)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(num_test):</span><br><span class="line">            <span class="comment"># A list of length k storing the labels of the k nearest neighbors to</span></span><br><span class="line">            <span class="comment"># the ith test point.</span></span><br><span class="line">            closest_y = []</span><br><span class="line">            <span class="comment">#########################################################################</span></span><br><span class="line">            <span class="comment"># <span class="doctag">TODO:</span>                                                                 #</span></span><br><span class="line">            <span class="comment"># Use the distance matrix to find the k nearest neighbors of the ith    #</span></span><br><span class="line">            <span class="comment"># testing point, and use self.y_train to find the labels of these       #</span></span><br><span class="line">            <span class="comment"># neighbors. Store these labels in closest_y.                           #</span></span><br><span class="line">            <span class="comment"># Hint: Look up the function numpy.argsort.                             #</span></span><br><span class="line">            <span class="comment">#########################################################################</span></span><br><span class="line">            <span class="comment"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span></span><br><span class="line"></span><br><span class="line">            closest_y = self.y_train[np.argsort(dists[i])[:k]]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span></span><br><span class="line">            <span class="comment">#########################################################################</span></span><br><span class="line">            <span class="comment"># <span class="doctag">TODO:</span>                                                                 #</span></span><br><span class="line">            <span class="comment"># Now that you have found the labels of the k nearest neighbors, you    #</span></span><br><span class="line">            <span class="comment"># need to find the most common label in the list closest_y of labels.   #</span></span><br><span class="line">            <span class="comment"># Store this label in y_pred[i]. Break ties by choosing the smaller     #</span></span><br><span class="line">            <span class="comment"># label.                                                                #</span></span><br><span class="line">            <span class="comment">#########################################################################</span></span><br><span class="line">            <span class="comment"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span></span><br><span class="line"></span><br><span class="line">            y_pred[i] = np.bincount(closest_y).argmax()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> y_pred</span><br></pre></td></tr></table></figure>
<h2 id="Multiclass-Support-Vector-Machine-exercise"><a href="#Multiclass-Support-Vector-Machine-exercise" class="headerlink" title="# Multiclass Support Vector Machine exercise"></a># Multiclass Support Vector Machine exercise</h2><ul>
<li>implement a fully-vectorized <strong>loss function</strong> for the SVM</li>
<li>implement the fully-vectorized expression for its <strong>analytic gradient</strong></li>
<li><strong>check your implementation</strong> using numerical gradient</li>
<li>use a validation set to <strong>tune the learning rate and regularization</strong> strength</li>
<li><strong>optimize</strong> the loss function with <strong>SGD</strong></li>
<li><strong>visualize</strong> the final learned weights</li>
</ul>
<h3 id="Key-points"><a href="#Key-points" class="headerlink" title="Key points"></a>Key points</h3><p>Recall that for the i-th example we are given the pixels of image $x_i$,and the label $y_i$ that specifies the index of the correct class. The score function takes the pixels and computes the vector $f(x_i,w)$ of class scores, which we will abbreviate to $s$ (short for scores). For example, the score for the j-th class is the j-th element: $s_j = f(x_i, W)_j$, The Multiclass SVM loss for the i-th example is then formalized as follows:</p>
<script type="math/tex; mode=display">L_i = \sum_{j\neq y_i} \max(0, s_j - s_{y_i} + \Delta)</script><p>Note that in this particular module we are working with linear score functions ($f(x_i; W) =  W x_i$), so we can also rewrite the loss function in this equivalent form:</p>
<script type="math/tex; mode=display">L_i = \sum_{j\neq y_i} \max(0, w_j^T x_i - w_{y_i}^T x_i + \Delta)</script><p>add regularization term and expanding this out in its full form:</p>
<script type="math/tex; mode=display">L = \frac{1}{N} \sum_i \sum_{j\neq y_i} \left[ \max(0, f(x_i; W)_j - f(x_i; W)_{y_i} + \Delta) \right] + \lambda \sum_k\sum_l W_{k,l}^2</script><p>In addition to the motivation we provided above there are many desirable properties to include the regularization penalty, many of which we will come back to in later sections. For example, it turns out that including the L2 penalty leads to the appealing max margin property in SVMs</p>
<ol>
<li>Calculate the derivative for svm</li>
</ol>
<p>\begin{equation}<br>\left\{<br>\begin{array}{lr}<br>&amp; \frac{\partial {L_{i j}}}{\partial w_j} = - x_i^{T}  \quad j = y_i \\<br>&amp; \frac{\partial {L_{i j}}}{\partial w_j} = x_i^{T}   \quad j \neq y_i<br>\end{array}<br>\right.<br>\end{equation}</p>
<ol>
<li>calculate the loss and gradient by vector</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">scores = X @ W</span><br><span class="line">    <span class="comment"># print(scores.shape)</span></span><br><span class="line">    <span class="comment"># print(y)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## difference of each class for every sample</span></span><br><span class="line">    margins = np.maximum(<span class="number">0</span>,scores - scores[range(num_train),y].reshape(<span class="number">-1</span>,<span class="number">1</span>) + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">## true class have no loss</span></span><br><span class="line">    margins[range(num_train),y] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## calculate the loss</span></span><br><span class="line">    loss = np.sum(margins) / num_train + <span class="number">0.5</span> * reg * np.sum(W * W)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">## calcute the times we should repeate when calculate the gradient for true class</span></span><br><span class="line">    margins[margins &gt; <span class="number">0</span>] = <span class="number">1.0</span></span><br><span class="line">    row_sum = np.sum(margins, axis=<span class="number">1</span>)                  </span><br><span class="line">    margins[np.arange(num_train), y] = -row_sum   </span><br><span class="line"></span><br><span class="line">    <span class="comment">## calcute the gradient</span></span><br><span class="line">    dW += np.dot(X.T, margins)/num_train + reg * W</span><br></pre></td></tr></table></figure>
<h3 id="SVM-code"><a href="#SVM-code" class="headerlink" title="SVM code"></a>SVM code</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> builtins <span class="keyword">import</span> range</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> shuffle</span><br><span class="line"><span class="keyword">from</span> past.builtins <span class="keyword">import</span> xrange</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">svm_loss_naive</span><span class="params">(W, X, y, reg)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Structured SVM loss function, naive implementation (with loops).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Inputs have dimension D, there are C classes, and we operate on minibatches</span></span><br><span class="line"><span class="string">    of N examples.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Inputs:</span></span><br><span class="line"><span class="string">    - W: A numpy array of shape (D, C) containing weights.</span></span><br><span class="line"><span class="string">    - X: A numpy array of shape (N, D) containing a minibatch of data.</span></span><br><span class="line"><span class="string">    - y: A numpy array of shape (N,) containing training labels; y[i] = c means</span></span><br><span class="line"><span class="string">      that X[i] has label c, where 0 &lt;= c &lt; C.</span></span><br><span class="line"><span class="string">    - reg: (float) regularization strength</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns a tuple of:</span></span><br><span class="line"><span class="string">    - loss as single float</span></span><br><span class="line"><span class="string">    - gradient with respect to weights W; an array of same shape as W</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    dW = np.zeros(W.shape) <span class="comment"># initialize the gradient as zero</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># compute the loss and the gradient</span></span><br><span class="line">    num_classes = W.shape[<span class="number">1</span>]</span><br><span class="line">    num_train = X.shape[<span class="number">0</span>]</span><br><span class="line">    loss = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num_train):</span><br><span class="line">        scores = X[i].dot(W)</span><br><span class="line">        correct_class_score = scores[y[i]]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(num_classes):</span><br><span class="line">            <span class="keyword">if</span> j == y[i]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            margin = scores[j] - correct_class_score + <span class="number">1</span> <span class="comment"># note delta = 1</span></span><br><span class="line">            <span class="keyword">if</span> margin &gt; <span class="number">0</span>:</span><br><span class="line">                loss += margin</span><br><span class="line">                dW[:,j] += X[i,:].T</span><br><span class="line">                dW[:,y[i]] -= X[i,:].T</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Right now the loss is a sum over all training examples, but we want it</span></span><br><span class="line">    <span class="comment"># to be an average instead so we divide by num_train.</span></span><br><span class="line">    loss /= num_train</span><br><span class="line">    dW /= num_train</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Add regularization to the loss.</span></span><br><span class="line">    loss += <span class="number">0.5</span> * reg * np.sum(W * W)</span><br><span class="line">    dW += reg * W</span><br><span class="line"></span><br><span class="line">    <span class="comment">#############################################################################</span></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span>                                                                     #</span></span><br><span class="line">    <span class="comment"># Compute the gradient of the loss function and store it dW.                #</span></span><br><span class="line">    <span class="comment"># Rather that first computing the loss and then computing the derivative,   #</span></span><br><span class="line">    <span class="comment"># it may be simpler to compute the derivative at the same time that the     #</span></span><br><span class="line">    <span class="comment"># loss is being computed. As a result you may need to modify some of the    #</span></span><br><span class="line">    <span class="comment"># code above to compute the gradient.                                       #</span></span><br><span class="line">    <span class="comment">#############################################################################</span></span><br><span class="line">    <span class="comment"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="comment"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> loss, dW</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">svm_loss_vectorized</span><span class="params">(W, X, y, reg)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Structured SVM loss function, vectorized implementation.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Inputs and outputs are the same as svm_loss_naive.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    loss = <span class="number">0.0</span></span><br><span class="line">    dW = np.zeros(W.shape) <span class="comment"># initialize the gradient as zero</span></span><br><span class="line">    num_train = X.shape[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#############################################################################</span></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span>                                                                     #</span></span><br><span class="line">    <span class="comment"># Implement a vectorized version of the structured SVM loss, storing the    #</span></span><br><span class="line">    <span class="comment"># result in loss.                                                           #</span></span><br><span class="line">    <span class="comment">#############################################################################</span></span><br><span class="line">    <span class="comment"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    scores = X @ W</span><br><span class="line">    <span class="comment"># print(scores.shape)</span></span><br><span class="line">    <span class="comment"># print(y)</span></span><br><span class="line"></span><br><span class="line">    margins = np.maximum(<span class="number">0</span>,scores - scores[range(num_train),y].reshape(<span class="number">-1</span>,<span class="number">1</span>) + <span class="number">1</span>)</span><br><span class="line">    margins[range(num_train),y] = <span class="number">0</span></span><br><span class="line">    loss = np.sum(margins) / num_train + <span class="number">0.5</span> * reg * np.sum(W * W)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#############################################################################</span></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span>                                                                     #</span></span><br><span class="line">    <span class="comment"># Implement a vectorized version of the gradient for the structured SVM     #</span></span><br><span class="line">    <span class="comment"># loss, storing the result in dW.                                           #</span></span><br><span class="line">    <span class="comment">#                                                                           #</span></span><br><span class="line">    <span class="comment"># Hint: Instead of computing the gradient from scratch, it may be easier    #</span></span><br><span class="line">    <span class="comment"># to reuse some of the intermediate values that you used to compute the     #</span></span><br><span class="line">    <span class="comment"># loss.                                                                     #</span></span><br><span class="line">    <span class="comment">#############################################################################</span></span><br><span class="line">    <span class="comment"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span></span><br><span class="line"></span><br><span class="line">    margins[margins &gt; <span class="number">0</span>] = <span class="number">1.0</span></span><br><span class="line">    row_sum = np.sum(margins, axis=<span class="number">1</span>)                  </span><br><span class="line">    margins[np.arange(num_train), y] = -row_sum        </span><br><span class="line">    dW += np.dot(X.T, margins)/num_train + reg * W  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> loss, dW</span><br></pre></td></tr></table></figure>
<h2 id="Implement-a-Softmax-classifier"><a href="#Implement-a-Softmax-classifier" class="headerlink" title="Implement a Softmax classifier"></a>Implement a Softmax classifier</h2><ul>
<li>implement a fully-vectorized <strong>loss function</strong> for the Softmax classifier</li>
<li>implement the fully-vectorized expression for its <strong>analytic gradient</strong></li>
<li><strong>check your implementation</strong> with numerical gradient</li>
<li>use a validation set to <strong>tune the learning rate and regularization</strong> strength</li>
<li><strong>optimize</strong> the loss function with <strong>SGD</strong></li>
<li><strong>visualize</strong> the final learned weights</li>
</ul>
<p>Unlike the SVM which treats the outputs $f(x_i,W)$ as (uncalibrated and possibly difficult to interpret) scores for each class, the Softmax classifier gives a slightly more intuitive output (normalized class probabilities) and also has a probabilistic interpretation that we will describe shortly. In the Softmax classifier, the function mapping $f(x_i; W) =  W x_i$ stays unchanged, but we now interpret these scores as the unnormalized log probabilities for each class and replace the hinge loss with a cross-entropy loss that has the form: </p>
<script type="math/tex; mode=display">L_i = -\log\left(\frac{e^{f_{y_i}}}{ \sum_j e^{f_j} }\right) \hspace{0.5in} \text{or equivalently} \hspace{0.5in} L_i = -f_{y_i} + \log\sum_j e^{f_j}</script><script type="math/tex; mode=display">L =  \underbrace{ \frac{1}{N} \sum_i L_i }_\text{data loss} + \underbrace{ \frac{1}{2} \lambda \sum_k\sum_l W_{k,l}^2 }\_\text{regularization loss}</script><p>The function $\frac{e^{z_j}}{\sum_k e^{z_k}}$, is called the softmax function: It takes a vector of arbitrary real-valued scores (in $z$) and squashes it to a vector of values between zero and one that sum to one. The full cross-entropy loss that involves the softmax function might look scary if you’re seeing it for the first time but it is relatively easy to motivate.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num_examples = X.shape[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># get unnormalized probabilities</span></span><br><span class="line">exp_scores = np.exp(scores)</span><br><span class="line"><span class="comment"># normalize them for each example</span></span><br><span class="line">probs = exp_scores / np.sum(exp_scores, axis=<span class="number">1</span>, keepdims=<span class="keyword">True</span>)</span><br><span class="line">correct_logprobs = -np.log(probs[range(num_examples),y])</span><br><span class="line"><span class="comment"># compute the loss: average cross-entropy loss and regularization</span></span><br><span class="line">data_loss = np.sum(correct_logprobs)/num_examples</span><br><span class="line">reg_loss = <span class="number">0.5</span>*reg*np.sum(W*W)</span><br><span class="line">loss = data_loss + reg_loss</span><br></pre></td></tr></table></figure>
<p>We have a way of evaluating the loss, and now we have to minimize it. We’ll do so with gradient descent. That is, we start with random parameters (as shown above), and evaluate the gradient of the loss function with respect to the parameters, so that we know how we should change the parameters to decrease the loss. Lets introduce the intermediate variable $P$,which is a vector of the (normalized) probabilities. The loss for one example is:</p>
<script type="math/tex; mode=display">p_k = \frac{e^{f_k}}{ \sum_j e^{f_j} } \hspace{1in} L_i =-\log\left(p_{y_i}\right)</script><p>We now wish to understand how the computed scores inside $f$ should change to decrease the loss $L_i$ that this example contributes to the full objective. In other words, we want to derive the gradient $\partial L_i / \partial f_k$. The loss $Li$ is computed from $p$ which in turn depends on $f$ It’s a fun exercise to the reader to use the chain rule to derive the gradient, but it turns out to be extremely simple and interpretible in the end, after a lot of things cancel out:</p>
<script type="math/tex; mode=display">\frac{\partial L_i }{ \partial f_k } = p_k - \mathbb{1}(y_i = k)</script><script type="math/tex; mode=display">\frac{\partial L_i }{ \partial f_j } = p_j - \mathbb{1}(y_i = k)</script><p>Notice how elegant and simple this expression is. Suppose the probabilities we computed were <code>p = [0.2, 0.3, 0.5]</code>, and that the correct class was the middle one (with probability 0.3). According to this derivation the gradient on the scores would be <code>df = [0.2, -0.7, 0.5]</code>. Recalling what the interpretation of the gradient, we see that this result is highly intuitive: increasing the first or last element of the score vector f (the scores of the incorrect classes) leads to an increased loss (due to the positive signs +0.2 and +0.5) - and increasing the loss is bad, as expected. However, increasing the score of the correct class has negative influence on the loss. The gradient of -0.7 is telling us that increasing the correct class score would lead to a decrease of the loss $L_i$, which makes sense.</p>
<p>To get the gradient on the scores, which we call $dscores$, we proceed as follows:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dscores = probs</span><br><span class="line">dscores[range(num_examples),y] -= <span class="number">1</span></span><br><span class="line">dscores /= num_examples</span><br></pre></td></tr></table></figure></p>
<p>Lastly, we had that <script type="math/tex">scores = np.dot(X, W) + b</script>, so armed with the gradient on scores (stored in dscores), we can now backpropagate into W and b:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dW = np.dot(X.T, dscores)</span><br><span class="line">db = np.sum(dscores, axis=<span class="number">0</span>, keepdims=<span class="keyword">True</span>)</span><br><span class="line">dW += reg*W <span class="comment"># don't forget the regularization gradient</span></span><br></pre></td></tr></table></figure>
<h3 id="Softmax-code"><a href="#Softmax-code" class="headerlink" title="Softmax code"></a>Softmax code</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> builtins <span class="keyword">import</span> range</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> shuffle</span><br><span class="line"><span class="keyword">from</span> past.builtins <span class="keyword">import</span> xrange</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">softmax_loss_naive</span><span class="params">(W, X, y, reg)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Softmax loss function, naive implementation (with loops)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Inputs have dimension D, there are C classes, and we operate on minibatches</span></span><br><span class="line"><span class="string">    of N examples.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Inputs:</span></span><br><span class="line"><span class="string">    - W: A numpy array of shape (D, C) containing weights.</span></span><br><span class="line"><span class="string">    - X: A numpy array of shape (N, D) containing a minibatch of data.</span></span><br><span class="line"><span class="string">    - y: A numpy array of shape (N,) containing training labels; y[i] = c means</span></span><br><span class="line"><span class="string">      that X[i] has label c, where 0 &lt;= c &lt; C.</span></span><br><span class="line"><span class="string">    - reg: (float) regularization strength</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns a tuple of:</span></span><br><span class="line"><span class="string">    - loss as single float</span></span><br><span class="line"><span class="string">    - gradient with respect to weights W; an array of same shape as W</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># Initialize the loss and gradient to zero.</span></span><br><span class="line">    loss = <span class="number">0.0</span></span><br><span class="line">    dW = np.zeros_like(W)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#############################################################################</span></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span> Compute the softmax loss and its gradient using explicit loops.     #</span></span><br><span class="line">    <span class="comment"># Store the loss in loss and the gradient in dW. If you are not careful     #</span></span><br><span class="line">    <span class="comment"># here, it is easy to run into numeric instability. Don't forget the        #</span></span><br><span class="line">    <span class="comment"># regularization!                                                           #</span></span><br><span class="line">    <span class="comment">#############################################################################</span></span><br><span class="line">    <span class="comment"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span></span><br><span class="line"></span><br><span class="line">    num_trains = X.shape[<span class="number">0</span>]</span><br><span class="line">    num_classes = W.shape[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num_trains):</span><br><span class="line">        scores = X[i].T @ W</span><br><span class="line">        shift_scores = scores - np.max(scores)</span><br><span class="line">        loss_i = - shift_scores[y[i]] + np.log(np.sum(np.exp(shift_scores)))</span><br><span class="line">        loss += loss_i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> xrange(num_classes):</span><br><span class="line">            softmax_output = np.exp(shift_scores[j])/sum(np.exp(shift_scores))</span><br><span class="line">            <span class="keyword">if</span> j == y[i]:</span><br><span class="line">                dW[:,j] += (<span class="number">-1</span> + softmax_output) *X[i] </span><br><span class="line">            <span class="keyword">else</span>: </span><br><span class="line">                dW[:,j] += softmax_output *X[i] </span><br><span class="line"></span><br><span class="line">        loss /= num_trains</span><br><span class="line">        loss +=  <span class="number">0.5</span>* reg * np.sum(W * W)</span><br><span class="line">        dW = dW/num_trains + reg* W </span><br><span class="line">    <span class="comment"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> loss, dW</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">softmax_loss_vectorized</span><span class="params">(W, X, y, reg)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Softmax loss function, vectorized version.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Inputs and outputs are the same as softmax_loss_naive.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># Initialize the loss and gradient to zero.</span></span><br><span class="line">    loss = <span class="number">0.0</span></span><br><span class="line">    dW = np.zeros_like(W)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#############################################################################</span></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span> Compute the softmax loss and its gradient using no explicit loops.  #</span></span><br><span class="line">    <span class="comment"># Store the loss in loss and the gradient in dW. If you are not careful     #</span></span><br><span class="line">    <span class="comment"># here, it is easy to run into numeric instability. Don't forget the        #</span></span><br><span class="line">    <span class="comment"># regularization!                                                           #</span></span><br><span class="line">    <span class="comment">#############################################################################</span></span><br><span class="line">    <span class="comment"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span></span><br><span class="line"></span><br><span class="line">    num_classes = W.shape[<span class="number">1</span>]</span><br><span class="line">    num_train = X.shape[<span class="number">0</span>]</span><br><span class="line">    scores = X.dot(W)</span><br><span class="line">    shift_scores = scores - np.max(scores, axis = <span class="number">1</span>).reshape(<span class="number">-1</span>,<span class="number">1</span>)</span><br><span class="line">    softmax_output = np.exp(shift_scores)/np.sum(np.exp(shift_scores), axis = <span class="number">1</span>).reshape(<span class="number">-1</span>,<span class="number">1</span>)</span><br><span class="line">    loss = -np.sum(np.log(softmax_output[range(num_train), list(y)]))</span><br><span class="line">    loss /= num_train </span><br><span class="line">    loss +=  <span class="number">0.5</span>* reg * np.sum(W * W)</span><br><span class="line"></span><br><span class="line">    dS = softmax_output.copy()</span><br><span class="line">    dS[range(num_train), list(y)] += <span class="number">-1</span></span><br><span class="line">    dW = (X.T).dot(dS)</span><br><span class="line">    dW = dW/num_train + reg* W </span><br><span class="line"></span><br><span class="line">    <span class="comment"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> loss, dW</span><br></pre></td></tr></table></figure>
<h2 id="Two-Layer-Neural-Network"><a href="#Two-Layer-Neural-Network" class="headerlink" title="Two-Layer Neural Network"></a>Two-Layer Neural Network</h2><p>Clearly, a linear classifier is inadequate for this dataset and we would like to use a Neural Network. One additional hidden layer will suffice for this toy data. We will now need two sets of weights and biases (for the first and second layers):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># initialize parameters randomly</span></span><br><span class="line">h = <span class="number">100</span> <span class="comment"># size of hidden layer</span></span><br><span class="line">W = <span class="number">0.01</span> * np.random.randn(D,h)</span><br><span class="line">b = np.zeros((<span class="number">1</span>,h))</span><br><span class="line">W2 = <span class="number">0.01</span> * np.random.randn(h,K)</span><br><span class="line">b2 = np.zeros((<span class="number">1</span>,K))</span><br></pre></td></tr></table></figure>
<p>The forward pass to compute scores now changes form:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># evaluate class scores with a 2-layer Neural Network</span></span><br><span class="line">hidden_layer = np.maximum(<span class="number">0</span>, np.dot(X, W) + b) <span class="comment"># note, ReLU activation</span></span><br><span class="line">scores = np.dot(hidden_layer, W2) + b2</span><br></pre></td></tr></table></figure>
<p>Notice that the only change from before is one <strong>extra line of code</strong>, where we first compute the hidden layer representation and then the scores based on this hidden layer. Crucially, we’ve also added a non-linearity, which in this case is simple ReLU that thresholds the activations on the hidden layer at zero.</p>
<p>Everything else remains the same. We compute the loss based on the scores exactly as before, and get the gradient for the scores dscores exactly as before. However, the way we backpropagate that gradient into the model parameters now changes form, of course. First lets backpropagate the second layer of the Neural Network. This looks identical to the code we had for the Softmax classifier, except we’re replacing X (the raw data), with the variable hidden_layer):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># backpropate the gradient to the parameters</span></span><br><span class="line"><span class="comment"># first backprop into parameters W2 and b2</span></span><br><span class="line">dW2 = np.dot(hidden_layer.T, dscores)</span><br><span class="line">db2 = np.sum(dscores, axis=<span class="number">0</span>, keepdims=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure>
<p>However, unlike before we are not yet done, because hidden_layer is itself a function of other parameters and the data! We need to continue backpropagation through this variable. Its gradient can be computed as:</p>
<script type="math/tex; mode=display">relu = max(0,a)</script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dhidden = np.dot(dscores, W2.T)</span><br></pre></td></tr></table></figure>
<p>Now we have the gradient on the outputs of the hidden layer. Next, we have to backpropagate the ReLU non-linearity. This turns out to be easy because ReLU during the backward pass is effectively a switch. Since $r = max(0, x)$, we have that $\frac{dr}{dx} = 1(x &gt; 0)$, Combined with the chain rule, we see that the ReLU unit lets the gradient pass through unchanged if its input was greater than 0, but kills it if its input was less than zero during the forward pass. Hence, we can backpropagate the ReLU in place simply with:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># backprop the ReLU non-linearity</span></span><br><span class="line">dhidden[hidden_layer &lt;= <span class="number">0</span>] = <span class="number">0</span></span><br><span class="line"><span class="comment"># finally into W,b</span></span><br><span class="line">dW = np.dot(X.T, dhidden)</span><br><span class="line">db = np.sum(dhidden, axis=<span class="number">0</span>, keepdims=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure>
<h3 id="Neural-Net-code"><a href="#Neural-Net-code" class="headerlink" title="Neural Net code"></a>Neural Net code</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> builtins <span class="keyword">import</span> range</span><br><span class="line"><span class="keyword">from</span> builtins <span class="keyword">import</span> object</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> past.builtins <span class="keyword">import</span> xrange</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwoLayerNet</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    A two-layer fully-connected neural network. The net has an input dimension of</span></span><br><span class="line"><span class="string">    N, a hidden layer dimension of H, and performs classification over C classes.</span></span><br><span class="line"><span class="string">    We train the network with a softmax loss function and L2 regularization on the</span></span><br><span class="line"><span class="string">    weight matrices. The network uses a ReLU nonlinearity after the first fully</span></span><br><span class="line"><span class="string">    connected layer.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    In other words, the network has the following architecture:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    input - fully connected layer - ReLU - fully connected layer - softmax</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The outputs of the second fully-connected layer are the scores for each class.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, input_size, hidden_size, output_size, std=<span class="number">1e-4</span>)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Initialize the model. Weights are initialized to small random values and</span></span><br><span class="line"><span class="string">        biases are initialized to zero. Weights and biases are stored in the</span></span><br><span class="line"><span class="string">        variable self.params, which is a dictionary with the following keys:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        W1: First layer weights; has shape (D, H)</span></span><br><span class="line"><span class="string">        b1: First layer biases; has shape (H,)</span></span><br><span class="line"><span class="string">        W2: Second layer weights; has shape (H, C)</span></span><br><span class="line"><span class="string">        b2: Second layer biases; has shape (C,)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Inputs:</span></span><br><span class="line"><span class="string">        - input_size: The dimension D of the input data.</span></span><br><span class="line"><span class="string">        - hidden_size: The number of neurons H in the hidden layer.</span></span><br><span class="line"><span class="string">        - output_size: The number of classes C.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.params = &#123;&#125;</span><br><span class="line">        self.params[<span class="string">'W1'</span>] = std * np.random.randn(input_size, hidden_size)</span><br><span class="line">        self.params[<span class="string">'b1'</span>] = np.zeros(hidden_size)</span><br><span class="line">        self.params[<span class="string">'W2'</span>] = std * np.random.randn(hidden_size, output_size)</span><br><span class="line">        self.params[<span class="string">'b2'</span>] = np.zeros(output_size)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">relu</span><span class="params">(self,x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> np.maximum(<span class="number">0</span>,x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">loss</span><span class="params">(self, X, y=None, reg=<span class="number">0.0</span>)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Compute the loss and gradients for a two layer fully connected neural</span></span><br><span class="line"><span class="string">        network.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Inputs:</span></span><br><span class="line"><span class="string">        - X: Input data of shape (N, D). Each X[i] is a training sample.</span></span><br><span class="line"><span class="string">        - y: Vector of training labels. y[i] is the label for X[i], and each y[i] is</span></span><br><span class="line"><span class="string">          an integer in the range 0 &lt;= y[i] &lt; C. This parameter is optional; if it</span></span><br><span class="line"><span class="string">          is not passed then we only return scores, and if it is passed then we</span></span><br><span class="line"><span class="string">          instead return the loss and gradients.</span></span><br><span class="line"><span class="string">        - reg: Regularization strength.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">        If y is None, return a matrix scores of shape (N, C) where scores[i, c] is</span></span><br><span class="line"><span class="string">        the score for class c on input X[i].</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        If y is not None, instead return a tuple of:</span></span><br><span class="line"><span class="string">        - loss: Loss (data loss and regularization loss) for this batch of training</span></span><br><span class="line"><span class="string">          samples.</span></span><br><span class="line"><span class="string">        - grads: Dictionary mapping parameter names to gradients of those parameters</span></span><br><span class="line"><span class="string">          with respect to the loss function; has the same keys as self.params.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># Unpack variables from the params dictionary</span></span><br><span class="line">        W1, b1 = self.params[<span class="string">'W1'</span>], self.params[<span class="string">'b1'</span>]</span><br><span class="line">        W2, b2 = self.params[<span class="string">'W2'</span>], self.params[<span class="string">'b2'</span>]</span><br><span class="line">        N, D = X.shape</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Compute the forward pass</span></span><br><span class="line">        scores = <span class="keyword">None</span></span><br><span class="line">        <span class="comment">#############################################################################</span></span><br><span class="line">        <span class="comment"># <span class="doctag">TODO:</span> Perform the forward pass, computing the class scores for the input. #</span></span><br><span class="line">        <span class="comment"># Store the result in the scores variable, which should be an array of      #</span></span><br><span class="line">        <span class="comment"># shape (N, C).                                                             #</span></span><br><span class="line">        <span class="comment">#############################################################################</span></span><br><span class="line">        <span class="comment"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># (n,d) * (d,h) + (h,) = (n,h)</span></span><br><span class="line">        h_output =  self.relu(X @ W1 + b1)    </span><br><span class="line">        scores = h_output @ W2 + b2</span><br><span class="line"></span><br><span class="line">        <span class="comment"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># If the targets are not given then jump out, we're done</span></span><br><span class="line">        <span class="keyword">if</span> y <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> scores</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Compute the loss</span></span><br><span class="line">        loss = <span class="keyword">None</span></span><br><span class="line">        <span class="comment">#############################################################################</span></span><br><span class="line">        <span class="comment"># <span class="doctag">TODO:</span> Finish the forward pass, and compute the loss. This should include  #</span></span><br><span class="line">        <span class="comment"># both the data loss and L2 regularization for W1 and W2. Store the result  #</span></span><br><span class="line">        <span class="comment"># in the variable loss, which should be a scalar. Use the Softmax           #</span></span><br><span class="line">        <span class="comment"># classifier loss.                                                          #</span></span><br><span class="line">        <span class="comment">#############################################################################</span></span><br><span class="line">        <span class="comment"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span></span><br><span class="line"></span><br><span class="line">        shift_scores = scores - np.max(scores, axis = <span class="number">1</span>).reshape(<span class="number">-1</span>,<span class="number">1</span>)</span><br><span class="line">        softmax_output = np.exp(shift_scores)/np.sum(np.exp(shift_scores), axis = <span class="number">1</span>).reshape(<span class="number">-1</span>,<span class="number">1</span>)</span><br><span class="line">        loss = -np.sum(np.log(softmax_output[range(N), list(y)]))</span><br><span class="line">        loss /= N</span><br><span class="line">        loss +=  <span class="number">0.5</span>* reg * (np.sum(W1 * W1) + np.sum(W2 * W2))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Backward pass: compute gradients</span></span><br><span class="line">        grads = &#123;&#125;</span><br><span class="line">        <span class="comment">#############################################################################</span></span><br><span class="line">        <span class="comment"># <span class="doctag">TODO:</span> Compute the backward pass, computing the derivatives of the weights #</span></span><br><span class="line">        <span class="comment"># and biases. Store the results in the grads dictionary. For example,       #</span></span><br><span class="line">        <span class="comment"># grads['W1'] should store the gradient on W1, and be a matrix of same size #</span></span><br><span class="line">        <span class="comment">#############################################################################</span></span><br><span class="line">        <span class="comment"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span></span><br><span class="line"></span><br><span class="line">        dscores = softmax_output.copy()</span><br><span class="line">        dscores[range(N), list(y)] -= <span class="number">1</span></span><br><span class="line">        dscores /= N</span><br><span class="line">        grads[<span class="string">'W2'</span>] = h_output.T.dot(dscores) + reg * W2</span><br><span class="line">        grads[<span class="string">'b2'</span>] = np.sum(dscores, axis = <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        dh = dscores.dot(W2.T)</span><br><span class="line">        dh_ReLu = (h_output &gt; <span class="number">0</span>) * dh</span><br><span class="line">        grads[<span class="string">'W1'</span>] = X.T.dot(dh_ReLu) + reg * W1</span><br><span class="line">        grads[<span class="string">'b1'</span>] = np.sum(dh_ReLu, axis = <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> loss, grads</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(self, X, y, X_val, y_val,</span></span></span><br><span class="line"><span class="function"><span class="params">              learning_rate=<span class="number">1e-3</span>, learning_rate_decay=<span class="number">0.95</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              reg=<span class="number">5e-6</span>, num_iters=<span class="number">100</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              batch_size=<span class="number">200</span>, verbose=False)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Train this neural network using stochastic gradient descent.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Inputs:</span></span><br><span class="line"><span class="string">        - X: A numpy array of shape (N, D) giving training data.</span></span><br><span class="line"><span class="string">        - y: A numpy array f shape (N,) giving training labels; y[i] = c means that</span></span><br><span class="line"><span class="string">          X[i] has label c, where 0 &lt;= c &lt; C.</span></span><br><span class="line"><span class="string">        - X_val: A numpy array of shape (N_val, D) giving validation data.</span></span><br><span class="line"><span class="string">        - y_val: A numpy array of shape (N_val,) giving validation labels.</span></span><br><span class="line"><span class="string">        - learning_rate: Scalar giving learning rate for optimization.</span></span><br><span class="line"><span class="string">        - learning_rate_decay: Scalar giving factor used to decay the learning rate</span></span><br><span class="line"><span class="string">          after each epoch.</span></span><br><span class="line"><span class="string">        - reg: Scalar giving regularization strength.</span></span><br><span class="line"><span class="string">        - num_iters: Number of steps to take when optimizing.</span></span><br><span class="line"><span class="string">        - batch_size: Number of training examples to use per step.</span></span><br><span class="line"><span class="string">        - verbose: boolean; if true print progress during optimization.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        num_train = X.shape[<span class="number">0</span>]</span><br><span class="line">        iterations_per_epoch = max(num_train / batch_size, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Use SGD to optimize the parameters in self.model</span></span><br><span class="line">        loss_history = []</span><br><span class="line">        train_acc_history = []</span><br><span class="line">        val_acc_history = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> it <span class="keyword">in</span> range(num_iters):</span><br><span class="line">            X_batch = <span class="keyword">None</span></span><br><span class="line">            y_batch = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">#########################################################################</span></span><br><span class="line">            <span class="comment"># <span class="doctag">TODO:</span> Create a random minibatch of training data and labels, storing  #</span></span><br><span class="line">            <span class="comment"># them in X_batch and y_batch respectively.                             #</span></span><br><span class="line">            <span class="comment">#########################################################################</span></span><br><span class="line">            <span class="comment"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span></span><br><span class="line"></span><br><span class="line">            idx = np.random.choice(num_train, batch_size, replace=<span class="keyword">True</span>)</span><br><span class="line">            X_batch = X[idx]</span><br><span class="line">            y_batch = y[idx]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># Compute loss and gradients using the current minibatch</span></span><br><span class="line">            loss, grads = self.loss(X_batch, y=y_batch, reg=reg)</span><br><span class="line">            loss_history.append(loss)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#########################################################################</span></span><br><span class="line">            <span class="comment"># <span class="doctag">TODO:</span> Use the gradients in the grads dictionary to update the         #</span></span><br><span class="line">            <span class="comment"># parameters of the network (stored in the dictionary self.params)      #</span></span><br><span class="line">            <span class="comment"># using stochastic gradient descent. You'll need to use the gradients   #</span></span><br><span class="line">            <span class="comment"># stored in the grads dictionary defined above.                         #</span></span><br><span class="line">            <span class="comment">#########################################################################</span></span><br><span class="line">            <span class="comment"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span></span><br><span class="line"></span><br><span class="line">            self.params[<span class="string">'W2'</span>] += - learning_rate * grads[<span class="string">'W2'</span>]</span><br><span class="line">            self.params[<span class="string">'b2'</span>] += - learning_rate * grads[<span class="string">'b2'</span>]</span><br><span class="line">            self.params[<span class="string">'W1'</span>] += - learning_rate * grads[<span class="string">'W1'</span>]</span><br><span class="line">            self.params[<span class="string">'b1'</span>] += - learning_rate * grads[<span class="string">'b1'</span>]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> verbose <span class="keyword">and</span> it % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">                print(<span class="string">'iteration %d / %d: loss %f'</span> % (it, num_iters, loss))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Every epoch, check train and val accuracy and decay learning rate.</span></span><br><span class="line">            <span class="keyword">if</span> it % iterations_per_epoch == <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># Check accuracy</span></span><br><span class="line">                train_acc = (self.predict(X_batch) == y_batch).mean()</span><br><span class="line">                val_acc = (self.predict(X_val) == y_val).mean()</span><br><span class="line">                train_acc_history.append(train_acc)</span><br><span class="line">                val_acc_history.append(val_acc)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># Decay learning rate</span></span><br><span class="line">                learning_rate *= learning_rate_decay</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="string">'loss_history'</span>: loss_history,</span><br><span class="line">          <span class="string">'train_acc_history'</span>: train_acc_history,</span><br><span class="line">          <span class="string">'val_acc_history'</span>: val_acc_history,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self, X)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Use the trained weights of this two-layer network to predict labels for</span></span><br><span class="line"><span class="string">        data points. For each data point we predict scores for each of the C</span></span><br><span class="line"><span class="string">        classes, and assign each data point to the class with the highest score.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Inputs:</span></span><br><span class="line"><span class="string">        - X: A numpy array of shape (N, D) giving N D-dimensional data points to</span></span><br><span class="line"><span class="string">          classify.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">        - y_pred: A numpy array of shape (N,) giving predicted labels for each of</span></span><br><span class="line"><span class="string">          the elements of X. For all i, y_pred[i] = c means that X[i] is predicted</span></span><br><span class="line"><span class="string">          to have class c, where 0 &lt;= c &lt; C.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        y_pred = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">###########################################################################</span></span><br><span class="line">        <span class="comment"># <span class="doctag">TODO:</span> Implement this function; it should be VERY simple!                #</span></span><br><span class="line">        <span class="comment">###########################################################################</span></span><br><span class="line">        <span class="comment"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span></span><br><span class="line"></span><br><span class="line">        h = np.maximum(<span class="number">0</span>, X.dot(self.params[<span class="string">'W1'</span>]) + self.params[<span class="string">'b1'</span>])</span><br><span class="line">        scores = h.dot(self.params[<span class="string">'W2'</span>]) + self.params[<span class="string">'b2'</span>]</span><br><span class="line">        y_pred = np.argmax(scores, axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> y_pred</span><br></pre></td></tr></table></figure>
<h2 id="Higher-Level-Representations-Image-Features"><a href="#Higher-Level-Representations-Image-Features" class="headerlink" title="Higher Level Representations: Image Features"></a>Higher Level Representations: Image Features</h2><p>An important way to gain intuition about how an algorithm works is to visualize the mistakes that it makes. In this visualization, we show examples of images that are misclassified by our current system. The first column shows images that our system labeled as “plane” but whose true label is something other than “plane”.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">examples_per_class = <span class="number">8</span></span><br><span class="line">classes = [<span class="string">'plane'</span>, <span class="string">'car'</span>, <span class="string">'bird'</span>, <span class="string">'cat'</span>, <span class="string">'deer'</span>, <span class="string">'dog'</span>, <span class="string">'frog'</span>, <span class="string">'horse'</span>, <span class="string">'ship'</span>, <span class="string">'truck'</span>]</span><br><span class="line"><span class="keyword">for</span> cls, cls_name <span class="keyword">in</span> enumerate(classes):</span><br><span class="line">    idxs = np.where((y_test != cls) &amp; (y_test_pred == cls))[<span class="number">0</span>]</span><br><span class="line">    idxs = np.random.choice(idxs, examples_per_class, replace=<span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">for</span> i, idx <span class="keyword">in</span> enumerate(idxs):</span><br><span class="line">        plt.subplot(examples_per_class, len(classes), i * len(classes) + cls + <span class="number">1</span>)</span><br><span class="line">        plt.imshow(X_test[idx].astype(<span class="string">'uint8'</span>))</span><br><span class="line">        plt.axis(<span class="string">'off'</span>)</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">            plt.title(cls_name)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> cs231n.classifiers.neural_net <span class="keyword">import</span> TwoLayerNet</span><br><span class="line"></span><br><span class="line">input_dim = X_train_feats.shape[<span class="number">1</span>]</span><br><span class="line">hidden_dim = <span class="number">500</span></span><br><span class="line">num_classes = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#net = TwoLayerNet(input_dim, hidden_dim, num_classes)</span></span><br><span class="line">best_net = <span class="keyword">None</span></span><br><span class="line">best_val = <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> Train a two-layer neural network on image features. You may want to    #</span></span><br><span class="line"><span class="comment"># cross-validate various parameters as in previous sections. Store your best   #</span></span><br><span class="line"><span class="comment"># model in the best_net variable.                                              #</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_random_hyperparams</span><span class="params">(lr_min, lr_max, reg_min, reg_max, h_min, h_max)</span>:</span></span><br><span class="line">    lr = <span class="number">10</span>**np.random.uniform(lr_min,lr_max)</span><br><span class="line">    reg = <span class="number">10</span>**np.random.uniform(reg_min,reg_max)</span><br><span class="line">    hidden = np.random.randint(h_min, h_max)</span><br><span class="line">    <span class="keyword">return</span> lr, reg, hidden</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use of random search for hyperparameter search</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">    lr, reg, hidden_dim = generate_random_hyperparams(<span class="number">-1</span>, <span class="number">0</span>, <span class="number">-7</span>, <span class="number">-4</span>, <span class="number">10</span>, <span class="number">500</span>)</span><br><span class="line">    <span class="comment"># Create a two-layer network</span></span><br><span class="line">    net = TwoLayerNet(input_dim, hidden_dim, num_classes)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Train the network</span></span><br><span class="line">    stats = net.train(X_train_feats, y_train, X_val_feats, y_val,</span><br><span class="line">                num_iters=<span class="number">3000</span>, batch_size=<span class="number">200</span>,</span><br><span class="line">                learning_rate=lr, learning_rate_decay=<span class="number">0.95</span>,</span><br><span class="line">                reg=reg, verbose=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Predict on the training set</span></span><br><span class="line">    train_accuracy = (net.predict(X_train_feats) == y_train).mean()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Predict on the validation set</span></span><br><span class="line">    val_accuracy = (net.predict(X_val_feats) == y_val).mean()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Save best values</span></span><br><span class="line">    <span class="keyword">if</span> val_accuracy &gt; best_val:</span><br><span class="line">        best_val = val_accuracy</span><br><span class="line">        best_net = net</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Print results</span></span><br><span class="line">    print(<span class="string">'lr %e reg %e hid %d  train accuracy: %f val accuracy: %f'</span> % (</span><br><span class="line">                lr, reg, hidden_dim, train_accuracy, val_accuracy))</span><br><span class="line">print(<span class="string">'best validation accuracy achieved: %f'</span> % best_val)</span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#                              END OF YOUR CODE                                #</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>cs231n</tag>
      </tags>
  </entry>
  <entry>
    <title>Machine Language</title>
    <url>/Machine-Language/2019/09/22/</url>
    <content><![CDATA[<h1 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h1><ul>
<li><a href="#table-of-contents">Table of Contents</a><ul>
<li><a href="#background">Background</a></li>
<li><a href="#machine-languages">Machine languages</a><ul>
<li><a href="#mnemonics">Mnemonics</a></li>
<li><a href="#commands">Commands</a></li>
<li><a href="#arithmetic-and-logic-operations">Arithmetic and Logic Operations</a></li>
<li><a href="#memory-access">Memory Access</a></li>
<li><a href="#compilation">Compilation</a></li>
</ul>
</li>
<li><a href="#the-hack-language-specification">The Hack language specification</a><ul>
<li><a href="#the-a-instruction">The A-Instruction</a></li>
<li><a href="#the-c-instruction">The C-Instruction</a><ul>
<li><a href="#the-computation-specificationcomp">The Computation Specification(comp)</a></li>
</ul>
</li>
<li><a href="#the-destination-specification">The Destination Specification</a></li>
<li><a href="#the-jump-specification">The Jump Specification</a></li>
<li><a href="#symbols">Symbols</a></li>
</ul>
</li>
<li><a href="#hack-programs-symbolic-and-binary">Hack programs: symbolic and binary</a></li>
<li><a href="#input--output">Input / Output</a><ul>
<li><a href="#screen">Screen</a></li>
<li><a href="#keyboard">Keyboard</a></li>
</ul>
</li>
<li><a href="#syntax-conventions-and-file-format">Syntax Conventions and File Format</a></li>
<li><a href="#hack-programming">Hack programming</a><ul>
<li><a href="#hack-assembly-language-overview">Hack assembly language (overview)</a><ul>
<li><a href="#registers-and-memory">Registers and memory</a></li>
<li><a href="#branching-and-labels">Branching and Labels</a></li>
<li><a href="#variables">Variables</a></li>
<li><a href="#iterative-processing">Iterative processing</a></li>
<li><a href="#pointers">Pointers</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p><strong>Memory</strong> The term memory refers loosely to the collection of hardware devices that store data and instructions in a computer. From the programmer’s standpoint, all memories have the same structure: A continuous array of cells of some fixed width, also called words or locations, each having a <strong>unique address</strong>.</p>
<p><strong>Processor</strong>  The processor, normally called Central Processing Unit or CPU, is a device capable of performing a fixed set of elementary operations</p>
<p><strong>Registers</strong>  Memory access is a relatively slow operation, requiring long instruction formats (an address may require 32 bits). For this reason, most processors are equipped with several registers, each capable of holding a single value. Located in the processor’s immediate proximity, the registers serve as a high-speed local memory, allowing the processor to manipulate data and instructions quickly. <strong>This setting enables the programmer to minimize the use of memory access commands, thus speeding up the program’s execution.</strong></p>
<p><img src="1.png" alt></p>
<h2 id="Machine-languages"><a href="#Machine-languages" class="headerlink" title="Machine languages"></a>Machine languages</h2><blockquote>
<p>A machine language can be viewed as an agreed-upon formalism, designed to manipulate a memory using a processor and a set of registers.</p>
</blockquote>
<h3 id="Mnemonics"><a href="#Mnemonics" class="headerlink" title="Mnemonics"></a>Mnemonics</h3><p>For example, the language designer can decide that the operation code 1010 will be represented by the mnemonic add and that the registers of the machine will be symbolically referred to using the symbols R0, R1, R2, and so forth. Using these conventions, one can specify machine language instructions either directly, as 1010001100011001, or symbolically, as, say, ADD R3,R1,R9.</p>
<p><img src="3.png" alt></p>
<h3 id="Commands"><a href="#Commands" class="headerlink" title="Commands"></a>Commands</h3><p>Yet irrespective of this variety, all machine lan- guages support similar sets of generic commands, which we now describe.</p>
<h3 id="Arithmetic-and-Logic-Operations"><a href="#Arithmetic-and-Logic-Operations" class="headerlink" title="Arithmetic and Logic Operations"></a>Arithmetic and Logic Operations</h3><figure class="highlight arm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ADD </span><span class="built_in">R2</span>,<span class="built_in">R1</span>,<span class="built_in">R3</span>    // <span class="built_in">R2</span>-&lt;--<span class="built_in">R1</span>+<span class="built_in">R3</span> where <span class="built_in">R1</span>,<span class="built_in">R2</span>,<span class="built_in">R3</span> are registers</span><br><span class="line"><span class="keyword">ADD </span><span class="built_in">R2</span>,<span class="built_in">R1</span>,foo   // <span class="built_in">R2</span>-&lt;--<span class="built_in">R1</span>+foo where foo stands for the </span><br><span class="line">                // value of the memory location pointed </span><br><span class="line">                // at <span class="keyword">by </span>the user-defined label foo.</span><br><span class="line"><span class="keyword">AND </span><span class="built_in">R1</span>,<span class="built_in">R1</span>,<span class="built_in">R2</span>    // <span class="built_in">R1</span>-&lt;--<span class="keyword">bit </span>wise <span class="keyword">And </span>of <span class="built_in">R1</span> <span class="keyword">and </span><span class="built_in">R2</span></span><br></pre></td></tr></table></figure>
<h3 id="Memory-Access"><a href="#Memory-Access" class="headerlink" title="Memory Access"></a>Memory Access</h3><p>Memory access commands fall into <strong>two categories</strong>. </p>
<ul>
<li>First, as we have just seen, arithmetic and logical commands are allowed to operate not only on registers, but also on selected memory locations. </li>
<li>Second, all computers feature explicit load and store commands, designed to move data between registers and memory.</li>
</ul>
<p>These memory access commands may use several types of <strong>addressing modes</strong> — ways of specifying the address of the required memory word.</p>
<ol>
<li><strong>Direct addressing</strong>  The most common way to address the memory is to express a specific address or use a symbol that refers to a specific address, as follows</li>
</ol>
<figure class="highlight arm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">LOAD</span> <span class="built_in">R1</span>,<span class="number">67</span>  // <span class="built_in">R1</span>-&lt;--Memory[<span class="number">67</span>]</span><br><span class="line">            // Or, assuming that <span class="keyword">bar </span>refers to memory <span class="keyword">address </span><span class="number">67</span>:</span><br><span class="line"><span class="symbol">LOAD</span> <span class="built_in">R1</span>,<span class="keyword">bar </span>// <span class="built_in">R1</span>&lt;--Memory[<span class="number">67</span>]</span><br></pre></td></tr></table></figure>
<ol>
<li><p><strong>Immediate addressing</strong>  This form of addressing is used to load constants— namely, load values that appear in the instruction code</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LOADI R1,67 // R1&lt;--67</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Indirect addressing</strong>  In this addressing mode the address of the required memory location is not hard-coded into the instruction; instead, the instruction specifies a memory location that holds the required address.</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// Translation of x=foo[j] or x=*(foo+j):</span><br><span class="line">ADD R1, foo, j // R1&lt;--foo+j</span><br><span class="line">LOAD* R2,R1    // R2-&lt;--Memory[R1] </span><br><span class="line">STR R2,x       // x-&lt;--R2</span><br></pre></td></tr></table></figure>
<ol>
<li><strong>Flow of Control</strong>  While programs normally execute in a linear fashion, one com- mand after the other, they also include occasional branches to locations other than the next command. Branching serves several purposes including <strong>repetition</strong> (jump backward to the beginning of a loop), <strong>conditional execution</strong> (if a Boolean condition is false, jump forward to the location after the ‘‘if-then’’ clause), and <strong>subroutine</strong> calling ( jump to the first command of some other code segment).</li>
</ol>
<p><strong>Unconditional jump</strong> commands like JMP beginWhile specify only the address of the target location<br><strong>Conditional jump</strong> commands like JNG R1,endWhile must also specify a Boolean condition, expressed in some way.</p>
<figure class="highlight arm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">load</span> <span class="built_in">R1</span>,<span class="number">0</span></span><br><span class="line"><span class="keyword">add </span><span class="number">1</span>, <span class="built_in">R1</span></span><br><span class="line"><span class="symbol">...</span></span><br><span class="line">// do something with <span class="built_in">R1</span> value ...</span><br><span class="line"><span class="symbol">jmp</span> <span class="number">102</span> // goto <span class="number">102</span></span><br></pre></td></tr></table></figure>
<h3 id="Compilation"><a href="#Compilation" class="headerlink" title="Compilation"></a>Compilation</h3><p><img src="2.png" alt>                  </p>
<h2 id="The-Hack-language-specification"><a href="#The-Hack-language-specification" class="headerlink" title="The Hack language specification"></a>The Hack language specification</h2><p><img src="4.png" alt></p>
<p><strong>Memory Address Spaces</strong> The Hack computer is a von Neumann platform. It is a 16-bit machine, consisting of a CPU, two separate memory modules serving as <strong>instruction memory</strong> and <strong>data memory</strong>, and two memory-mapped I/O devices: a screen and a keyboard.The CPU can only execute programs that reside in the instruction memory.</p>
<p><strong>Register</strong></p>
<ol>
<li>The Hack programmer is aware of two 16-bit registers called <strong>D</strong> and <strong>A</strong>. D is used solely to store data values, While A can be interpreted either as a data value, or as an address in the data memory.</li>
<li>Since Hack instructions are 16-bit wide, and since addresses are specified using 15 bits, it is impossible to pack both an operation code and an address in one instruction. Thus, the syntax of the Hack language mandates that memory access instructions operate on an implicit memory location labeled <strong>M</strong>.</li>
<li><p>the A register can be used to facilitate direct access to the data memory: the convention is that <strong>M</strong> always refers to the memory word whose address is the current value of the A register</p>
<blockquote>
<p>eg: D = Memory[516] 􏰁- 1, we have to use one instruction to set the A register to 516, and a subsequent instruction to specify D=M-1.</p>
</blockquote>
</li>
<li><p>facilitate direct access to the instruction memory: Hack jump instructions do not specify a particular address. Instead, the convention is that any jump operation always effects a jump to the instruction located in the memory word addressed by A.</p>
</li>
<li><strong>@value</strong>, where value is either a number or a symbol representing a number. This command simply stores the specified value in the A register. </li>
</ol>
<h3 id="The-A-Instruction"><a href="#The-A-Instruction" class="headerlink" title="The A-Instruction"></a>The A-Instruction</h3><p>The A-instruction is used to set the A register to a 15-bit values<br><strong>@valu</strong><br><img src="5.png" alt></p>
<p>The A-instruction is used for three different purposes.</p>
<ul>
<li>it provides the only way to <strong>enter a constant</strong> into the computer under program control.</li>
<li>it sets the stage for a subsequent C-instruction designed to manipulate a certain <strong>data memory location</strong>, by first setting A to the address of that location. </li>
<li>it sets the stage for a subsequent C-instruction that <strong>specifies a jump</strong>, by first loading the address of the jump destination to the A register</li>
</ul>
<h3 id="The-C-Instruction"><a href="#The-C-Instruction" class="headerlink" title="The C-Instruction"></a>The C-Instruction</h3><p>The instruction code is a specification that answers three questions: </p>
<ul>
<li>what to computer</li>
<li>where to store the computed value</li>
<li>what to do next</li>
</ul>
<p>The overall semantics of the symbolic instruction dest=comp;jump is as follows. The <strong>comp</strong> field instructs the ALU what to compute. The <strong>dest</strong> field instructs where to store the computed value (ALU output).</p>
<p><img src="6.png" alt></p>
<h4 id="The-Computation-Specification-comp"><a href="#The-Computation-Specification-comp" class="headerlink" title="The Computation Specification(comp)"></a>The Computation Specification(comp)</h4><p>The Hack ALU is designed to compute a fixed set of functions on the D, A, and M registers (where M stands for Memory[A]). </p>
<p>Recall that the format of the C-instruction is 111accccccdd djjj. Suppose we want to have the ALU compute D-1, the current value of the D register minus 1. According to figure blow, this can be done by issuing the instruction 1110001110000000 (the 7-bit operation code is in bold). To compute the value of D|M, we issue the instruction 1111 010101000000. To compute the constant 􏰁1, we issue the instruction 1110111010000000, and so on.</p>
<p><img src="7.png" alt></p>
<h3 id="The-Destination-Specification"><a href="#The-Destination-Specification" class="headerlink" title="The Destination Specification"></a>The Destination Specification</h3><p>The value computed by the comp part of the C- instruction can be stored in several destinations, as specified by the instruction’s 3-bit dest part.</p>
<p>Recall that the format of the C-instruction is 111a cccc ccdd djjj. Suppose we want the computer to increment the value of Memory[7] by 1 and to also store the result in the D register. According to figures 4.3 and 4.4, this can be accomplished by the following instructions:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0000 0000 0000 0111    // @7</span><br><span class="line">1111 1101 1101 1000    // MD=M+1</span><br></pre></td></tr></table></figure>
<p><img src="8.png" alt></p>
<h3 id="The-Jump-Specification"><a href="#The-Jump-Specification" class="headerlink" title="The Jump Specification"></a>The Jump Specification</h3><p>The jump field of the C-instruction tells the computer what to do next.</p>
<figure class="highlight arm"><table><tr><td class="code"><pre><span class="line">//  <span class="meta">if</span> Memory[<span class="number">3</span>]<span class="number">=5</span> then goto <span class="number">100</span> <span class="meta">else</span> goto <span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="comment">@3</span></span><br><span class="line">D<span class="symbol">=M</span>    // D<span class="symbol">=Memory</span>[<span class="number">3</span>]</span><br><span class="line"><span class="comment">@5</span></span><br><span class="line">D<span class="symbol">=D</span>-A  // D<span class="symbol">=D</span>-<span class="number">5</span></span><br><span class="line"><span class="comment">@100</span></span><br><span class="line">D<span class="comment">;JEQ  // If D=0 goto 100</span></span><br><span class="line"><span class="comment">@200</span></span><br><span class="line"><span class="number">0</span><span class="comment">;JMP  // Goto 200</span></span><br></pre></td></tr></table></figure>
<p><img src="9.png" alt></p>
<h3 id="Symbols"><a href="#Symbols" class="headerlink" title="Symbols"></a>Symbols</h3><p>Assembly commands can refer to memory locations (addresses) using either constants or symbols. Symbols are introduced into assembly programs in the following three ways:</p>
<p><strong>Predefined symbols</strong>: A special subset of RAM addresses can be referred to by any assembly program using the following predefined symbols.</p>
<ul>
<li>_Virtual registers_: To simplify assembly programming, the symbols R0 to R15 are predefined to refer to RAM addresses 0 to 15, respectively.</li>
<li>_Predefined pointers_: The symbols SP, LCL, ARG, THIS, and THAT are predefined to refer to RAM addresses 0 to 4, respectively. Note that each of these memory locations has two labels. For example, address 2 can be referred to using either R2 or ARG. This syntactic convention will come to play in the implementation of the virtual machine, discussed in chapters 7 and 8.</li>
<li>_I/O pointers_: The symbols SCREEN and KBD are predefined to refer to RAM addresses 16384 (0x4000) and 24576 (0x6000), respectively, which are the base addresses of the screen and keyboard memory maps. The use of these I/O devices is explained later.</li>
</ul>
<p><strong>Label symbols</strong>: These user-defined symbols, which serve to label destinations of goto commands, are declared by the pseudo-command ‘‘(Xxx)’’. This directive defines the symbol Xxx to refer to the instruction memory location holding the next command in the program. A label can be defined only once and can be used any- where in the assembly program, even before the line in which it is defined.</p>
<p><strong>Variable symbols</strong>: Any user-defined symbol Xxx appearing in an assembly program that is not predefined and is not defined elsewhere using the ‘‘(Xxx)’’ command is treated as a variable, and is assigned a unique memory address by the assembler, starting at RAM address 16 (0x0010).</p>
<h2 id="Hack-programs-symbolic-and-binary"><a href="#Hack-programs-symbolic-and-binary" class="headerlink" title="Hack programs: symbolic and binary"></a>Hack programs: symbolic and binary</h2><p><a href="13.png"></a></p>
<h2 id="Input-Output"><a href="#Input-Output" class="headerlink" title="Input / Output"></a>Input / Output</h2><p>The Hack platform can be connected to two peripheral devices: a screen and a keyboard. Both devices interact with the computer platform through memory maps. <strong>This means that drawing pixels on the screen is achieved by writing binary values into a memory segment associated with the screen</strong>. Likewise, listening to the key- board is done by reading a memory location associated with the keyboard. The physical I/O devices and their memory maps are synchronized via continuous refresh loops.</p>
<ul>
<li>A designated memory area, dedicated to manage a display unit</li>
<li>The physical display is continuously refreshed from the memory map, many times per second</li>
<li>Output is effected by writing code that manipulates the screen memory map.</li>
</ul>
<p><img src="10.png" alt></p>
<h3 id="Screen"><a href="#Screen" class="headerlink" title="Screen"></a>Screen</h3><p>The Hack computer includes a black-and-white screen organized as 256 rows of 512 pixels per row. The screen’s contents are represented by an 8K memory map that starts at RAM address 16384 (0x4000). Each row in the physical screen, starting at the screen’s top left corner, is represented in the RAM by 32 consecutive 16-bit words. Thus the pixel at row r from the top and column c from the left is mapped on the c%16 bit (counting from LSB to MSB) of the word located at RAM[16384 + r *􏰀 32 + c/16]. To write or read a pixel of the physical screen, one reads or writes the corresponding bit in the RAM-resident memory map (1 1⁄4 black, 0 1⁄4 white). Example:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// Draw a single black dot at the screen&apos;s top left corner:</span><br><span class="line">@SCREEN  // Set the A register to point to the memory</span><br><span class="line">         // word that is mapped to the 16 left-most</span><br><span class="line">         // pixels of the top row of the screen.</span><br><span class="line">M=1      // Blacken the left-most pixel.</span><br></pre></td></tr></table></figure>
<p><img src="11.png" alt></p>
<p><strong>Task</strong>: draw a filled rectangle at the upper left corner of the screen, 16 pixels wide and RAM[0] pixels long</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// Pseudo code</span><br><span class="line">// for (i=0; i&lt;n; i++) &#123;</span><br><span class="line">//     draw 16 black pixels at the</span><br><span class="line">//     beginning of row i</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">addr = SCREEN n = RAM[0] i=0</span><br><span class="line">LOOP:</span><br><span class="line">if i &gt; n goto END</span><br><span class="line">RAM[addr] = -1 // 1111111111111111 // advances to the next row</span><br><span class="line">addr = addr + 32</span><br><span class="line">i=i+1</span><br><span class="line">goto LOOP</span><br><span class="line">END:</span><br><span class="line">goto END</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@SCREEN</span><br><span class="line">D=A</span><br><span class="line">@addr</span><br><span class="line">M=D  // addr = 16384</span><br><span class="line">    // (screen’s base address)</span><br><span class="line">@0</span><br><span class="line">D=M</span><br><span class="line">@n</span><br><span class="line">M=D  // n = RAM[0]</span><br><span class="line"></span><br><span class="line">@i</span><br><span class="line">M=0 //i=0</span><br><span class="line"></span><br><span class="line">(LOOP) </span><br><span class="line">    @i</span><br><span class="line">    D=M</span><br><span class="line">    @n</span><br><span class="line">    D=D-M</span><br><span class="line">    @END</span><br><span class="line">    D;JGT  // if i&gt;n goto END</span><br><span class="line"></span><br><span class="line">    @addr</span><br><span class="line">    A=M</span><br><span class="line">    M=-1   // RAM[addr]=1111111111111111</span><br><span class="line"></span><br><span class="line">    @i</span><br><span class="line">    M=M+1 //i=i+1</span><br><span class="line">    @32</span><br><span class="line">    D=A</span><br><span class="line">    @addr</span><br><span class="line">    M=D+M // addr = addr + 32 @LOOP</span><br><span class="line">    0;JMP // goto LOOP</span><br><span class="line"></span><br><span class="line">(END)</span><br><span class="line">    @END   // program’s end</span><br><span class="line">    0;JMP</span><br></pre></td></tr></table></figure>
<h3 id="Keyboard"><a href="#Keyboard" class="headerlink" title="Keyboard"></a>Keyboard</h3><p>The Hack computer interfaces with the physical keyboard via a single-word memory map located in RAM address 24576 (0x6000). Whenever a key is pressed on the physical keyboard, its 16-bit ASCII code appears in RAM[24576]. When no key is pressed, the code 0 appears in this location. In addition to the usual ASCII codes, the Hack keyboard recognizes the keys shown in figure 4.6.</p>
<p><img src="12.png" alt></p>
<h2 id="Syntax-Conventions-and-File-Format"><a href="#Syntax-Conventions-and-File-Format" class="headerlink" title="Syntax Conventions and File Format"></a>Syntax Conventions and File Format</h2><p><strong>Binary Code Files</strong>  A binary code file is composed of text lines. Each line is a sequence of sixteen “0” and “1” ASCII characters, coding a single machine language instruction. Taken together, all the lines in the file represent a machine language program. The contract is such that when a machine language program is loaded into the computer’s instruction memory, the binary code represented by the file’s nth line is stored in address n of the instruction memory (the count of both program lines and memory addresses starts at 0). By convention, machine language programs are stored in text files with a “hack” extension, for example, Prog.hack.</p>
<p><strong>Assembly Language Files</strong> By convention, assembly language programs are stored in text files with an “asm” extension, for example, Prog.asm. An assembly languages file is composed of text lines, each representing either an instruction or a symbol declaration:</p>
<ul>
<li>Instruction: an A-instruction or a C-instruction.</li>
<li>(Symbol): This pseudo-command causes the assembler to assign the label Symbol to the memory location in which the next command of the program will be stored. It is called “pseudo-command” since it generates no machine code.</li>
</ul>
<p><strong>Constants and Symbols</strong> Constants must be non-negative and are always written in decimal notation. A user-defined symbol can be any sequence of letters, digits, underscore (_), dot (.), dollar sign ($), and colon (:) that does not begin with a digit.</p>
<p><strong>Comments Text</strong> beginning with two slashes (//) and ending at the end of the line is considered a comment and is ignored.</p>
<p><strong>White Space</strong> Space characters are ignored. Empty lines are ignored.</p>
<p><strong>Case Conventions</strong> All the assembly mnemonics must be written in uppercase. The rest (user-defined labels and variable names) is case sensitive. The convention is to use uppercase for labels and lowercase for variable names.</p>
<h2 id="Hack-programming"><a href="#Hack-programming" class="headerlink" title="Hack programming"></a>Hack programming</h2><h3 id="Hack-assembly-language-overview"><a href="#Hack-assembly-language-overview" class="headerlink" title="Hack assembly language (overview)"></a>Hack assembly language (overview)</h3><p><img src="16.png" alt><br><img src="14.png" alt></p>
<h4 id="Registers-and-memory"><a href="#Registers-and-memory" class="headerlink" title="Registers and memory"></a>Registers and memory</h4><ul>
<li>D: data register</li>
<li>A: address / data register</li>
<li>M: the currently selected memory register: M = RAM[A]</li>
</ul>
<p><img src="15.png" alt></p>
<p>Typical operations:</p>
<figure class="highlight arm"><table><tr><td class="code"><pre><span class="line">// D = <span class="number">10</span></span><br><span class="line"><span class="comment">@10</span></span><br><span class="line">D<span class="symbol">=A</span></span><br><span class="line"></span><br><span class="line">// D++</span><br><span class="line">D<span class="symbol">=D</span>+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">// D<span class="symbol">=RAM</span>[<span class="number">17</span>]</span><br><span class="line"><span class="comment">@17</span></span><br><span class="line">D<span class="symbol">=M</span></span><br><span class="line"></span><br><span class="line">//RAM[<span class="number">17</span>]<span class="symbol">=D</span></span><br><span class="line"><span class="comment">@17</span></span><br><span class="line">M<span class="symbol">=D</span></span><br><span class="line"></span><br><span class="line">// RAM[<span class="number">17</span>]<span class="number">=10</span></span><br><span class="line"><span class="comment">@10</span></span><br><span class="line">D<span class="symbol">=A</span></span><br><span class="line"><span class="comment">@17</span></span><br><span class="line">M<span class="symbol">=D</span></span><br><span class="line"></span><br><span class="line">// RAM[<span class="number">5</span>] = RAM[<span class="number">3</span>]</span><br><span class="line"><span class="comment">@3 </span></span><br><span class="line">D<span class="symbol">=M</span> </span><br><span class="line"><span class="comment">@5</span></span><br><span class="line">M<span class="symbol">=D</span></span><br></pre></td></tr></table></figure>
<p><strong>Program example</strong>: add two numbers<br><figure class="highlight arm"><table><tr><td class="code"><pre><span class="line">// Program: <span class="keyword">Add2.asm</span></span><br><span class="line"><span class="keyword">// </span>Computes: RAM[<span class="number">2</span>] = RAM[<span class="number">0</span>] + RAM[<span class="number">1</span>]</span><br><span class="line">// Usage: put values in RAM[<span class="number">0</span>], RAM[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">@0</span></span><br><span class="line">D<span class="symbol">=A</span></span><br><span class="line"></span><br><span class="line"><span class="comment">@1</span></span><br><span class="line">D<span class="symbol">=D</span>+M</span><br><span class="line"></span><br><span class="line"><span class="comment">@2</span></span><br><span class="line">M<span class="symbol">=D</span></span><br></pre></td></tr></table></figure></p>
<h4 id="Branching-and-Labels"><a href="#Branching-and-Labels" class="headerlink" title="Branching and Labels"></a>Branching and Labels</h4><p><img src="17.png" alt></p>
<h4 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h4><p><img src="18.png" alt></p>
<h4 id="Iterative-processing"><a href="#Iterative-processing" class="headerlink" title="Iterative processing"></a>Iterative processing</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// pseudo code</span><br><span class="line">// Computes RAM[1] = 1+2+ ... +RAM[0]</span><br><span class="line">n = R0 </span><br><span class="line">i=1 </span><br><span class="line">sum = 0</span><br><span class="line"></span><br><span class="line">LOOP:</span><br><span class="line">    if i &gt; n goto STOP </span><br><span class="line">    sum = sum + i </span><br><span class="line">    i=i+1</span><br><span class="line">    goto LOOP</span><br><span class="line">STOP:</span><br><span class="line">    R1 = sum</span><br></pre></td></tr></table></figure>
<figure class="highlight arm"><table><tr><td class="code"><pre><span class="line">// Computes RAM[<span class="number">1</span>] = <span class="number">1</span>+<span class="number">2</span>+ ... +n</span><br><span class="line">// Usage: put a number (n) in RAM[<span class="number">0</span>]</span><br><span class="line">      <span class="comment">@R0</span></span><br><span class="line">      D<span class="symbol">=M</span></span><br><span class="line">      <span class="comment">@n</span></span><br><span class="line">      M<span class="symbol">=D</span>   // n = <span class="built_in">R0</span></span><br><span class="line">      <span class="comment">@i</span></span><br><span class="line">      M<span class="number">=1</span>   // i = <span class="number">1</span></span><br><span class="line">      <span class="comment">@sum</span></span><br><span class="line">      M<span class="number">=0</span>   // sum = <span class="number">0</span></span><br><span class="line">(LOOP) <span class="comment">@i</span></span><br><span class="line">      D<span class="symbol">=M</span></span><br><span class="line">      <span class="comment">@n</span></span><br><span class="line">      D<span class="symbol">=D</span>-M</span><br><span class="line">      <span class="comment">@STOP</span></span><br><span class="line">      D<span class="comment">;JGT  // if i &gt; n goto STOP</span></span><br><span class="line">      <span class="comment">@sum</span></span><br><span class="line">      D<span class="symbol">=M</span></span><br><span class="line">      <span class="comment">@i</span></span><br><span class="line">      D<span class="symbol">=D</span>+M</span><br><span class="line">      <span class="comment">@sum</span></span><br><span class="line">      M<span class="symbol">=D</span>    // sum = sum + i</span><br><span class="line">      <span class="comment">@i</span></span><br><span class="line">      M<span class="symbol">=M</span>+<span class="number">1</span>  // i = i + <span class="number">1</span></span><br><span class="line">      <span class="comment">@LOOP</span></span><br><span class="line">      <span class="number">0</span><span class="comment">;JMP</span></span><br><span class="line">(STOP) </span><br><span class="line">      <span class="comment">@sum</span></span><br><span class="line">      D<span class="symbol">=M</span></span><br><span class="line">      <span class="comment">@R1</span></span><br><span class="line">      M<span class="symbol">=D</span>    // RAM[<span class="number">1</span>] = sum</span><br><span class="line">(<span class="meta">END</span>) </span><br><span class="line">      <span class="comment">@END</span></span><br><span class="line">      <span class="number">0</span><span class="comment">;JMP</span></span><br></pre></td></tr></table></figure>
<h4 id="Pointers"><a href="#Pointers" class="headerlink" title="Pointers"></a>Pointers</h4><p><img src="19.png" alt></p>
]]></content>
      <categories>
        <category>Hardware Architecture</category>
      </categories>
      <tags>
        <tag>Nand2Tetris</tag>
      </tags>
  </entry>
  <entry>
    <title>Principal Component Analysis</title>
    <url>/Principal-Component-Analysis/2019/09/20/</url>
    <content><![CDATA[<h2 id="What-is-PCA"><a href="#What-is-PCA" class="headerlink" title="What is PCA?"></a>What is PCA?</h2><p>High dimensional data, for example images, often have the property that it lies on a low dimensional subspace, and that many dimensions are highly correlated. Here’s an illustration in two dimensions. We can think of dimensionality reduction as a way of compressing data with some loss, similar to jpg or mp3. Principal Component Analysis (PCA) is one of the most fundamental dimensionality reduction techniques that are used in machine learning. </p>
<h2 id="Pre-knowledge"><a href="#Pre-knowledge" class="headerlink" title="Pre-knowledge"></a>Pre-knowledge</h2><h3 id="Orthogonal-Projections"><a href="#Orthogonal-Projections" class="headerlink" title="Orthogonal Projections"></a>Orthogonal Projections</h3><p>Recall that for projection of a vector $\boldsymbol x$ onto a 1-dimensional subspace $U$ with basis vector $\boldsymbol b$ we have:</p>
<script type="math/tex; mode=display">{\pi_U}(\boldsymbol x) = \frac{\boldsymbol b\boldsymbol b^T}{\lbrace\lVert\boldsymbol  b \rVert\rbrace^2}\boldsymbol x</script><script type="math/tex; mode=display">\lambda = \frac{\langle \boldsymbol b,\boldsymbol x\rangle} {\lbrace\boldsymbol b\rbrace^{2}}</script><ul>
<li>$\frac{\boldsymbol b\boldsymbol b^T}{\lbrace\lVert\boldsymbol  b \rVert^2}$ is the projection matrix. </li>
<li>$\lambda$ is he coordinate of our projection with respect to the basis b<br>The procedure we get this equation is as follows:</li>
</ul>
<p>\begin{equation}<br>\begin{aligned}<br>&amp; \langle \boldsymbol b, {\pi_U}(\boldsymbol x) - \boldsymbol x \rangle = 0 \\<br>&amp; \langle \boldsymbol b, {\pi_U}(\boldsymbol x) \rangle - \langle \boldsymbol b,\boldsymbol x \rangle = 0\\<br>&amp; \langle \boldsymbol b, \lambda \boldsymbol b\rangle - \langle \boldsymbol b, \boldsymbol x\rangle = 0\\<br>&amp; \lambda ||\boldsymbol b||^{2} - \langle \boldsymbol b, \boldsymbol x\rangle = 0 \\<br>&amp; \lambda = \frac{\langle \boldsymbol b,\boldsymbol x\rangle} {||\boldsymbol b||^{2}}<br>\end{aligned}<br>\end{equation}</p>
<p><img src="FC4110D01E2417B654EEF38783A59462.png" alt="1.png"><br><img src="281DB10DBBA2A911809814DDBC34A624.png" alt="2.png"></p>
<p>And for the general projection onto an M-dimensional subspace $U$ with basis vectors $\boldsymbol b_1,\dotsc, \boldsymbol b_M$ we have</p>
<script type="math/tex; mode=display">{\pi_U}(\boldsymbol x) = \boldsymbol B(\boldsymbol B^T\boldsymbol B)^{-1}\boldsymbol B^T\boldsymbol x</script><script type="math/tex; mode=display">\lambda = (\boldsymbol B^{T}\boldsymbol B )^{-1}B^{T} \boldsymbol x</script><p>where </p>
<script type="math/tex; mode=display">\boldsymbol B = [\boldsymbol b_1,...,\boldsymbol b_M]</script><p><img src="1259CBBBA592F9731BB2753A218942FD.png" alt="4.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">projection_matrix1D</span><span class="params">(b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (b @ b.T) / np.dot(b.T,b)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">project1D</span><span class="params">(projection_matrix,vector)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> projection_matrix @ vector</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">projection_matrix3D</span><span class="params">(b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> b @ np.linalg.inv(b.T @ b) @ b.T</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_lambda_3D</span><span class="params">(b,vector)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> np.linalg.inv(b.T @ b) @ b.T @ vector</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">project3D</span><span class="params">(projection_matrix,vector)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> projection_matrix @ vector</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_rank</span><span class="params">(matrix)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> np.linalg.matrix_rank(matrix)</span><br></pre></td></tr></table></figure>
<h3 id="Orthogonal-complement"><a href="#Orthogonal-complement" class="headerlink" title="Orthogonal complement"></a>Orthogonal complement</h3><p>If we look at an n-dimensional vector space V and K-dimensional  subspace $W\subset V$. then the orthogonal complement $W^{\perp}$ is an (n-k) dimensional subspace of V and contains all vectors in V that are orthogonal to every vector in W. </p>
<h3 id="Lagrange-multipliers"><a href="#Lagrange-multipliers" class="headerlink" title="Lagrange multipliers"></a>Lagrange multipliers</h3><ol>
<li>We can solve a constrained optimization problem of the form $ \min \limits_{x}f(x), s.t.g(x) = 0 $ where g(x) is an equality constraint</li>
<li>The constraints can be absorbed into a single objective function, the Lagrangian, which combines the original loss function and the constraints as $L(x,\lambda) = f(x) - \lambda g(x)$. $\lambda$ is called a Lagrange multiplier.</li>
<li>We solve the constrained optimization problem by computing the partial derivatives $\frac{\partial L}{\partial x}$ and $\frac{\partial L}{\partial \lambda}$, setting them to 0 and solving for $\lambda$ and $x$</li>
</ol>
<h2 id="Dive-into-PCA"><a href="#Dive-into-PCA" class="headerlink" title="Dive into PCA"></a>Dive into PCA</h2><p>If we have a data set which contains <strong>N</strong> samples and <strong>D</strong> features, $X = {x_i,\cdots,x_N}, x \in \mathbb{R}^{D}$, Our objective is to find a low dimensional representation of the data that is as similar to X as possible. Before getting start, let’s briefly review three important concepts. </p>
<ol>
<li>The first one is that every vector in $\mathbb{R}^{D}$ can be represented as a linear combination of the basis vectors. In the following we will assume that the $b_i$ are an orthonormal basis of $\mathbb{R}^{D}$<script type="math/tex; mode=display">x_n \sum_{i=1}^{D}\beta_{in}b_i</script></li>
<li>We can interpret $\beta_{i_n}$ to be the orthogonal projection of $x_n$ onto the one dimensional subspace spanned by the it’s basis vector<script type="math/tex; mode=display">\beta_{in} = x_n^{T}b_i</script></li>
<li>We define B to be the matrix that consists of these orthonormal basis vectors.<script type="math/tex; mode=display">B = (b_1,\cdots,b_m)</script></li>
</ol>
<p>Then the projection of X onto the subspace is:</p>
<script type="math/tex; mode=display">\widetilde{x} = BB^{T}x</script><p>So, we took our general way of writing any vector in $\mathbb{R}^{D}$ which comes from property one, and we split the sum in property one into two sums. One is living in an M-dimensional subspace and the other one is living in a (D-M) dimensional subspace which is an orthogonal complement to this particular subspace.</p>
<script type="math/tex; mode=display">\widetilde{x} = \sum_{i=1}^{M}\beta_{in}b_i + \sum_{M+1}^{D}\beta_{in}b_i</script><p>$b1,\cdots,b_{M}$ span the principal subspace</p>
<p>Assuming we have data $X_1,\cdots,X_n$, we want to find parameters $beta i_n$ and orthonormal basis vectors $b_i$, such that the average squared reconstruction era is minimised. And we can write the average squared reconstruction error as follows.</p>
<script type="math/tex; mode=display">H = \frac{1}{N} \sum_{n=1}^{N}||x_n - \widetilde{x_n}||^{2}</script><p>The parameters are the $\beta_{i_n}$ and the $b_i$. We set the partial derivatives of J with respect to these parameters to zero and solve for the optimal parameters</p>
<script type="math/tex; mode=display">\frac{\partial{J}}{\partial\lbrace\beta_{in},b_i\rbrace} = \frac{\partial J}{\partial \widetilde{x_n}} \frac{\partial \widetilde{x_n}}{\partial\lbrace\beta_{in},b_i\rbrace}</script><script type="math/tex; mode=display">\frac{\partial J}{\partial \widetilde{x_n}} = -\frac{2}{N}(x_n - \widetilde{x_n})^{T}</script><p>We can prove that the optimal coordinates of $\widetilde{x_n}$ with respect to our basis are the orthogonal projections of the coordinates of our original data point onto the ith basis vector that spans our principal subspace.</p>
<p><img src="F94CA8E5F54491CE435380F760D081FA.png" alt="3.png"></p>
<script type="math/tex; mode=display">\widetilde{x_n} = \sum_{j=1}^{M}\beta_{jn}b{i} = (\sum_{j=1}^{M}b_i b_j^{T})x_n</script><script type="math/tex; mode=display">x_n = (\sum_{j=1}^{M}b_i b_j^{T})x_n + (\sum_{j=M+1}^{D}b_jb_j^{T})x_n</script><script type="math/tex; mode=display">J = \frac{1}{N}\sum_{n=1}^{N}||x_n -\widetilde{x_n} ||^2 = \sum_{j=M+1}^{D}b_j^{T}(\frac{1}{N}\sum_{n=1}^{N}x_nx_n^{T})b_j = \sum_{j=M+1}^{D}b_j^{T}Sb_j = trace((\sum_{j=M+1}^{D}b_i b_j^{T})S)</script><p><strong>This projection matrix takes our data covariance matrix and project it onto the orthogonal compliment of the principal subspace. That means, we can reformulate the loss function as the variance of the data projected onto the subspace that we ignore. Therefore, minimising this loss is equivalent to minimising the variance of the data that lies in the subspace that is a orthogonal to the principal subspace. In other words, we are interested in retaining as much variance after projection as possibl.</strong></p>
<p>Using the results from earlier, We can write our loss function as the $J = \sum_{j=M+1}^{D}b_j^{T}Sb_j$. Where S is the data covariance matrix.</p>
<script type="math/tex; mode=display">J = \sum_{j=M+1}^{D}b_j^{T}Sb_j</script><script type="math/tex; mode=display">J = b_2^{T}Sb_2, b_2^{T}b_2 = 1</script><script type="math/tex; mode=display">L = b_2^{T}sb_{2} + \lambda(1 - b_2{T}b_2)</script><script type="math/tex; mode=display">\frac{\partial L}{\partial \lambda} = 1 - b_2^{T}b_2 = 0</script><script type="math/tex; mode=display">\frac{\partial L}{\partial b_2} = 2b_2^{T}S - 2\lambda b_2^{T} = 0</script><script type="math/tex; mode=display">SB_2 = \lambda b_2</script><script type="math/tex; mode=display">J = b_2^{T}Sb_2 = b_2^{T}b_2\lambda = \lambda</script><script type="math/tex; mode=display">J = \sum_{j=M+1}^D\lambda j</script><p><strong>We end up with $\lambda$ as our loss function. Therefore the average squared reconstruction error is minimised if $\lambda$ is the smallest eigen value of the data covariance matrix. And that means we need to choose $B_2$ as the corresponding eigen vector and that one will span the subspace that we will ignore. $B_1$ which spans the principal subspace is then the eigen vector that belongs to the largest eigen value of the data covariance matrix.</strong></p>
<h2 id="Steps-of-PCA"><a href="#Steps-of-PCA" class="headerlink" title="Steps of PCA"></a>Steps of PCA</h2><ol>
<li>We subtract the mean from the data and send it at zero to avoid numerical problems. </li>
<li>We divide by the standard deviation to make the data unit-free. </li>
<li>We Compute the eigenvalues and eigen vectors of the data covariance matrix. </li>
<li>And finally, we can project any data point onto the principal subspace that is spanned by the eigenvectors that belong to the largest eigenvalues.</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize</span><span class="params">(X)</span>:</span></span><br><span class="line">    <span class="string">"""Normalize the given dataset X</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        X: ndarray, dataset</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        (Xbar, mean, std): tuple of ndarray, Xbar is the normalized dataset</span></span><br><span class="line"><span class="string">        with mean 0 and standard deviation 1; mean and std are the </span></span><br><span class="line"><span class="string">        mean and standard deviation respectively.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Note:</span></span><br><span class="line"><span class="string">        You will encounter dimensions where the standard deviation is</span></span><br><span class="line"><span class="string">        zero, for those when you do normalization the normalized data</span></span><br><span class="line"><span class="string">        will be NaN. Handle this by setting using `std = 1` for those </span></span><br><span class="line"><span class="string">        dimensions when doing normalization.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    mu = np.zeros(X.shape[<span class="number">1</span>]) <span class="comment"># &lt;-- EDIT THIS, compute the mean of X</span></span><br><span class="line">    std = np.std(X, axis=<span class="number">0</span>)</span><br><span class="line">    std_filled = std.copy()</span><br><span class="line">    std_filled[std==<span class="number">0</span>] = <span class="number">1.</span></span><br><span class="line">    Xbar = X                  <span class="comment"># &lt;-- EDIT THIS, compute the normalized data Xbar</span></span><br><span class="line">    <span class="keyword">return</span> Xbar, mu, std</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eig</span><span class="params">(S)</span>:</span></span><br><span class="line">    <span class="string">"""Compute the eigenvalues and corresponding eigenvectors </span></span><br><span class="line"><span class="string">        for the covariance matrix S.</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        S: ndarray, covariance matrix</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        (eigvals, eigvecs): ndarray, the eigenvalues and eigenvectors</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Note:</span></span><br><span class="line"><span class="string">        the eigenvals and eigenvecs should be sorted in descending</span></span><br><span class="line"><span class="string">        order of the eigen values</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    val,vec = np.linalg.eig(S)</span><br><span class="line">    idx = np.argsort(-val)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (val[idx], vec[:,idx]) <span class="comment"># EDIT THIS</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">projection_matrix</span><span class="params">(B)</span>:</span></span><br><span class="line">    <span class="string">"""Compute the projection matrix onto the space spanned by `B`</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        B: ndarray of dimension (D, M), the basis for the subspace</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        P: the projection matrix</span></span><br><span class="line"><span class="string">    """</span>     </span><br><span class="line">    P = B @ np.linalg.inv(B.T @ B) @ B.T <span class="comment"># EDIT THIS</span></span><br><span class="line">    <span class="keyword">return</span> P</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">PCA</span><span class="params">(X, num_components)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        X: ndarray of size (N, D), where D is the dimension of the data,</span></span><br><span class="line"><span class="string">           and N is the number of datapoints</span></span><br><span class="line"><span class="string">        num_components: the number of principal components to use.</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        X_reconstruct: ndarray of the reconstruction</span></span><br><span class="line"><span class="string">        of X from the first `num_components` principal components.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># Compute the data covariance matrix S</span></span><br><span class="line">    S = np.cov(X, rowvar=<span class="keyword">False</span>, bias=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Next find eigenvalues and corresponding eigenvectors for S by implementing eig().</span></span><br><span class="line">    eig_vals, eig_vecs = eig(S)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Reconstruct the images from the lowerdimensional representation</span></span><br><span class="line">    <span class="comment"># To do this, we first need to find the projection_matrix (which you implemented earlier)</span></span><br><span class="line">    <span class="comment"># which projects our input data onto the vector space spanned by the eigenvectors</span></span><br><span class="line">    P = projection_matrix(eig_vecs[:,:num_components]) <span class="comment"># projection matrix</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Then for each data point x_i in the dataset X </span></span><br><span class="line">    <span class="comment">#   we can project the original x_i onto the eigenbasis.</span></span><br><span class="line">    X_reconstruct = (P @ X.T).T</span><br><span class="line">                          </span><br><span class="line">    <span class="keyword">return</span> X_reconstruct</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Machine Learning</category>
      </categories>
  </entry>
  <entry>
    <title>Orthogonal Projections</title>
    <url>/Orthogonal-Projections/2019/09/20/</url>
    <content><![CDATA[<h1 id="Orthogonal-Projections"><a href="#Orthogonal-Projections" class="headerlink" title="Orthogonal Projections"></a>Orthogonal Projections</h1><p>We will write functions that will implement orthogonal projections.</p>
<h2 id="Learning-objectives"><a href="#Learning-objectives" class="headerlink" title="Learning objectives"></a>Learning objectives</h2><ol>
<li>Write code that projects data onto lower-dimensional subspaces.</li>
<li>Understand the real world applications of projections.</li>
</ol>
<p>As always, we will first import the packages that we need for this assignment.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># PACKAGE: DO NOT EDIT THIS CELL</span></span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line">matplotlib.use(<span class="string">'Agg'</span>)</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.style.use(<span class="string">'fivethirtyeight'</span>)</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure>
<p>Next, we will retrieve the Olivetti faces dataset.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> fetch_olivetti_faces, fetch_lfw_people</span><br><span class="line"><span class="keyword">from</span> ipywidgets <span class="keyword">import</span> interact</span><br><span class="line">%matplotlib inline</span><br><span class="line">image_shape = (<span class="number">64</span>, <span class="number">64</span>)</span><br><span class="line"><span class="comment"># Load faces data</span></span><br><span class="line">dataset = fetch_olivetti_faces(<span class="string">'./'</span>)</span><br><span class="line">faces = dataset.data</span><br></pre></td></tr></table></figure>
<h3 id="Advice-for-testing-numerical-algorithms"><a href="#Advice-for-testing-numerical-algorithms" class="headerlink" title="Advice for testing numerical algorithms"></a>Advice for testing numerical algorithms</h3><p>Before we begin this week’s assignment, there are some advice that we would like to give for writing functions that work with numerical data. They are useful for finding bugs in your implementation.</p>
<p>Testing machine learning algorithms (or numerical algorithms in general)<br>is sometimes really hard as it depends on the dataset<br>to produce an answer, and you will never be able to test your algorithm on all the datasets<br>we have in the world. Nevertheless, we have some tips for you to help you identify bugs in<br>your implementations.</p>
<h4 id="1-Test-on-small-dataset"><a href="#1-Test-on-small-dataset" class="headerlink" title="1. Test on small dataset"></a>1. Test on small dataset</h4><p>Test your algorithms on small dataset: datasets of size 1 or 2 sometimes will suffice. This<br>is useful because you can (if necessary) compute the answers by hand and compare them with<br>the answers produced by the computer program you wrote. In fact, these small datasets can even have special numbers,<br>which will allow you to compute the answers by hand easily.</p>
<h4 id="2-Find-invariants"><a href="#2-Find-invariants" class="headerlink" title="2. Find invariants"></a>2. Find invariants</h4><p>Invariants refer to properties of your algorithm and functions that are maintained regardless<br>of the input. We will highlight this point later in this notebook where you will see functions,<br>which will check invariants for some of the answers you produce.</p>
<p>Invariants you may want to look for:</p>
<ol>
<li>Does your algorithm always produce a positive/negative answer, or a positive definite matrix?</li>
<li>If the algorithm is iterative, do the intermediate results increase/decrease monotonically?</li>
<li>Does your solution relate with your input in some interesting way, e.g. orthogonality? </li>
</ol>
<p>Finding invariants is hard, and sometimes there simply isn’t any invariant. However, DO take advantage of them if you can find them. They are the most powerful checks when you have them.</p>
<p>We can find some invariants for projections. In the cell below, we have written two functions which check for invariants of projections. See the docstrings which explain what each of them does. You should use these functions to test your code.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy.testing <span class="keyword">as</span> np_test</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_property_projection_matrix</span><span class="params">(P)</span>:</span></span><br><span class="line">    <span class="string">"""Test if the projection matrix satisfies certain properties.</span></span><br><span class="line"><span class="string">    In particular, we should have P @ P = P, and P = P^T</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    np_test.assert_almost_equal(P, P @ P)</span><br><span class="line">    np_test.assert_almost_equal(P, P.T)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_property_projection</span><span class="params">(x, p)</span>:</span></span><br><span class="line">    <span class="string">"""Test orthogonality of x and its projection p."""</span></span><br><span class="line">    np_test.assert_almost_equal(p.T @ (p-x), <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<h2 id="1-Orthogonal-Projections"><a href="#1-Orthogonal-Projections" class="headerlink" title="1. Orthogonal Projections"></a>1. Orthogonal Projections</h2><p>Recall that for projection of a vector $\boldsymbol x$ onto a 1-dimensional subspace $U$ with basis vector $\boldsymbol b$ we have</p>
<script type="math/tex; mode=display">{\pi_U}(\boldsymbol x) = \frac{\boldsymbol b\boldsymbol b^T}{ {\lVert\boldsymbol  b \rVert}^2}\boldsymbol x</script><p>And for the general projection onto an M-dimensional subspace $U$ with basis vectors $\boldsymbol b_1,\dotsc, \boldsymbol b_M$ we have</p>
<script type="math/tex; mode=display">{\pi_U}(\boldsymbol x) = \boldsymbol B(\boldsymbol B^T\boldsymbol B)^{-1}\boldsymbol B^T\boldsymbol x</script><p>where </p>
<p>Your task is to implement orthogonal projections. We can split this into two steps</p>
<ol>
<li>Find the projection matrix $\boldsymbol P$ that projects any $\boldsymbol x$ onto $U$.</li>
<li>The projected vector $\pi_U(\boldsymbol x)$ of $\boldsymbol x$ can then be written as $\pi_U(\boldsymbol x) = \boldsymbol P\boldsymbol x$.</li>
</ol>
<p>To perform step 1, you need to complete the function <code>projection_matrix_1d</code> and <code>projection_matrix_general</code>. To perform step 2, complete <code>project_1d</code> and <code>project_general</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: DO NOT EDIT THIS LINE</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Projection 1d</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ===YOU SHOULD EDIT THIS FUNCTION===</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">projection_matrix_1d</span><span class="params">(b)</span>:</span></span><br><span class="line">    <span class="string">"""Compute the projection matrix onto the space spanned by `b`</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        b: ndarray of dimension (D, 1), the basis for the subspace</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        P: the projection matrix</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    D, _ = b.shape</span><br><span class="line">    <span class="comment">### Edit the code below to compute a projection matrix of shape (D,D)</span></span><br><span class="line">    P = (b @ b.T) / np.dot(b.T,b)</span><br><span class="line">    <span class="keyword">return</span> P</span><br><span class="line">    <span class="comment">###</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ===YOU SHOULD EDIT THIS FUNCTION===</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">project_1d</span><span class="params">(x, b)</span>:</span></span><br><span class="line">    <span class="string">"""Compute the projection matrix onto the space spanned by `b`</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        x: the vector to be projected</span></span><br><span class="line"><span class="string">        b: ndarray of dimension (D, 1), the basis for the subspace</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        y: ndarray of shape (D, 1) projection of x in space spanned by b</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    p = projection_matrix_1d(b) @ x<span class="comment"># EDIT THIS</span></span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"><span class="comment"># Projection onto a general (higher-dimensional) subspace</span></span><br><span class="line"><span class="comment"># ===YOU SHOULD EDIT THIS FUNCTION===</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">projection_matrix_general</span><span class="params">(B)</span>:</span></span><br><span class="line">    <span class="string">"""Compute the projection matrix onto the space spanned by the columns of `B`</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        B: ndarray of dimension (D, M), the basis for the subspace</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        P: the projection matrix</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    P = B @ np.linalg.inv(B.T @ B) @ B.T</span><br><span class="line">    <span class="keyword">return</span> P</span><br><span class="line"></span><br><span class="line"><span class="comment"># ===YOU SHOULD EDIT THIS FUNCTION===</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">project_general</span><span class="params">(x, B)</span>:</span></span><br><span class="line">    <span class="string">"""Compute the projection matrix onto the space spanned by the columns of `B`</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        x: ndarray of dimension (D, 1), the vector to be projected</span></span><br><span class="line"><span class="string">        B: ndarray of dimension (D, M), the basis for the subspace</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        p: projection of x onto the subspac spanned by the columns of B; size (D, 1)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    p = projection_matrix_general(B) @ x</span><br><span class="line">    <span class="keyword">return</span> p</span><br></pre></td></tr></table></figure>
<p>We have included some unittest for you to test your implementation.</p>
<script type="math/tex; mode=display">\boldsymbol B = [\boldsymbol b_1,...,\boldsymbol b_M]</script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Orthogonal projection in 2d</span></span><br><span class="line"><span class="comment"># define basis vector for subspace</span></span><br><span class="line">b = np.array([<span class="number">2</span>,<span class="number">1</span>]).reshape(<span class="number">-1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment"># point to be projected later</span></span><br><span class="line">x = np.array([<span class="number">1</span>,<span class="number">2</span>]).reshape(<span class="number">-1</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>Remember our discussion earlier about invariants? In the next cell, we will check that these invariants hold for the functions that you have implemented earlier.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Test 1D</span></span><br><span class="line"><span class="comment"># Test that we computed the correct projection matrix</span></span><br><span class="line">np_test.assert_almost_equal(projection_matrix_1d(np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>]).reshape(<span class="number">-1</span>,<span class="number">1</span>)), </span><br><span class="line">                            np.array([[<span class="number">1</span>,  <span class="number">2</span>,  <span class="number">2</span>],</span><br><span class="line">                                      [<span class="number">2</span>,  <span class="number">4</span>,  <span class="number">4</span>],</span><br><span class="line">                                      [<span class="number">2</span>,  <span class="number">4</span>,  <span class="number">4</span>]]) / <span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Test that we project x on to the 1d subspace correctly</span></span><br><span class="line">np_test.assert_almost_equal(project_1d(np.ones((<span class="number">3</span>,<span class="number">1</span>)),</span><br><span class="line">                                       np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>]).reshape(<span class="number">-1</span>,<span class="number">1</span>)),</span><br><span class="line">                            np.array([<span class="number">5</span>, <span class="number">10</span>, <span class="number">10</span>]).reshape(<span class="number">-1</span>,<span class="number">1</span>) / <span class="number">9</span>)</span><br><span class="line"></span><br><span class="line">B = np.array([[<span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">              [<span class="number">1</span>, <span class="number">2</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Test 2D</span></span><br><span class="line"><span class="comment"># Test that we computed the correct projection matrix</span></span><br><span class="line">np_test.assert_almost_equal(projection_matrix_general(B), </span><br><span class="line">                            np.array([[<span class="number">5</span>,  <span class="number">2</span>, <span class="number">-1</span>],</span><br><span class="line">                                      [<span class="number">2</span>,  <span class="number">2</span>,  <span class="number">2</span>],</span><br><span class="line">                                      [<span class="number">-1</span>, <span class="number">2</span>,  <span class="number">5</span>]]) / <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Test that we project x on to the 2d subspace correctly</span></span><br><span class="line">np_test.assert_almost_equal(project_general(np.array([<span class="number">6</span>, <span class="number">0</span>, <span class="number">0</span>]).reshape(<span class="number">-1</span>,<span class="number">1</span>), B), </span><br><span class="line">                            np.array([<span class="number">5</span>, <span class="number">2</span>, <span class="number">-1</span>]).reshape(<span class="number">-1</span>,<span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<p>It is always good practice to create your own test cases. Create some test<br>cases of your own below!</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Write your own test cases here, use random inputs, utilize the invariants we have!</span></span><br></pre></td></tr></table></figure>
<h2 id="2-Eigenfaces-optional"><a href="#2-Eigenfaces-optional" class="headerlink" title="2. Eigenfaces  (optional)"></a>2. Eigenfaces  (optional)</h2><p>Next, we will take a look at what happens if we project some dataset consisting of human faces onto some basis we call<br>the “eigenfaces”. You do not need to know what <code>eigenfaces</code> are for now but you will know what they are towards the end of the course!</p>
<p>As always, let’s import the packages that we need.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> fetch_olivetti_faces, fetch_lfw_people</span><br><span class="line"><span class="keyword">from</span> ipywidgets <span class="keyword">import</span> interact</span><br><span class="line">%matplotlib inline</span><br><span class="line">image_shape = (<span class="number">64</span>, <span class="number">64</span>)</span><br><span class="line"><span class="comment"># Load faces data</span></span><br><span class="line">dataset = fetch_olivetti_faces(<span class="string">'./'</span>)</span><br><span class="line">faces = dataset.data</span><br></pre></td></tr></table></figure>
<p>Let’s visualize some faces in the dataset.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">10</span>))</span><br><span class="line">plt.imshow(np.hstack(faces[:<span class="number">5</span>].reshape(<span class="number">5</span>,<span class="number">64</span>,<span class="number">64</span>)), cmap=<span class="string">'gray'</span>);</span><br></pre></td></tr></table></figure>
<p><img src="output_22_0.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># for numerical reasons we normalize the dataset</span></span><br><span class="line">mean = faces.mean(axis=<span class="number">0</span>)</span><br><span class="line">std = faces.std(axis=<span class="number">0</span>)</span><br><span class="line">faces_normalized = (faces - mean) / std</span><br></pre></td></tr></table></figure>
<p>The data for the basis has been saved in a file named <code>eigenfaces.npy</code>, first we load it into the variable B.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">B = np.load(<span class="string">'eigenfaces.npy'</span>)[:<span class="number">50</span>] <span class="comment"># we use the first 50 basis vectors --- you should play around with this.</span></span><br><span class="line">print(<span class="string">"the eigenfaces have shape &#123;&#125;"</span>.format(B.shape))</span><br></pre></td></tr></table></figure>
<p>the eigenfaces have shape (50, 64, 64)</p>
<p>Each instance in $\boldsymbol B$ is a ‘64x64’ image, an “eigenface”, which we determined using an algorithm called Principal Component Analysis. Let’s visualize<br>a few of those “eigenfaces”.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">10</span>))</span><br><span class="line">plt.imshow(np.hstack(B[:<span class="number">5</span>].reshape(<span class="number">-1</span>, <span class="number">64</span>, <span class="number">64</span>)), cmap=<span class="string">'gray'</span>);</span><br></pre></td></tr></table></figure>
<p><img src="output_27_0.png" alt="png"></p>
<p>Take a look at what happens if we project our faces onto the basis $\boldsymbol B$ spanned by these 50 “eigenfaces”. In order to do this, we need to reshape $\boldsymbol B$ from above, which is of size (50, 64, 64), into the same shape as the matrix representing the basis as we have done earlier, which is of size (4096, 50). Here 4096 is the dimensionality of the data and 50 is the number of data points. </p>
<p>Then we can reuse the functions we implemented earlier to compute the projection matrix and the projection. Complete the code below to visualize the reconstructed faces that lie on the subspace spanned by the “eigenfaces”.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># EDIT THIS FUNCTION</span></span><br><span class="line"><span class="meta">@interact(i=(0, 10))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_face_face_reconstruction</span><span class="params">(i)</span>:</span></span><br><span class="line">    original_face = faces_normalized[i].reshape(<span class="number">64</span>, <span class="number">64</span>)</span><br><span class="line">    <span class="comment"># reshape the data we loaded in variable `B` </span></span><br><span class="line">    <span class="comment"># so that we have a matrix representing the basis.</span></span><br><span class="line">    B_basis = np.random.normal(size=(<span class="number">4096</span>,<span class="number">50</span>)) <span class="comment"># &lt;-- EDIT THIS</span></span><br><span class="line">    face_reconstruction = project_general(faces_normalized[i], B_basis).reshape(<span class="number">64</span>, <span class="number">64</span>)</span><br><span class="line">    plt.figure()</span><br><span class="line">    plt.imshow(np.hstack([original_face, face_reconstruction]), cmap=<span class="string">'gray'</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>
<p>What would happen to the reconstruction as we increase the dimension of our basis? </p>
<p>Modify the code above to visualize it.</p>
<h2 id="3-Least-squares-regression-optional"><a href="#3-Least-squares-regression-optional" class="headerlink" title="3. Least squares regression (optional)"></a>3. Least squares regression (optional)</h2><p>Consider the case where we have a linear model for predicting housing prices. We are predicting the housing prices based on features in the<br>housing dataset. If we denote the features as $\boldsymbol x_0, \dotsc, \boldsymbol x_n$ and collect them into a vector $\boldsymbol {x}$, and the price of the houses as $y$. Assuming that we have<br>a prediction model in the way such that $\hat{y}_i =  f(\boldsymbol {x}_i) = \boldsymbol \theta^T\boldsymbol {x}_{i}$.</p>
<p>If we collect the dataset into a $(N,D)$ data matrix $\boldsymbol X$, we can write down our model like this:</p>
<script type="math/tex; mode=display">
\begin{bmatrix} 
\boldsymbol{x}_1^T \\
\vdots \\ 
\boldsymbol{x}_N^T 
\end{bmatrix} \boldsymbol{\theta} = \begin{bmatrix} 
y_{1} \\
\vdots \\ 
y_{2} 
\end{bmatrix},</script><p>i.e.,</p>
<script type="math/tex; mode=display">
\boldsymbol X\boldsymbol{\theta} = \boldsymbol{y}.</script><p>Note that the data points are the <em>rows</em> of the data matrix, i.e., every column is a dimension of the data. </p>
<p>Our goal is to find the best $\boldsymbol\theta$ such that we minimize the following objective (least square).</p>
<script type="math/tex; mode=display">
\begin{eqnarray} 
& \sum^n_{i=1}{\lVert \bar{y_i} - y_i \rVert^2} \\
&= \sum^n_{i=1}{\lVert \boldsymbol \theta^T\boldsymbol{x}_{i} - y_{i} \rVert^2} \\
&= (\boldsymbol X\boldsymbol {\theta} - \boldsymbol y)^T(\boldsymbol X\boldsymbol {\theta} - \boldsymbol y).
\end{eqnarray}</script><p>If we set the gradient of the above objective to $\boldsymbol  0$, we have</p>
<script type="math/tex; mode=display">
\begin{eqnarray} 
\nabla_\theta(\boldsymbol X\boldsymbol {\theta} - \boldsymbol y)^T(\boldsymbol X\boldsymbol {\theta} - \boldsymbol y) &=& \boldsymbol 0 \\
\nabla_\theta(\boldsymbol {\theta}^T\boldsymbol X^T - \boldsymbol y^T)(\boldsymbol X\boldsymbol {\theta} - \boldsymbol y) &=& \boldsymbol 0 \\
\nabla_\theta(\boldsymbol {\theta}^T\boldsymbol X^T\boldsymbol X\boldsymbol {\theta} - \boldsymbol y^T\boldsymbol X\boldsymbol \theta - \boldsymbol \theta^T\boldsymbol X^T\boldsymbol y + \boldsymbol y^T\boldsymbol y ) &=& \boldsymbol 0 \\
2\boldsymbol X^T\boldsymbol X\theta - 2\boldsymbol X^T\boldsymbol y &=& \boldsymbol 0 \\
\boldsymbol X^T\boldsymbol X\boldsymbol \theta        &=& \boldsymbol X^T\boldsymbol y.
\end{eqnarray}</script><p>The solution that gives zero gradient solves (which we call the maximum likelihood estimator) the following equation:</p>
<script type="math/tex; mode=display">\boldsymbol X^T\boldsymbol X\boldsymbol \theta = \boldsymbol X^T\boldsymbol y.</script><p>_This is exactly the same as the normal equation we have for projections_.</p>
<p>This means that if we solve for $\boldsymbol X^T\boldsymbol X\boldsymbol \theta = \boldsymbol X^T\boldsymbol y.$ we would find the best $\boldsymbol \theta = (\boldsymbol X^T\boldsymbol X)^{-1}\boldsymbol X^T\boldsymbol y$, i.e. the $\boldsymbol \theta$ which minimizes our objective.</p>
<p>Let’s put things into perspective. Consider that we want to predict the true coefficient $\boldsymbol \theta$<br>of the line $\boldsymbol y = \boldsymbol \theta^T \boldsymbol x$ given only $\boldsymbol X$ and $\boldsymbol y$. We do not know the true value of $\boldsymbol \theta$.</p>
<p>Note: In this particular example, $\boldsymbol \theta$ is a number. Still, we can represent it as an $\mathbb{R}^1$ vector.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">10</span>, num=<span class="number">50</span>)</span><br><span class="line">theta = <span class="number">2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span>    </span><br><span class="line">    random = np.random.RandomState(<span class="number">42</span>) <span class="comment"># we use the same random seed so we get deterministic output</span></span><br><span class="line">    <span class="keyword">return</span> theta * x + random.normal(scale=<span class="number">1.0</span>, size=len(x)) <span class="comment"># our observations are corrupted by some noise, so that we do not get (x,y) on a line</span></span><br><span class="line"></span><br><span class="line">y = f(x)</span><br><span class="line">plt.scatter(x, y);</span><br><span class="line">plt.xlabel(<span class="string">'x'</span>);</span><br><span class="line">plt.ylabel(<span class="string">'y'</span>);</span><br></pre></td></tr></table></figure>
<p><img src="output_34_0.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X = x.reshape(<span class="number">-1</span>,<span class="number">1</span>) <span class="comment"># size N x 1</span></span><br><span class="line">Y = y.reshape(<span class="number">-1</span>,<span class="number">1</span>) <span class="comment"># size N x 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># maximum likelihood estimator</span></span><br><span class="line">theta_hat = np.linalg.solve(X.T @ X, X.T @ Y)</span><br></pre></td></tr></table></figure>
<p>We can show how our $\hat{\boldsymbol  \theta}$ fits the line.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig, ax = plt.subplots()</span><br><span class="line">ax.scatter(x, y);</span><br><span class="line">xx = [<span class="number">0</span>, <span class="number">10</span>]</span><br><span class="line">yy = [<span class="number">0</span>, <span class="number">10</span> * theta_hat[<span class="number">0</span>,<span class="number">0</span>]]</span><br><span class="line">ax.plot(xx, yy, <span class="string">'red'</span>, alpha=<span class="number">.5</span>);</span><br><span class="line">ax.set(xlabel=<span class="string">'x'</span>, ylabel=<span class="string">'y'</span>);</span><br><span class="line">print(<span class="string">"theta = %f"</span> % theta)</span><br><span class="line">print(<span class="string">"theta_hat = %f"</span> % theta_hat)</span><br></pre></td></tr></table></figure>
<pre><code>theta = 2.000000
theta_hat = 1.951585
</code></pre><p><img src="output_37_1.png" alt="png"></p>
<p>What would happend to $\lVert \hat{\boldsymbol  \theta} - \boldsymbol \theta \rVert$ if we increase the number of datapoints?</p>
<p>Make your hypothesis, and write a small program to confirm it!</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N = np.arange(<span class="number">2</span>, <span class="number">10000</span>, step=<span class="number">10</span>)</span><br><span class="line"><span class="comment"># Your code comes here, which calculates \hat&#123;\theta&#125; for different dataset sizes.</span></span><br><span class="line"></span><br><span class="line">theta_error = np.zeros(N.shape)</span><br><span class="line"></span><br><span class="line">theta_error = np.ones(N.shape) <span class="comment"># &lt;-- EDIT THIS</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.plot(theta_error)</span><br><span class="line">plt.xlabel(<span class="string">"dataset size"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"parameter error"</span>);</span><br></pre></td></tr></table></figure>
<p><img src="output_39_0.png" alt="png"></p>
]]></content>
      <categories>
        <category>Math</category>
        <category>Linear Algebra</category>
      </categories>
  </entry>
  <entry>
    <title>Vector and Space</title>
    <url>/Vector-and-Space/2019/09/19/</url>
    <content><![CDATA[<p>为了理解描述向量，我们构建了向量的一系列性质，通过性质讨论物体可以避免“xx是什么”这种哲学问题。我们构建了一个满足向量加法和数量乘法的理想空间，叫线性空间。为了给线性空间编址，于是有了基底。基底的存在可以避免描述向量需要用具体数值这种只存在于表面的特征，从而理解了向量的本质是有向线段。我们需要知道有向线段的长度，也就是模长，于是定义了内积。内积本质上是一个正定对称双线性的映射。给定了内积的线性空间被称为内积空间。为了选出与内积相吻合基底，我们得到标准正交基的概念，于是建立了有向线段与坐标的关系，得到内积的表达式为$x^{T}y$，也就是点积。如果使用非标准正交基作为基底，则内积的表达式为$x^{T}Gy$. 如果G 根据地点的变化而变化，那就不再是线性空间了，那是相对论的世界。</p>
<h2 id="向量与向量的性质"><a href="#向量与向量的性质" class="headerlink" title="向量与向量的性质"></a>向量与向量的性质</h2><p>简单地理解，向量就是排成一列的数。有了这个”数据结构”之后，我们可以定义向量的加法和数量乘法。</p>
<script type="math/tex; mode=display">(cc^{\prime})x = c(c^{\prime}x)</script><script type="math/tex; mode=display">1x = x</script><script type="math/tex; mode=display">x+y = y+x</script><script type="math/tex; mode=display">(x+y)+z = x+(y+z)</script><script type="math/tex; mode=display">x+o=x</script><script type="math/tex; mode=display">x+(-x) = o</script><script type="math/tex; mode=display">c(x+y) = cx+cy</script><script type="math/tex; mode=display">(c+c^{\prime})x = cx + c^{\prime}x</script><p>这里性质的列举，实际上代表了向量这个概念的本质。关于向量的讨论全部基于上面这些性质，即使抛弃向量的定义，仅仅是依靠上面给出的性质，我们也可以完成对向量的讨论。这样做的好处，是避免了 “xx 是什么”这样具有哲学意味的讨论。</p>
<h2 id="线性空间（向量空间）"><a href="#线性空间（向量空间）" class="headerlink" title="线性空间（向量空间）"></a>线性空间（向量空间）</h2><ul>
<li>二维向量可以在方格纸上画出来，比如 $a = (3,5)^{T}$位于横坐标 3，纵坐标 5 的位置。像这样强调向量的位置时，我们成为<strong>位置向量</strong>。</li>
<li>同样，二维向量也可以用有向线段来表示。起点为原点 O，终点是该向量对应的位置。如果用有向线段，我们就可以用图形来理解向量的加法和数量乘法。</li>
</ul>
<p>上面的讨论都是建立在平面已有刻度的前提下。其实，去掉刻度，得到一个干净的平面。虽然这个世界里只有一个孤零零的原点 O，但是向量的加法与数量乘法依旧是可行的。<strong>对于附加了加法和数量乘法运算的世界，我们称之为线性空间（或向量空间）。</strong></p>
<p>线性空间是我们生活的显示空间的一个缩影，在这个抽象世界里，除了零向量 $\vec O$，其他有向线段无论放在哪里都是同等的。在这个抽象的世界里，我们能做的只有加法和数量乘法。 需要注意的是，这个世界中，没有定义长度，也没有定义角度。</p>
<h3 id="基底"><a href="#基底" class="headerlink" title="基底"></a>基底</h3><p>确定基底，就是在给线性空间编址。</p>
<script type="math/tex; mode=display">\vec{e_1}, \vec{e_2}</script><p>这个世界里的其他向量，都可以写成基向量的线性组合形式（表示方法唯一），比如：</p>
<script type="math/tex; mode=display">\vec{v} = \vec{3e_1} + \vec{2e_2}</script><p>注意，此时我们用具体的数值来描述v，不过是众多基底中的某一个表现出来的坐标而已。如果基底发生变化，v的分量v1,v2也在发生变化。对于这种只存在于表象的性质，不是我们关注的重点，我们关注的是本质。出于这样的考虑，我们建立了一套不依赖与基底选取方式的概念，便是有向线段$\vec{v}$</p>
<p><strong>可以理解为，同样的有向线段，在不同的基底下有不同的坐标</strong></p>
<h2 id="维度与坐标"><a href="#维度与坐标" class="headerlink" title="维度与坐标"></a>维度与坐标</h2><script type="math/tex; mode=display">空间的维度 = 基向量的个数 = 坐标的分量数</script><p>在不指定基底的情况下，讨论坐标是没有意义的。</p>
<h2 id="内积空间"><a href="#内积空间" class="headerlink" title="内积空间"></a>内积空间</h2><h2 id="欧几里得空间"><a href="#欧几里得空间" class="headerlink" title="欧几里得空间"></a>欧几里得空间</h2><p>简单地说，定义了内积的线性空间就是内积空间（欧几里得空间）。</p>
<p>欧几里得空间就是在对现实空间的规则抽象和推广（从n&lt;=3推广到有限n维空间）。欧几里得空间主要是定义了<strong>内积</strong>、<strong>距离</strong>、<strong>角</strong></p>
<blockquote>
<p>设V是实数域R上的线性空间（或称为向量空间），若V上定义着正定对称双线性型g（g称为内积），则V称为（对于g的）内积空间或欧几里德空间（有时仅当V是有限维时，才称为欧几里德空间）。</p>
</blockquote>
<h3 id="内积"><a href="#内积" class="headerlink" title="内积"></a>内积</h3><p>具体来说，g是V上的二元实值函数，满足如下关系：</p>
<ul>
<li>g(x,y)=g(y,x)； # 对称性</li>
<li>g(x+y,z)=g(x,z)+g(y,z)；  # 双线性</li>
<li>g(kx,y)=kg(x,y)；   # 双线性</li>
<li>g(x,x)&gt;=0，而且g(x,x)=0当且仅当x=0时成立。 # 正定</li>
</ul>
<p>这里x,y,z是V中任意向量，k是任意实数。</p>
<p>内积的几何概念是两个向量的长度与它们夹角余弦的积，所以，内积可以表示成：</p>
<script type="math/tex; mode=display">\vec{a}\cdot \vec{b} = |\vec{a}| |\vec{b}\cos \theta|</script><h3 id="标准正交基"><a href="#标准正交基" class="headerlink" title="标准正交基"></a>标准正交基</h3><p><strong>与内积相吻合的基底。</strong> </p>
<p>如果基底（$\vec{e_1},\cdots,\vec{e_n}$）中的基向量满足:  </p>
<ul>
<li>模长为1  </li>
<li>互相正交</li>
</ul>
<p>即:</p>
<script type="math/tex; mode=display">
\vec{e_i}\cdot \vec{e_j} = 
\begin{equation}
\left\{ 
\begin{array}{lr}
    & 1 \quad (i = j) \\
    & 0 \quad (i \neq j)
\end{array}
\right.
\end{equation}</script><p>则$x = (x_1,\cdots,x_m)^{T}$ 与 $y = (y_1,\cdots,y_n)^{T}$ 的内积为</p>
<script type="math/tex; mode=display">x\cdot y = x_1y_1+\cdots+x_ny_n = x^{T}y</script><p><img src="1.jpg" alt></p>
<p>对于非标准正交基底，内积的模长满足什么样的表示式？</p>
<p><img src="2.jpg" alt></p>
<p>此时矩阵 G 是对称正定双线性的。</p>
<h2 id="正定矩阵"><a href="#正定矩阵" class="headerlink" title="正定矩阵"></a>正定矩阵</h2><p>A是n阶方阵，如果对任何非零向量x，都有$x^{T}Ax&gt;0$，其中$x^T$表示x的转置，就称A是正定矩阵。</p>
<h2 id="点积"><a href="#点积" class="headerlink" title="点积"></a>点积</h2><script type="math/tex; mode=display"><x,y> = x^{T}Iy</script><p>如果A不是单位阵I，则定义了一个与点积不同的内积。因此，点积是内积的一种特殊情况。</p>
<script type="math/tex; mode=display"><x,y> = x^{T}Ay</script><p>任何对称正定双线性的矩阵 A 都定义了一种内积。</p>
<blockquote>
<p>reference from  《程序员的数学：线性代数》</p>
</blockquote>
]]></content>
      <categories>
        <category>Math</category>
        <category>Linear Algebra</category>
      </categories>
  </entry>
  <entry>
    <title>AVL Tree</title>
    <url>/AVL-Tree/2019/09/15/</url>
    <content><![CDATA[<h2 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h2><p>二叉平衡树，又称AVL树。它或者是一棵空树，或者是具有下列性质的树：</p>
<ol>
<li>具备二叉排序树的所有性质；</li>
<li>左子树和右子树深度差的绝对值不超过1；</li>
<li>左子树和右子树都是二叉平衡树。</li>
</ol>
<p>将二叉树上结点的左子树深度减去右子树深度的值称为<strong>平衡因子BF</strong>，那么平衡二叉树上的所有结点的平衡因子只可能是-1、0和1。只要二叉树上有一个结点的平衡因子的绝对值大于1，则该二叉树就是不平衡的。 </p>
<p>平衡二叉树的前提是它是一棵二叉排序树。 </p>
<p>距离插入结点最近的，且平衡因子的绝对值大于1的结点为根的子树，称为<strong>最小不平衡子树</strong>。如下图所示，当插入结点37时，距离它最近的平衡因子的绝对值超过1的结点是58。<br><img src="175ADF48B439861E36C935B912A02CBD.png" alt="Screen Shot 2018-08-20 at 03.29.51.png"></p>
<hr>
<h3 id="平衡二叉树实现原理"><a href="#平衡二叉树实现原理" class="headerlink" title="平衡二叉树实现原理"></a>平衡二叉树实现原理</h3><p>平衡二叉树构建的基本思想就是在构建二叉排序树的过程中，每当插入一个结点时，先检查是否因插入而破坏了树的平衡性，若是，则找出最小不平衡子树。在保持二叉排序树特性的前提下，调整最小不平衡子树中各结点之间的链接关系，进行相应的旋转，使之成为新的平衡子树。 </p>
<p>下面讲解一个平衡二叉树构建过程的例子。现在又a[10] = {3, 2, 1, 4, 5, 6, 7, 10,9,8}需要构建二叉排序树。在没有学习平衡二叉树之前，根据二叉排序树的特性，通常会将它构建成如下左图。虽然完全符合二叉排序树的定义，但是对这样高度达到8的二叉树来说，查找是非常不利的。因此，更加期望构建出如下右图的样子，高度为4的二叉排序树，这样才可以提供高效的查找效率。</p>
<p><img src="2206D0C3195976C25C0F510EC2DD0500.png" alt="Screen Shot 2018-08-20 at 03.31.15.png"></p>
<p>现在来看看如何将一个数组构成出如上右图的树结构。 对于数组a的前两位3和2，很正常地构建，到了第个数“1”时，发现此时根结点“3”的平衡因子变成了2，此时整棵树都成了最小不平衡子树，需要进行调整，如下图图1（结点左上角数字为平衡因子BF值）。因为BF为正，因此将整个树进行右旋（顺时针），此时结点2成了根结点，3成了2的右孩子，这样三个结点的BF值均为0，非常的平衡，如下图图2所示。</p>
<p><img src="333499C6425551041245BD2A3449ADD9.png" alt="Screen Shot 2018-08-20 at 03.32.17.png"></p>
<p>然后再增加结点4，平衡因子没有改变，如上图图3。增加结点5时，结点3的BF值为-2，说明要旋转了。由于BF是负值，对这棵最小平衡子树进行左旋（逆时针旋转），如下图图4，此时整个树又达到了平衡。</p>
<p><img src="6FE258D25D915DE7A8EED82B5F2629B4.png" alt="Screen Shot 2018-08-20 at 03.32.34.png"></p>
<p>继续增加结点6时，发现根结点2的BF值变成了-2，如下图图6所示。所以对根结点进行了左旋，注意此时本来结点3是结点3的左孩子，由于旋转后需要满足二叉排序树特性，因此它成了结点2的右孩子，如图7所示。</p>
<p><img src="94DBAE0F5A9817F75BDAE96210C5E470.png" alt="Screen Shot 2018-08-20 at 03.32.58.png"></p>
<p>增加结点7，同样的左旋转，使得整棵树达到平衡，如下图8和9所示。<br><img src="25CCD067677C44433C0786B4D7AA84C4.png" alt="Screen Shot 2018-08-20 at 03.33.19.png"></p>
<p>当增加结点10时，结构无变化，如图10所示。再增加结点9，此时结点7的BF变成了-2，理论上只需要旋转最小不平衡树7、9、10即可，但是，如果左旋转后，结点9变成了10的右孩子，这是不符合二叉排序树的特性的，此时不能简单的左旋。如图11所示。<br><img src="AAF89878FEAD94A457EC3CC9EE23BB1F.png" alt="Screen Shot 2018-08-20 at 03.33.37.png"></p>
<p>仔细观察图11，发现根本原因在于结点7的BF是-2，而结点10的BF是1，也就是说，它们两个一正一负，符号并不统一，而前面的几次旋转，无论左还是右旋，最小不平衡子树的根结点与它的子结点符号都是相同的。这就是不能直接旋转的关键。 不统一，不统一就把它们先转到符号统一再说，于是先对结点9和结点10进行右旋，使得结点10成了9的右子树，结点9的BF为-1，此时就与结点7的BF值符号统一了，如图12所示。<br><img src="D0F9E39CD269786322D6E43F9D015458.png" alt="Screen Shot 2018-08-20 at 03.34.00.png"></p>
<p>这样再以结点7为最小不平衡子树进行左旋，得到如下图13。接着，插入8，情况与刚才类似，结点6的BF是-2，而它的右孩子9的BF是1，如图14，因此首先以9为根结点，进行右旋，得到图15，此时结点6和结点7的符号都是负，再以6为根结点左旋，最终得到最后的平衡二叉树，如图16所示。<br><img src="8E7482B4C25067AD6FBCAD4D4F567339.png" alt="Screen Shot 2018-08-20 at 03.34.06.png"></p>
<p>通过这个例子，可以发现，当最小不平衡树根结点的平衡因子BF是大于1时，就右旋，小于-1时就左旋，如上例中的结点1、5、6、7的插入等。插入结点后，最小不平衡子树的BF与它的子树的BF符号相反时，就需要对结点先进行一次旋转以使得符号相同后，再反向旋转一次才能够完成平衡操作，如上例中结点9、8的插入时。</p>
<hr>
<h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h3><p>在平衡二叉树进行插入操作时遇到的不平衡情况有多种，但是这么多种情况都可以分解为一下四中基础情景：把它叫做：左左、左右、右右、右左。</p>
<p>在解释这四种情景之前需要先明白一个定义：最小不平衡节点—插入一个节点之后，距离这个插入节点最近的不平衡节点就是最小不平衡节点。所有的旋转都是在最小不平衡节点的基础上进行的。</p>
<p>继续解释四种情景命名意义：</p>
<ol>
<li>左左：节点插入在最小不平衡节点的左子树的左子树上。</li>
<li>左右：节点插入在最小不平衡节点的左子树的右子树上面。　</li>
<li>右右：节点插入在最小不平衡树的右子树的右子树上面。　　</li>
<li>右左：节点插入在最小不平衡树的右子树的左子树上面。</li>
</ol>
<p>解决办法为：<br><img src="642DBF620B74F0ABF66C0E95B674D74E.png" alt="Screen Shot 2018-08-19 at 23.40.41.png"></p>
<p><img src="304B2514A3FEBCA9BFFA43669F0FA997.png" alt="Screen Shot 2018-08-19 at 23.41.03.png"></p>
<p><img src="4561786D3F367FD6B02C3F5B43023B7C.png" alt="Screen Shot 2018-08-19 at 23.40.50.png"></p>
<p><img src="0A695ECFADE5328426F6568772071B4F.png" alt="Screen Shot 2018-08-19 at 23.41.09.png"></p>
<h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><p>删除的流程如下：</p>
<ol>
<li><p>拿到要删除的数字 value，从根节点开始比对，知道找到一个要删除的节点：currNode</p>
</li>
<li><p>从左子树中找到一个最大值（左子树中的值都比 currNode 小）：targetNode（如果左子树为空，那就直接把 right 节点上位；如果 right 也是空的，那就直接删掉 currNode 就好了）</p>
</li>
<li><p>把 targetNode 放到 currNode 的位置上：因为每个 节点都有 parent、left、right 三个关联点，要仔细处理</p>
</li>
<li><p>和 插入类似，从 targetNode 开始一路向上，找到第一个失衡点。此时只有 LL 和 RR 两种失衡情况，判断起来相对容易些</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Data Structure and Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>Top-down and Bottom-up</title>
    <url>/Top-down-and-Bottom-up/2019/09/12/</url>
    <content><![CDATA[<h2 id="Solve-Tree-Problems-Recursively"><a href="#Solve-Tree-Problems-Recursively" class="headerlink" title="Solve Tree Problems Recursively"></a>Solve Tree Problems Recursively</h2><ol>
<li>“Top-down” Solution</li>
<li>“Bottom-up” Solution</li>
</ol>
<p>Conclusion</p>
<p>In previous sections, we have introduced how to solve tree traversal problem recursively. Recursion is one of the most powerful and frequent used methods for solving tree related problems.</p>
<p>As we know, a tree can be defined recursively as a node(the root node), which includes a value and a list of references to other nodes. Recursion is one of the nature features of a tree. Therefore, many tree problems can be solved recursively. For each recursion level, we can only focus on the problem within one single node and call the function recursively to solve its children.</p>
<p>Typically, we can solve a tree problem recursively from the top down or from the bottom up.</p>
<h3 id="“Top-down”-Solution"><a href="#“Top-down”-Solution" class="headerlink" title="“Top-down” Solution"></a>“Top-down” Solution</h3><p>“Top-down” means that in each recursion level, we will visit the node first to come up with some values, and pass these values to its children when calling the function recursively. So the “top-down” solution can be considered as kind of preorder traversal. To be specific, the recursion function top_down(root, params) works like this:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. return specific value for null node</span><br><span class="line">2. update the answer if needed                      // anwer &lt;-- params</span><br><span class="line">3. left_ans = top_down(root.left, left_params)      // left_params &lt;-- root.val, params</span><br><span class="line">4. right_ans = top_down(root.right, right_params)   // right_params &lt;-- root.val, params </span><br><span class="line">5. return the answer if needed                      // answer &lt;-- left_ans, right_ans</span><br><span class="line">For instance, consider this problem: given a binary tree, find its maximum depth.</span><br></pre></td></tr></table></figure></p>
<p>We know that the depth of the root node is 1. For each node, if we know the depth of the node, we will know the depth of its children. Therefore, if we pass the depth of the node as a parameter when calling the function recursively, all the nodes know the depth of themselves. And for leaf nodes, we can use the depth to update the final answer. Here is the pseudocode for the recursion function maximum_depth(root, depth):</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. return if root is null</span><br><span class="line">2. if root is a leaf node:</span><br><span class="line">3.      answer = max(answer, depth)         // update the answer if needed</span><br><span class="line">4. maximum_depth(root.left, depth + 1)      // call the function recursively for left child</span><br><span class="line">5. maximum_depth(root.right, depth + 1)     // call the function recursively for right child</span><br></pre></td></tr></table></figure>
<h3 id="“Bottom-up”-Solution"><a href="#“Bottom-up”-Solution" class="headerlink" title="“Bottom-up” Solution"></a>“Bottom-up” Solution</h3><p>“Bottom-up” is another recursion solution. In each recursion level, we will firstly call the functions recursively for all the children nodes and then come up with the answer according to the return values and the value of the root node itself. This process can be regarded as kind of postorder traversal. Typically, a “bottom-up” recursion function bottom_up(root) will be like this:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. return specific value for null node</span><br><span class="line">2. left_ans = bottom_up(root.left)          // call function recursively for left child</span><br><span class="line">3. right_ans = bottom_up(root.right)        // call function recursively for right child</span><br><span class="line">4. return answers                           // answer &lt;-- left_ans, right_ans, root.val</span><br></pre></td></tr></table></figure></p>
<p>Let’s go on discussing the question about maximum depth but using a different way of thinking: for a single node of the tree, what will be the maximum depth x of the subtree rooted at itself?</p>
<p>If we know the maximum depth l of the subtree rooted at its left child and the maximum depth r of the subtree rooted at its right child, can we answer the previous question? Of course yes, we can choose the maximum between them and plus 1 to get the maximum depth of the subtree rooted at the selected node. That is x = max(l, r) + 1.</p>
<p>It means that for each node, we can get the answer after solving the problem of its children. Therefore, we can solve this problem using a “bottom-up” solution. Here is the pseudocode for the recursion function maximum_depth(root):<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. return 0 if root is null                 // return 0 for null node</span><br><span class="line">2. left_depth = maximum_depth(root.left)</span><br><span class="line">3. right_depth = maximum_depth(root.right)</span><br><span class="line">4. return max(left_depth, right_depth) + 1  // return depth of the subtree rooted at root</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Data Structure and Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>Binary Search Tree</title>
    <url>/Binary-Search-Tree/2019/09/10/</url>
    <content><![CDATA[<h2 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h2><p>是一棵二叉树，其结点的值总是大于其左子树中任意结点的值而小于右子树中任意结点的值</p>
<h3 id="查找操作"><a href="#查找操作" class="headerlink" title="查找操作"></a>查找操作</h3><p>当二叉查找树不为空时：</p>
<ol>
<li>首先将给定值与根结点的关键字比较，若相等，则查找成功</li>
<li>若小于根结点的关键字值，递归查左子树</li>
<li>若大于根结点的关键字值，递归查右子树</li>
<li>若子树为空，查找不成功</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self,x,node)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">elif</span> x == node.key:</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">    <span class="keyword">elif</span> x &lt; node.key:</span><br><span class="line">        <span class="keyword">return</span> self.find(x,node.left)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> self.find(x,node.right)</span><br></pre></td></tr></table></figure>
<h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h3><p>二叉排序树是一种动态树表。其特点是：树的结构通常不是一次生成的，而是在查找过程中，当树中不存在关键字等于给定值的结点时再进行插入。新插入的结点一定是一个新添加的叶子结点，并且是查找不成功时查找路径上访问的最后一个结点的左孩子或右孩子结点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self,x)</span>:</span></span><br><span class="line"></span><br><span class="line">        flag,node,parent = self.find_parent(self.root,self.root,x)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">            <span class="keyword">if</span> x &lt; parent.key:</span><br><span class="line">                parent.left = Node(x)</span><br><span class="line">            <span class="keyword">elif</span> x &gt; parent.key:</span><br><span class="line">                parent.right = Node(x)</span><br></pre></td></tr></table></figure>
<h3 id="寻找父节点"><a href="#寻找父节点" class="headerlink" title="寻找父节点"></a>寻找父节点</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_parent</span><span class="params">(self,node,parent,x)</span>:</span></span><br><span class="line">   <span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">False</span>,node,parent</span><br><span class="line">   <span class="keyword">if</span> node.key == x:</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">True</span>,node,parent</span><br><span class="line">   <span class="keyword">if</span> node.key &gt; x:</span><br><span class="line">       <span class="keyword">return</span> self.find_parent(node.left, node, x)</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       <span class="keyword">return</span> self.find_parent(node.right, node, x)</span><br></pre></td></tr></table></figure>
<h3 id="寻找最大或最小"><a href="#寻找最大或最小" class="headerlink" title="寻找最大或最小"></a>寻找最大或最小</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_max</span><span class="params">(self,node)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node.right:</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> self.find_max(node.right)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_min</span><span class="params">(self,node)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node.left:</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> self.find_min(node.left)</span><br></pre></td></tr></table></figure>
<h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><p><strong>若要删除一个BST的一个结点，需要考虑如下三种情况：</strong></p>
<ol>
<li>需要删除的节点下并没有其他子节点</li>
<li>需要删除的节点下有一个子节点（左或右）</li>
<li>需要删除的节点下有两个子节点（既左右节点都存在）</li>
</ol>
<p><strong>对这三种情况分别采取的措施是：</strong></p>
<ol>
<li>直接删除此结点<br><img src="3DA4F21F8BEA5E6144705F5DDD2F383B.png" alt="Screen Shot 2018-08-19 at 23.26.49.png"></li>
<li>删除此结点，将此结点父节点连接到此结点左（右）子树<br><img src="4FBB9B19DAA324CDC7870BFA8DB1ACCA.png" alt="Screen Shot 2018-08-19 at 23.26.42.png"></li>
<li>找出此结点右子树中的最小结点，用以代替要删除的结点，然后删除此最小结点（删除最小结点又称为上述前两种情况）<br><img src="CD576F6C6C4C9F7052936B3BD519B57B.png" alt="Screen Shot 2018-08-19 at 23.26.36.png"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self,x)</span>:</span></span><br><span class="line">    flag,node,parent = self.find_parent(self.root,self.root,x)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node.left <span class="keyword">and</span> <span class="keyword">not</span> node.right:</span><br><span class="line">            <span class="keyword">if</span> node == parent.left:</span><br><span class="line">                parent.left = <span class="keyword">None</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                parent.right = <span class="keyword">None</span>    </span><br><span class="line">            <span class="keyword">del</span> node</span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> node.left <span class="keyword">and</span> node.right:</span><br><span class="line">            <span class="keyword">if</span> node == parent.left:</span><br><span class="line">                parent.left = node.right</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                parent.right = node.right  </span><br><span class="line">            <span class="keyword">del</span> node     </span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> node.right <span class="keyword">and</span> node.left:</span><br><span class="line">            <span class="keyword">if</span> node == parent.left:</span><br><span class="line">                parent.left = node.left</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                parent.right = node.left</span><br><span class="line">            <span class="keyword">del</span> node</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            right_min = self.find_min(node.right)    </span><br><span class="line">            tmp = right_min.key</span><br><span class="line">            self.delete(tmp)</span><br><span class="line">            node.key = tmp</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Data Structure and Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>Recursion</title>
    <url>/Recursion/2019/09/10/</url>
    <content><![CDATA[<h2 id="使用递归的条件"><a href="#使用递归的条件" class="headerlink" title="使用递归的条件"></a>使用递归的条件</h2><p>可以用递归来解决的问题需要满足三个条件</p>
<ol>
<li>一个问题可以分解为几个子问题的解</li>
<li>这个问题与分解后的问题，除了数据规模不同，求解思路完全一样</li>
<li>存在递归终止条件</li>
</ol>
<blockquote>
<p>编写递归代码的关键是，只要遇到递归，我们就把它抽象成一个递推公式，不用想一层层的调用关系，不用试图用人脑去分解递归的每一个步骤</p>
</blockquote>
<h2 id="思维方式"><a href="#思维方式" class="headerlink" title="思维方式"></a>思维方式</h2><p>对于递归代码，试图想清楚整个递归过程的做法是一种思维误区。很多时候，我们理解起来比较吃力，主要原因是就是自己给自己制造了理解障碍。那正确的思维方式应该是怎样的呢？</p>
<p>如果一个问题 A 可以分解为若干子问题 B,C,D，你可以假设子问题 B,C,D 已经解决，在此基础上思考如何解决 A。而且，你只用思考问题 A 与子问题B,C,D 两层之间的关系即可，不需要一层一层往下思考子问题和子子问题，子子问题与子子子问题之间的关系。屏蔽掉递归细节，这样理解起来就简单多了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 链表和</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_linklist</span><span class="params">(node)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> node.value + sum_linklist(node.next)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#汉诺塔问题</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> count </span><br><span class="line">    print(<span class="string">"&#123;&#125; -&gt; &#123;&#125;"</span>.format(x,y))</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Hanoi</span><span class="params">(num,a,b,c)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">        move(a,b)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        Hanoi(num<span class="number">-1</span>,a,c,b)</span><br><span class="line">        move(a,b)</span><br><span class="line">        Hanoi(num<span class="number">-1</span>,c,b,a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Hanoi(<span class="number">20</span>,<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>)</span><br><span class="line">print(count)</span><br></pre></td></tr></table></figure>
<h2 id="尾递归"><a href="#尾递归" class="headerlink" title="尾递归"></a>尾递归</h2><p>对于递归函数的使用，人们所关心的一个问题是栈空间的增长。确实，随着被调用次数的增加，某些种类的递归函数会线性地增加栈空间的使用 —— 不过，有一类函数，即尾部递归函数，不管递归有多深，栈的大小都保持不变。尾递归属于线性递归，更准确的说是线性递归的子集。<br>　<br>函数所做的最后一件事情是一个函数调用（递归的或者非递归的），这被称为尾部调用（tail-call）。使用尾部调用的递归称为 尾部递归。当编译器检测到一个函数调用是尾递归的时候，它就覆盖当前的活动记录而不是在栈中去创建一个新的。编译器可以做到这点，因为递归调用是当前活跃期内最后一条待执行的语句，于是当这个调用返回时栈帧中并没有其他事情可做，因此也就没有保存栈帧的必要了。通过覆盖当前的栈帧而不是在其之上重新添加一个，这样所使用的栈空间就大大缩减了，这使得实际的运行效率会变得更高。<br>　　<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial_tail</span><span class="params">(total,n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> total</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> factorial_tail(total * n,n<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(factorial_tail(<span class="number">1</span>,<span class="number">4</span>))</span><br></pre></td></tr></table></figure></p>
<p>上面代码是一个阶乘函数，计算n的阶乘，最多需要保存n个调用记录，复杂度 O(n). 如果改写成尾递归，只保留一个调用记录，复杂度 O(1).</p>
<blockquote>
<p>reference 数据结构与算法之美 王争</p>
</blockquote>
]]></content>
      <categories>
        <category>Data Structure and Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>Tree traverse</title>
    <url>/Tree-traverse/2019/09/10/</url>
    <content><![CDATA[<p><img src="02F48A6796A4FCA76964AB95AFD74AAF.png" alt="Screen Shot 2018-10-10 at 12.58.18.png"></p>
<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recursive_preorder</span><span class="params">(self,node)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    递归先序遍历</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(node.elem, end = <span class="string">", "</span>)  </span><br><span class="line">        self.recursive_preorder(node.left)  </span><br><span class="line">        self.recursive_preorder(node.right)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recursive_inorder</span><span class="params">(self,node)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    中序遍历</span></span><br><span class="line"><span class="string">    """</span>        </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        self.recursive_inorder(node.left)</span><br><span class="line">        print(node.elem,end = <span class="string">", "</span>)</span><br><span class="line">        self.recursive_inorder(node.right)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recursive_postorder</span><span class="params">(self,node)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    后续遍历</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        self.recursive_postorder(node.left)</span><br><span class="line">        self.recursive_postorder(node.right)</span><br><span class="line">        print(node.elem,end = <span class="string">", "</span>)</span><br></pre></td></tr></table></figure>
<h2 id="非递归"><a href="#非递归" class="headerlink" title="非递归"></a>非递归</h2><h3 id="非递归前序遍历"><a href="#非递归前序遍历" class="headerlink" title="非递归前序遍历"></a>非递归前序遍历</h3><p>对于任一结点P：</p>
<ol>
<li>先把根结点放到一个栈S中。</li>
<li>当S不为空时，就从栈顶pop一个结点，然后分别将它的右孩子，左孩子先后push到栈S里。如果子结点为空，什么也不做。</li>
<li>重复第2步，直到栈S为空。</li>
</ol>
<p>法2:</p>
<ol>
<li>访问结点P，并将结点P入栈;</li>
<li>判断结点P的左孩子是否为空，若为空，则取栈顶结点并进行出栈操作，并将栈顶结点的右孩子置为当前的结点P，循环至1);若不为空，则将P的左孩子置为当前的结点P;</li>
<li>直到P为NULL并且栈为空，则遍历结束。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">non_recursive_preorder</span><span class="params">(self,node)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    非递归前序遍历</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line"></span><br><span class="line">    stack = deque()</span><br><span class="line">    stack.append(node)</span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        curr_node = stack.pop()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> curr_node:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        print(curr_node,end = <span class="string">" "</span>)    </span><br><span class="line">        stack.append(curr_node.right)</span><br><span class="line">        stack.append(curr_node.left)</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">non_recursive_preorder2</span><span class="params">(self,node)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        非递归前序遍历2</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        stack = deque()</span><br><span class="line">        <span class="keyword">while</span> stack <span class="keyword">or</span> node:</span><br><span class="line">            <span class="keyword">while</span> node:</span><br><span class="line">                print(node,end = <span class="string">" "</span>)</span><br><span class="line">                stack.append(node)</span><br><span class="line">                node = node.left</span><br><span class="line">            <span class="comment">#当左子树为空，当前结点出栈，当前结点为出栈的元素    </span></span><br><span class="line">            node = stack.pop()</span><br><span class="line">            <span class="comment">#当前结点改为当前结点的右子树</span></span><br><span class="line">            node = node.right</span><br></pre></td></tr></table></figure>
<h3 id="非递归中序遍历"><a href="#非递归中序遍历" class="headerlink" title="非递归中序遍历"></a>非递归中序遍历</h3><p>与非递归前序遍历类似，不同之处在于出栈后再打印元素<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">non_recursive_inorder</span><span class="params">(self,node)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    非递归中序遍历</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    stack = deque()</span><br><span class="line">    <span class="keyword">while</span> stack <span class="keyword">or</span> node:</span><br><span class="line">        <span class="keyword">while</span> node:</span><br><span class="line">            stack.append(node)</span><br><span class="line">            node = node.left</span><br><span class="line">        <span class="comment">#当左子树为空，当前结点出栈，当前结点为出栈的元素    </span></span><br><span class="line">        node = stack.pop()</span><br><span class="line">        print(node,end = <span class="string">" "</span>)</span><br><span class="line">        <span class="comment">#当前结点改为当前结点的右子树</span></span><br><span class="line">        node = node.right</span><br></pre></td></tr></table></figure></p>
<h3 id="非递归后序遍历"><a href="#非递归后序遍历" class="headerlink" title="非递归后序遍历"></a>非递归后序遍历</h3><ul>
<li>如果想访问当前节点，要么右孩子不存在，要么上一个遍历的是它的右孩子</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">postorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> []</span><br><span class="line">        </span><br><span class="line">        res, stack, last_visited = [],[], <span class="keyword">None</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> stack <span class="keyword">or</span> root:</span><br><span class="line">            <span class="keyword">while</span> root:</span><br><span class="line">                stack.append(root)</span><br><span class="line">                root = root.left</span><br><span class="line">            cur = stack[<span class="number">-1</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> cur.right <span class="keyword">or</span> cur.right == last_visited:</span><br><span class="line">                item = stack.pop()</span><br><span class="line">                res.append(item.val)</span><br><span class="line">                last_visited = item</span><br><span class="line">            <span class="keyword">elif</span> cur.right:</span><br><span class="line">                root = cur.right</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<h3 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">level_order</span><span class="params">(root)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line"></span><br><span class="line">    queue = deque([])</span><br><span class="line">    queue.append(root)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> queue:</span><br><span class="line">        node = queue.popleft()</span><br><span class="line">        print(node,end = <span class="string">" "</span>)</span><br><span class="line">        <span class="keyword">if</span> node.left:</span><br><span class="line">            queue.append(node.left)</span><br><span class="line">        <span class="keyword">if</span> node.right:</span><br><span class="line">            queue.append(node.right)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Data Structure and Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>Sort</title>
    <url>/Sort/2019/09/08/</url>
    <content><![CDATA[<h2 id="如何分析一个“排序算法”？"><a href="#如何分析一个“排序算法”？" class="headerlink" title="如何分析一个“排序算法”？"></a>如何分析一个“排序算法”？</h2><ol>
<li>算法的执行效率<ol>
<li>最好、最坏、平均情况时间复杂度。</li>
<li>时间复杂度的系数、常数和低阶。</li>
<li>比较次数，交换（或移动）次数。</li>
</ol>
</li>
<li>排序算法的稳定性<ol>
<li>稳定性概念：如果待排序的序列中存在值相等的元素，经过排序之后，相等元素之间原有的先后顺序不变。</li>
<li>稳定性重要性：可针对对象的多种属性进行有优先级的排序。</li>
<li>举例：给电商交易系统中的“订单”排序，按照金额大小对订单数据排序，对于相同金额的订单以下单时间早晚排序。用稳定排序算法可简洁地解决。先按照下单时间给订单排序，排序完成后用稳定排序算法按照订单金额重新排序。</li>
</ol>
</li>
<li>排序算法的内存损耗<ol>
<li>原地排序算法：特指空间复杂度是O(1)的排序算法。</li>
</ol>
</li>
</ol>
<h2 id="有序度与逆序度"><a href="#有序度与逆序度" class="headerlink" title="有序度与逆序度"></a>有序度与逆序度</h2><ol>
<li>有序元素对：a[i] &lt;= a[j], 如果 i &lt; j.</li>
<li>逆序元素对：a[i] &gt;= a[j], 如果 i &gt; j.</li>
<li>逆序对 = 满有序度 - 有序度</li>
</ol>
<h2 id="冒泡排序-Bubble-Sort"><a href="#冒泡排序-Bubble-Sort" class="headerlink" title="冒泡排序(Bubble Sort)"></a>冒泡排序(Bubble Sort)</h2><blockquote>
<p>冒泡排序只会操作相邻的两个数据。每次冒泡操作都会对相邻的两个元素进行比较，看是否满足大小关系要求。如果不满足就让她俩互换。一次冒泡会让至少一个元素移动到它应该在的位置，重复n次，就完成了 n 个数据的排序工作。</p>
</blockquote>
<p><img src="1.png" alt><br><img src="2.png" alt></p>
<p>实际上，当在某次冒泡过程中，已经没有元素相互交换，就说明数据已经有序了。</p>
<ul>
<li>冒泡是原地排序算法</li>
<li>冒泡是稳定排序算法（当比较两个元素时，出现相等的情况就不交换彼此）</li>
<li>时间复杂度<ul>
<li>最好的情况下(数据已经有序),只需要进行一次冒泡操作,复杂度为O(n)</li>
<li>最坏的情况下,元素是倒排的,此时需要进行n次冒泡操作,复杂度为O(n^2)</li>
<li>平均复杂度:<br>对于包含n个数据的数组进行冒泡排序，平均交换次数是多少呢？ 最坏情况下，初始状态的有序度是0,所以要进行n(n-1)/2次交换。最好的情况下，初始状态的有序度是n(n-1)/2，就不需要进行交换。我们可以取个中间值n(n-1)/4，来表示初始有序度既不是很高也不是很低的平均情况。换句话说，平均情况下，需要n(n-1)/4次交换操作。比较操作肯定要比交换操作多，而复杂度的上限是O(n^2),所以平均情况下的时间复杂度就是O(n^2).</li>
</ul>
</li>
<li>code  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(lists)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(lists)):</span><br><span class="line">        flag = <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(lists)-i<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> lists[j] &gt; lists[j+<span class="number">1</span>]:</span><br><span class="line">                lists[j],lists[j+<span class="number">1</span>] = lists[j+<span class="number">1</span>], lists[j]</span><br><span class="line">                flag = <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="插入排序（InsertionSort）"><a href="#插入排序（InsertionSort）" class="headerlink" title="插入排序（InsertionSort）"></a>插入排序（InsertionSort）</h2><blockquote>
<p>插入排序是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p>
</blockquote>
<p>插入排序也包含两种操作，一种是元素比较，一种是元素移动。当我们需要移动元素a时，我们需要拿a与排序好的区间里的元素依次比较，在比较的过程中，把排序好的元素移位，方便为a 元素的最终位置腾出空间。</p>
<p><img src="3.png" alt></p>
<ul>
<li>插入排序是原地排序</li>
<li>插入排序是稳定的排序算法</li>
<li>时间复杂度<br>  如果要排序的数据是有序的，我们并不需要搬移任何数据。如果我们从尾到头在有序数据组里面查找插入位置，每次只需要比较一个数据就能确定插入的位置。所以这种情况下，最好的时间复杂度为O(n)。注意，这里是从尾到头遍历已经有序的数据。<br>  如果数组是倒序的，每次插入都相当于在数组的第一个位置插入新的数据，所以需要移动大量的数据，最坏时间复杂度为O(n^2)</li>
<li>code<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span><span class="params">(lists)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(lists)):</span><br><span class="line">        tmp = lists[i]</span><br><span class="line">        j = i - <span class="number">1</span></span><br><span class="line">       <span class="keyword">while</span> j&gt;=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> lists[j] &gt; tmp:</span><br><span class="line">                lists[j+<span class="number">1</span>] = lists[j] <span class="comment">#数据移动</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        lists[j+<span class="number">1</span>] = tmp    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span><span class="params">(nums)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(nums)):</span><br><span class="line">        tmp = nums[i]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> nums[j] &gt; tmp:</span><br><span class="line">                nums[j+<span class="number">1</span>] = nums[j]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        nums[j+<span class="number">1</span>] = tmp</span><br><span class="line">    <span class="keyword">return</span> nums</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="直接选择排序"><a href="#直接选择排序" class="headerlink" title="直接选择排序"></a>直接选择排序</h2><blockquote>
<p>同样分为已排序的区间和未排序的区间。但是选择排序每次会从未排序的区间中找到最小的元素，将其放到已排序区间的末尾。</p>
</blockquote>
<p>基本思想：</p>
<ul>
<li>第1趟，在待排序记录r1 ~ r[n]中选出最小的记录，将它与r1交换；</li>
<li>第2趟，在待排序记录r2 ~ r[n]中选出最小的记录，将它与r2交换；</li>
<li><p>以此类推，第i趟在待排序记录r[i] ~ r[n]中选出最小的记录，将它与r[i]交换，使有序序列不断增长直到全部排序完毕。<br><img src="4.png" alt></p>
</li>
<li><p>是原地排序</p>
</li>
<li>不是稳定排序<br>  比如 [5,8,5,2,9] 这样一组数据，使用选择排序算法来排序的话，第一次找到最小元素2，与第一个5交换位置，那第一个 5 和中间的 5 顺序就变了，所以就不稳定了。</li>
<li>最好情况下时间复杂度为O(n),最坏为O(n^2),平均情况下为O(n^2)</li>
<li>code<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_sort</span><span class="params">(lists)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(lists)):</span><br><span class="line">        cur_min = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i, len(lists)):</span><br><span class="line">            <span class="keyword">if</span> lists[j] &lt; lists[cur_min]:</span><br><span class="line">                cur_min = j</span><br><span class="line">        lists[i],lists[cur_min] = lists[cur_min],lists[i]</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="三种-O-n-2-时间复杂度的算法比较，适合小规模数据"><a href="#三种-O-n-2-时间复杂度的算法比较，适合小规模数据" class="headerlink" title="三种 O(n^2)时间复杂度的算法比较，适合小规模数据"></a>三种 O(n^2)时间复杂度的算法比较，适合小规模数据</h2><p><img src="5.png" alt></p>
<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><blockquote>
<p>如果要排序一个数组，我们先把数组从中间分成两部分，然后对前后两部分分别进行排序，再将排序好的两部分结合在一起，这样整个数组就有序了。</p>
</blockquote>
<p><img src="6.png" alt><br><strong>归并排序使用了分治思想，分治是一种解决问题的处理思想，递归是一种手段，分治常常利用递归来实现</strong></p>
<ul>
<li><p>递推公式</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#递推公式：</span></span><br><span class="line">merge_sort(p…r) = merge(merge_sort(p…q), merge_sort(q+<span class="number">1</span>…r))</span><br><span class="line"><span class="comment">#终止条件：</span></span><br><span class="line">p &gt;= r 不用再继续分解</span><br></pre></td></tr></table></figure>
</li>
<li><p>归并排序不是就地排序算法</p>
</li>
<li>是稳定的排序算法<br>  在 merge 函数中，如果A[q…p] 和 A[p+1..r] 中有值相等的元素，那我们先把 A[q..p] 中的元素放入 tmp 数组。这样就保证了值相等的元素，在合并前后的先后顺序不变。</li>
<li>时间复杂度分析<script type="math/tex; mode=display">T(a) = T(b) + T(c) + K</script><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">T(1) = C；   n=1 时，只需要常量级的执行时间，所以表示为 C。</span><br><span class="line">T(n) = 2*T(n/2) + n； n&gt;1</span><br><span class="line"></span><br><span class="line">T(n) = 2*T(n/2) + n</span><br><span class="line">= 2*(2*T(n/4) + n/2) + n = 4*T(n/4) + 2*n</span><br><span class="line">= 4*(2*T(n/8) + n/4) + 2*n = 8*T(n/8) + 3*n</span><br><span class="line">= 8*(2*T(n/16) + n/8) + 3*n = 16*T(n/16) + 4*n</span><br><span class="line">......</span><br><span class="line">= 2^k * T(n/2^k) + k * n</span><br><span class="line">......</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>通过这样一步一步分解推导，我们可以得到T(n) = 2^kTn(n/2^k) + km。当T(n/2^k) = T(1)时，也就是 n/2^k = 1，我们得到k = log2n。于是 T(n) = Cn + nlog2n 。所以归并排序的时间复杂度为O(nlogn)。</p>
<ul>
<li>空间复杂度分析<br>实际上，递归代码的空间复杂度并不能像时间复杂度那样累加。刚刚我们忘记了最重要的一点，那就是，尽管每次合并操作都需要申请额外的内存空间，但是合并完成之后，临时空间就被释放。在任意时刻，CPU 只会有一个函数在执行，也就只会有一个临时的内存空间在使用。临时内存空间最大也不会超过n个数据的大小，所以空间复杂度为O(n)。</li>
<li><p>code</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(left,right)</span>:</span></span><br><span class="line">    i,j = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">while</span> i &lt; len(left) <span class="keyword">and</span> j &lt; len(right):</span><br><span class="line">        <span class="keyword">if</span> left[i] &lt;= right[j]:</span><br><span class="line">            result.append(left[i])</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result.append(right[j])<span class="number">3</span></span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    result += left[i:]</span><br><span class="line">    result += right[j:]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span><span class="params">(lists)</span>:</span></span><br><span class="line">    <span class="comment"># 递归终止条件 -&gt; 不可再分</span></span><br><span class="line">    <span class="keyword">if</span> len(lists) &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> lists</span><br><span class="line"></span><br><span class="line">    num = len(lists)//<span class="number">2</span></span><br><span class="line"></span><br><span class="line">    left = merge_sort(lists[:num])</span><br><span class="line">    right = merge_sort(lists[num:])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> merge(left,right)</span><br></pre></td></tr></table></figure>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># merge sort linklist version</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self,list1,list2)</span>:</span></span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        cur = dummy</span><br><span class="line">        <span class="keyword">while</span> list1 <span class="keyword">and</span> list2:</span><br><span class="line">            <span class="keyword">if</span> list1.val &lt;= list2.val:</span><br><span class="line">                cur.next = list1</span><br><span class="line">                list1 = list1.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur.next = list2</span><br><span class="line">                list2 = list2.next</span><br><span class="line">            cur = cur.next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> list1:</span><br><span class="line">            cur.next = list1</span><br><span class="line">        <span class="keyword">if</span> list2:</span><br><span class="line">            cur.next = list2</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br><span class="line">                    </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortList</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> <span class="keyword">not</span> head.next:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">        fast = head.next</span><br><span class="line">        slow = head</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> fast <span class="keyword">and</span> fast.next:</span><br><span class="line">            fast = fast.next.next</span><br><span class="line">            slow = slow.next</span><br><span class="line">            </span><br><span class="line">        middle = slow.next</span><br><span class="line">        slow.next = <span class="keyword">None</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> self.merge(self.sortList(head),self.sortList(middle))</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="快速排序-Quick-Sort"><a href="#快速排序-Quick-Sort" class="headerlink" title="快速排序(Quick Sort)"></a>快速排序(Quick Sort)</h2><blockquote>
<p>快速排序也是利用分治的思想，如果要排序数组中从下标q,r之间的数据，我们从q,r之间选择一个数据作为pivot，小于 pivot 的数据放左边，大于pivot的数据放右边，中间是pivot。</p>
</blockquote>
<p><img src="7.png" alt><br><img src="8.png" alt></p>
<ul>
<li>快速排序是就地排序算法</li>
<li>快速排序是不稳定算法<ul>
<li>待排序数组:int a[] ={1, 2, 2, 3, 4, 5, 6},在快速排序的随机选择pivot阶段：</li>
<li>若选择a[2]（即数组中的第二个2）为pivot，而把大于等于比较子的数均放置在大数数组中，则a[1]（即数组中的第一个2）会到pivot的右边， 那么数组中的两个2非原序（这就是“不稳定”）。</li>
<li>若选择a[1]为pivot，而把小于等于比较子的数均放置在小数数组中，则数组中的两个2顺序也非原序</li>
</ul>
</li>
<li><p>时间性能分析</p>
<ul>
<li><p>地推公式</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">T(1) = C；   n=1 时，只需要常量级的执行时间，所以表示为 C。</span><br><span class="line">T(n) = 2*T(n/2) + n； n&gt;1</span><br></pre></td></tr></table></figure>
</li>
<li><p>大部分情况下的时间复杂度都可以做到 O(nlogn)，只有在极端情况下才退化为O(n^2)</p>
</li>
</ul>
</li>
<li><p>递推公式(快速实现)</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">递推公式：</span><br><span class="line">quick_sort(lists) = quick_sort([item &lt; pivot]) + pivot +  quick_sort(item &gt; pivot)</span><br><span class="line"></span><br><span class="line">终止条件：</span><br><span class="line">len(lists) &lt;= 1</span><br></pre></td></tr></table></figure>
</li>
<li><p>code</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 快速实现</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(lists)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(lists) &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> lists</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pivot = choice(lists)</span><br><span class="line">        <span class="keyword">return</span> quick_sort([item <span class="keyword">for</span> item <span class="keyword">in</span> lists <span class="keyword">if</span> item &lt; pivot]) + [pivot] + quick_sort([item <span class="keyword">for</span> item <span class="keyword">in</span> lists <span class="keyword">if</span> item &gt; pivot])</span><br></pre></td></tr></table></figure>
</li>
<li><p>就地排序版本</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">递推公式：</span><br><span class="line">quick_sort(p…r) = quick_sort(p…q-1) + quick_sort(q+1, r)</span><br><span class="line"></span><br><span class="line">终止条件：</span><br><span class="line">p &gt;= r</span><br><span class="line"></span><br><span class="line">// 快速排序，A 是数组，n 表示数组的大小</span><br><span class="line">quick_sort(A, n) &#123;</span><br><span class="line">  quick_sort_c(A, 0, n-1)</span><br><span class="line">&#125;</span><br><span class="line">// 快速排序递归函数，p,r 为下标</span><br><span class="line">quick_sort_c(A, p, r) &#123;</span><br><span class="line">  if p &gt;= r then return</span><br><span class="line">  </span><br><span class="line">  q = partition(A, p, r) // 获取分区点</span><br><span class="line">  quick_sort_c(A, p, q-1)</span><br><span class="line">  quick_sort_c(A, q+1, r)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">partition(A, p, r) &#123;</span><br><span class="line">  pivot := A[r]</span><br><span class="line">  i := p</span><br><span class="line">  for j := p to r-1 do &#123;</span><br><span class="line">    if A[j] &lt; pivot &#123;</span><br><span class="line">      swap A[i] with A[j]</span><br><span class="line">      i := i+1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  swap A[i] with A[r]</span><br><span class="line">  return i</span><br></pre></td></tr></table></figure>
<p>  这里的处理有点类似选择排序，我们通过游标 i 把 A[p..r-1]分成两部分. A[p…i-1]的元素都是小于 pivot的，我们暂且叫它“已处理区间”，A[i..r-1]是“未处理区间”。我们每次都从未处理的区间A[i…r-1]中取一个元素 A[j]，与 pivot 对比，如果小于 pivot，则将其加入到已处理区间的尾部，也就是 A[i]的位置。</p>
<p>  先把 pivot 元素放到数组最后的位置，A[p…i-1]的元素都是小于 pivot的，所以 i 总是指向第一个大于 pivot的元素,所以在randomized_partition函数的最后，用数组最后一个元素与 i 位置元素的元素进行交换。</p>
<p>  <img src="9.png" alt></p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="comment">## 就地排序实现</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">randomized_partition</span><span class="params">(lists,left,right)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 生成随机元素并与 lists 最右边元素进行交换</span></span><br><span class="line">    pivot = randint(left,right)</span><br><span class="line">    lists[pivot],lists[right] = lists[right],lists[pivot]</span><br><span class="line">    </span><br><span class="line">    i = left</span><br><span class="line">    <span class="comment"># 0..i保存着比 pivot 小的所有元素</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(left,right):</span><br><span class="line">        <span class="keyword">if</span> lists[j] &lt; lists[right]:</span><br><span class="line">            lists[i],lists[j] = lists[j],lists[i]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">    lists[right],lists[i] = lists[i],lists[right]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> i </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort_c</span><span class="params">(lists, left, right)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> left &gt;= right:</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    pivot = randomized_partition(lists,left, right)</span><br><span class="line">    quick_sort_c(lists,left,pivot<span class="number">-1</span>)</span><br><span class="line">    quick_sort_c(lists,pivot+<span class="number">1</span>,right)</span><br><span class="line">          </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(lists)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(lists) &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    quick_sort_c(lists,<span class="number">0</span>,len(lists)<span class="number">-1</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p>三种时间复杂度是 O(n) 的排序算法：桶排序、计数排序、基数排序。因为这些排序算法的时间复杂度是线性的，所以我们把这类排序算法叫作线性排序（Linear sort）。之所以能做到线性的时间复杂度，主要原因是，这三个算法是非基于比较的排序算法，都不涉及元素之间的比较操作。</p>
<p>这几种排序算法理解起来都不难，时间、空间复杂度分析起来也很简单，但是对要排序的数据要求很苛刻，所以我们学习重点的是掌握这些排序算法的适用场景。</p>
<h2 id="桶排序（Bucket-sort）"><a href="#桶排序（Bucket-sort）" class="headerlink" title="桶排序（Bucket sort）"></a>桶排序（Bucket sort）</h2><p>按照惯例，我先给你出一道思考题：如何根据年龄给 100 万用户排序？ 你可能会说，我用上一节课讲的归并、快排就可以搞定啊！是的，它们也可以完成功能，但是时间复杂度最低也是 O(nlogn)。有没有更快的排序方法呢？让我们一起进入今天的内容！</p>
<p>首先，我们来看桶排序。桶排序，顾名思义，会用到“桶”，核心思想是将要排序的数据分到几个有序的桶里，每个桶里的数据再单独进行排序。桶内排完序之后，再把每个桶里的数据按照顺序依次取出，组成的序列就是有序的了。</p>
<p>桶排序的时间复杂度为什么是 O(n) 呢？</p>
<p>如果要排序的数据有 n 个，我们把它们均匀地划分到 m 个桶内，每个桶里就有 k=n/m 个元素。每个桶内部使用快速排序，时间复杂度为 O(k * logk)。m 个桶排序的时间复杂度就是 O(m <em> k </em> logk)，因为 k=n/m，所以整个桶排序的时间复杂度就是 O(n*log(n/m))。当桶的个数 m 接近数据个数 n 时，log(n/m) 就是一个非常小的常量，这个时候桶排序的时间复杂度接近 O(n)。</p>
<p>桶排序看起来很优秀，那它是不是可以替代我们之前讲的排序算法呢？</p>
<p>答案当然是否定的。为了让你轻松理解桶排序的核心思想，我刚才做了很多假设。实际上，桶排序对要排序数据的要求是非常苛刻的。</p>
<ol>
<li><p>首先，要排序的数据需要很容易就能划分成 m 个桶，并且，桶与桶之间有着天然的大小顺序。这样每个桶内的数据都排序完之后，桶与桶之间的数据不需要再进行排序。</p>
</li>
<li><p>其次，数据在各个桶之间的分布是比较均匀的。如果数据经过桶的划分之后，有些桶里的数据非常多，有些非常少，很不平均，那桶内数据排序的时间复杂度就不是常量级了。在极端情况下，如果数据都被划分到一个桶里，那就退化为 O(nlogn) 的排序算法了。</p>
</li>
</ol>
<p>桶排序比较适合用在外部排序中。所谓的外部排序就是数据存储在外部磁盘中，数据量比较大，内存有限，无法将数据全部加载到内存中。</p>
<p>比如说我们有10GB的订单数据，我们希望按订单金额（假设金额都是正整数）进行排序，但是我们的内存有限，只有几百 MB，没办法一次性把 10GB 的数据都加载到内存中。这个时候该怎么办呢？</p>
<p>我们可以先扫描一遍文件，看订单金额所处的数据范围。假设经过扫描之后我们得到，订单金额最小是 1 元，最大是 10 万元。我们将所有订单根据金额划分到 100 个桶里，第一个桶我们存储金额在 1 元到 1000 元之内的订单，第二桶存储金额在 1001 元到 2000 元之内的订单，以此类推。每一个桶对应一个文件，并且按照金额范围的大小顺序编号命名（00，01，02…99）。</p>
<p>理想的情况下，如果订单金额在 1 到 10 万之间均匀分布，那订单会被均匀划分到 100 个文件中，每个小文件中存储大约 100MB 的订单数据，我们就可以将这 100 个小文件依次放到内存中，用快排来排序。等所有文件都排好序之后，我们只需要按照文件编号，从小到大依次读取每个小文件中的订单数据，并将其写入到一个文件中，那这个文件中存储的就是按照金额从小到大排序的订单数据了。</p>
<p>不过，你可能也发现了，订单按照金额在 1 元到 10 万元之间并不一定是均匀分布的 ，所以 10GB 订单数据是无法均匀地被划分到 100 个文件中的。有可能某个金额区间的数据特别多，划分之后对应的文件就会很大，没法一次性读入内存。这又该怎么办呢？</p>
<p>针对这些划分之后还是比较大的文件，我们可以继续划分，比如，订单金额在 1 元到 1000 元之间的比较多，我们就将这个区间继续划分为 10 个小区间，1 元到 100 元，101 元到 200 元，201 元到 300 元…901 元到 1000 元。如果划分之后，101 元到 200 元之间的订单还是太多，无法一次性读入内存，那就继续再划分，直到所有的文件都能读入内存为止。</p>
<h2 id="计数排序（Counting-sort）"><a href="#计数排序（Counting-sort）" class="headerlink" title="计数排序（Counting sort）"></a>计数排序（Counting sort）</h2><blockquote>
<p>当要排序的数据n量很大，而数据规模k很小时，可以采用计数排序，按照数据规模k创建k个桶，这样只要扫描一遍数据，把相应的数据放入桶中就实现了排序</p>
</blockquote>
<p>我们都经历过高考，高考查分数系统你还记得吗？我们查分数的时候，系统会显示我们的成绩以及所在省的排名。如果你所在的省有 50 万考生，如何通过成绩快速排序得出名次呢？</p>
<p>考生的满分是 900 分，最小是 0 分，这个数据的范围很小，所以我们可以分成 901 个桶，对应分数从 0 分到 900 分。根据考生的成绩，我们将这 50 万考生划分到这 901 个桶里。桶内的数据都是分数相同的考生，所以并不需要再进行排序。我们只需要依次扫描每个桶，将桶内的考生依次输出到一个数组中，就实现了 50 万考生的排序。因为只涉及扫描遍历操作，所以时间复杂度是 O(n)。</p>
<h2 id="基数排序（Radix-sort）"><a href="#基数排序（Radix-sort）" class="headerlink" title="基数排序（Radix sort）"></a>基数排序（Radix sort）</h2><p>我们再来看这样一个排序问题。假设我们有 10 万个手机号码，希望将这 10 万个手机号码从小到大排序，你有什么比较快速的排序方法呢？</p>
<p>我们之前讲的快排，时间复杂度可以做到 O(nlogn)，还有更高效的排序算法吗？桶排序、计数排序能派上用场吗？手机号码有 11 位，范围太大，显然不适合用这两种排序算法。针对这个排序问题，有没有时间复杂度是 O(n) 的算法呢？现在我就来介绍一种新的排序算法，基数排序。</p>
<p>刚刚这个问题里有这样的规律：假设要比较两个手机号码 a，b 的大小，如果在前面几位中，a 手机号码已经比 b 手机号码大了，那后面的几位就不用看了。</p>
<p>借助稳定排序算法，这里有一个巧妙的实现思路。还记得我们第 11 节中，在阐述排序算法的稳定性的时候举的订单的例子吗？我们这里也可以借助相同的处理思路，先按照最后一位来排序手机号码，然后，再按照倒数第二位重新排序，以此类推，最后按照第一位重新排序。经过 11 次排序之后，手机号码就都有序了。</p>
<p>手机号码稍微有点长，画图比较不容易看清楚，我用字符串排序的例子，画了一张基数排序的过程分解图，你可以看下。</p>
<p><img src="11.png" alt></p>
<p>注意，这里按照每位来排序的排序算法要是稳定的，否则这个实现思路就是不正确的。因为如果是非稳定排序算法，那最后一次排序只会考虑最高位的大小顺序，完全不管其他位的大小关系，那么低位的排序就完全没有意义了。</p>
<p>根据每一位来排序，我们可以用刚讲过的桶排序或者计数排序，它们的时间复杂度可以做到 O(n)。如果要排序的数据有 k 位，那我们就需要 k 次桶排序或者计数排序，总的时间复杂度是 O(k*n)。当 k 不大的时候，比如手机号码排序的例子，k 最大就是 11，所以基数排序的时间复杂度就近似于 O(n)。</p>
<p>实际上，有时候要排序的数据并不都是等长的，比如我们排序牛津字典中的 20 万个英文单词，最短的只有 1 个字母，最长的我特意去查了下，有 45 个字母，中文翻译是尘肺病。对于这种不等长的数据，基数排序还适用吗？</p>
<p>实际上，我们可以把所有的单词补齐到相同长度，位数不够的可以在后面补“0”，因为根据ASCII 值，所有字母都大于“0”，所以补“0”不会影响到原有的大小顺序。这样就可以继续用基数排序了。</p>
<p>我来总结一下，<strong>基数排序对要排序的数据是有要求的，需要可以分割出独立的“位”来比较，而且位之间有递进的关系，如果 a 数据的高位比 b 数据大，那剩下的低位就不用比较了。除此之外，每一位的数据范围不能太大，要可以用线性排序算法来排序，否则，基数排序的时间复杂度就无法做到 O(n) 了</strong>。</p>
<blockquote>
<p>reference 数据结构与算法之美 王争</p>
</blockquote>
]]></content>
      <categories>
        <category>Data Structure and Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>Binary Search</title>
    <url>/Binary-Search/2019/08/26/</url>
    <content><![CDATA[<p>二分查找的对象是：有序数组。这点特别需要注意。要把数组排好序先。</p>
<p>基本步骤：</p>
<ul>
<li>从数组的中间元素开始，如果中间元素正好是要查找的元素，则搜素过程结束；</li>
<li>如果某一特定元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半中查找，而且跟开始一样从中间元素开始比较。</li>
<li>如果在某一步骤数组为空，则代表找不到。</li>
</ul>
<p>这种搜索算法每一次比较都使搜索范围缩小一半。时间复杂度：O(logn)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 递归版本</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binarySearch</span><span class="params">(array, key, low, high)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> high &lt; low:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    mid = (low + high)//<span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> array[mid] == key:</span><br><span class="line">        <span class="keyword">return</span> mid</span><br><span class="line">    <span class="keyword">elif</span> array[mid] &gt; key:</span><br><span class="line">        <span class="keyword">return</span> binarySearch(array, key, low, mid<span class="number">-1</span>)    </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> binarySearch(array,key,mid+<span class="number">1</span>,high)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 非递归版本</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binarySearch2</span><span class="params">(array,key)</span>:</span></span><br><span class="line">    low,high = <span class="number">0</span>,len(array)<span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">        mid = (low + high)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> array[mid] &lt; key:</span><br><span class="line">            low = mid+<span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> array[mid] &gt; key:</span><br><span class="line">            high = mid<span class="number">-1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> mid        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>        </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    array = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line">    </span><br><span class="line">    print(binarySearch(array,<span class="number">1</span>,<span class="number">0</span>,len(array)<span class="number">-1</span>))</span><br><span class="line">    print(binarySearch2(array,<span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<p>-<img src="58B426D25E95FF0AA3BE110012AE70DB.png" alt="Screen Shot 2018-10-26 at 14.41.41.png"></p>
<h2 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h2><ul>
<li>数据结构必须是顺序表，也就是数组</li>
<li>数据必须有序</li>
<li>数据量太小不适合二分查找<ul>
<li>比如10个数据，一次遍历就可以了<br><img src="2E002A53F11C0E7F4D5CB28B2D0936CC.png" alt="Screen Shot 2018-10-26 at 14.51.08.png"></li>
</ul>
</li>
<li>数据量太大也不适合<ul>
<li>因为数据必须以连续内存的形式存储在 memory 当中</li>
</ul>
</li>
</ul>
<h2 id="二叉搜索的四种变形"><a href="#二叉搜索的四种变形" class="headerlink" title="二叉搜索的四种变形"></a>二叉搜索的四种变形</h2><p><img src="5FCE08FCE36A524F5A70BE48C51E6E27.png" alt="Screen Shot 2018-10-26 at 15.05.26.png"></p>
<h3 id="变体1-查找第一个值等于给定值的元素"><a href="#变体1-查找第一个值等于给定值的元素" class="headerlink" title="变体1,查找第一个值等于给定值的元素"></a>变体1,查找第一个值等于给定值的元素</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binarySearch</span><span class="params">(nums,key,low,high)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> high &lt; low:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    mid = ((high - low) &gt;&gt; <span class="number">1</span>) + low</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> nums[mid] &lt; key:</span><br><span class="line">        <span class="keyword">return</span> binarySearch(nums,key,mid+<span class="number">1</span>,high )</span><br><span class="line">    <span class="keyword">elif</span> nums[mid] &gt; key:</span><br><span class="line">        <span class="keyword">return</span> binarySearch(nums,key,low,mid<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> mid == <span class="number">0</span> <span class="keyword">or</span> nums[mid<span class="number">-1</span>] != key: </span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">else</span>: </span><br><span class="line">            high = mid - <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> binarySearch(nums,key,low,mid<span class="number">-1</span>)</span><br></pre></td></tr></table></figure>
<h3 id="变体2-查找最后一个值等于给定值的元素"><a href="#变体2-查找最后一个值等于给定值的元素" class="headerlink" title="变体2, 查找最后一个值等于给定值的元素"></a>变体2, 查找最后一个值等于给定值的元素</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binarySearch2</span><span class="params">(nums,key)</span>:</span></span><br><span class="line">    low,high,n = <span class="number">0</span>, len(nums)<span class="number">-1</span>, len(nums)<span class="number">-1</span>  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">        mid = ((high-low) &gt;&gt; <span class="number">1</span>) + low</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> nums[mid] &lt; key:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> nums[mid] &gt; key:</span><br><span class="line">            high = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> mid == n <span class="keyword">or</span> nums[mid+<span class="number">1</span>] != key:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                low = mid + <span class="number">1</span> </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>
<h3 id="变体3-查找第一个大于等于给定值的元素"><a href="#变体3-查找第一个大于等于给定值的元素" class="headerlink" title="变体3,查找第一个大于等于给定值的元素"></a>变体3,查找第一个大于等于给定值的元素</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binarySearch3</span><span class="params">(nums,key,low,high)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> high &lt; low:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    mid = ((high - low) &gt;&gt; <span class="number">1</span>) + low</span><br><span class="line">    <span class="keyword">if</span> nums[mid] &gt;= key:</span><br><span class="line">        <span class="keyword">if</span> mid == <span class="number">0</span> <span class="keyword">or</span> nums[mid<span class="number">-1</span>] &lt; key: <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">else</span>:   <span class="keyword">return</span> binarySearch3(nums,key,low,mid<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> binarySearch3(nums,key,mid+<span class="number">1</span>,high)</span><br></pre></td></tr></table></figure>
<h3 id="变体4-查找第一个小于等于给定值的元素"><a href="#变体4-查找第一个小于等于给定值的元素" class="headerlink" title="变体4,查找第一个小于等于给定值的元素"></a>变体4,查找第一个小于等于给定值的元素</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binarySearch4</span><span class="params">(nums,key)</span>:</span></span><br><span class="line">    low,high,n = <span class="number">0</span>,len(nums)<span class="number">-1</span>,len(nums)<span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> low&lt;= high:</span><br><span class="line">        mid = ((high - low) &gt;&gt; <span class="number">1</span>) + low</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> nums[mid] &lt;= key:</span><br><span class="line">            <span class="keyword">if</span> mid == n <span class="keyword">or</span> nums[mid+<span class="number">1</span>] &gt; key: </span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            <span class="keyword">else</span>: </span><br><span class="line">                low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high = mid - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>
<h2 id="变体5-查找第一个比某元素大的元素"><a href="#变体5-查找第一个比某元素大的元素" class="headerlink" title="变体5,查找第一个比某元素大的元素"></a>变体5,查找第一个比某元素大的元素</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_first_big</span><span class="params">(nums,key)</span>:</span></span><br><span class="line">    low,high,n = <span class="number">0</span>,len(nums)<span class="number">-1</span>,len(nums)<span class="number">-1</span></span><br><span class="line">    <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">        mid = ((high-low)&gt;&gt;<span class="number">1</span>) + low</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> nums[mid] &lt;= key:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> mid == n <span class="keyword">or</span> nums[mid<span class="number">-1</span>] &lt;= key:</span><br><span class="line">                <span class="keyword">return</span> nums[mid]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                high = mid - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Data Structure and Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>Hash Table</title>
    <url>/Hash-Table/2019/08/23/</url>
    <content><![CDATA[<h2 id="散列思想"><a href="#散列思想" class="headerlink" title="散列思想"></a>散列思想</h2><p><strong>散列表用的是数组支持按照下标随机访问数据的特性，所以散列表其实就是数组的一种扩展，由数组演化而来。</strong></p>
<p>我们把<strong>key</strong>转化为数组下标的映射方法就叫作<strong>散列函数</strong>，而散列函数计算得到的值就叫作<strong>散列值</strong>。</p>
<p>我们可以总结出这样的规律：散列表用的就是数组支持按照下标随机访问的时候，时间复杂度是 O(1) 的特性。我们通过散列函数把元素的键值映射为下标，然后将数据存储在数组中对应下标的位置。当我们按照键值查询元素时，我们用同样的散列函数，将键值转化数组下标，从对应的数组下标的位置取数据。<strong>注意，key对应的数组下标存储的元素不仅仅是value，还可能有 key，比如线性探查法中，为了解决哈希冲突，就会存储[key,value] pairs.</strong></p>
<p><img src="1.png" alt></p>
<h3 id="散列函数"><a href="#散列函数" class="headerlink" title="散列函数"></a>散列函数</h3><p>设计散列函数的基本要求：</p>
<ul>
<li>散列函数计算得到的散列值是一个非负整数；</li>
<li>如果 key1 = key2，那 hash(key1) == hash(key2)；</li>
<li>如果 key1 != key2，那 hash(key1) != hash(key2)；</li>
<li>散列函数的设计不能太复杂。过于复杂的散列函数，势必会消耗很多计算时间，也就间接的影响到散列表的性能；</li>
<li>散列函数生成的值要尽可能随机并且均匀分布，这样才能避免或者最小化散列冲突</li>
</ul>
<h3 id="冲突解决方法"><a href="#冲突解决方法" class="headerlink" title="冲突解决方法"></a>冲突解决方法</h3><p>两种主要的散列冲突的解决办法，开放寻址法和链表法。这两种冲突解决办法在实际的软件开发中都非常常用。比如，Java 中 LinkedHashMap 就采用了链表法解决冲突，ThreadLocalMap 是通过线性探测的开放寻址法来解决冲突。</p>
<h4 id="开放寻址法"><a href="#开放寻址法" class="headerlink" title="开放寻址法"></a>开放寻址法</h4><ol>
<li>开放寻址法的优点。<br>开放寻址法不像链表法，需要拉很多链表。散列表中的数据都存储在数组中，可以有效地利用 CPU 缓存加快查询速度。而且，这种方法实现的散列表，序列化起来比较简单。链表法包含指针，序列化起来就没那么容易。你可不要小看序列化，很多场合都会用到的。我们后面就有一节会讲什么是数据结构序列化、如何序列化，以及为什么要序列化。</li>
<li>开放寻址法有哪些缺点。<br>用开放寻址法解决冲突的散列表，删除数据的时候比较麻烦，需要特殊标记已经删除掉的数据。而且，在开放寻址法中，所有的数据都存储在一个数组中，比起链表法来说，冲突的代价更高。所以，使用开放寻址法解决冲突的散列表，装载因子的上限不能太大。这也导致这种方法比链表法更浪费内存空间。所以，<strong>当数据量比较小、装载因子小的时候，适合采用开放寻址法</strong>。这也是 Java 中的ThreadLocalMap使用开放寻址法解决散列冲突的原因。</li>
</ol>
<h4 id="链表法"><a href="#链表法" class="headerlink" title="链表法"></a>链表法</h4><p>首先，链表法对内存的利用率比开放寻址法要高。因为链表结点可以在需要的时候再创建，并不需要像开放寻址法那样事先申请好。实际上，这一点也是我们前面讲过的链表优于数组的地方。</p>
<p>链表法比起开放寻址法，对大装载因子的容忍度更高。开放寻址法只能适用装载因子小于 1 的情况。接近 1 时，就可能会有大量的散列冲突，导致大量的探测、再散列等，性能会下降很多。但是对于链表法来说，只要散列函数的值随机均匀，即便装载因子变成 10，也就是链表的长度变长了而已，虽然查找效率有所下降，但是比起顺序查找还是快很多。</p>
<p>还记得我们之前在链表那一节讲的吗？链表因为要存储指针，所以对于比较小的对象的存储，是比较消耗内存的，还有可能会让内存的消耗翻倍。而且，因为链表中的结点是零散分布在内存中的，不是连续的，所以对 CPU 缓存是不友好的，这方面对于执行效率也有一定的影响。</p>
<p>当然，如果我们存储的是大对象，也就是说要存储的对象的大小远远大于一个指针的大小（4 个字节或者 8 个字节），那链表中指针的内存消耗在大对象面前就可以忽略了。</p>
<p>实际上，我们对链表法稍加改造，可以实现一个更加高效的散列表。那就是，<strong>我们将链表法中的链表改造为其他高效的动态数据结构，比如跳表、红黑树。这样，即便出现散列冲突，极端情况下，所有的数据都散列到同一个桶内，那最终退化成的散列表的查找时间也只不过是 O(logn)</strong>。这样也就有效避免了前面讲到的散列碰撞攻击。</p>
<p><img src="4.png" alt></p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p><a href="https://leetcode.com/problems/design-hashmap/" target="_blank" rel="noopener">706. Design HashMap</a></p>
<p>Design a HashMap without using any built-in hash table libraries.<br>To be specific, your design should include these functions:</p>
<ul>
<li>put(key, value) : Insert a (key, value) pair into the HashMap. If the value already exists in the HashMap, update the value.</li>
<li>get(key): Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key.</li>
<li>remove(key) : Remove the mapping for the value key if this map contains the mapping for the key.</li>
</ul>
<p>Note</p>
<ul>
<li>All keys and values will be in the range of [0, 1000000].</li>
<li>The number of operations will be in the range of [1, 10000].</li>
<li>Please do not use the built-in HashMap library.</li>
</ul>
<h3 id="直接寻址"><a href="#直接寻址" class="headerlink" title="直接寻址"></a>直接寻址</h3><p>直接将key作为index，实际上是使用了输入与输出完全一致的hash function。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hash</span><span class="params">(key)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> key</span><br></pre></td></tr></table></figure></p>
<p>使用完全一致的hash function 可能会造成大量空间的浪费，因为存储空间必须大于key的range。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHashMap</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Initialize your data structure here.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.table = [<span class="number">-1</span>] * <span class="number">1000000</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, key: int, value: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        value will always be non-negative.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.table[key] = value</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.table[key]</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, key: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Removes the mapping of the specified value key if this map contains a mapping for the key</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.table[key] = <span class="number">-1</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your MyHashMap object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = MyHashMap()</span></span><br><span class="line"><span class="comment"># obj.put(key,value)</span></span><br><span class="line"><span class="comment"># param_2 = obj.get(key)</span></span><br><span class="line"><span class="comment"># obj.remove(key)</span></span><br></pre></td></tr></table></figure></p>
<h2 id="线性探查法（开放寻址法）"><a href="#线性探查法（开放寻址法）" class="headerlink" title="线性探查法（开放寻址法）"></a>线性探查法（开放寻址法）</h2><p>开放寻址法的核心思想是，如果出现了散列冲突，我们就重新探测一个空闲位置，将其插入。那如何重新探测新的位置呢？</p>
<h3 id="线性探测（Linear-Probing）。"><a href="#线性探测（Linear-Probing）。" class="headerlink" title="线性探测（Linear Probing）。"></a>线性探测（Linear Probing）。</h3><p>当我们往散列表中插入数据时，如果某个数据经过散列函数散列之后，存储位置已经被占用了，我们就从当前位置开始，依次往后查找，看是否有空闲位置，直到找到为止。</p>
<ol>
<li>查询元素:SEARCH(k)<br>从 hash address 开始依次往后寻找，直到<strong>第一个为空</strong>的位置。如果到了空位置任然没有找到元素，说明元素不在 table 中。<strong>这里需要特别注意(debug 了几个小时妈的)</strong>，因为table里可能会删除元素，所以找到空位置后其实后面还可能存在元素。这里有几种解决方案。</li>
</ol>
<ul>
<li>每次查询都遍历整个表，时间复杂度高，leetocde 不能通过。</li>
<li>每次删除元素不真正删除元素，而是在删除位置添加<strong>delete</strong>标记(具体添加标记的方式自己定义)，那么查询时就可以遍历到<strong>第一个为空</strong>的位置而停止了（标记为<strong>delete</strong>的位置不为空）。<br><img src="2.png" alt></li>
</ul>
<ol>
<li>删除元素:DELETE(ele)<br>删除元素时，不能完全删除元素，需要在删除的位置标记为”deleted”。</li>
<li>插入元素:INSERT(ele)</li>
</ol>
<ul>
<li>表中不存在该key，需要找到第一个标记为<strong>空</strong>或者标记为<strong>delete</strong>的位置。</li>
<li>表中存在key，找到该key，更新value。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHashMap</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Initialize your data structure here.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.table = [<span class="keyword">None</span>] * <span class="number">10000</span></span><br><span class="line">        self.capacity = <span class="number">10000</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hash_address</span><span class="params">(self,key)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> key % self.capacity</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, key: int, value: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        value will always be non-negative.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        index = self.hash_address(key)</span><br><span class="line">        <span class="comment">## 遍历到第一个为“delete” 或者为空的位置</span></span><br><span class="line">        <span class="keyword">while</span> self.table[index] <span class="keyword">and</span> self.table[index][<span class="number">0</span>] != <span class="number">-1</span> <span class="keyword">and</span> self.table[index][<span class="number">0</span>] != key:</span><br><span class="line">            index = (index + <span class="number">1</span>) % self.capacity</span><br><span class="line">        self.table[index] = [key,value]</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        index = self.hash_address(key)</span><br><span class="line">        <span class="comment">## 遍历到第一个为空的位置</span></span><br><span class="line">        <span class="keyword">while</span> self.table[index]:</span><br><span class="line">            <span class="keyword">if</span> self.table[index][<span class="number">0</span>] == key:</span><br><span class="line">                <span class="keyword">return</span> self.table[index][<span class="number">1</span>]</span><br><span class="line">            index = (index + <span class="number">1</span>) % self.capacity</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, key: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Removes the mapping of the specified value key if this map contains a mapping for the key</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        index = self.hash_address(key)</span><br><span class="line">        <span class="keyword">while</span> self.table[index]:</span><br><span class="line">            <span class="keyword">if</span> self.table[index][<span class="number">0</span>] == key:</span><br><span class="line">                <span class="comment">## 删除元素时，只是把 key 置为-1，相当于标记 delete</span></span><br><span class="line">                self.table[index][<span class="number">0</span>] = <span class="number">-1</span></span><br><span class="line">            index = (index + <span class="number">1</span>) % self.capacity</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your MyHashMap object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = MyHashMap()</span></span><br><span class="line"><span class="comment"># obj.put(key,value)</span></span><br><span class="line"><span class="comment"># param_2 = obj.get(key)</span></span><br><span class="line"><span class="comment"># obj.remove(key)</span></span><br></pre></td></tr></table></figure>
<p>线性探测法其实存在很大问题。当散列表中插入的数据越来越多时，散列冲突发生的可能性就会越来越大，空闲位置会越来越少，线性探测的时间就会越来越久。极端情况下，我们可能需要探测整个散列表，所以最坏情况下的时间复杂度为 O(n)。同理，在删除和查找时，也有可能会线性探测整张散列表，才能找到要查找或者删除的数据。</p>
<p>对于开放寻址冲突解决方法，除了线性探测方法之外，还有另外两种比较经典的探测方法，二次探测（Quadratic probing）和双重散列（Double hashing）。</p>
<h3 id="二次探测"><a href="#二次探测" class="headerlink" title="二次探测"></a>二次探测</h3><p>所谓二次探测，跟线性探测很像，线性探测每次探测的步长是 1，那它探测的下标序列就是 hash(key)+0，hash(key)+1，hash(key)+2……而二次探测探测的步长就变成了原来的“二次方”，也就是说，它探测的下标序列就是 hash(key)+0，hash(key)+12，hash(key)+22……</p>
<h3 id="双重散列"><a href="#双重散列" class="headerlink" title="双重散列"></a>双重散列</h3><p>所谓双重散列，意思就是不仅要使用一个散列函数。我们使用一组散列函数 hash1(key)，hash2(key)，hash3(key)……我们先用第一个散列函数，如果计算得到的存储位置已经被占用，再用第二个散列函数，依次类推，直到找到空闲的存储位置。</p>
<h3 id="装载因子"><a href="#装载因子" class="headerlink" title="装载因子"></a>装载因子</h3><p>不管采用哪种探测方法，当散列表中空闲位置不多的时候，散列冲突的概率就会大大提高。为了尽可能保证散列表的操作效率，一般情况下，我们会尽可能保证散列表中有一定比例的空闲槽位。我们用装载因子（load factor）来表示空位的多少。</p>
<p>装载因子的计算公式是：</p>
<blockquote>
<p>散列表的装载因子 = 填入表中的元素个数 / 散列表的长度</p>
</blockquote>
<p>装载因子越大，说明空闲位置越少，冲突越多，散列表的性能会下降。</p>
<h2 id="链表法-1"><a href="#链表法-1" class="headerlink" title="链表法"></a>链表法</h2><p><img src="3.png" alt><br>链表法是一种更加常用的散列冲突解决办法，相比开放寻址法，它要简单很多。我们来看这个图，在散列表中，每个“桶（bucket）”或者“槽（slot）”会对应一条链表，所有散列值相同的元素我们都放到相同槽位对应的链表中。</p>
<p>当插入的时候，我们只需要通过散列函数计算出对应的散列槽位，将其插入到对应链表中即可，所以插入的时间复杂度是 O(1)。当查找、删除一个元素时，我们同样通过散列函数计算出对应的槽，然后遍历链表查找或者删除。那查找或删除操作的时间复杂度是多少呢？</p>
<p>实际上，这两个操作的时间复杂度跟链表的长度 k 成正比，也就是 O(k)。对于散列比较均匀的散列函数来说，理论上讲，k=n/m，其中 n 表示散列中数据的个数，m 表示散列表中“槽”的个数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHashMap</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Initialize your data structure here.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.buckets = <span class="number">1000</span>                       <span class="comment"># 键值块，哈希桶</span></span><br><span class="line">        self.itemsPerBuckect = <span class="number">1001</span>               <span class="comment"># 产生冲突的“拉链”块</span></span><br><span class="line">        self.hashmap = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> range(self.buckets)]        <span class="comment"># _表示临时变量，仅用一次，后面无需用到</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 散列函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hash</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> key % self.buckets                 <span class="comment"># 取buckets的index</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理冲突的函数 (ucket 相同，计算key在bucket里不同的位置)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pos</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> key // self.buckets                <span class="comment"># 向下取整，返回商的整数部分</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        value will always be non-negative.</span></span><br><span class="line"><span class="string">        :type key: int</span></span><br><span class="line"><span class="string">        :type value: int</span></span><br><span class="line"><span class="string">        :rtype: void</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        hashkey = self.hash(key)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.hashmap[hashkey]:                </span><br><span class="line">            self.hashmap[hashkey] = [<span class="keyword">None</span>] * self.itemsPerBuckect</span><br><span class="line">        self.hashmap[hashkey][self.pos(key)] = value</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key</span></span><br><span class="line"><span class="string">        :type key: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        hashkey = self.hash(key)</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">not</span> self.hashmap[hashkey]) <span class="keyword">or</span> self.hashmap[hashkey][self.pos(key)] == <span class="keyword">None</span>:      <span class="comment"># 没有找到这个值</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.hashmap[hashkey][self.pos(key)]</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Removes the mapping of the specified value key if this map contains a mapping for the key</span></span><br><span class="line"><span class="string">        :type key: int</span></span><br><span class="line"><span class="string">        :rtype: void</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        hashkey = self.hash(key)</span><br><span class="line">        <span class="keyword">if</span> self.hashmap[hashkey]:</span><br><span class="line">            self.hashmap[hashkey][self.pos(key)] = <span class="keyword">None</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="comment"># Your MyHashMap object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = MyHashMap()</span></span><br><span class="line"><span class="comment"># obj.put(key,value)</span></span><br><span class="line"><span class="comment"># param_2 = obj.get(key)</span></span><br><span class="line"><span class="comment"># obj.remove(key)</span></span><br></pre></td></tr></table></figure>
<h2 id="工业级散列表举例分析"><a href="#工业级散列表举例分析" class="headerlink" title="工业级散列表举例分析"></a>工业级散列表举例分析</h2><p>刚刚我讲了实现一个工业级散列表需要涉及的一些关键技术，现在，我就拿一个具体的例子，Java 中的 HashMap 这样一个工业级的散列表，来具体看下，这些技术是怎么应用的。</p>
<ol>
<li>初始大小<br>HashMap 默认的初始大小是 16，当然这个默认值是可以设置的，如果事先知道大概的数据量有多大，可以通过修改默认初始大小，减少动态扩容的次数，这样会大大提高 HashMap 的性能。</li>
<li>装载因子和动态扩容<br>最大装载因子默认是 0.75，当 HashMap 中元素个数超过 0.75*capacity（capacity 表示散列表的容量）的时候，就会启动扩容，每次扩容都会扩容为原来的两倍大小。</li>
<li>散列冲突解决方法<br>HashMap 底层采用链表法来解决冲突。即使负载因子和散列函数设计得再合理，也免不了会出现拉链过长的情况，一旦出现拉链过长，则会严重影响 HashMap 的性能。<br>于是，在 JDK1.8 版本中，为了对 HashMap 做进一步优化，我们引入了红黑树。而当链表长度太长（默认超过 8）时，链表就转换为红黑树。我们可以利用红黑树快速增删改查的特点，提高 HashMap 的性能。当红黑树结点个数少于 8 个的时候，又会将红黑树转化为链表。因为在数据量较小的情况下，红黑树要维护平衡，比起链表来，性能上的优势并不明显。</li>
<li>散列函数<br>散列函数的设计并不复杂，追求的是简单高效、分布均匀。我把它摘抄出来，你可以看看。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> h = key.hashCode()；</span><br><span class="line">  <span class="keyword">return</span> (h ^ (h &gt;&gt;&gt; <span class="number">16</span>)) &amp; (capitity -<span class="number">1</span>); <span class="comment">//capicity 表示散列表的大小</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中，hashCode() 返回的是 Java 对象的 hash code。比如 String 类型的对象的 hashCode() 就是下面这样：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> var1 = <span class="keyword">this</span>.hash;</span><br><span class="line">  <span class="keyword">if</span>(var1 == <span class="number">0</span> &amp;&amp; <span class="keyword">this</span>.value.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">char</span>[] var2 = <span class="keyword">this</span>.value;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> var3 = <span class="number">0</span>; var3 &lt; <span class="keyword">this</span>.value.length; ++var3) &#123;</span><br><span class="line">      var1 = <span class="number">31</span> * var1 + var2[var3];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.hash = var1;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> var1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>reference 数据结构与算法之美 王争</p>
</blockquote>
]]></content>
      <categories>
        <category>Data Structure and Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>Monotone Stack</title>
    <url>/Monotone-Stack/2019/08/16/</url>
    <content><![CDATA[<p>所谓的单调栈 Monotone Stack，就是栈内元素都是单调递增或者单调递减的。单调栈的一大优势就是线性的时间复杂度，所有的元素只会进栈一次，而且一旦出栈后就不会再进来了。</p>
<h3 id="google-interview"><a href="#google-interview" class="headerlink" title="google interview"></a>google interview</h3><blockquote>
<p>给一个数组，返回一个大小相同的数组。返回的数组的第i个位置的值应当是，对于原数组中的第i个元素，至少往右走多少步，才能遇到一个比自己大的元素（如果之后没有比自己大的元素，或者已经是最后一个元素，则在返回数组的对应位置放上-1）<br>input: 5,3,1,2,4<br>return: -1 3 1 1 -1</p>
</blockquote>
<ul>
<li>维护一个单调递减栈</li>
<li>每个元素出栈，是说明它找到了它在原数组中的next greater element.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(array)</span>:</span></span><br><span class="line">    res = [<span class="number">-1</span>] * len(array)</span><br><span class="line">    max_stack = []</span><br><span class="line"></span><br><span class="line">    num2ind = &#123;num:index <span class="keyword">for</span> index,num <span class="keyword">in</span> enumerate(array)&#125;</span><br><span class="line"></span><br><span class="line">    array = array[::<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">while</span> array:</span><br><span class="line">        num = array.pop()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> max_stack <span class="keyword">and</span> max_stack[<span class="number">-1</span>] &lt; num:</span><br><span class="line">            item = max_stack.pop()</span><br><span class="line">            distance = num2ind[num] - num2ind[item]</span><br><span class="line">            res[num2ind[item]] = distance</span><br><span class="line">        max_stack.append(num)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">array = [<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line">print(solution((array))) <span class="comment"># -&gt; [-1, 3, 1, 1, -1]</span></span><br></pre></td></tr></table></figure>
<h2 id="Trapping-Rain-Water"><a href="#Trapping-Rain-Water" class="headerlink" title="Trapping Rain Water"></a>Trapping Rain Water</h2><p><a href="https://leetcode.com/problems/trapping-rain-water/" target="_blank" rel="noopener">Trapping Rain Water</a> Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [0,1,0,2,1,0,1,3,2,1,2,1]</span><br><span class="line">Output: 6</span><br></pre></td></tr></table></figure>
<p><img src="1.png" alt><br>The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. Thanks Marcos for contributing this image!</p>
<ul>
<li>维护一个单调递减栈，每当新的高度小于等于栈顶高度，则把当前高度的坐标压入栈。</li>
<li>注意我们不直接把高度压入栈，而是把坐标压入栈，这样方便我们在后来算水平距离。</li>
<li>当我们遇到比栈顶高度大的时候，就说明有可能会有坑存在，可以装雨水。此时我们栈里至少有一个高度，如果只有一个的话，那么不能形成坑，我们直接跳过。</li>
<li>如果多余一个或多个的话，那么此时把栈顶元素取出来当作坑，记录栈顶元素的高度t。不断弹出栈顶元素直到栈顶元素不等于坑的高度。</li>
<li><strong>此时栈顶元素是左边界</strong>，当前高度是右边界，只要取二者较小的，减去坑的高度，长度就是右边界坐标减去左边界坐标再减1，二者相乘就是盛水量。</li>
<li>注意不要弹出左边界，一下次该左边界可能成为坑的高度。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">trap</span><span class="params">(self, height: List[int])</span> -&gt; int:</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        area = <span class="number">0</span></span><br><span class="line">        s = []</span><br><span class="line">        <span class="keyword">while</span> i &lt; len(height):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> s <span class="keyword">or</span> height[i] &lt;= height[s[<span class="number">-1</span>]]:</span><br><span class="line">                s.append(i)</span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                t = s.pop()</span><br><span class="line">                <span class="keyword">while</span> s <span class="keyword">and</span> s[<span class="number">-1</span>] == t:</span><br><span class="line">                    s.pop()</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> s: </span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                print(i,s)</span><br><span class="line">                area += (i-s[<span class="number">-1</span>]<span class="number">-1</span>) * (min(height[i], height[s[<span class="number">-1</span>]]) - height[t])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> area</span><br></pre></td></tr></table></figure>
<p><img src="2.jpg" alt></p>
<h2 id="Largest-Rectangle-in-Histogram"><a href="#Largest-Rectangle-in-Histogram" class="headerlink" title="Largest Rectangle in Histogram"></a>Largest Rectangle in Histogram</h2><p>Given n non-negative integers representing the histogram’s bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.</p>
<p><img src="3.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [2,1,5,6,2,3]</span><br><span class="line">Output: 10</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">largestRectangleArea</span><span class="params">(self, heights: List[int])</span> -&gt; int:</span></span><br><span class="line">        max_area = <span class="number">0</span></span><br><span class="line">        max_stack = []</span><br><span class="line">        heights.append(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(heights)):</span><br><span class="line">            <span class="keyword">while</span> max_stack <span class="keyword">and</span> heights[max_stack[<span class="number">-1</span>]] &gt;= heights[i]:</span><br><span class="line">                cur = max_stack.pop()</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> max_stack: </span><br><span class="line">                    max_area = max(max_area, heights[cur] * i)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    max_area = max(max_area,heights[cur]*(i - max_stack[<span class="number">-1</span>] - <span class="number">1</span>))</span><br><span class="line">            max_stack.append(i)       </span><br><span class="line">        <span class="keyword">return</span> max_area</span><br></pre></td></tr></table></figure>
<p><img src="4.jpg" alt></p>
]]></content>
      <categories>
        <category>Data Structure and Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>Some applications about stack</title>
    <url>/Some-applications-about-stack/2019/08/15/</url>
    <content><![CDATA[<blockquote>
<p>极客时间版权所有: <a href="https://time.geekbang.org/column/article/41222" target="_blank" rel="noopener">https://time.geekbang.org/column/article/41222</a></p>
</blockquote>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>当某个数据集合只涉及到在一端插入和删除数据，并且满足后进先出、先进后出的特性，我们就应该首选“栈”这种数据结构。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基于数组实现的顺序栈</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayStack</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String[] items;  <span class="comment">// 数组</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> count;       <span class="comment">// 栈中元素个数</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> n;           <span class="comment">// 栈的大小</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化数组，申请一个大小为 n 的数组空间</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ArrayStack</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.items = <span class="keyword">new</span> String[n];</span><br><span class="line">    <span class="keyword">this</span>.n = n;</span><br><span class="line">    <span class="keyword">this</span>.count = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 入栈操作</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">push</span><span class="params">(String item)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 数组空间不够了，直接返回 false，入栈失败。</span></span><br><span class="line">    <span class="keyword">if</span> (count == n) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">// 将 item 放到下标为 count 的位置，并且 count 加一</span></span><br><span class="line">    items[count] = item;</span><br><span class="line">    ++count;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 出栈操作</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 栈为空，则直接返回 null</span></span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 返回下标为 count-1 的数组元素，并且栈中元素个数 count 减一</span></span><br><span class="line">    String tmp = items[count-<span class="number">1</span>];</span><br><span class="line">    --count;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul>
<li>插入 O(1)</li>
<li>删除 O(1)</li>
</ul>
<p>当涉及到动态内存申请，比如利用数组实现到顺序栈，当数组空间不够时，需要重新申请一块更大的内存，同时将原有的数据全部拷贝进去。每次进行 k-1 个插入时间复杂度为O(1)的动作，就需要进行一次需要进行k个数据搬移的插入动作，时间复杂度为O(k)。利用摊还分析的方法，k次插入动作的时间复杂度依然为O(1)。</p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="表达式求值"><a href="#表达式求值" class="headerlink" title="表达式求值"></a>表达式求值</h3><blockquote>
<p>求 34+13*9+44-12/3</p>
</blockquote>
<p>实际上，编译器通过两个栈来实现。其中一个是操作数栈，另外一个是运算符栈。从左到右遍历时，</p>
<ul>
<li>遇到数字就直接压入操作数栈；</li>
<li>遇到运算符就与栈顶的运算符元素进行比较，分为两种情况讨论：<ul>
<li>如果比栈顶运算符的优先级低或者相同，取出栈顶运算符，同时从操作数栈的栈顶取两个操作数，进行计算，然后将结果入栈。</li>
<li>如果运算符优先级高，直接入栈。<br><img src="1.png" alt></li>
</ul>
</li>
</ul>
<h2 id="括号匹配"><a href="#括号匹配" class="headerlink" title="括号匹配"></a>括号匹配</h2><p>从左到右依次扫描字符串，用栈来保存没有匹配的左括号。扫描到左括号时，压栈；扫描到右括号时，检查与栈顶的左括号是否匹配，若匹配，左括号出栈，继续扫描，如果不匹配，字符串非法。</p>
]]></content>
      <categories>
        <category>Data Structure and Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>Style Transfer</title>
    <url>/Style-Transfer/2019/08/14/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!lspci | grep -i nvidia</span><br></pre></td></tr></table></figure>
<pre><code>02:00.0 3D controller: NVIDIA Corporation GP100GL [Tesla P100 PCIe 16GB] (rev a1)
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">"CUDA_VISIBLE_DEVICES"</span>] = <span class="string">"0"</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> fmin_l_bfgs_b</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> backend <span class="keyword">as</span> K</span><br><span class="line"><span class="keyword">from</span> keras.preprocessing.image <span class="keyword">import</span> load_img, save_img, img_to_array</span><br><span class="line"><span class="keyword">from</span> keras.applications <span class="keyword">import</span> vgg19</span><br><span class="line"><span class="keyword">from</span> keras.optimizers <span class="keyword">import</span> Adam</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> keras.preprocessing <span class="keyword">import</span> image</span><br><span class="line"><span class="keyword">from</span> keras.applications.vgg19 <span class="keyword">import</span> preprocess_input</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Model</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br></pre></td></tr></table></figure>
<pre><code>Using TensorFlow backend.
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">base_image_path = <span class="string">"dora.png"</span></span><br><span class="line">style_reference_image_path = <span class="string">"star_sky.jpg"</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">20</span>))</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line">plt.imshow(Image.open(base_image_path))</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">plt.imshow(Image.open(style_reference_image_path))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">plt.imshow(Image.open(<span class="string">"dora_at_iteration_9.png"</span>))</span><br></pre></td></tr></table></figure>
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f4a2d7e0320&gt;
</code></pre><p><img src="output_4_1.png" alt="png"></p>
<p><img src="vgg19.png" alt></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preprocess_image</span><span class="params">(image_path)</span>:</span></span><br><span class="line">    img = load_img(image_path, target_size=(img_nrows, img_ncols))</span><br><span class="line">    img = img_to_array(img)</span><br><span class="line">    img = np.expand_dims(img, axis=<span class="number">0</span>)</span><br><span class="line">    img = preprocess_input(img)</span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deprocess_image</span><span class="params">(x)</span>:</span></span><br><span class="line">    x = x.reshape((img_nrows, img_ncols, <span class="number">3</span>))</span><br><span class="line">    <span class="comment"># Remove zero-center by mean pixel</span></span><br><span class="line">    x[:, :, <span class="number">0</span>] += <span class="number">103.939</span></span><br><span class="line">    x[:, :, <span class="number">1</span>] += <span class="number">116.779</span></span><br><span class="line">    x[:, :, <span class="number">2</span>] += <span class="number">123.68</span></span><br><span class="line">    <span class="comment"># 'BGR'-&gt;'RGB'</span></span><br><span class="line">    x = x[:, :, ::<span class="number">-1</span>]</span><br><span class="line">    x = np.clip(x, <span class="number">0</span>, <span class="number">255</span>).astype(<span class="string">'uint8'</span>)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract_features</span><span class="params">(x, content_layers, style_layers)</span>:</span></span><br><span class="line">    contents = []</span><br><span class="line">    styles = []</span><br><span class="line">    <span class="keyword">for</span> layer <span class="keyword">in</span> model.layers:        </span><br><span class="line">        x = layer(x)</span><br><span class="line">        <span class="keyword">if</span> layer.name <span class="keyword">in</span> content_layers:</span><br><span class="line">            contents.append(x)</span><br><span class="line">        <span class="keyword">if</span> layer.name <span class="keyword">in</span> style_layers:</span><br><span class="line">            styles.append(x)</span><br><span class="line">    <span class="keyword">return</span> contents,styles</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_contents</span><span class="params">(image)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    extract feature from image</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    x = image.img_to_array(content_image)</span><br><span class="line">    x = np.expand_dims(x, axis=<span class="number">0</span>)</span><br><span class="line">    x = preprocess_input(x)</span><br><span class="line">    y = extract_features(x, content_layers, style_layers)</span><br><span class="line">    <span class="keyword">return</span> x,y</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">total_variation_weight = <span class="number">1</span></span><br><span class="line">style_weight = <span class="number">1000</span></span><br><span class="line">content_weight = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">width, height = load_img(base_image_path).size</span><br><span class="line">img_nrows = <span class="number">400</span></span><br><span class="line">img_ncols = int(width * img_nrows / height)</span><br><span class="line"></span><br><span class="line">base_image = K.constant(preprocess_image(base_image_path))</span><br><span class="line">style_reference_image = K.constant(preprocess_image(style_reference_image_path))</span><br><span class="line">combination_image = K.placeholder((<span class="number">1</span>, img_nrows, img_ncols, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">input_tensor = K.concatenate([base_image,</span><br><span class="line">                              style_reference_image,</span><br><span class="line">                              combination_image], axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<pre><code>WARNING: Logging before flag parsing goes to stderr.
W0814 07:28:44.852089 140562742982464 deprecation_wrapper.py:119] From /home/rczhang/miniconda3/envs/ali_comp/lib/python3.6/site-packages/keras/backend/tensorflow_backend.py:517: The name tf.placeholder is deprecated. Please use tf.compat.v1.placeholder instead.
</code></pre><h3 id="匹配方案"><a href="#匹配方案" class="headerlink" title="匹配方案"></a>匹配方案</h3><ul>
<li>使用每个卷积块的第一个卷积层输出来匹配样式(称 之为样式层)，和第四块中的最后一个卷积层来匹配内容(称之为内容层)</li>
<li>这里我们选取比较靠后的内容层，以避免合成 图像保留过多内容图像的细节</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model = vgg19.VGG19(input_tensor=input_tensor,</span><br><span class="line">                    weights=<span class="string">'imagenet'</span>, include_top=<span class="keyword">False</span>)</span><br><span class="line">print(<span class="string">'Model loaded.'</span>)</span><br><span class="line">model.summary()</span><br></pre></td></tr></table></figure>
<pre><code>W0814 07:28:44.914284 140562742982464 deprecation_wrapper.py:119] From /home/rczhang/miniconda3/envs/ali_comp/lib/python3.6/site-packages/keras/backend/tensorflow_backend.py:74: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.

W0814 07:28:44.925884 140562742982464 deprecation_wrapper.py:119] From /home/rczhang/miniconda3/envs/ali_comp/lib/python3.6/site-packages/keras/backend/tensorflow_backend.py:4138: The name tf.random_uniform is deprecated. Please use tf.random.uniform instead.

W0814 07:28:45.143045 140562742982464 deprecation_wrapper.py:119] From /home/rczhang/miniconda3/envs/ali_comp/lib/python3.6/site-packages/keras/backend/tensorflow_backend.py:3976: The name tf.nn.max_pool is deprecated. Please use tf.nn.max_pool2d instead.

W0814 07:28:48.193835 140562742982464 deprecation_wrapper.py:119] From /home/rczhang/miniconda3/envs/ali_comp/lib/python3.6/site-packages/keras/backend/tensorflow_backend.py:174: The name tf.get_default_session is deprecated. Please use tf.compat.v1.get_default_session instead.

W0814 07:28:48.205155 140562742982464 deprecation_wrapper.py:119] From /home/rczhang/miniconda3/envs/ali_comp/lib/python3.6/site-packages/keras/backend/tensorflow_backend.py:181: The name tf.ConfigProto is deprecated. Please use tf.compat.v1.ConfigProto instead.



Model loaded.
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
input_1 (InputLayer)         (None, None, None, 3)     0         
_________________________________________________________________
block1_conv1 (Conv2D)        (None, None, None, 64)    1792      
_________________________________________________________________
block1_conv2 (Conv2D)        (None, None, None, 64)    36928     
_________________________________________________________________
block1_pool (MaxPooling2D)   (None, None, None, 64)    0         
_________________________________________________________________
block2_conv1 (Conv2D)        (None, None, None, 128)   73856     
_________________________________________________________________
block2_conv2 (Conv2D)        (None, None, None, 128)   147584    
_________________________________________________________________
block2_pool (MaxPooling2D)   (None, None, None, 128)   0         
_________________________________________________________________
block3_conv1 (Conv2D)        (None, None, None, 256)   295168    
_________________________________________________________________
block3_conv2 (Conv2D)        (None, None, None, 256)   590080    
_________________________________________________________________
block3_conv3 (Conv2D)        (None, None, None, 256)   590080    
_________________________________________________________________
block3_conv4 (Conv2D)        (None, None, None, 256)   590080    
_________________________________________________________________
block3_pool (MaxPooling2D)   (None, None, None, 256)   0         
_________________________________________________________________
block4_conv1 (Conv2D)        (None, None, None, 512)   1180160   
_________________________________________________________________
block4_conv2 (Conv2D)        (None, None, None, 512)   2359808   
_________________________________________________________________
block4_conv3 (Conv2D)        (None, None, None, 512)   2359808   
_________________________________________________________________
block4_conv4 (Conv2D)        (None, None, None, 512)   2359808   
_________________________________________________________________
block4_pool (MaxPooling2D)   (None, None, None, 512)   0         
_________________________________________________________________
block5_conv1 (Conv2D)        (None, None, None, 512)   2359808   
_________________________________________________________________
block5_conv2 (Conv2D)        (None, None, None, 512)   2359808   
_________________________________________________________________
block5_conv3 (Conv2D)        (None, None, None, 512)   2359808   
_________________________________________________________________
block5_conv4 (Conv2D)        (None, None, None, 512)   2359808   
_________________________________________________________________
block5_pool (MaxPooling2D)   (None, None, None, 512)   0         
=================================================================
Total params: 20,024,384
Trainable params: 20,024,384
Non-trainable params: 0
_________________________________________________________________
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">content_layers = <span class="string">"block5_conv4"</span></span><br><span class="line">style_layers = [<span class="string">"block1_conv1"</span>,<span class="string">"block2_conv1"</span>,<span class="string">"block3_conv1"</span>,<span class="string">"block4_conv1"</span>,<span class="string">"block5_conv1"</span>]</span><br><span class="line">outputs_dict = dict([(layer.name, layer.output) <span class="keyword">for</span> layer <span class="keyword">in</span> model.layers])</span><br></pre></td></tr></table></figure>
<h2 id="Loss"><a href="#Loss" class="headerlink" title="Loss"></a>Loss</h2><ul>
<li>Content loss</li>
<li>Style loss<ul>
<li>对于样式，我们可以简单将它看成是像素点在每个通道的统计分布。例如要匹配两张图像的样式， 我们可以匹配这两张图像在 RGB 这三个通道上的直方图。更一般的，假设卷积层的输出格式是c × h × w，既(通道，高，宽)。那么我们可以把它变形成 c × hw 的二维数组，并将它看成是一 个维度为 c 的随机变量采样到的 hw 个点。所谓的样式匹配就是使得两个 c 维随机变量统计分布 一致。匹配统计分布常用的做法是冲量匹配，就是说使得他们有一样的均值，协方差，和其他高维的冲量。为了计算简单起⻅，我们只匹配二阶信息，即协方差。</li>
</ul>
</li>
</ul>
<h2 id="Noise-reduction"><a href="#Noise-reduction" class="headerlink" title="Noise reduction"></a>Noise reduction</h2><p>当我们使用靠近输出层的神经层输出来匹配时，经常可以观察到学到的合成图像里面有大量高 频噪音，即有特别亮或者暗的颗粒像素。一种常用的降噪方法是总变差降噪(total variation denoising)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gram_matrix</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> K.ndim(x) == <span class="number">3</span></span><br><span class="line">    <span class="keyword">if</span> K.image_data_format() == <span class="string">'channels_first'</span>:</span><br><span class="line">        features = K.batch_flatten(x)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        features = K.batch_flatten(K.permute_dimensions(x, (<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>)))</span><br><span class="line">    gram = K.dot(features, K.transpose(features))</span><br><span class="line">    <span class="keyword">return</span> gram</span><br><span class="line"></span><br><span class="line"><span class="comment"># the "style loss" is designed to maintain</span></span><br><span class="line"><span class="comment"># the style of the reference image in the generated image.</span></span><br><span class="line"><span class="comment"># It is based on the gram matrices (which capture style) of</span></span><br><span class="line"><span class="comment"># feature maps from the style reference image</span></span><br><span class="line"><span class="comment"># and from the generated image</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">style_loss</span><span class="params">(style, combination)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> K.ndim(style) == <span class="number">3</span></span><br><span class="line">    <span class="keyword">assert</span> K.ndim(combination) == <span class="number">3</span></span><br><span class="line">    S = gram_matrix(style)</span><br><span class="line">    C = gram_matrix(combination)</span><br><span class="line">    channels = <span class="number">3</span></span><br><span class="line">    size = img_nrows * img_ncols</span><br><span class="line">    <span class="keyword">return</span> K.sum(K.square(S - C)) / (<span class="number">4.0</span> * (channels ** <span class="number">2</span>) * (size ** <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># an auxiliary loss function</span></span><br><span class="line"><span class="comment"># designed to maintain the "content" of the</span></span><br><span class="line"><span class="comment"># base image in the generated image</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">content_loss</span><span class="params">(base, combination)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> K.sum(K.square(combination - base))</span><br><span class="line"></span><br><span class="line"><span class="comment"># the 3rd loss function, total variation loss,</span></span><br><span class="line"><span class="comment"># designed to keep the generated image locally coherent</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">total_variation_loss</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> K.ndim(x) == <span class="number">4</span></span><br><span class="line">    <span class="keyword">if</span> K.image_data_format() == <span class="string">'channels_first'</span>:</span><br><span class="line">        a = K.square(</span><br><span class="line">            x[:, :, :img_nrows - <span class="number">1</span>, :img_ncols - <span class="number">1</span>] - x[:, :, <span class="number">1</span>:, :img_ncols - <span class="number">1</span>])</span><br><span class="line">        b = K.square(</span><br><span class="line">            x[:, :, :img_nrows - <span class="number">1</span>, :img_ncols - <span class="number">1</span>] - x[:, :, :img_nrows - <span class="number">1</span>, <span class="number">1</span>:])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        a = K.square(</span><br><span class="line">            x[:, :img_nrows - <span class="number">1</span>, :img_ncols - <span class="number">1</span>, :] - x[:, <span class="number">1</span>:, :img_ncols - <span class="number">1</span>, :])</span><br><span class="line">        b = K.square(</span><br><span class="line">            x[:, :img_nrows - <span class="number">1</span>, :img_ncols - <span class="number">1</span>, :] - x[:, :img_nrows - <span class="number">1</span>, <span class="number">1</span>:, :])</span><br><span class="line">    <span class="keyword">return</span> K.sum(K.pow(a + b, <span class="number">1.25</span>))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">loss = K.variable(<span class="number">0.0</span>)</span><br><span class="line">content_layers_features = outputs_dict[content_layers]</span><br><span class="line">base_image_features = content_layers_features[<span class="number">0</span>, :, :, :]</span><br><span class="line">combination_features = content_layers_features[<span class="number">2</span>, :, :, :]</span><br><span class="line">loss += content_weight * content_loss(base_image_features,</span><br><span class="line">                                      combination_features)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> layer_name <span class="keyword">in</span> style_layers:</span><br><span class="line">    layer_features = outputs_dict[layer_name]</span><br><span class="line">    style_reference_features = layer_features[<span class="number">1</span>, :, :, :]</span><br><span class="line">    combination_features = layer_features[<span class="number">2</span>, :, :, :]</span><br><span class="line">    sl = style_loss(style_reference_features, combination_features)</span><br><span class="line">    loss += (style_weight / len(style_layers)) * sl</span><br><span class="line">loss += total_variation_weight * total_variation_loss(combination_image)</span><br><span class="line">grads = K.gradients(loss, combination_image)</span><br></pre></td></tr></table></figure>
<pre><code>W0814 07:28:58.561622 140562742982464 variables.py:2429] Variable += will be deprecated. Use variable.assign_add if you want assignment to the variable value or &#39;x = x + y&#39; if you want a new python Tensor object.
W0814 07:29:00.537572 140562742982464 deprecation.py:323] From /home/rczhang/miniconda3/envs/ali_comp/lib/python3.6/site-packages/tensorflow/python/ops/math_grad.py:1205: add_dispatch_support.&lt;locals&gt;.wrapper (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.
Instructions for updating:
Use tf.where in 2.0, which has the same broadcast rule as np.where
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">outputs = [loss]</span><br><span class="line"><span class="keyword">if</span> isinstance(grads, (list, tuple)):</span><br><span class="line">    outputs += grads</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    outputs.append(grads)</span><br><span class="line"></span><br><span class="line">f_outputs = K.function([combination_image], outputs)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eval_loss_and_grads</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> K.image_data_format() == <span class="string">'channels_first'</span>:</span><br><span class="line">        x = x.reshape((<span class="number">1</span>, <span class="number">3</span>, img_nrows, img_ncols))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        x = x.reshape((<span class="number">1</span>, img_nrows, img_ncols, <span class="number">3</span>))</span><br><span class="line">    outs = f_outputs([x])</span><br><span class="line">    loss_value = outs[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> len(outs[<span class="number">1</span>:]) == <span class="number">1</span>:</span><br><span class="line">        grad_values = outs[<span class="number">1</span>].flatten().astype(<span class="string">'float64'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        grad_values = np.array(outs[<span class="number">1</span>:]).flatten().astype(<span class="string">'float64'</span>)</span><br><span class="line">    <span class="keyword">return</span> loss_value, grad_values</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Evaluator</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.loss_value = <span class="keyword">None</span></span><br><span class="line">        self.grads_values = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">loss</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">assert</span> self.loss_value <span class="keyword">is</span> <span class="keyword">None</span></span><br><span class="line">        loss_value, grad_values = eval_loss_and_grads(x)</span><br><span class="line">        self.loss_value = loss_value</span><br><span class="line">        self.grad_values = grad_values</span><br><span class="line">        <span class="keyword">return</span> self.loss_value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">grads</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">assert</span> self.loss_value <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span></span><br><span class="line">        grad_values = np.copy(self.grad_values)</span><br><span class="line">        self.loss_value = <span class="keyword">None</span></span><br><span class="line">        self.grad_values = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">return</span> grad_values</span><br><span class="line"></span><br><span class="line">evaluator = Evaluator()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">iterations = <span class="number">100</span></span><br><span class="line">result_prefix = <span class="string">"chenzai"</span></span><br><span class="line">x = preprocess_image(base_image_path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(iterations):</span><br><span class="line">    print(<span class="string">'Start of iteration'</span>, i)</span><br><span class="line">    x, min_val, info = fmin_l_bfgs_b(evaluator.loss, x.flatten(),</span><br><span class="line">                                     fprime=evaluator.grads, maxfun=<span class="number">20</span>)</span><br><span class="line">    print(<span class="string">'Current loss value:'</span>, min_val)</span><br><span class="line">    <span class="comment"># save current generated image</span></span><br><span class="line">    img = deprocess_image(x.copy())</span><br><span class="line">    fname = result_prefix + <span class="string">'_at_iteration_%d.png'</span> % i</span><br><span class="line">    save_img(fname, img)</span><br><span class="line">    print(<span class="string">'Image saved as'</span>, fname)</span><br></pre></td></tr></table></figure>
<pre><code>Start of iteration 0
Current loss value: 1674930200000.0
Image saved as chenzai_at_iteration_0.png
Start of iteration 1
Current loss value: 717802100000.0
Image saved as chenzai_at_iteration_1.png
Start of iteration 2
Current loss value: 454865100000.0
Image saved as chenzai_at_iteration_2.png
Start of iteration 3
Current loss value: 328861320000.0
Image saved as chenzai_at_iteration_3.png
Start of iteration 4
Current loss value: 268055990000.0
Image saved as chenzai_at_iteration_4.png
Start of iteration 5
Current loss value: 222694330000.0
Image saved as chenzai_at_iteration_5.png
Start of iteration 6
Current loss value: 191597500000.0
Image saved as chenzai_at_iteration_6.png
Start of iteration 7
Current loss value: 170507350000.0
Image saved as chenzai_at_iteration_7.png
Start of iteration 8
Current loss value: 151088100000.0
Image saved as chenzai_at_iteration_8.png
Start of iteration 9
Current loss value: 138113840000.0
Image saved as chenzai_at_iteration_9.png
Start of iteration 10
Current loss value: 129697645000.0
Image saved as chenzai_at_iteration_10.png
Start of iteration 11
Current loss value: 122296410000.0
Image saved as chenzai_at_iteration_11.png
Start of iteration 12
Current loss value: 113507475000.0
Image saved as chenzai_at_iteration_12.png
Start of iteration 13
Current loss value: 107962425000.0
Image saved as chenzai_at_iteration_13.png
Start of iteration 14
Current loss value: 97767780000.0
Image saved as chenzai_at_iteration_14.png
Start of iteration 15
Current loss value: 91393800000.0
Image saved as chenzai_at_iteration_15.png
Start of iteration 16
Current loss value: 87411384000.0
Image saved as chenzai_at_iteration_16.png
Start of iteration 17
Current loss value: 83964305000.0
Image saved as chenzai_at_iteration_17.png
Start of iteration 18
Current loss value: 80351320000.0
Image saved as chenzai_at_iteration_18.png
Start of iteration 19
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.imshow(img)</span><br></pre></td></tr></table></figure>
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f56987e2400&gt;
</code></pre><p><img src="output_17_1.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Project</tag>
        <tag>Computer Vision</tag>
        <tag>Convolutional Neural Networks</tag>
        <tag>Transfer Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Reverse LinkedList</title>
    <url>/Reverse-LinkedList/2019/08/08/</url>
    <content><![CDATA[<h2 id="链表翻转"><a href="#链表翻转" class="headerlink" title="链表翻转"></a>链表翻转</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(head)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line">    </span><br><span class="line">    dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">    dummy.next = head</span><br><span class="line">    </span><br><span class="line">    tail = dummy</span><br><span class="line">    <span class="keyword">while</span> head.next:</span><br><span class="line">        tmp = head.next</span><br><span class="line">        head.next = tmp.next</span><br><span class="line">        tmp.next = tail.next</span><br><span class="line">        tail.next = tmp</span><br><span class="line">    <span class="keyword">return</span> dummy.next</span><br></pre></td></tr></table></figure>
<h2 id="Leetcode-No-143"><a href="#Leetcode-No-143" class="headerlink" title="Leetcode No.143"></a>Leetcode No.143</h2><p>Given a singly linked list L: L0-&gt;L1-&gt;…-&gt;Ln-1-&gt;Ln,<br>reorder it to: L0-&gt;Ln-&gt;L1-&gt;Ln-1-&gt;L2-&gt;Ln-2-&gt;…</p>
<p>You may not modify the values in the list’s nodes, only nodes itself may be changed.</p>
<p>Example 1:</p>
<blockquote>
<p>Given 1-&gt;2-&gt;3-&gt;4, reorder it to 1-&gt;4-&gt;2-&gt;3.</p>
</blockquote>
<p>Example 2:</p>
<blockquote>
<p>Given 1-&gt;2-&gt;3-&gt;4-&gt;5, reorder it to 1-&gt;5-&gt;2-&gt;4-&gt;3.</p>
</blockquote>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol>
<li>使用快慢指针来找到链表的中点，并将链表从中点处断开，形成两个独立的链表。</li>
<li>将第二个链翻转。</li>
<li>将第二个链表的元素间隔地插入第一个链表中。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reorderList</span><span class="params">(self, head: ListNode)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Do not return anything, modify head in-place instead.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(head)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">                <span class="keyword">return</span> head</span><br><span class="line">            </span><br><span class="line">            dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">            dummy.next = head</span><br><span class="line">            </span><br><span class="line">            tail = dummy</span><br><span class="line">            <span class="keyword">while</span> head.next:</span><br><span class="line">                tmp = head.next</span><br><span class="line">                head.next = tmp.next</span><br><span class="line">                tmp.next = tail.next</span><br><span class="line">                tail.next = tmp</span><br><span class="line">            <span class="keyword">return</span> dummy.next</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        dummy.next = head</span><br><span class="line">        slow = quick = dummy</span><br><span class="line">        <span class="keyword">while</span> quick <span class="keyword">and</span> quick.next:</span><br><span class="line">            quick = quick.next.next</span><br><span class="line">            slow = slow.next</span><br><span class="line">            </span><br><span class="line">        reversed_list_head = reverse(slow.next)</span><br><span class="line">        </span><br><span class="line"><span class="comment">#         while reversed_list_head:</span></span><br><span class="line"><span class="comment">#             print(reversed_list_head.val)</span></span><br><span class="line"><span class="comment">#             reversed_list_head = reversed_list_head.next</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        slow.next = <span class="keyword">None</span></span><br><span class="line">        </span><br><span class="line">        cur_left = dummy.next</span><br><span class="line">        <span class="keyword">while</span> cur_left <span class="keyword">and</span> reversed_list_head:</span><br><span class="line">            tmp_cur = cur_left.next</span><br><span class="line">            tmp_reversed_list_head = reversed_list_head.next</span><br><span class="line">            </span><br><span class="line">            cur_left.next = reversed_list_head</span><br><span class="line">            reversed_list_head.next = tmp_cur</span><br><span class="line">            </span><br><span class="line">            cur_left = tmp_cur</span><br><span class="line">            reversed_list_head = tmp_reversed_list_head</span><br><span class="line">            </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Data Structure and Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>复杂度分析</title>
    <url>/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/2019/08/05/</url>
    <content><![CDATA[<blockquote>
<p>Reference from 王争,数据结构与算法之美<br>极客时间 <a href="https://time.geekbang.org/column/article/40036" target="_blank" rel="noopener">https://time.geekbang.org/column/article/40036</a></p>
</blockquote>
<h2 id="为什么需要复杂度分析"><a href="#为什么需要复杂度分析" class="headerlink" title="为什么需要复杂度分析"></a>为什么需要复杂度分析</h2><p>事后统计的方法有非常大的局限性，我们需要一个<strong>不用具体的测试数据就可以粗略地估算算法的执行效率的方法</strong>。</p>
<ol>
<li>测试结果依赖测试环境</li>
<li>测试结果依赖数据规模</li>
</ol>
<h2 id="大O-复杂度表示法"><a href="#大O-复杂度表示法" class="headerlink" title="大O 复杂度表示法"></a>大O 复杂度表示法</h2><p><img src="2.png" alt></p>
<p>假设每行代码的执行时间都一样，为unit_time。那么所有代码的执行时间T(n)与每行代码的执行次数n成正比。</p>
<script type="math/tex; mode=display">T(n) = O(f(n))</script><ul>
<li>f(n)表示每行代码执行的次数总和</li>
<li>O 表示成正比</li>
<li>大 O 时间复杂度并不具体表示代码的真正执行时间，而是表示代码执行时间随数据规模增长的变化趋势。 也叫渐进时间复杂度。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt;= n; ++i) &#123;</span><br><span class="line">    j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; j &lt;= n; ++j) &#123;</span><br><span class="line">      sum = sum +  i * j;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">T(n) = (2n^2 + 2n + 3) * unit_time = O(n^2)</script><h2 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h2><ol>
<li>只关注循环次数最多的那段代码</li>
<li>加法法则：总的时间复杂度等于量级最大的那段代码的时间复杂度<script type="math/tex; mode=display">\begin{equation}\begin{split}
 & T1(n)=O(f(n)) \\
 & T2(n)=O(g(n)) \\
 & T(n)=T1(n)+T2(n)= max(O(f(n)), O(g(n))) = O(max(f(n),g(n))) 
\end{split} \end{equation}</script></li>
<li>乘法法则：千淘代码的复杂度等于嵌套内外代码复杂度的乘积<script type="math/tex; mode=display">\begin{equation}\begin{split}
 & T1(n)=O(f(n)) \\
 & T2(n)=O(g(n)) \\
 & T(n)=T1(n)*T2(n)= O(f(n))*O((g(n))) = O(f(n)* g(n)) 
\end{split} \end{equation}</script></li>
</ol>
<h2 id="常见的复杂度分析实例"><a href="#常见的复杂度分析实例" class="headerlink" title="常见的复杂度分析实例"></a>常见的复杂度分析实例</h2><p><img src="1.png" alt><br>复杂度量级可以粗略分为<strong>多项式</strong>和<strong>非多项式</strong>。非多项式只有$O(2^n)$ 和 $O(n!)$。非多项式量级的算法问题叫 NP 问题。</p>
<ol>
<li><p>O(1)<br>指常数量级，不是只执行了一行代码。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">int</span> sum = i + j;</span><br></pre></td></tr></table></figure>
</li>
<li><p>O(logn),O(nlogn)<br>在对数阶时间复杂度表示方法里，我们忽略对数的“底”，统一表示为O(logn).</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">i=1;</span><br><span class="line">while (i &lt;= n)  &#123;</span><br><span class="line">  i = i * 2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>所有对数阶的时间复杂度问题都是O(logn),因为根据换底公式有：</p>
<script type="math/tex; mode=display">log_3 n = log_3 2 \* log_2 n  = O(c*log_2 n)</script><ol>
<li>O(m+n),O(m*n)<br>m,n表示两个数据规模，我们无法事先评估m和n谁的数量级大，所以我们在表示复杂度的时候，就不能简单地利用加法法则。</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sum_1 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; m; ++i) &#123;</span><br><span class="line">    sum_1 = sum_1 + i;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> sum_2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; j &lt; n; ++j) &#123;</span><br><span class="line">    sum_2 = sum_2 + j;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sum_1 + sum_2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="空间复杂度分析"><a href="#空间复杂度分析" class="headerlink" title="空间复杂度分析"></a>空间复杂度分析</h2><p>空间复杂度权全称是渐进空间复杂度，表示算法的存储空间与数据规模之间的增长关系。常见的空间复杂度就是O(1),O(n),$O(n^2)$, 对数阶复杂度很少用到。<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">  <span class="keyword">for</span> (i; i &lt;n; ++i) &#123;</span><br><span class="line">    a[i] = i * i;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = n<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">    print out a[i]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="最好-最坏-情况时间复杂度"><a href="#最好-最坏-情况时间复杂度" class="headerlink" title="最好/最坏 情况时间复杂度"></a>最好/最坏 情况时间复杂度</h2><ol>
<li>最理想情况下，O(1) 时间能查找到对应元素</li>
<li>最糟糕情况下，O(n) 时间能查找到对应元素</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// n 表示数组 array 的长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span>[] <span class="built_in">array</span>, <span class="keyword">int</span> n, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> pos = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">array</span>[i] == x) &#123;</span><br><span class="line">       pos = i;</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> pos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="平均时间复杂度"><a href="#平均时间复杂度" class="headerlink" title="平均时间复杂度"></a>平均时间复杂度</h2><p>同样是上面的例子，变量 x 在数组中的位置，有n+1中情况。我们把每种情况下，查找需要遍历的元素个数累加起来，然后再除以n+1，就可以得到需要遍历的元素个数的平均值。同时我们假设，每一种情况出现的概率相等。</p>
<script type="math/tex; mode=display">\frac{1+2+3+\cdots+n+n}{n+1} = \frac{n(n+1)}{2(n+1)}</script><p>这段代码的平均加权时间复杂度仍然是O(n).</p>
<h2 id="均摊时间复杂度-平摊分析"><a href="#均摊时间复杂度-平摊分析" class="headerlink" title="均摊时间复杂度(平摊分析)"></a>均摊时间复杂度(平摊分析)</h2><ol>
<li>最好的情况，直接插入 O(1)</li>
<li>最坏的情况，需要先遍历计算sum，再插入 O(n)</li>
<li>每一次 O(n)的操作，都会跟着n-1次O(1)的操作，我们把耗时多的那次操作均摊到接下来的n-1次操作上，这组连续操作的均摊时间复杂度就是O(1).</li>
<li>均摊时间复杂度是一种特殊的平均时间复杂度</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// array 表示一个长度为 n 的数组</span></span><br><span class="line"><span class="comment">// 代码中的 array.length 就等于 n</span></span><br><span class="line"><span class="keyword">int</span>[] <span class="built_in">array</span> = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (count == <span class="built_in">array</span>.length) &#123;</span><br><span class="line">      <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">array</span>.length; ++i) &#123;</span><br><span class="line">         sum = sum + <span class="built_in">array</span>[i];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">array</span>[<span class="number">0</span>] = sum;</span><br><span class="line">      count = <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">array</span>[count] = val;</span><br><span class="line">   ++count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Data Structure and Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>Remote Jupyter notebook</title>
    <url>/Remote-Jupyter-notebook/2019/07/27/</url>
    <content><![CDATA[<h2 id="notebook-configuration-file"><a href="#notebook-configuration-file" class="headerlink" title="notebook configuration file"></a>notebook configuration file</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure>
<h2 id="Password-setup"><a href="#Password-setup" class="headerlink" title="Password setup"></a>Password setup</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jupyter notebook password</span><br></pre></td></tr></table></figure>
<h2 id="Edit-configuration-file"><a href="#Edit-configuration-file" class="headerlink" title="Edit configuration file"></a>Edit configuration file</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Set options for certfile, ip, password, and toggle off</span><br><span class="line"># browser auto-opening</span><br><span class="line"># Set ip to &apos;*&apos; to bind on all interfaces (ips) for the public server</span><br><span class="line">c.NotebookApp.ip = &apos;*&apos;</span><br><span class="line">c.NotebookApp.open_browser = False</span><br><span class="line"># It is a good idea to set a known, fixed port for server access</span><br><span class="line">c.NotebookApp.port = 8888</span><br></pre></td></tr></table></figure>
<h2 id="Runs-in-the-background"><a href="#Runs-in-the-background" class="headerlink" title="Runs in the background"></a>Runs in the background</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nohup jupyter notebook &amp;</span><br></pre></td></tr></table></figure>
<h2 id="Local-port-forwarding"><a href="#Local-port-forwarding" class="headerlink" title="Local port forwarding"></a>Local port forwarding</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -N -f -L localhost:&#123;local port&#125;:localhost:&#123;remote port&#125; -p &#123;ssh port&#125; &#123;user&#125;@&#123;remote ip&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Other Skill</category>
      </categories>
  </entry>
  <entry>
    <title>Bayes Estimation</title>
    <url>/Bayes-Estimation/2019/07/21/</url>
    <content><![CDATA[<blockquote>
<p>reference <a href="https://zhuanlan.zhihu.com/p/72506771" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/72506771</a></p>
</blockquote>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>在概率论与数理统计领域中，对于一个未知参数的分布我们往往可以采用生成一批观测数据、通过这批观测数据做参数估计的做法来估计参数。最常用的有最大似然估计(MLP)、矩估计、最大后验估计(MAP)、贝叶斯估计等。<br>MLP通过最大化似然函数 $L(\theta|D)$ 从而找出参数$\theta$ ，思想在于找出能最大概率生成这批数据的参数。但是这种做法完全依赖于数据本身，当数据量大的时候，最大似然估计往往能很好的估计出参数$\theta$ ；但是当数据量小的时候，估计出来的结果并不会很好。就例如丢硬币问题，当我们投掷了5次，得出了正正正正正的结果，极大似然估计会得出投出正面的概率为100%！这显然是不符常理的。<br>贝叶斯派的人认为，被估计的参数同样服从一种分布，即参数也为一个随机变量。他们在估计参数前会先带来先验知识，例如参数在[0.5,0.6]的区域内出现的概率最大，在引入了先验知识后在数据量小的情况下估计出来的结果往往会更合理。</p>
<h2 id="MAP-与贝叶斯估计"><a href="#MAP-与贝叶斯估计" class="headerlink" title="MAP 与贝叶斯估计"></a>MAP 与贝叶斯估计</h2><p>MLP认为参数是一个常数，希望能找出最大化产生观测数据的参数，即：</p>
<script type="math/tex; mode=display">\theta^{\prime} = argmax_{\theta}L(\theta|D) = argmax_{\theta}\theta^{m_h}(1-\theta)^{m_t}</script><p>贝叶斯派认为参数是一个随机变量，对它做估计就是计算其后验概率分布 [公式] ，我们借助贝叶斯公式展开有：</p>
<script type="math/tex; mode=display">P(\theta|D) = \frac{P(D|\theta)P(\theta)}{P(D)}</script><p>其中 $P(D)$ 可当成是常数，因此可以有：</p>
<script type="math/tex; mode=display">P(\theta|D) \propto \frac{P(D|\theta)}{P(\theta)}</script><p>其中 P( \theta) 为参数服从的分布，即先验知识。 接着我们可以有两种做法：</p>
<ol>
<li>最大后验估计(MAP)：找出最大化后验概率的参数 <script type="math/tex; mode=display">\theta^{\prime} = argmax_{\theta}P(D|\theta)P(\theta)</script>预测阶段，借助参数做预测：<script type="math/tex; mode=display">P(X^{new}|\theta^{\prime},D)</script></li>
<li>贝叶斯估计：借助先验分布 $P(\theta)$, 与观测数据得到的$P(D|\theta)$ 得出后验分布，预测阶段借助后验分布有:<script type="math/tex; mode=display">P(X^{new}|D) = \int{P(X^{new},\theta|D)d\theta} = \int{P(X^{new}|\theta,D)P(\theta|D)d\theta}</script></li>
</ol>
<h2 id="共轭分布与共轭先验"><a href="#共轭分布与共轭先验" class="headerlink" title="共轭分布与共轭先验"></a>共轭分布与共轭先验</h2><p>现在有了先验分布、似然，就可以接着做贝叶斯估计了。我们根据以往数据，给出先验知识，例如在以前的数据中，硬币出现了$\alpha_{h}$次正面，$\alpha_{t}$次背面，代入beta分布后有：</p>
<script type="math/tex; mode=display">P(\theta|\alpha_{h},\alpha_{t}) = \frac{1}{B(\alpha_{h},\alpha_{t})}\theta^{\alpha_{h}-1}(1-\theta)^{\alpha_{t}-1}</script><script type="math/tex; mode=display">P(\theta|\alpha_{h},\alpha_{t}) \propto \theta^{\alpha_{h}-1}(1-\theta)^{\alpha_{t}-1}</script><p>接着贝叶斯估计有:</p>
<script type="math/tex; mode=display">\begin{equation}\begin{split}
P(\theta|D) & \propto \theta^{m_h}(1-\theta)^{m_t}\theta^{\alpha_h-1}(1-\theta)^{\alpha_{t}-1}
            & \propto \theta^{m_h+\alpha_h-1}(1-\theta)^{m_t+\alpha_t-1}
\end{split}\end{equation}</script><p>得出后验分布同样服从Beta分布 $Be(m_h + \alpha_h,m_t + \alpha_t )$,我们加上标准化函数后可以得到：</p>
<script type="math/tex; mode=display">P(\theta|D) = \frac{1}{B(m_h + \alpha_h,m_t + \alpha_t)}\theta^{m_h+\alpha_h-1}(1-\theta)^{m_t+\alpha_t-1}</script><p>像这种先验分布和后验分布同分布时，先验分布和后验分布称之为共轭分布，<strong>此时先验被称为似然函数的共轭先验</strong>.</p>
]]></content>
      <categories>
        <category>Math</category>
        <category>Statistics</category>
      </categories>
  </entry>
  <entry>
    <title>Collaborate on Github </title>
    <url>/Collaborate-on-Github/2019/07/20/</url>
    <content><![CDATA[<h2 id="Github-Pull-Request"><a href="#Github-Pull-Request" class="headerlink" title="Github Pull Request"></a>Github Pull Request</h2><ol>
<li>Fork 别人的仓库</li>
<li><p>Clone 自己刚 fork 的仓库到本地</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Git clone &#123;address&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>给自己的仓库添加远程源仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add upstream &#123;source address&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意此时各个分支的代指：</p>
<ul>
<li>upstream/master: source master</li>
<li>origin: 自己的远程master分支</li>
<li>master: 自己的本地master</li>
</ul>
</li>
<li><p>在本地修改文件, 然后推送到自己的远程仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add -A</span><br><span class="line">git commit -m &quot;...&quot; </span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>
</li>
<li><p>去自己的 github 提交pull request</p>
</li>
<li>下次在本地修改文件时,需要用远程仓库更新自己的本地master<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git fetch upstream</span><br><span class="line">git merge upstream/master</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>Other Skill</category>
      </categories>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>Think bayesian</title>
    <url>/Think-bayesian/2019/07/20/</url>
    <content><![CDATA[<h1 id="Think-bayesian-amp-Statistics-review"><a href="#Think-bayesian-amp-Statistics-review" class="headerlink" title="Think bayesian &amp; Statistics review"></a>Think bayesian &amp; Statistics review</h1><h2 id="Main-principles"><a href="#Main-principles" class="headerlink" title="Main principles"></a>Main principles</h2><ol>
<li>Use prior konwledge</li>
<li>Chose answer that explains observations the most</li>
<li>Avoid extra assumptions</li>
</ol>
<h3 id="example"><a href="#example" class="headerlink" title="example"></a>example</h3><p>A main is running, why?</p>
<ol>
<li>He is in a hurry </li>
<li>He is doing exports (use principle 2 to exclude, does not waer a sports suit, contradicts the data)</li>
<li>He always runs  (use principle 3 to exclude)</li>
<li>He saw a dragon  (use principle 1 to exclude)</li>
</ol>
<h2 id="Probability"><a href="#Probability" class="headerlink" title="Probability"></a>Probability</h2><p>for throw a dice, the probability of one side is 1/6 </p>
<h2 id="Random-variable"><a href="#Random-variable" class="headerlink" title="Random variable"></a>Random variable</h2><h3 id="Discrete"><a href="#Discrete" class="headerlink" title="Discrete"></a>Discrete</h3><p>Probability Mass Function(PMF)</p>
<script type="math/tex; mode=display">P(X) = \begin{equation}\left\{\begin{array}{**lr**}
    & 0.2 & x = 1 \\
    & 0.5 & x = 3 \\
    & 0.3 & x = 7 \\
    & 0 & otherwise
\end{array}\right.\end{equation}</script><h3 id="Continuous"><a href="#Continuous" class="headerlink" title="Continuous"></a>Continuous</h3><p>Probability Density Function(PDF)</p>
<script type="math/tex; mode=display">
P(x \in [a,b] = \lmoustache_{a}^{b} p(x)dx )</script><h3 id="Independence"><a href="#Independence" class="headerlink" title="Independence"></a>Independence</h3><p>X and Y are independent if:</p>
<script type="math/tex; mode=display">P(X,Y) = P(X)P(Y)</script><ul>
<li>P(x,y) -&gt; Joint</li>
<li>P(x)   -&gt; Marinals</li>
</ul>
<h2 id="Conditional-probability"><a href="#Conditional-probability" class="headerlink" title="Conditional probability"></a>Conditional probability</h2><p>Probability of X given that Y happened:</p>
<script type="math/tex; mode=display">P(X|Y) = \frac{P(X,Y)}{P(Y)}</script><h3 id="Chain-rule"><a href="#Chain-rule" class="headerlink" title="Chain rule"></a>Chain rule</h3><script type="math/tex; mode=display">\begin{equation}\begin{split}
& P(X,Y) = P(X|Y)P(Y) \\
& P(X,Y,Z) = P(X|Y,Z)P(Y|Z)P(Z) \\
& P(X_1,\cdots,X_N) = \prod_{i=1}^{N}P(X_i|X_1,\cdots,X_{i-1})
\end{split} \end{equation}</script><h3 id="Sum-rule"><a href="#Sum-rule" class="headerlink" title="Sum rule"></a>Sum rule</h3><script type="math/tex; mode=display">P(X) = \lmoustache_{-\infty}^{\infty}P(X,Y)dy</script><h2 id="Total-probability"><a href="#Total-probability" class="headerlink" title="Total probability"></a>Total probability</h2><ol>
<li>$B_1, B_2 \cdots $ 两两互斥，即 $B_i \cap B_j = \emptyset$ ，$i \neq j$, i,j=1，2，….，且$P(B_i)&gt;0$,i=1,2,….;</li>
<li>$B_1 \cup B_2 \cdots = \Omega$ ，则称事件组 $B_1 \cup B_2 \cdots$ 是样本空间 $\Omega$ 的一个划分</li>
</ol>
<script type="math/tex; mode=display">P(A) = \sum_{i=1}^{\infty}P(B_i)(A|B_i)</script><h2 id="Bayes-theorem"><a href="#Bayes-theorem" class="headerlink" title="Bayes theorem"></a>Bayes theorem</h2><ul>
<li>$\theta$: parameters</li>
<li>$X$: observations</li>
<li>$P(\theta|X)$: Posterior</li>
<li>$P(X)$: Evidence</li>
<li>$P(X|\theta)$: Likelyhood</li>
<li>$P(\theta)$: Prior</li>
</ul>
<script type="math/tex; mode=display">P(\theta|X) = \frac{P(X,\theta)}{P(X)} = \frac{P(X|\theta)P(\theta)}{P(X)}</script><h2 id="Bayesian-approach-to-statistics"><a href="#Bayesian-approach-to-statistics" class="headerlink" title="Bayesian approach to statistics"></a>Bayesian approach to statistics</h2><h3 id="Frequentist"><a href="#Frequentist" class="headerlink" title="Frequentist"></a>Frequentist</h3><ul>
<li>Objective</li>
<li>$\theta$ is fixed, X is random</li>
<li>training<br>  Maximum Likelyhood (they try to find the parameters theta that maximize the likelihood, the probability of their data given parameters)<script type="math/tex; mode=display">\hat{\theta} = argmax_{\theta}P(x|\theta)</script></li>
</ul>
<h3 id="Bayesian"><a href="#Bayesian" class="headerlink" title="Bayesian"></a>Bayesian</h3><ul>
<li>Subjective</li>
<li>X is random, $\theta$ is fixed</li>
<li>Training(Bayes theorem)<br>  what Bayesians will try to do is they would try to compute the posterior, the probability of the parameters given the data.<script type="math/tex; mode=display">P(\theta|x) = \frac{P(X|\theta)P(\theta)}{P(X)}</script></li>
<li>Classification<ul>
<li>Training:<script type="math/tex; mode=display">P(\theta|x_tr,y_tr) = \frac{P(y_tr|\theta,x_tr)P(\theta)}{P(y_tr|x_tr)}</script></li>
<li>Prediction:<script type="math/tex; mode=display">P(y_ts|x_ts,x_tr,y_tr) = \lmoustache{P(y_ts|x_ts,\theta)P(\theta|x_tr,y_tr)}d\theta</script></li>
</ul>
</li>
<li>On-line learning (get posterior)<script type="math/tex; mode=display">P_k{\theta} = P(\theta|x_k) = \frac{P(x|\theta)P_{k-1}(\theta)}{P_{(x_k)}}</script></li>
</ul>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Machine Learning</category>
        <category>Math</category>
        <category>Statistics</category>
      </categories>
  </entry>
  <entry>
    <title>Stacking</title>
    <url>/Stacking/2019/07/17/</url>
    <content><![CDATA[<p>Version 1.0.1</p>
<h1 id="Check-your-versions"><a href="#Check-your-versions" class="headerlink" title="Check your versions"></a>Check your versions</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line"><span class="keyword">import</span> sklearn</span><br><span class="line"><span class="keyword">import</span> scipy.sparse </span><br><span class="line"><span class="keyword">import</span> lightgbm </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> [np, pd, scipy, sklearn, lightgbm]:</span><br><span class="line">    <span class="keyword">print</span> (p.__name__, p.__version__)</span><br></pre></td></tr></table></figure>
<pre><code>numpy 1.13.1
pandas 0.20.3
scipy 0.19.1
sklearn 0.19.0
lightgbm 2.0.6
</code></pre><p><strong>Important!</strong> There is a huge chance that the assignment will be impossible to pass if the versions of <code>lighgbm</code> and <code>scikit-learn</code> are wrong. The versions being tested:</p>
<pre><code>numpy 1.13.1
pandas 0.20.3
scipy 0.19.1
sklearn 0.19.0
ligthgbm 2.0.6
</code></pre><p>To install an older version of <code>lighgbm</code> you may use the following command:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip uninstall lightgbm</span><br><span class="line">pip install lightgbm==2.0.6</span><br></pre></td></tr></table></figure></p>
<h1 id="Ensembling"><a href="#Ensembling" class="headerlink" title="Ensembling"></a>Ensembling</h1><p>In this programming assignment you are asked to implement two ensembling schemes: simple linear mix and stacking.</p>
<p>We will spend several cells to load data and create feature matrix, you can scroll down this part or try to understand what’s happening.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> gc</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline </span><br><span class="line"></span><br><span class="line">pd.set_option(<span class="string">'display.max_rows'</span>, <span class="number">600</span>)</span><br><span class="line">pd.set_option(<span class="string">'display.max_columns'</span>, <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lightgbm <span class="keyword">as</span> lgb</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> r2_score</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm_notebook</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">downcast_dtypes</span><span class="params">(df)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">        Changes column types in the dataframe: </span></span><br><span class="line"><span class="string">                </span></span><br><span class="line"><span class="string">                `float64` type to `float32`</span></span><br><span class="line"><span class="string">                `int64`   type to `int32`</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Select columns to downcast</span></span><br><span class="line">    float_cols = [c <span class="keyword">for</span> c <span class="keyword">in</span> df <span class="keyword">if</span> df[c].dtype == <span class="string">"float64"</span>]</span><br><span class="line">    int_cols =   [c <span class="keyword">for</span> c <span class="keyword">in</span> df <span class="keyword">if</span> df[c].dtype == <span class="string">"int64"</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Downcast</span></span><br><span class="line">    df[float_cols] = df[float_cols].astype(np.float32)</span><br><span class="line">    df[int_cols]   = df[int_cols].astype(np.int32)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> df</span><br></pre></td></tr></table></figure>
<h1 id="Load-data-subset"><a href="#Load-data-subset" class="headerlink" title="Load data subset"></a>Load data subset</h1><p>Let’s load the data from the hard drive first.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sales = pd.read_csv(<span class="string">'../readonly/final_project_data/sales_train.csv.gz'</span>)</span><br><span class="line">shops = pd.read_csv(<span class="string">'../readonly/final_project_data/shops.csv'</span>)</span><br><span class="line">items = pd.read_csv(<span class="string">'../readonly/final_project_data/items.csv'</span>)</span><br><span class="line">item_cats = pd.read_csv(<span class="string">'../readonly/final_project_data/item_categories.csv'</span>)</span><br></pre></td></tr></table></figure>
<p>And use only 3 shops for simplicity.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sales = sales[sales[<span class="string">'shop_id'</span>].isin([<span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>])]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(sales.shape)</span><br><span class="line">sales.head()</span><br></pre></td></tr></table></figure>
<pre><code>(301510, 6)
</code></pre><div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }

    .dataframe thead th {
        text-align: left;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>date</th>
      <th>date_block_num</th>
      <th>shop_id</th>
      <th>item_id</th>
      <th>item_price</th>
      <th>item_cnt_day</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>15036</th>
      <td>05.01.2013</td>
      <td>0</td>
      <td>28</td>
      <td>7738</td>
      <td>199.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>15037</th>
      <td>07.01.2013</td>
      <td>0</td>
      <td>28</td>
      <td>7738</td>
      <td>199.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>15038</th>
      <td>19.01.2013</td>
      <td>0</td>
      <td>28</td>
      <td>7738</td>
      <td>199.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>15039</th>
      <td>03.01.2013</td>
      <td>0</td>
      <td>28</td>
      <td>7737</td>
      <td>199.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>15040</th>
      <td>04.01.2013</td>
      <td>0</td>
      <td>28</td>
      <td>7737</td>
      <td>199.0</td>
      <td>1.0</td>
    </tr>
  </tbody>
</table>
</div>



<h1 id="Get-a-feature-matrix"><a href="#Get-a-feature-matrix" class="headerlink" title="Get a feature matrix"></a>Get a feature matrix</h1><p>We now need to prepare the features. This part is all implemented for you.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Create "grid" with columns</span></span><br><span class="line">index_cols = [<span class="string">'shop_id'</span>, <span class="string">'item_id'</span>, <span class="string">'date_block_num'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># For every month we create a grid from all shops/items combinations from that month</span></span><br><span class="line">grid = [] </span><br><span class="line"><span class="keyword">for</span> block_num <span class="keyword">in</span> sales[<span class="string">'date_block_num'</span>].unique():</span><br><span class="line">    cur_shops = sales.loc[sales[<span class="string">'date_block_num'</span>] == block_num, <span class="string">'shop_id'</span>].unique()</span><br><span class="line">    cur_items = sales.loc[sales[<span class="string">'date_block_num'</span>] == block_num, <span class="string">'item_id'</span>].unique()</span><br><span class="line">    grid.append(np.array(list(product(*[cur_shops, cur_items, [block_num]])),dtype=<span class="string">'int32'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Turn the grid into a dataframe</span></span><br><span class="line">grid = pd.DataFrame(np.vstack(grid), columns = index_cols,dtype=np.int32)</span><br><span class="line"></span><br><span class="line">print(grid.shape)</span><br><span class="line">grid.head()</span><br></pre></td></tr></table></figure>
<pre><code>(278619, 3)
</code></pre><div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }

    .dataframe thead th {
        text-align: left;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>shop_id</th>
      <th>item_id</th>
      <th>date_block_num</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>28</td>
      <td>7738</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>28</td>
      <td>7737</td>
      <td>0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>28</td>
      <td>7770</td>
      <td>0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>28</td>
      <td>7664</td>
      <td>0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>28</td>
      <td>7814</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Groupby data to get shop-item-month aggregates</span></span><br><span class="line">gb = sales.groupby(index_cols,as_index=<span class="keyword">False</span>).agg(&#123;<span class="string">'item_cnt_day'</span>:&#123;<span class="string">'target'</span>:<span class="string">'sum'</span>&#125;&#125;)</span><br><span class="line"><span class="comment"># Fix column names</span></span><br><span class="line">gb.columns = [col[<span class="number">0</span>] <span class="keyword">if</span> col[<span class="number">-1</span>]==<span class="string">''</span> <span class="keyword">else</span> col[<span class="number">-1</span>] <span class="keyword">for</span> col <span class="keyword">in</span> gb.columns.values] </span><br><span class="line"></span><br><span class="line">print(gb.shape)</span><br><span class="line">gb.head()</span><br></pre></td></tr></table></figure>
<pre><code>/opt/conda/lib/python3.6/site-packages/pandas/core/groupby.py:4036: FutureWarning: using a dict with renaming is deprecated and will be removed in a future version
  return super(DataFrameGroupBy, self).aggregate(arg, *args, **kwargs)


(145463, 4)
</code></pre><div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }

    .dataframe thead th {
        text-align: left;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>shop_id</th>
      <th>item_id</th>
      <th>date_block_num</th>
      <th>target</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>26</td>
      <td>27</td>
      <td>0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>26</td>
      <td>27</td>
      <td>10</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>26</td>
      <td>27</td>
      <td>14</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>26</td>
      <td>28</td>
      <td>8</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>26</td>
      <td>28</td>
      <td>9</td>
      <td>1.0</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Join it to the grid</span></span><br><span class="line">all_data = pd.merge(grid, gb, how=<span class="string">'left'</span>, on=index_cols).fillna(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">print(all_data.shape)</span><br><span class="line">all_data.head()</span><br></pre></td></tr></table></figure>
<pre><code>(278619, 4)
</code></pre><div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }

    .dataframe thead th {
        text-align: left;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>shop_id</th>
      <th>item_id</th>
      <th>date_block_num</th>
      <th>target</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>28</td>
      <td>7738</td>
      <td>0</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>28</td>
      <td>7737</td>
      <td>0</td>
      <td>10.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>28</td>
      <td>7770</td>
      <td>0</td>
      <td>6.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>28</td>
      <td>7664</td>
      <td>0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>28</td>
      <td>7814</td>
      <td>0</td>
      <td>2.0</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Same as above but with shop-month aggregates</span></span><br><span class="line">gb = sales.groupby([<span class="string">'shop_id'</span>, <span class="string">'date_block_num'</span>],as_index=<span class="keyword">False</span>).agg(&#123;<span class="string">'item_cnt_day'</span>:&#123;<span class="string">'target_shop'</span>:<span class="string">'sum'</span>&#125;&#125;)</span><br><span class="line">gb.columns = [col[<span class="number">0</span>] <span class="keyword">if</span> col[<span class="number">-1</span>]==<span class="string">''</span> <span class="keyword">else</span> col[<span class="number">-1</span>] <span class="keyword">for</span> col <span class="keyword">in</span> gb.columns.values]</span><br><span class="line">all_data = pd.merge(all_data, gb, how=<span class="string">'left'</span>, on=[<span class="string">'shop_id'</span>, <span class="string">'date_block_num'</span>]).fillna(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">print(all_data.shape)</span><br><span class="line">all_data.head()</span><br></pre></td></tr></table></figure>
<pre><code>(278619, 5)


/opt/conda/lib/python3.6/site-packages/pandas/core/groupby.py:4036: FutureWarning: using a dict with renaming is deprecated and will be removed in a future version
  return super(DataFrameGroupBy, self).aggregate(arg, *args, **kwargs)
</code></pre><div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }

    .dataframe thead th {
        text-align: left;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>shop_id</th>
      <th>item_id</th>
      <th>date_block_num</th>
      <th>target</th>
      <th>target_shop</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>28</td>
      <td>7738</td>
      <td>0</td>
      <td>4.0</td>
      <td>7057.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>28</td>
      <td>7737</td>
      <td>0</td>
      <td>10.0</td>
      <td>7057.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>28</td>
      <td>7770</td>
      <td>0</td>
      <td>6.0</td>
      <td>7057.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>28</td>
      <td>7664</td>
      <td>0</td>
      <td>1.0</td>
      <td>7057.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>28</td>
      <td>7814</td>
      <td>0</td>
      <td>2.0</td>
      <td>7057.0</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Same as above but with item-month aggregates</span></span><br><span class="line">gb = sales.groupby([<span class="string">'item_id'</span>, <span class="string">'date_block_num'</span>],as_index=<span class="keyword">False</span>).agg(&#123;<span class="string">'item_cnt_day'</span>:&#123;<span class="string">'target_item'</span>:<span class="string">'sum'</span>&#125;&#125;)</span><br><span class="line">gb.columns = [col[<span class="number">0</span>] <span class="keyword">if</span> col[<span class="number">-1</span>] == <span class="string">''</span> <span class="keyword">else</span> col[<span class="number">-1</span>] <span class="keyword">for</span> col <span class="keyword">in</span> gb.columns.values]</span><br><span class="line">all_data = pd.merge(all_data, gb, how=<span class="string">'left'</span>, on=[<span class="string">'item_id'</span>, <span class="string">'date_block_num'</span>]).fillna(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">print(all_data.shape)</span><br><span class="line">all_data.head()</span><br></pre></td></tr></table></figure>
<pre><code>/opt/conda/lib/python3.6/site-packages/pandas/core/groupby.py:4036: FutureWarning: using a dict with renaming is deprecated and will be removed in a future version
  return super(DataFrameGroupBy, self).aggregate(arg, *args, **kwargs)


(278619, 6)
</code></pre><div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }

    .dataframe thead th {
        text-align: left;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>shop_id</th>
      <th>item_id</th>
      <th>date_block_num</th>
      <th>target</th>
      <th>target_shop</th>
      <th>target_item</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>28</td>
      <td>7738</td>
      <td>0</td>
      <td>4.0</td>
      <td>7057.0</td>
      <td>11.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>28</td>
      <td>7737</td>
      <td>0</td>
      <td>10.0</td>
      <td>7057.0</td>
      <td>16.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>28</td>
      <td>7770</td>
      <td>0</td>
      <td>6.0</td>
      <td>7057.0</td>
      <td>10.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>28</td>
      <td>7664</td>
      <td>0</td>
      <td>1.0</td>
      <td>7057.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>28</td>
      <td>7814</td>
      <td>0</td>
      <td>2.0</td>
      <td>7057.0</td>
      <td>6.0</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Downcast dtypes from 64 to 32 bit to save memory</span></span><br><span class="line">all_data = downcast_dtypes(all_data)</span><br><span class="line"><span class="keyword">del</span> grid, gb </span><br><span class="line">gc.collect();</span><br></pre></td></tr></table></figure>
<p>After creating a grid, we can calculate some features. We will use lags from [1, 2, 3, 4, 5, 12] months ago.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># List of columns that we will use to create lags</span></span><br><span class="line">cols_to_rename = list(all_data.columns.difference(index_cols)) </span><br><span class="line"></span><br><span class="line">shift_range = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">12</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> month_shift <span class="keyword">in</span> tqdm_notebook(shift_range):</span><br><span class="line">    train_shift = all_data[index_cols + cols_to_rename].copy()</span><br><span class="line">    </span><br><span class="line">    train_shift[<span class="string">'date_block_num'</span>] = train_shift[<span class="string">'date_block_num'</span>] + month_shift</span><br><span class="line">    </span><br><span class="line">    foo = <span class="keyword">lambda</span> x: <span class="string">'&#123;&#125;_lag_&#123;&#125;'</span>.format(x, month_shift) <span class="keyword">if</span> x <span class="keyword">in</span> cols_to_rename <span class="keyword">else</span> x</span><br><span class="line">    train_shift = train_shift.rename(columns=foo)</span><br><span class="line"></span><br><span class="line">    all_data = pd.merge(all_data, train_shift, on=index_cols, how=<span class="string">'left'</span>).fillna(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> train_shift</span><br><span class="line"></span><br><span class="line"><span class="comment"># Don't use old data from year 2013</span></span><br><span class="line">all_data = all_data[all_data[<span class="string">'date_block_num'</span>] &gt;= <span class="number">12</span>] </span><br><span class="line"></span><br><span class="line"><span class="comment"># List of all lagged features</span></span><br><span class="line">fit_cols = [col <span class="keyword">for</span> col <span class="keyword">in</span> all_data.columns <span class="keyword">if</span> col[<span class="number">-1</span>] <span class="keyword">in</span> [str(item) <span class="keyword">for</span> item <span class="keyword">in</span> shift_range]] </span><br><span class="line"><span class="comment"># We will drop these at fitting stage</span></span><br><span class="line">to_drop_cols = list(set(list(all_data.columns)) - (set(fit_cols)|set(index_cols))) + [<span class="string">'date_block_num'</span>] </span><br><span class="line"></span><br><span class="line"><span class="comment"># Category for each item</span></span><br><span class="line">item_category_mapping = items[[<span class="string">'item_id'</span>,<span class="string">'item_category_id'</span>]].drop_duplicates()</span><br><span class="line"></span><br><span class="line">all_data = pd.merge(all_data, item_category_mapping, how=<span class="string">'left'</span>, on=<span class="string">'item_id'</span>)</span><br><span class="line">all_data = downcast_dtypes(all_data)</span><br><span class="line">gc.collect();</span><br></pre></td></tr></table></figure>
<h1 id="Train-test-split"><a href="#Train-test-split" class="headerlink" title="Train/test split"></a>Train/test split</h1><p>For a sake of the programming assignment, let’s artificially split the data into train and test. We will treat last month data as the test set.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Save `date_block_num`, as we can't use them as features, but will need them to split the dataset into parts </span></span><br><span class="line">dates = all_data[<span class="string">'date_block_num'</span>]</span><br><span class="line"></span><br><span class="line">last_block = dates.max()</span><br><span class="line">print(<span class="string">'Test `date_block_num` is %d'</span> % last_block)</span><br></pre></td></tr></table></figure>
<pre><code>Test `date_block_num` is 33
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dates_train = dates[dates &lt;  last_block]</span><br><span class="line">dates_test  = dates[dates == last_block]</span><br><span class="line"></span><br><span class="line">X_train = all_data.loc[dates &lt;  last_block].drop(to_drop_cols, axis=<span class="number">1</span>)</span><br><span class="line">X_test =  all_data.loc[dates == last_block].drop(to_drop_cols, axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">y_train = all_data.loc[dates &lt;  last_block, <span class="string">'target'</span>].values</span><br><span class="line">y_test =  all_data.loc[dates == last_block, <span class="string">'target'</span>].values</span><br></pre></td></tr></table></figure>
<h1 id="First-level-models"><a href="#First-level-models" class="headerlink" title="First level models"></a>First level models</h1><p>You need to implement a basic stacking scheme. We have a time component here, so we will use <strong><em>scheme f)</em></strong> from the reading material. Recall, that we always use first level models to build two datasets: test meta-features and 2-nd level train-metafetures. Let’s see how we get test meta-features first. </p>
<h3 id="Test-meta-features"><a href="#Test-meta-features" class="headerlink" title="Test meta-features"></a>Test meta-features</h3><p>Firts, we will run <em>linear regression</em> on numeric columns and get predictions for the last month.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lr = LinearRegression()</span><br><span class="line">lr.fit(X_train.values, y_train)</span><br><span class="line">pred_lr = lr.predict(X_test.values)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Test R-squared for linreg is %f'</span> % r2_score(y_test, pred_lr))</span><br></pre></td></tr></table></figure>
<pre><code>Test R-squared for linreg is 0.743180
</code></pre><p>And the we run <em>LightGBM</em>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lgb_params = &#123;</span><br><span class="line">               <span class="string">'feature_fraction'</span>: <span class="number">0.75</span>,</span><br><span class="line">               <span class="string">'metric'</span>: <span class="string">'rmse'</span>,</span><br><span class="line">               <span class="string">'nthread'</span>:<span class="number">1</span>, </span><br><span class="line">               <span class="string">'min_data_in_leaf'</span>: <span class="number">2</span>**<span class="number">7</span>, </span><br><span class="line">               <span class="string">'bagging_fraction'</span>: <span class="number">0.75</span>, </span><br><span class="line">               <span class="string">'learning_rate'</span>: <span class="number">0.03</span>, </span><br><span class="line">               <span class="string">'objective'</span>: <span class="string">'mse'</span>, </span><br><span class="line">               <span class="string">'bagging_seed'</span>: <span class="number">2</span>**<span class="number">7</span>, </span><br><span class="line">               <span class="string">'num_leaves'</span>: <span class="number">2</span>**<span class="number">7</span>,</span><br><span class="line">               <span class="string">'bagging_freq'</span>:<span class="number">1</span>,</span><br><span class="line">               <span class="string">'verbose'</span>:<span class="number">0</span> </span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">model = lgb.train(lgb_params, lgb.Dataset(X_train, label=y_train), <span class="number">100</span>)</span><br><span class="line">pred_lgb = model.predict(X_test)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Test R-squared for LightGBM is %f'</span> % r2_score(y_test, pred_lgb))</span><br></pre></td></tr></table></figure>
<pre><code>Test R-squared for LightGBM is 0.738391
</code></pre><p>Finally, concatenate test predictions to get test meta-features.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X_test_level2 = np.c_[pred_lr, pred_lgb]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pred_lr</span><br></pre></td></tr></table></figure>
<pre><code>array([ 13.45896153,   3.18599444,   2.5028209 , ...,   0.69860529,
         0.12072911,   0.1755516 ])
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X_test_level2</span><br></pre></td></tr></table></figure>
<pre><code>array([[ 13.45896153,  13.37831474],
       [  3.18599444,   2.55590212],
       [  2.5028209 ,   1.52356814],
       ..., 
       [  0.69860529,   0.41663964],
       [  0.12072911,   0.34056468],
       [  0.1755516 ,   0.32987826]])
</code></pre><h3 id="Train-meta-features"><a href="#Train-meta-features" class="headerlink" title="Train meta-features"></a>Train meta-features</h3><p><strong>Now it is your turn to write the code</strong>. You need to implement <strong><em>scheme f)</em></strong> from the reading material. Here, we will use duration <strong>T</strong> equal to month and <strong>M=15</strong>.  </p>
<p>That is, you need to get predictions (meta-features) from <em>linear regression</em> and <em>LightGBM</em> for months 27, 28, 29, 30, 31, 32. Use the same parameters as in above models.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dates_train.unique(),dates_train.unique().shape</span><br></pre></td></tr></table></figure>
<pre><code>(array([12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
        29, 30, 31, 32]), (21,))
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dates_train_level2 = dates_train[dates_train.isin([<span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>])]</span><br><span class="line"></span><br><span class="line"><span class="comment"># That is how we get target for the 2nd level dataset</span></span><br><span class="line">y_train_level2 = y_train[dates_train.isin([<span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>])]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># And here we create 2nd level feeature matrix, init it with zeros first</span></span><br><span class="line">X_train_level2 = np.zeros([y_train_level2.shape[<span class="number">0</span>], <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Now fill `X_train_level2` with metafeatures</span></span><br><span class="line"><span class="keyword">for</span> cur_block_num <span class="keyword">in</span> [<span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>]:</span><br><span class="line">    </span><br><span class="line">    print(cur_block_num)</span><br><span class="line">    </span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">        1. Split `X_train` into parts</span></span><br><span class="line"><span class="string">           Remember, that corresponding dates are stored in `dates_train` </span></span><br><span class="line"><span class="string">        2. Fit linear regression </span></span><br><span class="line"><span class="string">        3. Fit LightGBM and put predictions          </span></span><br><span class="line"><span class="string">        4. Store predictions from 2. and 3. in the right place of `X_train_level2`. </span></span><br><span class="line"><span class="string">           You can use `dates_train_level2` for it</span></span><br><span class="line"><span class="string">           Make sure the order of the meta-features is the same as in `X_test_level2`</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    train,train_y = X_train[dates_train &lt; cur_block_num], y_train[dates_train &lt; cur_block_num]</span><br><span class="line">    lr.fit(train.values, train_y)</span><br><span class="line">    model = lgb.train(lgb_params, lgb.Dataset(train, label= train_y), <span class="number">100</span>)</span><br><span class="line">    </span><br><span class="line">    test = X_train[dates == cur_block_num]</span><br><span class="line">    </span><br><span class="line">    pred_lr = lr.predict(test)</span><br><span class="line">    pred_gb = model.predict(test)</span><br><span class="line">    </span><br><span class="line">    X_train_level2[dates_train_level2 == cur_block_num, :] = np.c_[pred_lr,pred_gb]</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#  YOUR CODE GOES HERE</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Sanity check</span></span><br><span class="line"><span class="keyword">assert</span> np.all(np.isclose(X_train_level2.mean(axis=<span class="number">0</span>), [ <span class="number">1.50148988</span>,  <span class="number">1.38811989</span>]))</span><br></pre></td></tr></table></figure>
<pre><code>27


/opt/conda/lib/python3.6/site-packages/ipykernel_launcher.py:22: UserWarning: Boolean Series key will be reindexed to match DataFrame index.


28
29
30
31
32
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X_train_level2.shape</span><br></pre></td></tr></table></figure>
<pre><code>(34404, 2)
</code></pre><p>Remember, the ensembles work best, when first level models are diverse. We can qualitatively analyze the diversity by examinig <em>scatter plot</em> between the two metafeatures. Plot the scatter plot below. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># YOUR CODE GOES HERE</span></span><br><span class="line">plt.scatter(X_train_level2[:,<span class="number">0</span>],X_train_level2[:,<span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<pre><code>&lt;matplotlib.collections.PathCollection at 0x7f2ea416f278&gt;
</code></pre><p><img src="output_47_1.png" alt="png"></p>
<h1 id="Ensembling-1"><a href="#Ensembling-1" class="headerlink" title="Ensembling"></a>Ensembling</h1><p>Now, when the meta-features are created, we can ensemble our first level models.</p>
<h3 id="Simple-convex-mix"><a href="#Simple-convex-mix" class="headerlink" title="Simple convex mix"></a>Simple convex mix</h3><p>Let’s start with simple linear convex mix:</p>
<script type="math/tex; mode=display">
mix= \alpha\cdot\text{linreg_prediction}+(1-\alpha)\cdot\text{lgb_prediction}</script><p>We need to find an optimal $\alpha$. And it is very easy, as it is feasible to do grid search. Next, find the optimal $\alpha$ out of <code>alphas_to_try</code> array. Remember, that you need to use train meta-features (not test) when searching for $\alpha$. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alphas_to_try = np.linspace(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1001</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># YOUR CODE GOES HERE</span></span><br><span class="line">best_alpha = <span class="number">0</span> <span class="comment"># YOUR CODE GOES HERE</span></span><br><span class="line">r2_train_simple_mix = <span class="number">0</span> <span class="comment"># YOUR CODE GOES HERE</span></span><br><span class="line"></span><br><span class="line">max_score = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> alpha <span class="keyword">in</span> alphas_to_try:</span><br><span class="line">    mix = alpha * X_train_level2[:,<span class="number">0</span>] + (<span class="number">1</span>-alpha) * X_train_level2[:,<span class="number">1</span>]</span><br><span class="line">    r2 = r2_score(y_train_level2,mix)</span><br><span class="line">    <span class="keyword">if</span> r2 &gt; r2_train_simple_mix:</span><br><span class="line">        r2_train_simple_mix = r2</span><br><span class="line">        best_alpha = alpha</span><br><span class="line">        </span><br><span class="line">print(<span class="string">'Best alpha: %f; Corresponding r2 score on train: %f'</span> % (best_alpha, r2_train_simple_mix))</span><br></pre></td></tr></table></figure>
<pre><code>Best alpha: 0.765000; Corresponding r2 score on train: 0.627255
</code></pre><p>Now use the $\alpha$ you’ve found to compute predictions for the test set </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test_preds = best_alpha * X_test_level2[:,<span class="number">0</span>] + (<span class="number">1</span>- best_alpha) * X_test_level2[:,<span class="number">1</span>]</span><br><span class="line">r2_test_simple_mix = r2_score(y_test, test_preds) </span><br><span class="line"></span><br><span class="line">print(<span class="string">'Test R-squared for simple mix is %f'</span> % r2_test_simple_mix)</span><br></pre></td></tr></table></figure>
<pre><code>Test R-squared for simple mix is 0.781144
</code></pre><h3 id="Stacking"><a href="#Stacking" class="headerlink" title="Stacking"></a>Stacking</h3><p>Now, we will try a more advanced ensembling technique. Fit a linear regression model to the meta-features. Use the same parameters as in the model above.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># YOUR CODE GOES HERE</span></span><br><span class="line">meta_model = LinearRegression()</span><br><span class="line">meta_model.fit(X_train_level2, y_train_level2)</span><br></pre></td></tr></table></figure>
<pre><code>LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False)
</code></pre><p>Compute R-squared on the train and test sets.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_preds = meta_model.predict(X_train_level2) <span class="comment"># YOUR CODE GOES HERE</span></span><br><span class="line">r2_train_stacking = r2_score(y_train_level2, train_preds)<span class="comment"># YOUR CODE GOES HERE</span></span><br><span class="line"></span><br><span class="line">test_preds = meta_model.predict(X_test_level2)</span><br><span class="line">r2_test_stacking = r2_score(y_test, test_preds)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Train R-squared for stacking is %f'</span> % r2_train_stacking)</span><br><span class="line">print(<span class="string">'Test  R-squared for stacking is %f'</span> % r2_test_stacking)</span><br></pre></td></tr></table></figure>
<pre><code>Train R-squared for stacking is 0.632176
Test  R-squared for stacking is 0.771297
</code></pre><p>Interesting, that the score turned out to be lower than in previous method. Although the model is very simple (just 3 parameters) and, in fact, mixes predictions linearly, it looks like it managed to overfit. <strong>Examine and compare</strong> train and test scores for the two methods. </p>
<p>And of course this particular case does not mean simple mix is always better than stacking.</p>
<p>We all done! Submit everything we need to the grader now.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> grader <span class="keyword">import</span> Grader</span><br><span class="line">grader = Grader()</span><br><span class="line"></span><br><span class="line">grader.submit_tag(<span class="string">'best_alpha'</span>, best_alpha)</span><br><span class="line"></span><br><span class="line">grader.submit_tag(<span class="string">'r2_train_simple_mix'</span>, r2_train_simple_mix)</span><br><span class="line">grader.submit_tag(<span class="string">'r2_test_simple_mix'</span>,  r2_test_simple_mix)</span><br><span class="line"></span><br><span class="line">grader.submit_tag(<span class="string">'r2_train_stacking'</span>, r2_train_stacking)</span><br><span class="line">grader.submit_tag(<span class="string">'r2_test_stacking'</span>,  r2_test_stacking)</span><br></pre></td></tr></table></figure>
<pre><code>Current answer for task best_alpha is: 0.765
Current answer for task r2_train_simple_mix is: 0.627255043446
Current answer for task r2_test_simple_mix is: 0.781144169579
Current answer for task r2_train_stacking is: 0.632175561459
Current answer for task r2_test_stacking is: 0.771297132342
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">STUDENT_EMAIL = <span class="string">"lvduzhen@gmail.com"</span></span><br><span class="line">STUDENT_TOKEN = <span class="string">"NCLz49IdJr2LVqAV"</span></span><br><span class="line">grader.status()</span><br></pre></td></tr></table></figure>
<pre><code>You want to submit these numbers:
Task best_alpha: 0.765
Task r2_train_simple_mix: 0.627255043446
Task r2_test_simple_mix: 0.781144169579
Task r2_train_stacking: 0.632175561459
Task r2_test_stacking: 0.771297132342
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">grader.submit(STUDENT_EMAIL, STUDENT_TOKEN)</span><br></pre></td></tr></table></figure>
<pre><code>Submitted to Coursera platform. See results on assignment page!
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Machine Learning</category>
      </categories>
  </entry>
  <entry>
    <title>Pipeline for data science project</title>
    <url>/Pipeline-for-data-science-project/2019/07/17/</url>
    <content><![CDATA[<embed id="embed" src="pipeline.svg" type="image/svg+xml">]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Machine Learning</category>
        <category>Competition</category>
        <category>Tricks</category>
      </categories>
  </entry>
  <entry>
    <title>Ensemble Methods</title>
    <url>/Ensemble-Methods/2019/07/17/</url>
    <content><![CDATA[<h1 id="Ensemble-methods"><a href="#Ensemble-methods" class="headerlink" title="Ensemble methods"></a>Ensemble methods</h1><blockquote>
<p>Ensemble methods means combining different machine learning models to get a better prediction</p>
</blockquote>
<h2 id="Averageing-or-blending"><a href="#Averageing-or-blending" class="headerlink" title="Averageing (or blending)"></a>Averageing (or blending)</h2><script type="math/tex; mode=display">(model_1 + model_2)/2</script><h2 id="Weighted-averaging"><a href="#Weighted-averaging" class="headerlink" title="Weighted averaging"></a>Weighted averaging</h2><script type="math/tex; mode=display">model_1 * 0.3 + model_2 * 0.7</script><h2 id="Conditional-averaging"><a href="#Conditional-averaging" class="headerlink" title="Conditional averaging"></a>Conditional averaging</h2><script type="math/tex; mode=display">model_1 \, if \, x < 50 \, else \, model_2</script><h2 id="Bagging"><a href="#Bagging" class="headerlink" title="Bagging"></a>Bagging</h2><h3 id="What-is-bagging"><a href="#What-is-bagging" class="headerlink" title="What is bagging"></a>What is bagging</h3><p>Bagging means <strong>averaging</strong> slightly different versions of the <strong>same model</strong> to improve accuracy</p>
<h3 id="Why-bagging"><a href="#Why-bagging" class="headerlink" title="Why bagging"></a>Why bagging</h3><p>There are 2 main sources of errors in modeling:</p>
<ul>
<li>Bias (underfitting)</li>
<li>Variance (overfitting)<br>Bagging try to reduce the variance</li>
</ul>
<p><img src="17.png" alt></p>
<h3 id="Parameterss-that-control-bagging"><a href="#Parameterss-that-control-bagging" class="headerlink" title="Parameterss that control bagging"></a>Parameterss that control bagging</h3><ul>
<li>Changing the seed</li>
<li>Row sampling or bootstraping</li>
<li>Shuffling</li>
<li>Column sampling</li>
<li>Model-specific parameters</li>
<li>Number of models</li>
<li>Parallelism</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model = RandomForestRegressor()</span><br><span class="line">bags = <span class="number">10</span></span><br><span class="line">seed = <span class="number">1</span></span><br><span class="line">bagged_prediction = np.zeros(test.shape[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">0</span>,bags):</span><br><span class="line">    model.set_params(randm_state = seed + n)</span><br><span class="line">    model.fit(train,y)</span><br><span class="line">    preds = model.predict(test)</span><br><span class="line">    bagged_prediction += preds</span><br><span class="line"></span><br><span class="line">bagged_prediction /= bags</span><br></pre></td></tr></table></figure>
<h2 id="Boosting"><a href="#Boosting" class="headerlink" title="Boosting"></a>Boosting</h2><h3 id="What-is-Boosting"><a href="#What-is-Boosting" class="headerlink" title="What is Boosting"></a>What is Boosting</h3><p>A form of weighted averaging of models where each model is built sequentially via taking into account the past model performance</p>
<h3 id="Main-boosting-types"><a href="#Main-boosting-types" class="headerlink" title="Main boosting types"></a>Main boosting types</h3><ol>
<li>Weight based</li>
<li>Residual based</li>
</ol>
<h4 id="Weighted-based"><a href="#Weighted-based" class="headerlink" title="Weighted based"></a>Weighted based</h4><p><img src="13.png" alt></p>
<h4 id="Weighted-based-boosting-parameters"><a href="#Weighted-based-boosting-parameters" class="headerlink" title="Weighted based boosting parameters"></a>Weighted based boosting parameters</h4><ul>
<li>Learning rate</li>
<li>Number of estimators</li>
<li>Input model - can be anything that accepts weights</li>
<li>Sub boosting type:<ul>
<li>AdaBoost</li>
<li>LogitBoost</li>
</ul>
</li>
</ul>
<h4 id="Residual-based-boosting"><a href="#Residual-based-boosting" class="headerlink" title="Residual based boosting"></a>Residual based boosting</h4><p><img src="14.png" alt><br><img src="15.png" alt></p>
<p>we use the error to get the <strong>direction</strong>, and update our prediction through that direction</p>
<h3 id="Residual-based-boosting-parameters"><a href="#Residual-based-boosting-parameters" class="headerlink" title="Residual based boosting parameters"></a>Residual based boosting parameters</h3><ul>
<li>Learning rate</li>
<li>Number of estimators</li>
<li>Row sampling</li>
<li>Column (sub) sampling</li>
<li>Input model - better be trees</li>
<li>Sub boosting type:<ul>
<li>Fully gradient based</li>
<li>Dart</li>
</ul>
</li>
<li>Implementation <ul>
<li>XGBoost</li>
<li>LightGBM</li>
<li>H2O’s GBM</li>
<li>Catboost</li>
<li>Sklearn’s GBM</li>
</ul>
</li>
</ul>
<h2 id="Stacking"><a href="#Stacking" class="headerlink" title="Stacking"></a>Stacking</h2><h3 id="What-is-stacking"><a href="#What-is-stacking" class="headerlink" title="What is stacking?"></a>What is stacking?</h3><p>Stacking means making prediction of a number of models in a hold-out set and than using a different(Meta) model to train on these prediction</p>
<h3 id="Methology"><a href="#Methology" class="headerlink" title="Methology"></a>Methology</h3><ol>
<li>Split the train set into two disjoint sets (train and dev)</li>
<li>Train several base learners on the first part</li>
<li>Make predictions with the base learners on the dev set and test set</li>
<li>using the predictions of dev set to train a meta model and make predictions on test set</li>
</ol>
<p><img src="16.png" alt></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train,dev,y_train,y_dev = train_test_split(train,y_train, test_size = <span class="number">0.2</span>)</span><br><span class="line">model1 = RandomForestRegressor()</span><br><span class="line">model2 = LinearRegression()</span><br><span class="line"></span><br><span class="line">model1.fit(train,y_train)</span><br><span class="line">model2.fit(train,y_train)</span><br><span class="line"></span><br><span class="line">pred1 = model1.predict(dev)</span><br><span class="line">pred2 = model2.predict(dev)</span><br><span class="line"></span><br><span class="line">test_pred1 = model1.predict(test)</span><br><span class="line">test_pred2 = model2.predict(test)</span><br><span class="line"></span><br><span class="line">stacked_predcitions = np.column_stack((pred1,pred2))</span><br><span class="line">stacked_test_predcitions = np.column_stack((test_pred1,test_pred2))</span><br><span class="line"></span><br><span class="line">meta_model = LinearRegression()</span><br><span class="line">meta_model.fit(stacked_predcitions,y_dev)</span><br><span class="line"></span><br><span class="line">final_predictions = meta_model.predict(stacked_test_predcitions)</span><br></pre></td></tr></table></figure>
<h3 id="Things-to-be-mindful-of"><a href="#Things-to-be-mindful-of" class="headerlink" title="Things to be mindful of"></a>Things to be mindful of</h3><ul>
<li>With time  sensitive data - respect time</li>
<li>Diversity as important as performance(different model you choose need bring new information, no matter how weak the model is)</li>
<li>Diversity</li>
</ul>
<h2 id="StackNet"><a href="#StackNet" class="headerlink" title="StackNet"></a>StackNet</h2><p>A scalable meta modelling methology taht utilizes stacking to combine multiple models in a neural network architecture of multiple levels</p>
<p><img src="18.png" alt></p>
<h3 id="How-to-train"><a href="#How-to-train" class="headerlink" title="How to train"></a>How to train</h3><ul>
<li>cannot use BP</li>
<li>use stacking to link each model/node with target</li>
<li>to extend to many levels, we can use KFold parameters</li>
<li>No epochs - different connections instead</li>
</ul>
<h3 id="first-level-Tips"><a href="#first-level-Tips" class="headerlink" title="first level Tips"></a>first level Tips</h3><ol>
<li>Diversity based on algo<ul>
<li>2-3 gradient boosted trees(xgboost, H2O, catboost)</li>
<li>2-3 Neural Net (keras, pyTorch)</li>
<li>1-2 ExtraTree/ Random Forest( sklearn)</li>
<li>1-2 Linear models as in Logistic/ridge regression, linearsvm(sklearn)</li>
<li>1-2 knn models(sklearn)</li>
<li>1 Factorization machine (libfm)</li>
<li>1 svm with nonlinear kernel if size/memory allows(sklearn)</li>
<li>1 svm with nonlinear kernel if size/memory allows(sklearn)</li>
</ul>
</li>
<li>Diversity based on input data<ul>
<li>Categorical features: One hot, label encoding, target encoding, frequency.</li>
<li>Numberical features: outliner, binning, derivatives, percentiles, scaling</li>
<li>Interactions: col1 */+-col2, groupby, unsupervied</li>
<li>For classification target, we can use regression models in middle level </li>
</ul>
</li>
</ol>
<h3 id="Subquent-level-tips"><a href="#Subquent-level-tips" class="headerlink" title="Subquent level tips"></a>Subquent level tips</h3><ol>
<li>Simpler(or shallower) algo<ul>
<li>gradient boosted tree with small depth(2 or 3)</li>
<li>linear models with high reglarization</li>
<li>Extra Trees</li>
<li>Shallow network</li>
<li>Knn with BrayCurtis Distance</li>
<li>Brute forcing a seach for best linear weights based on cv</li>
</ul>
</li>
<li>Feature engineering<ul>
<li>parwise differences between meta features</li>
<li>row-wise statics like average or stds</li>
<li>Standard feature selection techniques</li>
<li>For evenry 7.5 models in previous level we add 1 in meta(empirical)</li>
<li>Be mindful of target leakage</li>
</ul>
</li>
</ol>
<h3 id="Validation-schema"><a href="#Validation-schema" class="headerlink" title="Validation schema"></a>Validation schema</h3><p>There are a number of ways to validate second level models (meta-models). In this reading material you will find a description for the most popular ones. If not specified, we assume that the data does not have a time component. We also assume we already validated and fixed hyperparameters for the first level models (models).</p>
<ol>
<li>Simple holdout scheme<ol>
<li>Split train data into three parts: partA and partB and partC.</li>
<li>Fit N diverse models on partA, predict for partB, partC, test_data getting meta-features partB_meta, partC_meta and test_meta respectively.</li>
<li>Fit a metamodel to a partB_meta while validating its hyperparameters on partC_meta.</li>
<li>When the metamodel is validated, fit it to [partB_meta, partC_meta] and predict for test_meta.</li>
</ol>
</li>
<li>Meta holdout scheme with OOF meta-features<ol>
<li>Split train data into K folds. Iterate though each fold: retrain N diverse models on all folds except current fold, predict for the current fold. After this step for each object in train_data we will have N meta-features (also known as out-of-fold predictions, OOF). Let’s call them train_meta.</li>
<li>Fit models to whole train data and predict for test data. Let’s call these features test_meta.</li>
<li>Split train_meta into two parts: train_metaA and train_metaB. Fit a meta-model to train_metaA while validating its hyperparameters on train_metaB.</li>
<li>When the meta-model is validated, fit it to train_meta and predict for test_meta.</li>
</ol>
</li>
<li>Meta KFold scheme with OOF meta-features<ol>
<li>Obtain OOF predictions train_meta and test metafeatures test_meta using b.1 and b.2.</li>
<li>Use KFold scheme on train_meta to validate hyperparameters for meta-model. A common practice to fix seed for this KFold to be the same as seed for KFold used to get OOF predictions.</li>
<li>When the meta-model is validated, fit it to train_meta and predict for test_meta.</li>
</ol>
</li>
<li>Holdout scheme with OOF meta-features<ol>
<li>Split train data into two parts: partA and partB.</li>
<li>Split partA into K folds. Iterate though each fold: retrain N diverse models on all folds except current fold, predict for the current fold. After this step for each object in partA we will have N meta-features (also known as out-of-fold predictions, OOF). Let’s call them partA_meta.</li>
<li>Fit models to whole partA and predict for partB and test_data, getting partB_meta and test_meta respectively.</li>
<li>Fit a meta-model to a partA_meta, using partB_meta to validate its hyperparameters.</li>
<li>When the meta-model is validated basically do 2. and 3. without dividing train_data into parts and then train a meta-model. That is, first get out-of-fold predictions train_meta for the train_data using models. Then train models on train_data, predict for test_data, getting test_meta. Train meta-model on the train_meta and predict for test_meta.</li>
</ol>
</li>
<li>KFold scheme with OOF meta-features<ol>
<li>To validate the model we basically do d.1 — d.4 but we divide train data into parts partA and partB M times using KFold strategy with M folds.</li>
<li>When the meta-model is validated do d.5.</li>
</ol>
</li>
</ol>
<p>Validation in presence of time component</p>
<ol>
<li>KFold scheme in time series<br> In time-series task we usually have a fixed period of time we are asked to predict. Like day, week, month or arbitrary period with duration of T.<ol>
<li>Split the train data into chunks of duration T. Select first M chunks.</li>
<li>Fit N diverse models on those M chunks and predict for the chunk M+1. Then fit those models on first M+1 chunks and predict for chunk M+2 and so on, until you hit the end. After that use all train data to fit models and get predictions for test. Now we will have meta-features for the chunks starting from number M+1 as well as meta-features for the test.</li>
<li>Now we can use meta-features from first K chunks [M+1,M+2,..,M+K] to fit level 2 models and validate them on chunk M+K+1. Essentially we are back to step 1. with the lesser amount of chunks and meta-features instead of features.</li>
</ol>
</li>
<li>KFold scheme in time series with limited amount of data<br> We may often encounter a situation, where scheme f) is not applicable, especially with limited amount of data. For example, when we have only years 2014, 2015, 2016 in train and we need to predict for a whole year 2017 in test. In such cases scheme c) could be of help, but with one constraint: KFold split should be done with the respect to the time component. For example, in case of data with several years we would treat each year as a fold.</li>
</ol>
<h3 id="Software"><a href="#Software" class="headerlink" title="Software"></a>Software</h3><ul>
<li>StackNet (<a href="https://github.com/kaz-Anova/StackNet" target="_blank" rel="noopener">https://github.com/kaz-Anova/StackNet</a>)</li>
<li>Stacked ensembles from H20</li>
<li>Xcessiv (<a href="https://github.com/reiinakano/xcessiv" target="_blank" rel="noopener">https://github.com/reiinakano/xcessiv</a>)</li>
</ul>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Machine Learning</category>
        <category>Competition</category>
        <category>Tricks</category>
      </categories>
  </entry>
  <entry>
    <title>Advanced features</title>
    <url>/Advanced-features/2019/07/16/</url>
    <content><![CDATA[<h1 id="Advanced-Features"><a href="#Advanced-Features" class="headerlink" title="Advanced Features"></a>Advanced Features</h1><h2 id="Statistics-and-distance-based-features"><a href="#Statistics-and-distance-based-features" class="headerlink" title="Statistics and distance based features"></a>Statistics and distance based features</h2><h3 id="Groupby-feature"><a href="#Groupby-feature" class="headerlink" title="Groupby feature"></a>Groupby feature</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gb = df.groupby([<span class="string">'user_id'</span>,<span class="string">'page_id'</span>], as_index = <span class="keyword">False</span>).agg(&#123;<span class="string">'ad_price'</span>: &#123;<span class="string">'max_price'</span>: np.max, <span class="string">'min_price'</span>: np.min&#125;&#125;)</span><br><span class="line">gb.columns = [<span class="string">'user_id'</span>,<span class="string">'page_id'</span>,<span class="string">'min_price'</span>,<span class="string">'max_price'</span>]</span><br></pre></td></tr></table></figure>
<p><img src="5.png" alt></p>
<ul>
<li>How many pages user visited</li>
<li>Standard deviation of prices</li>
<li>Most visited page</li>
<li>Many, many more</li>
</ul>
<h3 id="Neighbors"><a href="#Neighbors" class="headerlink" title="Neighbors"></a>Neighbors</h3><ul>
<li>Explicit group is not needed</li>
<li>More flexible</li>
<li>Much harder to implement</li>
</ul>
<p>such as:</p>
<ul>
<li>Number of houses in 500m, 1000m,..</li>
<li>Average price per square meter in 500m, 1000m,..</li>
<li>Number of schools/supermarkets/parking lots in 500m, 1000m,..</li>
<li>Distance to closest subway station</li>
</ul>
<p>KNN features as example:</p>
<ul>
<li>Mean encode all the variables</li>
<li>For every point, find 2000 nearest neighbors using Bray-Curtis metric<script type="math/tex; mode=display">\frac{\sum|\mu_i - \upsilon_i|}{|\mu_i + \upsilon_i|}</script></li>
<li>Calculate various features from those 2000 neighbors<ul>
<li>Mean target of nearest 5,10,15,500, 2000 neighbors</li>
<li>Mean distance to 10 closest neighbors</li>
<li>Mean distance to 10 closest neighbors with target 1</li>
<li>Mean distance to 10 closest neighbors with target 0</li>
</ul>
</li>
</ul>
<h2 id="Matrix-Factorizations-for-Feature-Extraction"><a href="#Matrix-Factorizations-for-Feature-Extraction" class="headerlink" title="Matrix Factorizations for Feature Extraction"></a>Matrix Factorizations for Feature Extraction</h2><ul>
<li>Matrix Factorization is a very general approach for dimensionality reduction and feature extraction</li>
<li>It can be applied for transforming categorical features into real-valued</li>
<li>Many of tricks trick suitable for linear models can be useful for MF</li>
</ul>
<p><img src="6.png" alt><br><img src="7.png" alt></p>
<ul>
<li>Can be apply only for some columns</li>
<li>Can provide additional diversity<br>  − Good for ensembles</li>
<li>It is a lossy transformation. Its’ efficiency depends on:<br>  − Particulartask<br>  − Numberoflatentfactors(Usually 5-100)</li>
<li>Several MF methods you can find in sklearn</li>
<li>SVD and PCA<br>  − Standart tools for Matrix Factorization</li>
<li>TruncatedSVD<br>  − Works with sparse matrices</li>
<li>Non-negative Matrix Factorization (NMF)<br>  − Ensures that all latent factors are non-negative<br>  − Good for counts-like data</li>
</ul>
<h2 id="Feature-interactions"><a href="#Feature-interactions" class="headerlink" title="Feature interactions"></a>Feature interactions</h2><p><img src="8.png" alt><br><img src="9.png" alt><br><img src="10.png" alt></p>
<ul>
<li>We have a lot of possible interactions − N*N for N features<ul>
<li>Even more if use several types in interactions</li>
</ul>
</li>
<li>Need to reduce its’ number<ul>
<li>Dimensionality reduction</li>
<li>Feature selection</li>
</ul>
</li>
<li>Interactions’ order<ul>
<li>We looked at 2nd and higher order interactions.</li>
<li>It is hard to do generation and selection automatically.</li>
<li>Manual building of high-order interactions is some kind of art.</li>
</ul>
</li>
</ul>
<h3 id="Frequent-operations-for-feature-interaction"><a href="#Frequent-operations-for-feature-interaction" class="headerlink" title="Frequent operations for feature interaction"></a>Frequent operations for feature interaction</h3><ul>
<li>Multiplication</li>
<li>Sum</li>
<li>Diff</li>
<li>Division</li>
</ul>
<h3 id="Example-of-interaction-generation-pipeline"><a href="#Example-of-interaction-generation-pipeline" class="headerlink" title="Example of interaction generation pipeline"></a>Example of interaction generation pipeline</h3><p><img src="11.png" alt></p>
<h3 id="Extract-features-from-DT"><a href="#Extract-features-from-DT" class="headerlink" title="Extract features from DT"></a>Extract features from DT</h3><p><img src="12.png" alt><br>get the index of the leaf that each sample is predicted as. it a method to get the high order features</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tree.apply()</span><br></pre></td></tr></table></figure>
<h2 id="tSNE"><a href="#tSNE" class="headerlink" title="tSNE"></a>tSNE</h2><ul>
<li>Result heavily depends on hyperparameters (perplexity)</li>
<li>Good practice is to use several projections with different perplexities (5-100)</li>
<li>Due to stochastic nature, tSNE provides different projections even for the same data\hyperparams<br>  − Train and test should be projected together</li>
<li>tSNE runs for a long time with a big number of features<br>  − it is common to do dimensionality reduction before projection.</li>
</ul>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Machine Learning</category>
        <category>Competition</category>
        <category>Tricks</category>
      </categories>
      <tags>
        <tag>Feature Engineering</tag>
      </tags>
  </entry>
  <entry>
    <title>Practical Guide for Kaggle Competition</title>
    <url>/Practical-Guide-for-Kaggle-Competition/2019/07/16/</url>
    <content><![CDATA[<h1 id="Practical-Guide-for-Competition"><a href="#Practical-Guide-for-Competition" class="headerlink" title="Practical Guide for Competition"></a>Practical Guide for Competition</h1><h2 id="Define-your-goals"><a href="#Define-your-goals" class="headerlink" title="Define your goals."></a>Define your goals.</h2><p>What you can get out of your participation?</p>
<ol>
<li>To learn more about an interesting problem</li>
<li>To get acquainted with new software tools</li>
<li>To hunt for a medal</li>
</ol>
<h2 id="Working-with-ideas"><a href="#Working-with-ideas" class="headerlink" title="Working with ideas"></a>Working with ideas</h2><ol>
<li>Organize ideas in some structure</li>
<li>Select the most important and promising ideas</li>
<li>Try to understand the reasons why something does/doesn’t work</li>
</ol>
<h3 id="Initial-pipeline"><a href="#Initial-pipeline" class="headerlink" title="Initial pipeline"></a>Initial pipeline</h3><ol>
<li>Get familiar with problem domain</li>
<li>Start with simple (or even primitive) solution</li>
<li>Debug full pipeline<br> − From reading data to writing submission file</li>
<li>“From simple to complex”<br> − I prefer to start with Random Forest rather than Gradient Boosted Decision Trees</li>
</ol>
<h3 id="data-loading"><a href="#data-loading" class="headerlink" title="data loading"></a>data loading</h3><ol>
<li>Do basic preprocessing and convert csv/txt files into hdf5/npy for much faster loading</li>
<li>Do not forget that by default data is stored in 64-bit arrays, most of the times you can safely downcast it to 32-bits</li>
<li>Large datasets can be processed in chunks</li>
</ol>
<h3 id="Performance-evaluation"><a href="#Performance-evaluation" class="headerlink" title="Performance evaluation"></a>Performance evaluation</h3><ol>
<li>Extensive validation is not always needed</li>
<li>Start with fastest models - such as LightGBM</li>
</ol>
<h2 id="Everything-is-a-hyperparameter"><a href="#Everything-is-a-hyperparameter" class="headerlink" title="Everything is a hyperparameter"></a>Everything is a hyperparameter</h2><p>Sort all parameters by these principles: </p>
<ol>
<li>Importance</li>
<li>Feasibility</li>
<li>Understanding</li>
</ol>
<p>Note: changing one parameter can affect the whole pipeline</p>
<p><img src="1.png" alt></p>
<h2 id="tricks"><a href="#tricks" class="headerlink" title="tricks"></a>tricks</h2><ol>
<li>Fast and dirty always better<ul>
<li>Don’t pay too much attention to code quality</li>
<li>Keep things simple: save only important things</li>
<li>If you feel uncomfortable with given computational resources </li>
<li>rent a larger server</li>
</ul>
</li>
<li>Use good variable names<ul>
<li>If your code is hard to read — you definitely will have<br>problems soon or later</li>
</ul>
</li>
<li>Keep your research reproducible<ul>
<li>Fix random seed<br>− Write down exactly how any features were generated<br>− Use Version Control Systems (VCS, for example, git)</li>
</ul>
</li>
<li>Reuse code<br> − Especially important to use same code for train and test stages</li>
<li>Read papers<ul>
<li>For example, how to optimize AUC</li>
</ul>
</li>
<li>Read forums and examine kernels first</li>
<li>Code organization<ul>
<li>keeping it clean</li>
<li>macros</li>
<li>test/val</li>
</ul>
</li>
</ol>
<h2 id="Pipeline-detail"><a href="#Pipeline-detail" class="headerlink" title="Pipeline detail"></a>Pipeline detail</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">Procedure</th>
<th style="text-align:left">days</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Understand the problem</td>
<td style="text-align:left">1 ~ 2 days</td>
</tr>
<tr>
<td style="text-align:left">Exploratory data analysis</td>
<td style="text-align:left">1 ~ 2 days</td>
</tr>
<tr>
<td style="text-align:left">Define cv strategy</td>
<td style="text-align:left">1 day</td>
</tr>
<tr>
<td style="text-align:left">Feature Engineering</td>
<td style="text-align:left">until last 3 ~ 4 days</td>
</tr>
<tr>
<td style="text-align:left">Modeling</td>
<td style="text-align:left">Until last 3 ~ 4 days</td>
</tr>
<tr>
<td style="text-align:left">Ensembling</td>
<td style="text-align:left">last 3 ~ 4 days</td>
</tr>
</tbody>
</table>
</div>
<h3 id="Understand-broadly-the-problem"><a href="#Understand-broadly-the-problem" class="headerlink" title="Understand broadly the problem"></a>Understand broadly the problem</h3><ol>
<li>type of problem</li>
<li>How big is the dataset</li>
<li>What is the metric</li>
<li>Previous code revelant</li>
<li>Hardware needed (cpu, gpu ….)</li>
<li>Software needed (TF, Sklearn, xgboost, lightgBM)</li>
</ol>
<h3 id="EDA"><a href="#EDA" class="headerlink" title="EDA"></a>EDA</h3><p>see the blog <a href="https://zhangruochi.com/Exploratory-data-analysis/2019/07/13/">Exploratory data analysis</a></p>
<h3 id="Define-cv-strategy"><a href="#Define-cv-strategy" class="headerlink" title="Define cv strategy"></a>Define cv strategy</h3><ol>
<li>This setp is critical</li>
<li>Is time is important? <strong>Time-based validation</strong></li>
<li>Different entities than the train. <strong>StratifiedKFold Validation</strong></li>
<li>Is it completely random? Random validation</li>
<li>Combination of all the above</li>
<li>Use the leader board to test</li>
</ol>
<h3 id="Feature-Engineering"><a href="#Feature-Engineering" class="headerlink" title="Feature Engineering"></a>Feature Engineering</h3><p><img src="2.png" alt></p>
<h3 id="Modeling"><a href="#Modeling" class="headerlink" title="Modeling"></a>Modeling</h3><p><img src="3.png" alt></p>
<h3 id="Ensembling"><a href="#Ensembling" class="headerlink" title="Ensembling"></a>Ensembling</h3><p><img src="4.png" alt></p>
]]></content>
      <categories>
        <category>Competition</category>
        <category>Tricks</category>
      </categories>
  </entry>
  <entry>
    <title>Hyperparameters tuning</title>
    <url>/Hyperparameters-tuning/2019/07/16/</url>
    <content><![CDATA[<h1 id="Hyperparameters-tuning"><a href="#Hyperparameters-tuning" class="headerlink" title="Hyperparameters tuning"></a>Hyperparameters tuning</h1><blockquote>
<p>Don’t spend too much time tuning hyperparameters， Only if you don’t have any more ideas or you have spare computational resources</p>
</blockquote>
<h2 id="General-pipeline"><a href="#General-pipeline" class="headerlink" title="General pipeline"></a>General pipeline</h2><ol>
<li>Select the most influential parameters<ul>
<li>There are tons of parameters and we can’t tune all of them</li>
</ul>
</li>
<li>Understand, how exactly they influence the training<ul>
<li>A parameter in red<ul>
<li>Increase it to underfitting</li>
<li>Increasing it impedes fitting</li>
<li>Decrease to allow model fit easier</li>
</ul>
</li>
<li>A parameter in green<ul>
<li>Increasing it leads to a better fit(overfit) on trainset</li>
<li>Increase it,if model underfits</li>
<li>Decreaseifoverfits</li>
</ul>
</li>
</ul>
</li>
<li>Tune them<ul>
<li>Manually(change and examine)</li>
<li>Automatically(hyperopt,etc.)<ul>
<li>Hyperopt</li>
<li>Scikit-optimize </li>
<li>Spearmint</li>
<li>GPyOpt</li>
<li>RoBO</li>
<li>SMAC3</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="Tree-based-model"><a href="#Tree-based-model" class="headerlink" title="Tree based model"></a>Tree based model</h2><h3 id="GBDT"><a href="#GBDT" class="headerlink" title="GBDT"></a>GBDT</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">XGBoost</th>
<th style="text-align:left">LightGBM</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><font color="blue">max_depth</font></td>
<td style="text-align:left"><font color="blue">max_depth/num_leaves</font></td>
</tr>
<tr>
<td style="text-align:left"><font color="blue">subsample</font></td>
<td style="text-align:left"><font color="blue">bagging_fraction</font></td>
</tr>
<tr>
<td style="text-align:left"><font color="blue">colsample_bytree<font>/<font color="blue">colsample_bylevel</font></font></font></td>
<td style="text-align:left"><font color="blue">feature_fraction</font></td>
</tr>
<tr>
<td style="text-align:left"><font color="red">min_child_weight </font></td>
<td style="text-align:left"><font color="red">min_data_in_leaf</font></td>
</tr>
<tr>
<td style="text-align:left"><font color="red">lambda, alpha</font></td>
<td style="text-align:left"><font color="red">lambda, alpha</font></td>
</tr>
<tr>
<td style="text-align:left"><font color="blue"> eta </font></td>
<td style="text-align:left"><font color="red">learning_rate</font></td>
</tr>
<tr>
<td style="text-align:left"><font color="blue">num_round</font></td>
<td style="text-align:left"><font color="blue">num_iterations</font></td>
</tr>
<tr>
<td style="text-align:left">seed</td>
<td style="text-align:left">seed</td>
</tr>
</tbody>
</table>
</div>
<h3 id="RandomForest-ExtraTrees"><a href="#RandomForest-ExtraTrees" class="headerlink" title="RandomForest/ExtraTrees"></a>RandomForest/ExtraTrees</h3><ul>
<li><font color="yellow">N_estimators (the higher the better)</font></li>
<li><font color="blue">cmax_depth</font></li>
<li><font color="blue">cmax_features</font></li>
<li><font color="red">cmin_samples_leaf</font></li>
<li>criterion (‘gini’ is better in most of time)</li>
<li>random_state</li>
<li>n_jobs</li>
</ul>
<h3 id="Neural-Nets"><a href="#Neural-Nets" class="headerlink" title="Neural Nets"></a>Neural Nets</h3><ul>
<li><font color="blue">Number of neurons per layer</font></li>
<li><font color="blue">Number of layers</font></li>
<li>Optimizers<ul>
<li><font color="red">SGD + momentum</font></li>
<li><font color="blue">Adam/Adadelta/Adagrad/…</font><ul>
<li>In practice lead to more overfitting</li>
</ul>
</li>
</ul>
</li>
<li><font color="blue">Batch size</font></li>
<li>Learning rate (not too high or not too low, depend on other parameters)</li>
<li>Regularization<ul>
<li><font color="blue">L2/L1 for weights</font></li>
<li><font color="blue">Dropout/Dropconnect</font></li>
<li><font color="blue">Static dropconnect</font>

</li>
</ul>
</li>
</ul>
<h3 id="Linear-Model"><a href="#Linear-Model" class="headerlink" title="Linear Model"></a>Linear Model</h3><p><font color="red">Regularization parameter (C, alpha, lambda, …)</font></p>
<ul>
<li>Start with very small value and increase it.</li>
<li>SVC starts to work slower as C increases</li>
</ul>
<p>Regularization type</p>
<ul>
<li>L1/L2/L1+L2 — try each</li>
<li>L1 can be used for feature selection</li>
</ul>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Machine Learning</category>
        <category>Competition</category>
        <category>Tricks</category>
      </categories>
  </entry>
  <entry>
    <title>Mean Encodings</title>
    <url>/Mean-Encodings/2019/07/15/</url>
    <content><![CDATA[<p>Version 1.1.0</p>
<h1 id="Mean-encodings"><a href="#Mean-encodings" class="headerlink" title="Mean encodings"></a>Mean encodings</h1><p>In this programming assignment you will be working with <code>1C</code> dataset from the final competition. You are asked to encode <code>item_id</code> in 4 different ways:</p>
<pre><code>1) Via KFold scheme;  
2) Via Leave-one-out scheme;
3) Via smoothing scheme;
4) Via expanding mean scheme.
</code></pre><p><strong>You will need to submit</strong> the correlation coefficient between resulting encoding and target variable up to 4 decimal places.</p>
<h3 id="General-tips"><a href="#General-tips" class="headerlink" title="General tips"></a>General tips</h3><ul>
<li>Fill NANs in the encoding with <code>0.3343</code>.</li>
<li>Some encoding schemes depend on sorting order, so in order to avoid confusion, please use the following code snippet to construct the data frame. This snippet also implements mean encoding without regularization.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"><span class="keyword">from</span> grader <span class="keyword">import</span> Grader</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list(product(<span class="string">'ABCD'</span>, <span class="string">'xy'</span>))</span><br></pre></td></tr></table></figure>
<pre><code>[(&#39;A&#39;, &#39;x&#39;),
 (&#39;A&#39;, &#39;y&#39;),
 (&#39;B&#39;, &#39;x&#39;),
 (&#39;B&#39;, &#39;y&#39;),
 (&#39;C&#39;, &#39;x&#39;),
 (&#39;C&#39;, &#39;y&#39;),
 (&#39;D&#39;, &#39;x&#39;),
 (&#39;D&#39;, &#39;y&#39;)]
</code></pre><h1 id="Read-data"><a href="#Read-data" class="headerlink" title="Read data"></a>Read data</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sales = pd.read_csv(<span class="string">'../readonly/final_project_data/sales_train.csv.gz'</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sales.head(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }

    .dataframe thead th {
        text-align: left;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>date</th>
      <th>date_block_num</th>
      <th>shop_id</th>
      <th>item_id</th>
      <th>item_price</th>
      <th>item_cnt_day</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>02.01.2013</td>
      <td>0</td>
      <td>59</td>
      <td>22154</td>
      <td>999.00</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>03.01.2013</td>
      <td>0</td>
      <td>25</td>
      <td>2552</td>
      <td>899.00</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>05.01.2013</td>
      <td>0</td>
      <td>25</td>
      <td>2552</td>
      <td>899.00</td>
      <td>-1.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>06.01.2013</td>
      <td>0</td>
      <td>25</td>
      <td>2554</td>
      <td>1709.05</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>15.01.2013</td>
      <td>0</td>
      <td>25</td>
      <td>2555</td>
      <td>1099.00</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>5</th>
      <td>10.01.2013</td>
      <td>0</td>
      <td>25</td>
      <td>2564</td>
      <td>349.00</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>6</th>
      <td>02.01.2013</td>
      <td>0</td>
      <td>25</td>
      <td>2565</td>
      <td>549.00</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>7</th>
      <td>04.01.2013</td>
      <td>0</td>
      <td>25</td>
      <td>2572</td>
      <td>239.00</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>8</th>
      <td>11.01.2013</td>
      <td>0</td>
      <td>25</td>
      <td>2572</td>
      <td>299.00</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>9</th>
      <td>03.01.2013</td>
      <td>0</td>
      <td>25</td>
      <td>2573</td>
      <td>299.00</td>
      <td>3.0</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sales.nunique()</span><br></pre></td></tr></table></figure>
<pre><code>date               1034
date_block_num       34
shop_id              60
item_id           21807
item_price        19993
item_cnt_day        198
dtype: int64
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sales[<span class="string">"date_block_num"</span>].unique()</span><br></pre></td></tr></table></figure>
<pre><code>array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33])
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sales[sales[<span class="string">"date_block_num"</span>] ==<span class="number">1</span>].head()</span><br></pre></td></tr></table></figure>
<div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }

    .dataframe thead th {
        text-align: left;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>date</th>
      <th>date_block_num</th>
      <th>shop_id</th>
      <th>item_id</th>
      <th>item_price</th>
      <th>item_cnt_day</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>115690</th>
      <td>21.02.2013</td>
      <td>1</td>
      <td>50</td>
      <td>3880</td>
      <td>1499.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>115691</th>
      <td>14.02.2013</td>
      <td>1</td>
      <td>50</td>
      <td>3880</td>
      <td>1499.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>115692</th>
      <td>21.02.2013</td>
      <td>1</td>
      <td>50</td>
      <td>4128</td>
      <td>899.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>115693</th>
      <td>13.02.2013</td>
      <td>1</td>
      <td>50</td>
      <td>4124</td>
      <td>249.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>115694</th>
      <td>24.02.2013</td>
      <td>1</td>
      <td>50</td>
      <td>3880</td>
      <td>1499.0</td>
      <td>1.0</td>
    </tr>
  </tbody>
</table>
</div>



<h1 id="Aggregate-data"><a href="#Aggregate-data" class="headerlink" title="Aggregate data"></a>Aggregate data</h1><p>Since the competition task is to make a <strong>monthly prediction</strong>, we need to aggregate the data to montly level before doing any encodings. The following code-cell serves just that purpose.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">index_cols = [<span class="string">'shop_id'</span>, <span class="string">'item_id'</span>, <span class="string">'date_block_num'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># For every month we create a grid from all shops/items combinations from that month</span></span><br><span class="line">grid = [] </span><br><span class="line"><span class="keyword">for</span> block_num <span class="keyword">in</span> sales[<span class="string">'date_block_num'</span>].unique():</span><br><span class="line">    cur_shops = sales[sales[<span class="string">'date_block_num'</span>]==block_num][<span class="string">'shop_id'</span>].unique()</span><br><span class="line">    cur_items = sales[sales[<span class="string">'date_block_num'</span>]==block_num][<span class="string">'item_id'</span>].unique()</span><br><span class="line">    grid.append(np.array(list(product(*[cur_shops, cur_items, [block_num]])),dtype=<span class="string">'int32'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#turn the grid into pandas dataframe</span></span><br><span class="line">grid = pd.DataFrame(np.vstack(grid), columns = index_cols,dtype=np.int32)</span><br><span class="line"></span><br><span class="line"><span class="comment">#get aggregated values for (shop_id, item_id, month)</span></span><br><span class="line">gb = sales.groupby(index_cols,as_index=<span class="keyword">False</span>).agg(&#123;<span class="string">'item_cnt_day'</span>:&#123;<span class="string">'target'</span>:<span class="string">'sum'</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#fix column names</span></span><br><span class="line">gb.columns = [col[<span class="number">0</span>] <span class="keyword">if</span> col[<span class="number">-1</span>]==<span class="string">''</span> <span class="keyword">else</span> col[<span class="number">-1</span>] <span class="keyword">for</span> col <span class="keyword">in</span> gb.columns.values]</span><br><span class="line"><span class="comment">#join aggregated data to the grid</span></span><br><span class="line">all_data = pd.merge(grid,gb,how=<span class="string">'left'</span>,on=index_cols).fillna(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#sort the data</span></span><br><span class="line">all_data.sort_values([<span class="string">'date_block_num'</span>,<span class="string">'shop_id'</span>,<span class="string">'item_id'</span>],inplace=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure>
<pre><code>/opt/conda/lib/python3.6/site-packages/pandas/core/groupby.py:4036: FutureWarning: using a dict with renaming is deprecated and will be removed in a future version
  return super(DataFrameGroupBy, self).aggregate(arg, *args, **kwargs)
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">all_data.head(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }

    .dataframe thead th {
        text-align: left;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>shop_id</th>
      <th>item_id</th>
      <th>date_block_num</th>
      <th>target</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>139255</th>
      <td>0</td>
      <td>19</td>
      <td>0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>141495</th>
      <td>0</td>
      <td>27</td>
      <td>0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>144968</th>
      <td>0</td>
      <td>28</td>
      <td>0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>142661</th>
      <td>0</td>
      <td>29</td>
      <td>0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>138947</th>
      <td>0</td>
      <td>32</td>
      <td>0</td>
      <td>6.0</td>
    </tr>
    <tr>
      <th>138948</th>
      <td>0</td>
      <td>33</td>
      <td>0</td>
      <td>3.0</td>
    </tr>
    <tr>
      <th>138949</th>
      <td>0</td>
      <td>34</td>
      <td>0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>139247</th>
      <td>0</td>
      <td>35</td>
      <td>0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>142672</th>
      <td>0</td>
      <td>40</td>
      <td>0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>142065</th>
      <td>0</td>
      <td>41</td>
      <td>0</td>
      <td>0.0</td>
    </tr>
  </tbody>
</table>
</div>



<h1 id="Mean-encodings-without-regularization"><a href="#Mean-encodings-without-regularization" class="headerlink" title="Mean encodings without regularization"></a>Mean encodings without regularization</h1><p>After we did the techinical work, we are ready to actually <em>mean encode</em> the desired <code>item_id</code> variable. </p>
<p>Here are two ways to implement mean encoding features <em>without</em> any regularization. You can use this code as a starting point to implement regularized techniques. </p>
<h4 id="Method-1"><a href="#Method-1" class="headerlink" title="Method 1"></a>Method 1</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Calculate a mapping: &#123;item_id: target_mean&#125;</span></span><br><span class="line">item_id_target_mean = all_data.groupby(<span class="string">'item_id'</span>).target.mean()</span><br><span class="line"></span><br><span class="line"><span class="comment"># In our non-regularized case we just *map* the computed means to the `item_id`'s</span></span><br><span class="line">all_data[<span class="string">'item_target_enc'</span>] = all_data[<span class="string">'item_id'</span>].map(item_id_target_mean)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Fill NaNs</span></span><br><span class="line">all_data[<span class="string">'item_target_enc'</span>].fillna(<span class="number">0.3343</span>, inplace=<span class="keyword">True</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># Print correlation</span></span><br><span class="line">encoded_feature = all_data[<span class="string">'item_target_enc'</span>].values</span><br><span class="line">print(np.corrcoef(all_data[<span class="string">'target'</span>].values, encoded_feature)[<span class="number">0</span>][<span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<pre><code>0.483038698862
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">all_data[all_data[<span class="string">"item_id"</span>] == <span class="number">19</span>].head()</span><br></pre></td></tr></table></figure>
<div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }

    .dataframe thead th {
        text-align: left;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>shop_id</th>
      <th>item_id</th>
      <th>date_block_num</th>
      <th>target</th>
      <th>item_target_enc</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>139255</th>
      <td>0</td>
      <td>19</td>
      <td>0</td>
      <td>0.0</td>
      <td>0.022222</td>
    </tr>
    <tr>
      <th>147370</th>
      <td>1</td>
      <td>19</td>
      <td>0</td>
      <td>0.0</td>
      <td>0.022222</td>
    </tr>
    <tr>
      <th>114910</th>
      <td>2</td>
      <td>19</td>
      <td>0</td>
      <td>0.0</td>
      <td>0.022222</td>
    </tr>
    <tr>
      <th>123025</th>
      <td>3</td>
      <td>19</td>
      <td>0</td>
      <td>0.0</td>
      <td>0.022222</td>
    </tr>
    <tr>
      <th>98680</th>
      <td>4</td>
      <td>19</td>
      <td>0</td>
      <td>0.0</td>
      <td>0.022222</td>
    </tr>
  </tbody>
</table>
</div>



<h4 id="Method-2"><a href="#Method-2" class="headerlink" title="Method 2"></a>Method 2</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">     Differently to `.target.mean()` function `transform` </span></span><br><span class="line"><span class="string">   will return a dataframe with an index like in `all_data`.</span></span><br><span class="line"><span class="string">   Basically this single line of code is equivalent to the first two lines from of Method 1.</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">all_data[<span class="string">'item_target_enc'</span>] = all_data.groupby(<span class="string">'item_id'</span>)[<span class="string">'target'</span>].transform(<span class="string">'mean'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Fill NaNs</span></span><br><span class="line">all_data[<span class="string">'item_target_enc'</span>].fillna(<span class="number">0.3343</span>, inplace=<span class="keyword">True</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># Print correlation</span></span><br><span class="line">encoded_feature = all_data[<span class="string">'item_target_enc'</span>].values</span><br><span class="line">print(np.corrcoef(all_data[<span class="string">'target'</span>].values, encoded_feature)[<span class="number">0</span>][<span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<pre><code>0.483038698862
</code></pre><p>See the printed value? It is the correlation coefficient between the target variable and your new encoded feature. You need to <strong>compute correlation coefficient</strong> between the encodings, that you will implement and <strong>submit those to coursera</strong>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">grader = Grader()</span><br></pre></td></tr></table></figure>
<h1 id="1-KFold-scheme"><a href="#1-KFold-scheme" class="headerlink" title="1. KFold scheme"></a>1. KFold scheme</h1><p>Explained starting at 41 sec of <a href="https://www.coursera.org/learn/competitive-data-science/lecture/LGYQ2/regularization" target="_blank" rel="noopener">Regularization video</a>.</p>
<p><strong>Now it’s your turn to write the code!</strong> </p>
<p>You may use ‘Regularization’ video as a reference for all further tasks.</p>
<p>First, implement KFold scheme with five folds. Use KFold(5) from sklearn.model_selection. </p>
<ol>
<li>Split your data in 5 folds with <code>sklearn.model_selection.KFold</code> with <code>shuffle=False</code> argument.</li>
<li><p>Iterate through folds: use all but the current fold to calculate mean target for each level <code>item_id</code>, and  fill the current fold.</p>
<ul>
<li>See the <strong>Method 1</strong> from the example implementation. In particular learn what <code>map</code> and pd.Series.map functions do. They are pretty handy in many situations.</li>
</ul>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># YOUR CODE GOES HERE</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> KFold</span><br><span class="line">kf = KFold(shuffle=<span class="keyword">False</span>, n_splits = <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> train_index, test_index <span class="keyword">in</span> kf.split(all_data):</span><br><span class="line">    x_tr = all_data.iloc[train_index]</span><br><span class="line">    mean = x_tr.groupby(<span class="string">"item_id"</span>).target.mean()</span><br><span class="line">    all_data.loc[all_data.index[test_index],<span class="string">'item_target_enc'</span>] = all_data.loc[all_data.index[test_index],<span class="string">'item_id'</span>].map(mean)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">all_data[<span class="string">'item_target_enc'</span>].fillna(<span class="number">0.3343</span>, inplace=<span class="keyword">True</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">## fill with global mean </span></span><br><span class="line"><span class="comment">#all_data['item_target_enc'].fillna(all_data['target'].mean(), inplace = True)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You will need to compute correlation like that</span></span><br><span class="line">corr = np.corrcoef(all_data[<span class="string">'target'</span>].values, encoded_feature)[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">print(corr)</span><br><span class="line">grader.submit_tag(<span class="string">'KFold_scheme'</span>, corr)</span><br></pre></td></tr></table></figure>
<pre><code>0.41645907128
Current answer for task KFold_scheme is: 0.41645907128
</code></pre><h1 id="2-Leave-one-out-scheme"><a href="#2-Leave-one-out-scheme" class="headerlink" title="2. Leave-one-out scheme"></a>2. Leave-one-out scheme</h1><p>Now, implement leave-one-out scheme. Note that if you just simply set the number of folds to the number of samples and run the code from the <strong>KFold scheme</strong>, you will probably wait for a very long time. </p>
<p>To implement a faster version, note, that to calculate mean target value using all the objects but one <em>given object</em>, you can:</p>
<ol>
<li>Calculate sum of the target values using all the objects.</li>
<li>Then subtract the target of the <em>given object</em> and divide the resulting value by <code>n_objects - 1</code>. </li>
</ol>
<p>Note that you do not need to perform <code>1.</code> for every object. And <code>2.</code> can be implemented without any <code>for</code> loop.</p>
<p>It is the most convenient to use <code>.transform</code> function as in <strong>Method 2</strong>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># YOUR CODE GOES HERE</span></span><br><span class="line">totalSum = all_data[<span class="string">'item_id'</span>].map(all_data.groupby(<span class="string">'item_id'</span>)[<span class="string">'target'</span>].sum())</span><br><span class="line">n_objects = all_data[<span class="string">'item_id'</span>].map(all_data.groupby(<span class="string">'item_id'</span>)[<span class="string">'target'</span>].count())</span><br><span class="line">all_data[<span class="string">'item_target_enc'</span>] = (totalSum - all_data[<span class="string">'target'</span>]) / (n_objects - <span class="number">1</span>)</span><br><span class="line">encoded_feature = all_data[<span class="string">'item_target_enc'</span>].values</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">corr = np.corrcoef(all_data[<span class="string">'target'</span>].values, encoded_feature)[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">print(corr)</span><br><span class="line">grader.submit_tag(<span class="string">'Leave-one-out_scheme'</span>, corr)</span><br></pre></td></tr></table></figure>
<pre><code>0.480384831129
Current answer for task Leave-one-out_scheme is: 0.480384831129
</code></pre><h1 id="3-Smoothing"><a href="#3-Smoothing" class="headerlink" title="3. Smoothing"></a>3. Smoothing</h1><p>Explained starting at 4:03 of <a href="https://www.coursera.org/learn/competitive-data-science/lecture/LGYQ2/regularization" target="_blank" rel="noopener">Regularization video</a>.</p>
<p>Next, implement smoothing scheme with $\alpha = 100$. Use the formula from the first slide in the video and $0.3343$ as <code>globalmean</code>. Note that <code>nrows</code> is the number of objects that belong to a certain category (not the number of rows in the dataset).</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># YOUR CODE GOES HERE</span></span><br><span class="line">alpha = <span class="number">100</span></span><br><span class="line">globalmean = <span class="number">0.3343</span></span><br><span class="line">nrows = all_data.groupby(<span class="string">'item_id'</span>)[<span class="string">'target'</span>].count()</span><br><span class="line">targetmean = all_data.groupby(<span class="string">'item_id'</span>)[<span class="string">'target'</span>].mean()</span><br><span class="line">smooth = (targetmean*nrows + globalmean*alpha) / (nrows + alpha)</span><br><span class="line">all_data[<span class="string">'item_target_enc'</span>] = all_data[<span class="string">'item_id'</span>].map(smooth)</span><br><span class="line">encoded_feature = all_data[<span class="string">'item_target_enc'</span>].values</span><br><span class="line"></span><br><span class="line">corr = np.corrcoef(all_data[<span class="string">'target'</span>].values, encoded_feature)[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">print(corr)</span><br><span class="line">grader.submit_tag(<span class="string">'Smoothing_scheme'</span>, corr)</span><br></pre></td></tr></table></figure>
<pre><code>0.48181987971
Current answer for task Smoothing_scheme is: 0.48181987971
</code></pre><h1 id="4-Expanding-mean-scheme"><a href="#4-Expanding-mean-scheme" class="headerlink" title="4. Expanding mean scheme"></a>4. Expanding mean scheme</h1><p>Explained starting at 5:50 of <a href="https://www.coursera.org/learn/competitive-data-science/lecture/LGYQ2/regularization" target="_blank" rel="noopener">Regularization video</a>.</p>
<p>Finally, implement the <em>expanding mean</em> scheme. It is basically already implemented for you in the video, but you can challenge yourself and try to implement it yourself. You will need <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.core.groupby.DataFrameGroupBy.cumsum.html" target="_blank" rel="noopener"><code>cumsum</code></a> and <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.core.groupby.GroupBy.cumcount.html" target="_blank" rel="noopener"><code>cumcount</code></a> functions from pandas.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># YOUR CODE GOES HERE</span></span><br><span class="line">cumsum = all_data.groupby(<span class="string">'item_id'</span>)[<span class="string">'target'</span>].cumsum() - all_data[<span class="string">'target'</span>]</span><br><span class="line">cumcnt = all_data.groupby(<span class="string">'item_id'</span>).cumcount()</span><br><span class="line"></span><br><span class="line">all_data[<span class="string">'item_target_enc'</span>] = cumsum/cumcnt</span><br><span class="line">all_data[<span class="string">'item_target_enc'</span>].fillna(<span class="number">0.3343</span>, inplace=<span class="keyword">True</span>)</span><br><span class="line">encoded_feature = all_data[<span class="string">'item_target_enc'</span>].values</span><br><span class="line"></span><br><span class="line">corr = np.corrcoef(all_data[<span class="string">'target'</span>].values, encoded_feature)[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">print(corr)</span><br><span class="line">grader.submit_tag(<span class="string">'Expanding_mean_scheme'</span>, corr)</span><br></pre></td></tr></table></figure>
<pre><code>0.502524521108
Current answer for task Expanding_mean_scheme is: 0.502524521108
</code></pre><h2 id="Authorization-amp-Submission"><a href="#Authorization-amp-Submission" class="headerlink" title="Authorization &amp; Submission"></a>Authorization &amp; Submission</h2><p>To submit assignment parts to Cousera platform, please, enter your e-mail and token into variables below. You can generate token on this programming assignment page. Note: Token expires 30 minutes after generation.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">STUDENT_EMAIL = <span class="string">"lvduzhen@gmail.com"</span></span><br><span class="line">STUDENT_TOKEN =<span class="string">"8sHsHAXqlUWuMlfo"</span></span><br><span class="line">grader.status()</span><br></pre></td></tr></table></figure>
<pre><code>You want to submit these numbers:
Task KFold_scheme: 0.41645907128
Task Leave-one-out_scheme: 0.480384831129
Task Smoothing_scheme: 0.48181987971
Task Expanding_mean_scheme: 0.502524521108
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">grader.submit(STUDENT_EMAIL, STUDENT_TOKEN)</span><br></pre></td></tr></table></figure>
<pre><code>Submitted to Coursera platform. See results on assignment page!
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Machine Learning</category>
        <category>Data Mining</category>
      </categories>
      <tags>
        <tag>Feature Engineering</tag>
        <tag>Project</tag>
      </tags>
  </entry>
  <entry>
    <title>Metrics</title>
    <url>/Metrics/2019/07/14/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><ol>
<li>Why there are so many metrics?<br>– Different metrics for different problems</li>
<li>Why should we care about metric in competitions?<br>– It is how the competitors are ranked!</li>
</ol>
<h1 id="Regression"><a href="#Regression" class="headerlink" title="Regression"></a>Regression</h1><p>Why target mean value minimizes MSE error and why target median minimizes MAE.</p>
<p>Suppose we have a dataset </p>
<script type="math/tex; mode=display">
\{(x\_i,y\_i)\}\_{i=1}^N</script><p>Basically, we are given pairs: features $x_i$ and corresponding target value $y_i \in \mathbb{R}$.  </p>
<p>We will denote vector of targets as $y \in \mathbb{R}^N$, such that $y_i$ is target for object $x_i$. Similarly,  $\hat y \in \mathbb{R}$ denotes predictions for the objects: $\hat y_i$ for object $x_i$.    </p>
<h2 id="first-order-derivative-and-second-order-derivative"><a href="#first-order-derivative-and-second-order-derivative" class="headerlink" title="first-order derivative and second-order derivative"></a>first-order derivative and second-order derivative</h2><p>设$f(x)$在$[a,b]$上连续，在$(a,b)$内具有一阶和二阶导数，那么:</p>
<ul>
<li>若在（a,b)内f’’(x)&gt;0,则f(x)在[a,b]上的图形是凹的；</li>
<li>若在（a,b)内f’‘(x)&lt;0,则f(x)在[a,b]上的图形是凸的。</li>
</ul>
<p>结合一阶、二阶导数可以求函数的极值。</p>
<ul>
<li>当一阶导数等于0，而二阶导数大于0时，为极小值点；</li>
<li>当一阶导数等于0，而二阶导数小于0时，为极大值点；</li>
<li>当一阶导数和二阶导数都等于0时，为驻点。 </li>
</ul>
<h2 id="MSE"><a href="#MSE" class="headerlink" title="MSE"></a>MSE</h2><p><img src="1.png" alt></p>
<p>Let’s start with MSE loss. It is defined as follows: </p>
<script type="math/tex; mode=display">
MSE(y, \hat y) = \frac{1}{N} \sum_{i=1}^N (\hat y_i - y_i)^2</script><p>Now, the question is: if predictions for all the objects were the same and equal to $\alpha$:  $\hat y_i = \alpha$, what value of $\alpha$ would minimize MSE error? </p>
<script type="math/tex; mode=display">
\min_{\alpha} f(\alpha) = \frac{1}{N} \sum_{i=1}^N (\alpha - y_i)^2</script><p>The function $f(\alpha)$, that we want to minimize is smooth with respect to $\alpha$. A required condition for $\alpha^*$ to be a local optima is </p>
<script type="math/tex; mode=display">
\frac{d f}{d \alpha}\bigg|_{\alpha=\alpha^*} = 0\, .</script><p>Let’s find the points, that satisfy the condition:</p>
<script type="math/tex; mode=display">
\frac{d f}{d \alpha}\bigg|_{\alpha=\alpha^*} = \frac{2}{N} \sum_{i=1}^N (\alpha^* - y_i) = 0</script><script type="math/tex; mode=display">
\frac{2}{N} \sum_{i=1}^N \alpha^* - \frac{2}{N} \sum_{i=1}^N y_i = 0</script><script type="math/tex; mode=display">
 \alpha^* - \frac{1}{N} \sum_{i=1}^N y_i = 0</script><p>And finally:</p>
<script type="math/tex; mode=display">
 \alpha^* =  \frac{1}{N} \sum_{i=1}^N y_i</script><p>Since second derivative $\frac{d^2 f}{d \alpha^2}$ is positive at point $\alpha^*$, then what we found is local minima.</p>
<p>So, that is how it is possible to find, that optial constant for MSE metric is target mean value.</p>
<h2 id="MAE"><a href="#MAE" class="headerlink" title="MAE"></a>MAE</h2><p><img src="2.png" alt></p>
<p>Similarly to the way we found optimal constant for MSE loss, we can find it for MAE.</p>
<script type="math/tex; mode=display">
MAE(y, \hat y) = \frac{1}{N} \sum_{i=1}^N |\hat y_i - y_i|</script><script type="math/tex; mode=display">
\min_{\alpha} f(\alpha) = \frac{1}{N} \sum_{i=1}^N |\alpha - y_i|</script><p>Recall that $ \frac{\partial |x|}{dx} = sign(x)$, where $sign$ stands for <a href="https://en.wikipedia.org/wiki/Sign_function" target="_blank" rel="noopener">signum function</a> . Thus</p>
<script type="math/tex; mode=display">
\frac{d f}{d \alpha}\bigg|_{\alpha=\alpha^*} = \frac{1}{N} \sum_{i=1}^N sign(\alpha^* - y_i) = 0</script><p>So we need to find such $\alpha^*$ that</p>
<script type="math/tex; mode=display">
g(\alpha^*) = \sum_{i=1}^N sign(\alpha^* - y_i) = 0</script><p>Note that $g(\alpha^*)$ is piecewise-constant non-decreasing function. $g(\alpha^*)=-1$ for all calues of $\alpha$ less then mimimum $y_i$ and $g(\alpha^*)=1$ for $\alpha &gt; \max_i y_i$. The function “jumps” by $\frac{2}{N}$ at every point $y_i$. Here is an example, how this function looks like for $y = [-0.5, 0, 1, 3, 3.4]$:</p>
<p><img src="3.png" alt></p>
<p>Basically there are $N$ jumps of the same size, starting from $-1$ and ending at $1$. It is clear, that you need to do about $\frac{N}{2}$ jumps to hit zero. And that happens exactly at median value of the target vector $g(median(y))=0$. We should be careful and separate two cases: when there are even number of points and odd, but the intuition remains the same. </p>
<h2 id="MSPE-MAPE-MSLE"><a href="#MSPE-MAPE-MSLE" class="headerlink" title="MSPE, MAPE, MSLE"></a>MSPE, MAPE, MSLE</h2><p><img src="4.png" alt><br><img src="5.png" alt><br><img src="6.png" alt></p>
<h1 id="Classification"><a href="#Classification" class="headerlink" title="Classification"></a>Classification</h1><h2 id="Accuracy"><a href="#Accuracy" class="headerlink" title="Accuracy"></a>Accuracy</h2><script type="math/tex; mode=display">Accuracy = \frac{1}{N}\sum_{i=1}^{N}[\alpha = y_i]</script><p>Best constant: <strong>predict the most frequent class.</strong></p>
<h2 id="Logarithmic-loss"><a href="#Logarithmic-loss" class="headerlink" title="Logarithmic loss"></a>Logarithmic loss</h2><ol>
<li>Binary:<script type="math/tex; mode=display">LogLoss = -\frac{1}{N}\sum^{N}_{i=1}y_{i}log(\hat{y}_{i}) + (1 - y_i)log(1-\hat{y}_{i})</script></li>
<li>Multiclass:<script type="math/tex; mode=display">LogLoss = -\frac{1}{N}\sum^{N}_{i=1}\sum^{L}_{i=1}y_{il}log(\hat{y}\_{il})</script><ul>
<li>Logloss strongly penalizes completely wrong answers</li>
<li>Best constant: set $\alpha_{i}$ to frequency of $i-th$ class.</li>
</ul>
</li>
</ol>
<h2 id="Area-under-ROC-curve"><a href="#Area-under-ROC-curve" class="headerlink" title="Area under ROC curve"></a>Area under ROC curve</h2><p><img src="7.png" alt></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics</span><br><span class="line">fpr, tpr, thresholds = metrics.roc_curve(y_true, y_pred)</span><br></pre></td></tr></table></figure>
<ul>
<li>TP: true positives</li>
<li>FP: false positives</li>
<li>Best constant: All constants give same score</li>
<li>Random predictions lead to AUC = 0.5</li>
</ul>
<h2 id="Kappa"><a href="#Kappa" class="headerlink" title="Kappa"></a>Kappa</h2><h3 id="Cohen’s-Kappa-motivation"><a href="#Cohen’s-Kappa-motivation" class="headerlink" title="Cohen’s Kappa motivation"></a>Cohen’s Kappa motivation</h3><script type="math/tex; mode=display">CP = 1 - \frac{1-acc}{1-p_e}</script><ul>
<li>$p_e$: what accuracy would be on average, if we randomly permute our predictions</li>
</ul>
<h3 id="Weighted-Kappa"><a href="#Weighted-Kappa" class="headerlink" title="Weighted Kappa"></a>Weighted Kappa</h3><p>dataset:</p>
<ul>
<li>10 cats</li>
<li>90 dogs</li>
<li>tigers</li>
</ul>
<ol>
<li>Error weight matrix W</li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">pred/true</th>
<th style="text-align:left">cat</th>
<th style="text-align:left">dog</th>
<th style="text-align:left">tiger</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">cat</td>
<td style="text-align:left">0</td>
<td style="text-align:left">1</td>
<td style="text-align:left">10</td>
</tr>
<tr>
<td style="text-align:left">dog</td>
<td style="text-align:left">1</td>
<td style="text-align:left">0</td>
<td style="text-align:left">10</td>
</tr>
<tr>
<td style="text-align:left">tiger</td>
<td style="text-align:left">1</td>
<td style="text-align:left">1</td>
<td style="text-align:left">0</td>
</tr>
</tbody>
</table>
</div>
<p><strong>you can define this by youself</strong></p>
<ol>
<li>Confision matrix C</li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">pred/true</th>
<th style="text-align:left">cat</th>
<th style="text-align:left">dog</th>
<th style="text-align:left">tiger</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">cat</td>
<td style="text-align:left">4</td>
<td style="text-align:left">2</td>
<td style="text-align:left">3</td>
</tr>
<tr>
<td style="text-align:left">dog</td>
<td style="text-align:left">2</td>
<td style="text-align:left">88</td>
<td style="text-align:left">5</td>
</tr>
<tr>
<td style="text-align:left">tiger</td>
<td style="text-align:left">4</td>
<td style="text-align:left">10</td>
<td style="text-align:left">12</td>
</tr>
</tbody>
</table>
</div>
<ol>
<li><p>weighted error</p>
<script type="math/tex; mode=display">weighted \, error = \frac{1}{const}\sum_{i,j}C_{ij}W_{ij}</script></li>
<li><p>weighted Kappa</p>
<script type="math/tex; mode=display">weighted \, kappa = 1 - \frac{weighted \, error}{weighted \, baseline \, error}</script></li>
<li><p>Quadratic and Linear Weighted Kappa<br>if the target is orderd label, the weighted martix can simply get by follows:<br><img src="8.png" alt></p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">soft_kappa_grad_hess</span><span class="params">(y, p)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">        Returns first and second derivatives of the objective with respect to predictions `p`. </span></span><br><span class="line"><span class="string">        `y` is a vector of corresponding target labels.  </span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    norm = p.dot(p) + y.dot(y)</span><br><span class="line">    </span><br><span class="line">    grad = <span class="number">-2</span> * y / norm + <span class="number">4</span> * p * np.dot(y, p) / (norm ** <span class="number">2</span>)</span><br><span class="line">    hess = <span class="number">8</span> * p * y / (norm ** <span class="number">2</span>) + <span class="number">4</span> * np.dot(y, p) / (norm ** <span class="number">2</span>)  - (<span class="number">16</span> * p ** <span class="number">2</span> * np.dot(y, p)) / (norm ** <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> grad, hess</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">soft_kappa</span><span class="params">(preds, dtrain)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">        Having predictions `preds` and targets `dtrain.get_label()` this function coumputes soft kappa loss.</span></span><br><span class="line"><span class="string">        NOTE, that it assumes `mean(target) = 0`.</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    target = dtrain.get_label()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'kappa'</span> ,  <span class="number">-2</span> * target.dot(preds) / (target.dot(target) + preds.dot(preds))</span><br></pre></td></tr></table></figure>
<h1 id="General-approaches-for-metrics-optimization"><a href="#General-approaches-for-metrics-optimization" class="headerlink" title="General approaches for metrics optimization"></a>General approaches for metrics optimization</h1><ul>
<li>Target metric is what we want to optimize</li>
<li>Optimization loss is what model optimizes</li>
</ul>
<p>The approaches can be broadly divided into several categories, depending on the metric we need to optimize. Some metrics can be optimized directly.</p>
<p>Approaches in general:</p>
<ol>
<li>Just run the right model(given the metric we need to optimize)<ul>
<li>MSE, Logloss</li>
</ul>
</li>
<li>Preprocess train and optimize another metric<ul>
<li>MSPE, MAPE, RMSLE, …</li>
</ul>
</li>
<li>Optimize another metric,postprocess predictions<ul>
<li>Accuracy, Kappa</li>
</ul>
</li>
<li>Write a custom loss function<ul>
<li>Any, if you can</li>
</ul>
</li>
<li>Optimize another metric,<strong>use early stopping</strong><br><img src="9.png" alt></li>
</ol>
<h2 id="Regression-metrics-optimization"><a href="#Regression-metrics-optimization" class="headerlink" title="Regression metrics optimization"></a>Regression metrics optimization</h2><ol>
<li>MSE and MAE<blockquote>
<p>just find the right model</p>
</blockquote>
</li>
<li>MSPE and MAPE<ul>
<li>Use weights for samples (<code>sample_weights</code>)<ul>
<li>And use MSE (MAE)</li>
<li>Not every library accepts sample weights<ul>
<li>XGBoost,LightGBMaccept</li>
<li>Easy to implement if not supported</li>
</ul>
</li>
</ul>
</li>
<li>Resample the train set<ul>
<li>df.sample(weights=sample_weights)</li>
<li>And use any model that optimizes MSE (MAE)</li>
</ul>
</li>
</ul>
</li>
<li>(R)MSLE<ul>
<li>Transform target for the train set:<script type="math/tex; mode=display">z_i = log(y_i + 1)</script></li>
<li>Fit a model with MSE loss:</li>
<li>Transform predictions back:<script type="math/tex; mode=display">\hat{y}_i = exp(\hat{z}_{i}) - 1</script></li>
</ul>
</li>
<li>AUC<script type="math/tex; mode=display">AUC = \frac{1 - \# \, correct \, ordered \,  pairs}{total \, number \, pairs}</script><img src="10.png" alt> </li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">ID</th>
<th style="text-align:left">LABEL</th>
<th style="text-align:left">TARGET</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">A</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0.1</td>
</tr>
<tr>
<td style="text-align:left">B</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0.4</td>
</tr>
<tr>
<td style="text-align:left">C</td>
<td style="text-align:left">1</td>
<td style="text-align:left">0.35</td>
</tr>
<tr>
<td style="text-align:left">D</td>
<td style="text-align:left">1</td>
<td style="text-align:left">0.8</td>
</tr>
</tbody>
</table>
</div>
<p>假设有4条样本。2个正样本，2个负样本，那么M*N=4。即总共有4个样本对。分别是：（D,B）,（D,A）,(C,B),（C,A）。在（D,B）样本对中，正样本D预测的概率大于负样本B预测的概率（也就是D的得分比B高），记为1。同理，对于（C,B）。正样本C预测的概率小于负样本C预测的概率，记为0. 最后可以算得，总共有3个符合正样本得分高于负样本得分，故最后的AUC为:</p>
<script type="math/tex; mode=display">auc = \frac{1+1+1}{4} = 0.75</script><ul>
<li>Pointwise loss</li>
<li>Logloss</li>
</ul>
<ol>
<li>Quadratic weighted Kappa<ul>
<li>Optimize MSE<script type="math/tex; mode=display">kappa = 1 - \frac{mse}{hard \ to deal \ with \ part}</script></li>
<li>Find right thresholds<br>  – Bad:np.round(predictions)<br>  − Better: optimize thresholds</li>
</ul>
</li>
</ol>
<h2 id="Probability-Calibration"><a href="#Probability-Calibration" class="headerlink" title="Probability Calibration"></a>Probability Calibration</h2><ul>
<li>logistic regression，在拟合参数的时候采用的是“最大似然法”来直接优化log-loss,因此，logistic function本身返回的就是经过校验的probability。</li>
<li>Guassian_NaiveBayes，其应用有个前提假设：所有的特征向量是相互独立的。而在实际的工作中，特征向量集难免有冗余，彼此相关，因此利用Guassian_NaiveBayes拟合模型时，往往会<strong>over-confidence</strong>，所得probability多倾向于0或1。</li>
<li>RandomForest，与Guassian_NaiveBayes正好相反，由于其分类要旨是取所有分类器的平均，或采用服从多数的策略，因此，RandomForest往往会<strong>under-confidence</strong>，所得probability多在(0，1)之间。</li>
<li>SupportVector，由于受到hard margin的影响，其预测probability多集中在(0，1)之间，与RandomForest相似，为<strong>under-confidence</strong>的情况。</li>
</ul>
<p>为了解决上述模型的over-confidence，或under-confidence的情况，我们可以用“概率校验”来对prediction label进行概率估计。</p>
<ol>
<li>non-parameter isotonic regression：isotonic calibration is preferable for non-sigmoid calibration curves and in situations where large amounts of data are available for calibration.<ul>
<li>Just fit Isotonic Regression to your predictions(like in stacking)</li>
</ul>
</li>
<li>Platt’s scaling（sigmoid function）: sigmoid calibration is preferable in cases where the calibration curve is sigmoid and where there is limited calibration data.<ul>
<li>JustfitLogisticRegressiontoyourpredictions(like in stacking)</li>
</ul>
</li>
<li>Stacking<br> − Just fit XGBoost or neural net to your predictions</li>
</ol>
<p><strong>概率校验</strong>的操作方法如下：</p>
<ol>
<li>将dataset分为train和test（可用cross_validation.train_test_split）。</li>
<li>用test去拟合校验概率模型；</li>
<li>用train去拟合机器学习模型；</li>
<li>将校验概率模型应用于已经拟合好的机器学习模型上。对机器学习模型的prediction结果进行调整。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sklearn中的实现：sklearn.calibration.CalibratedClassifierCV</span></span><br><span class="line"><span class="comment"># 主要参数：</span></span><br><span class="line"><span class="comment"># base_estimator ：初始分类函数</span></span><br><span class="line"><span class="comment"># method ：校准采用的方法。取值‘sigmoid’ 或者 ‘isotonic’</span></span><br><span class="line"><span class="comment"># cv ：交叉验证的折叠次数。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Gaussian Naive-Bayes with no calibration</span></span><br><span class="line">clf = GaussianNB()</span><br><span class="line">clf.fit(X_train, y_train)  <span class="comment"># GaussianNB itself does not support sample-weights</span></span><br><span class="line">prob_pos_clf = clf.predict_proba(X_test)[:, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Gaussian Naive-Bayes with isotonic calibration</span></span><br><span class="line">clf_isotonic = CalibratedClassifierCV(clf, cv=<span class="number">2</span>, method=<span class="string">'isotonic'</span>)</span><br><span class="line">clf_isotonic.fit(X_train, y_train, sw_train)</span><br><span class="line">prob_pos_isotonic = clf_isotonic.predict_proba(X_test)[:, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Gaussian Naive-Bayes with sigmoid calibration</span></span><br><span class="line">clf_sigmoid = CalibratedClassifierCV(clf, cv=<span class="number">2</span>, method=<span class="string">'sigmoid'</span>)</span><br><span class="line">clf_sigmoid.fit(X_train, y_train, sw_train)</span><br><span class="line">prob_pos_sigmoid = clf_sigmoid.predict_proba(X_test)[:, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Brier scores: (the smaller the better)"</span>)</span><br><span class="line"></span><br><span class="line">clf_score = brier_score_loss(y_test, prob_pos_clf, sw_test)</span><br><span class="line">print(<span class="string">"No calibration: %1.3f"</span> % clf_score)</span><br><span class="line"></span><br><span class="line">clf_isotonic_score = brier_score_loss(y_test, prob_pos_isotonic, sw_test)</span><br><span class="line">print(<span class="string">"With isotonic calibration: %1.3f"</span> % clf_isotonic_score)</span><br><span class="line"></span><br><span class="line">clf_sigmoid_score = brier_score_loss(y_test, prob_pos_sigmoid, sw_test)</span><br><span class="line">print(<span class="string">"With sigmoid calibration: %1.3f"</span> % clf_sigmoid_score)</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Machine Learning</category>
        <category>Competition</category>
        <category>Tricks</category>
      </categories>
  </entry>
  <entry>
    <title>Exploratory data analysis</title>
    <url>/Exploratory-data-analysis/2019/07/13/</url>
    <content><![CDATA[<h1 id="Exploratory-data-analysis"><a href="#Exploratory-data-analysis" class="headerlink" title="Exploratory data analysis"></a>Exploratory data analysis</h1><p><img src="EDA.png" alt></p>
<h2 id="What-and-Why"><a href="#What-and-Why" class="headerlink" title="What and Why?"></a>What and Why?</h2><ul>
<li>Better understand the data</li>
<li>Build an intuition about the data</li>
<li>Generate hypothesizes</li>
<li>Find insights</li>
</ul>
<h2 id="Building-intuition-about-the-data"><a href="#Building-intuition-about-the-data" class="headerlink" title="Building intuition about the data"></a>Building intuition about the data</h2><ol>
<li>Get domain knowledge<br>– It helps to deeper understand the problem</li>
<li>Check if the data is intuitive<br>– And agrees with domain knowledge</li>
<li>Understand how the data was generated</li>
</ol>
<h2 id="As-it-is-crucial-to-set-up-a-proper-validation"><a href="#As-it-is-crucial-to-set-up-a-proper-validation" class="headerlink" title="- As it is crucial to set up a proper validation"></a>- As it is crucial to set up a proper validation</h2><ol>
<li>Explore individual features</li>
<li>Explore pairs and groups</li>
</ol>
<hr>
<h2 id="6-Clean-features-up"><a href="#6-Clean-features-up" class="headerlink" title="6. Clean features up"></a>6. Clean features up</h2><ol>
<li>Check for leaks!</li>
</ol>
<h2 id="Exploring-anonymized-data"><a href="#Exploring-anonymized-data" class="headerlink" title="Exploring anonymized data"></a>Exploring anonymized data</h2><p>Two things to do with anonymized features:</p>
<ol>
<li>Try to decode the features</li>
</ol>
<ul>
<li>Guess the true meaning of the feature</li>
</ul>
<ol>
<li>Guess the feature types</li>
</ol>
<ul>
<li>Each type needs its own preprocessing</li>
</ul>
<h2 id="Visualization"><a href="#Visualization" class="headerlink" title="Visualization"></a>Visualization</h2><blockquote>
<p>EDA is an art And visualizations are our art tools !</p>
</blockquote>
<h3 id="Tools-for-individual-features-exploration"><a href="#Tools-for-individual-features-exploration" class="headerlink" title="Tools for individual features exploration"></a>Tools for individual features exploration</h3><ol>
<li><p>Histograms:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.hist(x)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Plot (index versus value):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.plot(x, <span class="string">'.'</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Statistics:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.describe()</span><br><span class="line">x.mean()</span><br><span class="line">x.var()</span><br></pre></td></tr></table></figure>
</li>
<li><p>Other tools:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x.value_counts()</span><br><span class="line">x.isnull()</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Explore-feature-relations"><a href="#Explore-feature-relations" class="headerlink" title="Explore feature relations"></a>Explore feature relations</h3><ol>
<li><p>Pairs<br>− Scatter plot, scatter matrix<br>− Corrplot</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.scatter(x1, x2)</span><br><span class="line">pd.scatter_matrix(df)</span><br><span class="line">df.corr()</span><br><span class="line">plt.matshow()</span><br></pre></td></tr></table></figure>
</li>
<li><p>Groups<br>− Corrplot + clustering<br>− Plot (index vs feature statistics)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">df.mean().plot(style=’.’)</span><br><span class="line">df.mean().sort_values().plot(style=’.’)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><p><img src="11.png" alt><br><img src="12.png" alt><br><img src="13.png" alt><br><img src="14.png" alt><br><img src="15.png" alt></p>
<h3 id="Dataset-cleaning"><a href="#Dataset-cleaning" class="headerlink" title="Dataset cleaning"></a>Dataset cleaning</h3><ol>
<li><p>Constant features</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train.nunique(axis=<span class="number">1</span>) == <span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Duplicated features</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">traintest.T.drop_duplicates()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> categorical_feats: </span><br><span class="line">    traintest[f] = raintest[f].factorize()</span><br><span class="line">traintest.T.drop_duplicates()</span><br></pre></td></tr></table></figure>
</li>
<li><p>Duplicated rows</p>
</li>
</ol>
<ul>
<li>Check if same rows have same label</li>
<li>Find duplicated rows, understand why they are duplicated</li>
</ul>
<ol>
<li>Check if dataset is shuffled</li>
</ol>
<h2 id="Validation"><a href="#Validation" class="headerlink" title="Validation"></a>Validation</h2><ol>
<li>Validation helps us evaluate a quality of the model</li>
<li>Validation helps us select the model which will perform best on the unseen data</li>
<li>Underfitting refers to not capturing enough patterns in the data</li>
<li>Generally, overfitting refers to<ul>
<li>capturing noize</li>
<li>capturing patterns which do not generalize to test data</li>
</ul>
</li>
<li>In competitions, overfitting refers to<ul>
<li>low model’s quality on test data, which was unexpected due to validation scores</li>
</ul>
</li>
<li>There are three main validation strategies:<ol>
<li>Holdout<blockquote>
<p>sklearn.model_selection.ShuffleSplit</p>
</blockquote>
</li>
</ol>
<ul>
<li>Split train data into two parts: partA and partB.</li>
<li>Fit the model on partA, predict for partB.</li>
<li>Use predictions for partB for estimating model quality. Find such hyper-parameters, that quality on partB is maximized.</li>
</ul>
<ol>
<li>KFold <blockquote>
<p>sklearn.model_selection.Kfold</p>
</blockquote>
</li>
</ol>
<ul>
<li>Split train data into K folds.</li>
<li>Iterate though each fold: retrain the model on all folds except current fold, predict for the current fold.</li>
<li>Use the predictions to calculate quality on each fold. Find such hyper-parameters, that quality on each fold is maximized. You can also estimate mean and variance of the loss. This is very helpful in order to understand significance of improvement.</li>
</ul>
<ol>
<li>LOO<blockquote>
<p>sklearn.model_selection.LeaveOneOut</p>
</blockquote>
</li>
</ol>
<ul>
<li>Iterate over samples: retrain the model on all samples except current sample, predict for the current sample. You will need to retrain the model N times (if N is the number of samples in the dataset).</li>
<li>In the end you will get LOO predictions for every sample in the trainset and can calculate loss.</li>
<li>Notice, that these are validation schemes are supposed to be used to estimate quality of the model. When you found the right hyper-parameters and want to get test predictions don’t forget to retrain your model using all training data.</li>
</ul>
<ol>
<li>Stratification preserve the same target distribution over different folds</li>
</ol>
</li>
</ol>
<h2 id="Data-split"><a href="#Data-split" class="headerlink" title="Data split"></a>Data split</h2><ol>
<li>In most cases data is split by:</li>
</ol>
<ul>
<li>Rownumber</li>
<li>Time</li>
<li>Id</li>
</ul>
<ol>
<li>Logic of feature generation depends on the data splitting strategy<br>Set up your validation to mimic the train/test split of the competition</li>
<li>Set up your validation to mimic the train/test split of the competition </li>
</ol>
<h3 id="Validation-problems"><a href="#Validation-problems" class="headerlink" title="Validation problems"></a>Validation problems</h3><ol>
<li>If we have big dispersion of scores on validation stage, we should do extensive validation<ul>
<li>Average scores from different KFold splits</li>
<li>Tune model on one split, evaluate score on the other</li>
</ul>
</li>
<li>If submission’s score do not match local validation score,<br>we should<ul>
<li>Check if we have too little data in public LB</li>
<li>Check if we overfitted</li>
<li>Check if we chose correct splitting strategy</li>
<li>Check if train/test have different distibutions</li>
</ul>
</li>
<li>Expect LB shuffle because of<ul>
<li>Randomness<br>– Little amount of data<br>– Different public/private distributions</li>
</ul>
</li>
</ol>
<h2 id="Data-leakage"><a href="#Data-leakage" class="headerlink" title="Data leakage"></a>Data leakage</h2><ul>
<li>Split should be done on time.<ul>
<li>In real life we don’t have information from future</li>
<li>In competitions first thing to look: train/public/private<br>split, is it on time?</li>
</ul>
</li>
<li>Even when split by time, features may contain information about future.<ul>
<li>User history in CTR tasks</li>
<li>Weather</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Machine Learning</category>
        <category>Competition</category>
        <category>Tricks</category>
      </categories>
  </entry>
  <entry>
    <title>Feature Engineering Introduction</title>
    <url>/Feature-Engineering-Introduction/2019/07/13/</url>
    <content><![CDATA[<h1 id="Feature-Preprocessing"><a href="#Feature-Preprocessing" class="headerlink" title="Feature Preprocessing"></a>Feature Preprocessing</h1><h2 id="Numeric-feature"><a href="#Numeric-feature" class="headerlink" title="Numeric feature"></a>Numeric feature</h2><ol>
<li>Tree-based models doesn’t depend on scaling and Rank<br>b. Non-tree-based models hugely depend on scaling and Rank</li>
</ol>
<h3 id="scaling"><a href="#scaling" class="headerlink" title="scaling"></a>scaling</h3><ol>
<li>To [0,1]<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sklearn.preprocessing.MinMaxScaler</span><br><span class="line"></span><br><span class="line">x = (x-min()) / (x.max() - x.min())</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> To mean=<span class="number">0</span>,std=<span class="number">1</span></span><br><span class="line">```python</span><br><span class="line">sklearn.preprocessing.StandardScaler</span><br><span class="line">x = (x - x.mean()) / x.std()</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Rank"><a href="#Rank" class="headerlink" title="Rank"></a>Rank</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> rankdata</span><br><span class="line"></span><br><span class="line">rankdata([<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>])</span><br><span class="line"><span class="comment"># array([ 1. ,  2.5,  4. ,  2.5])</span></span><br><span class="line">rankdata([<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>], method=<span class="string">'min'</span>)</span><br><span class="line"><span class="comment"># array([ 1,  2,  4,  2])</span></span><br><span class="line">rankdata([<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>], method=<span class="string">'max'</span>)</span><br><span class="line"><span class="comment"># array([ 1,  3,  4,  3])</span></span><br><span class="line">rankdata([<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>], method=<span class="string">'dense'</span>)</span><br><span class="line"><span class="comment"># array([ 1,  2,  3,  2])</span></span><br><span class="line">rankdata([<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>], method=<span class="string">'ordinal'</span>)</span><br><span class="line"><span class="comment"># array([ 1,  2,  4,  3])</span></span><br></pre></td></tr></table></figure>
<h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2><p>You can apply log transformation through your data, or there’s another possibility. You can extract a square root of the data. Both these transformations can be useful because they drive too big values closer to the features’ average value. Along with this, <strong>the values near zero are becoming a bit more distinguishable</strong>. Despite the simplicity, one of these transformations can improve your neural network’s results significantly.<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.log(<span class="number">1</span>+x)</span><br><span class="line">np.sqrt(x+<span class="number">2</span>/<span class="number">3</span>)</span><br></pre></td></tr></table></figure></p>
<h3 id="outlier"><a href="#outlier" class="headerlink" title="outlier"></a>outlier</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">UPPERBOUND,LOWERBOUND = np.percentile(x,[<span class="number">1</span>,<span class="number">99</span>])</span><br><span class="line">y = np.clip(x, UPPERBOUND, LOWERBOUND)</span><br></pre></td></tr></table></figure>
<h3 id="Feature-generation"><a href="#Feature-generation" class="headerlink" title="Feature generation"></a>Feature generation</h3><p>Sometimes, we can engineer these features using <strong>prior knowledge and logic</strong>. Sometimes we have to <strong>dig into the data</strong>, create and check hypothesis, and use this derived knowledge and our intuition to derive new features.</p>
<ol>
<li>prior knowledge</li>
</ol>
<p>It is useful to know that adding, multiplications, divisions, and other features interactions can be of help not only for linear models. For example, although gradient within decision tree is a very powerful model, it still experiences difficulties with approximation of multiplications and divisions. And adding size features explicitly can lead to a more robust model with less amount of trees.</p>
<p><img src="1.png" alt><br><img src="2.png" alt></p>
<p>This feature can help the model utilize the differences in people’s perception of these prices. Also, we can find similar patterns in tasks which require distinguishing between a human and a robot.</p>
<p><img src="3.png" alt></p>
<ol>
<li>EDA(Exploratory data analysis)</li>
</ol>
<h2 id="Category-feature"><a href="#Category-feature" class="headerlink" title="Category feature"></a>Category feature</h2><ol>
<li>Label and Frequency encodings are often used for tree-<br>based models</li>
<li>One-hot encoding is often used for non-tree-based models</li>
<li>Interactions of categorical features can help linear models<br>and KNN</li>
</ol>
<h3 id="Ordinal-features"><a href="#Ordinal-features" class="headerlink" title="Ordinal features"></a>Ordinal features</h3><p>Values in ordinal features are sorted in some meaningful order</p>
<ul>
<li>Ticket class: 1,2,3 </li>
<li>Driver’s license: A, B, C, D</li>
<li>Education: kindergarden, school, undergraduate, bachelor, master, doctoral</li>
</ul>
<ol>
<li><p>Label encoding maps categories to numbers</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line">encoder = preprocessing.LabelEncoder()</span><br><span class="line">encoder.fit(categorical_features)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Frequency encoding maps categories to their frequencies</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">encoding = titanic.groupby(‘Embarked’).size() </span><br><span class="line">encoding = encoding/len(titanic) </span><br><span class="line">titanic[<span class="string">"enc"</span>] = titanic.Embarked.map(encoding)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Datetime"><a href="#Datetime" class="headerlink" title="Datetime"></a>Datetime</h2><ol>
<li>Periodicity<br>Day number in week, month, season, year second, minute, hour.</li>
<li>Time since</li>
</ol>
<ul>
<li>Row-independent moment<br>For example: since 00:00:00 UTC, 1 January 1970;</li>
<li>Row-dependent important moment<br>Number of days left until next holidays / time passed after last holiday.<br><img src="4.png" alt></li>
</ul>
<ol>
<li>Difference between dates</li>
</ol>
<ul>
<li>datetime_feature_1 - datetime_feature_2<br><img src="5.png" alt></li>
</ul>
<h2 id="Coordinates"><a href="#Coordinates" class="headerlink" title="Coordinates"></a>Coordinates</h2><ol>
<li>Interesting places from train/test data or additional data<br>Generally, you can calculate distances to important points on the map. You can extract interesting points on the map from your trained test data.</li>
<li>Centers of clusters</li>
<li>Aggregated statistics<br>use coordinates is to calculate aggregated statistics for objects surrounding area.<br><img src="6.png" alt></li>
<li>If you train decision trees from them, you can add slightly rotated coordinates is new features. And this will help a model make more precise selections on the map.<br><img src="7.png" alt></li>
</ol>
<h2 id="Missing-Data"><a href="#Missing-Data" class="headerlink" title="Missing Data"></a>Missing Data</h2><h3 id="Fillna-approaches"><a href="#Fillna-approaches" class="headerlink" title="Fillna approaches"></a>Fillna approaches</h3><ol>
<li>-999, -1, etc</li>
<li>mean, median</li>
<li>Reconstruct value<ul>
<li>we should be very careful with replacing missing values before our feature generation</li>
</ul>
</li>
<li>It can be beneficial to change the missing values or categories which present in the test data but do not present in the train data. The intention for doing so appeals to the fact that the model which didn’t have that category in the train data will eventually treat it <strong>randomly</strong>.</li>
</ol>
<h3 id="Isnull-feature"><a href="#Isnull-feature" class="headerlink" title="Isnull feature"></a>Isnull feature</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">0.1</td>
<td style="text-align:left">False</td>
</tr>
<tr>
<td style="text-align:left">0.2</td>
<td style="text-align:left">False</td>
</tr>
<tr>
<td style="text-align:left">NaN</td>
<td style="text-align:left">True</td>
</tr>
</tbody>
</table>
</div>
<h1 id="Feature-extraction"><a href="#Feature-extraction" class="headerlink" title="Feature extraction"></a>Feature extraction</h1><h2 id="Texts"><a href="#Texts" class="headerlink" title="Texts"></a>Texts</h2><ol>
<li><p>Preprocessing</p>
<ul>
<li>Lowercase, stemming, lemmarization, stopwords <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Lowercase: Very, very -&gt; very,very </span><br><span class="line">lemmarization: I had a car -&gt; I have a car</span><br><span class="line">stopwords: sklearn.feature_extraction.text.CountVectorizer(max_df)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Bag of words</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Design the Vocabulary</span><br><span class="line"># Create Document Vectors</span><br><span class="line"></span><br><span class="line">&quot;it was the worst of times&quot; = [1, 1, 1, 0, 1, 1, 1, 0, 0, 0]</span><br><span class="line">&quot;it was the age of wisdom&quot; = [1, 1, 1, 0, 1, 0, 0, 1, 1, 0]</span><br><span class="line">&quot;it was the age of foolishness&quot; = [1, 1, 1, 0, 1, 0, 0, 1, 0, 1]</span><br></pre></td></tr></table></figure>
<ul>
<li>Huge vectors</li>
<li><p>Ngrams can help to use local context<br><img src="10.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from sklearn.feature_extraction.text import CountVectorizer</span><br><span class="line"># Ngram_range, analyzer</span><br></pre></td></tr></table></figure>
</li>
<li><p>TF-IDF can be of use as postprocessing</p>
<blockquote>
<p>如果某个词或短语在一篇文章中出现的频率TF高，并且在其他文章中很少出现，则认为此词或者短语具有很好的类别区分能力，适合用来分类。TFIDF实际上是：TF * IDF，TF词频(Term Frequency)，IDF反文档频率(Inverse Document Frequency)。TF表示词条在文档d中出现的频率（另一说：TF词频(Term Frequency)指的是某一个给定的词语在该文件中出现的次数）。IDF的主要思想是：如果包含词条t的文档越少，也就是n越小，IDF越大（见后续公式），则说明词条t具有很好的类别区分能力。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Term frequency</span></span><br><span class="line">tf = <span class="number">1</span> / x.sum(axis=<span class="number">1</span>) [:,<span class="keyword">None</span>]</span><br><span class="line">x = x * tf</span><br><span class="line"><span class="comment">## Inverse Document Frequency</span></span><br><span class="line">idf = np.log(x.shape[<span class="number">0</span>] / (x &gt; <span class="number">0</span>).sum(<span class="number">0</span>)) x = x * idf</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> TfidfVectorizer</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
</li>
<li><p>Word2vec</p>
<ul>
<li>Relatively small vectors</li>
<li>Pretrained models</li>
</ul>
</li>
</ol>
<h2 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h2><ul>
<li>Features can be extracted from different layers</li>
<li>Careful choosing of pretrained network can help</li>
<li>Finetuning allows to refine pretrained models<br><img src="8.png" alt></li>
<li>Data augmentation can improve the model<br><img src="9.png" alt></li>
</ul>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Machine Learning</category>
        <category>Competition</category>
        <category>Tricks</category>
      </categories>
      <tags>
        <tag>Feature Engineering</tag>
      </tags>
  </entry>
  <entry>
    <title>Decision Boundry</title>
    <url>/Decision-Boundry/2019/07/13/</url>
    <content><![CDATA[<h2 id="Decision-Boundry"><a href="#Decision-Boundry" class="headerlink" title="Decision Boundry"></a>Decision Boundry</h2><ol>
<li>决策边界：在特征空间内，根据不同特征对样本进行分类，不同类型间的分界就是模型针对该数据集的决策边界；</li>
<li>通过决策边界可以直接根据样本在特征空间的位置对该样本的类型进行预测；</li>
<li>满足决策边界条件的样本点，分为哪一类都可以，但实际应用中很少发生。</li>
</ol>
<h2 id="两种特征的数据集的决策边界"><a href="#两种特征的数据集的决策边界" class="headerlink" title="两种特征的数据集的决策边界"></a>两种特征的数据集的决策边界</h2><ol>
<li>拟合的模型为:<script type="math/tex; mode=display">\theta_0 + \theta_1\cdot x_1 + \theta_2\cdot x_2 = 0</script>则该边界是一条直线，因为分类问题中特征空间的坐标轴都表示特征</li>
<li>Decision Boundry 为:<script type="math/tex; mode=display">x_2 = \frac{-\theta_0 - \theta_1 x_1}{\theta_2}</script></li>
<li>模拟数据集并绘制<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> playML.train_test_split <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, seed=<span class="number">666</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> playML.LogisticRegression <span class="keyword">import</span> LogisticRegression</span><br><span class="line"></span><br><span class="line">log_reg = LogisticRegression()</span><br><span class="line">log_reg.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># x2()函数：求满足决策边界关系的直线的函数值；</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">x2</span><span class="params">(x1)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (-log_reg.coef_[<span class="number">0</span>] * x1 - log_reg.intercept_) / log_reg.coef_[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">x1_plot = np.linspace(<span class="number">4</span>, <span class="number">8</span>, <span class="number">1000</span>)</span><br><span class="line">x2_plot = x2(x1_plot)</span><br><span class="line"></span><br><span class="line">plt.scatter(X[y==<span class="number">0</span>, <span class="number">0</span>], X[y==<span class="number">0</span>, <span class="number">1</span>], color=<span class="string">'red'</span>)</span><br><span class="line">plt.scatter(X[y==<span class="number">1</span>, <span class="number">0</span>], X[y==<span class="number">1</span>, <span class="number">1</span>], color=<span class="string">'blue'</span>)</span><br><span class="line">plt.plot(x1_plot, x2_plot)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="1.png" alt></p>
<h2 id="不规则的决策边界的绘制方法"><a href="#不规则的决策边界的绘制方法" class="headerlink" title="不规则的决策边界的绘制方法"></a>不规则的决策边界的绘制方法</h2><ol>
<li>思路：特征空间中分布着无数的点，通过细分，将特征空间分割无数的点，对于每一个点都使用模型对其进行预测分类，将这些预测结果绘制出来，不同颜色的点的边界就是分类的决策边界</li>
<li>分割方法：将特征空间的坐标轴等分为 n 份（可视化时只显示两种特征），则特征空间被分割为 $n \codt n$个点（每个点相当于一个样本），用模型预测这$x^2$个点的类型，经预测结果（样本点）显示在特征空间；</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># plot_decision_boundary()函数：绘制模型在二维特征空间的决策边界；</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_decision_boundary</span><span class="params">(model, axis)</span>:</span></span><br><span class="line">    <span class="comment"># model：算法模型；</span></span><br><span class="line">    <span class="comment"># axis：区域坐标轴的范围，其中 0,1,2,3 分别对应 x 轴和 y 轴的范围；</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 1）将坐标轴等分为无数的小点，将 x、y 轴分别等分 （坐标轴范围最大值 - 坐标轴范围最小值）*100 份，</span></span><br><span class="line">    <span class="comment"># np.meshgrid()：</span></span><br><span class="line">    x0, x1 = np.meshgrid(</span><br><span class="line">        np.linspace(axis[<span class="number">0</span>], axis[<span class="number">1</span>], int((axis[<span class="number">1</span>]-axis[<span class="number">0</span>])*<span class="number">100</span>)).reshape(<span class="number">-1</span>,<span class="number">1</span>),</span><br><span class="line">        np.linspace(axis[<span class="number">2</span>], axis[<span class="number">3</span>], int((axis[<span class="number">3</span>]-axis[<span class="number">2</span>])*<span class="number">100</span>)).reshape(<span class="number">-1</span>,<span class="number">1</span>)</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># np.c_()：</span></span><br><span class="line">    X_new = np.c_[x0.ravel(), x1.ravel()]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 2）model.predict(X_new)：将分割出的所有的点，都使用模型预测</span></span><br><span class="line">    y_predict = model.predict(X_new)</span><br><span class="line">    zz = y_predict.reshape(x0.shape)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 3）绘制预测结果</span></span><br><span class="line">    <span class="keyword">from</span> matplotlib.colors <span class="keyword">import</span> ListedColormap</span><br><span class="line">    custom_cmap = ListedColormap([<span class="string">'#EF9A9A'</span>,<span class="string">'#FFF59D'</span>,<span class="string">'#90CAF9'</span>])</span><br><span class="line">    </span><br><span class="line">    plt.contourf(x0, x1, zz, linewidth=<span class="number">5</span>, cmap=custom_cmap)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">knn_clf_all = KNeighborsClassifier()</span><br><span class="line">knn_clf_all.fit(iris.data[:,:<span class="number">2</span>], iris.target)</span><br><span class="line"><span class="comment"># 输出：KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',</span></span><br><span class="line">           metric_params=<span class="keyword">None</span>, n_jobs=<span class="number">1</span>, n_neighbors=<span class="number">5</span>, p=<span class="number">2</span>,</span><br><span class="line">           weights=<span class="string">'uniform'</span>)</span><br><span class="line"></span><br><span class="line">plot_decision_boundary(knn_clf_all, axis=[<span class="number">4</span>, <span class="number">8</span>, <span class="number">1.5</span>, <span class="number">4.5</span>])</span><br><span class="line">plt.scatter(iris.data[iris.target==<span class="number">0</span>,<span class="number">0</span>], iris.data[iris.target==<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">plt.scatter(iris.data[iris.target==<span class="number">1</span>,<span class="number">0</span>], iris.data[iris.target==<span class="number">1</span>,<span class="number">1</span>])</span><br><span class="line">plt.scatter(iris.data[iris.target==<span class="number">2</span>,<span class="number">0</span>], iris.data[iris.target==<span class="number">2</span>,<span class="number">1</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Machine Learning</category>
      </categories>
  </entry>
  <entry>
    <title>Generative Adversarial Network Project</title>
    <url>/Generative-Adversarial-Network-Project/2019/07/11/</url>
    <content><![CDATA[<h3 id="Generating-human-faces-with-Adversarial-Networks"><a href="#Generating-human-faces-with-Adversarial-Networks" class="headerlink" title="Generating human faces with Adversarial Networks"></a>Generating human faces with Adversarial Networks</h3><p><img src="nvidia_cool_gan.png" width="400px"><br>_© research.nvidia.com_</p>
<p>This time we’ll train a neural net to generate plausible human faces in all their subtlty: appearance, expression, accessories, etc. ‘Cuz when us machines gonna take over Earth, there won’t be any more faces left. We want to preserve this data for future iterations. Yikes…</p>
<p>Based on <a href="https://github.com/Lasagne/Recipes/pull/94" target="_blank" rel="noopener">https://github.com/Lasagne/Recipes/pull/94</a> .</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">".."</span>)</span><br><span class="line"><span class="keyword">import</span> grading</span><br><span class="line"><span class="keyword">import</span> download_utils</span><br><span class="line"><span class="keyword">import</span> tqdm_utils</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">download_utils.link_week_4_resources()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">plt.rcParams.update(&#123;<span class="string">'axes.titlesize'</span>: <span class="string">'small'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_digits</span><br><span class="line"><span class="comment">#The following line fetches you two datasets: images, usable for autoencoder training and attributes.</span></span><br><span class="line"><span class="comment">#Those attributes will be required for the final part of the assignment (applying smiles), so please keep them in mind</span></span><br><span class="line"><span class="keyword">from</span> lfw_dataset <span class="keyword">import</span> load_lfw_dataset </span><br><span class="line">data,attrs = load_lfw_dataset(dimx=<span class="number">36</span>,dimy=<span class="number">36</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#preprocess faces</span></span><br><span class="line">data = np.float32(data)/<span class="number">255.</span></span><br><span class="line"></span><br><span class="line">IMG_SHAPE = data.shape[<span class="number">1</span>:]</span><br></pre></td></tr></table></figure>
<pre><code>HBox(children=(IntProgress(value=0, max=13233), HTML(value=&#39;&#39;)))
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#print random image</span></span><br><span class="line">plt.imshow(data[np.random.randint(data.shape[<span class="number">0</span>])], cmap=<span class="string">"gray"</span>, interpolation=<span class="string">"none"</span>)</span><br></pre></td></tr></table></figure>
<pre><code>&lt;matplotlib.image.AxesImage at 0x11dfdf358&gt;
</code></pre><p><img src="output_4_1.png" alt="png"></p>
<h1 id="Generative-adversarial-nets-101"><a href="#Generative-adversarial-nets-101" class="headerlink" title="Generative adversarial nets 101"></a>Generative adversarial nets 101</h1><p><img src="noise_to_face.png" width="400px"><br>_© torch.github.io_</p>
<p>Deep learning is simple, isn’t it? </p>
<ul>
<li>build some network that generates the face (small image)</li>
<li>make up a <strong>measure</strong> of <strong>how good that face is</strong></li>
<li>optimize with gradient descent :)</li>
</ul>
<p>The only problem is: how can we engineers tell well-generated faces from bad? And i bet you we won’t ask a designer for help. </p>
<p><strong>If we can’t tell good faces from bad, we delegate it to yet another neural network!</strong></p>
<p>That makes the two of them:</p>
<ul>
<li><strong>G</strong>enerator - takes random noize for inspiration and tries to generate a face sample. <ul>
<li>Let’s call him <strong>G</strong>(z), where z is a gaussian noize.</li>
</ul>
</li>
<li><strong>D</strong>iscriminator - takes a face sample and tries to tell if it’s great or fake. <ul>
<li>Predicts the probability of input image being a <strong>real face</strong></li>
<li>Let’s call him <strong>D</strong>(x), x being an image.</li>
<li><strong>D(x)</strong> is a predition for real image and <strong>D(G(z))</strong> is prediction for the face made by generator.</li>
</ul>
</li>
</ul>
<p>Before we dive into training them, let’s construct the two networks.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> keras_utils <span class="keyword">import</span> reset_tf_session</span><br><span class="line">s = reset_tf_session()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> layers <span class="keyword">as</span> L</span><br></pre></td></tr></table></figure>
<pre><code>Using TensorFlow backend.
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CODE_SIZE = <span class="number">256</span></span><br><span class="line"></span><br><span class="line">generator = Sequential()</span><br><span class="line">generator.add(L.InputLayer([CODE_SIZE],name=<span class="string">'noise'</span>))</span><br><span class="line">generator.add(L.Dense(<span class="number">10</span>*<span class="number">8</span>*<span class="number">8</span>, activation=<span class="string">'elu'</span>))</span><br><span class="line"></span><br><span class="line">generator.add(L.Reshape((<span class="number">8</span>,<span class="number">8</span>,<span class="number">10</span>)))</span><br><span class="line">generator.add(L.Deconv2D(<span class="number">64</span>,kernel_size=(<span class="number">5</span>,<span class="number">5</span>),activation=<span class="string">'elu'</span>))</span><br><span class="line">generator.add(L.Deconv2D(<span class="number">64</span>,kernel_size=(<span class="number">5</span>,<span class="number">5</span>),activation=<span class="string">'elu'</span>))</span><br><span class="line">generator.add(L.UpSampling2D(size=(<span class="number">2</span>,<span class="number">2</span>)))</span><br><span class="line">generator.add(L.Deconv2D(<span class="number">32</span>,kernel_size=<span class="number">3</span>,activation=<span class="string">'elu'</span>))</span><br><span class="line">generator.add(L.Deconv2D(<span class="number">32</span>,kernel_size=<span class="number">3</span>,activation=<span class="string">'elu'</span>))</span><br><span class="line">generator.add(L.Deconv2D(<span class="number">32</span>,kernel_size=<span class="number">3</span>,activation=<span class="string">'elu'</span>))</span><br><span class="line"></span><br><span class="line">generator.add(L.Conv2D(<span class="number">3</span>,kernel_size=<span class="number">3</span>,activation=<span class="keyword">None</span>))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">generator.summary()</span><br></pre></td></tr></table></figure>
<pre><code>_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
noise (InputLayer)           (None, 256)               0         
_________________________________________________________________
dense_1 (Dense)              (None, 640)               164480    
_________________________________________________________________
reshape_1 (Reshape)          (None, 8, 8, 10)          0         
_________________________________________________________________
conv2d_transpose_1 (Conv2DTr (None, 12, 12, 64)        16064     
_________________________________________________________________
conv2d_transpose_2 (Conv2DTr (None, 16, 16, 64)        102464    
_________________________________________________________________
up_sampling2d_1 (UpSampling2 (None, 32, 32, 64)        0         
_________________________________________________________________
conv2d_transpose_3 (Conv2DTr (None, 34, 34, 32)        18464     
_________________________________________________________________
conv2d_transpose_4 (Conv2DTr (None, 36, 36, 32)        9248      
_________________________________________________________________
conv2d_transpose_5 (Conv2DTr (None, 38, 38, 32)        9248      
_________________________________________________________________
conv2d_1 (Conv2D)            (None, 36, 36, 3)         867       
=================================================================
Total params: 320,835
Trainable params: 320,835
Non-trainable params: 0
_________________________________________________________________
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> generator.output_shape[<span class="number">1</span>:] == IMG_SHAPE, <span class="string">"generator must output an image of shape %s, but instead it produces %s"</span>%(IMG_SHAPE,generator.output_shape[<span class="number">1</span>:])</span><br></pre></td></tr></table></figure>
<h3 id="Discriminator"><a href="#Discriminator" class="headerlink" title="Discriminator"></a>Discriminator</h3><ul>
<li>Discriminator is your usual convolutional network with interlooping convolution and pooling layers</li>
<li>The network does not include dropout/batchnorm to avoid learning complications.</li>
<li>We also regularize the pre-output layer to prevent discriminator from being too certain.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">discriminator = Sequential()</span><br><span class="line"></span><br><span class="line">discriminator.add(L.InputLayer(IMG_SHAPE))</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;build discriminator body&gt;</span></span><br><span class="line">discriminator.add(L.Conv2D(<span class="number">32</span>, kernel_size=<span class="number">3</span>, activation=<span class="string">'elu'</span>))</span><br><span class="line">discriminator.add(L.MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line">discriminator.add(L.Conv2D(<span class="number">64</span>, kernel_size=<span class="number">3</span>, activation=<span class="string">'elu'</span>))</span><br><span class="line">discriminator.add(L.MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line">discriminator.add(L.Conv2D(<span class="number">128</span>, kernel_size=<span class="number">3</span>, activation=<span class="string">'elu'</span>))</span><br><span class="line">discriminator.add(L.MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line">discriminator.add(L.Flatten())</span><br><span class="line">discriminator.add(L.Dense(<span class="number">256</span>,activation=<span class="string">'tanh'</span>))</span><br><span class="line">discriminator.add(L.Dense(<span class="number">2</span>,activation=tf.nn.log_softmax))</span><br></pre></td></tr></table></figure>
<h1 id="Training"><a href="#Training" class="headerlink" title="Training"></a>Training</h1><p>We train the two networks concurrently:</p>
<ul>
<li>Train <strong>discriminator</strong> to better distinguish real data from <strong>current</strong> generator</li>
<li>Train <strong>generator</strong> to make discriminator think generator is real</li>
<li>Since discriminator is a differentiable neural network, we train both with gradient descent.</li>
</ul>
<p><img src="gan.png" width="600px"><br>_© deeplearning4j.org_</p>
<p>Training is done iteratively until discriminator is no longer able to find the difference (or until you run out of patience).</p>
<h3 id="Tricks"><a href="#Tricks" class="headerlink" title="Tricks:"></a>Tricks:</h3><ul>
<li>Regularize discriminator output weights to prevent explosion</li>
<li>Train generator with <strong>adam</strong> to speed up training. Discriminator trains with SGD to avoid problems with momentum.</li>
<li>More: <a href="https://github.com/soumith/ganhacks" target="_blank" rel="noopener">https://github.com/soumith/ganhacks</a></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">noise = tf.placeholder(<span class="string">'float32'</span>,[<span class="keyword">None</span>,CODE_SIZE])</span><br><span class="line">real_data = tf.placeholder(<span class="string">'float32'</span>,[<span class="keyword">None</span>,]+list(IMG_SHAPE))</span><br><span class="line"></span><br><span class="line">logp_real = discriminator(real_data)</span><br><span class="line"></span><br><span class="line">generated_data = generator(noise) <span class="comment">#&lt;gen(noise)&gt;</span></span><br><span class="line"></span><br><span class="line">logp_gen = discriminator(generated_data) <span class="comment">#&lt;log P(real | gen(noise))</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">########################</span></span><br><span class="line"><span class="comment">#discriminator training#</span></span><br><span class="line"><span class="comment">########################</span></span><br><span class="line"></span><br><span class="line">d_loss = -tf.reduce_mean(logp_real[:,<span class="number">1</span>] + logp_gen[:,<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#regularize</span></span><br><span class="line">d_loss += tf.reduce_mean(discriminator.layers[<span class="number">-1</span>].kernel**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#optimize</span></span><br><span class="line">disc_optimizer =  tf.train.GradientDescentOptimizer(<span class="number">1e-3</span>).minimize(d_loss,var_list=discriminator.trainable_weights)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">########################</span></span><br><span class="line"><span class="comment">###generator training###</span></span><br><span class="line"><span class="comment">########################</span></span><br><span class="line"></span><br><span class="line">g_loss = -tf.reduce_mean(logp_gen[:,<span class="number">1</span>]) <span class="comment"># &lt;generator loss&gt;</span></span><br><span class="line"></span><br><span class="line">gen_optimizer = tf.train.AdamOptimizer(<span class="number">1e-4</span>).minimize(g_loss,var_list=generator.trainable_weights)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s.run(tf.global_variables_initializer())</span><br></pre></td></tr></table></figure>
<h3 id="Auxiliary-functions"><a href="#Auxiliary-functions" class="headerlink" title="Auxiliary functions"></a>Auxiliary functions</h3><p>Here we define a few helper functions that draw current data distributions and sample training batches.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sample_noise_batch</span><span class="params">(bsize)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> np.random.normal(size=(bsize, CODE_SIZE)).astype(<span class="string">'float32'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sample_data_batch</span><span class="params">(bsize)</span>:</span></span><br><span class="line">    idxs = np.random.choice(np.arange(data.shape[<span class="number">0</span>]), size=bsize)</span><br><span class="line">    <span class="keyword">return</span> data[idxs]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sample_images</span><span class="params">(nrow,ncol, sharp=False)</span>:</span></span><br><span class="line">    images = generator.predict(sample_noise_batch(bsize=nrow*ncol))</span><br><span class="line">    <span class="keyword">if</span> np.var(images)!=<span class="number">0</span>:</span><br><span class="line">        images = images.clip(np.min(data),np.max(data))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(nrow*ncol):</span><br><span class="line">        plt.subplot(nrow,ncol,i+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> sharp:</span><br><span class="line">            plt.imshow(images[i].reshape(IMG_SHAPE),cmap=<span class="string">"gray"</span>, interpolation=<span class="string">"none"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            plt.imshow(images[i].reshape(IMG_SHAPE),cmap=<span class="string">"gray"</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sample_probas</span><span class="params">(bsize)</span>:</span></span><br><span class="line">    plt.title(<span class="string">'Generated vs real data'</span>)</span><br><span class="line">    plt.hist(np.exp(discriminator.predict(sample_data_batch(bsize)))[:,<span class="number">1</span>],</span><br><span class="line">             label=<span class="string">'D(x)'</span>, alpha=<span class="number">0.5</span>,range=[<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">    plt.hist(np.exp(discriminator.predict(generator.predict(sample_noise_batch(bsize))))[:,<span class="number">1</span>],</span><br><span class="line">             label=<span class="string">'D(G(z))'</span>,alpha=<span class="number">0.5</span>,range=[<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">    plt.legend(loc=<span class="string">'best'</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>
<h3 id="Training-1"><a href="#Training-1" class="headerlink" title="Training"></a>Training</h3><p>Main loop.<br>We just train generator and discriminator in a loop and plot results once every N iterations.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> IPython <span class="keyword">import</span> display</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> tqdm_utils.tqdm_notebook_failsafe(range(<span class="number">50000</span>)):</span><br><span class="line">    </span><br><span class="line">    feed_dict = &#123;</span><br><span class="line">        real_data:sample_data_batch(<span class="number">100</span>),</span><br><span class="line">        noise:sample_noise_batch(<span class="number">100</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        s.run(disc_optimizer,feed_dict)</span><br><span class="line">    </span><br><span class="line">    s.run(gen_optimizer,feed_dict)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> epoch %<span class="number">100</span>==<span class="number">0</span>:</span><br><span class="line">        display.clear_output(wait=<span class="keyword">True</span>)</span><br><span class="line">        sample_images(<span class="number">2</span>,<span class="number">3</span>,<span class="keyword">True</span>)</span><br><span class="line">        sample_probas(<span class="number">1000</span>)</span><br></pre></td></tr></table></figure>
<p><img src="output_20_0.png" alt="png"></p>
<p><img src="output_20_1.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> submit_honor <span class="keyword">import</span> submit_honor</span><br><span class="line">submit_honor((generator, discriminator), &lt;YOUR_EMAIL&gt;, &lt;YOUR_TOKEN&gt;)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#The network was trained for about 15k iterations. </span></span><br><span class="line"><span class="comment">#Training for longer yields MUCH better results</span></span><br><span class="line">plt.figure(figsize=[<span class="number">16</span>,<span class="number">24</span>])</span><br><span class="line">sample_images(<span class="number">16</span>,<span class="number">8</span>)</span><br></pre></td></tr></table></figure>
<p><img src="output_22_0.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Project</tag>
        <tag>Computer Vision</tag>
        <tag>Generative Adversarial Network</tag>
      </tags>
  </entry>
  <entry>
    <title>Autoencoders Project</title>
    <url>/Autoencoders-Project/2019/07/11/</url>
    <content><![CDATA[<h1 id="Denoising-Autoencoders-And-Where-To-Find-Them"><a href="#Denoising-Autoencoders-And-Where-To-Find-Them" class="headerlink" title="Denoising Autoencoders And Where To Find Them"></a>Denoising Autoencoders And Where To Find Them</h1><p>Today we’re going to train deep autoencoders and apply them to faces and similar images search.</p>
<p>Our new test subjects are human faces from the <a href="http://vis-www.cs.umass.edu/lfw/" target="_blank" rel="noopener">lfw dataset</a>.</p>
<h1 id="Import-stuff"><a href="#Import-stuff" class="headerlink" title="Import stuff"></a>Import stuff</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">".."</span>)</span><br><span class="line"><span class="keyword">import</span> grading</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> keras, keras.layers <span class="keyword">as</span> L, keras.backend <span class="keyword">as</span> K</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> lfw_dataset <span class="keyword">import</span> load_lfw_dataset</span><br><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> download_utils</span><br><span class="line"><span class="keyword">import</span> keras_utils</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> keras_utils <span class="keyword">import</span> reset_tf_session</span><br></pre></td></tr></table></figure>
<pre><code>Using TensorFlow backend.
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !!! remember to clear session/graph if you rebuild your graph to avoid out-of-memory errors !!!</span></span><br></pre></td></tr></table></figure>
<h1 id="Load-dataset"><a href="#Load-dataset" class="headerlink" title="Load dataset"></a>Load dataset</h1><p>Dataset was downloaded for you. Relevant links (just in case):</p>
<ul>
<li><a href="http://www.cs.columbia.edu/CAVE/databases/pubfig/download/lfw_attributes.txt" target="_blank" rel="noopener">http://www.cs.columbia.edu/CAVE/databases/pubfig/download/lfw_attributes.txt</a></li>
<li><a href="http://vis-www.cs.umass.edu/lfw/lfw-deepfunneled.tgz" target="_blank" rel="noopener">http://vis-www.cs.umass.edu/lfw/lfw-deepfunneled.tgz</a></li>
<li><a href="http://vis-www.cs.umass.edu/lfw/lfw.tgz" target="_blank" rel="noopener">http://vis-www.cs.umass.edu/lfw/lfw.tgz</a></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># we downloaded them for you, just link them here</span></span><br><span class="line">download_utils.link_week_4_resources()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># load images</span></span><br><span class="line">X, attr = load_lfw_dataset(use_raw=<span class="keyword">True</span>, dimx=<span class="number">32</span>, dimy=<span class="number">32</span>)</span><br><span class="line">IMG_SHAPE = X.shape[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># center images</span></span><br><span class="line">X = X.astype(<span class="string">'float32'</span>) / <span class="number">255.0</span> - <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># split</span></span><br><span class="line">X_train, X_test = train_test_split(X, test_size=<span class="number">0.1</span>, random_state=<span class="number">42</span>)</span><br></pre></td></tr></table></figure>
<pre><code>HBox(children=(IntProgress(value=0, max=18983), HTML(value=&#39;&#39;)))
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_image</span><span class="params">(x)</span>:</span></span><br><span class="line">    plt.imshow(np.clip(x + <span class="number">0.5</span>, <span class="number">0</span>, <span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.title(<span class="string">'sample images'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">    plt.subplot(<span class="number">2</span>,<span class="number">3</span>,i+<span class="number">1</span>)</span><br><span class="line">    show_image(X[i])</span><br><span class="line"></span><br><span class="line">print(<span class="string">"X shape:"</span>, X.shape)</span><br><span class="line">print(<span class="string">"attr shape:"</span>, attr.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># try to free memory</span></span><br><span class="line"><span class="keyword">del</span> X</span><br><span class="line"><span class="keyword">import</span> gc</span><br><span class="line">gc.collect()</span><br></pre></td></tr></table></figure>
<pre><code>X shape: (13143, 32, 32, 3)
attr shape: (13143, 73)





2997
</code></pre><p><img src="output_9_2.png" alt="png"></p>
<h1 id="Autoencoder-architecture"><a href="#Autoencoder-architecture" class="headerlink" title="Autoencoder architecture"></a>Autoencoder architecture</h1><p>Let’s design autoencoder as two sequential keras models: the encoder and decoder respectively.</p>
<p>We will then use symbolic API to apply and train these models.</p>
<p><img src="images/autoencoder.png" style="width:50%"></p>
<h1 id="First-step-PCA"><a href="#First-step-PCA" class="headerlink" title="First step: PCA"></a>First step: PCA</h1><p>Principial Component Analysis is a popular dimensionality reduction method. </p>
<p>Under the hood, PCA attempts to decompose object-feature matrix $X$ into two smaller matrices: $W$ and $\hat W$ minimizing _mean squared error_:</p>
<script type="math/tex; mode=display">\|(X W) \hat{W} - X\|^2_2 \to_{W, \hat{W}} \min</script><ul>
<li>$X \in \mathbb{R}^{n \times m}$ - object matrix (<strong>centered</strong>);</li>
<li>$W \in \mathbb{R}^{m \times d}$ - matrix of direct transformation;</li>
<li>$\hat{W} \in \mathbb{R}^{d \times m}$ - matrix of reverse transformation;</li>
<li>$n$ samples, $m$ original dimensions and $d$ target dimensions;</li>
</ul>
<p>In geometric terms, we want to find d axes along which most of variance occurs. The “natural” axes, if you wish.</p>
<p><img src="images/pca.png" style="width:30%"></p>
<p>PCA can also be seen as a special case of an autoencoder.</p>
<ul>
<li><strong>Encoder</strong>: X -&gt; Dense(d units) -&gt; code</li>
<li><strong>Decoder</strong>: code -&gt; Dense(m units) -&gt; X</li>
</ul>
<p>Where Dense is a fully-connected layer with linear activaton:   $f(X) = W \cdot X + \vec b $</p>
<p>Note: the bias term in those layers is responsible for “centering” the matrix i.e. substracting mean.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_pca_autoencoder</span><span class="params">(img_shape, code_size)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Here we define a simple linear autoencoder as described above.</span></span><br><span class="line"><span class="string">    We also flatten and un-flatten data to be compatible with image shapes</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    encoder = keras.models.Sequential()</span><br><span class="line">    encoder.add(L.InputLayer(img_shape))</span><br><span class="line">    encoder.add(L.Flatten())                  <span class="comment">#flatten image to vector</span></span><br><span class="line">    encoder.add(L.Dense(code_size))           <span class="comment">#actual encoder</span></span><br><span class="line"></span><br><span class="line">    decoder = keras.models.Sequential()</span><br><span class="line">    decoder.add(L.InputLayer((code_size,)))</span><br><span class="line">    decoder.add(L.Dense(np.prod(img_shape)))  <span class="comment">#actual decoder, height*width*3 units</span></span><br><span class="line">    decoder.add(L.Reshape(img_shape))         <span class="comment">#un-flatten</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> encoder,decoder</span><br></pre></td></tr></table></figure>
<p>Meld them together into one model:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = reset_tf_session()</span><br><span class="line"></span><br><span class="line">encoder, decoder = build_pca_autoencoder(IMG_SHAPE, code_size=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">inp = L.Input(IMG_SHAPE)</span><br><span class="line">code = encoder(inp)</span><br><span class="line">reconstruction = decoder(code)</span><br><span class="line"></span><br><span class="line">autoencoder = keras.models.Model(inputs=inp, outputs=reconstruction)</span><br><span class="line">autoencoder.compile(optimizer=<span class="string">'adamax'</span>, loss=<span class="string">'mse'</span>)</span><br><span class="line"></span><br><span class="line">autoencoder.fit(x=X_train, y=X_train, epochs=<span class="number">15</span>,</span><br><span class="line">                validation_data=[X_test, X_test],</span><br><span class="line">                callbacks=[keras_utils.TqdmProgressCallback()],</span><br><span class="line">                verbose=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<pre><code>Epoch 1/15



HBox(children=(IntProgress(value=0, max=11828), HTML(value=&#39;&#39;)))




Epoch 2/15



HBox(children=(IntProgress(value=0, max=11828), HTML(value=&#39;&#39;)))




Epoch 3/15



HBox(children=(IntProgress(value=0, max=11828), HTML(value=&#39;&#39;)))




Epoch 4/15



HBox(children=(IntProgress(value=0, max=11828), HTML(value=&#39;&#39;)))




Epoch 5/15



HBox(children=(IntProgress(value=0, max=11828), HTML(value=&#39;&#39;)))




Epoch 6/15



HBox(children=(IntProgress(value=0, max=11828), HTML(value=&#39;&#39;)))




Epoch 7/15



HBox(children=(IntProgress(value=0, max=11828), HTML(value=&#39;&#39;)))




Epoch 8/15



HBox(children=(IntProgress(value=0, max=11828), HTML(value=&#39;&#39;)))




Epoch 9/15



HBox(children=(IntProgress(value=0, max=11828), HTML(value=&#39;&#39;)))




Epoch 10/15



HBox(children=(IntProgress(value=0, max=11828), HTML(value=&#39;&#39;)))




Epoch 11/15



HBox(children=(IntProgress(value=0, max=11828), HTML(value=&#39;&#39;)))




Epoch 12/15



HBox(children=(IntProgress(value=0, max=11828), HTML(value=&#39;&#39;)))




Epoch 13/15



HBox(children=(IntProgress(value=0, max=11828), HTML(value=&#39;&#39;)))




Epoch 14/15



HBox(children=(IntProgress(value=0, max=11828), HTML(value=&#39;&#39;)))




Epoch 15/15



HBox(children=(IntProgress(value=0, max=11828), HTML(value=&#39;&#39;)))








&lt;keras.callbacks.History at 0x7f769160d550&gt;
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visualize</span><span class="params">(img,encoder,decoder)</span>:</span></span><br><span class="line">    <span class="string">"""Draws original, encoded and decoded images"""</span></span><br><span class="line">    code = encoder.predict(img[<span class="keyword">None</span>])[<span class="number">0</span>]  <span class="comment"># img[None] is the same as img[np.newaxis, :]</span></span><br><span class="line">    reco = decoder.predict(code[<span class="keyword">None</span>])[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    plt.subplot(<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>)</span><br><span class="line">    plt.title(<span class="string">"Original"</span>)</span><br><span class="line">    show_image(img)</span><br><span class="line"></span><br><span class="line">    plt.subplot(<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">    plt.title(<span class="string">"Code"</span>)</span><br><span class="line">    plt.imshow(code.reshape([code.shape[<span class="number">-1</span>]//<span class="number">2</span>,<span class="number">-1</span>]))</span><br><span class="line"></span><br><span class="line">    plt.subplot(<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">    plt.title(<span class="string">"Reconstructed"</span>)</span><br><span class="line">    show_image(reco)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">score = autoencoder.evaluate(X_test,X_test,verbose=<span class="number">0</span>)</span><br><span class="line">print(<span class="string">"PCA MSE:"</span>, score)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    img = X_test[i]</span><br><span class="line">    visualize(img,encoder,decoder)</span><br></pre></td></tr></table></figure>
<pre><code>PCA MSE: 0.00662136772442
</code></pre><p><img src="output_16_1.png" alt="png"></p>
<p><img src="output_16_2.png" alt="png"></p>
<p><img src="output_16_3.png" alt="png"></p>
<p><img src="output_16_4.png" alt="png"></p>
<p><img src="output_16_5.png" alt="png"></p>
<h1 id="Going-deeper-convolutional-autoencoder"><a href="#Going-deeper-convolutional-autoencoder" class="headerlink" title="Going deeper: convolutional autoencoder"></a>Going deeper: convolutional autoencoder</h1><p>PCA is neat but surely we can do better. This time we want you to build a deep convolutional autoencoder by… stacking more layers.</p>
<h2 id="Encoder"><a href="#Encoder" class="headerlink" title="Encoder"></a>Encoder</h2><p>The <strong>encoder</strong> part is pretty standard, we stack convolutional and pooling layers and finish with a dense layer to get the representation of desirable size (<code>code_size</code>).</p>
<p>We recommend to use <code>activation=&#39;elu&#39;</code> for all convolutional and dense layers.</p>
<p>We recommend to repeat (conv, pool) 4 times with kernel size (3, 3), <code>padding=&#39;same&#39;</code> and the following numbers of output channels: <code>32, 64, 128, 256</code>.</p>
<p>Remember to flatten (<code>L.Flatten()</code>) output before adding the last dense layer!</p>
<h2 id="Decoder"><a href="#Decoder" class="headerlink" title="Decoder"></a>Decoder</h2><p>For <strong>decoder</strong> we will use so-called “transpose convolution”. </p>
<p>Traditional convolutional layer takes a patch of an image and produces a number (patch -&gt; number). In “transpose convolution” we want to take a number and produce a patch of an image (number -&gt; patch). We need this layer to “undo” convolutions in encoder. We had a glimpse of it during week 3 (watch <a href="https://www.coursera.org/learn/intro-to-deep-learning/lecture/auRqf/a-glimpse-of-other-computer-vision-tasks" target="_blank" rel="noopener">this video</a> starting at 5:41).</p>
<p>Here’s how “transpose convolution” works:<br><img src="images/transpose_conv.jpg" style="width:60%"><br>In this example we use a stride of 2 to produce 4x4 output, this way we “undo” pooling as well. Another way to think about it: we “undo” convolution with stride 2 (which is similar to conv + pool).</p>
<p>You can add “transpose convolution” layer in Keras like this:<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">L.Conv2DTranspose(filters=?, kernel_size=(3, 3), strides=2, activation='elu', padding='same')</span><br></pre></td></tr></table></figure></p>
<p>Our decoder starts with a dense layer to “undo” the last layer of encoder. Remember to reshape its output to “undo” <code>L.Flatten()</code> in encoder.</p>
<p>Now we’re ready to undo (conv, pool) pairs. For this we need to stack 4 <code>L.Conv2DTranspose</code> layers with the following numbers of output channels: <code>128, 64, 32, 3</code>. Each of these layers will learn to “undo” (conv, pool) pair in encoder. For the last <code>L.Conv2DTranspose</code> layer use <code>activation=None</code> because that is our final image.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Let's play around with transpose convolution on examples first</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_conv2d_transpose</span><span class="params">(img_size, filter_size)</span>:</span></span><br><span class="line">    print(<span class="string">"Transpose convolution test for img_size=&#123;&#125;, filter_size=&#123;&#125;:"</span>.format(img_size, filter_size))</span><br><span class="line">    </span><br><span class="line">    x = (np.arange(img_size ** <span class="number">2</span>, dtype=np.float32) + <span class="number">1</span>).reshape((<span class="number">1</span>, img_size, img_size, <span class="number">1</span>))</span><br><span class="line">    f = (np.ones(filter_size ** <span class="number">2</span>, dtype=np.float32)).reshape((filter_size, filter_size, <span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    s = reset_tf_session()</span><br><span class="line">    </span><br><span class="line">    conv = tf.nn.conv2d_transpose(x, f, </span><br><span class="line">                                  output_shape=(<span class="number">1</span>, img_size * <span class="number">2</span>, img_size * <span class="number">2</span>, <span class="number">1</span>), </span><br><span class="line">                                  strides=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>], </span><br><span class="line">                                  padding=<span class="string">'SAME'</span>)</span><br><span class="line"></span><br><span class="line">    result = s.run(conv)</span><br><span class="line">    print(<span class="string">"input:"</span>)</span><br><span class="line">    print(x[<span class="number">0</span>, :, :, <span class="number">0</span>])</span><br><span class="line">    print(<span class="string">"filter:"</span>)</span><br><span class="line">    print(f[:, :, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">    print(<span class="string">"output:"</span>)</span><br><span class="line">    print(result[<span class="number">0</span>, :, :, <span class="number">0</span>])</span><br><span class="line">    s.close()</span><br><span class="line">        </span><br><span class="line">test_conv2d_transpose(img_size=<span class="number">2</span>, filter_size=<span class="number">2</span>)</span><br><span class="line">test_conv2d_transpose(img_size=<span class="number">2</span>, filter_size=<span class="number">3</span>)</span><br><span class="line">test_conv2d_transpose(img_size=<span class="number">4</span>, filter_size=<span class="number">2</span>)</span><br><span class="line">test_conv2d_transpose(img_size=<span class="number">4</span>, filter_size=<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<pre><code>Transpose convolution test for img_size=2, filter_size=2:
input:
[[ 1.  2.]
 [ 3.  4.]]
filter:
[[ 1.  1.]
 [ 1.  1.]]
output:
[[ 1.  1.  2.  2.]
 [ 1.  1.  2.  2.]
 [ 3.  3.  4.  4.]
 [ 3.  3.  4.  4.]]
Transpose convolution test for img_size=2, filter_size=3:
input:
[[ 1.  2.]
 [ 3.  4.]]
filter:
[[ 1.  1.  1.]
 [ 1.  1.  1.]
 [ 1.  1.  1.]]
output:
[[  1.   1.   3.   2.]
 [  1.   1.   3.   2.]
 [  4.   4.  10.   6.]
 [  3.   3.   7.   4.]]
Transpose convolution test for img_size=4, filter_size=2:
input:
[[  1.   2.   3.   4.]
 [  5.   6.   7.   8.]
 [  9.  10.  11.  12.]
 [ 13.  14.  15.  16.]]
filter:
[[ 1.  1.]
 [ 1.  1.]]
output:
[[  1.   1.   2.   2.   3.   3.   4.   4.]
 [  1.   1.   2.   2.   3.   3.   4.   4.]
 [  5.   5.   6.   6.   7.   7.   8.   8.]
 [  5.   5.   6.   6.   7.   7.   8.   8.]
 [  9.   9.  10.  10.  11.  11.  12.  12.]
 [  9.   9.  10.  10.  11.  11.  12.  12.]
 [ 13.  13.  14.  14.  15.  15.  16.  16.]
 [ 13.  13.  14.  14.  15.  15.  16.  16.]]
Transpose convolution test for img_size=4, filter_size=3:
input:
[[  1.   2.   3.   4.]
 [  5.   6.   7.   8.]
 [  9.  10.  11.  12.]
 [ 13.  14.  15.  16.]]
filter:
[[ 1.  1.  1.]
 [ 1.  1.  1.]
 [ 1.  1.  1.]]
output:
[[  1.   1.   3.   2.   5.   3.   7.   4.]
 [  1.   1.   3.   2.   5.   3.   7.   4.]
 [  6.   6.  14.   8.  18.  10.  22.  12.]
 [  5.   5.  11.   6.  13.   7.  15.   8.]
 [ 14.  14.  30.  16.  34.  18.  38.  20.]
 [  9.   9.  19.  10.  21.  11.  23.  12.]
 [ 22.  22.  46.  24.  50.  26.  54.  28.]
 [ 13.  13.  27.  14.  29.  15.  31.  16.]]
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_deep_autoencoder</span><span class="params">(img_shape, code_size)</span>:</span></span><br><span class="line">    <span class="string">"""PCA's deeper brother. See instructions above. Use `code_size` in layer definitions."""</span></span><br><span class="line">    H,W,C = img_shape</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># encoder</span></span><br><span class="line">    encoder = keras.models.Sequential()</span><br><span class="line">    encoder.add(L.InputLayer(img_shape))</span><br><span class="line">    encoder.add(L.Conv2D(filters=<span class="number">32</span>, kernel_size=(<span class="number">3</span>,<span class="number">3</span>),padding=<span class="string">"same"</span>,activation=<span class="string">"elu"</span>))</span><br><span class="line">    encoder.add(L.MaxPooling2D())</span><br><span class="line">    encoder.add(L.Conv2D(filters=<span class="number">64</span>, kernel_size=(<span class="number">3</span>,<span class="number">3</span>),padding=<span class="string">"same"</span>,activation=<span class="string">"elu"</span>))</span><br><span class="line">    encoder.add(L.MaxPooling2D())</span><br><span class="line">    encoder.add(L.Conv2D(filters=<span class="number">128</span>, kernel_size=(<span class="number">3</span>,<span class="number">3</span>),padding=<span class="string">"same"</span>,activation=<span class="string">"elu"</span>))</span><br><span class="line">    encoder.add(L.MaxPooling2D())</span><br><span class="line">    encoder.add(L.Conv2D(filters=<span class="number">256</span>, kernel_size=(<span class="number">3</span>,<span class="number">3</span>),padding=<span class="string">"same"</span>,activation=<span class="string">"elu"</span>))</span><br><span class="line">    encoder.add(L.MaxPooling2D())</span><br><span class="line">    encoder.add(L.Flatten())</span><br><span class="line">    encoder.add(L.Dense(code_size))</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">### YOUR CODE HERE: define encoder as per instructions above ###</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># decoder</span></span><br><span class="line">    decoder = keras.models.Sequential()</span><br><span class="line">    decoder.add(L.InputLayer((code_size,)))</span><br><span class="line">    decoder.add(L.Dense(<span class="number">2</span>*<span class="number">2</span>*<span class="number">256</span>))</span><br><span class="line">    decoder.add(L.Reshape((<span class="number">2</span>, <span class="number">2</span>, <span class="number">256</span>)))</span><br><span class="line">    decoder.add(L.Conv2DTranspose(filters=<span class="number">128</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), strides=<span class="number">2</span>, activation=<span class="string">'elu'</span>, padding=<span class="string">'same'</span>))</span><br><span class="line">    decoder.add(L.Conv2DTranspose(filters=<span class="number">64</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), strides=<span class="number">2</span>, activation=<span class="string">'elu'</span>, padding=<span class="string">'same'</span>))</span><br><span class="line">    decoder.add(L.Conv2DTranspose(filters=<span class="number">32</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), strides=<span class="number">2</span>, activation=<span class="string">'elu'</span>, padding=<span class="string">'same'</span>))</span><br><span class="line">    decoder.add(L.Conv2DTranspose(filters=<span class="number">3</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), strides=<span class="number">2</span>, activation=<span class="keyword">None</span>, padding=<span class="string">'same'</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">### YOUR CODE HERE: define decoder as per instructions above ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> encoder, decoder</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Check autoencoder shapes along different code_sizes</span></span><br><span class="line">get_dim = <span class="keyword">lambda</span> layer: np.prod(layer.output_shape[<span class="number">1</span>:])</span><br><span class="line"><span class="keyword">for</span> code_size <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">8</span>,<span class="number">32</span>,<span class="number">128</span>,<span class="number">512</span>]:</span><br><span class="line">    s = reset_tf_session()</span><br><span class="line">    encoder, decoder = build_deep_autoencoder(IMG_SHAPE, code_size=code_size)</span><br><span class="line">    print(<span class="string">"Testing code size %i"</span> % code_size)</span><br><span class="line">    <span class="keyword">assert</span> encoder.output_shape[<span class="number">1</span>:]==(code_size,),<span class="string">"encoder must output a code of required size"</span></span><br><span class="line">    <span class="keyword">assert</span> decoder.output_shape[<span class="number">1</span>:]==IMG_SHAPE,   <span class="string">"decoder must output an image of valid shape"</span></span><br><span class="line">    <span class="keyword">assert</span> len(encoder.trainable_weights)&gt;=<span class="number">6</span>,     <span class="string">"encoder must contain at least 3 layers"</span></span><br><span class="line">    <span class="keyword">assert</span> len(decoder.trainable_weights)&gt;=<span class="number">6</span>,     <span class="string">"decoder must contain at least 3 layers"</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> layer <span class="keyword">in</span> encoder.layers + decoder.layers:</span><br><span class="line">        <span class="keyword">assert</span> get_dim(layer) &gt;= code_size, <span class="string">"Encoder layer %s is smaller than bottleneck (%i units)"</span>%(layer.name,get_dim(layer))</span><br><span class="line">print(<span class="string">"All tests passed!"</span>)</span><br><span class="line">s = reset_tf_session()</span><br></pre></td></tr></table></figure>
<pre><code>Testing code size 1
Testing code size 8
Testing code size 32
Testing code size 128
Testing code size 512
All tests passed!
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Look at encoder and decoder shapes.</span></span><br><span class="line"><span class="comment"># Total number of trainable parameters of encoder and decoder should be close.</span></span><br><span class="line">s = reset_tf_session()</span><br><span class="line">encoder, decoder = build_deep_autoencoder(IMG_SHAPE, code_size=<span class="number">32</span>)</span><br><span class="line">encoder.summary()</span><br><span class="line">decoder.summary()</span><br></pre></td></tr></table></figure>
<pre><code>_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
input_1 (InputLayer)         (None, 32, 32, 3)         0         
_________________________________________________________________
conv2d_1 (Conv2D)            (None, 32, 32, 32)        896       
_________________________________________________________________
max_pooling2d_1 (MaxPooling2 (None, 16, 16, 32)        0         
_________________________________________________________________
conv2d_2 (Conv2D)            (None, 16, 16, 64)        18496     
_________________________________________________________________
max_pooling2d_2 (MaxPooling2 (None, 8, 8, 64)          0         
_________________________________________________________________
conv2d_3 (Conv2D)            (None, 8, 8, 128)         73856     
_________________________________________________________________
max_pooling2d_3 (MaxPooling2 (None, 4, 4, 128)         0         
_________________________________________________________________
conv2d_4 (Conv2D)            (None, 4, 4, 256)         295168    
_________________________________________________________________
max_pooling2d_4 (MaxPooling2 (None, 2, 2, 256)         0         
_________________________________________________________________
flatten_1 (Flatten)          (None, 1024)              0         
_________________________________________________________________
dense_1 (Dense)              (None, 32)                32800     
=================================================================
Total params: 421,216
Trainable params: 421,216
Non-trainable params: 0
_________________________________________________________________
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
input_2 (InputLayer)         (None, 32)                0         
_________________________________________________________________
dense_2 (Dense)              (None, 1024)              33792     
_________________________________________________________________
reshape_1 (Reshape)          (None, 2, 2, 256)         0         
_________________________________________________________________
conv2d_transpose_1 (Conv2DTr (None, 4, 4, 128)         295040    
_________________________________________________________________
conv2d_transpose_2 (Conv2DTr (None, 8, 8, 64)          73792     
_________________________________________________________________
conv2d_transpose_3 (Conv2DTr (None, 16, 16, 32)        18464     
_________________________________________________________________
conv2d_transpose_4 (Conv2DTr (None, 32, 32, 3)         867       
=================================================================
Total params: 421,955
Trainable params: 421,955
Non-trainable params: 0
_________________________________________________________________
</code></pre><p>Convolutional autoencoder training. This will take <strong>1 hour</strong>. You’re aiming at ~0.0056 validation MSE and ~0.0054 training MSE.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = reset_tf_session()</span><br><span class="line"></span><br><span class="line">encoder, decoder = build_deep_autoencoder(IMG_SHAPE, code_size=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">inp = L.Input(IMG_SHAPE)</span><br><span class="line">code = encoder(inp)</span><br><span class="line">reconstruction = decoder(code)</span><br><span class="line"></span><br><span class="line">autoencoder = keras.models.Model(inputs=inp, outputs=reconstruction)</span><br><span class="line">autoencoder.compile(optimizer=<span class="string">"adamax"</span>, loss=<span class="string">'mse'</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># we will save model checkpoints here to continue training in case of kernel death</span></span><br><span class="line">model_filename = <span class="string">'autoencoder.&#123;0:03d&#125;.hdf5'</span></span><br><span class="line">last_finished_epoch = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### uncomment below to continue training from model checkpoint</span></span><br><span class="line"><span class="comment">#### fill `last_finished_epoch` with your latest finished epoch</span></span><br><span class="line"><span class="comment"># from keras.models import load_model</span></span><br><span class="line"><span class="comment"># s = reset_tf_session()</span></span><br><span class="line"><span class="comment"># last_finished_epoch = 4</span></span><br><span class="line"><span class="comment"># autoencoder = load_model(model_filename.format(last_finished_epoch))</span></span><br><span class="line"><span class="comment"># encoder = autoencoder.layers[1]</span></span><br><span class="line"><span class="comment"># decoder = autoencoder.layers[2]</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">autoencoder.fit(x=X_train, y=X_train, epochs=<span class="number">25</span>,</span><br><span class="line">                validation_data=[X_test, X_test],</span><br><span class="line">                callbacks=[keras_utils.ModelSaveCallback(model_filename),</span><br><span class="line">                           keras_utils.TqdmProgressCallback()],</span><br><span class="line">                verbose=<span class="number">0</span>,</span><br><span class="line">                initial_epoch=last_finished_epoch <span class="keyword">or</span> <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<pre><code>Epoch 1/25



HBox(children=(IntProgress(value=0, max=11828), HTML(value=&#39;&#39;)))


Model saved in autoencoder.000.hdf5


Epoch 2/25



HBox(children=(IntProgress(value=0, max=11828), HTML(value=&#39;&#39;)))


Model saved in autoencoder.001.hdf5


Epoch 3/25



HBox(children=(IntProgress(value=0, max=11828), HTML(value=&#39;&#39;)))


Model saved in autoencoder.002.hdf5


Epoch 4/25



HBox(children=(IntProgress(value=0, max=11828), HTML(value=&#39;&#39;)))


Model saved in autoencoder.003.hdf5


Epoch 5/25



HBox(children=(IntProgress(value=0, max=11828), HTML(value=&#39;&#39;)))


Model saved in autoencoder.004.hdf5


Epoch 6/25



HBox(children=(IntProgress(value=0, max=11828), HTML(value=&#39;&#39;)))


Model saved in autoencoder.005.hdf5


Epoch 7/25



HBox(children=(IntProgress(value=0, max=11828), HTML(value=&#39;&#39;)))


Model saved in autoencoder.006.hdf5


Epoch 8/25



HBox(children=(IntProgress(value=0, max=11828), HTML(value=&#39;&#39;)))


Model saved in autoencoder.007.hdf5


Epoch 9/25



HBox(children=(IntProgress(value=0, max=11828), HTML(value=&#39;&#39;)))


Model saved in autoencoder.008.hdf5


Epoch 10/25



HBox(children=(IntProgress(value=0, max=11828), HTML(value=&#39;&#39;)))


Model saved in autoencoder.009.hdf5


Epoch 11/25



HBox(children=(IntProgress(value=0, max=11828), HTML(value=&#39;&#39;)))


Model saved in autoencoder.010.hdf5


Epoch 12/25



HBox(children=(IntProgress(value=0, max=11828), HTML(value=&#39;&#39;)))


Model saved in autoencoder.011.hdf5


Epoch 13/25



HBox(children=(IntProgress(value=0, max=11828), HTML(value=&#39;&#39;)))


Model saved in autoencoder.012.hdf5


Epoch 14/25



HBox(children=(IntProgress(value=0, max=11828), HTML(value=&#39;&#39;)))


Model saved in autoencoder.013.hdf5


Epoch 15/25



HBox(children=(IntProgress(value=0, max=11828), HTML(value=&#39;&#39;)))


Model saved in autoencoder.014.hdf5


Epoch 16/25



HBox(children=(IntProgress(value=0, max=11828), HTML(value=&#39;&#39;)))


Model saved in autoencoder.015.hdf5


Epoch 17/25



HBox(children=(IntProgress(value=0, max=11828), HTML(value=&#39;&#39;)))


Model saved in autoencoder.016.hdf5


Epoch 18/25



HBox(children=(IntProgress(value=0, max=11828), HTML(value=&#39;&#39;)))


Model saved in autoencoder.017.hdf5


Epoch 19/25



HBox(children=(IntProgress(value=0, max=11828), HTML(value=&#39;&#39;)))


Model saved in autoencoder.018.hdf5


Epoch 20/25



HBox(children=(IntProgress(value=0, max=11828), HTML(value=&#39;&#39;)))


Model saved in autoencoder.019.hdf5


Epoch 21/25



HBox(children=(IntProgress(value=0, max=11828), HTML(value=&#39;&#39;)))


Model saved in autoencoder.020.hdf5


Epoch 22/25



HBox(children=(IntProgress(value=0, max=11828), HTML(value=&#39;&#39;)))


Model saved in autoencoder.021.hdf5


Epoch 23/25



HBox(children=(IntProgress(value=0, max=11828), HTML(value=&#39;&#39;)))


Model saved in autoencoder.022.hdf5


Epoch 24/25



HBox(children=(IntProgress(value=0, max=11828), HTML(value=&#39;&#39;)))


Model saved in autoencoder.023.hdf5


Epoch 25/25



HBox(children=(IntProgress(value=0, max=11828), HTML(value=&#39;&#39;)))


Model saved in autoencoder.024.hdf5






&lt;keras.callbacks.History at 0x7f7691fe4710&gt;
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">reconstruction_mse = autoencoder.evaluate(X_test, X_test, verbose=<span class="number">0</span>)</span><br><span class="line">print(<span class="string">"Convolutional autoencoder MSE:"</span>, reconstruction_mse)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    img = X_test[i]</span><br><span class="line">    visualize(img,encoder,decoder)</span><br></pre></td></tr></table></figure>
<pre><code>Convolutional autoencoder MSE: 0.00544933940447
</code></pre><p><img src="output_26_1.png" alt="png"></p>
<p><img src="output_26_2.png" alt="png"></p>
<p><img src="output_26_3.png" alt="png"></p>
<p><img src="output_26_4.png" alt="png"></p>
<p><img src="output_26_5.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># save trained weights</span></span><br><span class="line">encoder.save_weights(<span class="string">"encoder.h5"</span>)</span><br><span class="line">decoder.save_weights(<span class="string">"decoder.h5"</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># restore trained weights</span></span><br><span class="line">s = reset_tf_session()</span><br><span class="line"></span><br><span class="line">encoder, decoder = build_deep_autoencoder(IMG_SHAPE, code_size=<span class="number">32</span>)</span><br><span class="line">encoder.load_weights(<span class="string">"encoder.h5"</span>)</span><br><span class="line">decoder.load_weights(<span class="string">"decoder.h5"</span>)</span><br><span class="line"></span><br><span class="line">inp = L.Input(IMG_SHAPE)</span><br><span class="line">code = encoder(inp)</span><br><span class="line">reconstruction = decoder(code)</span><br><span class="line"></span><br><span class="line">autoencoder = keras.models.Model(inputs=inp, outputs=reconstruction)</span><br><span class="line">autoencoder.compile(optimizer=<span class="string">"adamax"</span>, loss=<span class="string">'mse'</span>)</span><br><span class="line"></span><br><span class="line">print(autoencoder.evaluate(X_test, X_test, verbose=<span class="number">0</span>))</span><br><span class="line">print(reconstruction_mse)</span><br></pre></td></tr></table></figure>
<pre><code>0.00544933940447
0.00544933940447
</code></pre><h1 id="Submit-to-Coursera"><a href="#Submit-to-Coursera" class="headerlink" title="Submit to Coursera"></a>Submit to Coursera</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> submit <span class="keyword">import</span> submit_autoencoder</span><br><span class="line">submission = build_deep_autoencoder(IMG_SHAPE, code_size=<span class="number">71</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># token expires every 30 min</span></span><br><span class="line">COURSERA_TOKEN = <span class="string">"LWCR4D3YtVhRBo86"</span></span><br><span class="line">COURSERA_EMAIL = <span class="string">"lvduzhen@gmail.com"</span></span><br><span class="line"></span><br><span class="line">submit_autoencoder(submission, reconstruction_mse, COURSERA_EMAIL, COURSERA_TOKEN)</span><br></pre></td></tr></table></figure>
<pre><code>Submitted to Coursera platform. See results on assignment page!
</code></pre><h1 id="Optional-Denoising-Autoencoder"><a href="#Optional-Denoising-Autoencoder" class="headerlink" title="Optional: Denoising Autoencoder"></a>Optional: Denoising Autoencoder</h1><p>This part is <strong>optional</strong>, it shows you one useful application of autoencoders: denoising. You can run this code and make sure denoising works :) </p>
<p>Let’s now turn our model into a denoising autoencoder:<br><img src="images/denoising.jpg" style="width:40%"></p>
<p>We’ll keep the model architecture, but change the way it is trained. In particular, we’ll corrupt its input data randomly with noise before each epoch.</p>
<p>There are many strategies to introduce noise: adding gaussian white noise, occluding with random black rectangles, etc. We will add gaussian white noise.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apply_gaussian_noise</span><span class="params">(X,sigma=<span class="number">0.1</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    adds noise from standard normal distribution with standard deviation sigma</span></span><br><span class="line"><span class="string">    :param X: image tensor of shape [batch,height,width,3]</span></span><br><span class="line"><span class="string">    Returns X + noise.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    noise =  np.random.normal(loc=<span class="number">0</span>,scale=sigma,size=X.shape)</span><br><span class="line">    <span class="keyword">return</span> X + noise</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># noise tests</span></span><br><span class="line">theoretical_std = (X_train[:<span class="number">100</span>].std()**<span class="number">2</span> + <span class="number">0.5</span>**<span class="number">2</span>)**<span class="number">.5</span></span><br><span class="line">our_std = apply_gaussian_noise(X_train[:<span class="number">100</span>],sigma=<span class="number">0.5</span>).std()</span><br><span class="line"><span class="keyword">assert</span> abs(theoretical_std - our_std) &lt; <span class="number">0.01</span>, <span class="string">"Standard deviation does not match it's required value. Make sure you use sigma as std."</span></span><br><span class="line"><span class="keyword">assert</span> abs(apply_gaussian_noise(X_train[:<span class="number">100</span>],sigma=<span class="number">0.5</span>).mean() - X_train[:<span class="number">100</span>].mean()) &lt; <span class="number">0.01</span>, <span class="string">"Mean has changed. Please add zero-mean noise"</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test different noise scales</span></span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">4</span>,<span class="number">1</span>)</span><br><span class="line">show_image(X_train[<span class="number">0</span>])</span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>)</span><br><span class="line">show_image(apply_gaussian_noise(X_train[:<span class="number">1</span>],sigma=<span class="number">0.01</span>)[<span class="number">0</span>])</span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>)</span><br><span class="line">show_image(apply_gaussian_noise(X_train[:<span class="number">1</span>],sigma=<span class="number">0.1</span>)[<span class="number">0</span>])</span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>)</span><br><span class="line">show_image(apply_gaussian_noise(X_train[:<span class="number">1</span>],sigma=<span class="number">0.5</span>)[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>
<p><img src="output_34_0.png" alt="png"></p>
<p>Training will take <strong>1 hour</strong>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = reset_tf_session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># we use bigger code size here for better quality</span></span><br><span class="line">encoder, decoder = build_deep_autoencoder(IMG_SHAPE, code_size=<span class="number">512</span>)</span><br><span class="line"><span class="keyword">assert</span> encoder.output_shape[<span class="number">1</span>:]==(<span class="number">512</span>,), <span class="string">"encoder must output a code of required size"</span></span><br><span class="line"></span><br><span class="line">inp = L.Input(IMG_SHAPE)</span><br><span class="line">code = encoder(inp)</span><br><span class="line">reconstruction = decoder(code)</span><br><span class="line"></span><br><span class="line">autoencoder = keras.models.Model(inp, reconstruction)</span><br><span class="line">autoencoder.compile(<span class="string">'adamax'</span>, <span class="string">'mse'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">25</span>):</span><br><span class="line">    print(<span class="string">"Epoch %i/25, Generating corrupted samples..."</span>%(i+<span class="number">1</span>))</span><br><span class="line">    X_train_noise = apply_gaussian_noise(X_train)</span><br><span class="line">    X_test_noise = apply_gaussian_noise(X_test)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># we continue to train our model with new noise-augmented data</span></span><br><span class="line">    autoencoder.fit(x=X_train_noise, y=X_train, epochs=<span class="number">1</span>,</span><br><span class="line">                    validation_data=[X_test_noise, X_test],</span><br><span class="line">                    callbacks=[keras_utils.TqdmProgressCallback()],</span><br><span class="line">                    verbose=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X_test_noise = apply_gaussian_noise(X_test)</span><br><span class="line">denoising_mse = autoencoder.evaluate(X_test_noise, X_test, verbose=<span class="number">0</span>)</span><br><span class="line">print(<span class="string">"Denoising MSE:"</span>, denoising_mse)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    img = X_test_noise[i]</span><br><span class="line">    visualize(img,encoder,decoder)</span><br></pre></td></tr></table></figure>
<h1 id="Optional-Image-retrieval-with-autoencoders"><a href="#Optional-Image-retrieval-with-autoencoders" class="headerlink" title="Optional: Image retrieval with autoencoders"></a>Optional: Image retrieval with autoencoders</h1><p>So we’ve just trained a network that converts image into itself imperfectly. This task is not that useful in and of itself, but it has a number of awesome side-effects. Let’s see them in action.</p>
<p>First thing we can do is image retrieval aka image search. We will give it an image and find similar images in latent space:</p>
<p><img src="images/similar_images.jpg" style="width:60%"></p>
<p>To speed up retrieval process, one should use Locality Sensitive Hashing on top of encoded vectors. This <a href="https://erikbern.com/2015/07/04/benchmark-of-approximate-nearest-neighbor-libraries.html" target="_blank" rel="noopener">technique</a> can narrow down the potential nearest neighbours of our image in latent space (encoder code). We will caclulate nearest neighbours in brute force way for simplicity.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># restore trained encoder weights</span></span><br><span class="line">s = reset_tf_session()</span><br><span class="line">encoder, decoder = build_deep_autoencoder(IMG_SHAPE, code_size=<span class="number">32</span>)</span><br><span class="line">encoder.load_weights(<span class="string">"encoder.h5"</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">images = X_train</span><br><span class="line">codes = encoder.predict(images)</span><br><span class="line"><span class="keyword">assert</span> len(codes) == len(images)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.neighbors.unsupervised <span class="keyword">import</span> NearestNeighbors</span><br><span class="line">nei_clf = NearestNeighbors(metric=<span class="string">"euclidean"</span>)</span><br><span class="line">nei_clf.fit(codes)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_similar</span><span class="params">(image, n_neighbors=<span class="number">5</span>)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> image.ndim==<span class="number">3</span>,<span class="string">"image must be [batch,height,width,3]"</span></span><br><span class="line"></span><br><span class="line">    code = encoder.predict(image[<span class="keyword">None</span>])</span><br><span class="line">    </span><br><span class="line">    (distances,),(idx,) = nei_clf.kneighbors(code,n_neighbors=n_neighbors)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> distances,images[idx]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_similar</span><span class="params">(image)</span>:</span></span><br><span class="line">    </span><br><span class="line">    distances,neighbors = get_similar(image,n_neighbors=<span class="number">3</span>)</span><br><span class="line">    </span><br><span class="line">    plt.figure(figsize=[<span class="number">8</span>,<span class="number">7</span>])</span><br><span class="line">    plt.subplot(<span class="number">1</span>,<span class="number">4</span>,<span class="number">1</span>)</span><br><span class="line">    show_image(image)</span><br><span class="line">    plt.title(<span class="string">"Original image"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        plt.subplot(<span class="number">1</span>,<span class="number">4</span>,i+<span class="number">2</span>)</span><br><span class="line">        show_image(neighbors[i])</span><br><span class="line">        plt.title(<span class="string">"Dist=%.3f"</span>%distances[i])</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>
<p>Cherry-picked examples:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># smiles</span></span><br><span class="line">show_similar(X_test[<span class="number">247</span>])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ethnicity</span></span><br><span class="line">show_similar(X_test[<span class="number">56</span>])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># glasses</span></span><br><span class="line">show_similar(X_test[<span class="number">63</span>])</span><br></pre></td></tr></table></figure>
<h1 id="Optional-Cheap-image-morphing"><a href="#Optional-Cheap-image-morphing" class="headerlink" title="Optional: Cheap image morphing"></a>Optional: Cheap image morphing</h1><p>We can take linear combinations of image codes to produce new images with decoder.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># restore trained encoder weights</span></span><br><span class="line">s = reset_tf_session()</span><br><span class="line">encoder, decoder = build_deep_autoencoder(IMG_SHAPE, code_size=<span class="number">32</span>)</span><br><span class="line">encoder.load_weights(<span class="string">"encoder.h5"</span>)</span><br><span class="line">decoder.load_weights(<span class="string">"decoder.h5"</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    image1,image2 = X_test[np.random.randint(<span class="number">0</span>,len(X_test),size=<span class="number">2</span>)]</span><br><span class="line"></span><br><span class="line">    code1, code2 = encoder.predict(np.stack([image1, image2]))</span><br><span class="line"></span><br><span class="line">    plt.figure(figsize=[<span class="number">10</span>,<span class="number">4</span>])</span><br><span class="line">    <span class="keyword">for</span> i,a <span class="keyword">in</span> enumerate(np.linspace(<span class="number">0</span>,<span class="number">1</span>,num=<span class="number">7</span>)):</span><br><span class="line"></span><br><span class="line">        output_code = code1*(<span class="number">1</span>-a) + code2*(a)</span><br><span class="line">        output_image = decoder.predict(output_code[<span class="keyword">None</span>])[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        plt.subplot(<span class="number">1</span>,<span class="number">7</span>,i+<span class="number">1</span>)</span><br><span class="line">        show_image(output_image)</span><br><span class="line">        plt.title(<span class="string">"a=%.2f"</span>%a)</span><br><span class="line">        </span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>
<p>That’s it!</p>
<p>Of course there’s a lot more you can do with autoencoders.</p>
<p>If you want to generate images from scratch, however, we recommend you our honor track on Generative Adversarial Networks or GANs.</p>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Project</tag>
        <tag>Computer Vision</tag>
        <tag>Autoencoder</tag>
      </tags>
  </entry>
  <entry>
    <title>Image Captioning Project</title>
    <url>/Image-Captioning-Project/2019/07/11/</url>
    <content><![CDATA[<h1 id="Image-Captioning-Final-Project"><a href="#Image-Captioning-Final-Project" class="headerlink" title="Image Captioning Final Project"></a>Image Captioning Final Project</h1><p>In this final project you will define and train an image-to-caption model, that can produce descriptions for real world images!</p>
<p><img src="encoder_decoder.png" style="width:70%"></p>
<p>Model architecture: CNN encoder and RNN decoder.<br>(<a href="https://research.googleblog.com/2014/11/a-picture-is-worth-thousand-coherent.html" target="_blank" rel="noopener">https://research.googleblog.com/2014/11/a-picture-is-worth-thousand-coherent.html</a>)</p>
<h1 id="Import-stuff"><a href="#Import-stuff" class="headerlink" title="Import stuff"></a>Import stuff</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">".."</span>)</span><br><span class="line"><span class="keyword">import</span> grading</span><br><span class="line"><span class="keyword">import</span> download_utils</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">download_utils.link_all_keras_resources()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.contrib <span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">L = keras.layers</span><br><span class="line">K = keras.backend</span><br><span class="line"><span class="keyword">import</span> utils</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line"><span class="keyword">import</span> grading_utils</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> keras_utils <span class="keyword">import</span> reset_tf_session</span><br><span class="line"><span class="keyword">import</span> tqdm_utils</span><br></pre></td></tr></table></figure>
<pre><code>Using TensorFlow backend.
</code></pre><h1 id="Prepare-the-storage-for-model-checkpoints"><a href="#Prepare-the-storage-for-model-checkpoints" class="headerlink" title="Prepare the storage for model checkpoints"></a>Prepare the storage for model checkpoints</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Leave USE_GOOGLE_DRIVE = False if you're running locally!</span></span><br><span class="line"><span class="comment"># We recommend to set USE_GOOGLE_DRIVE = True in Google Colab!</span></span><br><span class="line"><span class="comment"># If set to True, we will mount Google Drive, so that you can restore your checkpoint </span></span><br><span class="line"><span class="comment"># and continue trainig even if your previous Colab session dies.</span></span><br><span class="line"><span class="comment"># If set to True, follow on-screen instructions to access Google Drive (you must have a Google account).</span></span><br><span class="line">USE_GOOGLE_DRIVE = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mount_google_drive</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">from</span> google.colab <span class="keyword">import</span> drive</span><br><span class="line">    mount_directory = <span class="string">"/content/gdrive"</span></span><br><span class="line">    drive.mount(mount_directory)</span><br><span class="line">    drive_root = mount_directory + <span class="string">"/"</span> + list(filter(<span class="keyword">lambda</span> x: x[<span class="number">0</span>] != <span class="string">'.'</span>, os.listdir(mount_directory)))[<span class="number">0</span>] + <span class="string">"/colab"</span></span><br><span class="line">    <span class="keyword">return</span> drive_root</span><br><span class="line"></span><br><span class="line">CHECKPOINT_ROOT = <span class="string">""</span></span><br><span class="line"><span class="keyword">if</span> USE_GOOGLE_DRIVE:</span><br><span class="line">    CHECKPOINT_ROOT = mount_google_drive() + <span class="string">"/"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_checkpoint_path</span><span class="params">(epoch=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> epoch <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> os.path.abspath(CHECKPOINT_ROOT + <span class="string">"weights"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> os.path.abspath(CHECKPOINT_ROOT + <span class="string">"weights_&#123;&#125;"</span>.format(epoch))</span><br><span class="line">      </span><br><span class="line"><span class="comment"># example of checkpoint dir</span></span><br><span class="line">print(get_checkpoint_path(<span class="number">10</span>))</span><br></pre></td></tr></table></figure>
<pre><code>/root/intro-to-dl/week6/weights_10
</code></pre><h1 id="Fill-in-your-Coursera-token-and-email"><a href="#Fill-in-your-Coursera-token-and-email" class="headerlink" title="Fill in your Coursera token and email"></a>Fill in your Coursera token and email</h1><p>To successfully submit your answers to our grader, please fill in your Coursera submission token and email</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">grader = grading.Grader(assignment_key=<span class="string">"NEDBg6CgEee8nQ6uE8a7OA"</span>, </span><br><span class="line">                        all_parts=[<span class="string">"19Wpv"</span>, <span class="string">"uJh73"</span>, <span class="string">"yiJkt"</span>, <span class="string">"rbpnH"</span>, <span class="string">"E2OIL"</span>, <span class="string">"YJR7z"</span>])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># token expires every 30 min</span></span><br><span class="line">COURSERA_TOKEN = <span class="string">""</span></span><br><span class="line">COURSERA_EMAIL = <span class="string">""</span></span><br></pre></td></tr></table></figure>
<h1 id="Download-data"><a href="#Download-data" class="headerlink" title="Download data"></a>Download data</h1><p>Takes 10 hours and 20 GB. We’ve downloaded necessary files for you.</p>
<p>Relevant links (just in case):</p>
<ul>
<li>train images <a href="http://msvocds.blob.core.windows.net/coco2014/train2014.zip" target="_blank" rel="noopener">http://msvocds.blob.core.windows.net/coco2014/train2014.zip</a></li>
<li>validation images <a href="http://msvocds.blob.core.windows.net/coco2014/val2014.zip" target="_blank" rel="noopener">http://msvocds.blob.core.windows.net/coco2014/val2014.zip</a></li>
<li>captions for both train and validation <a href="http://msvocds.blob.core.windows.net/annotations-1-0-3/captions_train-val2014.zip" target="_blank" rel="noopener">http://msvocds.blob.core.windows.net/annotations-1-0-3/captions_train-val2014.zip</a></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># we downloaded them for you, just link them here</span></span><br><span class="line">download_utils.link_week_6_resources()</span><br></pre></td></tr></table></figure>
<h1 id="Extract-image-features"><a href="#Extract-image-features" class="headerlink" title="Extract image features"></a>Extract image features</h1><p>We will use pre-trained InceptionV3 model for CNN encoder (<a href="https://research.googleblog.com/2016/03/train-your-own-image-classifier-with.html" target="_blank" rel="noopener">https://research.googleblog.com/2016/03/train-your-own-image-classifier-with.html</a>) and extract its last hidden layer as an embedding:</p>
<p><img src="inceptionv3.png" style="width:70%"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">IMG_SIZE = <span class="number">299</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># we take the last hidden layer of IncetionV3 as an image embedding</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cnn_encoder</span><span class="params">()</span>:</span></span><br><span class="line">    K.set_learning_phase(<span class="keyword">False</span>)</span><br><span class="line">    model = keras.applications.InceptionV3(include_top=<span class="keyword">False</span>)</span><br><span class="line">    preprocess_for_model = keras.applications.inception_v3.preprocess_input</span><br><span class="line"></span><br><span class="line">    model = keras.models.Model(model.inputs, keras.layers.GlobalAveragePooling2D()(model.output))</span><br><span class="line">    <span class="keyword">return</span> model, preprocess_for_model</span><br></pre></td></tr></table></figure>
<p>Features extraction takes too much time on CPU:</p>
<ul>
<li>Takes 16 minutes on GPU.</li>
<li>25x slower (InceptionV3) on CPU and takes 7 hours.</li>
<li>10x slower (MobileNet) on CPU and takes 3 hours.</li>
</ul>
<p>So we’ve done it for you with the following code:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># load pre-trained model</span></span><br><span class="line">reset_tf_session()</span><br><span class="line">encoder, preprocess_for_model = get_cnn_encoder()</span><br><span class="line"></span><br><span class="line"><span class="comment"># extract train features</span></span><br><span class="line">train_img_embeds, train_img_fns = utils.apply_model(</span><br><span class="line">    <span class="string">"train2014.zip"</span>, encoder, preprocess_for_model, input_shape=(IMG_SIZE, IMG_SIZE))</span><br><span class="line">utils.save_pickle(train_img_embeds, <span class="string">"train_img_embeds.pickle"</span>)</span><br><span class="line">utils.save_pickle(train_img_fns, <span class="string">"train_img_fns.pickle"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># extract validation features</span></span><br><span class="line">val_img_embeds, val_img_fns = utils.apply_model(</span><br><span class="line">    <span class="string">"val2014.zip"</span>, encoder, preprocess_for_model, input_shape=(IMG_SIZE, IMG_SIZE))</span><br><span class="line">utils.save_pickle(val_img_embeds, <span class="string">"val_img_embeds.pickle"</span>)</span><br><span class="line">utils.save_pickle(val_img_fns, <span class="string">"val_img_fns.pickle"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># sample images for learners</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sample_zip</span><span class="params">(fn_in, fn_out, rate=<span class="number">0.01</span>, seed=<span class="number">42</span>)</span>:</span></span><br><span class="line">    np.random.seed(seed)</span><br><span class="line">    <span class="keyword">with</span> zipfile.ZipFile(fn_in) <span class="keyword">as</span> fin, zipfile.ZipFile(fn_out, <span class="string">"w"</span>) <span class="keyword">as</span> fout:</span><br><span class="line">        sampled = filter(<span class="keyword">lambda</span> _: np.random.rand() &lt; rate, fin.filelist)</span><br><span class="line">        <span class="keyword">for</span> zInfo <span class="keyword">in</span> sampled:</span><br><span class="line">            fout.writestr(zInfo, fin.read(zInfo))</span><br><span class="line">            </span><br><span class="line">sample_zip(<span class="string">"train2014.zip"</span>, <span class="string">"train2014_sample.zip"</span>)</span><br><span class="line">sample_zip(<span class="string">"val2014.zip"</span>, <span class="string">"val2014_sample.zip"</span>)</span><br></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># load prepared embeddings</span></span><br><span class="line">train_img_embeds = utils.read_pickle(<span class="string">"train_img_embeds.pickle"</span>)</span><br><span class="line">train_img_fns = utils.read_pickle(<span class="string">"train_img_fns.pickle"</span>)</span><br><span class="line">val_img_embeds = utils.read_pickle(<span class="string">"val_img_embeds.pickle"</span>)</span><br><span class="line">val_img_fns = utils.read_pickle(<span class="string">"val_img_fns.pickle"</span>)</span><br><span class="line"><span class="comment"># check shapes</span></span><br><span class="line">print(train_img_embeds.shape, len(train_img_fns))</span><br><span class="line">print(val_img_embeds.shape, len(val_img_fns))</span><br></pre></td></tr></table></figure>
<pre><code>(82783, 2048) 82783
(40504, 2048) 40504
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># check prepared samples of images</span></span><br><span class="line">list(filter(<span class="keyword">lambda</span> x: x.endswith(<span class="string">"_sample.zip"</span>), os.listdir(<span class="string">"."</span>)))</span><br></pre></td></tr></table></figure>
<pre><code>[&#39;val2014_sample.zip&#39;, &#39;train2014_sample.zip&#39;]
</code></pre><h1 id="Extract-captions-for-images"><a href="#Extract-captions-for-images" class="headerlink" title="Extract captions for images"></a>Extract captions for images</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># extract captions from zip</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_captions_for_fns</span><span class="params">(fns, zip_fn, zip_json_path)</span>:</span></span><br><span class="line">    zf = zipfile.ZipFile(zip_fn)</span><br><span class="line">    j = json.loads(zf.read(zip_json_path).decode(<span class="string">"utf8"</span>))</span><br><span class="line">    id_to_fn = &#123;img[<span class="string">"id"</span>]: img[<span class="string">"file_name"</span>] <span class="keyword">for</span> img <span class="keyword">in</span> j[<span class="string">"images"</span>]&#125;</span><br><span class="line">    fn_to_caps = defaultdict(list)</span><br><span class="line">    <span class="keyword">for</span> cap <span class="keyword">in</span> j[<span class="string">'annotations'</span>]:</span><br><span class="line">        fn_to_caps[id_to_fn[cap[<span class="string">'image_id'</span>]]].append(cap[<span class="string">'caption'</span>])</span><br><span class="line">    fn_to_caps = dict(fn_to_caps)</span><br><span class="line">    <span class="keyword">return</span> list(map(<span class="keyword">lambda</span> x: fn_to_caps[x], fns))</span><br><span class="line">    </span><br><span class="line">train_captions = get_captions_for_fns(train_img_fns, <span class="string">"captions_train-val2014.zip"</span>, </span><br><span class="line">                                      <span class="string">"annotations/captions_train2014.json"</span>)</span><br><span class="line"></span><br><span class="line">val_captions = get_captions_for_fns(val_img_fns, <span class="string">"captions_train-val2014.zip"</span>, </span><br><span class="line">                                      <span class="string">"annotations/captions_val2014.json"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># check shape</span></span><br><span class="line">print(len(train_img_fns), len(train_captions))</span><br><span class="line">print(len(val_img_fns), len(val_captions))</span><br></pre></td></tr></table></figure>
<pre><code>82783 82783
40504 40504
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># look at training example (each has 5 captions)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_trainig_example</span><span class="params">(train_img_fns, train_captions, example_idx=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    You can change example_idx and see different images</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    zf = zipfile.ZipFile(<span class="string">"train2014_sample.zip"</span>)</span><br><span class="line">    captions_by_file = dict(zip(train_img_fns, train_captions))</span><br><span class="line">    all_files = set(train_img_fns)</span><br><span class="line">    found_files = list(filter(<span class="keyword">lambda</span> x: x.filename.rsplit(<span class="string">"/"</span>)[<span class="number">-1</span>] <span class="keyword">in</span> all_files, zf.filelist))</span><br><span class="line">    example = found_files[example_idx]</span><br><span class="line">    img = utils.decode_image_from_buf(zf.read(example))</span><br><span class="line">    plt.imshow(utils.image_center_crop(img))</span><br><span class="line">    plt.title(<span class="string">"\n"</span>.join(captions_by_file[example.filename.rsplit(<span class="string">"/"</span>)[<span class="number">-1</span>]]))</span><br><span class="line">    plt.show()</span><br><span class="line">    </span><br><span class="line">show_trainig_example(train_img_fns, train_captions, example_idx=<span class="number">142</span>)</span><br></pre></td></tr></table></figure>
<p><img src="output_20_0.png" alt="png"></p>
<h1 id="Prepare-captions-for-training"><a href="#Prepare-captions-for-training" class="headerlink" title="Prepare captions for training"></a>Prepare captions for training</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># preview captions data</span></span><br><span class="line">train_captions[:<span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<pre><code>[[&#39;A long dirt road going through a forest.&#39;,
  &#39;A SCENE OF WATER AND A PATH WAY&#39;,
  &#39;A sandy path surrounded by trees leads to a beach.&#39;,
  &#39;Ocean view through a dirt road surrounded by a forested area. &#39;,
  &#39;dirt path leading beneath barren trees to open plains&#39;],
 [&#39;A group of zebra standing next to each other.&#39;,
  &#39;This is an image of of zebras drinking&#39;,
  &#39;ZEBRAS AND BIRDS SHARING THE SAME WATERING HOLE&#39;,
  &#39;Zebras that are bent over and drinking water together.&#39;,
  &#39;a number of zebras drinking water near one another&#39;]]
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># special tokens</span></span><br><span class="line">PAD = <span class="string">"#PAD#"</span></span><br><span class="line">UNK = <span class="string">"#UNK#"</span></span><br><span class="line">START = <span class="string">"#START#"</span></span><br><span class="line">END = <span class="string">"#END#"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># split sentence into tokens (split into lowercased words)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split_sentence</span><span class="params">(sentence)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> list(filter(<span class="keyword">lambda</span> x: len(x) &gt; <span class="number">0</span>, re.split(<span class="string">'\W+'</span>, sentence.lower())))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_vocabulary</span><span class="params">(train_captions)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Return &#123;token: index&#125; for all train tokens (words) that occur 5 times or more, </span></span><br><span class="line"><span class="string">        `index` should be from 0 to N, where N is a number of unique tokens in the resulting dictionary.</span></span><br><span class="line"><span class="string">    Use `split_sentence` function to split sentence into tokens.</span></span><br><span class="line"><span class="string">    Also, add PAD (for batch padding), UNK (unknown, out of vocabulary), </span></span><br><span class="line"><span class="string">        START (start of sentence) and END (end of sentence) tokens into the vocabulary.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    counter = Counter()</span><br><span class="line">    <span class="keyword">for</span> captions <span class="keyword">in</span> train_captions:</span><br><span class="line">        <span class="keyword">for</span> sentence <span class="keyword">in</span> captions:</span><br><span class="line">            counter.update(split_sentence(sentence))</span><br><span class="line">    vocab = &#123;item <span class="keyword">for</span> item,count <span class="keyword">in</span> counter.items() <span class="keyword">if</span> count &gt;= <span class="number">5</span>&#125;</span><br><span class="line">    vocab = vocab.union(&#123;PAD,UNK,START,END&#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123;token: index <span class="keyword">for</span> index, token <span class="keyword">in</span> enumerate(sorted(vocab))&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">caption_tokens_to_indices</span><span class="params">(captions, vocab)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    `captions` argument is an array of arrays:</span></span><br><span class="line"><span class="string">    [</span></span><br><span class="line"><span class="string">        [</span></span><br><span class="line"><span class="string">            "image1 caption1",</span></span><br><span class="line"><span class="string">            "image1 caption2",</span></span><br><span class="line"><span class="string">            ...</span></span><br><span class="line"><span class="string">        ],</span></span><br><span class="line"><span class="string">        [</span></span><br><span class="line"><span class="string">            "image2 caption1",</span></span><br><span class="line"><span class="string">            "image2 caption2",</span></span><br><span class="line"><span class="string">            ...</span></span><br><span class="line"><span class="string">        ],</span></span><br><span class="line"><span class="string">        ...</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">    Use `split_sentence` function to split sentence into tokens.</span></span><br><span class="line"><span class="string">    Replace all tokens with vocabulary indices, use UNK for unknown words (out of vocabulary).</span></span><br><span class="line"><span class="string">    Add START and END tokens to start and end of each sentence respectively.</span></span><br><span class="line"><span class="string">    For the example above you should produce the following:</span></span><br><span class="line"><span class="string">    [</span></span><br><span class="line"><span class="string">        [</span></span><br><span class="line"><span class="string">            [vocab[START], vocab["image1"], vocab["caption1"], vocab[END]],</span></span><br><span class="line"><span class="string">            [vocab[START], vocab["image1"], vocab["caption2"], vocab[END]],</span></span><br><span class="line"><span class="string">            ...</span></span><br><span class="line"><span class="string">        ],</span></span><br><span class="line"><span class="string">        ...</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    res = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> img_captions <span class="keyword">in</span> captions:</span><br><span class="line">        img_indx_cations = []</span><br><span class="line">        <span class="keyword">for</span> sentence <span class="keyword">in</span> img_captions:</span><br><span class="line">            indx_sentence = [vocab[START]] + [vocab.get(token,vocab[UNK]) <span class="keyword">for</span> token <span class="keyword">in</span> split_sentence(sentence)] + [vocab[END]]</span><br><span class="line">            img_indx_cations.append(indx_sentence)</span><br><span class="line">        res.append(img_indx_cations)</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># prepare vocabulary</span></span><br><span class="line"></span><br><span class="line">vocab = generate_vocabulary(train_captions)</span><br><span class="line">vocab_inverse = &#123;idx: w <span class="keyword">for</span> w, idx <span class="keyword">in</span> vocab.items()&#125;</span><br><span class="line">print(len(vocab))</span><br></pre></td></tr></table></figure>
<pre><code>8769
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># replace tokens with indices</span></span><br><span class="line">train_captions_indexed = caption_tokens_to_indices(train_captions, vocab)</span><br><span class="line">val_captions_indexed = caption_tokens_to_indices(val_captions, vocab)</span><br></pre></td></tr></table></figure>
<p>Captions have different length, but we need to batch them, that’s why we will add PAD tokens so that all sentences have an equal length. </p>
<p>We will crunch LSTM through all the tokens, but we will ignore padding tokens during loss calculation.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># we will use this during training</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">batch_captions_to_matrix</span><span class="params">(batch_captions, pad_idx, max_len=None)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    `batch_captions` is an array of arrays:</span></span><br><span class="line"><span class="string">    [</span></span><br><span class="line"><span class="string">        [vocab[START], ..., vocab[END]],</span></span><br><span class="line"><span class="string">        [vocab[START], ..., vocab[END]],</span></span><br><span class="line"><span class="string">        ...</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">    Put vocabulary indexed captions into np.array of shape (len(batch_captions), columns),</span></span><br><span class="line"><span class="string">        where "columns" is max(map(len, batch_captions)) when max_len is None</span></span><br><span class="line"><span class="string">        and "columns" = min(max_len, max(map(len, batch_captions))) otherwise.</span></span><br><span class="line"><span class="string">    Add padding with pad_idx where necessary.</span></span><br><span class="line"><span class="string">    Input example: [[1, 2, 3], [4, 5]]</span></span><br><span class="line"><span class="string">    Output example: np.array([[1, 2, 3], [4, 5, pad_idx]]) if max_len=None</span></span><br><span class="line"><span class="string">    Output example: np.array([[1, 2], [4, 5]]) if max_len=2</span></span><br><span class="line"><span class="string">    Output example: np.array([[1, 2, 3], [4, 5, pad_idx]]) if max_len=100</span></span><br><span class="line"><span class="string">    Try to use numpy, we need this function to be fast!</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    cap_max = max(map(len,batch_captions))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> max_len:</span><br><span class="line">        max_len = cap_max</span><br><span class="line">    <span class="keyword">elif</span> max_len &lt; cap_max:</span><br><span class="line">        max_len = max_len</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        max_len = cap_max</span><br><span class="line">    </span><br><span class="line">    matrix = np.empty([len(batch_captions),max_len])</span><br><span class="line">    matrix.fill(pad_idx)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> index,line <span class="keyword">in</span> enumerate(batch_captions):</span><br><span class="line">        matrix[index,:len(line)] = line[<span class="number">0</span>:max_len]</span><br><span class="line">        matrix[index,len(line):] = pad_idx</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> matrix</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## GRADED PART, DO NOT CHANGE!</span></span><br><span class="line"><span class="comment"># Vocabulary creation</span></span><br><span class="line">grader.set_answer(<span class="string">"19Wpv"</span>, grading_utils.test_vocab(vocab, PAD, UNK, START, END))</span><br><span class="line"><span class="comment"># Captions indexing</span></span><br><span class="line">grader.set_answer(<span class="string">"uJh73"</span>, grading_utils.test_captions_indexing(train_captions_indexed, vocab, UNK))</span><br><span class="line"><span class="comment"># Captions batching</span></span><br><span class="line">grader.set_answer(<span class="string">"yiJkt"</span>, grading_utils.test_captions_batching(batch_captions_to_matrix))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># you can make submission with answers so far to check yourself at this stage</span></span><br><span class="line">grader.submit(COURSERA_EMAIL, COURSERA_TOKEN)</span><br></pre></td></tr></table></figure>
<pre><code>Submitted to Coursera platform. See results on assignment page!
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># make sure you use correct argument in caption_tokens_to_indices</span></span><br><span class="line"><span class="keyword">assert</span> len(caption_tokens_to_indices(train_captions[:<span class="number">10</span>], vocab)) == <span class="number">10</span></span><br><span class="line"><span class="keyword">assert</span> len(caption_tokens_to_indices(train_captions[:<span class="number">5</span>], vocab)) == <span class="number">5</span></span><br></pre></td></tr></table></figure>
<h1 id="Training"><a href="#Training" class="headerlink" title="Training"></a>Training</h1><h2 id="Define-architecture"><a href="#Define-architecture" class="headerlink" title="Define architecture"></a>Define architecture</h2><p>Since our problem is to generate image captions, RNN text generator should be conditioned on image. The idea is to use image features as an initial state for RNN instead of zeros. </p>
<p>Remember that you should transform image feature vector to RNN hidden state size by fully-connected layer and then pass it to RNN.</p>
<p>During training we will feed ground truth tokens into the lstm to get predictions of next tokens. </p>
<p>Notice that we don’t need to feed last token (END) as input (<a href="http://cs.stanford.edu/people/karpathy/" target="_blank" rel="noopener">http://cs.stanford.edu/people/karpathy/</a>):</p>
<p><img src="encoder_decoder_explained.png" style="width:50%"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">IMG_EMBED_SIZE = train_img_embeds.shape[<span class="number">1</span>]</span><br><span class="line">IMG_EMBED_BOTTLENECK = <span class="number">120</span></span><br><span class="line">WORD_EMBED_SIZE = <span class="number">100</span></span><br><span class="line">LSTM_UNITS = <span class="number">300</span></span><br><span class="line">LOGIT_BOTTLENECK = <span class="number">120</span></span><br><span class="line">pad_idx = vocab[PAD]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">IMG_EMBED_SIZE,pad_idx,LOGIT_BOTTLENECK</span><br></pre></td></tr></table></figure>
<pre><code>(2048, 1, 120)
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># remember to reset your graph if you want to start building it from scratch!</span></span><br><span class="line">s = reset_tf_session()</span><br><span class="line">tf.set_random_seed(<span class="number">42</span>)</span><br></pre></td></tr></table></figure>
<p>Here we define decoder graph.</p>
<p>We use Keras layers where possible because we can use them in functional style with weights reuse like this:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dense_layer = L.Dense(<span class="number">42</span>, input_shape=(<span class="keyword">None</span>, <span class="number">100</span>) activation=<span class="string">'relu'</span>)</span><br><span class="line">a = tf.placeholder(<span class="string">'float32'</span>, [<span class="keyword">None</span>, <span class="number">100</span>])</span><br><span class="line">b = tf.placeholder(<span class="string">'float32'</span>, [<span class="keyword">None</span>, <span class="number">100</span>])</span><br><span class="line">dense_layer(a)  <span class="comment"># that's how we applied dense layer!</span></span><br><span class="line">dense_layer(b)  <span class="comment"># and again</span></span><br></pre></td></tr></table></figure></p>
<p>Here’s a figure to help you with flattening in decoder:<br><img src="flatten_help.jpg" style="width:80%"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">decoder</span>:</span></span><br><span class="line">    <span class="comment"># [batch_size, IMG_EMBED_SIZE] of CNN image features</span></span><br><span class="line">    img_embeds = tf.placeholder(<span class="string">'float32'</span>, [<span class="keyword">None</span>, IMG_EMBED_SIZE])</span><br><span class="line">    <span class="comment"># [batch_size, time steps] of word ids</span></span><br><span class="line">    sentences = tf.placeholder(<span class="string">'int32'</span>, [<span class="keyword">None</span>, <span class="keyword">None</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># we use bottleneck here to reduce the number of parameters</span></span><br><span class="line">    <span class="comment"># image embedding -&gt; bottleneck</span></span><br><span class="line">    img_embed_to_bottleneck = L.Dense(IMG_EMBED_BOTTLENECK, </span><br><span class="line">                                      input_shape=(<span class="keyword">None</span>, IMG_EMBED_SIZE), </span><br><span class="line">                                      activation=<span class="string">'elu'</span>)</span><br><span class="line">    <span class="comment"># image embedding bottleneck -&gt; lstm initial state</span></span><br><span class="line">    img_embed_bottleneck_to_h0 = L.Dense(LSTM_UNITS,</span><br><span class="line">                                         input_shape=(<span class="keyword">None</span>, IMG_EMBED_BOTTLENECK),</span><br><span class="line">                                         activation=<span class="string">'elu'</span>)</span><br><span class="line">    <span class="comment"># word -&gt; embedding</span></span><br><span class="line">    word_embed = L.Embedding(len(vocab), WORD_EMBED_SIZE)</span><br><span class="line">    <span class="comment"># lstm cell (from tensorflow)</span></span><br><span class="line">    lstm = tf.nn.rnn_cell.LSTMCell(LSTM_UNITS)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># we use bottleneck here to reduce model complexity</span></span><br><span class="line">    <span class="comment"># lstm output -&gt; logits bottleneck</span></span><br><span class="line">    token_logits_bottleneck = L.Dense(LOGIT_BOTTLENECK, </span><br><span class="line">                                      input_shape=(<span class="keyword">None</span>, LSTM_UNITS),</span><br><span class="line">                                      activation=<span class="string">"elu"</span>)</span><br><span class="line">    <span class="comment"># logits bottleneck -&gt; logits for next token prediction</span></span><br><span class="line">    token_logits = L.Dense(len(vocab),</span><br><span class="line">                           input_shape=(<span class="keyword">None</span>, LOGIT_BOTTLENECK))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># initial lstm cell state of shape (None, LSTM_UNITS),</span></span><br><span class="line">    <span class="comment"># we need to condition it on `img_embeds` placeholder.</span></span><br><span class="line">    c0 = h0 = img_embed_bottleneck_to_h0(img_embed_to_bottleneck(img_embeds))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># embed all tokens but the last for lstm input,</span></span><br><span class="line">    <span class="comment"># remember that L.Embedding is callable,</span></span><br><span class="line">    <span class="comment"># use `sentences` placeholder as input.</span></span><br><span class="line">    word_embeds = word_embed(sentences[:,:<span class="number">-1</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># during training we use ground truth tokens `word_embeds` as context for next token prediction.</span></span><br><span class="line">    <span class="comment"># that means that we know all the inputs for our lstm and can get </span></span><br><span class="line">    <span class="comment"># all the hidden states with one tensorflow operation (tf.nn.dynamic_rnn).</span></span><br><span class="line">    <span class="comment"># `hidden_states` has a shape of [batch_size, time steps, LSTM_UNITS].</span></span><br><span class="line">    hidden_states, _ = tf.nn.dynamic_rnn(lstm, word_embeds,</span><br><span class="line">                                         initial_state=tf.nn.rnn_cell.LSTMStateTuple(c0, h0))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># now we need to calculate token logits for all the hidden states</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># first, we reshape `hidden_states` to [-1, LSTM_UNITS]</span></span><br><span class="line">    flat_hidden_states = tf.reshape(hidden_states, [<span class="number">-1</span>, LSTM_UNITS])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># then, we calculate logits for next tokens using `token_logits_bottleneck` and `token_logits` layers</span></span><br><span class="line">    flat_token_logits = token_logits(token_logits_bottleneck(flat_hidden_states))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># then, we flatten the ground truth token ids.</span></span><br><span class="line">    <span class="comment"># remember, that we predict next tokens for each time step,</span></span><br><span class="line">    <span class="comment"># use `sentences` placeholder.</span></span><br><span class="line">    flat_ground_truth = tf.reshape(sentences[:, <span class="number">1</span>:], [<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># we need to know where we have real tokens (not padding) in `flat_ground_truth`,</span></span><br><span class="line">    <span class="comment"># we don't want to propagate the loss for padded output tokens,</span></span><br><span class="line">    <span class="comment"># fill `flat_loss_mask` with 1.0 for real tokens (not pad_idx) and 0.0 otherwise.</span></span><br><span class="line">    flat_loss_mask = tf.not_equal(flat_ground_truth, pad_idx)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># compute cross-entropy between `flat_ground_truth` and `flat_token_logits` predicted by lstm</span></span><br><span class="line">    xent = tf.nn.sparse_softmax_cross_entropy_with_logits(</span><br><span class="line">        labels=flat_ground_truth, </span><br><span class="line">        logits=flat_token_logits</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># compute average `xent` over tokens with nonzero `flat_loss_mask`.</span></span><br><span class="line">    <span class="comment"># we don't want to account misclassification of PAD tokens, because that doesn't make sense,</span></span><br><span class="line">    <span class="comment"># we have PAD tokens for batching purposes only!</span></span><br><span class="line">    loss = tf.reduce_mean(tf.boolean_mask(xent, flat_loss_mask))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># define optimizer operation to minimize the loss</span></span><br><span class="line">optimizer = tf.train.AdamOptimizer(learning_rate=<span class="number">0.001</span>)</span><br><span class="line">train_step = optimizer.minimize(decoder.loss)</span><br><span class="line"></span><br><span class="line"><span class="comment"># will be used to save/load network weights.</span></span><br><span class="line"><span class="comment"># you need to reset your default graph and define it in the same way to be able to load the saved weights!</span></span><br><span class="line">saver = tf.train.Saver()</span><br><span class="line"></span><br><span class="line"><span class="comment"># intialize all variables</span></span><br><span class="line">s.run(tf.global_variables_initializer())</span><br></pre></td></tr></table></figure>
<pre><code>/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/gradients_impl.py:93: UserWarning: Converting sparse IndexedSlices to a dense Tensor of unknown shape. This may consume a large amount of memory.
  &quot;Converting sparse IndexedSlices to a dense Tensor of unknown shape. &quot;
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## GRADED PART, DO NOT CHANGE!</span></span><br><span class="line"><span class="comment"># Decoder shapes test</span></span><br><span class="line">grader.set_answer(<span class="string">"rbpnH"</span>, grading_utils.test_decoder_shapes(decoder, IMG_EMBED_SIZE, vocab, s))</span><br><span class="line"><span class="comment"># Decoder random loss test</span></span><br><span class="line">grader.set_answer(<span class="string">"E2OIL"</span>, grading_utils.test_random_decoder_loss(decoder, IMG_EMBED_SIZE, vocab, s))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># you can make submission with answers so far to check yourself at this stage</span></span><br><span class="line">grader.submit(COURSERA_EMAIL, COURSERA_TOKEN)</span><br></pre></td></tr></table></figure>
<pre><code>Submitted to Coursera platform. See results on assignment page!
</code></pre><h2 id="Training-loop"><a href="#Training-loop" class="headerlink" title="Training loop"></a>Training loop</h2><p>Evaluate train and validation metrics through training and log them. Ensure that loss decreases.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_captions_indexed = np.array(train_captions_indexed)</span><br><span class="line">val_captions_indexed = np.array(val_captions_indexed)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># generate batch via random sampling of images and captions for them,</span></span><br><span class="line"><span class="comment"># we use `max_len` parameter to control the length of the captions (truncating long captions)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_batch</span><span class="params">(images_embeddings, indexed_captions, batch_size, max_len=None)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    `images_embeddings` is a np.array of shape [number of images, IMG_EMBED_SIZE].</span></span><br><span class="line"><span class="string">    `indexed_captions` holds 5 vocabulary indexed captions for each image:</span></span><br><span class="line"><span class="string">    [</span></span><br><span class="line"><span class="string">        [</span></span><br><span class="line"><span class="string">            [vocab[START], vocab["image1"], vocab["caption1"], vocab[END]],</span></span><br><span class="line"><span class="string">            [vocab[START], vocab["image1"], vocab["caption2"], vocab[END]],</span></span><br><span class="line"><span class="string">            ...</span></span><br><span class="line"><span class="string">        ],</span></span><br><span class="line"><span class="string">        ...</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">    Generate a random batch of size `batch_size`.</span></span><br><span class="line"><span class="string">    Take random images and choose one random caption for each image.</span></span><br><span class="line"><span class="string">    Remember to use `batch_captions_to_matrix` for padding and respect `max_len` parameter.</span></span><br><span class="line"><span class="string">    Return feed dict &#123;decoder.img_embeds: ..., decoder.sentences: ...&#125;.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    indexs = [random.randint(<span class="number">0</span>,len(images_embeddings)<span class="number">-1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(batch_size)]</span><br><span class="line">    batch_image_embeddings = images_embeddings[indexs]</span><br><span class="line">    batch_captions = [caption[np.random.randint(<span class="number">5</span>)] <span class="keyword">for</span> caption <span class="keyword">in</span> indexed_captions[indexs]]</span><br><span class="line">    </span><br><span class="line">    batch_captions_matrix = batch_captions_to_matrix(batch_captions,pad_idx, max_len)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;decoder.img_embeds: batch_image_embeddings, </span><br><span class="line">            decoder.sentences: batch_captions_matrix&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">batch_size = <span class="number">64</span></span><br><span class="line">n_epochs = <span class="number">12</span></span><br><span class="line">n_batches_per_epoch = <span class="number">1000</span></span><br><span class="line">n_validation_batches = <span class="number">100</span>  <span class="comment"># how many batches are used for validation after each epoch</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># you can load trained weights here</span></span><br><span class="line"><span class="comment"># uncomment the next line if you need to load weights</span></span><br><span class="line"><span class="comment"># saver.restore(s, get_checkpoint_path(epoch=4))</span></span><br></pre></td></tr></table></figure>
<p>Look at the training and validation loss, they should be decreasing!</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_img_embeds.shape,train_captions_indexed.shape</span><br></pre></td></tr></table></figure>
<pre><code>((82783, 2048), (82783,))
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># actual training loop</span></span><br><span class="line">MAX_LEN = <span class="number">20</span>  <span class="comment"># truncate long captions to speed up training</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># to make training reproducible</span></span><br><span class="line">np.random.seed(<span class="number">42</span>)</span><br><span class="line">random.seed(<span class="number">42</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(n_epochs):</span><br><span class="line">    </span><br><span class="line">    train_loss = <span class="number">0</span></span><br><span class="line">    pbar = tqdm_utils.tqdm_notebook_failsafe(range(n_batches_per_epoch))</span><br><span class="line">    counter = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> pbar:</span><br><span class="line">        train_loss += s.run([decoder.loss, train_step], </span><br><span class="line">                            generate_batch(train_img_embeds, </span><br><span class="line">                                           train_captions_indexed, </span><br><span class="line">                                           batch_size, </span><br><span class="line">                                           MAX_LEN))[<span class="number">0</span>]</span><br><span class="line">        counter += <span class="number">1</span></span><br><span class="line">        pbar.set_description(<span class="string">"Training loss: %f"</span> % (train_loss / counter))</span><br><span class="line">        </span><br><span class="line">    train_loss /= n_batches_per_epoch</span><br><span class="line">    </span><br><span class="line">    val_loss = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(n_validation_batches):</span><br><span class="line">        val_loss += s.run(decoder.loss, generate_batch(val_img_embeds,</span><br><span class="line">                                                       val_captions_indexed, </span><br><span class="line">                                                       batch_size, </span><br><span class="line">                                                       MAX_LEN))</span><br><span class="line">    val_loss /= n_validation_batches</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">'Epoch: &#123;&#125;, train loss: &#123;&#125;, val loss: &#123;&#125;'</span>.format(epoch, train_loss, val_loss))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># save weights after finishing epoch</span></span><br><span class="line">    saver.save(s, get_checkpoint_path(epoch))</span><br><span class="line">    </span><br><span class="line">print(<span class="string">"Finished!"</span>)</span><br></pre></td></tr></table></figure>
<pre><code>HBox(children=(IntProgress(value=0, max=1000), HTML(value=&#39;&#39;)))




Epoch: 0, train loss: 3.0007614777088167, val loss: 2.9724034023284913



HBox(children=(IntProgress(value=0, max=1000), HTML(value=&#39;&#39;)))



Epoch: 1, train loss: 2.8531791372299193, val loss: 2.9006982970237734



HBox(children=(IntProgress(value=0, max=1000), HTML(value=&#39;&#39;)))



Epoch: 2, train loss: 2.7954050121307374, val loss: 2.8111998438835144



HBox(children=(IntProgress(value=0, max=1000), HTML(value=&#39;&#39;)))



Epoch: 3, train loss: 2.730731366157532, val loss: 2.750483591556549



HBox(children=(IntProgress(value=0, max=1000), HTML(value=&#39;&#39;)))



Epoch: 4, train loss: 2.6690069699287413, val loss: 2.749560286998749



HBox(children=(IntProgress(value=0, max=1000), HTML(value=&#39;&#39;)))



Epoch: 5, train loss: 2.633123325586319, val loss: 2.7148624300956725



HBox(children=(IntProgress(value=0, max=1000), HTML(value=&#39;&#39;)))



Epoch: 6, train loss: 2.5939396080970765, val loss: 2.6811715364456177



HBox(children=(IntProgress(value=0, max=1000), HTML(value=&#39;&#39;)))



Epoch: 7, train loss: 2.574599018335342, val loss: 2.6403690791130066



HBox(children=(IntProgress(value=0, max=1000), HTML(value=&#39;&#39;)))



Epoch: 8, train loss: 2.546513616323471, val loss: 2.627152864933014



HBox(children=(IntProgress(value=0, max=1000), HTML(value=&#39;&#39;)))



Epoch: 9, train loss: 2.5285718023777006, val loss: 2.6443107414245604



HBox(children=(IntProgress(value=0, max=1000), HTML(value=&#39;&#39;)))



Epoch: 10, train loss: 2.4949201991558074, val loss: 2.6084690499305725



HBox(children=(IntProgress(value=0, max=1000), HTML(value=&#39;&#39;)))



Epoch: 11, train loss: 2.478545124053955, val loss: 2.594680278301239
Finished!
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## GRADED PART, DO NOT CHANGE!</span></span><br><span class="line"><span class="comment"># Validation loss</span></span><br><span class="line">grader.set_answer(<span class="string">"YJR7z"</span>, grading_utils.test_validation_loss(</span><br><span class="line">    decoder, s, generate_batch, val_img_embeds, val_captions_indexed))</span><br></pre></td></tr></table></figure>
<pre><code>HBox(children=(IntProgress(value=0, max=1000), HTML(value=&#39;&#39;)))
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># you can make submission with answers so far to check yourself at this stage</span></span><br><span class="line">grader.submit(COURSERA_EMAIL, COURSERA_TOKEN)</span><br></pre></td></tr></table></figure>
<pre><code>Submitted to Coursera platform. See results on assignment page!
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># check that it's learnt something, outputs accuracy of next word prediction (should be around 0.5)</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score, log_loss</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode_sentence</span><span class="params">(sentence_indices)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">" "</span>.join(list(map(vocab_inverse.get, sentence_indices)))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_after_training</span><span class="params">(n_examples)</span>:</span></span><br><span class="line">    fd = generate_batch(train_img_embeds, train_captions_indexed, batch_size)</span><br><span class="line">    logits = decoder.flat_token_logits.eval(fd)</span><br><span class="line">    truth = decoder.flat_ground_truth.eval(fd)</span><br><span class="line">    mask = decoder.flat_loss_mask.eval(fd).astype(bool)</span><br><span class="line">    print(<span class="string">"Loss:"</span>, decoder.loss.eval(fd))</span><br><span class="line">    print(<span class="string">"Accuracy:"</span>, accuracy_score(logits.argmax(axis=<span class="number">1</span>)[mask], truth[mask]))</span><br><span class="line">    <span class="keyword">for</span> example_idx <span class="keyword">in</span> range(n_examples):</span><br><span class="line">        print(<span class="string">"Example"</span>, example_idx)</span><br><span class="line">        print(<span class="string">"Predicted:"</span>, decode_sentence(logits.argmax(axis=<span class="number">1</span>).reshape((batch_size, <span class="number">-1</span>))[example_idx]))</span><br><span class="line">        print(<span class="string">"Truth:"</span>, decode_sentence(truth.reshape((batch_size, <span class="number">-1</span>))[example_idx]))</span><br><span class="line">        print(<span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">check_after_training(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<pre><code>Loss: 2.37412
Accuracy: 0.501388888889
Example 0
Predicted: a person flying flying a kite in a building of people #END# #END# #END# #END# #END# #END# #END# #END# #END# #END#
Truth: a child is flying a kite near a group of buildings #END# #PAD# #PAD# #PAD# #PAD# #PAD# #PAD# #PAD# #PAD# #PAD#

Example 1
Predicted: a person of a doing a skateboard in down ramp of a ramp #END# #END# #END# #END# #END# #END# #END# #END#
Truth: a closeup of someone on a skateboard riding the edge of a ramp #END# #PAD# #PAD# #PAD# #PAD# #PAD# #PAD# #PAD#

Example 2
Predicted: a bed with a bed and a on furniture #END# a wall #END# #END# #END# #END# #END# #END# #END# #END# #END#
Truth: a bedroom with aqua walls and cutouts of rain on the wall #END# #PAD# #PAD# #PAD# #PAD# #PAD# #PAD# #PAD# #PAD#
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># save last graph weights to file!</span></span><br><span class="line">saver.save(s, get_checkpoint_path())</span><br></pre></td></tr></table></figure>
<pre><code>&#39;/root/intro-to-dl/week6/weights&#39;
</code></pre><h1 id="Applying-model"><a href="#Applying-model" class="headerlink" title="Applying model"></a>Applying model</h1><p>Here we construct a graph for our final model.</p>
<p>It will work as follows:</p>
<ul>
<li>take an image as an input and embed it</li>
<li>condition lstm on that embedding</li>
<li>predict the next token given a START input token</li>
<li>use predicted token as an input at next time step</li>
<li>iterate until you predict an END token</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">final_model</span>:</span></span><br><span class="line">    <span class="comment"># CNN encoder</span></span><br><span class="line">    encoder, preprocess_for_model = get_cnn_encoder()</span><br><span class="line">    saver.restore(s, get_checkpoint_path())  <span class="comment"># keras applications corrupt our graph, so we restore trained weights</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># containers for current lstm state</span></span><br><span class="line">    lstm_c = tf.Variable(tf.zeros([<span class="number">1</span>, LSTM_UNITS]), name=<span class="string">"cell"</span>)</span><br><span class="line">    lstm_h = tf.Variable(tf.zeros([<span class="number">1</span>, LSTM_UNITS]), name=<span class="string">"hidden"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># input images</span></span><br><span class="line">    input_images = tf.placeholder(<span class="string">'float32'</span>, [<span class="number">1</span>, IMG_SIZE, IMG_SIZE, <span class="number">3</span>], name=<span class="string">'images'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># get image embeddings</span></span><br><span class="line">    img_embeds = encoder(input_images)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># initialize lstm state conditioned on image</span></span><br><span class="line">    init_c = init_h = decoder.img_embed_bottleneck_to_h0(decoder.img_embed_to_bottleneck(img_embeds))</span><br><span class="line">    init_lstm = tf.assign(lstm_c, init_c), tf.assign(lstm_h, init_h)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># current word index</span></span><br><span class="line">    current_word = tf.placeholder(<span class="string">'int32'</span>, [<span class="number">1</span>], name=<span class="string">'current_input'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># embedding for current word</span></span><br><span class="line">    word_embed = decoder.word_embed(current_word)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># apply lstm cell, get new lstm states</span></span><br><span class="line">    new_c, new_h = decoder.lstm(word_embed, tf.nn.rnn_cell.LSTMStateTuple(lstm_c, lstm_h))[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># compute logits for next token</span></span><br><span class="line">    new_logits = decoder.token_logits(decoder.token_logits_bottleneck(new_h))</span><br><span class="line">    <span class="comment"># compute probabilities for next token</span></span><br><span class="line">    new_probs = tf.nn.softmax(new_logits)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># `one_step` outputs probabilities of next token and updates lstm hidden state</span></span><br><span class="line">    one_step = new_probs, tf.assign(lstm_c, new_c), tf.assign(lstm_h, new_h)</span><br></pre></td></tr></table></figure>
<pre><code>INFO:tensorflow:Restoring parameters from /root/intro-to-dl/week6/weights
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># look at how temperature works for probability distributions</span></span><br><span class="line"><span class="comment"># for high temperature we have more uniform distribution</span></span><br><span class="line">_ = np.array([<span class="number">0.5</span>, <span class="number">0.4</span>, <span class="number">0.1</span>])</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> [<span class="number">0.01</span>, <span class="number">0.1</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>]:</span><br><span class="line">    print(<span class="string">" "</span>.join(map(str, _**(<span class="number">1</span>/t) / np.sum(_**(<span class="number">1</span>/t)))), <span class="string">"with temperature"</span>, t)</span><br></pre></td></tr></table></figure>
<pre><code>0.999999999796 2.03703597592e-10 1.26765059997e-70 with temperature 0.01
0.903037043325 0.0969628642039 9.24709932365e-08 with temperature 0.1
0.5 0.4 0.1 with temperature 1
0.353447726392 0.345648113606 0.300904160002 with temperature 10
0.335367280481 0.334619764349 0.33001295517 with temperature 100
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># this is an actual prediction loop</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_caption</span><span class="params">(image, t=<span class="number">1</span>, sample=False, max_len=<span class="number">20</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Generate caption for given image.</span></span><br><span class="line"><span class="string">    if `sample` is True, we will sample next token from predicted probability distribution.</span></span><br><span class="line"><span class="string">    `t` is a temperature during that sampling,</span></span><br><span class="line"><span class="string">        higher `t` causes more uniform-like distribution = more chaos.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># condition lstm on the image</span></span><br><span class="line">    s.run(final_model.init_lstm, </span><br><span class="line">          &#123;final_model.input_images: [image]&#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># current caption</span></span><br><span class="line">    <span class="comment"># start with only START token</span></span><br><span class="line">    caption = [vocab[START]]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(max_len):</span><br><span class="line">        next_word_probs = s.run(final_model.one_step, </span><br><span class="line">                                &#123;final_model.current_word: [caption[<span class="number">-1</span>]]&#125;)[<span class="number">0</span>]</span><br><span class="line">        next_word_probs = next_word_probs.ravel()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># apply temperature</span></span><br><span class="line">        next_word_probs = next_word_probs**(<span class="number">1</span>/t) / np.sum(next_word_probs**(<span class="number">1</span>/t))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> sample:</span><br><span class="line">            next_word = np.random.choice(range(len(vocab)), p=next_word_probs)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            next_word = np.argmax(next_word_probs)</span><br><span class="line"></span><br><span class="line">        caption.append(next_word)</span><br><span class="line">        <span class="keyword">if</span> next_word == vocab[END]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">       </span><br><span class="line">    <span class="keyword">return</span> list(map(vocab_inverse.get, caption))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># look at validation prediction example</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apply_model_to_image_raw_bytes</span><span class="params">(raw)</span>:</span></span><br><span class="line">    img = utils.decode_image_from_buf(raw)</span><br><span class="line">    fig = plt.figure(figsize=(<span class="number">7</span>, <span class="number">7</span>))</span><br><span class="line">    plt.grid(<span class="string">'off'</span>)</span><br><span class="line">    plt.axis(<span class="string">'off'</span>)</span><br><span class="line">    plt.imshow(img)</span><br><span class="line">    img = utils.crop_and_preprocess(img, (IMG_SIZE, IMG_SIZE), final_model.preprocess_for_model)</span><br><span class="line">    print(<span class="string">' '</span>.join(generate_caption(img)[<span class="number">1</span>:<span class="number">-1</span>]))</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_valid_example</span><span class="params">(val_img_fns, example_idx=<span class="number">0</span>)</span>:</span></span><br><span class="line">    zf = zipfile.ZipFile(<span class="string">"val2014_sample.zip"</span>)</span><br><span class="line">    all_files = set(val_img_fns)</span><br><span class="line">    found_files = list(filter(<span class="keyword">lambda</span> x: x.filename.rsplit(<span class="string">"/"</span>)[<span class="number">-1</span>] <span class="keyword">in</span> all_files, zf.filelist))</span><br><span class="line">    example = found_files[example_idx]</span><br><span class="line">    apply_model_to_image_raw_bytes(zf.read(example))</span><br><span class="line">    </span><br><span class="line">show_valid_example(val_img_fns, example_idx=<span class="number">100</span>)</span><br></pre></td></tr></table></figure>
<pre><code>a baseball player is swinging his bat at a ball
</code></pre><p><img src="output_60_1.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sample more images from validation</span></span><br><span class="line"><span class="keyword">for</span> idx <span class="keyword">in</span> np.random.choice(range(len(zipfile.ZipFile(<span class="string">"val2014_sample.zip"</span>).filelist) - <span class="number">1</span>), <span class="number">10</span>):</span><br><span class="line">    show_valid_example(val_img_fns, example_idx=idx)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<pre><code>a bear is sitting on a rock in the water
</code></pre><p><img src="output_61_1.png" alt="png"></p>
<pre><code>a train is parked on the tracks near a fence
</code></pre><p><img src="output_61_3.png" alt="png"></p>
<pre><code>a group of people standing around a man in a room
</code></pre><p><img src="output_61_5.png" alt="png"></p>
<pre><code>a young boy in a red shirt and a white shirt and a white shirt and a white shirt
</code></pre><p><img src="output_61_7.png" alt="png"></p>
<pre><code>a city with many boats and a building
</code></pre><p><img src="output_61_9.png" alt="png"></p>
<pre><code>a baseball player is swinging at a ball
</code></pre><p><img src="output_61_11.png" alt="png"></p>
<pre><code>a baby elephant standing in a field with a tree in the background
</code></pre><p><img src="output_61_13.png" alt="png"></p>
<pre><code>a group of cars driving down a street
</code></pre><p><img src="output_61_15.png" alt="png"></p>
<pre><code>a bus is driving down the street with a bus
</code></pre><p><img src="output_61_17.png" alt="png"></p>
<pre><code>a woman sitting at a table with a laptop
</code></pre><p><img src="output_61_19.png" alt="png"></p>
<p>You can download any image from the Internet and appply your model to it!</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">download_utils.download_file(</span><br><span class="line">    <span class="string">"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1562794330534&amp;di=1e83ed1d91d6b45c6cc1faa4f144dce1&amp;imgtype=0&amp;src=http%3A%2F%2Fs6.sinaimg.cn%2Fmiddle%2F4c271807gabeaf405af25%26690"</span>,</span><br><span class="line">    <span class="string">"dora1.jpg"</span></span><br><span class="line">)</span><br><span class="line">apply_model_to_image_raw_bytes(open(<span class="string">"dora1.jpg"</span>, <span class="string">"rb"</span>).read())</span><br></pre></td></tr></table></figure>
<pre><code>HBox(children=(IntProgress(value=0, max=21799), HTML(value=&#39;&#39;)))



a man holding a cell phone in front of a store
</code></pre><p><img src="output_63_2.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">download_utils.download_file(</span><br><span class="line">    <span class="string">"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1562794426849&amp;di=fd0de4f3f602675fdbb2ae6b557a789a&amp;imgtype=jpg&amp;src=http%3A%2F%2Fwww.gaoxiaoa.cn%2Fuploads%2F2018%2F07%2F20%2Fy0rwjpcuuor2210.jpg"</span>,</span><br><span class="line">    <span class="string">"dora2.jpg"</span></span><br><span class="line">)</span><br><span class="line">apply_model_to_image_raw_bytes(open(<span class="string">"dora2.jpg"</span>, <span class="string">"rb"</span>).read())</span><br></pre></td></tr></table></figure>
<pre><code>HBox(children=(IntProgress(value=0, max=23592), HTML(value=&#39;&#39;)))



a man holding a pair of scissors in a store
</code></pre><p><img src="output_64_2.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">download_utils.download_file(</span><br><span class="line">    <span class="string">"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1562794563144&amp;di=2bc884423f1df82010cd5339f31950ed&amp;imgtype=0&amp;src=http%3A%2F%2Fi.gtimg.cn%2Fqqlive%2Fimg%2Fjpgcache%2Ffiles%2Fqqvideo%2Fhori%2F4%2F4h2fv8pu7lmkmp2.jpg"</span>,</span><br><span class="line">    <span class="string">"dora2.jpg"</span></span><br><span class="line">)</span><br><span class="line">apply_model_to_image_raw_bytes(open(<span class="string">"dora2.jpg"</span>, <span class="string">"rb"</span>).read())</span><br></pre></td></tr></table></figure>
<pre><code>HBox(children=(IntProgress(value=0, max=31865), HTML(value=&#39;&#39;)))



a person holding a kite in a parking lot
</code></pre><p><img src="output_65_2.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">download_utils.download_file(</span><br><span class="line">    <span class="string">"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1562794944314&amp;di=f8e405f3cef51839e36119df6bee30da&amp;imgtype=0&amp;src=http%3A%2F%2Fphotocdn.sohu.com%2F20160118%2Fmp55134365_1453120177203_10.jpeg"</span>,</span><br><span class="line">    <span class="string">"li.jpg"</span></span><br><span class="line">)</span><br><span class="line">apply_model_to_image_raw_bytes(open(<span class="string">"li.jpg"</span>, <span class="string">"rb"</span>).read())</span><br></pre></td></tr></table></figure>
<pre><code>HBox(children=(IntProgress(value=0, max=56360), HTML(value=&#39;&#39;)))



a man in a white shirt and a white shirt and a white shirt and a white shirt
</code></pre><p><img src="output_66_2.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">download_utils.download_file(</span><br><span class="line">    <span class="string">"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1562795102654&amp;di=6e991c1996a6cb8c3875c737270400ba&amp;imgtype=0&amp;src=http%3A%2F%2Fhnrb.hinews.cn%2Fresfile%2F2016-03-01%2F015%2F1860655_hnrbtp1_1456751616813_b.jpg"</span>,</span><br><span class="line">    <span class="string">"li2.jpg"</span></span><br><span class="line">)</span><br><span class="line">apply_model_to_image_raw_bytes(open(<span class="string">"li2.jpg"</span>, <span class="string">"rb"</span>).read())</span><br></pre></td></tr></table></figure>
<pre><code>HBox(children=(IntProgress(value=0, max=20262), HTML(value=&#39;&#39;)))



a man in a suit and tie standing in front of a microphone
</code></pre><p><img src="output_67_2.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">download_utils.download_file(</span><br><span class="line">    <span class="string">"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1562797334376&amp;di=74df4bee2022d1b0519a759e9e6ec12d&amp;imgtype=0&amp;src=http%3A%2F%2Fn.sinaimg.cn%2Fent%2Ftransform%2F20170703%2FYGH3-fyhskrq1913341.jpg"</span>,</span><br><span class="line">    <span class="string">"test.jpg"</span></span><br><span class="line">)</span><br><span class="line">apply_model_to_image_raw_bytes(open(<span class="string">"test.jpg"</span>, <span class="string">"rb"</span>).read())</span><br></pre></td></tr></table></figure>
<pre><code>HBox(children=(IntProgress(value=0, max=24164), HTML(value=&#39;&#39;)))



a man in a white shirt and tie standing next to a man
</code></pre><p><img src="output_68_2.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">download_utils.download_file(</span><br><span class="line">    <span class="string">"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1562797392119&amp;di=81c23cda7dbc08fa561a561dd806473e&amp;imgtype=0&amp;src=http%3A%2F%2Fwww.hinews.cn%2Fpic%2F0%2F16%2F62%2F10%2F16621075_026693.jpg"</span>,</span><br><span class="line">    <span class="string">"test2.jpg"</span></span><br><span class="line">)</span><br><span class="line">apply_model_to_image_raw_bytes(open(<span class="string">"test2.jpg"</span>, <span class="string">"rb"</span>).read())</span><br></pre></td></tr></table></figure>
<pre><code>HBox(children=(IntProgress(value=0, max=29384), HTML(value=&#39;&#39;)))



a giraffe is eating from a white plate
</code></pre><p><img src="output_69_2.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">download_utils.download_file(</span><br><span class="line">    <span class="string">"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1562797392118&amp;di=1848b6cb90b57b0fde208794abf22aa2&amp;imgtype=0&amp;src=http%3A%2F%2Fi0.sinaimg.cn%2Fdy%2Fcr%2F2014%2F0716%2F4150211456.jpg"</span>,</span><br><span class="line">    <span class="string">"test3.jpg"</span></span><br><span class="line">)</span><br><span class="line">apply_model_to_image_raw_bytes(open(<span class="string">"test3.jpg"</span>, <span class="string">"rb"</span>).read())</span><br></pre></td></tr></table></figure>
<pre><code>HBox(children=(IntProgress(value=0, max=97353), HTML(value=&#39;&#39;)))



a man is standing next to a statue of a statue
</code></pre><p><img src="output_70_2.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">download_utils.download_file(</span><br><span class="line">    <span class="string">"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1562797392116&amp;di=e68eb448b9247779f4624e10e9bf8b95&amp;imgtype=0&amp;src=http%3A%2F%2Fi0.hexunimg.cn%2F2016-08-22%2F185638157.jpg"</span>,</span><br><span class="line">    <span class="string">"test4.jpg"</span></span><br><span class="line">)</span><br><span class="line">apply_model_to_image_raw_bytes(open(<span class="string">"test4.jpg"</span>, <span class="string">"rb"</span>).read())</span><br></pre></td></tr></table></figure>
<pre><code>HBox(children=(IntProgress(value=0, max=18206), HTML(value=&#39;&#39;)))



a woman in a black jacket and a woman standing next to a woman
</code></pre><p><img src="output_71_2.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">download_utils.download_file(</span><br><span class="line">    <span class="string">"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1562797392116&amp;di=580a384f03823c0503be39144bfdd85b&amp;imgtype=0&amp;src=http%3A%2F%2Fn.sinaimg.cn%2Fent%2Ftransform%2F20161207%2FzAUH-fxyipxf7913222.jpg"</span>,</span><br><span class="line">    <span class="string">"test5.jpg"</span></span><br><span class="line">)</span><br><span class="line">apply_model_to_image_raw_bytes(open(<span class="string">"test5.jpg"</span>, <span class="string">"rb"</span>).read())</span><br></pre></td></tr></table></figure>
<pre><code>HBox(children=(IntProgress(value=0, max=40295), HTML(value=&#39;&#39;)))



a man and woman standing in a field with a kite
</code></pre><p><img src="output_72_2.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">download_utils.download_file(</span><br><span class="line">    <span class="string">"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1562797392116&amp;di=665cab330fb52ec6883f1398ec2c167c&amp;imgtype=0&amp;src=http%3A%2F%2Fgb.cri.cn%2Fmmsource%2Fimages%2F2015%2F05%2F25%2Fex20150525008.jpg"</span>,</span><br><span class="line">    <span class="string">"test6.jpg"</span></span><br><span class="line">)</span><br><span class="line">apply_model_to_image_raw_bytes(open(<span class="string">"test6.jpg"</span>, <span class="string">"rb"</span>).read())</span><br></pre></td></tr></table></figure>
<pre><code>HBox(children=(IntProgress(value=0, max=33113), HTML(value=&#39;&#39;)))



a man in a suit and tie standing in front of a building
</code></pre><p><img src="output_73_2.png" alt="png"></p>
<p>Now it’s time to find 10 examples where your model works good and 10 examples where it fails! </p>
<p>You can use images from validation set as follows:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">show_valid_example(val_img_fns, example_idx=...)</span><br></pre></td></tr></table></figure></p>
<p>You can use images from the Internet as follows:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">! wget ...</span><br><span class="line">apply_model_to_image_raw_bytes(open(<span class="string">"..."</span>, <span class="string">"rb"</span>).read())</span><br></pre></td></tr></table></figure></p>
<p>If you use these functions, the output will be embedded into your notebook and will be visible during peer review!</p>
<p>When you’re done, download your noteboook using “File” -&gt; “Download as” -&gt; “Notebook” and prepare that file for peer review!</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### YOUR EXAMPLES HERE ###</span></span><br></pre></td></tr></table></figure>
<p>That’s it! </p>
<p>Congratulations, you’ve trained your image captioning model and now can produce captions for any picture from the  Internet!</p>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Project</tag>
        <tag>Computer Vision</tag>
        <tag>NLP</tag>
        <tag>Transfer Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Command Cheatsheet</title>
    <url>/Docker-Command-Cheatsheet/2019/07/11/</url>
    <content><![CDATA[<ul>
<li><p>Docker download and upload files</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker cp &lt;containerID&gt;:path localpath</span><br></pre></td></tr></table></figure>
</li>
<li><p>RM image</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images</span><br><span class="line">docker rmi &lt;REPOSITORY&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>RM container</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br><span class="line">docker rm &lt;REPOSITORY&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Run a container of an image with port mapping</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it -p 127.0.0.1:&lt;Port1&gt;:&lt;Port1&gt; -p 127.0.0.1:&lt;Port2&gt;:&lt;Port2&gt; --name &lt;name&gt; &lt;REPOSITORY&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Start or stop a container</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker start -a &lt;NAMES&gt;</span><br><span class="line">docker stop &lt;NAMES&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Commit a runnning container to a image</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br><span class="line">docker commit &lt;ContainerID&gt; &lt;ImageName&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Enter into docker container</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it &lt;ContainerID&gt; /bin/bash</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>Big Data Architecture</category>
        <category>Microservices</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Activation Function</title>
    <url>/Activation-Function/2019/07/09/</url>
    <content><![CDATA[<h2 id="Neuron"><a href="#Neuron" class="headerlink" title="Neuron"></a>Neuron</h2><p><img src="1.png" alt><br>如图是神经网络中一个典型的神经元设计，它完全仿照人类大脑中神经元之间传递数据的模式设计。大脑中，神经元通过若干树突（dendrite）的突触（synapse），接受其他神经元的轴突（axon）或树突传递来的消息，而后经过处理再由轴突输出。</p>
<h2 id="参数更新方向"><a href="#参数更新方向" class="headerlink" title="参数更新方向"></a>参数更新方向</h2><p>深度学习一般的学习方法是反向传播。简单来说，就是通过链式法则，求解全局损失函数L(x)对于某一参数w的偏导数（梯度）；而后辅以学习率\eta,向梯度的反方向更新参数w</p>
<script type="math/tex; mode=display">w \leftarrow w - \eta\cdot\frac{\partial L}{\partial w}</script><p>考虑学习率$\eta$是全局设置的超参数，参数更新的核心步骤即是计算$\frac{\partial L}{\partial w}$ 再考虑到对于某个神经元来说，其输入与输出的关系是</p>
<script type="math/tex; mode=display">f(x;w,b) = f(\sum_{i}w_i x_i + b)</script><p>根据链式法则，对于参数w_i来说</p>
<script type="math/tex; mode=display">\frac{\partial L}{\partial w_i} = \frac{\partial L}{\partial f}\frac{\partial f}{\partial w_i} = x_i\cdot\frac{\partial L}{\partial f}</script><p>因此，参数的更新步骤变为</p>
<script type="math/tex; mode=display">w \leftarrow w - \eta x_i\cdot\frac{\partial L}{\partial f}</script><p>由于$w_i$是上一轮迭代的结果，此处可视为常数，而$\eta$是模型超参数，参数$w_i$的更新方向实际上由$x_i\cdot\frac{\partial L}{\partial f}$决定。又考虑到 $\frac{\partial L}{\partial f}$对于所有的$w_i$来说是常数，因此各个$w_i$更新方向之间的差异，完全由对应的输入值$x_i$ 的符号决定。</p>
<h2 id="以零为中心的影响"><a href="#以零为中心的影响" class="headerlink" title="以零为中心的影响"></a>以零为中心的影响</h2><p>至此，为了描述方便，我们以二维的情况为例。亦即，神经元描述为</p>
<script type="math/tex; mode=display">f(x;w_1,w_2,b) = f(w_0x_0 + w_1x_1 + b)</script><p>假设对于参数 $w_0$,$w_1$的最优解$w_0^{\prime}$,$w_1^{\prime}$</p>
<script type="math/tex; mode=display">
\begin{equation}
\left\{ 
\begin{array}{lr}

& w_0 < w_0^{\prime} \\
& w_1 > w_1^{\prime}

\end{array}
\right.
\end{equation}</script><p>我们希望$w_0$适当增大，$w_1$适当减少，这里必然要求$x_0$ 和 $x_1$ 符号相反。<br>但在 Sigmoid 函数中，输出值恒为正。这也就是说，如果上一级神经元采用 Sigmoid 函数作为激活函数，<strong>那么我们无法做到$x_0$和$x_1$符号相反</strong>。此时，模型为了收敛，不得不向逆风前行的风助力帆船一样，走 Z 字形逼近最优解。</p>
<p><img src="3.png" alt></p>
<h2 id="Sigmid"><a href="#Sigmid" class="headerlink" title="Sigmid"></a>Sigmid</h2><h3 id="函数形式"><a href="#函数形式" class="headerlink" title="函数形式"></a>函数形式</h3><script type="math/tex; mode=display">\sigma(x;a) = \frac{1}{1+e^{-ax}}</script><h3 id="导数"><a href="#导数" class="headerlink" title="导数"></a>导数</h3><script type="math/tex; mode=display">\sigma^{\prime} = \sigma(x)(1-\sigma(x))</script><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><ul>
<li>Sigmoid neurons can saturate and lead to vanishing gradients.</li>
<li>Not zero-centered.</li>
<li>$e^{x}$is computationally expensive.</li>
</ul>
<h2 id="Tanh"><a href="#Tanh" class="headerlink" title="Tanh"></a>Tanh</h2><h3 id="函数形式-1"><a href="#函数形式-1" class="headerlink" title="函数形式"></a>函数形式</h3><script type="math/tex; mode=display">tanh(x) = 2\sigma(2x) - 1 = \frac{e^x - e^{-x}}{e^x + e^{-x}}</script><h3 id="导数-1"><a href="#导数-1" class="headerlink" title="导数"></a>导数</h3><script type="math/tex; mode=display">\tanh^{\prime} = 1-\tanh^{2}(x)</script><h3 id="性质-1"><a href="#性质-1" class="headerlink" title="性质"></a>性质</h3><ul>
<li>Zero-centered.</li>
<li>$e^{x}$is computationally expensive.</li>
<li>tanh can saturate and lead to vanishing gradients.</li>
</ul>
<h2 id="Relu"><a href="#Relu" class="headerlink" title="Relu"></a>Relu</h2><h3 id="函数形式-2"><a href="#函数形式-2" class="headerlink" title="函数形式"></a>函数形式</h3><script type="math/tex; mode=display">f(x) = max(0,x)</script><h3 id="性质-2"><a href="#性质-2" class="headerlink" title="性质"></a>性质</h3><ul>
<li>Fast to compute.</li>
<li>Gradients do not vanish for 𝑥 &gt; 0.</li>
<li>Provides faster convergence in practice!</li>
<li>Not zero-centered.</li>
<li>Can die: if not activated, never updates!</li>
</ul>
<h2 id="Relu-1"><a href="#Relu-1" class="headerlink" title="Relu"></a>Relu</h2><h3 id="函数形式-3"><a href="#函数形式-3" class="headerlink" title="函数形式"></a>函数形式</h3><script type="math/tex; mode=display">f(x) = max(ax,x)</script><h3 id="性质-3"><a href="#性质-3" class="headerlink" title="性质"></a>性质</h3><ul>
<li>Will not die</li>
<li>a != 1</li>
<li>zero-centered</li>
</ul>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Deep Learning</category>
      </categories>
  </entry>
  <entry>
    <title>Why is the negative gradient direction the fastest direction the function value descend</title>
    <url>/Why-is-the-negative-gradient-direction-the-fastest-direction-the-function-value-descend/2019/07/09/</url>
    <content><![CDATA[<h2 id="泰勒公式"><a href="#泰勒公式" class="headerlink" title="泰勒公式"></a>泰勒公式</h2><p>定理：<br>设 n 是一个正整数。如果定义在一个包含 a 的区间上的函数 f 在 a 点处 n+1 次可导，那么对于这个区间上的任意 x，都有:</p>
<script type="math/tex; mode=display">f(x) = f(a) + \frac{f^{\prime}(a)}{1!}(x-a) + \frac{f^{(2)}(a)}{2!}(x-a)^{2} + \cdots + \frac{f^{(n)}(a)}{n!}(x-a)^{n} + R_{n}(x)</script><h2 id="导数"><a href="#导数" class="headerlink" title="导数"></a>导数</h2><p><img src="1.png" alt></p>
<script type="math/tex; mode=display">f^{\prime}(x_0) = \lim_{\vartriangle{x} \to 0 }{\frac{\vartriangle{y}}{\vartriangle{x}}} = \lim_{\vartriangle{x} \to 0 }\frac{f(x_0)+\vartriangle{x}) - f(x_0)}{\vartriangle{x}}</script><p>反映的是函数y=f(x)在某一点处沿x轴正方向的变化率。再强调一遍，是函数f(x)在x轴上某一点处沿着x轴正方向的变化率/变化趋势。直观地看，也就是在x轴上某一点处，如果$f^{\prime}(x)&gt;0$，说明f(x)的函数值在x点沿x轴正方向是趋于增加的；如果$f^{\prime}(x)&lt;0$，说明f(x)的函数值在x点沿x轴正方向是趋于减少的。</p>
<h2 id="导数和偏导数"><a href="#导数和偏导数" class="headerlink" title="导数和偏导数"></a>导数和偏导数</h2><p>偏导数的定义如下:</p>
<script type="math/tex; mode=display">\frac{\partial}{ \partial(x_j)}f(x_0,x_1,\cdots,x_n) = \lim_{\vartriangle{x} \to 0 }{\frac{\vartriangle{y}}{\vartriangle{x}}} = \lim_{\vartriangle{x} \to 0 }\frac{f(x_0,\cdots,x_j + \vartriangle{x}, \cdots , x_n) - f(x_0,\cdots,x_j, \cdots , x_n) }{\vartriangle{x}}</script><p>可以看到，导数与偏导数本质是一致的，都是当自变量的变化量趋于0时，函数值的变化量与自变量变化量比值的极限。直观地说，偏导数也就是函数在某一点上沿坐标轴正方向的的变化率。 区别在于： </p>
<ul>
<li>导数，指的是一元函数中，函数$y=f(x)$在某一点处沿x轴正方向的变化率； </li>
<li>偏导数，指的是多元函数中，函数$y=f(x_1,x_2,…,x_n)$在某一点处沿某一坐标轴$(x_1,x_2,…,x_n)$正方向的变化率。 </li>
</ul>
<h2 id="导数与方向导数："><a href="#导数与方向导数：" class="headerlink" title="导数与方向导数："></a>导数与方向导数：</h2><p>方向导数的定义如下：</p>
<script type="math/tex; mode=display">\frac{\partial}{ \partial(x_l)}f(x_0,x_1,\cdots,x_n) = \lim_{\rho \to 0 }{\frac{\vartriangle{y}}{\rho}} = \lim_{\rho \to 0 }\frac{f(x_0 + \vartriangle{x_0},\cdots,x_j + \vartriangle{x_j}, \cdots , x_n+\vartriangle{x_n}) - f(x_0,\cdots,x_j, \cdots , x_n) }{\rho}</script><script type="math/tex; mode=display">\rho = \sqrt{(\vartriangle{x_0})^2 + \cdots + (\vartriangle{x_j})^{2} + \cdots + (\vartriangle{x_n})^{2}}</script><p>在前面导数和偏导数的定义中，均是沿坐标轴正方向讨论函数的变化率。那么当我们讨论函数沿某一任意方向的变化率时，也就引出了方向导数的定义，即：某一点在某一趋近方向上的导数值。我们不仅要知道函数在坐标轴正方向上的变化率（即偏导数），而且还要设法求得函数在其他特定方向上的变化率。而方向导数就是函数在其他特定方向上的变化率</p>
<h2 id="导数与梯度"><a href="#导数与梯度" class="headerlink" title="导数与梯度"></a>导数与梯度</h2><p>梯度定义如下：函数在某一点的梯度是这样一个向量，它的方向与取得最大方向导数的方向一致，而它的模为方向导数的最大值。</p>
<script type="math/tex; mode=display">gradf(x_0,x_1,\cdots,x_n) = (\frac{\partial}{\partial{x_0}},\frac{\partial}{\partial{x_j}},\frac{\partial}{\partial{x_n}})</script><p>梯度的提出只为回答一个问题： <strong>函数在变量空间的某一点处，沿着哪一个方向有最大的变化率？</strong>  </p>
<p>这里注意三点： </p>
<ul>
<li>梯度是一个向量，即有方向有大小； </li>
<li>梯度的方向是最大方向导数的方向； </li>
<li>梯度的值是最大方向导数的值。 </li>
</ul>
<h2 id="梯度下降法"><a href="#梯度下降法" class="headerlink" title="梯度下降法"></a>梯度下降法</h2><p>既然在变量空间的某一点处，函数沿梯度方向具有最大的变化率，那么在优化目标函数的时候，自然是沿着负梯度方向去减小函数值，以此达到我们的优化目标。 如何沿着负梯度方向减小函数值呢？既然梯度是偏导数的集合，如下：</p>
<script type="math/tex; mode=display">gradf(x_0,x_1,\cdots,x_n) = (\frac{\partial}{\partial{x_0}},\frac{\partial}{\partial{x_j}},\frac{\partial}{\partial{x_n}})</script><p>同时梯度和偏导数都是向量，那么参考向量运算法则，我们在每个变量轴上减小对应变量值即可，梯度下降法可以描述如下：</p>
<p>Repeat {</p>
<script type="math/tex; mode=display">\begin{equation}\begin{split}
    & x_0 := x_0 -\alpha\frac{\partial}{\partial{x_0}} \\
    & \cdots \\
    & x_j := x_j -\alpha\frac{\partial}{\partial{x_j}} \\
    & \cdots \\
    & x_n := x_n -\alpha\frac{\partial}{\partial{x_n}} 
\end{split} \end{equation}</script><p>}</p>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Deep Learning</category>
        <category>Machine Learning</category>
        <category>Math</category>
      </categories>
  </entry>
  <entry>
    <title>求导法则</title>
    <url>/%E6%B1%82%E5%AF%BC%E6%B3%95%E5%88%99/2019/07/05/</url>
    <content><![CDATA[<h2 id="和、差、积、商求导法则"><a href="#和、差、积、商求导法则" class="headerlink" title="和、差、积、商求导法则"></a>和、差、积、商求导法则</h2><p>设$u=u(x)$,$v=v(x)$都可导，则</p>
<script type="math/tex; mode=display">\begin{equation}\begin{aligned}
& (Cu)^\prime = Cu^\prime, C \ is \ constant \\
& (u ± v)^\prime = u^\prime ± v^\prime \\
& (uv)^\prime = u^\prime v + uv^\prime \\
& (\frac{u}{v})^\prime = \frac{u^\prime v – uv^\prime}{v^2}
\end{aligned}\end{equation}</script><h2 id="Chain-Rule"><a href="#Chain-Rule" class="headerlink" title="Chain Rule"></a>Chain Rule</h2><script type="math/tex; mode=display">f^{\prime}(g(x)) = f^{\prime}(u) \cdot u^{\prime}(x)</script><p>或者</p>
<script type="math/tex; mode=display">\frac{dy}{dx} = \frac{dy}{du} \cdot \frac{du}{dx}</script><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p><img src="1.png" alt><br><img src="2.png" alt></p>
]]></content>
      <categories>
        <category>Math</category>
        <category>Calculus</category>
      </categories>
  </entry>
  <entry>
    <title>Time and Ordering</title>
    <url>/Time-and-Ordering/2019/07/04/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Big Data Architecture</category>
        <category>Distributed &amp; Cloud Computing</category>
      </categories>
  </entry>
  <entry>
    <title>Consistent Hashing Algorithm</title>
    <url>/Consistent-Hashing-Algorithm/2019/07/04/</url>
    <content><![CDATA[<h2 id="分布式缓存问题"><a href="#分布式缓存问题" class="headerlink" title="分布式缓存问题"></a>分布式缓存问题</h2><p>假设我们有一个网站，最近发现随着流量增加，服务器压力越来越大，之前直接读写数据库的方式不太给力了，于是我们想引入Memcached作为缓存机制。现在我们一共有三台机器可以作为Memcached服务器，如下图所示。</p>
<p><img src="1.png" alt></p>
<p>很显然，最简单的策略是将每一次Memcached请求随机发送到一台Memcached服务器，但是这种策略可能会带来两个问题：</p>
<ol>
<li>同一份数据可能被存在不同的机器上而造成数据冗余.</li>
<li>有可能某数据已经被缓存但是访问却没有命中，因为无法保证对相同key的所有访问都被发送到相同的服务器。</li>
</ol>
<p>因此，随机策略无论是时间效率还是空间效率都非常不好。要解决上述问题只需做到如下一点：</p>
<blockquote>
<p>保证对相同key的访问会被发送到相同的服务器。</p>
</blockquote>
<p>很多方法可以实现这一点，最常用的方法是计算哈希。例如对于每次访问，可以按如下算法计算其哈希值：</p>
<script type="math/tex; mode=display">h = \frac{Hash(key)}{3}</script><p>其中Hash是一个从字符串到正整数的哈希映射函数。这样，如果我们将Memcached Server分别编号为0、1、2，那么就可以根据上式和key计算出服务器编号h，然后去访问。这个方法虽然解决了上面提到的两个问题，但是存在一些其它的问题。如果将上述方法抽象，可以认为通过：</p>
<script type="math/tex; mode=display">h = \frac{Hash(key)}{N}</script><p>这个算式计算每个key的请求应该被发送到哪台服务器，其中N为服务器的台数，并且服务器按照0 – (N-1)编号。</p>
<p>这个算法的问题在于<strong>容错性</strong>和<strong>扩展性</strong>不好。所谓容错性是指当系统中某一个或几个服务器变得不可用时，整个系统是否可以正确高效运行；而扩展性是指当加入新的服务器后，整个系统是否可以正确高效运行。</p>
<p>现假设有一台服务器宕机了，那么为了填补空缺，要将宕机的服务器从编号列表中移除，后面的服务器按顺序前移一位并将其编号值减一，此时每个key就要按h = Hash(key) % (N-1)重新计算；同样，如果新增了一台服务器，虽然原有服务器编号不用改变，但是要按h = Hash(key) % (N+1)重新计算哈希值。因此系统中一旦有服务器变更，大量的key会被重定位到不同的服务器从而造成大量的缓存不命中。而这种情况在分布式系统中是非常糟糕的。</p>
<h2 id="一致性哈希算法"><a href="#一致性哈希算法" class="headerlink" title="一致性哈希算法"></a>一致性哈希算法</h2><p>简单来说，一致性哈希将整个哈希值空间组织成一个虚拟的圆环，如假设某哈希函数H的值空间为0 - 232-1（即哈希值是一个32位无符号整形），整个哈希空间环如下：</p>
<p><img src="2.png" alt></p>
<p>整个空间按顺时针方向组织。0和$2^{32}-1$在零点中方向重合。下一步将各个服务器使用H进行一个哈希，具体可以选择服务器的ip或主机名作为关键字进行哈希，这样每台机器就能确定其在哈希环上的位置。下来使用如下算法定位数据访问到相应服务器：将数据key使用相同的函数H计算出哈希值h，通根据h确定此数据在环上的位置，从此位置沿环顺时针“行走”，第一台遇到的服务器就是其应该定位到的服务器。</p>
<p>例如我们有A、B、C、D四个数据对象，经过哈希计算后，在环空间上的位置如下：<br><img src="3.png" alt><br>根据一致性哈希算法，数据A会被定为到Server 1上，D被定为到Server 3上，而B、C分别被定为到Server 2上。</p>
<h3 id="容错性与可扩展性分析"><a href="#容错性与可扩展性分析" class="headerlink" title="容错性与可扩展性分析"></a>容错性与可扩展性分析</h3><p>下面分析一致性哈希算法的容错性和可扩展性。现假设Server3宕机了。可以看到此时A、C、B不会受到影响，只有D节点被重定位到Server2。一般的，在一致性哈希算法中，如果一台服务器不可用，则受影响的数据仅仅是此服务器到其环空间中前一台服务器（即顺着逆时针方向行走遇到的第一台服务器）之间数据，其它不会受到影响。</p>
<p>下面考虑另外一种情况，如果我们在系统中增加一台服务器MemcachedServer4。此时A、D、C不受影响，只有B需要重定位到新的Server 4。一般的，在一致性哈希算法中，如果增加一台服务器，则受影响的数据仅仅是新服务器到其环空间中前一台服务器（即顺着逆时针方向行走遇到的第一台服务器）之间数据，其它不会受到影响。</p>
<p>综上所述，一致性哈希算法对于节点的增减都只需重定位环空间中的一小部分数据，具有较好的容错性和可扩展性。</p>
<h3 id="虚拟节点"><a href="#虚拟节点" class="headerlink" title="虚拟节点"></a>虚拟节点</h3><p>一致性哈希算法在服务节点太少时，容易因为节点分部不均匀而造成数据倾斜问题。例如我们的系统中有两台服务器，其环分布如下：</p>
<p><img src="4.png" alt></p>
<p>时必然造成大量数据集中到Server 1上，而只有极少量会定位到Server 2上。为了解决这种数据倾斜问题，一致性哈希算法引入了虚拟节点机制，即对每一个服务节点计算多个哈希，每个计算结果位置都放置一个此服务节点，称为虚拟节点。具体做法可以在服务器ip或主机名的后面增加编号来实现。例如上面的情况，我们决定为每台服务器计算三个虚拟节点，于是可以分别计算“Memcached Server 1#1”、“Memcached Server 1#2”、“Memcached Server 1#3”、“Memcached Server 2#1”、“Memcached Server 2#2”、“Memcached Server 2#3”的哈希值，于是形成六个虚拟节点：</p>
<p><img src="5.png" alt></p>
<p>同时数据定位算法不变，只是多了一步虚拟节点到实际节点的映射，例如定位到“Memcached Server 1#1”、“Memcached Server 1#2”、“Memcached Server 1#3”三个虚拟节点的数据均定位到Server 1上。这样就解决了服务节点少时数据倾斜的问题。在实际应用中，通常将虚拟节点数设置为32甚至更大，因此即使很少的服务节点也能做到相对均匀的数据分布。</p>
<blockquote>
<p>src <a href="http://blog.codinglabs.org/articles/consistent-hashing.html" target="_blank" rel="noopener">http://blog.codinglabs.org/articles/consistent-hashing.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Big Data Architecture</category>
        <category>Distributed &amp; Cloud Computing</category>
      </categories>
  </entry>
  <entry>
    <title>分布式哈希(DHT)的原理</title>
    <url>/%E5%88%86%E5%B8%83%E5%BC%8F%E5%93%88%E5%B8%8C-DHT-%E7%9A%84%E5%8E%9F%E7%90%86/2019/07/04/</url>
    <content><![CDATA[<h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><h3 id="什么是“散列表-哈希表（hash-table）”？"><a href="#什么是“散列表-哈希表（hash-table）”？" class="headerlink" title="什么是“散列表/哈希表（hash table）”？"></a>什么是“散列表/哈希表（hash table）”？</h3><p><strong>散列表/哈希表</strong>是用来存储“键值对”的一种容器。即key/value pairs，简称“K/V”。有了“散列表”，你可以很方便快速地通过 key 来获得 value。</p>
<h3 id="如何实现散列表？"><a href="#如何实现散列表？" class="headerlink" title="如何实现散列表？"></a>如何实现散列表？</h3><p>在散列表这种数据结构中，会包含 N 个 bucket（桶）。对于某个具体的散列表，N（桶的数量）通常是【固定不变】的。于是可以对每个桶进行编号，从 0 到 N-1。“桶”是用来存储“键值对”的，你可以把它通俗理解成一个动态数组，里面可以存放【多个】“键值对”。</p>
<p>下面展示了散列表的【查找】原理。当使用某个 key 进行查找，会先用某个散列函数计算这个key 的散列值。得到散列值通常是一个整数，然后用散列值对N（桶数）进行“取模”运算（除法求余数），就可以算出对应的桶编号。（注：取模运算是最常用的做法，但不是唯一的做法）</p>
<p><img src="1.png" alt></p>
<h3 id="什么是“散列表”的【碰撞-冲突】（Collision）？"><a href="#什么是“散列表”的【碰撞-冲突】（Collision）？" class="headerlink" title="什么是“散列表”的【碰撞/冲突】（Collision）？"></a>什么是“散列表”的【碰撞/冲突】（Collision）？</h3><p>当两个不同的 key 进行哈希计算却得到【相同的散列值】，就是所谓的【散列函数碰撞】。一旦出现这种情况，这两个 key 对应的两个键值对就会被存储在【同一个】桶（bucket）里面。另一种情况是：虽然计算出来的散列值【不同】，但经过“取模运算”之后却得到【相同】的桶编号。这时候也会出现：两个键值对存储在一个桶里面。</p>
<p>如果某个哈希表在存储数据时【完全没有碰撞】，那么每个桶里面都只有 0个 或 1个 键值对。查找起来就非常快。反之，如果某个哈希表在存储数据时出现【严重碰撞】，就会导致某些桶里面存储了一大堆的键值对。将来查找 key 的时候，如果定位到的是这种“大桶”，就需要在这个桶里面逐一比对 key 是否相同——查找效率就会变得很差。</p>
<p><img src="2.png" alt></p>
<h2 id="分布式散列表（DHT）概述"><a href="#分布式散列表（DHT）概述" class="headerlink" title="分布式散列表（DHT）概述"></a>分布式散列表（DHT）概述</h2><p><strong>分布式散列表</strong>也称为“分布式哈希表”，英文是“distributed hash table”，简称 DHT。</p>
<p>“分布式散列表”在概念上类似与传统的“散列表”，差异在于——“传统的散列表”主要是用于单机上的某个软件中；“分布式散列表”主要是用于分布式系统（此时，分布式系统的节点可以通俗理解为散列表中的 bucket）。“分布式散列表”主要是用来存储大量的（甚至是海量的）数据。在实际使用场景中，直接对所存储的“每一个业务数据”计算散列值，然后用散列值作为 key，业务数据本身是 value。<br><img src="3.png" alt></p>
<h3 id="为什么会出现-DHT？"><a href="#为什么会出现-DHT？" class="headerlink" title="为什么会出现 DHT？"></a>为什么会出现 DHT？</h3><p>在 P2P 文件共享的发展史上，出现过3种不同的技术路线（三代）。</p>
<ol>
<li>第1代采用【中央服务器】的模式——每个节点都需要先连接到中央服务器，然后才能查找到自己想要的文件在哪里。这种技术的最大缺点是——中央服务器成为整个 P2P 网络的【单点故障】。<strong>这类 p2p 的典型代表是 Napster</strong>。</li>
<li>第2代采用【广播】的模式——要找文件的时候，每个节点都向自己相连的【所有节点】进行询问；被询问的节点如果不知道这个文件在哪里，就再次进行“广播”……如此往复，直至找到所需文件。这种技术的最大缺点是——会引发“广播风暴”并严重占用网络带宽，也会严重消耗节点的系统资源。即使在协议层面通过设置 TTL（time to live），限制查询过程只递归 N 轮，依然【无法】彻底解决此弊端。这类 p2p 的典型代表是 Gnutella 的早期版本。</li>
<li>第3代采用的技术就是DHT。通过DHT, 不但避免了第一代技术的【单点故障】，也避免了第二代技术的【广播风暴】。</li>
</ol>
<h3 id="分布式散列表（DHT）的难点"><a href="#分布式散列表（DHT）的难点" class="headerlink" title="分布式散列表（DHT）的难点"></a>分布式散列表（DHT）的难点</h3><h4 id="“无中心”导致的难点"><a href="#“无中心”导致的难点" class="headerlink" title="“无中心”导致的难点"></a>“无中心”导致的难点</h4><p>前面提到了 DHT 的诞生，是为了解决前面两代P2P技术的缺陷。其中一个缺陷是“中央服务器”导致的【单点故障】。因此 DHT 就【不能】再依靠中央服务器。而没有了中央服务器，就需要提供一系列机制来实现节点之间的通讯。</p>
<h4 id="“海量数据”导致的难点"><a href="#“海量数据”导致的难点" class="headerlink" title="“海量数据”导致的难点"></a>“海量数据”导致的难点</h4><p>DHT 的很多使用场景是为了承载海量数据（PB或更高级别）。由于数据是海量的，每个节点只能存储（整个系统的）一小部分数据。需要把数据【均匀分摊】到每个节点。</p>
<h4 id="“节点动态变化”导致的难点"><a href="#“节点动态变化”导致的难点" class="headerlink" title="“节点动态变化”导致的难点"></a>“节点动态变化”导致的难点</h4><p>很多 DHT 的使用场景是在公网（互联网）上，参与 DHT 的节点（主机）会出现【频繁变化】——每时每刻都有新的节点上线，也会有旧的节点下线。在这种情况下，需要确保数据依然是【均匀分摊】到所有节点。</p>
<p>（特别强调一下：传统的散列表在这种情况下的困难）前面提到：传统散列表所含的【桶数】是固定不变滴。因为传统散列表在针对 key 计算出散列值之后，需要用“散列值”和“桶数”进行某种运算（比如：取模运算），从而得到桶的编号。如果桶的数量出现变化，就会影响到上述“取模运算”的结果，然后导致数据错乱。</p>
<h4 id="“高效查询”导致的难点"><a href="#“高效查询”导致的难点" class="headerlink" title="“高效查询”导致的难点"></a>“高效查询”导致的难点</h4><p>对于节点数很多的分布式系统，如何快速定位节点，同时又不消耗太多网络资源，这也是一个挑战。比如前面提到第二代 P2P 技术，在查找所需文件时会导致【广播风暴】。这就成为其致命弱点。DHT必须有更高效的查找机制。而且这种查找机制要能适应“节点动态变化”这个特点。</p>
<h3 id="分布式散列表（DHT）如何解决上述难点？"><a href="#分布式散列表（DHT）如何解决上述难点？" class="headerlink" title="分布式散列表（DHT）如何解决上述难点？"></a>分布式散列表（DHT）如何解决上述难点？</h3><p>DHT 采用如下一些机制来解决上述问题，并满足分布式系统比较苛刻的需求。</p>
<h4 id="“散列算法”的选择"><a href="#“散列算法”的选择" class="headerlink" title="“散列算法”的选择"></a>“散列算法”的选择</h4><p>前面提到：DHT 通常是直接拿业务数据的散列值作为 key，业务数据本身作为 value。考虑到 DHT需要承载的数据量通常比较大，散列函数产生的“散列值范围”（keyspace）要足够大，以防止太多的碰撞。更进一步，如果keyspace【大到一定程度】，使得“随机碰撞”的概率小到忽略不计，就有助于简化 DHT 的系统设计。通常的 DHT 都会采用大于等于 128 比特的散列值（2128 比 “地球上所有电子文档总数” 还要大【很多数量级】）。</p>
<h4 id="同构的“node-ID”与“data-key”"><a href="#同构的“node-ID”与“data-key”" class="headerlink" title="同构的“node ID”与“data key”"></a>同构的“node ID”与“data key”</h4><p>DHT 属于分布式系统的一种。既然是分布式系统，意味着存在【多个】节点（电脑主机）。在设计分布式系统的时候，一种常见的做法是：给每一个节点（node）分配【唯一的】ID。有了这个节点ID（nodeID），在系统设计上的好处是——对分布式系统所依赖的物理网络的【解耦】。很多 DHT 的设计会让“nodeID”采用跟“datakey”【同构】的散列值。这么搞的好处是：</p>
<ol>
<li>当散列值空间足够大的时候，随机碰撞忽略不计，因此也就确保了 node ID 的唯一性</li>
<li>可以简化系统设计——比如简化路由算法（下面会提及）</li>
</ol>
<h4 id="“拓扑结构”的设计"><a href="#“拓扑结构”的设计" class="headerlink" title="“拓扑结构”的设计"></a>“拓扑结构”的设计</h4><p>作为分布式系统，DHT 必然要定义某种拓扑结构；有了拓扑结构，自然就要设计某种“路由算法”。如果某个 DHT 采用前面所说的——“node ID”与“data key”【同构】——那么很自然的就会引入“Key-based routing”。请注意，这【不是】某个具体的路由算法，而只是某种【风格】。采用这种风格来设计路由机制，好处是：key 本身已经提供了足够多的路由信息。当某个分布式系统具有自己的拓扑结构，它本身成为一个“覆盖网络”（洋文叫“Overlay Network”）。所谓的“覆盖网络”，通俗地说就是“网络之上的网络”。对于大部分 DHT而言，它们是基于互联网之上的“覆盖网络”，它们的数据通讯是依赖下层的互联网来实现的。前面提到的“nodeID”，其【解耦】的作用就体现在——分布式系统在设计拓扑结构和路由算法时，只需要考虑 node ID，而不用考虑其下层网络的属性（比如：协议类型、IP 地址、端口号）。</p>
<h4 id="“路由算法”的权衡"><a href="#“路由算法”的权衡" class="headerlink" title="“路由算法”的权衡"></a>“路由算法”的权衡</h4><p>由于 DHT 中的节点数可能非常多（比如：几十万、几百万），而且这些节点是动态变化的。因此就【不可能】让每一个节点都记录所有其它节点的信息。实际情况是：<strong>每个节点通常只知道少数一些节点的信息</strong>。这时候就需要设计某种路由算法，尽可能利用已知的节点来转发数据。“路由算法”这玩意儿很重要，直接决定了DHT的速度和资源消耗。在确定了路由算法之后，还需要做一个两难的权衡——“路由表的大小”。路由表越大，可以实现越短（跳数越少）的路由；缺点是：（由于节点动态变化）路由表的维护成本也就越高。路由表数越小，其维护成本越小；缺点是：路由就会变长（跳数变多）。</p>
<h4 id="距离算法"><a href="#距离算法" class="headerlink" title="距离算法"></a>距离算法</h4><p>某些 DHT 系统还会定义一种“距离算法”，用来计算：“节点之间的距离”、“数据之间的距离”、“节点与数据的距离”。请注意：此处所说的“距离”属于【逻辑层面】，对应的是 DHT 自己的拓扑结构；它与地理位置【无关】，也与互联网的拓扑结构【无关】。写到这里，某些聪明的读者就会明白：为啥前面要强调——“node ID”与“data key”【同构】。当这两者【同构】，就可以使用【同一种“距离算法”】；反之，如果这两者不同构，多半要引入几种不同的“距离算法”。</p>
<h4 id="数据定位"><a href="#数据定位" class="headerlink" title="数据定位"></a>数据定位</h4><p>DHT 与传统的散列表在【功能】上是类似的。说白了，他们最关键的功能只有两个——“保存数据”和“获取数据”。如果用 C 语言来表示的话，函数原型大致如下：<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(KEY k, VALUE v)</span></span>;  <span class="comment">// 保存“键值对”</span></span><br><span class="line"><span class="function">VALUE <span class="title">get</span><span class="params">(KEY k)</span></span>;  <span class="comment">// 根据“键”获取“值”</span></span><br></pre></td></tr></table></figure></p>
<h4 id="保存数据"><a href="#保存数据" class="headerlink" title="保存数据"></a>保存数据</h4><p>当某个节点得到了新加入的数据（K/V），它会先计算自己与新数据的key 之间的“距离”；然后再计算它所知道的其它节点与这个 key 的距离。如果计算下来，自己与key的距离最小，那么这个数据就保持在自己这里。否则的话，把这个数据转发给距离最小的节点。收到数据的另一个节点，也采用上述过程进行处理（递归处理）。</p>
<h4 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h4><p>当某个节点接收到查询数据的请求（key），它会先计算自己与 key 之间的“距离”；然后再计算它所知道的其它节点与这个key的距离。如果计算下来，自己与key的距离最小，那么就在自己这里找有没有 key 对应的 value。有的话就返回 value，没有的话就报错。否则的话，把这个数据转发给距离最小的节点。收到数据的另一个节点，也采用上述过程进行处理（递归处理）。</p>
<h2 id="Chord-协议简介"><a href="#Chord-协议简介" class="headerlink" title="Chord 协议简介"></a>Chord 协议简介</h2><h3 id="拓扑结构——环形"><a href="#拓扑结构——环形" class="headerlink" title="拓扑结构——环形"></a>拓扑结构——环形</h3><p>要聊Chord的拓扑，必然要提到“ConsistentHashing”（译作：“一致散列”或“稳定散列”）。搞明白“一致散列”也就知道 Chord 的拓扑设计了。提出“一致散列”这个概念主要是为了解决“节点动态变化”的难点（前面有提及）。为了解决这个难点，“一致散列”把散列值空间（keyspace）构成一个【环】。对于 m 比特的散列值，其范围是[0,2m-1]。你把这个区间头尾相接就变成一个环，其周长是 2m。然后对这个环规定了一个移动方向（比如顺时针）。如果 node ID 和 data key 是同构的，那么这两者都可以映射到这个环上（对应于环上的某点）。</p>
<p>假设有某个“节点A”，距离它最近的是“节点B”（以顺时针方向衡量距离）。那么称B是A的【继任】（successor），A 是 B的【前任】（predecessor）。数据隶属于【距离最小】的节点。以 m = 6 的环形空间为例：</p>
<ul>
<li>数据区间 [5,8] 隶属于“节点8”</li>
<li>数据区间 [9,15] 隶属于“节点15”</li>
<li>……</li>
<li>数据区间 [59,4] 隶属于“节点4”（注：“6比特”的环形空间，63之后是0）</li>
</ul>
<p><img src="4.png" alt></p>
<h3 id="路由机制"><a href="#路由机制" class="headerlink" title="路由机制"></a>路由机制</h3><h4 id="基本路由（简单遍历）"><a href="#基本路由（简单遍历）" class="headerlink" title="基本路由（简单遍历）"></a>基本路由（简单遍历）</h4><p>当收到请求（key），先看 key 是否在自己这里。如果在自己这里，就直接返回信息；否则就把 key 转发给自己的继任者。以此类推。这种玩法的时间复杂度是：O(N)。对于一个节点数很多的 DHT 网络，这种做法显然【非常低效】。</p>
<h4 id="高级路由（Finger-Table）"><a href="#高级路由（Finger-Table）" class="headerlink" title="高级路由（Finger Table）"></a>高级路由（Finger Table）</h4><p>由于“基本路由”非常低效，自然就引入更高级的玩法——基于“Finger Table”的路由。“Finger Table”是一个列表，最多包含 m 项（m 就是散列值的比特数），每一项都是节点 ID。假设当前节点的 ID 是 n，那么表中第 i 项的值是：successor( (n + 2i) mod 2m ) 当收到请求（key），就到“Finger Table”中找到【最大的且不超过 key】的那一项，然后把 key 转发给这一项对应的节点。有了“Finger Table”之后，时间复杂度可以优化为：O(log N)。</p>
<h4 id="节点的加入"><a href="#节点的加入" class="headerlink" title="节点的加入"></a>节点的加入</h4><ol>
<li>任何一个新来的节点（假设叫 A），需要先跟 DHT 中已有的任一节点（假设叫 B）建立连接。</li>
<li>A随机生成一个散列值作为自己的 ID（对于足够大的散列值空间，ID 相同的概率忽略不计）</li>
<li>A通过跟 B 进行查询，找到自己这个 ID 在环上的接头人。也就是——找到自己这个 ID 对应的“继任”（假设叫 C）与“前任”（假设叫 D）</li>
<li>接下来，A 需要跟 C 和 D 进行一系列互动，使得自己成为 C 的前任，以及 D 的继任。</li>
</ol>
<p>这个互动过程，大致类似于在双向链表当中插入元素</p>
<h4 id="节点的【正常】退出"><a href="#节点的【正常】退出" class="headerlink" title="节点的【正常】退出"></a>节点的【正常】退出</h4><p>如果某个节点想要主动离开这个DHT网络，按照约定需要作一些善后的处理工作。比如说，通知自己的前任去更新其继任者……这些善后处理，大致类似于：在双向链表中删除元素。</p>
<h4 id="节点的【异常】退出"><a href="#节点的【异常】退出" class="headerlink" title="节点的【异常】退出"></a>节点的【异常】退出</h4><p>作为一个分布式系统，任何节点都有可能意外下线（也就是说，来不及进行善后就挂掉了）假设节点A的继任者【异常】下线了，那么 节点A就抓瞎了。为了保险起见，Chord引入了一个“继任者候选列表”的概念。每个节点都用这个列表来包含：距离自己最近的 N 个节点的信息，顺序是【由近到远】。一旦自己的继任者下线了，就在列表中找到一个【距离最近且在线】的节点，作为新的继任者。然后节点A 更新该列表，确保依然有N个候选。更新完“继任者候选列表”后，节点A也会通知自己的前任，那么A的前任也就能更新自己的“继任者候选列表”。</p>
<blockquote>
<p>reference from <a href="https://program-think.blogspot.com/2017/09/Introduction-DHT-Kademlia-Chord.html#head-6" target="_blank" rel="noopener">https://program-think.blogspot.com/2017/09/Introduction-DHT-Kademlia-Chord.html#head-6</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Big Data Architecture</category>
        <category>Distributed &amp; Cloud Computing</category>
      </categories>
  </entry>
  <entry>
    <title>Key-Value Stores, Time, and Ordering</title>
    <url>/Key-Value-Stores-Time-and-Ordering/2019/07/04/</url>
    <content><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>This week we first explore the design of key-value/NoSQL storage systems. This topic is important because it shows how industry-popular systems leverage some of the concepts we’ve learned so far in the course. For instance, you will see concepts from some topics, like P2P systems and Membership, reused in our discussion of key-value/NoSQL storage systems. Also in Week 4 we begin to dive into the core distributed algorithms and theoretical concepts that underlie distributed systems. Week 4 features an introduction to time, synchronization, and logical timestamps (like Lamport timestamps).</p>
<h3 id="Goals-and-Objectives"><a href="#Goals-and-Objectives" class="headerlink" title="Goals and Objectives"></a>Goals and Objectives</h3><p>After you actively engage in the learning experiences in this module, you should be able to:</p>
<ul>
<li>Know why key-value/NoSQL are gaining popularity</li>
<li>Know the design of Apache Cassandra</li>
<li>Know the design of Apache HBase</li>
<li>Use various time synchronization algorithms</li>
<li>Apply Lamport and vector timestamps to order events in a distributed system</li>
</ul>
<h3 id="Key-Phrases-Concepts"><a href="#Key-Phrases-Concepts" class="headerlink" title="Key Phrases/Concepts"></a>Key Phrases/Concepts</h3><p>Keep your eyes open for the following key terms or phrases as you complete the readings and interact with the lectures. These topics will help you better understand the content in this module.</p>
<ul>
<li>Key-value and NoSQL stores</li>
<li>Cassandra system</li>
<li>CAP theorem</li>
<li>Consistency-availability tradeoff and spectrum</li>
<li>Eventual consistency</li>
<li>HBase system</li>
<li>ACID vs. BASE</li>
<li>Time synchronization algorithms in asynchronous systems: Cristian’s, NTP, and Berkeley algorithms</li>
<li>Lamport causality and timestamps</li>
<li>Vector timestamps</li>
</ul>
<h3 id="Guiding-Questions"><a href="#Guiding-Questions" class="headerlink" title="Guiding Questions"></a>Guiding Questions</h3><p>Develop your answers to the following guiding questions while completing the assignments throughout the week.</p>
<ul>
<li>Why are key-value/NoSQL systems popular today?</li>
<li>How does Cassandra make writes fast?</li>
<li>How does Cassandra handle failures?</li>
<li>What is the CAP theorem?</li>
<li>What is eventual consistency?</li>
<li>What is a quorum?</li>
<li>What are the different consistency levels in Cassandra?</li>
<li>How do snitches work in Cassandra?</li>
<li>Why is time synchronization hard in asynchronous systems?</li>
<li>How can you reduce the error while synchronizing time across two machines over a network?</li>
<li>How does HBase ensure consistency?</li>
<li>What is Lamport causality?</li>
<li>Can you assign Lamport timestamps to a run?</li>
<li>Can you assign vector timestamps to a run?</li>
</ul>
<h2 id="Why-key-value-NoSQL"><a href="#Why-key-value-NoSQL" class="headerlink" title="Why key-value/ NoSQL"></a>Why key-value/ NoSQL</h2><h3 id="The-key-value-abstraction"><a href="#The-key-value-abstraction" class="headerlink" title="The key-value abstraction"></a>The key-value abstraction</h3><ul>
<li>Example:<ul>
<li>(Business) Key -&gt; Value</li>
<li>(amazon.com) Item number -&gt; information about it</li>
</ul>
</li>
<li>It’s a dictionary datastructure.<ul>
<li>Insert, lookup, and delete by key</li>
<li>E.g., hash table, binary tree</li>
</ul>
</li>
<li>But <strong>distributed</strong>, like distributed hash<br>tables (DHT) in P2P systems</li>
<li>It’s not surprising that key-value stores reuse many techniques from DHTs.</li>
</ul>
<h3 id="RDBMSs"><a href="#RDBMSs" class="headerlink" title="RDBMSs"></a>RDBMSs</h3><ul>
<li>Data stored in tables</li>
<li>Schema-based, i.e., structured tables</li>
<li>Each row (data item) in a table has a primary key that is unique within that table</li>
<li>Queried using SQL (Structured Query Language)</li>
<li>Supports joins</li>
</ul>
<h3 id="RDBMSs’s-mismatch-for-today’s-workload"><a href="#RDBMSs’s-mismatch-for-today’s-workload" class="headerlink" title="RDBMSs’s mismatch for today’s workload"></a>RDBMSs’s mismatch for today’s workload</h3><ul>
<li>Data: Large and unstructured</li>
<li>Lots of random reads and writes</li>
<li>Sometimes write-heavy</li>
<li>Foreign keys rarely needed</li>
<li>Joins infrequent</li>
</ul>
<h3 id="Needs-of-today’s-workload"><a href="#Needs-of-today’s-workload" class="headerlink" title="Needs of today’s workload"></a>Needs of today’s workload</h3><ul>
<li>Speed</li>
<li>Avoid Single Point of Failure (SPOF)</li>
<li>Low TCO (Total cost of operation)</li>
<li>Fewer system administrators</li>
<li>Incremental scalability</li>
<li>Scale out, not up<ul>
<li>Scale up = grow your cluster capacity by replacing with more powerful machines</li>
<li>Scale out = incrementally grow your cluster capacity by adding more COTS machines (Components Off the Shelf)</li>
</ul>
</li>
</ul>
<h3 id="Key-value-data-model"><a href="#Key-value-data-model" class="headerlink" title="Key-value data model"></a>Key-value data model</h3><ul>
<li>NoSQL = “Not Only SQL”</li>
<li>Necessary API operations: get(key) and put(key, value)    <ul>
<li>And some extended operations, e.g., “CQL” in Cassandra key-value store</li>
</ul>
</li>
<li>Tables<ul>
<li>“Column families” in Cassandra, “Table” in HBase, “Collection” in MongoDB</li>
<li>May be unstructured: May not have schemas</li>
<li>Some columns may be missing from some rows</li>
<li>Don’t always support joins or have foreign keys</li>
<li>Can have index tables, just like RDBMSs</li>
</ul>
</li>
</ul>
<p><img src="1.png" alt></p>
<h3 id="Column-oriented-storage"><a href="#Column-oriented-storage" class="headerlink" title="Column-oriented storage"></a>Column-oriented storage</h3><ul>
<li>RDBMSs store an entire row together (on disk or at a server)</li>
<li>NoSQL systems typically store a <strong>column</strong> together (or a group of columns).<ul>
<li>Entries within a column are indexed and easy to locate, given a key (and vice-versa)</li>
</ul>
</li>
<li>Why useful?<ul>
<li>Range searches within a column are fast since you don’t need to fetch the entire database</li>
<li>Don’t need to fetch the other columns</li>
</ul>
</li>
</ul>
<h2 id="CAP-Theorem"><a href="#CAP-Theorem" class="headerlink" title="CAP Theorem"></a>CAP Theorem</h2><ol>
<li>Consistency: all nodes see same data at any time, or reads return latest written value by any client</li>
<li>Availability: the system allows operations all the time, and operations return quickly</li>
<li>Partition-tolerance: the system continues to work in spite of network partitions(分区容错性)</li>
</ol>
<p>Since partition-tolerance is essential in today’s cloud computing systems, CAP theorem implies that a system has to choose between <strong>consistency</strong> and <strong>availability</strong></p>
<h3 id="Eventual-Consistency"><a href="#Eventual-Consistency" class="headerlink" title="Eventual Consistency"></a>Eventual Consistency</h3><ul>
<li>If all writes stop (to a key), then all its values (replicas) will converge eventually.</li>
<li>If writes continue, then system always tries to keep converging.</li>
<li>May still return <strong>stale</strong> values to clients (e.g., if many back-to-back writes).</li>
<li>But works well when there a few periods of low writes – system converges quickly.</li>
</ul>
<h3 id="RDBMSs-Vs-Key-value-Store"><a href="#RDBMSs-Vs-Key-value-Store" class="headerlink" title="RDBMSs Vs. Key-value Store"></a>RDBMSs Vs. Key-value Store</h3><ul>
<li>Cassandra: Eventual (weak) consistency, availability, partition-tolerance<ul>
<li>Basically Available Soft-state Eventual<br>consistency</li>
<li>Prefers availability over consistency</li>
</ul>
</li>
<li>Traditional RDBMSs: Strong consistency over availability under a partition<ul>
<li>Atomicity</li>
<li>Consistency</li>
<li>Isolation</li>
<li>Durability</li>
</ul>
</li>
</ul>
<h2 id="Cassandra"><a href="#Cassandra" class="headerlink" title="Cassandra"></a>Cassandra</h2><p><img src="2.png" alt></p>
<h3 id="SSTable"><a href="#SSTable" class="headerlink" title="SSTable"></a>SSTable</h3><p><img src="7.png" alt></p>
<p>所以SSTable是一个简单，但是非常有用的用来交换大量的、排好序的数据片段的数据结构。它的使用场景是：</p>
<ul>
<li>需要高效地存储大量的键-值对数据</li>
<li>数据是顺序写入</li>
<li>要求高效地顺序读写</li>
<li>没有随机读取或者对随机读取性能要求不高</li>
</ul>
<blockquote>
<p>SSTable提供一个可持久化[persistent]，有序的、不可变的从键到值的映射关系，其中键和值都是任意字节长度的字符串。SSTable提供了以下操作：按照某个键来查询关联值，可以指定键的范围，来遍历其中所有的键值对。每个SSTable内部由一系列块(block)组成(通常每块大小为64KB，是可配置的)。使用存储在SSTable结尾的块索引(block index)来定位块；当SSTable打开时，索引会被加载到内存里。一次磁盘寻道(disk seek)就可以完成查询(lookup)操作：首先通过二分查找在存储在内存的索引中找到对应的块，然后从磁盘上读取这块内容。SSTable也可以完整地映射到内存里，这样在执行查询和扫描(scan)的时候就不用操作磁盘了.</p>
</blockquote>
<h3 id="Partitioner"><a href="#Partitioner" class="headerlink" title="Partitioner"></a>Partitioner</h3><p>Mapping from key to server is called the “Partitioner” and that is what is used by the coordinator here to find out which are the replica servers to forward</p>
<h3 id="Data-Placement-Strategies"><a href="#Data-Placement-Strategies" class="headerlink" title="Data Placement Strategies"></a>Data Placement Strategies</h3><p>Replication Strategy, two options:</p>
<ol>
<li>SimpleStrategy<ul>
<li>RandomPartitioner: Chord-like hash partitioning</li>
<li>ByteOrderedPartitioner: Assigns ranges of keys to servers. Easier for range queries (e.g., get me all twitter users starting with [a-b])</li>
</ul>
</li>
</ol>
<p>当使用Cassandra CLI 命令行工具创建keyspace时的默认副本放置策略。假定根据partitioner得到第一个节点设为N1，它的顺时针的节点为N2，N3…则这种策略会把keyspace的第一个副本放置在N1上，然后其他副本依次放置在N2，N3..上</p>
<p><img src="3.png" alt></p>
<ol>
<li>NetworkTopologyStrategy: for multi-DC deployments (data center)<ul>
<li>Two replicas per DC</li>
<li>Three replicas per DC</li>
<li>Per DC<ul>
<li>First replica placed according to Partitioner</li>
<li>Then go clockwise around ring until you hit a different rack</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>这种策略用于当你知道节点如何在数据中心(Data Center)分组的情况或者你希望部署集群横跨多个数据中心，此时你必须指定每个数据中心要多少个副本，(一般推荐设为2或者3）。在这种情况下，副本放置策略由数据中心自己决定。具体为，先由partitioner决定第一个node设为N1，在架子(rack1)上，属于数据中心DC1，则第一个副本放在N1，其他副本也必须分别放在DC1中，优先选择<strong>不是rack1的架子</strong>，如果没有其他rack，则只能放在rack1上。</p>
<p>比如如图所示，现在有两个数据中心，蓝色表示DC1，绿色表示DC2，DC1上有2个架子，分别是Rack1和Rack2。则如果partitioner选择的第一个节点是DC1的节点N3的话，那么副本R1就放在DC1的节点N3 上，而这个副本的下一个副本R2就放在同一个DC，也就是DC1的下一个rack上（如果有），它刚好发现，顺时针的下一个节点N4刚好也是DC1，但是是另外一个架子(Rack2),所以副本R2放在N4上。对于属于DC2的2个副本也遵循同样的策略。</p>
<p><img src="4.png" alt></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CREATE KEYSPACE Excelsior WITH REPLICATION = &#123; <span class="string">'class'</span> : <span class="string">'SimpleStrategy'</span>,<span class="string">'replication_factor'</span> : 3 &#125;;  </span><br><span class="line">CREATE KEYSPACE Excalibur WITH REPLICATION = &#123;<span class="string">'class'</span> :<span class="string">'NetworkTopologyStrategy'</span>, <span class="string">'dc1'</span> : 3, <span class="string">'dc2'</span> : 2&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Snitches"><a href="#Snitches" class="headerlink" title="Snitches"></a>Snitches</h3><p>Snitch决定了节点属于哪个数据中心和机架。Snitch通知Cassandra网络拓扑以便请求被有效的路由，并且允许Cassandra在服务器增加到数据中心或机架的时候能够分发副本。特别的，复制策略如何放置副本是基于新snitch提供的信息。Cassandra不会把副本放到一个机架里面（如果机架断电，那就over了）。</p>
<ul>
<li>Maps: IPs to racks and DCs. Configured in cassandra.yaml config file</li>
<li>Some options:<ul>
<li>SimpleSnitch: Unaware of Topology (Rack-unaware)</li>
<li>RackInferring(通过本机IP地址判断节点属于哪个DC和哪个rack): Assumes topology of network by octet of server’s IP address<ul>
<li>101.201.301.401 = x.{DC octet}.{rack octet}.{node octet} </li>
</ul>
</li>
<li>PropertyFileSnitch: uses a config file（通过配置文件指定对应的数据中心和机架名称。具体的数据中心和机架的配置位于cassandra-topology.properties文件。）</li>
<li>EC2Snitch: uses EC2<ul>
<li>EC2 Region = DC</li>
<li>Availability zone = rack</li>
</ul>
</li>
<li>Other snitch options available</li>
</ul>
</li>
</ul>
<h3 id="Writes"><a href="#Writes" class="headerlink" title="Writes"></a>Writes</h3><ul>
<li>Need to be lock-free and fast (no reads or disk seeks)</li>
<li>Client sends write to one coordinator node in<br>Cassandra cluster<ul>
<li>Coordinator may be per-key, per-client, or per-query</li>
<li>Per-key Coordinator ensures writes for the key are serialized</li>
</ul>
</li>
<li>Coordinator uses Partitioner to send query to all replica nodes responsible for key</li>
<li>When X replicas respond, coordinator returns an acknowledgement to the client</li>
<li>Always writable: Hinted Handoff mechanism<ul>
<li>If any replica is down, the coordinator writes to all other replicas, and keeps the write locally until down replica comes back up.</li>
<li>When all replicas are down, the Coordinator (front end) buffers writes (for up to a few hours).</li>
</ul>
</li>
<li>One ring per datacenter<ul>
<li>Per-DC coordinator elected to coordinate with<br>other DCs</li>
<li>Election done via Zookeeper, which runs a Paxos (consensus) variant<ul>
<li>Paxos: elsewhere in this course</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Writes-at-a-replica-node"><a href="#Writes-at-a-replica-node" class="headerlink" title="Writes at a replica node"></a>Writes at a replica node</h3><p><img src="5.png" alt></p>
<p>先将数据写进内存中的数据结构memtable，同时追加到磁盘中的commitlog中。memtable内容超出指定容量后会被放进将被刷入磁盘的队列(memtable_flush_queue_size配置队列长度)。若将被刷入磁盘的数据超出了队列长度，C会锁定写,并将内存数据刷进磁盘中的SSTable,之后commit log被清空。</p>
<ol>
<li>Log it in disk commit log (for failure recovery)</li>
<li>Make changes to appropriate memtables<ul>
<li>Memtable = In-memory representation of multiple key- value pairs</li>
<li>Cache that can be searched by key</li>
<li>Write-back cache as opposed to write-through</li>
</ul>
</li>
<li>Later, when memtable is full or old, flush to disk<ul>
<li>Data file: An SSTable (Sorted String Table) – list of key-value pairs, sorted by key</li>
<li>Index file: An SSTable of (key, offset) pairs</li>
<li>And a Bloom filter (for efficient search)</li>
</ul>
</li>
</ol>
<h3 id="Reads"><a href="#Reads" class="headerlink" title="Reads"></a>Reads</h3><p>Read: Similar to writes, except</p>
<ul>
<li>Coordinator can contact X replicas (e.g., in same rack)<ul>
<li>Coordinator sends read to replicas that have responded quickest in past</li>
<li>When X replicas respond, coordinator returns the latest-timestamped value from among those X</li>
</ul>
</li>
<li>Coordinator also fetches value from other replicas<ul>
<li>Checks consistency in the background, initiating a <strong>read repair</strong> if any two values are different</li>
<li>This mechanism seeks to eventually bring all replicas up to date</li>
</ul>
</li>
<li>A row may be split across multiple SSTables =&gt; reads need to touch multiple SSTables =&gt; reads slower than writes (but still fast)</li>
</ul>
<p><img src="6.png" alt></p>
<p>首先检查BloomFilter,每个SSTable都有一个Bloomfilter,用以在任何磁盘IO前检查请求PK对应的数据在SSTable中是否存在。BF可能误判但是不会漏判:判断存在,但实际上可能不存在,判断不存在,则一定不存在,则流程不会访问这个SSTable(红色)。若数据很可能存在，则检查PartitionKey cache(索引的缓存)，之后根据索引条目是否在cache中找到而执行不同步骤：</p>
<ol>
<li>在索引缓存中找到<ul>
<li>从compression offset map中查找拥有对应数据的压缩快。</li>
<li>从磁盘取出压缩的数据，返回结果集。</li>
</ul>
</li>
<li>没有在索引缓存中<ul>
<li>搜索Partition summary（partition index的样本集）确定index条目在磁盘中的近似位置。</li>
<li>从磁盘中SSTable内取出index条目。</li>
<li>从compression offset map中查找拥有对应数据的压缩快。</li>
<li>从磁盘取出压缩的数据，返回结果集。</li>
</ul>
</li>
</ol>
<h3 id="Membership"><a href="#Membership" class="headerlink" title="Membership"></a>Membership</h3><ol>
<li>Any server in cluster could be the coordinator</li>
<li>So every server needs to maintain a list of all the<br>other servers that are currently in the server</li>
<li>List needs to be updated automatically as servers join, leave, and fail</li>
</ol>
<h4 id="Gossip-Style-membership"><a href="#Gossip-Style-membership" class="headerlink" title="Gossip Style membership"></a>Gossip Style membership</h4><p><img src="8.png" alt></p>
<ul>
<li>Suspicion mechanisms to adaptively set the timeout based on underlying network and failure behavior</li>
<li>Accrual detector: Failure detector outputs a value (PHI) representing suspicion</li>
<li>Apps set an appropriate threshold</li>
<li>PHI calculation for a member  <ul>
<li>Inter-arrival times for gossip messages</li>
<li>HI(t) = – log(CDF or Probability(t_now – t_last))/log 10</li>
<li>PHI basically determines the detection timeout, but takes into account historical inter-arrival time variations for gossiped heartbeats</li>
</ul>
</li>
<li>In practice, PHI = 5 =&gt; 10-15 sec detection time</li>
</ul>
<h3 id="Consistency-levels"><a href="#Consistency-levels" class="headerlink" title="Consistency levels"></a>Consistency levels</h3><p>Consistency level指定了读/写操作在通知客户端请求成功之前，必须确保已经成功完成读/写操作的replica的数量. Client is allowed to choose a consistency level for each operation (read/write)</p>
<ul>
<li>ANY: any server (may not be replica)<ul>
<li>Fastest: coordinator caches write and replies quickly to client</li>
</ul>
</li>
<li>ALL: all replicas<ul>
<li>Ensures strong consistency, but slowest</li>
</ul>
</li>
<li>ONE: at least one replica<ul>
<li>Faster than ALL, but cannot tolerate a failure</li>
</ul>
</li>
<li>QUORUM: quorum across all replicas in all datacenters (DCs)<ul>
<li>LOCAL_QUORUM: quorum in coordinator’s DC<ul>
<li>Faster: only waits for quorum in first DC client contacts</li>
</ul>
</li>
<li>EACH_QUORUM: quorum in every DC  <ul>
<li>Lets each DC do its own quorum: supports hierarchical replies<br><img src="9.png" alt></li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="QUORUM-in-Detail"><a href="#QUORUM-in-Detail" class="headerlink" title="QUORUM in Detail"></a>QUORUM in Detail</h4><p>Several key-value/NoSQL stores (e.g., Riak and Cassandra) use quorums.</p>
<ol>
<li>Reads</li>
</ol>
<ul>
<li>Client specifies value of R (≤ N = total number<br>of replicas of that key).</li>
<li>R = read consistency level.</li>
<li>Coordinator waits for R replicas to respond before sending result to client.</li>
<li>In background, coordinator checks for consistency of remaining (N-R) replicas, and initiates read repair if needed.</li>
</ul>
<ol>
<li>Writes</li>
</ol>
<ul>
<li>Client specifies W (≤ N)</li>
<li>W = write consistency level.</li>
<li>Client writes new value to W replicas and returns. Two flavors:<ul>
<li>Coordinator blocks until quorumis reached.</li>
<li>Asynchronous:Justwriteandreturn.</li>
</ul>
</li>
</ul>
<ol>
<li>Two necessary conditions:<ul>
<li>W+R &gt; N</li>
<li>W &gt; N/2</li>
</ul>
</li>
<li>Select values based on application<ul>
<li>(W=1, R=1): very few writes and reads</li>
<li>(W=N, R=1): great for read-heavy workloads</li>
<li>(W=N/2+1, R=N/2+1): great for write-heavy workloads</li>
<li>(W=1, R=N): great for write-heavy workloads with mostly one client writing per key</li>
</ul>
</li>
</ol>
<h3 id="Cassandra-Vs-RDBMSs"><a href="#Cassandra-Vs-RDBMSs" class="headerlink" title="Cassandra Vs. RDBMSs"></a>Cassandra Vs. RDBMSs</h3><ul>
<li>MySQL is one of the most popular (and has been for a while)</li>
<li>On &gt; 50GB data</li>
<li>MySQL<ul>
<li>Writes 300 ms avg</li>
<li>Reads 350 ms avg</li>
</ul>
</li>
<li>Cassandra<ul>
<li>Writes 0.12 ms avg</li>
<li>Reads 15 ms avg</li>
</ul>
</li>
<li>Orders of magnitude faster</li>
</ul>
<h2 id="HBase"><a href="#HBase" class="headerlink" title="HBase"></a>HBase</h2><blockquote>
<p>src <a href="https://seawaylee.github.io/2017/11/21/大数据/HBase/HBase学习笔记（一）-%20快速入门/" target="_blank" rel="noopener">https://seawaylee.github.io/2017/11/21/大数据/HBase/HBase学习笔记（一）-%20快速入门/</a></p>
</blockquote>
<p>Unlike Cassandra, HBase prefers consistency (over availability)</p>
<ul>
<li>Single “Master” cluster</li>
<li>Other “Slave” clusters replicate the same tables</li>
<li>Master cluster synchronously sends HLogs over to slave clusters</li>
<li>Coordination among clusters is via Zookeeper</li>
<li>Zookeeper can be used like a file system to store<br>control information</li>
</ul>
<h3 id="API-functions"><a href="#API-functions" class="headerlink" title="API functions"></a>API functions</h3><ul>
<li>Get/Put(row)</li>
<li>Scan(row range, filter) – range queries MultiPut</li>
</ul>
<h3 id="HBase-数据模型"><a href="#HBase-数据模型" class="headerlink" title="HBase 数据模型"></a>HBase 数据模型</h3><p><img src="10.png" alt></p>
<ul>
<li>与nosql数据库一样,rowkey 是用来检索记录的主键。</li>
<li>Hbase表中的每个列,都归属于某个列族。列表都以列族为前缀,例如 course:histroy, course:math 都属于course这个列族。</li>
<li>由 rowKey + columnFamily + version 唯一确定的单元</li>
<li>每个cell都保存着同一份数据的多个版本,版本通过时间戳来索引。时间戳的类型是64位整型。间戳可以由HBASE(在数据写入时自动)赋值,此时时间戳是精确到毫秒的当前系统时间。时间戳也可以由客户显式赋值。如果应用程序要避免数据版本冲突,就必须自己生成具有唯一性的时间戳。每个cell中,不同版本的数据按照时间倒序排序,即最新的数据排在最前面。为了避免数据存在过多版本造成的的管理(包括存贮和索引)负担,HBASE提供了两种数据版本回收方式。一是保存数据的最后n个版本,二是保存最近一段时间内的版本（比如最近七天）。用户可以针对每个列族进行设置</li>
</ul>
<h3 id="HBase-体系图"><a href="#HBase-体系图" class="headerlink" title="HBase 体系图"></a>HBase 体系图</h3><p><img src="11.png" alt></p>
<h4 id="Writes-1"><a href="#Writes-1" class="headerlink" title="Writes"></a>Writes</h4><ul>
<li>Client向HRegionServer发送写请求</li>
<li>HRegionServer将数据写到Hlog(write ahead log)。为了数据的持久化和恢复</li>
<li>HRegionServer将数据写到内存(memstore)</li>
<li>反馈Client写成功</li>
</ul>
<h4 id="Write"><a href="#Write" class="headerlink" title="Write"></a>Write</h4><ul>
<li>通过ZK和 -ROOT- .META. 表定位HRegionServer</li>
<li>数据从内存和硬盘合并后返回给Client</li>
<li>数据块会缓存</li>
</ul>
<h4 id="Flush"><a href="#Flush" class="headerlink" title="Flush"></a>Flush</h4><ul>
<li>当memstore数据达到阀值（默认64M），将数据刷到硬盘，将内存中的数据删除，同事删除HLog中的历史数据。</li>
<li>将数据存储到HDFS中</li>
<li>在Hlog中做标记点</li>
</ul>
<h4 id="数据合并过程"><a href="#数据合并过程" class="headerlink" title="数据合并过程"></a>数据合并过程</h4><ul>
<li>当数据块达到4块，HMaster将数据加载到本地，进行合并</li>
<li>当合并的数据超过256M，进行拆分，将拆分后的region分配给不同的HRegionServer管理</li>
<li>当HRegionServer宕机后，将HRegionServer上的Hlog拆分，然后分配给不同的HRegionServer加载，修改 .META.</li>
<li>注意：Hlog会同步到HDFS</li>
</ul>
<h3 id="HBase读写原理图"><a href="#HBase读写原理图" class="headerlink" title="HBase读写原理图"></a>HBase读写原理图</h3><p><img src="12.png" alt></p>
]]></content>
      <categories>
        <category>Big Data Architecture</category>
        <category>Distributed &amp; Cloud Computing</category>
      </categories>
  </entry>
  <entry>
    <title>Introduction to Redis</title>
    <url>/Introduction-to-Redis/2019/07/02/</url>
    <content><![CDATA[<h2 id="为什么要使用redis来做缓存呢"><a href="#为什么要使用redis来做缓存呢" class="headerlink" title="为什么要使用redis来做缓存呢?"></a>为什么要使用redis来做缓存呢?</h2><blockquote>
<p>src: <a href="https://blog.csdn.net/WYpersist/article/details/80672951" target="_blank" rel="noopener">https://blog.csdn.net/WYpersist/article/details/80672951</a> </p>
</blockquote>
<ol>
<li>缓存分为本地缓存和分布式缓存。以java为例，使用自带的map或者guava实现的是本地缓存，最主要的特点是轻量以及快速，生命周期随着jvm的销毁而结束，并且在多实例的情况下，每个实例都需要各自保存一份缓存，缓存不具有一致性。</li>
<li>Redis 可以用几十 G 内存来做缓存，Map 不行，一般 JVM 也就分几个 G 数据就够大了</li>
<li>Redis 的缓存可以持久化，Map 是内存对象，程序一重启数据就没了</li>
<li>Redis 可以实现分布式的缓存，Map 只能存在创建它的程序里</li>
<li>Redis 可以处理每秒百万级的并发，是专业的缓存服务，Map 只是一个普通的对象</li>
<li>Redis 缓存有过期机制，Map 本身无此功能</li>
<li>Redis 有丰富的 API，Map 就简单太多了</li>
</ol>
<h2 id="redis-python交互和实际例子"><a href="#redis-python交互和实际例子" class="headerlink" title="redis python交互和实际例子"></a>redis python交互和实际例子</h2><blockquote>
<p><a href="https://www.cnblogs.com/alamZ/p/7207784.html" target="_blank" rel="noopener">https://www.cnblogs.com/alamZ/p/7207784.html</a></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    r=redis.StrictRedis(host=<span class="string">'localhost'</span>,port=<span class="number">6379</span>)</span><br><span class="line"><span class="keyword">except</span> Exception,e:</span><br><span class="line">    <span class="keyword">print</span> e.message&lt;br&gt;</span><br><span class="line">//方式一：根据数据类型的不同，调用相应的方法，完成读写</span><br><span class="line">r.set(<span class="string">'name'</span>,<span class="string">'hello'</span>)</span><br><span class="line">r.get(<span class="string">'name'</span>)</span><br><span class="line"> </span><br><span class="line">//方式二：pipline</span><br><span class="line">//缓冲多条命令，然后一次性执行，减少服务器-客户端之间TCP数据库包，从而提高效率</span><br><span class="line">pipe = r.pipeline()</span><br><span class="line">pipe.set(<span class="string">'name'</span>, <span class="string">'world'</span>)</span><br><span class="line">pipe.get(<span class="string">'name'</span>)</span><br><span class="line">pipe.execute()</span><br></pre></td></tr></table></figure>
<h2 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a>用户登录</h2><p>业务过程如下：</p>
<ul>
<li>输入用户名、密码</li>
<li>密码加密</li>
<li>判断redis中是否记录了用户名，如果有则成功</li>
<li>如果redis中没有用户名，则到mysql中查询</li>
<li>从mysql中查询成功后，将用户名记录到redis中</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> t2 <span class="keyword">import</span> RedisHelper</span><br><span class="line"><span class="keyword">from</span> t3 <span class="keyword">import</span> MysqlHelper</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"> </span><br><span class="line">name=raw_input(<span class="string">"请输入用户名："</span>)</span><br><span class="line">pwd=raw_input(<span class="string">"请输入密码："</span>)</span><br><span class="line"> </span><br><span class="line">sha1=hashlib.sha1()</span><br><span class="line">sha1.update(pwd)</span><br><span class="line">pwd1=sha1.hexdigest()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    redis=RedisHelper()</span><br><span class="line">    <span class="keyword">if</span> redis.get(<span class="string">'uname'</span>)==name:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'ok'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        mysql=MysqlHelper(<span class="string">'localhost'</span>,<span class="number">3306</span>,<span class="string">'test1'</span>,<span class="string">'root'</span>,<span class="string">'mysql'</span>)</span><br><span class="line">        upwd=mysql.get_one(<span class="string">'select upwd from userinfos where uname=%s'</span>,[name])</span><br><span class="line">        <span class="keyword">if</span> upwd==<span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'用户名错误'</span></span><br><span class="line">        <span class="keyword">elif</span> upwd[<span class="number">0</span>]==pwd1:</span><br><span class="line">            redis.set(<span class="string">'uname'</span>, name)</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'登录成功'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"密码错误"</span></span><br><span class="line"><span class="keyword">except</span> Exception,e:</span><br><span class="line">    <span class="keyword">print</span> e.message</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Big Data Architecture</category>
        <category>Distributed &amp; Cloud Computing</category>
      </categories>
  </entry>
  <entry>
    <title>Introduction to Big Data</title>
    <url>/Introduction-to-Big-Data/2019/07/02/</url>
    <content><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><ol>
<li>What started the big data era</li>
<li>Three main big data sources</li>
<li>How to get value from big data</li>
<li>Big data’s characteristics</li>
<li>5 steps to process to gain value from big data </li>
<li>The main elements of the Hadoop stack</li>
</ol>
<h2 id="What-started-the-big-data-era"><a href="#What-started-the-big-data-era" class="headerlink" title="What started the big data era"></a>What started the big data era</h2><p><strong>Data Torrent + Computing(Anytime and Anywhere)</strong></p>
<h2 id="Three-main-big-data-sources"><a href="#Three-main-big-data-sources" class="headerlink" title="Three main big data sources"></a>Three main big data sources</h2><ul>
<li>Machines</li>
<li>People</li>
<li>Origanization</li>
</ul>
<h2 id="How-to-get-value-from-big-data"><a href="#How-to-get-value-from-big-data" class="headerlink" title="How to get value from big data"></a>How to get value from big data</h2><p>Value come from integrating different types of data sources</p>
<h3 id="Data-intergation"><a href="#Data-intergation" class="headerlink" title="Data intergation"></a>Data intergation</h3><ol>
<li>Reduce data complexity</li>
<li>Increase data availability</li>
<li>Unify your data system</li>
</ol>
<h2 id="Big-data’s-characteristics"><a href="#Big-data’s-characteristics" class="headerlink" title="Big data’s characteristics"></a>Big data’s characteristics</h2><ol>
<li>Volume (Size)</li>
<li>Varity (Complexity)</li>
<li>Valence (Connectedness)</li>
<li>Veracity (Quality)</li>
<li>Velocity (Speed)</li>
</ol>
<h2 id="5-steps-to-process-to-gain-value-from-big-data"><a href="#5-steps-to-process-to-gain-value-from-big-data" class="headerlink" title="5 steps to process to gain value from big data"></a>5 steps to process to gain value from big data</h2><ol>
<li>Acquire</li>
</ol>
<ul>
<li>Indentify data sets</li>
<li>Retrieve data</li>
<li>Query data</li>
</ul>
<ol>
<li>Prepare<br>Explore data </li>
</ol>
<ul>
<li>Understand the nature of data </li>
<li>Preliminary analysis<br>Pre-process Data</li>
<li>clean</li>
<li>Integrate</li>
<li>Package</li>
</ul>
<ol>
<li>Analyze</li>
</ol>
<ul>
<li>Select analytical techiques</li>
<li>Build models</li>
</ul>
<ol>
<li>Report</li>
</ol>
<ul>
<li>Communicate results</li>
</ul>
<ol>
<li>Act</li>
</ol>
<ul>
<li>Apply results</li>
</ul>
<h2 id="The-main-elements-of-the-Hadoop-stack"><a href="#The-main-elements-of-the-Hadoop-stack" class="headerlink" title="The main elements of the Hadoop stack"></a>The main elements of the Hadoop stack</h2><p><img src="1.png" alt></p>
<ol>
<li>Enable Scalability</li>
<li>Handle Fault Tolerance</li>
<li>Optimized for a Variety Data Types</li>
<li>Facilitate a Shared Environnment</li>
<li>Provide Value</li>
</ol>
]]></content>
      <categories>
        <category>Big Data Architecture</category>
      </categories>
  </entry>
  <entry>
    <title>Combining Distribution and Multithreading</title>
    <url>/Combining-Distribution-and-Multithreading/2019/06/24/</url>
    <content><![CDATA[<h1 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h1><ul>
<li><a href="#combining-distribution-and-multithreading">Combining Distribution and Multithreading</a></li>
<li><a href="#multithreaded-servers">Multithreaded Servers</a></li>
<li><a href="#mpi-and-multithreading">MPI and Multithreading</a></li>
<li><a href="#distributed-actors">Distributed Actors</a></li>
<li><a href="#distributed-reactive-programming">Distributed Reactive Programming</a></li>
</ul>
<h2 id="Combining-Distribution-and-Multithreading"><a href="#Combining-Distribution-and-Multithreading" class="headerlink" title="Combining Distribution and Multithreading"></a>Combining Distribution and Multithreading</h2><p><strong>Lecture Summary</strong>: In this lecture, we introduced processes and threads, which serve as the fundamental building blocks of distributed computing software. </p>
<blockquote>
<p>example: a process corresponds to a single Java Virtual Machine (JVM) instance, and threads are created within a JVM instance.</p>
</blockquote>
<ol>
<li>multiple threads </li>
</ol>
<ul>
<li>sharing of memory</li>
<li>improved responsiveness</li>
<li>improved performance: since threads in the same process can communicate with each other through a shared address space. </li>
</ul>
<ol>
<li>multiple processes</li>
</ol>
<ul>
<li>responsiveness: e.g., when a JVM is paused during garbage collection)</li>
<li>scalability: going past the scalability limitations of multithreading</li>
<li>improved resilience: e.g.,JVM failures </li>
</ul>
<p><strong>In summary</strong>: </p>
<ol>
<li>processes are the basic units of distribution in a cluster of nodes: we can distribute processes across multiple nodes in a data center, and even create multiple processes within a node. </li>
<li>Threads are the basic unit of parallelism and concurrency: we can create multiple threads in a process that can share resources like memory, and contribute to improved performance. However, it is not possible for two threads belonging to the same process to be scheduled on different nodes.</li>
</ol>
<p><img src="1.png" alt></p>
<h2 id="Multithreaded-Servers"><a href="#Multithreaded-Servers" class="headerlink" title="Multithreaded Servers"></a>Multithreaded Servers</h2><p><strong>Lecture Summary</strong>: In this lecture, we learned about multithreaded servers as an extension to the servers that we studied in client-server programming. As a motivating example, we studied the timeline for a single request sent to a standard sequential file server, which typically consists of four steps:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while True:</span><br><span class="line">    1. accept the request</span><br><span class="line">    2. extract the necessary information from the request</span><br><span class="line">    3. read the file</span><br><span class="line">    4. send the file</span><br></pre></td></tr></table></figure>
<p>In practice, step3  is usually the most time-consuming step in this sequence. However, threads can be used to reduce this bottleneck.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while True: </span><br><span class="line">    1. accept the request</span><br><span class="line">    new thread &#123;</span><br><span class="line"></span><br><span class="line">    2. extract the necessary information from the request</span><br><span class="line">    3. read the file</span><br><span class="line">    4. send the file </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In this way, it is possible to process multiple requests simultaneously because they are executing in different threads.</p>
<p>One challenge of following this approach literally is that there is a significant overhead in creating and starting a Java thread. However, since there is usually an upper bound on the number of threads that can be efficiently utilized within a node (often limited by the number of cores or hardware context), it is wasteful to create more threads than that number. There are two approaches that are commonly taken to address this challenge in Java applications.</p>
<ol>
<li>thread pool: threads can be reused across multiple requests instead of creating a new thread for each request.</li>
<li>lightweight tasking (e.g., as in Java’s ForkJoin framework) which execute on a thread pool with a bounded number of threads, and offer the advantage that the overhead of task creation is significantly smaller than that of thread creation. </li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> processingCount = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    SampleThread(<span class="keyword">int</span> processingCount) &#123;</span><br><span class="line">        <span class="keyword">this</span>.processingCount = processingCount;</span><br><span class="line">        LOGGER.info(<span class="string">"Thread Created"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"Thread "</span> + <span class="keyword">this</span>.getName() + <span class="string">" started"</span>);</span><br><span class="line">        <span class="keyword">while</span> (processingCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                LOGGER.info(<span class="string">"Thread "</span> + <span class="keyword">this</span>.getName() + <span class="string">" interrupted"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            processingCount--;</span><br><span class="line">        &#125;</span><br><span class="line">        LOGGER.info(<span class="string">"Thread "</span> + <span class="keyword">this</span>.getName() + <span class="string">" exiting"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givenStartedThread_whenJoinCalled_waitsTillCompletion</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    Thread t2 = <span class="keyword">new</span> SampleThread(<span class="number">1</span>);</span><br><span class="line">    t2.start();</span><br><span class="line">    LOGGER.info(<span class="string">"Invoking join"</span>);</span><br><span class="line">    t2.join();</span><br><span class="line">    LOGGER.info(<span class="string">"Returned from join"</span>);</span><br><span class="line">    assertFalse(t2.isAlive());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// INFO: Thread Created</span></span><br><span class="line"><span class="comment">// INFO: Invoking join</span></span><br><span class="line"><span class="comment">// INFO: Thread Thread-1 started</span></span><br><span class="line"><span class="comment">// INFO: Thread Thread-1 exiting</span></span><br><span class="line"><span class="comment">// INFO: Returned from join</span></span><br></pre></td></tr></table></figure>
<h2 id="MPI-and-Multithreading"><a href="#MPI-and-Multithreading" class="headerlink" title="MPI and Multithreading"></a>MPI and Multithreading</h2><p><strong>Lecture Summary</strong>: In this lecture, we learned how to extend the Message Passing Interface (MPI) with threads. As we learned earlier in the lecture on Processes and Threads, it can be inefficient to create one process per processor core in a multicore node since there is a lot of unnecessary duplication of memory, resources, and overheads when doing so. This same issue arises for MPI programs in which each rank corresponds to a single-threaded process by default. Thus, there are many motivations for creating multiple threads in an MPI process, including the fact that threads can communicate with each other much more efficiently using shared memory, compared with the message-passing that is used to communicate among processes.</p>
<p>One approach to enable multithreading in MPI applications is to create one MPI process (rank) per node, which starts execution in a single thread that is referred to as a master thread. This thread calls MPI_Init() and MPI_Finalize() for its rank, and creates a number of worker threads to assist in the computation to be performed within its MPI process. Further, all MPI calls are performed only by the master thread. This approach is referred to as the 𝙼𝙿𝙸_𝚃𝙷𝚁𝙴𝙰𝙳_𝙵𝚄𝙽𝙽𝙴𝙻𝙴𝙳 mode, since, even though there are multiple threads, all MPI calls are “funneled’’ through the master thread. A second more general mode for MPI and multithreading is referred to as 𝙼𝙿𝙸_𝚃𝙷𝚁𝙴𝙰𝙳_SERIALIZED ; in this mode, multiple threads may make MPI calls but must do so one at a time using appropriate concurrency constructs so that the calls are “serialized’’. The most general mode is called MPI_THREAD_MULTIPLE because it allows multiple threads to make MPI calls in parallel; though this mode offers more flexibility than the other modes, it puts an additional burden on the MPI implementation which usually gets reflected in larger overheads for MPI calls relative to the more restrictive modes. Further, even the 𝙼𝙿𝙸_𝚃𝙷𝚁𝙴𝙰𝙳_𝙼𝚄𝙻𝚃𝙸𝙿𝙻𝙴 mode has some notable restrictions, e.g., it is not permitted in this mode for two threads in the same process to wait on the same MPI request related to a nonblocking communication.</p>
<h2 id="Distributed-Actors"><a href="#Distributed-Actors" class="headerlink" title="Distributed Actors"></a>Distributed Actors</h2><p><strong>Lecture Summary</strong>:</p>
<blockquote>
<p>An actor is an object that has a mailbox, local state, a set of methods and an active (logical) thread of control that can receive one message at a time from the mailbox, invoke a method to perform the work needed by that message, and read and update the local state as needed.</p>
</blockquote>
<p>Message-passing in the actor model is nonblocking since the sender and receiver do not need to wait for each other when transmitting messages. The actor paradigm is well suited to both multicore and distributed parallelism, since its message-passing model can be implemented efficiently via shared memory within a single process or in a more distributed manner across multiple processes.</p>
<p>Most actor implementations that support distributed execution require you to perform the following steps.</p>
<ol>
<li>you will need to use some kind of configuration file to specify the host process on which each actor will execute as well as the port that can be used to receive messages from actors on other processes. </li>
<li>you will need the ability to create actors on remote processes.</li>
<li>you will need to provide some kind of logical name to refer to a remote actor (since a reference to the actor object can only be used within the process containing that actor).</li>
<li>messages transmitted among actors that reside in different processes need to be serialized, as in client-server programming.</li>
</ol>
<h2 id="Distributed-Reactive-Programming"><a href="#Distributed-Reactive-Programming" class="headerlink" title="Distributed Reactive Programming"></a>Distributed Reactive Programming</h2><p><strong>Lecture Summary</strong>: In this lecture, we studied the reactive programming model and its suitability for implementing distributed service oriented architectures using asynchronous events. A key idea behind this model is to balance the “push’’ and “pull’’ modes found in different distributed programming models. For example, actors can execute in push mode, since the receiver has no control on how many messages it receives. Likewise, Java streams and Spark RDDs operate in pull mode, since their implementations are demand-driven (lazy). The adoption of distributed reactive programming is on a recent upswing, fueled in part by the availability of the Reactive Streams specification which includes support for multiple programming languages. In the case of Java, the specification consists of four interfaces: 𝙵𝚕𝚘𝚠.𝙿𝚞𝚋𝚕𝚒𝚜𝚑𝚎𝚛, 𝙵𝚕𝚘𝚠.𝚂𝚞𝚋𝚜𝚌𝚛𝚒𝚋𝚎𝚛, 𝙵𝚕𝚘𝚠.𝙿𝚛𝚘𝚌𝚎𝚜𝚜, and 𝙵𝚕𝚘𝚠.𝚂𝚞𝚋𝚜𝚌𝚛𝚒𝚙𝚝𝚒𝚘𝚗.</p>
<p>Conveniently, there is a standard Java implementation of the 𝙵𝚕𝚘𝚠.𝙿𝚞𝚋𝚕𝚒𝚜𝚑𝚎𝚛 interface in the form of the 𝚂𝚞𝚋𝚖𝚒𝚜𝚜𝚒𝚘𝚗𝙿𝚞𝚋𝚕𝚒𝚜𝚑𝚎𝚛 class. If we create an instance of this class called 𝚙𝚞𝚋, a publisher can submit information by calling 𝚙𝚞𝚋.𝚜𝚞𝚋𝚖𝚒𝚝(). Likewise, a subscriber can be registered by calling 𝚙𝚞𝚋.𝚜𝚞𝚋𝚜𝚌𝚛𝚒𝚋𝚎(). Each subscriber has to implement two key methods, 𝚘𝚗𝚂𝚞𝚋𝚜𝚌𝚛𝚒𝚋𝚎() and 𝚘𝚗𝙽𝚎𝚡𝚝(). Both methods allow the subscriber to specify how many elements to request at a time. </p>
<p>Thus, a key benefit of reactive programming is that the programmer can control the “batching” of information between the publisher and the subscriber to achieve a desired balance between the “push” and “pull” modes.</p>
]]></content>
      <categories>
        <category>Big Data Architecture</category>
        <category>Parallel Computation</category>
        <category>Distributed &amp; Cloud Computing</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Message Passing</title>
    <url>/Message-Passing/2019/06/24/</url>
    <content><![CDATA[<h1 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h1><ul>
<li><a href="#mpimessage-passing-interface">MPI(Message Passing Interface)</a><ul>
<li><a href="#mpi的工作方式">MPI的工作方式</a></li>
<li><a href="#点对点通信">点对点通信</a></li>
<li><a href="#群体通信">群体通信</a><ul>
<li><a href="#广播bcast">广播bcast</a></li>
<li><a href="#散播scatter">散播scatter</a></li>
<li><a href="#收集gather">收集gather</a></li>
<li><a href="#规约reduce">规约reduce</a></li>
<li><a href="#非阻塞标准通信">非阻塞标准通信</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#single-program-multiple-data-spmd-model">Single Program Multiple Data (SPMD) Model</a></li>
<li><a href="#point-to-point-communication">Point-to-Point Communication</a></li>
<li><a href="#message-ordering-and-deadlock">Message Ordering and Deadlock</a></li>
<li><a href="#non-blocking-communications">Non-Blocking Communications</a></li>
<li><a href="#collective-communication">Collective Communication</a></li>
</ul>
<h2 id="MPI-Message-Passing-Interface"><a href="#MPI-Message-Passing-Interface" class="headerlink" title="MPI(Message Passing Interface)"></a>MPI(Message Passing Interface)</h2><blockquote>
<p>src <a href="https://zhuanlan.zhihu.com/p/25332041" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/25332041</a><br>src <a href="https://blog.csdn.net/zouxy09/article/details/49031845" target="_blank" rel="noopener">https://blog.csdn.net/zouxy09/article/details/49031845</a></p>
</blockquote>
<ul>
<li>MPI 是基于分布式内存系统，而thread基于共享内存系统；也就是说 MPI 之间的数据共享需要通过消息传递，因为MPI同步的程序属于不同的进程，甚至不同的主机上的不同进程。</li>
<li>MPI不同主机之间的进程协调工作需要安装mpi软件（例如mpich）来完成。</li>
<li>MPI 是一种标准而不是特定的实现，具体的可以有很多不同的实现，例如MPICH、OpenMPI等。</li>
<li>是一种消息传递编程模型，顾名思义，它就是专门服务于进程间通信的。</li>
</ul>
<p>PI的工作方式很好理解，我们可以同时启动一组进程，在同一个通信域中不同的进程都有不同的编号，程序员可以利用MPI提供的接口来给不同编号的进程分配不同的任务和帮助进程相互交流最终完成同一个任务。就好比包工头给工人们编上了工号然后指定一个方案来给不同编号的工人分配任务并让工人相互沟通完成任务。</p>
<p>与多线程的共享式内存不同，由于各个进程都是相互独立的，因此进程间通信再多进程中扮演这非常重要的角色，Python中我们可以使用multiprocessing模块中的pipe、queue、Array、Value等等工具来实现进程间通讯和数据共享，但是在编写起来仍然具有很大的不灵活性。而这一方面正是MPI所擅长的领域。</p>
<p>mpi4py是一个很强大的库，它实现了很多MPI标准中的接口，包括:</p>
<ol>
<li>点对点通信</li>
<li>组内集合通信</li>
<li>非阻塞通信</li>
<li>重复非阻塞通信</li>
<li>组间通信等</li>
</ol>
<h3 id="MPI的工作方式"><a href="#MPI的工作方式" class="headerlink" title="MPI的工作方式"></a>MPI的工作方式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> mpi4py <span class="keyword">import</span> MPI</span><br><span class="line">print(<span class="string">"hello world"</span>)</span><br><span class="line">print(<span class="string">"my rank is: %d"</span> % MPI.rank)</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mpirun –np 5 python test.py</span><br></pre></td></tr></table></figure>
<p>-np5 指定启动5个mpi进程来执行后面的程序。相当于对脚本拷贝了5份，每个进程运行一份，互不干扰。在运行的时候代码里面唯一的不同，就是各自的rank也就是ID不一样。所以这个代码就会打印5个hello world和5个不同的rank值，从0到4.</p>
<h3 id="点对点通信"><a href="#点对点通信" class="headerlink" title="点对点通信"></a>点对点通信</h3><p>点对点通信（Point-to-PointCommunication）的能力是信息传递系统最基本的要求。意思就是让两个进程直接可以传输数据，也就是一个发送数据，另一个接收数据。接口就两个，send和recv，来个例子:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mpi4py.MPI <span class="keyword">as</span> MPI</span><br><span class="line"> </span><br><span class="line">comm = MPI.COMM_WORLD</span><br><span class="line">comm_rank = comm.Get_rank()</span><br><span class="line">comm_size = comm.Get_size()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># point to point communication</span></span><br><span class="line">data_send = [comm_rank]*<span class="number">5</span></span><br><span class="line">comm.send(data_send,dest=(comm_rank+<span class="number">1</span>)%comm_size)</span><br><span class="line">data_recv =comm.recv(source=(comm_rank<span class="number">-1</span>)%comm_size)</span><br><span class="line">print(<span class="string">"my rank is %d, and Ireceived:"</span> % comm_rank)</span><br><span class="line"><span class="keyword">print</span> data_recv</span><br><span class="line"></span><br><span class="line"><span class="comment"># my rank is 0, and I received:</span></span><br><span class="line"><span class="comment"># [4, 4, 4, 4, 4]</span></span><br><span class="line"><span class="comment"># my rank is 1, and I received:</span></span><br><span class="line"><span class="comment"># [0, 0, 0, 0, 0]</span></span><br><span class="line"><span class="comment"># my rank is 2, and I received:</span></span><br><span class="line"><span class="comment"># [1, 1, 1, 1, 1]</span></span><br><span class="line"><span class="comment"># my rank is 3, and I received:</span></span><br><span class="line"><span class="comment"># [2, 2, 2, 2, 2]</span></span><br><span class="line"><span class="comment"># my rank is 4, and I received:</span></span><br><span class="line"><span class="comment"># [3, 3, 3, 3, 3]</span></span><br></pre></td></tr></table></figure>
<p>可以看到，每个进程都创建了一个数组，然后把它传递给下一个进程，最后的那个进程传递给第一个进程。comm_size就是mpi的进程个数，也就是-np指定的那个数。MPI.COMM_WORLD 表示进程所在的通信组。</p>
<p>但这里面有个需要注意的问题，如果我们要发送的数据比较小的话，mpi会缓存我们的数据，也就是说执行到send这个代码的时候，会缓存被send的数据，然后继续执行后面的指令，而不会等待对方进程执行recv指令接收完这个数据。但是，如果要发送的数据很大，那么进程就是挂起等待，直到接收进程执行了recv指令接收了这个数据，进程才继续往下执行。所以上述的代码发送[rank]<em>5没啥问题，如果发送[rank]</em>500程序就会半死不活的样子了。因为所有的进程都会卡在发送这条指令，等待下一个进程发起接收的这个指令，但是进程是执行完发送的指令才能执行接收的指令，这就和死锁差不多了。所以一般，我们将其修改成以下的方式:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mpi4py.MPI <span class="keyword">as</span> MPI</span><br><span class="line"> </span><br><span class="line">comm = MPI.COMM_WORLD</span><br><span class="line">comm_rank = comm.Get_rank()</span><br><span class="line">comm_size = comm.Get_size()</span><br><span class="line"> </span><br><span class="line">data_send = [comm_rank]*<span class="number">5</span></span><br><span class="line"><span class="keyword">if</span> comm_rank == <span class="number">0</span>:</span><br><span class="line">   comm.send(data_send, dest=(comm_rank+<span class="number">1</span>)%comm_size)</span><br><span class="line"><span class="keyword">if</span> comm_rank &gt; <span class="number">0</span>:</span><br><span class="line">   data_recv = comm.recv(source=(comm_rank<span class="number">-1</span>)%comm_size)</span><br><span class="line">   comm.send(data_send, dest=(comm_rank+<span class="number">1</span>)%comm_size)</span><br><span class="line"><span class="keyword">if</span> comm_rank == <span class="number">0</span>:</span><br><span class="line">   data_recv = comm.recv(source=(comm_rank<span class="number">-1</span>)%comm_size)</span><br><span class="line">print(<span class="string">"my rank is %d, and Ireceived:"</span> % comm_rank)</span><br><span class="line"><span class="keyword">print</span> data_recv</span><br></pre></td></tr></table></figure>
<p>第一个进程一开始就发送数据，其他进程一开始都是在等待接收数据，这时候进程1接收了进程0的数据，然后发送进程1的数据，进程2接收了，再发送进程2的数据……知道最后进程0接收最后一个进程的数据，从而避免了上述问题。</p>
<p>一个比较常用的方法是封一个组长，也就是一个主进程，一般是进程0作为主进程leader。主进程将数据发送给其他的进程，其他的进程处理数据，然后返回结果给进程0。换句话说，就是进程0来控制整个数据处理流程。</p>
<h3 id="群体通信"><a href="#群体通信" class="headerlink" title="群体通信"></a>群体通信</h3><p>群体通信是发送和接收两类，一个是一次性把数据发给所有人，另一个是一次性从所有人那里回收结果。</p>
<h4 id="广播bcast"><a href="#广播bcast" class="headerlink" title="广播bcast"></a>广播bcast</h4><p>将一份数据发送给所有的进程。例如我有200份数据，有10个进程，那么每个进程都会得到这200份数据。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mpi4py.MPI <span class="keyword">as</span> MPI</span><br><span class="line"> </span><br><span class="line">comm = MPI.COMM_WORLD</span><br><span class="line">comm_rank = comm.Get_rank()</span><br><span class="line">comm_size = comm.Get_size()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> comm_rank == <span class="number">0</span>:</span><br><span class="line">   data = range(comm_size)</span><br><span class="line">data = comm.bcast(data <span class="keyword">if</span> comm_rank == <span class="number">0</span> <span class="keyword">else</span> <span class="keyword">None</span>, root=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'rank %d, got:'</span> % (comm_rank)</span><br><span class="line"><span class="keyword">print</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># rank 0, got:</span></span><br><span class="line"><span class="comment"># [0, 1, 2, 3, 4]</span></span><br><span class="line"><span class="comment"># rank 1, got:</span></span><br><span class="line"><span class="comment"># [0, 1, 2, 3, 4]</span></span><br><span class="line"><span class="comment"># rank 2, got:</span></span><br><span class="line"><span class="comment"># [0, 1, 2, 3, 4]</span></span><br><span class="line"><span class="comment"># rank 3, got:</span></span><br><span class="line"><span class="comment"># [0, 1, 2, 3, 4]</span></span><br><span class="line"><span class="comment"># rank 4, got:</span></span><br><span class="line"><span class="comment"># [0, 1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>
<h4 id="散播scatter"><a href="#散播scatter" class="headerlink" title="散播scatter"></a>散播scatter</h4><p>将一份数据平分给所有的进程。例如我有200份数据，有10个进程，那么每个进程会分别得到20份数据。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mpi4py.MPI <span class="keyword">as</span> MPI</span><br><span class="line"> </span><br><span class="line">comm = MPI.COMM_WORLD</span><br><span class="line">comm_rank = comm.Get_rank()</span><br><span class="line">comm_size = comm.Get_size()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> comm_rank == <span class="number">0</span>:</span><br><span class="line">   data = range(comm_size)</span><br><span class="line">   <span class="keyword">print</span> data</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   data = <span class="keyword">None</span></span><br><span class="line">local_data = comm.scatter(data, root=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'rank %d, got:'</span> % comm_rank</span><br><span class="line"><span class="keyword">print</span> local_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># [0, 1, 2, 3, 4]</span></span><br><span class="line"><span class="comment"># rank 0, got:</span></span><br><span class="line"><span class="comment"># 0</span></span><br><span class="line"><span class="comment"># rank 1, got:</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># rank 2, got:</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># rank 3, got:</span></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># rank 4, got:</span></span><br><span class="line"><span class="comment"># 4</span></span><br></pre></td></tr></table></figure>
<h4 id="收集gather"><a href="#收集gather" class="headerlink" title="收集gather"></a>收集gather</h4><p>那有发送，就有一起回收的函数。Gather是将所有进程的数据收集回来，合并成一个列表。下面联合scatter和gather组成一个完成的分发和收回过程：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mpi4py.MPI <span class="keyword">as</span> MPI</span><br><span class="line"> </span><br><span class="line">comm = MPI.COMM_WORLD</span><br><span class="line">comm_rank = comm.Get_rank()</span><br><span class="line">comm_size = comm.Get_size()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> comm_rank == <span class="number">0</span>:</span><br><span class="line">   data = range(comm_size)</span><br><span class="line">   <span class="keyword">print</span> data</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   data = <span class="keyword">None</span></span><br><span class="line">local_data = comm.scatter(data, root=<span class="number">0</span>)</span><br><span class="line">local_data = local_data * <span class="number">2</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'rank %d, got and do:'</span> % comm_rank</span><br><span class="line"><span class="keyword">print</span> local_data</span><br><span class="line">combine_data = comm.gather(local_data,root=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> comm_rank == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">print</span> combine_data</span><br><span class="line"></span><br><span class="line"><span class="comment"># [0, 1, 2, 3, 4]</span></span><br><span class="line"><span class="comment"># rank 0, got and do:</span></span><br><span class="line"><span class="comment"># 0</span></span><br><span class="line"><span class="comment"># rank 1, got and do:</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># rank 2, got and do:</span></span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line"><span class="comment"># rank 4, got and do:</span></span><br><span class="line"><span class="comment"># 8</span></span><br><span class="line"><span class="comment"># rank 3, got and do:</span></span><br><span class="line"><span class="comment"># 6</span></span><br><span class="line"><span class="comment"># [0, 2, 4, 6, 8]</span></span><br></pre></td></tr></table></figure>
<p> Root进程将数据通过scatter等分发给所有的进程，等待所有的进程都处理完后（这里只是简单的乘以2），root进程再通过gather回收他们的结果，和分发的原则一样，组成一个list。</p>
<h4 id="规约reduce"><a href="#规约reduce" class="headerlink" title="规约reduce"></a>规约reduce</h4><p>规约是指不但将所有的数据收集回来，收集回来的过程中还进行了简单的计算，例如求和，求最大值等等。为什么要有这个呢？我们不是可以直接用gather全部收集回来了，再对列表求个sum或者max就可以了吗？这样不是累死组长吗？为什么不充分使用每个工人呢？规约实际上是使用规约树来实现的。例如求max，完成可以让工人两两pk后，再返回两两pk的最大值，然后再对第二层的最大值两两pk，直到返回一个最终的max给组长。组长就非常聪明的将工作分配下工人高效的完成了。这是O(n)的复杂度，下降到O(log n)（底数为2）的复杂度。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mpi4py.MPI <span class="keyword">as</span> MPI</span><br><span class="line"> </span><br><span class="line">comm = MPI.COMM_WORLD</span><br><span class="line">comm_rank = comm.Get_rank()</span><br><span class="line">comm_size = comm.Get_size()</span><br><span class="line"><span class="keyword">if</span> comm_rank == <span class="number">0</span>:</span><br><span class="line">   data = range(comm_size)</span><br><span class="line">   <span class="keyword">print</span> data</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   data = <span class="keyword">None</span></span><br><span class="line">local_data = comm.scatter(data, root=<span class="number">0</span>)</span><br><span class="line">local_data = local_data * <span class="number">2</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'rank %d, got and do:'</span> % comm_rank</span><br><span class="line"><span class="keyword">print</span> local_data</span><br><span class="line">all_sum = comm.reduce(local_data, root=<span class="number">0</span>,op=MPI.SUM)</span><br><span class="line"><span class="keyword">if</span> comm_rank == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">'sumis:%d'</span> % all_sum</span><br><span class="line"></span><br><span class="line"><span class="comment"># [0, 1, 2, 3, 4]</span></span><br><span class="line"><span class="comment"># rank 0, got and do:</span></span><br><span class="line"><span class="comment"># 0</span></span><br><span class="line"><span class="comment"># rank 1, got and do:</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># rank 2, got and do:</span></span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line"><span class="comment"># rank 3, got and do:</span></span><br><span class="line"><span class="comment"># 6</span></span><br><span class="line"><span class="comment"># rank 4, got and do:</span></span><br><span class="line"><span class="comment"># 8</span></span><br><span class="line"><span class="comment"># sum is:20</span></span><br></pre></td></tr></table></figure>
<h4 id="非阻塞标准通信"><a href="#非阻塞标准通信" class="headerlink" title="非阻塞标准通信"></a>非阻塞标准通信</h4><p>所有的阻塞通信mpi都提供了一个非阻塞的版本，类似与我们编写异步程序不阻塞在耗时的IO上是一样的，MPI的非阻塞通信也不会阻塞消息的传递过程中，这样能够充分利用处理器资源提升整个程序的效率。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> mpi4py <span class="keyword">import</span> MPI                                         </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np                                             </span><br><span class="line">                                                               </span><br><span class="line">comm = MPI.COMM_WORLD                                          </span><br><span class="line">rank = comm.Get_rank()                                         </span><br><span class="line">size = comm.Get_size()                                         </span><br><span class="line">                                                               </span><br><span class="line"><span class="keyword">if</span> rank == <span class="number">0</span>:                                                  </span><br><span class="line">    data = range(<span class="number">10</span>)                                           </span><br><span class="line">    comm.isend(data, dest=<span class="number">1</span>, tag=<span class="number">11</span>)                           </span><br><span class="line">    print(<span class="string">"process &#123;&#125; immediate send &#123;&#125;..."</span>.format(rank, data))</span><br><span class="line"><span class="keyword">else</span>:                                                          </span><br><span class="line">    data = comm.recv(source=<span class="number">0</span>, tag=<span class="number">11</span>)                         </span><br><span class="line">    print(<span class="string">"process &#123;&#125; recv &#123;&#125;..."</span>.format(rank, data))</span><br><span class="line"></span><br><span class="line"><span class="comment"># process 0 immediate send [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]...</span></span><br><span class="line"><span class="comment"># process 1 recv [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]...</span></span><br></pre></td></tr></table></figure>
<h2 id="Single-Program-Multiple-Data-SPMD-Model"><a href="#Single-Program-Multiple-Data-SPMD-Model" class="headerlink" title="Single Program Multiple Data (SPMD) Model"></a>Single Program Multiple Data (SPMD) Model</h2><p><strong>Lecture Summary</strong>: n this lecture, we studied the Single Program Multiple Data (SPMD) model, which can enable the use of a cluster of distributed nodes as a single parallel computer. Each node in such a cluster typically consist of a multicore processor, a local memory, and a network interface card (NIC) that enables it to communicate with other nodes in the cluster.  One of the biggest challenges that arises when trying to use the distributed nodes as a single parallel computer is that of <strong>data distribution</strong>.In general, we would want to allocate large data structures that span multiple nodes in the cluster; this logical view of data structures is often referred to as a <strong>global view</strong>. However, a typical physical implementation of this global view on a cluster is obtained by distributing pieces of the global data structure across different nodes, so that each node has a <strong>local view</strong> of the piece of the data structure allocated in its local memory. In many cases in practice, the programmer has to undertake the conceptual burden of mapping back and forth between the logical global view and the physical local views. Since there is one logical program that is executing on the individual pieces of data, this abstraction of a cluster is referred to as the Single Program Multiple Data (SPMD) model.</p>
<p>In this module, we will focus on a commonly used implementation of the SPMD model, that is referred to as the Message Passing Interface (MPI). When using MPI, you designate a fixed set of processes that will participate for the entire lifetime of the global application. It is common for each node to execute one MPI process, but it is also possible to execute more than one MPI process per multicore node so as to improve the utilization of processor cores within the node. Each process starts executing its own copy of the MPI program, and starts by calling the mpi.MPI_Init()  method, where mpi instance of the MPI class used by the process. After that, each process can call the MPI application and the MPI_Comm_rank(mpi.MPI_COMM_WORLD) method to determine the process’ own rank within the range,0…(S-1), where S = MPI_Comm_size()</p>
<p>In this lecture, we studied how a global view, XG, of array X can be implemented by S local arrays (one per process) of size, XL.length = XG.length / S. For simplicity, assume that XG.length is a multiple of S. Then, if we logically want to set $XG[i] := i$ for all logical elements of XG,  we can instead set XL[i]:= L<em>R + i in each local array, where L = XL.length and R = MPI_Comm_rank(). Thus process 0’s copy of XL will contain logical elements XG[0…L-1], process 1’s copy of XL will contain logical elements XG[L…2</em>L-1], and so on. Thus, we see that the SPMD approach is very different from client server programming, where each process can be executing a different program.</p>
<h2 id="Point-to-Point-Communication"><a href="#Point-to-Point-Communication" class="headerlink" title="Point-to-Point Communication"></a>Point-to-Point Communication</h2><p><strong>Lecture Summary</strong>: In this lecture, we studied how to perform point-to-point communication in MPI by sending and receiving messages. In particular, we worked out the details for a simple scenario in which process 0 sends a string, “ABCD’’, to process 1. Since MPI programs follow the SPMD model, we have to ensure that the same program behaves differently on processes 0 and 1. This was achieved by using an if-then-else statement that checks the value of the rank of the process that it is executing on. If the rank is zero, we include the necessary code for calling MPI_Send(); otherwise, we include the necessary code for calling MPI_Recv()  (assuming that this simple program is only executed with two processes). Both calls include a number of parameters. The MPI_Send() call specifies the substring to be sent as a subarray by providing the string, offset, and data type, as well as the rank of the receiver, and a tag to assist with matching send and receive calls (we used a tag value of 99 in the lecture). The MPI_Recv() call (in the else part of the if-then-else statement) includes a buffer in which to receive the message, along with the offset and data type, as well as the rank of the sender and the tag. Each send/receive operation waits (or is blocked) until its dual operation is performed by the other process. Once a pair of parallel and compatible MPI_Send() and MPI_Recv() calls is matched, the actual communication is performed by the MPI library. This approach to matching pairs of send/receive calls in SPMD programs is referred to as two-sided communication.</p>
<p>As indicated in the lecture, the current implementation of MPI only supports communication of (sub)arrays of primitive data types. However, since we have already learned how to serialize and deserialize objects into/from bytes, the same approach can be used in MPI programs by communicating arrays of bytes.</p>
<h2 id="Message-Ordering-and-Deadlock"><a href="#Message-Ordering-and-Deadlock" class="headerlink" title="Message Ordering and Deadlock"></a>Message Ordering and Deadlock</h2><p><strong>Lecture Summary</strong>: In this lecture, we studied some important properties of the message-passing model with send/receive operations, namely message ordering and deadlock. For message ordering, we discussed a simple example with four MPI processes, R0,R1,R2,R3 (with ranks 0…3  respectively). In our example, process R1 sends message A to process R0 and process R2 sends message B to process R3. We observed that there was no guarantee that process R1’s send request would complete before process R2’s request, even if process R1 initiated its send request before process R2 Thus, there is no guarantee of the temporal ordering of these two messages. In MPI, the only guarantee of message ordering is when multiple messages are sent with the same sender, receiver, data type, and tag — these messages will all be ordered in accordance with when their send operations were initiated.</p>
<p>We learned that send and receive operations can lead to an interesting parallel programming challenge called deadlock. There are many ways to create deadlocks in MPI programs. In the lecture, we studied a simple example in which process R0 attempts to send message X to process R1, and process R1 attempts to send message Y to Process R0. Since both sends are attempted in parallel, processes R0 and R1 remain blocked indefinitely as they wait for matching receive operations, thus resulting in a classical deadlock cycle.</p>
<p>We also learned two ways to fix such a deadlock cycle. The first is by interchanging the two statements in one of the processes (say process R1). As a result, the send operation in process R0 will match the receive operation in process R1, and both processes can move forward with their next communication requests. Another approach is to use MPI’s sendrecv() operation which includes all the parameters for the send and for the receive operations. By combining send and receive into a single operation, the MPI runtime ensures that deadlock is avoided because a sendrecv() call in process R0 can be matched with a sendrecv() call in process R1 instead of having to match individual send and receive operations.</p>
<h2 id="Non-Blocking-Communications"><a href="#Non-Blocking-Communications" class="headerlink" title="Non-Blocking Communications"></a>Non-Blocking Communications</h2><p>In this lecture, we studied non-blocking communications, which are implemented via the <strong>MPI_Isend()</strong> and <strong>MPI_Irecv()</strong> API calls.<br>The I in <strong>MPI_Isend()</strong> and <strong>MPI_Irecv()</strong> stands for “Immediate’’ because these calls return immediately instead of blocking until completion. Each such call returns an object of type MPI_Request which can be used as a handle to track the progress of the corresponding send/receive operation.</p>
<p>The main benefit of this approach is that the amount of idle time spent waiting for communications to complete is reduced when using non-blocking communications, since the Isend and Irecv operations can be overlapped with local computations. Also, while it is common for Isend and Irecv operations to be paired with each other, it is also possible for a nonblocking send/receive operation in one process to be paired with a blocking receive/send operation in another process.</p>
<h2 id="Collective-Communication"><a href="#Collective-Communication" class="headerlink" title="Collective Communication"></a>Collective Communication</h2><p>For a broadcast operation, all MPI processes execute an MPI_Bcast() API call with a specified root process that is the source of the data to be broadcasted. A key property of collective operations is that each process must wait until all processes reach the same collective operation, before the operation can be performed. This form of waiting is referred to as a <strong>barrier</strong>. After the operation is completed, all processes can move past the implicit barrier in the collective call. In the case of MPI_Bcast(), each process will have obtained a copy of the value broadcasted by the root process.</p>
]]></content>
      <categories>
        <category>Big Data Architecture</category>
        <category>Distributed &amp; Cloud Computing</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Client-Server Programming</title>
    <url>/Client-Server-Programming/2019/06/23/</url>
    <content><![CDATA[<h1 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h1><ul>
<li><a href="#introduction-to-sockets">Introduction to Sockets</a></li>
<li><a href="#serialization-and-deserialization">Serialization and Deserialization</a></li>
<li><a href="#remote-method-invocation">Remote Method Invocation</a><ul>
<li><a href="#远程调用">远程调用</a><ul>
<li><a href="#rpc">RPC</a></li>
<li><a href="#rmi">RMI</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#multicast-sockets">Multicast Sockets</a></li>
<li><a href="#publish-subscribe-pattern">Publish-Subscribe Pattern</a></li>
</ul>
<h2 id="Introduction-to-Sockets"><a href="#Introduction-to-Sockets" class="headerlink" title="Introduction to Sockets"></a>Introduction to Sockets</h2><p><strong>Lecture Summary</strong>: In this lecture, we learned about client-server programming, and how two distributed Java applications can communicate with each other using sockets. Since each application in this scenario runs on a distinct Java Virtual Machine (JVM) process, we used the terms “application’’, “JVM’’ and “process’’ interchangeably in the lecture. For JVM A and JVM B to communicate with each other, we assumed that JVM A plays the “client’’ role and JVM B the “server’’ role. To establish the connection, the main thread in JVM B first creates a ServerSocket which is initialized with a designated URL and port number. It then waits for client processes to connect to this socket by invoking the socket.accept() method, which returns an object of type Socket. The s.getInputStream() and s.getOutputStream() methods can be invoked on this object to perform read and write operations via the socket, using the same APIs that you use for file I/O via streams.</p>
<p>Once JVM B has set up a server socket, JVM A can connect to it as a client by creating a Socket object with the appropriate parameters to identify JVM B’s server port. As in the server case, the getInputStream() and getOutputStream() methods can be invoked on this object to perform read and write operations.  With this setup, JVM A and JVM B can communicate with each other by using read and write operations, which get implemented as messages that flow across the network. Client-server communication occurs at a lower level and scale than MapReduce, which implicitly accomplishes communication among large numbers of processes. Hence, client-server programming is typically used for building distributed applications with small numbers of processes.</p>
<p><img src="1.png" alt></p>
<h2 id="Serialization-and-Deserialization"><a href="#Serialization-and-Deserialization" class="headerlink" title="Serialization and Deserialization"></a>Serialization and Deserialization</h2><p><strong>Lecture Summary</strong>: This lecture reviewed serialization and deserialization, which are essential concepts for all forms of data transfers in Java applications, including file I/O and communication in distributed applications. When communications are performed using input and output streams, as discussed in the previous lecture, the unit of data transfer is a sequence of bytes. Thus, it becomes important to serialize objects into bytes in the sender process, and to deserialize bytes into objects in the receiver process.</p>
<ol>
<li><strong>custom approach</strong>: the programmer provides custom code to perform the serialization and deserialization. However, writing custom serializers and deserializers can become complicated when nested objects are involved, e.g.,if object x contains a field,f3, which points to object y. In this case, the serialization of object x by default also needs to include a serialization of object y. </li>
<li><strong>XML</strong>: since XML was designed to serve as a data interchange standard. There are many application frameworks that support conversion of application objects into XML objects, which is convenient because typical XML implementations in Java include built-in serializers and deserializers. However, the downside is that there can be a lot of <strong>metadata</strong> created when converting Java objects into XML, and that metadata can add to the size of the serialized data being communicated.</li>
<li><strong>Java Serialization and Deserialization</strong>: This works by identifying classes that implement the Serializable interface, and relying on a guarantee that such classes will have built-in serializers and deserializers, analogous to classes with built-in toString() methods. In this situation, if object x is an instance of a serializable class and its field f3 points to object y,  then object y must also be an instance of a serializable class (otherwise an exception will be thrown when attempting to serialize object x). An important benefit of this approach is that only one copy of each object is included in the serialization, even if there may be multiple references to the object, e.g., if fields f2 and f3  both point to object y. Another benefit is that cycles in object references are handled intelligently, without getting into an infinite loop when following object references. Yet another important benefit is that this approach allows identification of fields that should be skipped during the serialization/deserialization steps because it may be unnecessary and inefficient to include them in the communication. Such fields are identified by declaring them as transient.</li>
<li><strong>Interface Definition Language (IDL)</strong>: A recent example of using the IDL approach can be found in Google’s Protocol Buffers framework. A notable benefit of this approach relative to Java serialization is that protocol buffers can support communication of objects across processes implemented in different languages, e.g., Java, C++, Python. The downside is that extra effort is required to enable the serialization (e.g., creating a .proto file as an IDL, and including an extra compile step for the IDL in the build process), which is not required when using Java serialization for communication among Java processes.</li>
</ol>
<h2 id="Remote-Method-Invocation"><a href="#Remote-Method-Invocation" class="headerlink" title="Remote Method Invocation"></a>Remote Method Invocation</h2><p><strong>Lecture Summary</strong>: This lecture reviewed the concept of Remote Method Invocation (RMI), which extends the notion of method invocation in a sequential program to a distributed programming setting. As an example, let us consider a scenario in which a thread running on JVM A wants to invoke a method, foo(), on object x located on JVM B. This can be accomplished using sockets and messages, but that approach would entail writing a lot of extra code for encoding and decoding the method call, its arguments, and its return value. In contrast, Java RMI provides a very convenient way to directly address this use case.</p>
<p>To enable RMI, we run an RMI client on JVM A and an RMI server on JVM B. Further, JVM A is set up to contain a <strong>stub object</strong> or proxy object for remote object x located on JVM B. (In early Java RMI implementations, a skeleton object would also need to be allocated on the server side, JVM B, as a proxy for the shared object, but this is no longer necessary in modern implementations.) When a stub method is invoked, it transparently initiates a connection with the remote JVM containing the remote object, x, serializes and communicates the method parameters to the remote JVM, receives the result of the method invocation, and deserializes the result into object y(say) which is then passed on to the caller of method x.foo() as the result of the RMI call.</p>
<p>Thus, RMI takes care of a number of tedious details related to remote communication. However, this convenience comes with a few setup requirements as well. First, objects x and y must be serializable, because their values need to be communicated between JVMs A and B, Second, object x must be included in the RMI registry, so that it can be accessed through a global name rather than a local object reference. The registry in turn assists in mapping from global names to references to local stub objects.  In summary, a key advantage of RMI is that, once this setup in place, method invocations across distributed processes can be implemented almost as simply as standard method invocations.</p>
<h3 id="远程调用"><a href="#远程调用" class="headerlink" title="远程调用"></a>远程调用</h3><blockquote>
<p>src: <a href="https://www.jb51.net/article/49436.htm" target="_blank" rel="noopener">https://www.jb51.net/article/49436.htm</a></p>
</blockquote>
<p>远程调用使得调用远程服务器的对象、方法的方式就和调用本地对象、方法的方式差不多，因为我们通过网络编程把这些都隐藏起来了。远程调用是分布式系统的基础。</p>
<ol>
<li>远程过程调用（RPC）</li>
<li>远程方法调用（RMI）</li>
</ol>
<h4 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h4><p>RPC属于函数级别的远程调用，其多是通过HTTP传输数据，数据形式有XML、JSON、序列化数据等。在此，用python做一个xml-rpc的示例。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 服务器端server.py</span></span><br><span class="line"><span class="comment">## s是一个绑定了本地8080端口的服务器对象，register_function()方法将函数add注册到s中。serve_forever()启动服务器。</span></span><br><span class="line"><span class="keyword">from</span> SimpleXMLRPCServer <span class="keyword">import</span> SimpleXMLRPCServer   </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = SimpleXMLRPCServer((<span class="string">'127.0.0.1'</span>, <span class="number">8080</span>))</span><br><span class="line">    s.register_function(add)</span><br><span class="line">    s.serve_forever()</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">## 客户端client.py：</span></span><br><span class="line"><span class="keyword">from</span> xmlrpclib <span class="keyword">import</span> ServerProxy</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = ServerProxy(<span class="string">"http://127.0.0.1:8080"</span>)</span><br><span class="line">    <span class="keyword">print</span> s.add(<span class="number">3</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure>
<p>我们用wireshark看一下这期间传递的数据是什么样子的。</p>
<ol>
<li>请求的数据:</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version='1.0' ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">methodCall</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">methodName</span>&gt;</span></span><br><span class="line">        add</span><br><span class="line">    <span class="tag">&lt;/<span class="name">methodName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">params</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">int</span>&gt;</span> 3 <span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">int</span>&gt;</span> 4 <span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">params</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">methodCall</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>响应的数据</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version='1.0' ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">methodResponse</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">params</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">int</span>&gt;</span> 7 <span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">params</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">methodResponse</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a>RMI</h4><p>RMI意为远程方法调用，粒度比RPC要大，因为它的基本单位是对象。其大致思路是这样的：创建RMI服务器对象，将实例化的某个对象以指定的服务名称（也可以是多个对象，但是服务名称不应相同）注册到RMI服务器对象中，之后启动RMI服务器。服务器等待客户端发送的数据（包括服务名称、函数名、参数），将处理结果返回给客户端。 Pyro4是一个基于python的RMI实现，下面我们用Pyro4创建一个RMI服务器，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 服务器端 server2.py：</span></span><br><span class="line"><span class="comment">## uri变量是Pyro4用自己的方法为greeting_maker对象生成的uri，其中包括套接字以及为greeting_maker生成的唯一的id。这个id相当于服务名称，当然也可以指定更易懂的服务名称。</span></span><br><span class="line"><span class="keyword">import</span> Pyro4</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GreetingMaker</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_fortune</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello, &#123;0&#125;. \n"</span> .format(name)</span><br><span class="line">greeting_maker=GreetingMaker()</span><br><span class="line">daemon=Pyro4.Daemon()                </span><br><span class="line">uri=daemon.register(greeting_maker)   </span><br><span class="line"><span class="keyword">print</span> <span class="string">"Ready. Object uri ="</span>, uri      </span><br><span class="line">daemon.requestLoop()</span><br><span class="line"></span><br><span class="line"><span class="comment">## 客户端 client.py</span></span><br><span class="line"><span class="comment">## 这其中要输入的uri也就是server2.py生成的uri。通过给Pyro4.Proxy传递greeting_maker的uri，可以认为和服务器端的greeting_maker建立的连接，然后调用greeting_maker的get_fortune()方法。</span></span><br><span class="line"><span class="keyword">import</span> Pyro4</span><br><span class="line">uri=uri</span><br><span class="line">name=<span class="string">"zhang ruochi"</span></span><br><span class="line">greeting_maker=Pyro4.Proxy(uri)        </span><br><span class="line"><span class="keyword">print</span> greeting_maker.get_fortune(name)</span><br></pre></td></tr></table></figure>
<h2 id="Multicast-Sockets"><a href="#Multicast-Sockets" class="headerlink" title="Multicast Sockets"></a>Multicast Sockets</h2><p><strong>Lecture Summary</strong>: In this lecture, we learned about multicast sockets, which are a generalization of the standard socket interface that we studied earlier. Standard sockets can be viewed as unicast communications, in which a message is sent from a source to a single destination. Broadcast communications represent a simple extension to unicast, in which a message can be sent efficiently to all nodes in the same local area network as the sender. In contrast, multicast sockets enable a sender to efficiently send the same message to a specified set of receivers on the Internet. This capability can be very useful for a number of applications, which include news feeds, video conferencing, and multi-player games.  </p>
<blockquote>
<p>One reason why a 1:n multicast socket is more efficient than n 1:1 sockets is because Internet routers have built-in support for the multicast capability.</p>
</blockquote>
<p>In recognition of this need, the Java platform includes support for a 𝙼𝚞𝚕𝚝𝚒𝚌𝚊𝚜𝚝𝚂𝚘𝚌𝚔𝚎𝚝 class, which can be used to enable a process to join a group associated with a given 𝙼𝚞𝚕𝚝𝚒𝚌𝚊𝚜𝚝𝚂𝚘𝚌𝚔𝚎𝚝 instance. A member of a group can send a message to all other processes in the group, and can also receive messages sent by other members.This is analogous to how members of a group-chat communicate with each other. Multicast messages are restricted to datagrams, which are usually limited in size to 64KB. Membership in the group can vary dynamically, i.e., processes can decide to join or leave a group associated with a 𝙼𝚞𝚕𝚝𝚒𝚌𝚊𝚜𝚝𝚂𝚘𝚌𝚔𝚎𝚝 instance as they choose. Further, just as with group-chats, a process can be a member of multiple groups.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## sender.py</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">SENDERIP = <span class="string">'192.168.0.116'</span><span class="comment">#本地ip</span></span><br><span class="line">SENDERPORT = <span class="number">1501</span><span class="comment">#本地接口</span></span><br><span class="line">MYPORT = <span class="number">1234</span><span class="comment">#发送数据到该端口</span></span><br><span class="line">MYGROUP = <span class="string">'224.1.1.1'</span><span class="comment">#组播组</span></span><br><span class="line">MYTTL = <span class="number">255</span> <span class="comment"># 发送数据的TTL值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sender</span><span class="params">()</span>:</span></span><br><span class="line">    s = socket(AF_INET, SOCK_DGRAM,IPPROTO_UDP)</span><br><span class="line">    s.bind((SENDERIP,SENDERPORT))</span><br><span class="line">    <span class="comment"># Set Time-to-live (optional)</span></span><br><span class="line">    ttl_bin = struct.pack(<span class="string">'@i'</span>, MYTTL)</span><br><span class="line">    s.setsockopt(IPPROTO_IP, IP_MULTICAST_TTL, ttl_bin)</span><br><span class="line">    status = s.setsockopt(IPPROTO_IP,</span><br><span class="line">        IP_ADD_MEMBERSHIP,</span><br><span class="line">        inet_aton(MYGROUP) + inet_aton(SENDERIP))<span class="comment">#加入到组播组</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        data = <span class="string">'cisco'</span></span><br><span class="line">        s.sendto(data + <span class="string">'\\0'</span>, (MYGROUP, MYPORT))</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"send data ok !"</span></span><br><span class="line">        time.sleep(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    sender()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## receiver.py</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">SENDERIP = <span class="string">'192.168.0.116'</span></span><br><span class="line">MYPORT = <span class="number">1234</span></span><br><span class="line">MYGROUP = <span class="string">'224.1.1.1'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">receiver</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#create a UDP socket</span></span><br><span class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)</span><br><span class="line">    <span class="comment">#allow multiple sockets to use the same PORT number</span></span><br><span class="line">    sock.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,<span class="number">1</span>)</span><br><span class="line">    <span class="comment">#Bind to the port that we know will receive multicast data</span></span><br><span class="line">    sock.bind((SENDERIP,MYPORT))</span><br><span class="line">    <span class="comment">#tell the kernel that we are a multicast socket</span></span><br><span class="line">    <span class="comment">#sock.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, 255)</span></span><br><span class="line">    <span class="comment">#Tell the kernel that we want to add ourselves to a multicast group</span></span><br><span class="line">    <span class="comment">#The address for the multicast group is the third param</span></span><br><span class="line">    status = sock.setsockopt(socket.IPPROTO_IP,</span><br><span class="line">        socket.IP_ADD_MEMBERSHIP,</span><br><span class="line">        socket.inet_aton(MYGROUP) + socket.inet_aton(SENDERIP));</span><br><span class="line"></span><br><span class="line">    sock.setblocking(<span class="number">0</span>)</span><br><span class="line">    <span class="comment">#ts = time.time()</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data, addr = sock.recvfrom(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">except</span> socket.error, e:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"Receive data!"</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">print</span> <span class="string">"TIME:"</span> , time.time()</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"FROM: "</span>, addr</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"DATA: "</span>, data</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"></span><br><span class="line">    receiver()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 作者：最后一次被盗 </span></span><br><span class="line"><span class="comment"># 来源：CSDN </span></span><br><span class="line"><span class="comment"># 原文：https://blog.csdn.net/ztb3214/article/details/19285363 </span></span><br><span class="line"><span class="comment"># 版权声明：本文为博主原创文章，转载请附上博文链接！</span></span><br></pre></td></tr></table></figure>
<h2 id="Publish-Subscribe-Pattern"><a href="#Publish-Subscribe-Pattern" class="headerlink" title="Publish-Subscribe Pattern"></a>Publish-Subscribe Pattern</h2><p>In this lecture, we studied the publish-subscribe pattern, which represents a further generalization of the multicast concept. In this pattern, publisher processes add messages to designated topics, and subscriber processes receive those messages by registering on the topics that they are interested in. A key advantage of this approach is that publishers need not be aware of which processes are the subscribers, and vice versa. Another advantage is that it lends itself to very efficient implementations because it can enable a number of communication optimizations, which include batching and topic partitioning across broker nodes. Yet another advantage is improved reliability, because broker nodes can replicate messages in a topic, so that if one node hosting a topic fails, the entire publish-subscribe system can continue execution with another node that contains a copy of all messages in that topic.</p>
<p>We also studied how publish-subscribe patterns can be implemented in Java by using APIs available in the open-source Apache Kafka project.  To become a publisher, a process simply needs to create a <strong>KafkaProducer</strong> object, and use it to perform <strong>send()</strong> operations to designated topics. Likewise, to become a consumer, a process needs to create a <strong>KafkaConsumer</strong> object, which can then be used to subscribe to topics of interest. The consumer then performs repeated <strong>poll()</strong> operations, each of which returns a batch of messages from the requested topics. Kafka is commonly used as to produce input for, or receive output from, MapReduce systems such as Hadoop or Spark. By storing Kafka messages as key-value pairs, data analytics applications written using MapReduce programming models can seamlessly interface with Kafka. A common use case for Kafka is to structure messages in a topic to be as key-value pairs, so that they can be conveniently used as inputs to, or outputs from, data analytics applications written in Hadoop or Spark. Each key-value message also generally includes an offset which represents the index of the message in the topic. In summary, publish-subscribe is a higher-level pattern than communicating via sockets, which is both convenient and efficient to use in situations where producers and consumers of information are set up to communicate via message groups (topics).</p>
<p><img src="2.png" alt></p>
]]></content>
      <categories>
        <category>Big Data Architecture</category>
        <category>Distributed &amp; Cloud Computing</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>RDD Programming Guide</title>
    <url>/RDD-Programming-Guide/2019/06/23/</url>
    <content><![CDATA[<blockquote>
<p>src <a href="https://spark.apache.org/docs/latest/rdd-programming-guide.html" target="_blank" rel="noopener">https://spark.apache.org/docs/latest/rdd-programming-guide.html</a></p>
</blockquote>
<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><ol>
<li><p>The main abstraction Spark provides is a resilient distributed dataset (RDD), which is a collection of elements partitioned across the nodes of the cluster that can be operated on in parallel. </p>
</li>
<li><p>A second abstraction in Spark is shared variables that can be used in parallel operations. Spark supports two types of shared variables: broadcast variables, which can be used to cache a value in memory on all nodes, and accumulators, which are variables that are only “added” to, such as counters and sums.</p>
</li>
</ol>
<h2 id="Initializing-Spark"><a href="#Initializing-Spark" class="headerlink" title="Initializing Spark"></a>Initializing Spark</h2><p>The first thing a Spark program must do is to create a JavaSparkContext object, which tells Spark how to access a cluster. To create a SparkContext you first need to build a SparkConf object that contains information about your application.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SparkConf conf = <span class="keyword">new</span> SparkConf().setAppName(appName).setMaster(master);</span><br><span class="line">JavaSparkContext sc = <span class="keyword">new</span> JavaSparkContext(conf);</span><br></pre></td></tr></table></figure>
<h2 id="Resilient-Distributed-Datasets-RDDs"><a href="#Resilient-Distributed-Datasets-RDDs" class="headerlink" title="Resilient Distributed Datasets (RDDs)"></a>Resilient Distributed Datasets (RDDs)</h2><h3 id="Parallelized-Collections"><a href="#Parallelized-Collections" class="headerlink" title="Parallelized Collections"></a>Parallelized Collections</h3><p>Parallelized collections are created by calling JavaSparkContext’s parallelize method on an existing Collection in your driver program. The elements of the collection are copied to form a distributed dataset that can be operated on in parallel. For example, here is how to create a parallelized collection holding the numbers 1 to 5:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; data = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">JavaRDD&lt;Integer&gt; distData = sc.parallelize(data);</span><br></pre></td></tr></table></figure>
<p>Once created, the distributed dataset (distData) can be operated on in parallel. For example, we might call distData.reduce((a, b) -&gt; a + b) to add up the elements of the list. We describe operations on distributed datasets later on. </p>
<p>One important parameter for parallel collections is <strong>the number of partitions to cut the dataset into</strong>. Spark will run one task for each partition of the cluster. Typically you want 2-4 partitions for each CPU in your cluster. Normally, Spark tries to set the number of partitions automatically based on your cluster. However, you can also set it manually by passing it as a second parameter to parallelize (e.g. sc.parallelize(data, 10)). Note: some places in the code use the term slices (a synonym for partitions) to maintain backward compatibility.</p>
<h3 id="External-Datasets"><a href="#External-Datasets" class="headerlink" title="External Datasets"></a>External Datasets</h3><p>Spark can create distributed datasets from any storage source supported by Hadoop, including your local file system, HDFS, Cassandra, HBase, Amazon S3, etc. Spark supports text files, SequenceFiles, and any other Hadoop InputFormat.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JavaRDD&lt;String&gt; distFile = sc.textFile(<span class="string">"data.txt"</span>);</span><br></pre></td></tr></table></figure>
<p>Once created, distFile can be acted on by dataset operations. For example, we can add up the sizes of all the lines using the map and reduce operations as follows: distFile.map(s -&gt; s.length()).reduce((a, b) -&gt; a + b).</p>
<h2 id="RDD-Operations"><a href="#RDD-Operations" class="headerlink" title="RDD Operations"></a>RDD Operations</h2><p>RDDs support two types of operations:  </p>
<ol>
<li><strong>Transformations</strong>, which create a new dataset from an existing one</li>
</ol>
<p>All transformations in Spark are <strong>lazy</strong>, in that they do not compute their results right away. Instead, they just remember the transformations applied to some base dataset (e.g. a file). The transformations are only computed when an action requires a result to be returned to the driver program. </p>
<ol>
<li><strong>Actions</strong>, which return a value to the driver program after running a computation on the dataset.</li>
</ol>
<p>By default, each transformed RDD may be recomputed each time you run an action on it. However, you may also persist an RDD in memory using the persist (or cache) method, in which case Spark will keep the elements around on the cluster for much faster access the next time you query it. There is also support for persisting RDDs on disk, or replicated across multiple nodes.</p>
<h3 id="Basics"><a href="#Basics" class="headerlink" title="Basics"></a>Basics</h3><p>To illustrate RDD basics, consider the simple program below:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JavaRDD&lt;String&gt; lines = sc.textFile(<span class="string">"data.txt"</span>);</span><br><span class="line">JavaRDD&lt;Integer&gt; lineLengths = lines.map(s -&gt; s.length());</span><br><span class="line"><span class="keyword">int</span> totalLength = lineLengths.reduce((a, b) -&gt; a + b);</span><br></pre></td></tr></table></figure></p>
<p>The first line defines a base RDD from an external file. This dataset is not loaded in memory or otherwise acted on: <strong>lines is merely a pointer to the file</strong>. The second line defines lineLengths as the result of a map transformation. Again, lineLengths is not immediately computed, due to <strong>laziness</strong>. Finally, we run reduce, which is an action. At this point Spark breaks the computation into tasks to run on separate machines, and each machine runs both its part of the map and a local reduction, returning only its answer to the driver program.</p>
<p>If we also wanted to use lineLengths again later, we could add:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lineLengths.persist(StorageLevel.MEMORY_ONLY());</span><br></pre></td></tr></table></figure></p>
<p>before the reduce, which would cause lineLengths to be saved in memory after the first time it is computed.</p>
<h3 id="Passing-Functions-to-Spark"><a href="#Passing-Functions-to-Spark" class="headerlink" title="Passing Functions to Spark"></a>Passing Functions to Spark</h3><p>Spark’s API relies heavily on passing functions in the driver program to run on the cluster. In Java, functions are represented by classes implementing the interfaces in the org.apache.spark.api.java.function package. There are two ways to create such functions:</p>
<ol>
<li>Implement the Function interfaces in your own class, either as an anonymous inner class or a named one, and pass an instance of it to Spark.</li>
<li>Use lambda expressions to concisely define an implementation.</li>
</ol>
<p>While much of this guide uses lambda syntax for conciseness, it is easy to use all the same APIs in long-form. For example, we could have written our code above as follows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JavaRDD&lt;String&gt; lines = sc.textFile(<span class="string">"data.txt"</span>);</span><br><span class="line">JavaRDD&lt;Integer&gt; lineLengths = lines.map(<span class="keyword">new</span> Function&lt;String, Integer&gt;() &#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">(String s)</span> </span>&#123; <span class="keyword">return</span> s.length(); &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">int</span> totalLength = lineLengths.reduce(<span class="keyword">new</span> Function2&lt;Integer, Integer, Integer&gt;() &#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">(Integer a, Integer b)</span> </span>&#123; <span class="keyword">return</span> a + b; &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Or, if writing the functions inline is unwieldy:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetLength</span> <span class="keyword">implements</span> <span class="title">Function</span>&lt;<span class="title">String</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">(String s)</span> </span>&#123; <span class="keyword">return</span> s.length(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sum</span> <span class="keyword">implements</span> <span class="title">Function2</span>&lt;<span class="title">Integer</span>, <span class="title">Integer</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">(Integer a, Integer b)</span> </span>&#123; <span class="keyword">return</span> a + b; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">JavaRDD&lt;String&gt; lines = sc.textFile(<span class="string">"data.txt"</span>);</span><br><span class="line">JavaRDD&lt;Integer&gt; lineLengths = lines.map(<span class="keyword">new</span> GetLength());</span><br><span class="line"><span class="keyword">int</span> totalLength = lineLengths.reduce(<span class="keyword">new</span> Sum());</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Big Data Architecture</category>
        <category>Distributed &amp; Cloud Computing</category>
      </categories>
      <tags>
        <tag>Spark</tag>
      </tags>
  </entry>
  <entry>
    <title>Distributed Map Reduce</title>
    <url>/Distributed-Map-Reduce/2019/06/23/</url>
    <content><![CDATA[<h1 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h1><ul>
<li><a href="#introduction-to-mapreduce">Introduction to MapReduce</a></li>
<li><a href="#apache-hadoop-project">Apache Hadoop Project</a></li>
<li><a href="#apache-spark-framework">Apache Spark Framework</a></li>
<li><a href="#tf-idf-example">TF-IDF Example</a></li>
<li><a href="#page-rank-example">Page Rank Example</a></li>
</ul>
<h2 id="Introduction-to-MapReduce"><a href="#Introduction-to-MapReduce" class="headerlink" title="Introduction to MapReduce"></a>Introduction to MapReduce</h2><p><strong>Lecture Summary</strong>: In this lecture, we learned the MapReduce paradigm, which is a pattern of parallel functional programming that has been very successful in enabling “big data” computations.</p>
<p>The input to a MapReduce style computation is a set of key-value pairs. The keys are similar to keys used in hash tables, and the functional programming approach requires that both the keys and values be <strong>immutable</strong>. When a user-specified map function,$f$, is applied on a key-value pair, (kA,vA), it results in a (possibly empty) set of output key-value pairs,<br>{(kA1,vA1),(kA2,vA2),(kA3,vA3)……} This map function can be applied in <strong>parallel</strong> on all key-value pairs in the input set, to obtain a set of intermediate key-value pairs that is the union of all the outputs.</p>
<p>The next operation performed in the MapReduce workflow is referred to as grouping, which groups together all intermediate key-value pairs with the same key. Grouping is performed automatically by the MapReduce framework, and need not be specified by the programmer. For example, if there are two intermediate key-value pairs, (kA1,vA1),(kB1,vB1) with the same key, kA1 = kB1 = k, then the output of grouping will associate the set of values {vA1,vB1} with key k.</p>
<p>Finally, when a user-specified reduce function,g, is applied on two or more grouped values {eg., vA1,vB1}  associated with the same key k,  it folds or reduces all those values to obtain a single output key-value pair, (k,g(vA1,vB1,…)), for each key k, in the intermediate key-value set. If needed, the set of output key-value pairs can then be used as the input for a successive MapReduce computation.</p>
<p>In the example discussed in the lecture, we assumed that the map function, $f$ mapped a key-value pair like (WR,10) to a set of intermediate key-value pairs obained from factors of 10 to obtain the set, {(WR,2),(WR,5),(WR,10)}, and the reduce function,$g$, calculated the sum of all the values with the same key to obtain (WR,17) as the output key-value pair for key “WR”. The same process can be performed in parallel for all keys to obtain the complete output key-value set.</p>
<p><img src="1.png" alt></p>
<h2 id="Apache-Hadoop-Project"><a href="#Apache-Hadoop-Project" class="headerlink" title="Apache Hadoop Project"></a>Apache Hadoop Project</h2><p><strong>Lecture Summary</strong>: The Apache Hadoop project is a popular open-source implementation of the Map-Reduce paradigm for distributed computing. A distributed computer can be viewed as a large set of multicore computers connected by a network, such that each computer has multiple processor cores, e.g., P0,P1,P2,P3….  Each individual computer also has some persistent storage (e.g., hard disk, flash memory), thereby making it possible to store and operate on large volumes of data when aggregating the storage available across all the computers in a data center. The main motivation for the Hadoop project is to make it easy to write large-scale parallel programs that operate on this “big data”.</p>
<p>The Hadoop framework allows the programmer to specify map and reduce functions in Java, and takes care of all the details of generating a large number of map tasks and reduce tasks to perform the computation as well as scheduling them across a distributed computer. A key property of the Hadoop framework is that it supports automatic <strong>fault-tolerance</strong>. Since MapReduce is essentially a functional programming model, if a node in the distributed system fails, the Hadoop scheduler can <strong>reschedule the tasks that were executing on that node with the same input elsewhere, and continue computation</strong>. This is not possible with non-functional parallelism in general, because when a non-functional task modifies some state, re-executing it may result in a different answer. The ability of the Hadoop framework to process massive volumes of data has also made it a popular target for higher-level query languages that implement SQL-like semantics on top of Hadoop.</p>
<h2 id="Apache-Spark-Framework"><a href="#Apache-Spark-Framework" class="headerlink" title="Apache Spark Framework"></a>Apache Spark Framework</h2><p><strong>Lecture Summary</strong>: Apache Spark is a similar, but more general, programming model than Hadoop MapReduce. Like Hadoop, Spark also works on distributed systems, <strong>but a key difference in Spark is that it makes better use of in-memory computing within distributed nodes compared to Hadoop MapReduce</strong>. This difference can have a significant impact on the performance of iterative MapReduce algorithms since the use of memory obviates the need to write intermediate results to external storage after each map/reduce step. However, this also implies that the size of data that can be processed in this manner is limited by the total size of memory across all nodes, which is usually much smaller than the size of external storage. (Spark can spill excess data to external storage if needed, but doing so reduces the performance advantage over Hadoop.)</p>
<p>Another major difference between Spark and Hadoop MapReduce, is that the primary data type in Spark is the Resilient Distributed Dataset (RDD), which can be viewed as a generalization of sets of key-value pairs. RDDs enable Spark to support more general operations than map and reduce. Spark supports intermediate operations called Transformations (e.g.,map, filter, join,…..) and terminal operations called Actions (e.g.,reduce,collect,count,……). As in Java streams, intermediate transformations are performed <strong>lazily</strong>, i.e., their evaluation is postponed to the point when a terminal action needs to be performed.</p>
<p>In the lecture, we saw how the Word Count example can be implemented in Spark using Java APIs. (The Java APIs use the same underlying implementation as Scala APIs, since both APIs can be invoked in the same Java virtual machine instance.) We used the Spark flatMap() method to combine all the words in all the lines in an input file into a single RDD, followed by a mapToPair() Transform method call to emit pairs of the form, (word, 1), which can then be processed by a 𝚛𝚎𝚍𝚞𝚌𝚎𝙱𝚢𝙺𝚎𝚢() operation to obtain the final word counts.</p>
<h2 id="TF-IDF-Example"><a href="#TF-IDF-Example" class="headerlink" title="TF-IDF Example"></a>TF-IDF Example</h2><p><strong>Lecture Summary</strong>: In this lecture, we discussed an important statistic used in information retrieval and document mining, called Term Frequency – Inverse Document Frequency (TF-IDF). The motivation for computing TF-IDF statistics is to efficiently identify documents that are most similar to each other within a large corpus.</p>
<p>Assume that we have a set of N document D1,D2,…Dn, and a set of terms TERM1,TERM2,…that can appear in these documents. We can then compute total frequencies $TF_{i,j}$ for each term $TERM_{i}$ in each $document_{j}$. We can also compute the document frequencies $DF_{1}$,$DF_{2}$,…for each term, indicating how many documents contain that particular term, and the inverse document frequencies (IDF): $IDF_{i}$ = N / $DF_{i}$, The motivation for computing inverse document frequencies is to determine which terms are common and which ones are rare, and give higher weights to the rarer terms when searching for similar documents. The weights are computed as: </p>
<script type="math/tex; mode=display">Weight(TERM_{i},D_{j}) = TF_{i,j} * log(N/ DF_{i})</script><p>Using MapReduce, we can compute the $TF_{i,j}$ values by using a MAP operation to find all the occurrences of $TERM_{i}$ in document $D_{j}$  followed by a REDUCE operation to add up all the occurrences of $TERM_{i}$  as key-value pairs of the form, (($d_{j}$, $TERM_{i}$), $TF_{i,j}$) (as in the Word Count example studied earlier). These key-value pairs can also be used to compute $DF_{i}$ values by using a MAP operation to identify all the documents that contain $TERM_{i}$ and a REDUCE operation to count the number of documents that $TERM_{i}$ appears in. The final weights can then be easily computed from the $TF_{i,j})$ and $DF_{i}$ ​values. Since the TF-IDF computation uses a fixed (not iterative) number of MAP and REDUCE operations, it is a good candidate for both Hadoop and Spark frameworks.</p>
<p><img src="2.png" alt></p>
<h2 id="Page-Rank-Example"><a href="#Page-Rank-Example" class="headerlink" title="Page Rank Example"></a>Page Rank Example</h2><p><strong>Lecture Summary</strong>: In this lecture, we discussed the PageRank algorithm as an example of an iterative algorithm that is well suited for the Spark framework. The goal of the algorithm is to determine which web pages are more important by examining links from one page to other pages. In this algorithm, the rank of a page,B, is defined as follows,</p>
<script type="math/tex; mode=display">RANK(B) = \sum_{A \in SRC(B) }\frac{RANK(A)}{DEST_COUNT(A)}</script><p>where SRC(B) is the set of pages that contain a link to B, while $DEST_COUNT(A)$ is the total number of pages that A links to, Intuitively, the PageRank algorithm works by splitting the weight of a page A,  among all of the pages that A links to, Each page that A links to has its own rank increased proportional to A’s own rank. As a result, pages that are linked to from many highly-ranked pages will also be highly ranked.</p>
<p>The motivation to divide the contribution of A  in the sum by $DEST_COUNT(A)$ is that if page A links to multiple pages, each of the successors should get a fraction of the contribution from page A Conversely, if a page has many outgoing links, then each successor page gets a relatively smaller weightage, compared to pages that have fewer outgoing links. This is a recursive definition in general, since if (say) page X links to page Y, page Y links to page X, then RANK(X) depends on RANK(Y) and vice versa. Given the recursive nature of the problem, we can use an iterative algorithm to compute all page ranks by repeatedly updating the rank values using the above formula, and stopping when the rank values have converged to some acceptable level of precision.In each iteration, the new value of RANK(B) can be computed by accumulating the contributions from each predecessor page, A. A parallel implementation in Spark can be easily obtained by implementing two steps in an iteration, one for computing the contributions of each page to its successor pages by using the flatMapToPair() method, and the second for computing the current rank of each page by using the reduceByKey() and mapValues() methods.. All the intermediate results between iterations will be kept in main memory, resulting in a much faster execution than a Hadoop version (which would store intermediate results in external storage).</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> edu.coursera.distributed;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.JavaRDD;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.JavaPairRDD;</span><br><span class="line"><span class="keyword">import</span> scala.Tuple2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A wrapper class for the implementation of a single iteration of the iterative</span></span><br><span class="line"><span class="comment"> * PageRank algorithm.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PageRank</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Default constructor.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">PageRank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * TODO Given an RDD of websites and their ranks, compute new ranks for all</span></span><br><span class="line"><span class="comment">     * websites and return a new RDD containing the updated ranks.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Recall from lectures that given a website B with many other websites</span></span><br><span class="line"><span class="comment">     * linking to it, the updated rank for B is the sum over all source websites</span></span><br><span class="line"><span class="comment">     * of the rank of the source website divided by the number of outbound links</span></span><br><span class="line"><span class="comment">     * from the source website. This new rank is damped by multiplying it by</span></span><br><span class="line"><span class="comment">     * 0.85 and adding that to 0.15. Put more simply:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *   new_rank(B) = 0.15 + 0.85 * sum(rank(A) / out_count(A)) for all A linking to B</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * For this assignment, you are responsible for implementing this PageRank</span></span><br><span class="line"><span class="comment">     * algorithm using the Spark Java APIs.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The reference solution of sparkPageRank uses the following Spark RDD</span></span><br><span class="line"><span class="comment">     * APIs. However, you are free to develop whatever solution makes the most</span></span><br><span class="line"><span class="comment">     * sense to you which also demonstrates speedup on multiple threads.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *   1) JavaPairRDD.join</span></span><br><span class="line"><span class="comment">     *   2) JavaRDD.flatMapToPair</span></span><br><span class="line"><span class="comment">     *   3) JavaPairRDD.reduceByKey</span></span><br><span class="line"><span class="comment">     *   4) JavaRDD.mapValues</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sites The connectivity of the website graph, keyed on unique</span></span><br><span class="line"><span class="comment">     *              website IDs.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ranks The current ranks of each website, keyed on unique website</span></span><br><span class="line"><span class="comment">     *              IDs.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The new ranks of the websites graph, using the PageRank</span></span><br><span class="line"><span class="comment">     *         algorithm to update site ranks.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JavaPairRDD&lt;Integer, Double&gt; <span class="title">sparkPageRank</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">final</span> JavaPairRDD&lt;Integer, Website&gt; sites,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">final</span> JavaPairRDD&lt;Integer, Double&gt; ranks)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        JavaPairRDD&lt;Integer,Double&gt; newRanks =</span><br><span class="line">                sites.join(ranks).flatMapToPair(</span><br><span class="line">                        kv -&gt; &#123;</span><br><span class="line"><span class="comment">//                            Integer websiteId = kv._1();</span></span><br><span class="line">                            Tuple2&lt;Website, Double&gt; value = kv._2();</span><br><span class="line">                            Website edges = value._1();</span><br><span class="line">                            Double currentRank = value._2();</span><br><span class="line"></span><br><span class="line">                            List&lt;Tuple2&lt;Integer, Double&gt;&gt; contribs = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">                            Iterator&lt;Integer&gt; iter = edges.edgeIterator();</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">                                <span class="keyword">final</span> <span class="keyword">int</span> target = iter.next();</span><br><span class="line">                                contribs.add(<span class="keyword">new</span> Tuple2(target, currentRank / (<span class="keyword">double</span>) edges.getNEdges()));</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">return</span> contribs;</span><br><span class="line">                        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> newRanks.reduceByKey((Double r1, Double r2) -&gt; r1 + r2).mapValues(x -&gt; <span class="number">0.15</span> + <span class="number">0.85</span> * x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Big Data Architecture</category>
        <category>Distributed &amp; Cloud Computing</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spark</tag>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Optimistic Concurrency</title>
    <url>/Optimistic-Concurrency/2019/06/22/</url>
    <content><![CDATA[<h1 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h1><ul>
<li><a href="#optimistic-concurrency">Optimistic Concurrency</a></li>
<li><a href="#concurrent-queue">Concurrent Queue</a></li>
<li><a href="#linearizability">Linearizability</a></li>
<li><a href="#concurrent-hashmap">Concurrent HashMap</a></li>
<li><a href="#concurrent-minimum-spanning-tree-algorithm">Concurrent Minimum Spanning Tree Algorithm</a></li>
</ul>
<h2 id="Optimistic-Concurrency"><a href="#Optimistic-Concurrency" class="headerlink" title="Optimistic Concurrency"></a>Optimistic Concurrency</h2><p><strong>Lecture Summary</strong>: In this lecture, we studied the optimistic concurrency pattern, which can be used to improve the performance of concurrent data structures. In practice, this pattern is most often used by experts who implement components of concurrent libraries, such as AtomicInteger and ConcurrentHashMap, but it is useful for all programmers to understand the underpinnings of this approach. As an example, we considered how the getAndAdd() method is typically implemented for a shared AtomicInteger object. The basic idea is to allow multiple threads to read the existing value of the shared object (curVal) without any synchronization, and also to compute its new value after the addition (newVal) without synchronization. These computations are performed optimistically under the assumption that <strong>no interference will occur with other threads during the period between reading curVal and computing newVal.</strong> However, it is necessary for each thread to confirm this assumption by using the compareAndSet() method as follows. (compareAndSet() is used as an important building block for optimistic concurrency because it is implemented very efficiently on many hardware platforms.)</p>
<p>The method call A.compareAndSet(curVal, newVal) invoked on AtomicInteger A checks that the value in A still equals curVal, and, if so, updates A’s value to newVal before returning true; otherwise, the method simply returns false without updating A. Further, the compareAndSet() method is guaranteed to be performed atomically, as if it was in an object-based isolated statement with respect to object A. Thus, if two threads, T1 and T2 call compareAndSet() with the same curVal that matches A’s current value, only one of them will succeed in updating A with their newVal. Furthermore, each thread will invoke an operation like compareAndSet() repeatedly in a loop until the operation succeeds. This approach is guaranteed to never result in a deadlock since there are no blocking operations. Also, since each call compareAndSet() is guaranteed to eventually succeed, there cannot be a livelock either. In general, so long as the contention on a single shared object like A is not high, the number of calls to compareAndSet() that return false will be very small, and the optimistic concurrency approach can perform much better in practice (but at the cost of more complex code logic) than using locks, isolation, or actors.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Atomic Integer&#123;</span><br><span class="line">    Get();</span><br><span class="line">    Set();</span><br><span class="line">    CompareAndSet();</span><br><span class="line">    GetAndAdd(Delta)&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            cur = This.Get();</span><br><span class="line">            next = cur + Delta;</span><br><span class="line">            <span class="keyword">if</span>(This.compareAndSet(cur,next))&#123;</span><br><span class="line">                <span class="keyword">return</span> cur</span><br><span class="line">            &#125;</span><br><span class="line">            ......</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Concurrent-Queue"><a href="#Concurrent-Queue" class="headerlink" title="Concurrent Queue"></a>Concurrent Queue</h2><p><strong>Lecture Summary</strong>: In this lecture, we studied concurrent queues, an extension of the popular queue data structure to support concurrent accesses. The most common operations on a queue are enq(x), which enqueues object x at the end (tail) of the queue, and deq() which removes and returns the item at the start (head) of the queue. A correct implementation of a concurrent queue must ensure that calls to enq() and deq() maintain the correct semantics, even if the calls are invoked concurrently from different threads. While it is always possible to use locks, isolation, or actors to obtain correct but less efficient implementations of a concurrent queue, this lecture illustrated how an expert might implement a more efficient concurrent queue using the optimistic concurrency pattern.</p>
<p>A common approach for such an implementation is to replace an object reference like tail by an <strong>AtomicReference</strong>. Since the compareAndSet() method can also be invoked on AtomicReference objects, we can use it to support (for example) concurrent calls to enq() by identifying which calls to compareAndSet() succeeded, and repeating the calls that failed. This provides the basic recipe for more efficient implementations of enq() and deq(), as are typically developed by concurrency experts. A popular implementation of concurrent queues available in Java is java.util.concurent.ConcurrentLinkedQueue.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Queue&#123;</span><br><span class="line">    enqueue(x)&#123;</span><br><span class="line">        tail.next = x;</span><br><span class="line">        tail = x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ConcurrentQueue&#123;</span><br><span class="line">    enqueue(x)&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">// if other thread set the tail.next,   tail.next != null</span></span><br><span class="line">            <span class="keyword">if</span>(!tail.next.compareAndSet(NULL,x))</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Linearizability"><a href="#Linearizability" class="headerlink" title="Linearizability"></a>Linearizability</h2><p><strong>Lecture Summary</strong>: In this lecture, we studied an important correctness property of concurrent objects that is called Linearizability. A concurrent object is a data structure that is designed to support operations in parallel by multiple threads. The key question answered by linearizability is what return values are permissible when multiple threads perform these operations in parallel, taking into account what we know about the expected return values from those operations when they are performed sequentially. As an example, we considered two threads, T1 and T2 performing enq(x) and enq(y) operations in parallel on a shared concurrent queue data structure, and considered what values can be returned by a deq() operation performed by T2 after the call to enq(y). From the viewpoint of linearizability, it is possible for the deq() operation to return item x or item y.</p>
<p>One way to look at the definition of linearizability is as though you are a lawyer attempting to “defend” a friend who implemented a concurrent data structure, and that all you need to do to prove that your friend is “not guilty” (did not write a buggy implementation) is to show one scenario in which all the operations return values that would be consistent with a sequential execution by identifying logical moments of time at which the operations can be claimed to have taken effect. Thus, if deq() returned item x or item y you can claim that either scenario is plausible because we can reasonably assume that enq(x) took effect before enq(y), or vice versa. However, there is absolutely no plausible scenario in which the call to deq() can correctly return a code/exception to indicate that the queue is empty since at least enq(y) must have taken effect before the call to deq(). Thus, a goal for any implementation of a concurrent data structure is to ensure that all its executions are linearizable by using whatever combination of constructs (e.g., locks, isolated, actors, optimistic concurrency) is deemed appropriate to ensure correctness while giving the maximum performance.</p>
<p><img src="1.png" alt></p>
<h2 id="Concurrent-HashMap"><a href="#Concurrent-HashMap" class="headerlink" title="Concurrent HashMap"></a>Concurrent HashMap</h2><p><strong>Lecture Summary</strong>: In this lecture, we studied the ConcurrentHashMap data structure, which is available as part of the java.util.concurrent standard library in Java. A ConcurrentHashMap instance, chm, implements the Map interface, including the get(key) and put(key, value) operations. It also implements additional operations specified in the ConcurrentMap interface (which in turn extends the Map interface); one such operation is putIfAbsent(key, value). The motivation for using putIfAbsent() is to ensure that only one instance of key is inserted in chm, even if multiple threads attempt to insert the same key in parallel. Thus, the semantics of calls to get(), put(), and putIfAbsent() can all be specified by the theory of linearizability studied earlier. However, it is worth noting that there are also some aggregate operations, such as clear() and putAll(), that cannot safely be performed in parallel with put(), get() and putIfAbsent().</p>
<p>Motivated by the large number of concurrent data structures available in the java.util.concurrent library, this lecture advocates that, when possible, you use libraries such as ConcurrentHashMap rather than try to implement your own version.</p>
<h2 id="Concurrent-Minimum-Spanning-Tree-Algorithm"><a href="#Concurrent-Minimum-Spanning-Tree-Algorithm" class="headerlink" title="Concurrent Minimum Spanning Tree Algorithm"></a>Concurrent Minimum Spanning Tree Algorithm</h2><p><strong>Lecture Summary</strong>: In this lecture, we discussed how to apply concepts learned in this course to design a concurrent algorithm that solves the problem of finding a minimum-cost spanning tree (MST) for an undirected graph. It is well known that undirected graphs can be used to represent all kinds of networks, including roadways, train routes, and air routes. A spanning tree is a data structure that contains a subset of edges from the graph which connect all nodes in the graph without including a cycle. The cost of a spanning tree is computed as the sum of the weights of all edges in the tree.</p>
<p>The concurrent algorithm studied in this lecture builds on a well-known sequential algorithm that iteratively performs edge contraction operations, such that given a node N1 in the graph, GetMinEdge(N1) returns an edge adjacent to N1 with minimum cost for inclusion in the MST. If the minimum-cost edge is (N1,N2), the algorithm will attempt to combine nodes N1 and N2 in the graph and replace the pair by a single node, N3. To perform edge contractions in parallel, we have to look out for the case when two threads may collide on the same vertex. For example, even if two threads started with vertices A and D, they may both end up with C as the neighbor with the minimum cost edge. We must avoid a situation in which the algorithm tries to combine both A and C and D and C. One possible approach is to use unstructured locks with calls to tryLock() to perform the combining safely, but without creating the possibility of deadlock or livelock situations. A key challenge with calling tryLock() is that some fix-up is required if the call returns false. Finally, it also helps to use a concurrent queue data structure to keep track of nodes that are available for processing.</p>
]]></content>
      <categories>
        <category>Big Data Architecture</category>
        <category>Parallel Computation</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Actors</title>
    <url>/Actors/2019/06/22/</url>
    <content><![CDATA[<h1 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h1><ul>
<li><a href="#actor-model">Actor Model</a></li>
<li><a href="#actor-examples">Actor Examples</a><ul>
<li><a href="#sieve-of-eratosthenes埃拉托斯特尼筛法">Sieve of Eratosthenes(埃拉托斯特尼筛法)</a></li>
</ul>
</li>
<li><a href="#producer-consumer-problem-with-unbounded-buffer">Producer-Consumer Problem with Unbounded Buffer</a></li>
<li><a href="#producer-consumer-problem-with-bounded-buffer">Producer-Consumer Problem with Bounded Buffer</a></li>
</ul>
<h2 id="Actor-Model"><a href="#Actor-Model" class="headerlink" title="Actor Model"></a>Actor Model</h2><p><strong>Lecture Summary</strong>: In this lecture, we introduced the Actor Model as an even higher level of concurrency control than locks or isolated sections. One limitation of locks, and even isolated sections, is that, while many threads might correctly control the access to a shared object (e.g., by using object-based isolation) it only takes one thread that accesses the object directly to create subtle and hard-to-discover concurrency errors. The Actor model avoids this problem by forcing all accesses to an object to be isolated by default. The object is part of the local state of an actor, and cannot be accessed directly by any other actor.</p>
<p>An Actor consists of a <strong>Mailbox</strong>, a set of <strong>Methods</strong>, and <strong>Local State</strong>. The Actor model is reactive, in that actors can only execute methods in response to messages; these methods can read/write local state and/or send messages to other actors. Thus, the only way to modify an object in a pure actor model is to send messages to the actor that owns that object as part of its local state. In general, messages sent to actors from different actors can be arbitrarily reordered in the system. However, in many actor models, messages sent between the same pair of actors preserve the order in which they are sent</p>
<h2 id="Actor-Examples"><a href="#Actor-Examples" class="headerlink" title="Actor Examples"></a>Actor Examples</h2><p><strong>Lecture Summary</strong>: In this lecture, we further studied the Actor Model through two simple examples of using actors to implement well-known concurrent programming patterns. The PrintActor in our first example processes simple String messages by printing them. If an 𝙴𝚇𝙸𝚃 message is sent, then the PrintActor completes its current computation and exits. As a reminder, we assume that messages sent between the same pair of actors preserve the order in which they are sent.</p>
<p>In the second example, we created an actor pipeline, in which one actor checks the incoming messages and only forwards the ones that are in lower case. The second actor processes the lowercase messages and only forwards the ones that are of even length. This example illustrates the power of the actor model, as this concurrent system would be much more difficult to implement using threads, for example, since much care would have to be taken on how to implement a shared mailbox for correct and efficient processing by parallel threads.<br><img src="1.png" alt></p>
<h3 id="Sieve-of-Eratosthenes-埃拉托斯特尼筛法"><a href="#Sieve-of-Eratosthenes-埃拉托斯特尼筛法" class="headerlink" title="Sieve of Eratosthenes(埃拉托斯特尼筛法)"></a>Sieve of Eratosthenes(埃拉托斯特尼筛法)</h3><p>给出要筛数值的范围n，找出$\sqrt{n}$以内的素数 p_{1},p_{2},…,p_{n}。先用2去筛，即把2留下，把2的倍数剔除掉；再用下一個質數，也就是3筛，把3留下，把3的倍数剔除掉；接下去用下一個質數5筛，把5留下，把5的倍数剔除掉；不斷重複下去。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eratosthenes</span><span class="params">(n)</span>:</span></span><br><span class="line">    IsPrime = [<span class="keyword">True</span>] * (n + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, int(n ** <span class="number">0.5</span>) + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> IsPrime[i]:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i * i, n + <span class="number">1</span>, i):</span><br><span class="line">                IsPrime[j] = <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">return</span> [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">2</span>, n + <span class="number">1</span>) <span class="keyword">if</span> IsPrime[x]]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    print(eratosthenes(<span class="number">120</span>))</span><br></pre></td></tr></table></figure></p>
<p><strong>Lecture Summary</strong>: In this lecture, we studied how to use actors to implement a pipelined variant of the Sieve of Eratosthenes algorithm for generating prime numbers. This example illustrates the power of the Actor Model, including dynamic creation of new actors during a computation.</p>
<p>To implement the Sieve of Eratosthenes, we first create an actor, Non-Mul-2, that receives (positive) natural numbers as input (up to some limit), and then filters out the numbers that are multiples of 2. After receiving a number that is not a multiple of 2 (in our case, the first would be 3), the Non-Mul-2 actor creates the next actor in the pipeline, Non-Mul-3, with the goal of discarding all the numbers that are multiples of 3. The Non-Mul-2 actor then forwards all non-multiples of 2 to the Non-Mul-3 actor. Similarly, this new actor will create the next actor in the pipeline, Non-Mul-5, with the goal of discarding all the numbers that are multiples of 5. The power of the Actor Model is reflected in the dynamic nature of this problem, <strong>where pieces of the computation (new actors) are created dynamically as needed</strong>.</p>
<p>A Java code sketch for the process() method for an actor responsible for filtering out multiples of the actor’s “local prime” in the Sieve of Eratosthenes is as follows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">final</span> Object msg)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> candidate = (Integer) msg;</span><br><span class="line">  <span class="comment">// Check if the candidate is a non-multiple of the "local prime".</span></span><br><span class="line">  <span class="comment">// For example, localPrime = 2 in the Non-Mul-2 actor</span></span><br><span class="line">  <span class="keyword">boolean</span> nonMul = ((candidate % localPrime) != <span class="number">0</span>);</span><br><span class="line">  <span class="comment">// nothing needs to be done if nonMul = false</span></span><br><span class="line">  <span class="keyword">if</span> (nonMul) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nextActor == <span class="keyword">null</span>) &#123; </span><br><span class="line">      . . . <span class="comment">// create &amp; start new actor with candidate as its local prime</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> nextActor.send(msg); <span class="comment">// forward message to next actor</span></span><br><span class="line">  &#125; </span><br><span class="line">&#125; <span class="comment">// process</span></span><br></pre></td></tr></table></figure>
<p><img src="2.png" alt></p>
<h2 id="Producer-Consumer-Problem-with-Unbounded-Buffer"><a href="#Producer-Consumer-Problem-with-Unbounded-Buffer" class="headerlink" title="Producer-Consumer Problem with Unbounded Buffer"></a>Producer-Consumer Problem with Unbounded Buffer</h2><p><strong>Lecture Summary</strong>: In this lecture, we studied the producer-consumer pattern in concurrent programming which is used to solve the following classical problem: how can we safely coordinate accesses by multiple producer tasks, p1,p2,…,and multiple consumer tasks, C1,C2,C3,… to a shared buffer of unbounded size without giving up any concurrency? Part of the reason that this problem can be challenging is that we cannot assume any a priori knowledge about the rate at which different tasks produce and consume items in the buffer. While it is possible to solve this problem by using locks with wait-notify operations or by using object-based isolation, both approaches will require low-level concurrent programming techniques to ensure correctness and maximum performance. Instead, a more elegant solution can be achieved by using actors as follows.</p>
<p>The key idea behind any actor-based solution is to think of all objects involved in the concurrent program as actors, which in this case implies that producer tasks, consumer tasks, and the shared buffer should all be implemented as actors. The next step is to establish the communication protocols among the actors. A producer actor can simply send a message to the buffer actor whenever it has an item to produce. The protocol for consumer actors is a bit more complicated. Our solution requires a consumer actor to send a message to the buffer actor whenever it is ready to process an item. Thus, whenever the buffer actor receives a message from a producer, it knows which consumers are ready to process items and can forward the produced item to any one of them. Thus, with the actor model, all concurrent interactions involving the buffer can be encoded in messages, instead of using locks or isolated statements.</p>
<p><img src="3.png" alt></p>
<h2 id="Producer-Consumer-Problem-with-Bounded-Buffer"><a href="#Producer-Consumer-Problem-with-Bounded-Buffer" class="headerlink" title="Producer-Consumer Problem with Bounded Buffer"></a>Producer-Consumer Problem with Bounded Buffer</h2><p><strong>Lecture Summary</strong>: A major simplification made in the previous lecture was to assume that the shared buffer used by producer and consumer tasks can be unbounded in size. However, in practice, it is also important to consider a more realistic version of the the producer-consumer problem in which the buffer has a bounded size. In fact, the classical producer-consumer problem statement usually assumes a bounded buffer by default. In this lecture, we studied how the actor-based solution to the unbounded buffer case can be extended to support a bounded buffer.</p>
<p>The main new challenge with bounding the size of the shared buffer is to ensure that producer tasks are not permitted to send items to the buffer when the buffer is full. Thus, the buffer actor needs to play a master role in the protocol by informing producer actors when they are permitted to send data. This is akin to the role played by the buffer/master actor with respect to consumer actors, even in the unbounded buffer case (in which the consumer actor informed the buffer actor when it is ready to consume an item). Now, the producer actor will only send data when requested to do so by the buffer actor. Though, this actor-based solution appears to be quite simple, it actually solves a classical problem that has been studied in advanced operating system classes for decades.</p>
<p><img src="4.png" alt></p>
]]></content>
      <categories>
        <category>Big Data Architecture</category>
        <category>Parallel Computation</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Critical Sections and Isolation</title>
    <url>/Critical-Sections-and-Isolation/2019/06/21/</url>
    <content><![CDATA[<h2 id="Critical-Sections"><a href="#Critical-Sections" class="headerlink" title="Critical Sections"></a>Critical Sections</h2><p><strong>Lecture Summary</strong>: In this lecture, we learned how critical sections and the isolated construct can help concurrent threads manage their accesses to shared resources, at a higher level than just using locks. When programming with threads, it is well known that the following situation is defined to be a data race error — when two accesses on the same shared location can potentially execute in parallel, with least one access being a write. However, there are many cases in practice when two tasks may legitimately need to perform concurrent accesses to shared locations, as in the bank transfer example.</p>
<p>With critical sections, two blocks of code that are marked as isolated, say 𝙰 and 𝙱, are guaranteed to be executed in mutual exclusion with 𝙰 executing before 𝙱 or vice versa. With the use of isolated constructs, it is impossible for the bank transfer example to end up in an inconsistent state because all the reads and writes for one isolated section must complete before the start of another isolated construct. Thus, the parallel program will see the effect of one isolated section completely before another isolated section can start.</p>
<blockquote>
<p>每个线程中访问临界资源的那段程序称为临界区（Critical Section）（临界资源是一次仅允许一个线程使用的共享资源）。每次只准许一个线程进入临界区，进入后不允许其他线程进入。不论是硬件临界资源，还是软件临界资源，多个线程必须互斥地对它进行访问。</p>
</blockquote>
<h3 id="线程进入临界区的调度原则"><a href="#线程进入临界区的调度原则" class="headerlink" title="线程进入临界区的调度原则"></a>线程进入临界区的调度原则</h3><ol>
<li>如果有若干线程要求进入空闲的临界区，一次仅允许一个线程进入。</li>
<li>任何时候，处于临界区内的线程不可多于一个。如已有线程进入自己的临界区，则其它所有试图进入临界区的线程必须等待。</li>
<li>进入临界区的线程要在有限时间内退出，以便其它线程能及时进入自己的临界区。</li>
<li>如果线程不能进入自己的临界区，则应让出CPU，避免线程出现“忙等”现象。如果有多个线程试图同时访问临界区，那么在有一个线程进入后其他所有试图访问此临界区的线程将被挂起，并一直持续到进入临界区的线程离开。临界区在被释放后，其他线程可以继续抢占，并以此达到用原子方式操作共享资源的目的。</li>
</ol>
<h2 id="Object-Based-Isolation"><a href="#Object-Based-Isolation" class="headerlink" title="Object-Based Isolation"></a>Object-Based Isolation</h2><p><strong>Lecture Summary</strong>: In this lecture, we studied object-based isolation, which generalizes the isolated construct and relates to the classical concept of <strong>monitors</strong>. The fundamental idea behind object-based isolation is that an isolated construct can be extended with a set of objects that indicate the scope of isolation, by using the following rules: if two isolated constructs have an empty intersection in their object sets they can execute in parallel, otherwise they must execute in mutual exclusion. We observed that implementing this capability can be very challenging with locks because a correct implementation must enforce the correct levels of mutual exclusion without entering into deadlock or livelock states. The linked-list example showed how the object set for a 𝚍𝚎𝚕𝚎𝚝𝚎() method can be defined as consisting of three objects — the current, previous, and next objects in the list, and that this object set is sufficient to safely enable parallelism across multiple calls to 𝚍𝚎𝚕𝚎𝚝𝚎(). The Java code sketch to achieve this object-based isolation using the PCDP library is as follows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">isolated(cur, cur.prev, cur.next, () -&gt; &#123;</span><br><span class="line">    . . . <span class="comment">// Body of object-based isolated construct</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>The relationship between object-based isolation and monitors is that all methods in a monitor object, 𝙼𝟷, are executed as object-based isolated constructs with a singleton object set, {𝙼𝟷}. Similarly, all methods in a monitor object, 𝙼𝟸, are executed as object-based isolated constructs with a singleton object set, {𝙼𝟸} which has an empty intersection with {𝙼𝟷}.</p>
<p><img src="1.png" alt></p>
<h2 id="Spanning-Tree-Example"><a href="#Spanning-Tree-Example" class="headerlink" title="Spanning Tree Example"></a>Spanning Tree Example</h2><p><strong>Lecture Summary</strong>: In this lecture, we learned how to use object-based isolation to create a parallel algorithm to compute spanning trees for an undirected graph. Recall that a spanning tree specifies a subset of edges in the graph that form a tree (no cycles), and connect all vertices in the graph. A standard recursive method for creating a spanning tree is to perform a depth-first traversal of the graph (the Compute(v) function in our example), making the current vertex a parent of all its neighbors that don’t already have a parent assigned in the tree (the MakeParent(v, c) function in the example).</p>
<p>The approach described in this lecture to parallelize the spanning tree computation executes recursive Compute(c) method calls in parallel for all neighbors, c, of the current vertex, v. Object-based isolation helps avoid a data race in the MakeParent(v,c) method, when two parallel threads might attempt to call MakeParent(v1, c) and MakeParent(v2, c) on the same vertex c at the same time. In this example, the role of object-based isolation is to ensure that all calls to MakeParent(v,c) with the same c value must execute the object-based isolated statement in mutual exclusion, whereas calls with different values of c can proceed in parallel.</p>
<p><img src="2.png" alt></p>
<h2 id="Atomic-Variables"><a href="#Atomic-Variables" class="headerlink" title="Atomic Variables"></a>Atomic Variables</h2><p><strong>Lecture Summary</strong>: In this lecture, we studied Atomic Variables, an important special case of object-based isolation which can be very efficiently implemented on modern computer systems. In the example given in the lecture, we have multiple threads processing an array, each using object-based isolation to safely increment a shared object, cur, to compute an index j which can then be used by the thread to access a thread-specific element of the array.</p>
<p>However, instead of using object-based isolation, we can declare the index cur to be an Atomic Integer variable and use an atomic operation called getAndAdd() to atomically read the current value of cur and increment its value by 1. Thus, 𝚓=𝚌𝚞𝚛.𝚐𝚎𝚝𝙰𝚗𝚍𝙰𝚍𝚍(𝟷) has the same semantics as 𝚒𝚜𝚘𝚕𝚊𝚝𝚎𝚍 (𝚌𝚞𝚛) { 𝚓=𝚌𝚞𝚛;𝚌𝚞𝚛=𝚌𝚞𝚛+𝟷; } but is implemented much more efficiently using hardware support on today’s machines.</p>
<p>Another example that we studied in the lecture concerns Atomic Reference variables, which are reference variables that can be atomically read and modified using methods such as compareAndSet(). If we have an atomic reference ref, then the call to ref.compareAndSet(expected, new) will compare the value of ref to expected, and if they are the same, set the value of ref to new and return true. This all occurs in one atomic operation that cannot be interrupted by any other methods invoked on the ref object. If ref and expected have different values, compareAndSet() will not modify anything and will simply return false.</p>
<p><img src="3.png" alt></p>
<h2 id="Read-Write-Isolation"><a href="#Read-Write-Isolation" class="headerlink" title="Read-Write Isolation"></a>Read-Write Isolation</h2><p><strong>Lecture Summary</strong>: In this lecture we discussed Read-Write Isolation, which is a refinement of object-based isolation, and is a higher-level abstraction of the read-write locks studied earlier as part of Unstructured Locks. The main idea behind read-write isolation is to separate read accesses to shared objects from write accesses. This approach enables two threads that only read shared objects to freely execute in parallel since they are not modifying any shared objects. The need for mutual exclusion only arises when one or more threads attempt to enter an isolated section with write access to a shared object.</p>
<p>This approach exposes more concurrency than object-based isolation since it allows read accesses to be executed in parallel. In the doubly-linked list example from our lecture, when deleting an object cur from the list by calling delete(cur), we can replace object-based isolation on cur with read-only isolation, since deleting an object does not modify the object being deleted; only the previous and next objects in the list need to be modified.</p>
]]></content>
      <categories>
        <category>Big Data Architecture</category>
        <category>Parallel Computation</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Threads and Locks</title>
    <url>/Threads-and-Locks/2019/06/20/</url>
    <content><![CDATA[<h1 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h1><ul>
<li><a href="#threads">Threads</a></li>
<li><a href="#structured-locks">Structured Locks</a></li>
<li><a href="#unstructured-locks">Unstructured Locks</a></li>
<li><a href="#liveness-and-progress-guarantees">Liveness and Progress Guarantees</a><ul>
<li><a href="#synchronized-用法">synchronized 用法</a></li>
</ul>
</li>
<li><a href="#deadlocks-example">Deadlock‘s example</a></li>
<li><a href="#dining-philosophers-problem">Dining Philosophers Problem</a></li>
</ul>
<h2 id="Threads"><a href="#Threads" class="headerlink" title="Threads"></a>Threads</h2><blockquote>
<p>Now, threads have been around for over five decades and they are the assembly language of parallel execution. Every operating system supports threads in one form or the other. And the way they work right under the hood is that if you have a multicore processor and I’ll just show two processors, P0, P1, you have the ability to create units of execution called threads, T1, T2, T3. And the operating system takes care of scheduling these threads on processors as they’re available.</p>
</blockquote>
<p>When an instance of 𝚃𝚑𝚛𝚎𝚊𝚍 is <strong>created</strong> (via a 𝚗𝚎𝚠 operation), it does not start executing right away; instead, it can only start executing when its <strong>𝚜𝚝𝚊𝚛𝚝()</strong> method is invoked. The statement or computation to be executed by the thread is specified as a parameter to the constructor.</p>
<p>The Thread class also includes a wait operation in the form of a 𝚓𝚘𝚒𝚗() method. If thread 𝚝𝟶 performs a 𝚝𝟷.𝚓𝚘𝚒𝚗() call, thread 𝚝𝟶 will be forced to wait until thread 𝚝𝟷 completes, after which point it can safely access any values computed by thread 𝚝𝟷. Since there is no restriction on which thread can perform a 𝚓𝚘𝚒𝚗 on which other thread, it is possible for a programmer to erroneously create a deadlock cycle with 𝚓𝚘𝚒𝚗 operations. (A deadlock occurs when two threads wait for each other indefinitely, so that neither can make any progress.)</p>
<h2 id="Structured-Locks"><a href="#Structured-Locks" class="headerlink" title="Structured Locks"></a>Structured Locks</h2><ul>
<li>To enforce mutual exclusion and avoid data races</li>
<li><p>Can be implemented using 𝚜𝚢𝚗𝚌𝚑𝚛𝚘𝚗𝚒𝚣𝚎𝚍 statements and methods in Java</p>
<blockquote>
<p> their acquire and release operations are implicit, since these operations are automatically performed by the Java runtime environment when entering and exiting the scope of a 𝚜𝚢𝚗𝚌𝚑𝚛𝚘𝚗𝚒𝚣𝚎𝚍 statement or method, even if an exception is thrown in the middle.</p>
</blockquote>
</li>
<li><p>W𝚊𝚒𝚝() and N𝚘𝚝𝚒𝚏𝚢() operations that can be used to block and resume threads that need to wait for specific conditions.</p>
</li>
<li>Structured locks are also referred to as intrinsic locks or monitors.</li>
</ul>
<h2 id="Unstructured-Locks"><a href="#Unstructured-Locks" class="headerlink" title="Unstructured Locks"></a>Unstructured Locks</h2><p>In this lecture, we introduced unstructured locks (which can be obtained in Java by creating instances of 𝚁𝚎𝚎𝚗𝚝𝚛𝚊𝚗𝚝𝙻𝚘𝚌𝚔()), and used three examples to demonstrate their generality relative to structured locks. </p>
<ol>
<li>Explicit 𝚕𝚘𝚌𝚔() and 𝚞𝚗𝚕𝚘𝚌𝚔(), support a hand-over-hand locking pattern that implements a non-nested pairing of lock/unlock operations which cannot be achieved with synchronized statements/methods.</li>
<li>𝚝𝚛𝚢𝙻𝚘𝚌𝚔() operations in unstructured locks can enable a thread to check the availability of a lock, and thereby acquire it if it is available or do something else if it is not.</li>
<li>read-write locks (which can be obtained in Java by creating instances of 𝚁𝚎𝚎𝚗𝚝𝚛𝚊𝚗𝚝𝚁𝚎𝚊𝚍𝚆𝚛𝚒𝚝𝚎𝙻𝚘𝚌𝚔()), whereby multiple threads are permitted to acquire a lock 𝙻 in “read mode”, 𝙻.𝚛𝚎𝚊𝚍𝙻𝚘𝚌𝚔().𝚕𝚘𝚌𝚔(), but only one thread is permitted to acquire the lock in “write mode”, 𝙻.𝚠𝚛𝚒𝚝𝚎𝙻𝚘𝚌𝚔().𝚕𝚘𝚌𝚔().</li>
</ol>
<p><strong>However, it is also important to remember that the generality and power of unstructured locks is accompanied by an extra responsibility on the part of the programmer, e.g., ensuring that calls to 𝚞𝚗𝚕𝚘𝚌𝚔() are not forgotten, even in the presence of exceptions.</strong></p>
<p><img src="2.png" alt></p>
<h2 id="Liveness-and-Progress-Guarantees"><a href="#Liveness-and-Progress-Guarantees" class="headerlink" title="Liveness and Progress Guarantees"></a>Liveness and Progress Guarantees</h2><p>There are three ways in which a parallel program may enter a state in which it stops making forward progress. For sequential programs, an “infinite loop” is a common way for a program to stop making forward progress, but there are other ways to obtain an absence of progress in a parallel program.</p>
<ol>
<li><strong>Deadlock</strong>: all threads are blocked indefinitely, thereby preventing any forward progress.</li>
<li><strong>Livelock</strong>: all threads repeatedly perform an interaction that prevents forward progress, e.g., an infinite “loop” of repeating lock acquire/release patterns. </li>
<li><strong>starvation</strong>: at least one thread is prevented from making any forward progress.</li>
</ol>
<p>The term “liveness” refers to a progress guarantee. The three progress guarantees that correspond to the absence of the conditions listed above are deadlock freedom, livelock freedom, and starvation freedom.</p>
<p><img src="3.png" alt></p>
<h3 id="synchronized-用法"><a href="#synchronized-用法" class="headerlink" title="synchronized 用法"></a>synchronized 用法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// --------------------- </span></span><br><span class="line"><span class="comment">// 作者：叉叉哥 </span></span><br><span class="line"><span class="comment">// 来源：CSDN </span></span><br><span class="line"><span class="comment">// 原文：https://blog.csdn.net/xiao__gui/article/details/8188833 </span></span><br><span class="line"><span class="comment">// 版权声明：本文为博主原创文章，转载请附上博文链接！</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sync</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"test开始.."</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"test结束.."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Sync sync = <span class="keyword">new</span> Sync();</span><br><span class="line">        sync.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> MyThread();</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果：</span></span><br><span class="line"><span class="comment">// test开始..</span></span><br><span class="line"><span class="comment">// test开始..</span></span><br><span class="line"><span class="comment">// test开始..</span></span><br><span class="line"><span class="comment">// test结束..</span></span><br><span class="line"><span class="comment">// test结束..</span></span><br><span class="line"><span class="comment">// test结束..</span></span><br></pre></td></tr></table></figure>
<p>上面的程序起了三个线程，同时运行Sync类中的test()方法，虽然test()方法加上了synchronized，但是还是同时运行起来，synchronized没起作用。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(<span class="keyword">this</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">"test开始.."</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"test结束.."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果：</span></span><br><span class="line"><span class="comment">// test开始..</span></span><br><span class="line"><span class="comment">// test开始..</span></span><br><span class="line"><span class="comment">// test开始..</span></span><br><span class="line"><span class="comment">// test结束..</span></span><br><span class="line"><span class="comment">// test结束..</span></span><br><span class="line"><span class="comment">// test结束..</span></span><br></pre></td></tr></table></figure>
<p>没有看到synchronized起到作用。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> Sync sync;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(Sync sync)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sync = sync;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Sync sync = <span class="keyword">new</span> Sync();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> MyThread(sync);</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果：</span></span><br><span class="line"><span class="comment">// test开始..</span></span><br><span class="line"><span class="comment">// test结束..</span></span><br><span class="line"><span class="comment">// test开始..</span></span><br><span class="line"><span class="comment">// test结束..</span></span><br><span class="line"><span class="comment">// test开始..</span></span><br><span class="line"><span class="comment">// test结束..</span></span><br></pre></td></tr></table></figure>
<p>此时的synchronized就起了作用。</p>
<p>因此，<strong>synchronized锁住的是括号里的对象，而不是代码</strong>。对于非static的synchronized方法，锁的就是对象本身也就是this。当synchronized锁住一个对象后，别的线程如果也想拿到这个对象的锁，就必须等待这个线程执行完成释放锁，才能再次给对象加锁，这样才达到线程同步的目的。即使两个不同的代码段，都要锁同一个对象，那么这两个代码段也不能在多线程环境下同时运行。所以我们在用synchronized关键字的时候，能缩小代码段的范围就尽量缩小，能在代码段上加同步就不要再整个方法上加同步。这叫减小锁的粒度，使代码更大程度的并发。原因是基于以上的思想，锁的代码段太长了，别的线程是不是要等很久，等的花儿都谢了。当然这段是题外话，与本文核心思想并无太大关联。</p>
<h2 id="Deadlock‘s-example"><a href="#Deadlock‘s-example" class="headerlink" title="Deadlock‘s example"></a>Deadlock‘s example</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Alphonse and Gaston are friends, and great believers in courtesy. A strict rule of courtesy is that when you bow to a friend, you must remain bowed until your friend has a chance to return the bow. Unfortunately, this rule does not account for the possibility that two friends might bow to each other at the same time. This example application, Deadlock, models this possibility</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// When Deadlock runs, it's extremely likely that both threads will block when they attempt to invoke bowBack. Neither block will ever end, because each thread is waiting for the other to exit bow.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Deadlock</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Friend</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Friend</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">bow</span><span class="params">(Friend bower)</span> </span>&#123;</span><br><span class="line">            System.out.format(<span class="string">"%s: %s"</span></span><br><span class="line">                + <span class="string">"  has bowed to me!%n"</span>, </span><br><span class="line">                <span class="keyword">this</span>.name, bower.getName());</span><br><span class="line">            bower.bowBack(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">bowBack</span><span class="params">(Friend bower)</span> </span>&#123;</span><br><span class="line">            System.out.format(<span class="string">"%s: %s"</span></span><br><span class="line">                + <span class="string">" has bowed back to me!%n"</span>,</span><br><span class="line">                <span class="keyword">this</span>.name, bower.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Friend alphonse =</span><br><span class="line">            <span class="keyword">new</span> Friend(<span class="string">"Alphonse"</span>);</span><br><span class="line">        <span class="keyword">final</span> Friend gaston =</span><br><span class="line">            <span class="keyword">new</span> Friend(<span class="string">"Gaston"</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; alphonse.bow(gaston); &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; gaston.bow(alphonse); &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Dining-Philosophers-Problem"><a href="#Dining-Philosophers-Problem" class="headerlink" title="Dining Philosophers Problem"></a>Dining Philosophers Problem</h2><p>In this lecture, we studied a classical concurrent programming example that is referred to as the Dining Philosophers Problem. In this problem, there are five threads, each of which models a “philosopher” that repeatedly performs a sequence of actions which include think, pick up chopsticks, eat, and put down chopsticks.</p>
<p>First, we examined a solution to this problem using structured locks, and demonstrated how this solution could lead to a deadlock scenario (but not livelock). Second, we examined a solution using unstructured locks with 𝚝𝚛𝚢𝙻𝚘𝚌𝚔() and 𝚞𝚗𝚕𝚘𝚌𝚔() operations that never block, and demonstrated how this solution could lead to a livelock scenario (but not deadlock). Finally, we observed how a simple modification to the first solution with structured locks, in which one philosopher picks up their right chopstick and their left, while the others pick up their left chopstick first and then their right, can guarantee an absence of deadlock.</p>
<blockquote>
<hr>
<p>作者：九茶<br>来源：CSDN<br>原文：<a href="https://blog.csdn.net/Bone_ACE/article/details/46362599" target="_blank" rel="noopener">https://blog.csdn.net/Bone_ACE/article/details/46362599</a><br>版权声明：本文为博主原创文章，转载请附上博文链接！</p>
</blockquote>
<p>五个哲学家（A~E）围着一张圆桌就餐，他们每个人面前都有一盘通心粉。由于通心粉很滑，所以需要两只筷子才能夹住，但每两个盘子之间只放着一只筷子，如下图。<br>哲学家只有两个动作：要么就餐，要么思考。而且他们之间从不交谈。<br>当一个哲学家饿了的时候，就拿起盘子左右两边的筷子开始就餐（不能同时拿起两只筷子）。就餐完以后，就把筷子放回盘子左右，继续思考。 </p>
<p><img src="1.png" alt></p>
<p>由于他们之间互不交谈，所以很容易出现“死锁”：假如每个人都拿着左边的筷子，则所有人都在等右边的筷子，谁都吃不了。<br>我们可以规定，拿着一只筷子等待另一只筷子的时间超过五分钟就放下手中的筷子，并且再等待五分钟之后进行下一次尝试。<br>这个策略消除了死锁，不过还是有可能发生“活锁”：假如这五个人同时拿起左边的筷子，大家都在等另一只筷子，五分钟之后大家同时放下筷子。再过五分钟之后又同时拿起左边的筷子……</p>
<p>在计算机领域中，哲学家就餐问题可以抽象成资源抢占问题，筷子就是“资源”。一种常用的计算机技术就是给资源“加锁”，一个资源同时只能供一个程序或者一段代码访问。当一个程序要使用的资源被另外一个程序锁定的时候，只能等待资源被解锁。这就容易出现死锁情况，当有两个程序需要访问两个相同的资源时，如果每个程序都锁了一个资源，那么两者都在等待对方解锁另一个资源的解锁，最后谁都无法执行。</p>
<p>以下介绍三种解决方案。</p>
<ol>
<li><p><strong>服务生</strong>: 对于就餐问题，我们可以引入一个服务生，哲学家要经过服务生同意才能拿筷子，因为服务生知道哪只筷子在使用，他可以阻止死锁的发生。<br>这很好理解，只有当盘子左右的筷子都空闲的时候，服务生才会同意哲学家就餐，这样就不存在有人拿着一只筷子在等待另一只筷子的情况，也就杜绝了死锁的发生。 </p>
</li>
<li><p><strong>资源分级</strong>: 另外一种方法就是给资源分级，例如上图中的五只筷子，给它们分级为1~5五个等级。<br>约定：每位哲学家在就餐拿筷子的时候，只能先拿级别比较低的筷子，然后才能拿级别比较高的。用餐完以后，先放下级别比较高的筷子，再放下编号比较低的。这样也不会出现死锁的情况。假如大家同时拿起一只筷子，那么级别最高的5号筷子一定还留在桌子上。此时哲学家A或者E就能拿起它凑成两只筷子开始进餐。进餐完以后放下筷子，其他哲学家又能进餐了。但是仍然有starvation的情况。</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> edu.coursera.concurrent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Wrapper class for two lock-based concurrent list implementations.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CoarseLists</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * An implementation of the ListSet interface that uses Java locks to</span></span><br><span class="line"><span class="comment">     * protect against concurrent accesses.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * TODO Implement the add, remove, and contains methods below to support</span></span><br><span class="line"><span class="comment">     * correct, concurrent access to this list. Use a Java ReentrantLock object</span></span><br><span class="line"><span class="comment">     * to protect against those concurrent accesses. You may refer to</span></span><br><span class="line"><span class="comment">     * SyncList.java for help understanding the list management logic, and for</span></span><br><span class="line"><span class="comment">     * guidance in understanding where to place lock-based synchronization.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CoarseList</span> <span class="keyword">extends</span> <span class="title">ListSet</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * TODO Declare a lock for this class to be used in implementing the</span></span><br><span class="line"><span class="comment">         * concurrent add, remove, and contains methods below.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">         <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span>  ReentrantLock();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Default constructor.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CoarseList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * TODO Use a lock to protect against concurrent access.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(<span class="keyword">final</span> Integer object)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                Entry pred = <span class="keyword">this</span>.head;</span><br><span class="line">                Entry curr = pred.next;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (curr.object.compareTo(object) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    pred = curr;</span><br><span class="line">                    curr = curr.next;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (object.equals(curr.object)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">final</span> Entry entry = <span class="keyword">new</span> Entry(object);</span><br><span class="line">                    entry.next = curr;</span><br><span class="line">                    pred.next = entry;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * TODO Use a lock to protect against concurrent access.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(<span class="keyword">final</span> Integer object)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                Entry pred = <span class="keyword">this</span>.head;</span><br><span class="line">                Entry curr = pred.next;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (curr.object.compareTo(object) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    pred = curr;</span><br><span class="line">                    curr = curr.next;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (object.equals(curr.object)) &#123;</span><br><span class="line">                    pred.next = curr.next;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * TODO Use a lock to protect against concurrent access.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(<span class="keyword">final</span> Integer object)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                Entry pred = <span class="keyword">this</span>.head;</span><br><span class="line">                Entry curr = pred.next;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (curr.object.compareTo(object) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    pred = curr;</span><br><span class="line">                    curr = curr.next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> object.equals(curr.object);</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * An implementation of the ListSet interface that uses Java read-write</span></span><br><span class="line"><span class="comment">     * locks to protect against concurrent accesses.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * TODO Implement the add, remove, and contains methods below to support</span></span><br><span class="line"><span class="comment">     * correct, concurrent access to this list. Use a Java</span></span><br><span class="line"><span class="comment">     * ReentrantReadWriteLock object to protect against those concurrent</span></span><br><span class="line"><span class="comment">     * accesses. You may refer to SyncList.java for help understanding the list</span></span><br><span class="line"><span class="comment">     * management logic, and for guidance in understanding where to place</span></span><br><span class="line"><span class="comment">     * lock-based synchronization.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RWCoarseList</span> <span class="keyword">extends</span> <span class="title">ListSet</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * TODO Declare a read-write lock for this class to be used in</span></span><br><span class="line"><span class="comment">         * implementing the concurrent add, remove, and contains methods below.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> ReentrantReadWriteLock readWriteLock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Default constructor.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">RWCoarseList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * TODO Use a read-write lock to protect against concurrent access.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(<span class="keyword">final</span> Integer object)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                readWriteLock.writeLock().lock();</span><br><span class="line">                Entry pred = <span class="keyword">this</span>.head;</span><br><span class="line">                Entry curr = pred.next;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (curr.object.compareTo(object) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    pred = curr;</span><br><span class="line">                    curr = curr.next;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (object.equals(curr.object)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">final</span> Entry entry = <span class="keyword">new</span> Entry(object);</span><br><span class="line">                    entry.next = curr;</span><br><span class="line">                    pred.next = entry;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                readWriteLock.writeLock().unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * TODO Use a read-write lock to protect against concurrent access.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(<span class="keyword">final</span> Integer object)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                readWriteLock.writeLock().lock();</span><br><span class="line">                Entry pred = <span class="keyword">this</span>.head;</span><br><span class="line">                Entry curr = pred.next;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (curr.object.compareTo(object) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    pred = curr;</span><br><span class="line">                    curr = curr.next;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (object.equals(curr.object)) &#123;</span><br><span class="line">                    pred.next = curr.next;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                readWriteLock.writeLock().unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * TODO Use a read-write lock to protect against concurrent access.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(<span class="keyword">final</span> Integer object)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                readWriteLock.readLock().lock();</span><br><span class="line">                Entry pred = <span class="keyword">this</span>.head;</span><br><span class="line">                Entry curr = pred.next;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (curr.object.compareTo(object) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    pred = curr;</span><br><span class="line">                    curr = curr.next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> object.equals(curr.object);</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                readWriteLock.readLock().unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Big Data Architecture</category>
        <category>Parallel Computation</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Data Flow Synchronization and Pipelining</title>
    <url>/Data-Flow-Synchronization-and-Pipelining/2019/06/13/</url>
    <content><![CDATA[<h1 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h1><ul>
<li><a href="#split-phase-barriers-with-java-phasers">Split-phase Barriers with Java Phasers</a><ul>
<li><a href="#phaser-understanding">Phaser Understanding</a></li>
</ul>
</li>
<li><a href="#point-to-point-synchronization-with-phasers">Point-to-Point Synchronization with Phasers</a></li>
<li><a href="#one-dimensional-iterative-averaging-with-phasers">One-Dimensional Iterative Averaging with Phasers</a></li>
<li><a href="#pipeline-parallelism">Pipeline Parallelism</a></li>
<li><a href="#data-flow-parallelism">Data Flow Parallelism</a></li>
</ul>
<h2 id="Split-phase-Barriers-with-Java-Phasers"><a href="#Split-phase-Barriers-with-Java-Phasers" class="headerlink" title="Split-phase Barriers with Java Phasers"></a>Split-phase Barriers with Java Phasers</h2><p>In this lecture, we examined a variant of the barrier example that we studied earlier:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">forall (i : [<span class="number">0</span>:n-<span class="number">1</span>]) &#123; </span><br><span class="line">  print HELLO, i;</span><br><span class="line">  myId = lookup(i); <span class="comment">// convert int to a string </span></span><br><span class="line">  print BYE, myId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>We learned about Java’s Phaser class, and that the operation <strong>𝚙𝚑.𝚊𝚛𝚛𝚒𝚟𝚎𝙰𝚗𝚍𝙰𝚠𝚊𝚒𝚝𝙰𝚍𝚟𝚊𝚗𝚌𝚎()</strong> can be used to implement a barrier through <strong>phaser object 𝚙𝚑</strong>. We also observed that there are two possible positions for inserting a barrier between the two print statements above — before or after the call to 𝚕𝚘𝚘𝚔𝚞𝚙(𝚒). However, upon closer examination, we can see that the call to 𝚕𝚘𝚘𝚔𝚞𝚙(𝚒) is local to iteration i and that there is no specific need to either complete it before the barrier or to complete it after the barrier. In fact, <strong>the call to 𝚕𝚘𝚘𝚔𝚞𝚙(𝚒) can be performed in parallel with the barrier</strong>. To facilitate this split-phase barrier (also known as a <strong>fuzzy barrier</strong>) we use two separate APIs from Java Phaser class — 𝚙𝚑.𝚊𝚛𝚛𝚒𝚟𝚎() and 𝚙𝚑.𝚊𝚠𝚊𝚒𝚝𝙰𝚍𝚟𝚊𝚗𝚌𝚎(). Together these two APIs form a barrier, but we now have the freedom to insert a computation such as 𝚕𝚘𝚘𝚔𝚞𝚙(𝚒) between the two calls as follows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">arrive</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// Arrives at this phaser, without waiting for others to arrive.</span></span></span><br><span class="line"><span class="function"><span class="comment">// the arrival phase number, or a negative value if terminated</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">awaitAdvance</span><span class="params">(<span class="keyword">int</span> phase)</span></span></span><br><span class="line"><span class="function"><span class="comment">// Awaits the phase of this phaser to advance from the given phase value, returning immediately if the current phase is not equal to the given phase value or this phaser is terminated.</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// initialize phaser ph for use by n tasks ("parties") and initial phase number 0.</span></span></span><br><span class="line"><span class="function">Phaser ph </span>= <span class="keyword">new</span> Phaser(n);</span><br><span class="line"><span class="comment">// Create forall loop with n iterations that operate on ph </span></span><br><span class="line">forall (i : [<span class="number">0</span>:n-<span class="number">1</span>]) &#123;</span><br><span class="line">  print HELLO, i;</span><br><span class="line">  <span class="keyword">int</span> phase = ph.arrive();</span><br><span class="line">  </span><br><span class="line">  myId = lookup(i); <span class="comment">// convert int to a string</span></span><br><span class="line"></span><br><span class="line">  ph.awaitAdvance(phase);</span><br><span class="line">  print BYE, myId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>“party” 是 Phaser 中的一个术语，相当于是线程的意思，当一个 party 到达，就是线程到达意思就是线程到了同步的屏障(Barrier)。</p>
</blockquote>
<h3 id="Phaser-Understanding"><a href="#Phaser-Understanding" class="headerlink" title="Phaser Understanding"></a>Phaser Understanding</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Phaser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhaserExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">  List&lt;runnable&gt; tasks = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">   Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2000000000</span>; i++) &#123;</span><br><span class="line">      a = a + b;</span><br><span class="line">      b = a - b;</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   tasks.add(runnable);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> PhaserExample().runTasks(tasks);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">runTasks</span><span class="params">(List&lt;runnable&gt; tasks)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// create a Phaser that has one registered party (this means: at this time phaser expects one thread(party) to arrive before it can start the execution cycle) </span></span><br><span class="line">  <span class="keyword">final</span> Phaser phaser = <span class="keyword">new</span> Phaser(<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// implement the onAdvance-Method to explain that this task list is executed twice (it returns true if phase is equal or higher then 1) </span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// After the threads executed their tasks once they arrive again, the onAdvance-Method is called, now the 2nd cycle is executed</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">onAdvance</span><span class="params">(<span class="keyword">int</span> phase, <span class="keyword">int</span> registeredParties)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> phase &gt;= <span class="number">1</span> || registeredParties == <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// iterate over the list of tasks</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">final</span> Runnable task : tasks) &#123;</span><br><span class="line">   <span class="comment">// register this thread with the Phaser. Notice that a Phaser instance does not know the task instances. It's a simple counter of registered, unarrived and arrived parties, shared across participating threads. If two parties are registered then two parties must arrive at the phaser to be able to start the first cycle. </span></span><br><span class="line">   phaser.register();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">do</span> &#123;</span><br><span class="line">      <span class="comment">// tell the thread to wait at the barrier until the arrived parties equal the registered parties </span></span><br><span class="line">      phaser.arriveAndAwaitAdvance();</span><br><span class="line">      task.run();</span><br><span class="line">     &#125; <span class="keyword">while</span> (!phaser.isTerminated());</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;.start();</span><br><span class="line">   <span class="comment">// Just for demonstration purposes, this line delays execution. </span></span><br><span class="line">   Thread.sleep(<span class="number">500</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// deregister one party( main thread). This results in two registered parties and two arrived parties. This causes the threads waiting to execute the first cycle. (in fact the third party arrived while three were registered - but it does not make a difference) </span></span><br><span class="line">  phaser.arriveAndDeregister();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Doing so enables the barrier processing to occur in parallel with the call to 𝚕𝚘𝚘𝚔𝚞𝚙(𝚒), which was our desired outcome.</p>
<h2 id="Point-to-Point-Synchronization-with-Phasers"><a href="#Point-to-Point-Synchronization-with-Phasers" class="headerlink" title="Point-to-Point Synchronization with Phasers"></a>Point-to-Point Synchronization with Phasers</h2><p>In this lecture, we looked at a parallel program example in which the span (critical path length) would be 6 units of time if we used a barrier, but is reduced to 5 units of time if we use individual phasers as shown in the following table:</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Task0</td>
<td style="text-align:left">Task1</td>
<td style="text-align:left">Task2</td>
</tr>
<tr>
<td style="text-align:left">1a:X=A();//cost=1</td>
<td style="text-align:left">1b:Y=B();//cost=2</td>
<td style="text-align:left">1c:Z=C();//cost=3</td>
</tr>
<tr>
<td style="text-align:left">2a:ph0.arrive();</td>
<td style="text-align:left">2b:ph1.arrive();</td>
<td style="text-align:left">2c:ph2.arrive();</td>
</tr>
<tr>
<td style="text-align:left">3a:ph1.awaitAdvance(0);</td>
<td style="text-align:left">3b:ph0.awaitAdvance(0);</td>
<td style="text-align:left">3c:ph1.awaitAdvance(0);</td>
</tr>
<tr>
<td style="text-align:left">4a:D(X,Y);//cost=3</td>
<td style="text-align:left">4b:ph2.awaitAdvance(0);</td>
<td style="text-align:left">4c:F(Y,Z);//cost=1</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">5b:E(X,Y,Z);//cost=2</td>
</tr>
</tbody>
</table>
</div>
<p>Each column in the table represents execution of a separate task, and the calls to 𝚊𝚛𝚛𝚒𝚟𝚎() and 𝚊𝚠𝚊𝚒𝚝𝙰𝚍𝚟𝚊𝚗𝚌𝚎(𝟶) represent synchronization across different tasks via phaser objects, 𝚙𝚑𝟶, 𝚙𝚑𝟷, and 𝚙𝚑𝟸, each of which is initialized with a party count of 1 (only one signalling task). (The parameter 0 in 𝚊𝚠𝚊𝚒𝚝𝙰𝚍𝚟𝚊𝚗𝚌𝚎(𝟶) represents a transition from phase 0 to phase 1.)</p>
<p><img src="1.png" alt></p>
<h2 id="One-Dimensional-Iterative-Averaging-with-Phasers"><a href="#One-Dimensional-Iterative-Averaging-with-Phasers" class="headerlink" title="One-Dimensional Iterative Averaging with Phasers"></a>One-Dimensional Iterative Averaging with Phasers</h2><p>In this lecture, we revisited the barrier-based Iterative Averaging example that we studied earlier, and observed that a full barrier is not necessary since forall iteration i only needs to wait for iterations i − 1 and i + 1 to complete their current phase before iteration i can move to its next phase. This idea can be captured by phasers, if we allocate an array of phasers as follows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Allocate array of phasers</span></span><br><span class="line">Phaser[] ph = <span class="keyword">new</span> Phaser[n+<span class="number">2</span>]; <span class="comment">//array of phasers</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ph.length; i++) </span><br><span class="line">  ph[i] = <span class="keyword">new</span> Phaser(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Main computation </span></span><br><span class="line">forall ( i: [<span class="number">1</span>:n-<span class="number">1</span>]) &#123;</span><br><span class="line">  <span class="keyword">for</span> (iter: [<span class="number">0</span>:nsteps-<span class="number">1</span>]) &#123;</span><br><span class="line">    newX[i] = (oldX[i-<span class="number">1</span>] + oldX[i+<span class="number">1</span>]) / <span class="number">2</span>;</span><br><span class="line">    ph[i].arrive();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (index &gt; <span class="number">1</span>) ph[i-<span class="number">1</span>].awaitAdvance(iter);</span><br><span class="line">    <span class="keyword">if</span> (index &lt; n-<span class="number">1</span>) ph[i + <span class="number">1</span>].awaitAdvance(iter); </span><br><span class="line">    swap pointers newX and oldX;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>As we learned earlier, grouping/chunking of parallel iterations in a forall can be an important consideration for performance (due to reduced overhead). The idea of grouping of parallel iterations can be extended to forall loops with phasers as follows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Allocate array of phasers proportional to number of chunked tasks </span></span><br><span class="line">Phaser[] ph = <span class="keyword">new</span> Phaser[tasks+<span class="number">2</span>]; <span class="comment">//array of phasers</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ph.length; i++) ph[i] = <span class="keyword">new</span> Phaser(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Main computation </span></span><br><span class="line">forall ( i: [<span class="number">0</span>:tasks-<span class="number">1</span>]) &#123;</span><br><span class="line">  <span class="keyword">for</span> (iter: [<span class="number">0</span>:nsteps-<span class="number">1</span>]) &#123;</span><br><span class="line">    <span class="comment">// Compute leftmost boundary element for group</span></span><br><span class="line">    <span class="keyword">int</span> left = i * (n / tasks) + <span class="number">1</span>;</span><br><span class="line">    myNew[left] = (myVal[left - <span class="number">1</span>] + myVal[left + <span class="number">1</span>]) / <span class="number">2.0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Compute rightmost boundary element for group </span></span><br><span class="line">    <span class="keyword">int</span> right = (i + <span class="number">1</span>) * (n / tasks);</span><br><span class="line">    myNew[right] = (myVal[right - <span class="number">1</span>] + myVal[right + <span class="number">1</span>]) / <span class="number">2.0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Signal arrival on phaser ph AND LEFT AND RIGHT ELEMENTS ARE AV </span></span><br><span class="line">    <span class="keyword">int</span> index = i + <span class="number">1</span>;</span><br><span class="line">    ph[index].arrive();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Compute interior elements in parallel with barrier </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = left + <span class="number">1</span>; j &lt;= right - <span class="number">1</span>; j++)</span><br><span class="line">      myNew[j] = (myVal[j - <span class="number">1</span>] + myVal[j + <span class="number">1</span>]) / <span class="number">2.0</span>;</span><br><span class="line">    <span class="comment">// Wait for previous phase to complete before advancing </span></span><br><span class="line">    <span class="keyword">if</span> (index &gt; <span class="number">1</span>) ph[index - <span class="number">1</span>].awaitAdvance(iter);</span><br><span class="line">    <span class="keyword">if</span> (index &lt; tasks) ph[index + <span class="number">1</span>].awaitAdvance(iter);</span><br><span class="line">    swap pointers newX and oldX;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Pipeline-Parallelism"><a href="#Pipeline-Parallelism" class="headerlink" title="Pipeline Parallelism"></a>Pipeline Parallelism</h2><p>In this lecture, we studied how point-to-point synchronization can be used to build a one-dimensional pipeline with p tasks (stages), T0,…Tn. For example, three important stages in a medical imaging pipeline are denoising, registration, and segmentation.</p>
<p>We performed a simplified analysis of the WORK and SPAN for pipeline parallelism as follows.<br>Let n be the number of input items and p the number of stages in the pipeline, WORK = n × p is the total work that must be done for all data items, and CPL = n + p − 1 is the span or critical path length for the pipeline. Thus, the ideal parallelism is PAR = WORK /CPL = np / (n + p − 1). This formula can be validated by considering a few boundary cases. When p = 1, the ideal parallelism degenerates to PAR = 1, which confirms that the computation is sequential when only one stage is available. Likewise, when n = 1, the ideal parallelism again degenerates to PAR = 1, which confirms that the computation is sequential when only one data item is available. When n is much larger than p (n » p), then the ideal parallelism approaches PAR = p in the limit, which is the best possible case.</p>
<p>The synchronization required for pipeline parallelism can be implemented using phasers by allocating an array of phasers, such that phaser 𝚙𝚑[𝚒] is “signalled” in iteration i by a call to 𝚙𝚑[𝚒].𝚊𝚛𝚛𝚒𝚟𝚎() as follows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Code for pipeline stage i</span></span><br><span class="line"><span class="keyword">while</span> ( there is an input to be processed ) &#123;</span><br><span class="line">  <span class="comment">// wait for previous stage, if any </span></span><br><span class="line">  <span class="keyword">if</span> (i &gt; <span class="number">0</span>) </span><br><span class="line">    ph[i - <span class="number">1</span>].awaitAdvance(); </span><br><span class="line"></span><br><span class="line">  process input;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// signal next stage</span></span><br><span class="line">  ph[i].arrive();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Data-Flow-Parallelism"><a href="#Data-Flow-Parallelism" class="headerlink" title="Data Flow Parallelism"></a>Data Flow Parallelism</h2><p>Thus far, we have studied computation graphs as structures that are derived from parallel programs. In this lecture, we studied a dual approach advocated in the data flow parallelism model, which is to specify parallel programs as computation graphs. The simple data flow graph studied in the lecture consisted of five nodes and four edges: A → C, A → D, B → D, B → E. While futures can be used to generate such a computation graph, e.g., by including calls to A.get() and B.get() in task D, the computation graph edges are implicit in the get() calls when using futures. Instead, we introduced the asyncAwait notation to specify a task along with an explicit set of preconditions (events that the task must wait for before it can start execution). With this approach, the program can be generated directly from the computation graph as follows:</p>
<p><img src="2.png" alt></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">async( () -&gt; &#123;<span class="comment">/* Task A */</span>; A.put(); &#125; ); <span class="comment">// Complete task and trigger event A</span></span><br><span class="line">async( () -&gt; &#123;<span class="comment">/* Task B */</span>; B.put(); &#125; ); <span class="comment">// Complete task and trigger event B</span></span><br><span class="line">asyncAwait(A, () -&gt; &#123;<span class="comment">/* Task C */</span>&#125; );       <span class="comment">// Only execute task after event A is triggered </span></span><br><span class="line">asyncAwait(A, B, () -&gt; &#123;<span class="comment">/* Task D */</span>&#125; );      <span class="comment">// Only execute task after events A, B are triggered </span></span><br><span class="line">asyncAwait(B, () -&gt; &#123;<span class="comment">/* Task E */</span>&#125; );       <span class="comment">// Only execute task after event B is triggered</span></span><br></pre></td></tr></table></figure>
<p>Interestingly, the order of the above statements is not significant. Just as a graph can be defined by enumerating its edges in any order, the above data flow program can be rewritten as follows, without changing its meaning:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">asyncAwait(A, () -&gt; &#123;<span class="comment">/* Task C */</span>&#125; );       <span class="comment">// Only execute task after event A is triggered </span></span><br><span class="line">asyncAwait(A, B, () -&gt; &#123;<span class="comment">/* Task D */</span>&#125; );      <span class="comment">// Only execute task after events A, B are triggered </span></span><br><span class="line">asyncAwait(B, () -&gt; &#123;<span class="comment">/* Task E */</span>&#125; );       <span class="comment">// Only execute task after event B is triggered </span></span><br><span class="line">async( () -&gt; &#123;<span class="comment">/* Task A */</span>; A.put(); &#125; ); <span class="comment">// Complete task and trigger event A</span></span><br><span class="line">async( () -&gt; &#123;<span class="comment">/* Task B */</span>; B.put(); &#125; ); <span class="comment">// Complete task and trigger event B</span></span><br></pre></td></tr></table></figure>
<p>Finally, we observed that the power and elegance of data flow parallel programming is accompanied by the possibility of a lack of progress that can be viewed as a form of “deadlock” if the program omits a put() call for signalling an event.</p>
]]></content>
      <categories>
        <category>Big Data Architecture</category>
        <category>Parallel Computation</category>
      </categories>
  </entry>
  <entry>
    <title>Parallel Loops</title>
    <url>/Parallel-Loops/2019/06/13/</url>
    <content><![CDATA[<h1 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h1><ul>
<li><a href="#loop-parallelism">Loop Parallelism</a><ul>
<li><a href="#parallel-matrix-multiplication">Parallel Matrix Multiplication</a></li>
<li><a href="#barriers-in-parallel-loops">Barriers in Parallel Loops</a><ul>
<li><a href="#one-dimensional-iterative-averaging">One-Dimensional Iterative Averaging</a></li>
</ul>
</li>
<li><a href="#iteration-grouping-chunking-of-parallel-loops">Iteration Grouping: Chunking of Parallel Loops</a></li>
</ul>
</li>
</ul>
<h1 id="Loop-Parallelism"><a href="#Loop-Parallelism" class="headerlink" title="Loop Parallelism"></a>Loop Parallelism</h1><p>In this lecture, we learned different ways of expressing parallel loops. The most general way is to think of each iteration of a parallel loop as an async task, with a finish construct encompassing all iterations. This approach can support general cases such as parallelization of the following pointer-chasing while loop (in pseudocode):</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">finish &#123;</span><br><span class="line"><span class="keyword">for</span> (p = head; p != <span class="keyword">null</span> ; p = p.next) <span class="function">async <span class="title">compute</span><span class="params">(p)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>However, further efficiencies can be gained by paying attention to counted-for loops for which the number of iterations is known on entry to the loop (before the loop executes its first iteration). We then learned the forall notation for expressing parallel counted-for loops, such as in the following vector addition statement (in pseudocode):</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">forall (i : [<span class="number">0</span>:n-<span class="number">1</span>]) </span><br><span class="line">    a[i] = b[i] + c[i]</span><br></pre></td></tr></table></figure>
<p><img src="1.png" alt></p>
<p>We also discussed the fact that Java streams can be an elegant way of specifying parallel loop computations that produce a single output array, e.g., by rewriting the vector addition statement as follows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a = IntStream.rangeClosed(<span class="number">0</span>, N-<span class="number">1</span>).parallel().toArray(i -&gt; b[i] + c[i]);</span><br></pre></td></tr></table></figure>
<h2 id="Parallel-Matrix-Multiplication"><a href="#Parallel-Matrix-Multiplication" class="headerlink" title="Parallel Matrix Multiplication"></a>Parallel Matrix Multiplication</h2><p>In this lecture, we reminded ourselves of the formula for multiplying two n × n matrices, a and b, to obtain a product matrix, c, of </p>
<script type="math/tex; mode=display">C_{ij} = \sum^{n-1}_{k=0}a_{ik} * b_{kj}</script><p>This formula can be easily translated to a simple sequential algorithm for matrix multiplication as follows (with pseudocode for counted-for loops):</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(i : [<span class="number">0</span>:n-<span class="number">1</span>]) &#123;</span><br><span class="line">  <span class="keyword">for</span>(j : [<span class="number">0</span>:n-<span class="number">1</span>]) &#123; </span><br><span class="line">    c[i][j] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// seq</span></span><br><span class="line">    <span class="keyword">for</span>(k : [<span class="number">0</span>:n-<span class="number">1</span>]) &#123;</span><br><span class="line">      c[i][j] = c[i][j] + a[i][k]*b[k][j]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>}</p>
<p>Upon a close inspection, we can see that it is safe to convert for-i and for-j into forall loops, but for-k must remain a sequential loop to avoid data races.</p>
<h2 id="Barriers-in-Parallel-Loops"><a href="#Barriers-in-Parallel-Loops" class="headerlink" title="Barriers in Parallel Loops"></a>Barriers in Parallel Loops</h2><p>In this lecture, we learned the barrier construct through a simple example that began with the following forall parallel loop (in pseudocode):</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">forall (i : [<span class="number">0</span>:n-<span class="number">1</span>]) &#123;</span><br><span class="line">        myId = lookup(i); <span class="comment">// convert int to a string </span></span><br><span class="line">        print HELLO, myId;</span><br><span class="line">        <span class="comment">// barriers </span></span><br><span class="line">        print BYE, myId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We discussed the fact that the HELLO’s and BYE’s from different forall iterations may be interleaved in the printed output, e.g., some HELLO’s may follow some BYE’s. Then, we showed how inserting a <strong>barrier</strong> between the two print statements could ensure that _all HELLO’s would be printed before any BYE’s_.</p>
<p>Thus, <strong>barriers extend a parallel loop by dividing its execution into a sequence of phases</strong>. While it may be possible to write a separate forall loop for each phase, it is both more convenient and more efficient to instead insert barriers in a single forall loop, e.g., we would need to create an intermediate data structure to communicate the myId values from one forall to another forall if we split the above forall into two (using the notation next) loops. Barriers are a fundamental construct for parallel loops that are used in a majority of real-world parallel applications.</p>
<h3 id="One-Dimensional-Iterative-Averaging"><a href="#One-Dimensional-Iterative-Averaging" class="headerlink" title="One-Dimensional Iterative Averaging"></a>One-Dimensional Iterative Averaging</h3><p>In this lecture, we discussed a simple stencil computation to solve the recurrence, $x_{i} = \frac{x_{i-1} + x_{i+1}}{2}$ with boundary conditions, $x_{0} = 0$ and $x_{1} = 1$.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">a = [random.randint(<span class="number">0</span>,<span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">11</span>)]</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1001</span>):</span><br><span class="line">    new = [<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,len(a)<span class="number">-1</span>):</span><br><span class="line">        new.append((a[j<span class="number">-1</span>] + a[j+<span class="number">1</span>]) / <span class="number">2.0</span>)</span><br><span class="line">    new.append(<span class="number">1</span>)</span><br><span class="line">    a = new</span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0]</span></span><br><span class="line"><span class="comment"># [0, 0.10000000000000017, 0.19999999999999973, 0.3000000000000005, 0.3999999999999995, 0.5000000000000007, 0.5999999999999994, 0.7000000000000006, 0.7999999999999996, 0.9000000000000002, 1]</span></span><br></pre></td></tr></table></figure>
<p>A naive approach to parallelizing this method would result in the following pseudocode:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (iter: [<span class="number">0</span>:nsteps-<span class="number">1</span>]) &#123;</span><br><span class="line">  forall (i: [<span class="number">1</span>:n-<span class="number">1</span>]) &#123;</span><br><span class="line">    newX[i] = (oldX[i-<span class="number">1</span>] + oldX[i+<span class="number">1</span>]) / <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  swap pointers newX and oldX;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="2.png" alt></p>
<p>Though easy to understand, this approach creates nsteps × (n − 1) tasks, which is too many. <strong>Barriers can help reduce the number of tasks created as follows</strong>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">forall ( i: [<span class="number">1</span>:n-<span class="number">1</span>]) &#123;</span><br><span class="line">  <span class="keyword">for</span> (iter: [<span class="number">0</span>:nsteps-<span class="number">1</span>]) &#123;</span><br><span class="line">    newX[i] = (oldX[i-<span class="number">1</span>] + oldX[i+<span class="number">1</span>]) / <span class="number">2</span>;</span><br><span class="line">    NEXT; <span class="comment">// Barrier</span></span><br><span class="line">    swap pointers newX and oldX;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="5.png" alt></p>
<p>In this case, only (n − 1) tasks are created, and there are nsteps barrier (next) operations, each of which involves all (n − 1) tasks. This is a significant improvement since creating tasks is usually more expensive than performing barrier operations.</p>
<h2 id="Iteration-Grouping-Chunking-of-Parallel-Loops"><a href="#Iteration-Grouping-Chunking-of-Parallel-Loops" class="headerlink" title="Iteration Grouping: Chunking of Parallel Loops"></a>Iteration Grouping: Chunking of Parallel Loops</h2><p>We observed that this approach creates n tasks, one per forall iteration, which is wasteful when (as is common in practice) n is much larger than the number of available processor cores.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">forall (i : [<span class="number">0</span>:n-<span class="number">1</span>]) a[i] = b[i] + c[i]</span><br></pre></td></tr></table></figure>
<p>To address this problem, we learned a common tactic used in practice that is referred to as loop chunking or iteration grouping, and focuses on reducing the number of tasks created to be closer to the number of processor cores, so as to reduce the overhead of parallel execution:</p>
<p>With iteration grouping/chunking, the parallel vector addition example above can be rewritten as follows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">forall (g:[<span class="number">0</span>:ng-<span class="number">1</span>])</span><br><span class="line">  <span class="keyword">for</span> (i : mygroup(g, ng, [<span class="number">0</span>:n-<span class="number">1</span>])) a[i] = b[i] + c[i]</span><br></pre></td></tr></table></figure>
<p><img src="3.png" alt></p>
<p>Note that we have reduced the degree of parallelism from n to the number of groups, <strong>ng</strong>, which now equals the number of iterations/tasks in the forall construct.</p>
<p>There are two well known approaches for iteration grouping: <strong>block</strong> and <strong>cyclic</strong>. The former approach (block) maps consecutive iterations to the same group, whereas the latter approach (cyclic) maps iterations in the same congruence class (mod ng) to the same group. With these concepts, you should now have a better understanding of how to execute forall loops in practice with lower overhead.</p>
<p><img src="4.png" alt></p>
]]></content>
      <categories>
        <category>Big Data Architecture</category>
        <category>Parallel Computation</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Functional Parallelism</title>
    <url>/Functional-Parallelism/2019/06/12/</url>
    <content><![CDATA[<h1 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h1><ul>
<li><a href="#functional-parallelism">Functional Parallelism</a><ul>
<li><a href="#creating-future-tasks-in-javas-forkjoin-framework">Creating Future Tasks in Java’s Fork/Join Framework</a></li>
<li><a href="#memoization">Memoization</a></li>
<li><a href="#java-streams">Java Streams</a></li>
<li><a href="#determinism-and-data-races">Determinism and Data Races</a><ul>
<li><a href="#determinism">Determinism</a></li>
<li><a href="#data-races">Data Races</a></li>
</ul>
</li>
<li><a href="#forkjoin-框架与-java-stream-api">Fork/Join 框架与 Java Stream API</a><ul>
<li><a href="#stream的并发实现细节">Stream的并发实现细节</a></li>
<li><a href="#example">Example</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="Functional-Parallelism"><a href="#Functional-Parallelism" class="headerlink" title="Functional Parallelism"></a>Functional Parallelism</h1><p><strong>Future tasks</strong> are tasks with return values<br><strong>Future object</strong> is a “handle” for accessing a task’s return value</p>
<p>There are two key operations that can be performed on a future object, A</p>
<ol>
<li><p>Assignment — A can be assigned a reference to a future object returned by a task of the form, future { ⟨ task-with-return-value ⟩ } (using pseudocode notation). The content of the future object is constrained to be _single assignment_ (similar to a final variable in Java), and cannot be modified after the future task has returned.</p>
</li>
<li><p>Blocking read — the operation, A.get(), waits until the task associated with future object A has completed, and then propagates the task’s return value as the value returned by A.get(). Any statement, S, executed after A.get() can be assured that the task associated with future object A must have completed before S starts execution.</p>
</li>
</ol>
<h2 id="Creating-Future-Tasks-in-Java’s-Fork-Join-Framework"><a href="#Creating-Future-Tasks-in-Java’s-Fork-Join-Framework" class="headerlink" title="Creating Future Tasks in Java’s Fork/Join Framework"></a>Creating Future Tasks in Java’s Fork/Join Framework</h2><ol>
<li><p>A future task extends the <strong>RecursiveTask</strong> class in the FJ framework, instead of RecursiveAction as in regular tasks. (RecursiveTask can have return value)</p>
</li>
<li><p>The 𝚌𝚘𝚖𝚙𝚞𝚝𝚎() method of a future task must have a non-void return type, whereas it has a void return type for regular tasks.</p>
</li>
<li><p>A method call like 𝚕𝚎𝚏𝚝.𝚓𝚘𝚒𝚗() waits for the task referred to by object 𝚕𝚎𝚏𝚝 in both cases, but also provides the task’s return value in the case of future tasks.</p>
</li>
</ol>
<h2 id="Memoization"><a href="#Memoization" class="headerlink" title="Memoization"></a>Memoization</h2><ol>
<li>Create a data structure that stores the set {($x_1$,$y_1 = f(x_1)$),($x_2$,$y_2 = f(x_2)$),…} for each call $f(x_i)$ that returns $y_i$.</li>
<li>Perform look ups in that data structure when processing calls of the form $f(x\prime)$ when $x\prime$ equals one of the $x_i$ inputs for which $f(x_i)$ has already been computed.</li>
</ol>
<p>Memoization can be especially helpful for algorithms based on dynamic programming. In the lecture, we used Pascal’s triangle as an illustrative example to motivate memoization.</p>
<p>The memoization pattern lends itself easily to parallelization using futures by modifying the memoized data structure to store  {($x_1$,$y_1 = f(x_1)$),($x_2$,$y_2 = f(x_2)$),…}. The lookup operation can then be replaced by a get() operation on the future value, if a future has already been created for the result of a given input.</p>
<h2 id="Java-Streams"><a href="#Java-Streams" class="headerlink" title="Java Streams"></a>Java Streams</h2><p>the following pipeline can be used to compute the average age of all active students using Java streams:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">students.stream()</span><br><span class="line">    .filter(s -&gt; s.getStatus() == Student.ACTIVE)</span><br><span class="line">    .mapToInt(a -&gt; a.getAge())</span><br><span class="line">    .average();</span><br></pre></td></tr></table></figure>
<p>An important benefit of using Java streams when possible is that the pipeline can be made to execute in parallel by designating the source to be a parallel stream, i.e., by simply replacing students.stream() in the above code by students.parallelStream() or Stream.of(students).parallel(). This form of functional parallelism is a major convenience for the programmer, since they <strong>do not</strong> need to worry about explicitly allocating intermediate collections (e.g., a collection of all active students), or about ensuring that parallel accesses to data collections are properly synchronized.</p>
<h2 id="Determinism-and-Data-Races"><a href="#Determinism-and-Data-Races" class="headerlink" title="Determinism and Data Races"></a>Determinism and Data Races</h2><h3 id="Determinism"><a href="#Determinism" class="headerlink" title="Determinism"></a>Determinism</h3><p>A parallel program is said to be:</p>
<ol>
<li><strong>functionally deterministic</strong> if it always computes the same answer when given the same input.</li>
<li><strong>structurally deterministic</strong> if it always computes the same computation graph, when given the same input.</li>
</ol>
<h3 id="Data-Races"><a href="#Data-Races" class="headerlink" title="Data Races"></a>Data Races</h3><p><img src="1.png" alt></p>
<p>There may be cases of “benign” nondeterminism for programs with data races in which different executions with the same input may generate different outputs, but all the outputs may be acceptable in the context of the application, e.g., different locations for a search pattern in a target string.</p>
<p><img src="2.png" alt></p>
<blockquote>
<p>转载于 <a href="https://www.jianshu.com/u/86c421886c32" target="_blank" rel="noopener">一字马胡</a></p>
</blockquote>
<h2 id="Fork-Join-框架与-Java-Stream-API"><a href="#Fork-Join-框架与-Java-Stream-API" class="headerlink" title="Fork/Join 框架与 Java Stream API"></a>Fork/Join 框架与 Java Stream API</h2><p>Fork/Join框架可以将大的任务切分为足够小的任务，然后将小任务分配给不同的线程来执行，而线程之间通过工作窃取算法来协调资源，提前做完任务的线程可以去“窃取”其他还没有做完任务的线程的任务，而每一个线程都会持有一个双端队列，里面存储着分配给自己的任务，Fork/Join框架在实现上，为了防止线程之间的竞争，线程在消费分配给自己的任务时，是从队列头取任务的，而“窃取”线程则从队列尾部取任务。Fork/Join框架通过fork方法来分割大任务，通过使用join来获取小任务的结果，然后组合成大任务的结果。</p>
<h3 id="Stream的并发实现细节"><a href="#Stream的并发实现细节" class="headerlink" title="Stream的并发实现细节"></a>Stream的并发实现细节</h3><p>Java Stream的操作分为两类，也可以分为三类，具体的细节可以参考该文章：Java Streams API。一个简单的判断一个操作是否是Terminal操作还是Intermediate操作的方法是，如果操作返回的是一个新的Stream，那么就是一个Intermediate操作，否则就是一个Terminal操作。</p>
<ul>
<li><strong>Intermediate</strong>：一个流可以后面跟随零个或多个 intermediate 操作。其目的主要是打开流，做出某种程度的数据操作，然后返回一个新的流，交给下一个操作使用。这类操作都是惰性化的（lazy），就是说，仅仅调用到这类方法，并没有真正开始流的遍历。</li>
<li><strong>Terminal</strong>：一个流只能有一个 terminal 操作，当这个操作执行后，流就被使用“光”了，无法再被操作。所以这必定是流的最后一个操作。Terminal 操作的执行，才会真正开始流的遍历，并且会生成一个结果，或者一个 side effect。</li>
</ul>
<p>Java Stream对四种类型的Terminal操作使用了Fork/Join实现了并发操作，下面的图片展示了这四种操作类型：</p>
<ul>
<li>Find</li>
<li>ForEach</li>
<li>Match</li>
<li>Reduce</li>
</ul>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">                .parallel()</span><br><span class="line">                .map(n -&gt; n*<span class="number">2</span>)</span><br><span class="line">                .collect(Collectors.toCollection(ArrayList::<span class="keyword">new</span>));</span><br></pre></td></tr></table></figure>
<p>解释一下，上面的代码想要实现的功能是将（1，2，3，4）这四个数字每一个都变为其自身的两倍，然后收集这些元素到一个ArrayList中返回。这是一个非常简单的功能，下面是上面的操作流的执行路径：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//step 1:</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; Stream&lt;T&gt; <span class="title">of</span><span class="params">(T... values)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Arrays.stream(values);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//step 2:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> &lt;R&gt; <span class="function">Stream&lt;R&gt; <span class="title">map</span><span class="params">(Function&lt;? <span class="keyword">super</span> P_OUT, ? extends R&gt; mapper)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(mapper);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> StatelessOp&lt;P_OUT, R&gt;(<span class="keyword">this</span>, StreamShape.REFERENCE,</span><br><span class="line">                                 StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function">Sink&lt;P_OUT&gt; <span class="title">opWrapSink</span><span class="params">(<span class="keyword">int</span> flags, Sink&lt;R&gt; sink)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Sink.ChainedReference&lt;P_OUT, R&gt;(sink) &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(P_OUT u)</span> </span>&#123;</span><br><span class="line">                    downstream.accept(mapper.apply(u));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//step 3:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> &lt;R, A&gt; <span class="function">R <span class="title">collect</span><span class="params">(Collector&lt;? <span class="keyword">super</span> P_OUT, A, R&gt; collector)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        container = evaluate(ReduceOps.makeRef(collector));</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//step 4:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> &lt;R&gt; <span class="function">R <span class="title">evaluate</span><span class="params">(TerminalOp&lt;E_OUT, R&gt; terminalOp)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">assert</span> <span class="title">getOutputShape</span><span class="params">()</span> </span>== terminalOp.inputShape();</span><br><span class="line">    <span class="keyword">if</span> (linkedOrConsumed)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(MSG_STREAM_LINKED);</span><br><span class="line">    linkedOrConsumed = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> isParallel()</span><br><span class="line">           ? terminalOp.evaluateParallel(<span class="keyword">this</span>, sourceSpliterator(terminalOp.getOpFlags()))</span><br><span class="line">           : terminalOp.evaluateSequential(<span class="keyword">this</span>, sourceSpliterator(terminalOp.getOpFlags()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//step 5:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用Fork/Join框架执行操作。</span></span><br></pre></td></tr></table></figure>
<p>上面的五个步骤是经过一些省略的，需要注意的一点是，intermediate类型的操作仅仅将操作加到一个upstream里面，具体的原文描述如下：</p>
<blockquote>
<p>Construct a new Stream by appending a stateless intermediate operation to an existing stream.</p>
</blockquote>
<p>比如上面我们的操作中的map操作，实际上只是将操作加到一个intermediate链条上面，不会立刻执行。重点是第五步，Stream是如何使用Fork/Join来实现并发的。evaluate这个方法至关重要，在方法里面会分开处理，对于设置了并发标志的操作流，会使用Fork/Join来并发执行操作任务，而对于没有打开并发标志的操作流，则串行执行操作。</p>
]]></content>
      <categories>
        <category>Big Data Architecture</category>
        <category>Parallel Computation</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Tutorial of Java&#39;s concurrent packages</title>
    <url>/Tutorial-of-Java-s-concurrent-packages/2019/06/09/</url>
    <content><![CDATA[<h2 id="Processes-and-Threads"><a href="#Processes-and-Threads" class="headerlink" title="Processes and Threads"></a>Processes and Threads</h2><p><strong>Processes</strong> A process has a self-contained execution environment. A process generally has a complete, private set of basic run-time resources; in particular, each process has its own memory space.</p>
<p><strong>Threads</strong> Threads are sometimes called lightweight processes. Both processes and threads provide an execution environment, but creating a new thread requires fewer resources than creating a new process. Threads exist within a process — every process has at least one. Threads share the process’s resources, including memory and open files. This makes for efficient, but potentially problematic, communication.</p>
<h2 id="Thread-Objects"><a href="#Thread-Objects" class="headerlink" title="Thread Objects"></a>Thread Objects</h2><p>Each thread is associated with an instance of the class Thread. There are two basic strategies for using Thread objects to create a concurrent application.</p>
<ol>
<li>To directly control thread creation and management, simply instantiate Thread each time the application needs to initiate an asynchronous task.</li>
<li>To abstract thread management from the rest of your application, pass the application’s tasks to an executor.</li>
</ol>
<h3 id="Defining-and-Starting-a-Thread"><a href="#Defining-and-Starting-a-Thread" class="headerlink" title="Defining and Starting a Thread"></a>Defining and Starting a Thread</h3><ol>
<li>Provide a Runnable object. The Runnable interface defines a single method, run, meant to contain the code executed in the thread. The Runnable object is passed to the Thread constructor, as in the HelloRunnable example:</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello from a thread!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        (<span class="keyword">new</span> Thread(<span class="keyword">new</span> HelloRunnable())).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>Subclass Thread. The Thread class itself implements Runnable, though its run method does nothing. An application can subclass Thread, providing its own implementation of run, as in the HelloThread example:</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello from a thread!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        (<span class="keyword">new</span> HelloThread()).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li><strong>Pausing Execution with Sleep</strong> Thread.sleep causes the current thread to suspend execution for a specified period.</li>
</ol>
<ol>
<li><strong>Interrupts</strong> An interrupt is an indication to a thread that it should stop what it is doing and do something else. </li>
</ol>
<ul>
<li>If the thread is frequently invoking methods that throw InterruptedException, it simply returns from the run method after it catches that exception</li>
<li>if a thread goes a long time without invoking a method that throws InterruptedException? Then it must periodically invoke Thread.interrupted, which returns true if an interrupt has been received.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; importantInfo.length; i++) &#123;</span><br><span class="line">    <span class="comment">// Pause for 4 seconds</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        <span class="comment">// We've been interrupted: no more messages.</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Print a message</span></span><br><span class="line">    System.out.println(importantInfo[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; inputs.length; i++) &#123;</span><br><span class="line">    heavyCrunch(inputs[i]);</span><br><span class="line">    <span class="keyword">if</span> (Thread.interrupted()) &#123;</span><br><span class="line">        <span class="comment">// We've been interrupted: no more crunching.</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li><strong>Joins</strong> The join method allows one thread to wait for the completion of another. If t is a Thread object whose thread is currently executing,causes the current thread to pause execution until t’s thread terminates.</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">t.join();</span><br></pre></td></tr></table></figure>
<h2 id="Synchronization"><a href="#Synchronization" class="headerlink" title="Synchronization"></a>Synchronization</h2><p>Threads communicate primarily by sharing access to fields and the objects reference fields refer to.Synchronization can introduce <strong>thread contention</strong>, which occurs when two or more threads try to access the same resource simultaneously and cause the Java runtime to execute one or more threads more slowly, or even suspend their execution. <strong>Starvation</strong> and <strong>livelock</strong> are forms of thread contention.</p>
<p><strong>Thread Interference</strong> Interference happens when two operations, running in different threads, but acting on the same data, interleave. This means that the two operations consist of multiple steps, and the sequences of steps overlap.</p>
<p><strong>Memory Consistency Errors</strong> Memory consistency errors occur when different threads have inconsistent views of what should be the same data. The key to avoiding memory consistency errors is understanding the <strong>happens-before</strong> relationship.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Thread 1</span></span><br><span class="line"><span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line">counter++;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Thread 2</span></span><br><span class="line">System.out.println(counter);</span><br></pre></td></tr></table></figure></p>
<h3 id="Synchronized-Methods"><a href="#Synchronized-Methods" class="headerlink" title="Synchronized Methods"></a>Synchronized Methods</h3><p>To make a method synchronized, simply add the synchronized keyword to its declaration:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedCounter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        c++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">decrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        c--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li><p>It is not possible for two invocations of synchronized methods on the same object to interleave. When one thread is executing a synchronized method for an object, all other threads that invoke synchronized methods for the same object block (suspend execution) until the first thread is done with the object.</p>
</li>
<li><p>When a synchronized method exits, it automatically establishes a happens-before relationship with any subsequent invocation of a synchronized method for the same object. This guarantees that changes to the state of the object are visible to all threads.</p>
</li>
</ol>
<h3 id="Synchronized-Statements"><a href="#Synchronized-Statements" class="headerlink" title="Synchronized Statements"></a>Synchronized Statements</h3><p>Unlike synchronized methods, synchronized statements must specify the object that provides the intrinsic lock</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">        lastName = name;</span><br><span class="line">        nameCount++;</span><br><span class="line">    &#125;</span><br><span class="line">    nameList.add(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Liveness"><a href="#Liveness" class="headerlink" title="Liveness"></a>Liveness</h2><h3 id="Deadlock"><a href="#Deadlock" class="headerlink" title="Deadlock"></a>Deadlock</h3><p>Deadlock describes a situation where two or more threads are blocked forever, waiting for each other. </p>
<p>Alphonse and Gaston are friends, and great believers in courtesy. A strict rule of courtesy is that when you bow to a friend, you must remain bowed until your friend has a chance to return the bow. Unfortunately, this rule does not account for the possibility that two friends might bow to each other at the same time. This example application, Deadlock, models this possibility:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Deadlock</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Friend</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Friend</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">bow</span><span class="params">(Friend bower)</span> </span>&#123;</span><br><span class="line">            System.out.format(<span class="string">"%s: %s"</span></span><br><span class="line">                + <span class="string">"  has bowed to me!%n"</span>, </span><br><span class="line">                <span class="keyword">this</span>.name, bower.getName());</span><br><span class="line">            bower.bowBack(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">bowBack</span><span class="params">(Friend bower)</span> </span>&#123;</span><br><span class="line">            System.out.format(<span class="string">"%s: %s"</span></span><br><span class="line">                + <span class="string">" has bowed back to me!%n"</span>,</span><br><span class="line">                <span class="keyword">this</span>.name, bower.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Friend alphonse =</span><br><span class="line">            <span class="keyword">new</span> Friend(<span class="string">"Alphonse"</span>);</span><br><span class="line">        <span class="keyword">final</span> Friend gaston =</span><br><span class="line">            <span class="keyword">new</span> Friend(<span class="string">"Gaston"</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; alphonse.bow(gaston); &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; gaston.bow(alphonse); &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Starvation"><a href="#Starvation" class="headerlink" title="Starvation"></a>Starvation</h3><p>Starvation describes a situation where a thread is unable to gain regular access to shared resources and is unable to make progress. This happens when shared resources are made unavailable for long periods by “greedy” threads. For example, suppose an object provides a synchronized method that often takes a long time to return. If one thread invokes this method frequently, other threads that also need frequent synchronized access to the same object will often be blocked.</p>
<h3 id="Livelock"><a href="#Livelock" class="headerlink" title="Livelock"></a>Livelock</h3><p>A thread often acts in response to the action of another thread. If the other thread’s action is also a response to the action of another thread, then livelock may result. As with deadlock, livelocked threads are unable to make further progress. However, the threads are not blocked — they are simply too busy responding to each other to resume work. This is comparable to two people attempting to pass each other in a corridor: Alphonse moves to his left to let Gaston pass, while Gaston moves to his right to let Alphonse pass. Seeing that they are still blocking each other, Alphone moves to his right, while Gaston moves to his left. They’re still blocking each other, so…</p>
<h2 id="High-Level-Concurrency-Objects"><a href="#High-Level-Concurrency-Objects" class="headerlink" title="High Level Concurrency Objects"></a>High Level Concurrency Objects</h2><p>Only one thread can own a Lock object at a time. Lock objects also support a wait/notify mechanism, through their associated Condition objects.</p>
<h3 id="Fork-Join"><a href="#Fork-Join" class="headerlink" title="Fork/Join"></a>Fork/Join</h3><p>The fork/join framework is an implementation of the ExecutorService interface that helps you take advantage of multiple processors. It is designed for work that can be broken into smaller pieces recursively. The goal is to use all the available processing power to enhance the performance of your application.</p>
<p>As with any ExecutorService implementation, the fork/join framework distributes tasks to worker threads in a thread pool. The fork/join framework is distinct because it uses a work-stealing algorithm. Worker threads that run out of things to do can steal tasks from other threads that are still busy.</p>
<p>The center of the fork/join framework is the ForkJoinPool class, an extension of the AbstractExecutorService class. ForkJoinPool implements the core work-stealing algorithm and can execute ForkJoinTask processes.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (my portion of the work is small enough)</span><br><span class="line">  do the work directly</span><br><span class="line">else</span><br><span class="line">  split my work into two pieces</span><br><span class="line">  invoke the two pieces and wait for the results</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForkBlur</span> <span class="keyword">extends</span> <span class="title">RecursiveAction</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] mSource;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mStart;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mLength;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] mDestination;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// Processing window size; should be odd.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mBlurWidth = <span class="number">15</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ForkBlur</span><span class="params">(<span class="keyword">int</span>[] src, <span class="keyword">int</span> start, <span class="keyword">int</span> length, <span class="keyword">int</span>[] dst)</span> </span>&#123;</span><br><span class="line">        mSource = src;</span><br><span class="line">        mStart = start;</span><br><span class="line">        mLength = length;</span><br><span class="line">        mDestination = dst;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">computeDirectly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sidePixels = (mBlurWidth - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = mStart; index &lt; mStart + mLength; index++) &#123;</span><br><span class="line">            <span class="comment">// Calculate average.</span></span><br><span class="line">            <span class="keyword">float</span> rt = <span class="number">0</span>, gt = <span class="number">0</span>, bt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> mi = -sidePixels; mi &lt;= sidePixels; mi++) &#123;</span><br><span class="line">                <span class="keyword">int</span> mindex = Math.min(Math.max(mi + index, <span class="number">0</span>),</span><br><span class="line">                                    mSource.length - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">int</span> pixel = mSource[mindex];</span><br><span class="line">                rt += (<span class="keyword">float</span>)((pixel &amp; <span class="number">0x00ff0000</span>) &gt;&gt; <span class="number">16</span>)</span><br><span class="line">                      / mBlurWidth;</span><br><span class="line">                gt += (<span class="keyword">float</span>)((pixel &amp; <span class="number">0x0000ff00</span>) &gt;&gt;  <span class="number">8</span>)</span><br><span class="line">                      / mBlurWidth;</span><br><span class="line">                bt += (<span class="keyword">float</span>)((pixel &amp; <span class="number">0x000000ff</span>) &gt;&gt;  <span class="number">0</span>)</span><br><span class="line">                      / mBlurWidth;</span><br><span class="line">            &#125;</span><br><span class="line">          </span><br><span class="line">            <span class="comment">// Reassemble destination pixel.</span></span><br><span class="line">            <span class="keyword">int</span> dpixel = (<span class="number">0xff000000</span>     ) |</span><br><span class="line">                   (((<span class="keyword">int</span>)rt) &lt;&lt; <span class="number">16</span>) |</span><br><span class="line">                   (((<span class="keyword">int</span>)gt) &lt;&lt;  <span class="number">8</span>) |</span><br><span class="line">                   (((<span class="keyword">int</span>)bt) &lt;&lt;  <span class="number">0</span>);</span><br><span class="line">            mDestination[index] = dpixel;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">int</span> sThreshold = <span class="number">100000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mLength &lt; sThreshold) &#123;</span><br><span class="line">            computeDirectly();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> split = mLength / <span class="number">2</span>;</span><br><span class="line">        </span><br><span class="line">        invokeAll(<span class="keyword">new</span> ForkBlur(mSource, mStart, split, mDestination),</span><br><span class="line">                  <span class="keyword">new</span> ForkBlur(mSource, mStart + split, mLength - split,</span><br><span class="line">                               mDestination));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>Create a task that represents all of the work to be done.</li>
</ol>
<p>// source image pixels are in src<br>// destination image pixels are in dst<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ForkBlur fb = <span class="keyword">new</span> ForkBlur(src, <span class="number">0</span>, src.length, dst);</span><br></pre></td></tr></table></figure></p>
<ol>
<li>Create the ForkJoinPool that will run the task.</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ForkJoinPool pool = <span class="keyword">new</span> ForkJoinPool();</span><br></pre></td></tr></table></figure>
<ol>
<li>Run the task.</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pool.invoke(fb);</span><br></pre></td></tr></table></figure>
<p><strong>Referece from <a href="https://docs.oracle.com/javase/tutorial/essential/concurrency/runthread.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/tutorial/essential/concurrency/runthread.html</a></strong></p>
]]></content>
      <categories>
        <category>Big Data Architecture</category>
        <category>Parallel Computation</category>
      </categories>
  </entry>
  <entry>
    <title>Task Parallelism</title>
    <url>/Task-Parallelism/2019/06/08/</url>
    <content><![CDATA[<h1 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h1><ul>
<li><a href="#task-level-parallelism">Task-level Parallelism</a><ul>
<li><a href="#task-creation-and-termination-async-finish">Task Creation and Termination (Async, Finish)</a></li>
<li><a href="#creating-tasks-in-javas-forkjoin-framework">Creating Tasks in Java’s Fork/Join Framework</a></li>
<li><a href="#computation-graphs-work-span-ideal-parallelism">Computation Graphs, Work, Span, Ideal Parallelism</a><ul>
<li><a href="#computation-graphs-cgs">Computation Graphs (CGs)</a></li>
<li><a href="#ideal-parallelism">ideal parallelism</a></li>
</ul>
</li>
<li><a href="#multiprocessor-scheduling-parallel-speedup">Multiprocessor Scheduling, Parallel Speedup</a></li>
<li><a href="#amdahls-law">Amdahl’s Law</a></li>
</ul>
</li>
</ul>
<h2 id="Task-level-Parallelism"><a href="#Task-level-Parallelism" class="headerlink" title="Task-level Parallelism"></a>Task-level Parallelism</h2><h3 id="Task-Creation-and-Termination-Async-Finish"><a href="#Task-Creation-and-Termination-Async-Finish" class="headerlink" title="Task Creation and Termination (Async, Finish)"></a>Task Creation and Termination (Async, Finish)</h3><ol>
<li><strong>async</strong> notation:  “async ⟨stmt1⟩”, causes the parent task (i.e., the task executing the async statement) to create a new child task to execute the body of the async, ⟨stmt1⟩, asynchronously (i.e., before, after, or in parallel) with the remainder of the parent task.</li>
<li><strong>finish notation</strong>: “finish ⟨stmt2⟩” causes the parent task to execute ⟨stmt2⟩, and then wait until ⟨stmt2⟩ and all async tasks created within ⟨stmt2⟩ have completed</li>
<li>Async and finish constructs may be arbitrarily nested.</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">finish &#123;</span><br><span class="line">  async S1; // asynchronously compute sum of the lower half of the array</span><br><span class="line">  S2;       // compute sum of the upper half of the array in parallel with S1</span><br><span class="line">&#125;</span><br><span class="line">S3; // combine the two partial sums after both S1 and S2 have finished</span><br></pre></td></tr></table></figure>
<h3 id="Creating-Tasks-in-Java’s-Fork-Join-Framework"><a href="#Creating-Tasks-in-Java’s-Fork-Join-Framework" class="headerlink" title="Creating Tasks in Java’s Fork/Join Framework"></a>Creating Tasks in Java’s Fork/Join Framework</h3><p><strong>Fork/Join (FJ) framework</strong>  In this framework, a task can be specified in the 𝚌𝚘𝚖𝚙𝚞𝚝𝚎() method of a user-defined class that extends the standard RecursiveAction class in the FJ framework. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ASum</span> <span class="keyword">extends</span> <span class="title">RecursiveAction</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span>[] A; <span class="comment">// input array</span></span><br><span class="line">  <span class="keyword">int</span> LO, HI; <span class="comment">// subrange</span></span><br><span class="line">  <span class="keyword">int</span> SUM; <span class="comment">// return value</span></span><br><span class="line">  . . .</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SUM = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = LO; i &lt;= HI; i++) SUM += A[i];</span><br><span class="line">  &#125; <span class="comment">// compute()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Computation-Graphs-Work-Span-Ideal-Parallelism"><a href="#Computation-Graphs-Work-Span-Ideal-Parallelism" class="headerlink" title="Computation Graphs, Work, Span, Ideal Parallelism"></a>Computation Graphs, Work, Span, Ideal Parallelism</h3><p><img src="1.png" alt></p>
<h4 id="Computation-Graphs-CGs"><a href="#Computation-Graphs-CGs" class="headerlink" title="Computation Graphs (CGs)"></a>Computation Graphs (CGs)</h4><p><strong>Computation Graphs (CGs)</strong>, which model the execution of a parallel program as a partially ordered set. Specifically, a CG consists of:</p>
<ul>
<li>A set of vertices or nodes, in which each node represents a step consisting of an arbitrary sequential computation.</li>
<li><p>A set of directed edges that represent ordering constraints among steps.<br>For fork–join programs, it is useful to partition the edges into three cases:</p>
<ol>
<li>Continue edges that capture sequencing of steps within a task.</li>
<li>Fork edges that connect a fork operation to the first step of child tasks.</li>
<li>Join edges that connect the last step of a task to all join operations on that task.</li>
</ol>
</li>
</ul>
<p>CGs can be used to define data races, an important class of bugs in parallel programs. We say that a data race occurs on location L in a computation graph, G, if there exist steps S1 and S2 in G such that there is no path of directed edges from S1 to S2 or from S2 to S1 in G, and both S1 and S2 read or write L (with at least one of the accesses being a write, since two parallel reads do not pose a problem).</p>
<h4 id="ideal-parallelism"><a href="#ideal-parallelism" class="headerlink" title="ideal parallelism"></a>ideal parallelism</h4><p>CGs can also be used to reason about the ideal parallelism of a parallel program as follows:</p>
<ul>
<li>Define WORK(G) to be the sum of the execution times of all nodes in CG G,</li>
<li>Define SPAN(G) to be the length of a <strong>longest</strong> path in G, when adding up the execution times of all nodes in the path. The longest paths are known as critical paths, so SPAN also represents the critical path length (CPL) of G.</li>
</ul>
<p>Given the above definitions of WORK and SPAN, we define the <strong>ideal parallelism</strong> of Computation Graph G as the ratio, <strong>WORK(G)/SPAN(G)</strong>. The ideal parallelism is an upper limit on the speedup factor that can be obtained from parallel execution of nodes in computation graph G. Note that ideal parallelism is only a function of the parallel program, and does not depend on the actual parallelism available in a physical computer.</p>
<h3 id="Multiprocessor-Scheduling-Parallel-Speedup"><a href="#Multiprocessor-Scheduling-Parallel-Speedup" class="headerlink" title="Multiprocessor Scheduling, Parallel Speedup"></a>Multiprocessor Scheduling, Parallel Speedup</h3><ul>
<li>$T_p$: $T_p$ as the execution time of a CG on P processors</li>
<li>$T_1$: $T_1$ as the execution time of a CG on 1 processors</li>
<li>$T_{\infty}$ : $T_{\infty}$ as the execution time of a CG on 1 processors</li>
</ul>
<script type="math/tex; mode=display">T_{\infty} \leq T_p \leq  T_1</script><p>We also saw examples for which there could be different values of $T_p$ for different schedules of the same CG on P processors.<br><img src="2.png" alt></p>
<p><strong>speedup</strong>: given schedule of a CG on P processors as, $ Speedup(P) = \frac{T_1}{T_p} $. Speedup(P) must be $\leq$ the number of processors P , and also $\leq$ the ideal parallelism, WORK/SPAN.</p>
<h3 id="Amdahl’s-Law"><a href="#Amdahl’s-Law" class="headerlink" title="Amdahl’s Law"></a>Amdahl’s Law</h3><p>q is the fraction of WORK in a parallel program that must be executed sequentially:</p>
<script type="math/tex; mode=display">Speedup(P) \leq \frac{1}{q}</script>]]></content>
      <categories>
        <category>Big Data Architecture</category>
        <category>Parallel Computation</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Review</title>
    <url>/Java-Review/2019/06/07/</url>
    <content><![CDATA[<h2 id="变量和数据类型"><a href="#变量和数据类型" class="headerlink" title="变量和数据类型"></a>变量和数据类型</h2><p>Java提供了两种变量类型：基本类型和引用类型。基本类型包括整型，浮点型，布尔型，字符型。变量可重新赋值，等号是赋值语句，不是数学意义的等号。常量在初始化后不可重新赋值，使用常量便于理解程序意图。</p>
<h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><ul>
<li><strong>整数类型</strong>：byte，short，int，long</li>
<li><strong>浮点数类型</strong>：float，double</li>
<li><strong>字符类型</strong>：char</li>
<li><strong>布尔类型</strong>：boolean</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">数据类型</td>
<td style="text-align:left">大小(二进制位数)</td>
<td style="text-align:left">范围</td>
<td style="text-align:left">默认值</td>
<td style="text-align:left">包装类</td>
</tr>
<tr>
<td style="text-align:left">byte(字节)</td>
<td style="text-align:left">8</td>
<td style="text-align:left">-128 - 127</td>
<td style="text-align:left">0</td>
<td style="text-align:left">Integer</td>
</tr>
<tr>
<td style="text-align:left">shot(短整型)</td>
<td style="text-align:left">16</td>
<td style="text-align:left">-32768 - 32768</td>
<td style="text-align:left">0</td>
<td style="text-align:left">Short</td>
</tr>
<tr>
<td style="text-align:left">int(整型)</td>
<td style="text-align:left">32</td>
<td style="text-align:left">-2147483648-2147483648</td>
<td style="text-align:left">0</td>
<td style="text-align:left">Long</td>
</tr>
<tr>
<td style="text-align:left">long(长整型)</td>
<td style="text-align:left">64</td>
<td style="text-align:left">-9233372036854477808-9233372036854477808</td>
<td style="text-align:left">0</td>
<td style="text-align:left">Byte</td>
</tr>
<tr>
<td style="text-align:left">float(浮点型)</td>
<td style="text-align:left">32</td>
<td style="text-align:left">-3.40292347E+38-3.40292347E+38</td>
<td style="text-align:left">0.0f</td>
<td style="text-align:left">Float</td>
</tr>
<tr>
<td style="text-align:left">double(双精度)</td>
<td style="text-align:left">64</td>
<td style="text-align:left">-1.79769313486231570E+308-1.79769313486231570E+308</td>
<td style="text-align:left">0.0d</td>
<td style="text-align:left">Double</td>
</tr>
<tr>
<td style="text-align:left">char(字符型)</td>
<td style="text-align:left">16</td>
<td style="text-align:left">\\u0000 - u\\ffff</td>
<td style="text-align:left">\\u0000</td>
<td style="text-align:left">Character</td>
</tr>
<tr>
<td style="text-align:left">boolean(布尔型)</td>
<td style="text-align:left">1</td>
<td style="text-align:left">true/false</td>
<td style="text-align:left">false</td>
<td style="text-align:left">Boolean</td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>Java有一个能够表示任意精度的算书包，通常称为<strong>大数值</strong>(big number)。虽然被称为大数值，但它并不是一种Java类型，而是一个Java对象。<br>如果基本的整数和浮点数精度不能够满足需求，那么可以使用java.math包中的两个很有用的类：BigInteger,BigDecimal(Android SDK中也包含了java.math包以及这两个类)这两个类可以处理包含任意长度数字序列的数值。BigInteger类实现了任意精度的整数运算，BigDecimal实现了任意精度的浮点数运算</p>
</blockquote>
<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>定义变量的时候，如果加上<strong>final</strong>修饰符，这个变量就变成了常量。常量在定义时进行初始化后就不可再次赋值，再次赋值会导致编译错误。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">double</span> PI = <span class="number">3.14</span></span><br></pre></td></tr></table></figure></p>
<h3 id="var关键字"><a href="#var关键字" class="headerlink" title="var关键字"></a>var关键字</h3><p>有些时候，类型的名字太长，写起来比较麻烦。这个时候，如果想省略变量类型，可以使用<strong>var关键字</strong>，编译器会根据赋值语句自动推断出变量sb的类型是StringBuilder。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">var</span> sb = <span class="keyword">new</span> StringBuilder();</span><br></pre></td></tr></table></figure></p>
<h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p><strong>数组类型</strong> 定义一个数组类型的变量，使用数组类型<strong>类型[]</strong>，例如，int[]。和单个基本类型变量不同，数组变量初始化必须使用new int[5]表示创建一个可容纳5个int元素的数组。  </p>
<ul>
<li>数组所有元素初始化为默认值，整型都是0，浮点型是0.0，布尔型是false;  </li>
<li>数组一旦创建后，大小就不可改变。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] ns = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span>[] ns = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">68</span>, <span class="number">79</span>, <span class="number">91</span>, <span class="number">85</span>, <span class="number">62</span> &#125;;</span><br></pre></td></tr></table></figure>
<h3 id="字符串数组"><a href="#字符串数组" class="headerlink" title="字符串数组"></a>字符串数组</h3><p>如果数组元素不是基本类型，而是一个引用类型，那么，修改数组元素会有哪些不同？<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] names = &#123;</span><br><span class="line">    <span class="string">"ABC"</span>, <span class="string">"XYZ"</span>, <span class="string">"zoo"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p><img src="2.png" alt></p>
<h3 id="变量的作用范围"><a href="#变量的作用范围" class="headerlink" title="变量的作用范围"></a>变量的作用范围</h3><p>在Java中，多行语句用{ }括起来。很多控制语句，例如条件判断和循环，都以{ }作为它们自身的范围。而在语句块中定义的变量，它有一个作用域，就是从定义处开始，到语句块结束。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (...) &#123; <span class="comment">// if开始</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">while</span> (...) &#123; <span class="keyword">while</span> 开始</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (...) &#123; <span class="comment">// if开始</span></span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="comment">// if结束</span></span><br><span class="line">        ...</span><br><span class="line">    &#125; <span class="comment">// while结束</span></span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="comment">// if结束</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>; <span class="comment">// 变量i从这里开始定义</span></span><br><span class="line">    ...</span><br><span class="line">    &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">1</span>; <span class="comment">// 变量x从这里开始定义</span></span><br><span class="line">        ...</span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">            String s = <span class="string">"hello"</span>; <span class="comment">// 变量s从这里开始定义</span></span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="comment">// 变量s作用域到此结束</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// 注意，这是一个新的变量s，它和上面的变量同名，</span></span><br><span class="line">        <span class="comment">// 但是因为作用域不同，它们是两个不同的变量:</span></span><br><span class="line">        String s = <span class="string">"hi"</span>;</span><br><span class="line">        ...</span><br><span class="line">    &#125; <span class="comment">// 变量x和s作用域到此结束</span></span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="comment">// 变量i作用域到此结束</span></span><br></pre></td></tr></table></figure></p>
<h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><p>Java语言提供了很多修饰符，主要分为以下两类：</p>
<ul>
<li>访问修饰符</li>
<li>非访问修饰符</li>
</ul>
<h3 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">修饰符</th>
<th style="text-align:left">当前类</th>
<th style="text-align:left">同一包内</th>
<th style="text-align:left">子孙类(同一包)</th>
<th style="text-align:left">子孙类(不同包)</th>
<th style="text-align:left">其他包</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">public</td>
<td style="text-align:left">Y</td>
<td style="text-align:left">Y</td>
<td style="text-align:left">Y</td>
<td style="text-align:left">Y</td>
<td style="text-align:left">Y</td>
</tr>
<tr>
<td style="text-align:left">protected</td>
<td style="text-align:left">Y</td>
<td style="text-align:left">Y</td>
<td style="text-align:left">Y</td>
<td style="text-align:left">Y/N（说明）</td>
<td style="text-align:left">N</td>
</tr>
<tr>
<td style="text-align:left">default</td>
<td style="text-align:left">Y</td>
<td style="text-align:left">Y</td>
<td style="text-align:left">Y</td>
<td style="text-align:left">N</td>
<td style="text-align:left">N</td>
</tr>
<tr>
<td style="text-align:left">private</td>
<td style="text-align:left">Y</td>
<td style="text-align:left">N</td>
<td style="text-align:left">N</td>
<td style="text-align:left">N</td>
<td style="text-align:left">N</td>
</tr>
</tbody>
</table>
</div>
<h3 id="非访问修饰符"><a href="#非访问修饰符" class="headerlink" title="非访问修饰符"></a>非访问修饰符</h3><ol>
<li>static 修饰符，用来修饰类方法和类变量。</li>
</ol>
<p><strong>静态变量</strong>: static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。 <strong>静态变量也被称为类变量</strong>。局部变量不能被声明为 static 变量。对类变量和方法的访问可以直接使用 classname.variablename 和 classname.methodname 的方式访问。<br><strong>静态方法</strong>: static 关键字用来声明独立于对象的静态方法。静态方法不能使用类的非静态变量。静态方法从参数列表得到数据，然后计算这些数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceCounter</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> numInstances = <span class="number">0</span>;</span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> numInstances;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      numInstances++;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   InstanceCounter() &#123;</span><br><span class="line">      InstanceCounter.addInstance();</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arguments)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Starting with "</span> +</span><br><span class="line">      InstanceCounter.getCount() + <span class="string">" instances"</span>);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">500</span>; ++i)&#123;</span><br><span class="line">         <span class="keyword">new</span> InstanceCounter();</span><br><span class="line">          &#125;</span><br><span class="line">      System.out.println(<span class="string">"Created "</span> +</span><br><span class="line">      InstanceCounter.getCount() + <span class="string">" instances"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>final 修饰符，用来修饰类、方法和变量，final 修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。</li>
<li>abstract 修饰符，用来创建抽象类和抽象方法。</li>
<li>synchronized 和 volatile 修饰符，主要用于线程的编程。</li>
</ol>
<h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">操作符</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">A=10，B=20</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">+</td>
<td style="text-align:left">加法: 相加运算符两侧的值</td>
<td style="text-align:left">A + B 等于 30</td>
</tr>
<tr>
<td style="text-align:left">-</td>
<td style="text-align:left">减法: 左操作数减去右操作数</td>
<td style="text-align:left">A – B 等于 -10</td>
</tr>
<tr>
<td style="text-align:left">*</td>
<td style="text-align:left">乘法: 相乘操作符两侧的值</td>
<td style="text-align:left">A * B等于200</td>
</tr>
<tr>
<td style="text-align:left">/</td>
<td style="text-align:left">除法: 左操作数除以右操作数</td>
<td style="text-align:left">B / A等于2</td>
</tr>
<tr>
<td style="text-align:left">％</td>
<td style="text-align:left">取余: 左操作数除以右操作数的余数</td>
<td style="text-align:left">B%A等于0</td>
</tr>
<tr>
<td style="text-align:left">++</td>
<td style="text-align:left">自增: 操作数的值增加1</td>
<td style="text-align:left">B++ 或 ++B 等于 21</td>
</tr>
<tr>
<td style="text-align:left">—</td>
<td style="text-align:left">自减: 操作数的值减少1</td>
<td style="text-align:left">B— 或 —B 等于 19</td>
</tr>
</tbody>
</table>
</div>
<h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">例子</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">==</td>
<td style="text-align:left">检查如果两个操作数的值是否相等，如果相等则条件为真。</td>
<td style="text-align:left">（A == B）为假。</td>
</tr>
<tr>
<td style="text-align:left">!=</td>
<td style="text-align:left">检查如果两个操作数的值是否相等，如果值不相等则条件为真。</td>
<td style="text-align:left">(A != B) 为真。</td>
</tr>
<tr>
<td style="text-align:left">&gt;</td>
<td style="text-align:left">检查左操作数的值是否大于右操作数的值，如果是那么条件为真。</td>
<td style="text-align:left">（A&gt; B）为假。</td>
</tr>
<tr>
<td style="text-align:left">&lt;</td>
<td style="text-align:left">检查左操作数的值是否小于右操作数的值，如果是那么条件为真。</td>
<td style="text-align:left">（A &lt;B）为真。</td>
</tr>
<tr>
<td style="text-align:left">&gt;=</td>
<td style="text-align:left">检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。</td>
<td style="text-align:left">（A&gt; = B）为假。</td>
</tr>
<tr>
<td style="text-align:left">&lt;=</td>
<td style="text-align:left">检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。</td>
<td style="text-align:left">（A &lt;= B）为真。</td>
</tr>
</tbody>
</table>
</div>
<h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">例子</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">＆</td>
<td style="text-align:left">如果相对应位都是1，则结果为1，否则为0</td>
<td style="text-align:left">（A＆B），得到12，即0000 1100</td>
</tr>
<tr>
<td style="text-align:left">&#124;</td>
<td style="text-align:left">如果相对应位都是0，则结果为0，否则为1</td>
<td style="text-align:left">（A &#124; B）得到61，即 0011 1101</td>
</tr>
<tr>
<td style="text-align:left">^</td>
<td style="text-align:left">如果相对应位值相同，则结果为0，否则为1</td>
<td style="text-align:left">（A ^ B）得到49，即 0011 0001</td>
</tr>
<tr>
<td style="text-align:left">〜</td>
<td style="text-align:left">按位取反运算符翻转操作数的每一位，即0变成1，1变成0。</td>
<td style="text-align:left">（〜A）得到-61，即1100 0011</td>
</tr>
<tr>
<td style="text-align:left">&lt;&lt;</td>
<td style="text-align:left">按位左移运算符。左操作数按位左移右操作数指定的位数。</td>
<td style="text-align:left">A &lt;&lt; 2得到240，即 1111 0000</td>
</tr>
<tr>
<td style="text-align:left">&gt;&gt;</td>
<td style="text-align:left">按位右移运算符。左操作数按位右移右操作数指定的位数。</td>
<td style="text-align:left">A &gt;&gt; 2得到15即 1111</td>
</tr>
<tr>
<td style="text-align:left">&gt;&gt;&gt;</td>
<td style="text-align:left">按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。</td>
<td style="text-align:left">A&gt;&gt;&gt;2得到15即0000 1111</td>
</tr>
</tbody>
</table>
</div>
<h3 id="短路逻辑运算符"><a href="#短路逻辑运算符" class="headerlink" title="短路逻辑运算符"></a>短路逻辑运算符</h3><p>当使用与逻辑运算符时，在两个操作数都为true时，结果才为true，但是当得到第一个操作为false时，其结果就必定是false，这时候就不会再判断第二个操作了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LuoJi</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">5</span>;<span class="comment">//定义一个变量；</span></span><br><span class="line">        <span class="keyword">boolean</span> b = (a&lt;<span class="number">4</span>)&amp;&amp;(a++&lt;<span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">"使用短路逻辑运算符的结果为"</span>+b);</span><br><span class="line">        System.out.println(<span class="string">"a的结果为"</span>+a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">例子</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">&amp;&amp;</td>
<td style="text-align:left">称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真。</td>
<td style="text-align:left">（A &amp;&amp; B）为假。</td>
</tr>
<tr>
<td style="text-align:left">&#124;&#124;</td>
<td style="text-align:left">称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真。</td>
<td style="text-align:left">（A &#124;&#124; B）为真。</td>
</tr>
<tr>
<td style="text-align:left">！</td>
<td style="text-align:left">称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false。</td>
<td style="text-align:left">！（A &amp;&amp; B）为真。</td>
</tr>
</tbody>
</table>
</div>
<h3 id="条件运算符（-）"><a href="#条件运算符（-）" class="headerlink" title="条件运算符（?:）"></a>条件运算符（?:）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = (expression) ? value <span class="keyword">if</span> <span class="keyword">true</span> : value <span class="keyword">if</span> <span class="keyword">false</span></span><br></pre></td></tr></table></figure>
<h3 id="instanceof-运算符"><a href="#instanceof-运算符" class="headerlink" title="instanceof 运算符"></a>instanceof 运算符</h3><p>如果运算符左侧变量所指的对象，是操作符右侧类或接口(class/interface)的一个对象，那么结果为真。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">( Object reference variable ) <span class="keyword">instanceof</span>  (<span class="class"><span class="keyword">class</span>/<span class="title">interface</span> <span class="title">type</span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">String</span> <span class="title">name</span> </span>= <span class="string">"James"</span>;</span><br><span class="line"><span class="keyword">boolean</span> result = name <span class="keyword">instanceof</span> String; <span class="comment">// 由于 name 是 String 类型，所以返回真</span></span><br></pre></td></tr></table></figure></p>
<h3 id="类型自动提升与强制转型"><a href="#类型自动提升与强制转型" class="headerlink" title="类型自动提升与强制转型"></a>类型自动提升与强制转型</h3><ul>
<li>在运算过程中，如果参与运算的两个数类型不一致，那么计算结果为较大类型的整型。例如，short和int计算，结果总是int，原因是short首先自动被转型为int</li>
<li><p>如果参与运算的两个数其中一个是整型，那么整型可以自动提升到浮点型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">double</span> d = <span class="number">1.2</span> + <span class="number">24.0</span> / n; <span class="comment">// 6.0</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>可以将浮点数强制转型为整数。在转型时，浮点数的小数部分会被丢掉。如果转型后超过了整型能表示的最大范围，将返回整型的最大值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n4 = (<span class="keyword">int</span>) <span class="number">1.2e20</span>; <span class="comment">// 2147483647</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="字符和字符串"><a href="#字符和字符串" class="headerlink" title="字符和字符串"></a>字符和字符串</h2><h3 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h3><p>char是基本数据类型，它是character的缩写。一个char保存一个Unicode字符。因为Java在内存中总是使用Unicode表示字符，所以，一个英文字符和一个中文字符都用一个char类型表示，它们<strong>都占用两个字节</strong>。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> c1 = <span class="string">'A'</span>;</span><br><span class="line"><span class="keyword">char</span> c2 = <span class="string">'中'</span>;</span><br></pre></td></tr></table></figure></p>
<p>要显示一个字符的Unicode编码，只需将char类型直接赋值给int类型即可：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n1 = <span class="string">'A'</span>; <span class="comment">// 字母“A”的Unicodde编码是65</span></span><br><span class="line"><span class="keyword">int</span> n2 = <span class="string">'中'</span>; <span class="comment">// 汉字“中”的Unicode编码是20013</span></span><br></pre></td></tr></table></figure></p>
<p>还可以直接用转义字符\u+Unicode编码来表示一个字符：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> c3 = <span class="string">'\u0041'</span>; <span class="comment">// 'A'，因为十六进制0041 = 十进制65</span></span><br><span class="line"><span class="keyword">char</span> c4 = <span class="string">'\u4e2d'</span>; <span class="comment">// '中'，因为十六进制4e2d = 十进制20013</span></span><br></pre></td></tr></table></figure></p>
<h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><p>字符串类型String是引用类型,使用双引号”…”表示开始和结束。可以使用+连接任意字符串和其他数据类型。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s = <span class="string">""</span>; <span class="comment">// 空字符串，包含0个字符</span></span><br><span class="line">String s1 = <span class="string">"A"</span>; <span class="comment">// 包含一个字符</span></span><br><span class="line">String s2 = <span class="string">"ABC"</span>; <span class="comment">// 包含3个字符</span></span><br><span class="line">String s3 = <span class="string">"中文 ABC"</span>; <span class="comment">// 包含6个字符，其中有一个空格</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> age = <span class="number">25</span>;</span><br><span class="line">String s = <span class="string">"age is "</span> + age;</span><br></pre></td></tr></table></figure></p>
<p><strong>字符串不可变</strong>。<br><img src="1.png" alt></p>
<h2 id="空值null"><a href="#空值null" class="headerlink" title="空值null"></a>空值null</h2><p>引用类型的变量可以指向一个空值null，它表示不存在，即该变量不指向任何对象。<strong>注意要区分空值null和空字符串””，空字符串是一个有效的字符串对象，它不等于null</strong>。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s1 = <span class="keyword">null</span>; <span class="comment">// s1是null</span></span><br></pre></td></tr></table></figure></p>
<h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.printf(<span class="string">"%.2f\n"</span>, d); <span class="comment">// 显示两位小数3.14</span></span><br><span class="line">System.out.printf(<span class="string">"%.4f\n"</span>, d); <span class="comment">// 显示4位小数3.1416</span></span><br><span class="line">System.out.printf(<span class="string">"n=%d, hex=%08x"</span>, n, n); <span class="comment">// 注意，两个%占位符必须传入两个数</span></span><br></pre></td></tr></table></figure>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">占位符</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">%d</td>
<td style="text-align:left">格式化输出整数</td>
</tr>
<tr>
<td style="text-align:left">%x</td>
<td style="text-align:left">格式化输出十六进制整数</td>
</tr>
<tr>
<td style="text-align:left">%f</td>
<td style="text-align:left">格式化输出浮点数</td>
</tr>
<tr>
<td style="text-align:left">%e</td>
<td style="text-align:left">格式化输出科学计数法表示的浮点数</td>
</tr>
<tr>
<td style="text-align:left">%s</td>
<td style="text-align:left">格式化字符串</td>
</tr>
</tbody>
</table>
</div>
<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>首先，我们通过import语句导入<strong>java.util.Scanner</strong>，import是导入某个类的语句，必须放到Java源代码的开头，后面我们在Java的package中会详细讲解如何使用import。然后，<strong>创建Scanner对象并传入System.in</strong>。System.out代表标准输出流，而System.in代表标准输入流。直接使用System.in读取用户输入虽然是可以的，但需要更复杂的代码，而<strong>通过Scanner就可以简化后续的代码</strong>。有了Scanner对象后，要读取用户输入的字符串，使用scanner.nextLine()，要读取用户输入的整数，使用scanner.nextInt()。Scanner会自动转换数据类型，因此不必手动转换。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in); <span class="comment">// 创建Scanner对象</span></span><br><span class="line">        System.out.print(<span class="string">"Input your name: "</span>); <span class="comment">// 打印提示</span></span><br><span class="line">        String name = scanner.nextLine(); <span class="comment">// 读取一行输入并获取字符串</span></span><br><span class="line">        System.out.print(<span class="string">"Input your age: "</span>); <span class="comment">// 打印提示</span></span><br><span class="line">        <span class="keyword">int</span> age = scanner.nextInt(); <span class="comment">// 读取一行输入并获取整数</span></span><br><span class="line">        System.out.printf(<span class="string">"Hi, %s, you are %d\n"</span>, name, age); <span class="comment">// 格式化输出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a>if判断</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件) &#123;  <span class="comment">// （true or false)</span></span><br><span class="line">    <span class="comment">// 条件为true满足时执行</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 条件为false满足时执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="判断引用类型相等"><a href="#判断引用类型相等" class="headerlink" title="判断引用类型相等"></a>判断引用类型相等</h4><p>判断<strong>值类型</strong>的变量是否相等，可以使用==运算符。但是，判断引用类型的变量是否相等，==表示<strong>引用是否相等</strong>，或者说，是否指向同一个对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s1 = <span class="string">"hello"</span>;</span><br><span class="line">String s2 = <span class="string">"HELLO"</span>.toLowerCase();</span><br><span class="line"><span class="keyword">if</span> (s1 == s2) &#123;</span><br><span class="line">    System.out.println(<span class="string">"s1 == s2"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"s1 != s2"</span>); <span class="comment">// s1,s2引用不同的对象</span></span><br></pre></td></tr></table></figure>
<p>要判断引用类型的变量内容是否相等，必须使用equals()方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s1 = <span class="string">"hello"</span>;</span><br><span class="line">String s2 = <span class="string">"HELLO"</span>.toLowerCase();</span><br><span class="line"><span class="keyword">if</span> (s1.equals(s2)) &#123;</span><br><span class="line">    System.out.println(<span class="string">"s1 == s2"</span>); <span class="comment">// s1,s2 值相等</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"s1 != s2"</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">//要避免NullPointerException错误，可以利用**短路运算符&amp;&amp;**：</span></span><br><span class="line">```Java</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s1 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (s1 != <span class="keyword">null</span> &amp;&amp; s1.equals(<span class="string">"hello"</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="switch多重选择"><a href="#switch多重选择" class="headerlink" title="switch多重选择"></a>switch多重选择</h3><p>switch语句根据<strong>switch (表达式)</strong>计算的结果，跳转到<strong>匹配的case结果</strong>，然后继续执行后续语句，直到遇到break结束执行。可以给switch语句加一个default，当<strong>没有</strong>匹配到任何case时，执行default。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> option = <span class="number">99</span>;</span><br><span class="line">        <span class="keyword">switch</span> (option) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            System.out.println(<span class="string">"Selected 1"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            System.out.println(<span class="string">"Selected 2"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            System.out.println(<span class="string">"Selected 3"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            System.out.println(<span class="string">"Not selected"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if (option == 1) &#123;</span></span><br><span class="line"><span class="comment">//     System.out.println("Selected 1");</span></span><br><span class="line"><span class="comment">// &#125; else if (option == 2) &#123;</span></span><br><span class="line"><span class="comment">//     System.out.println("Selected 2");</span></span><br><span class="line"><span class="comment">// &#125; else if (option == 3) &#123;</span></span><br><span class="line"><span class="comment">//     System.out.println("Selected 3");</span></span><br><span class="line"><span class="comment">// &#125; else &#123;</span></span><br><span class="line"><span class="comment">//     System.out.println("Not selected");</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><h4 id="while-循环-与-do…-while-循环"><a href="#while-循环-与-do…-while-循环" class="headerlink" title="while 循环 与 do… while 循环"></a>while 循环 与 do… while 循环</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件表达式) &#123;</span><br><span class="line">    循环语句</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    执行循环语句</span><br><span class="line">&#125; <span class="keyword">while</span> (条件表达式);</span><br></pre></td></tr></table></figure>
<h4 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h4><p>for循环的功能非常强大，它使用计数器实现循环。for循环会先初始化计数器，然后，在每次循环前检测循环条件，在每次循环后更新计数器。计数器变量通常命名为i。for循环还可以缺少初始化语句、循环条件和每次循环更新语句。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始条件; 循环检测条件; 循环后更新计数器) &#123;</span><br><span class="line">    <span class="comment">// 执行语句</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不设置结束条件:</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; ; i++) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不设置结束条件和更新语句:</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; ;) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 什么都不设置:</span></span><br><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Java还提供了另一种for each循环，它可以更简单地遍历数组。for each循环能够遍历所有“可迭代”的数据类型，包括后面会介绍的List、Map等。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] ns = &#123; <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span> &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=?; ?; ?) &#123;</span><br><span class="line">            System.out.println(ns[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="break-and-continue"><a href="#break-and-continue" class="headerlink" title="break and continue"></a>break and continue</h4><ol>
<li>在循环过程中，可以使用<strong>break</strong>语句跳出当前循环。</li>
<li>continue可以提前结束本次循环，直接继续执行下次循环。</li>
</ol>
<h2 id="对象和类"><a href="#对象和类" class="headerlink" title="对象和类"></a>对象和类</h2><p>Java作为一种面向对象语言。支持以下基本概念：  </p>
<ul>
<li>多态</li>
<li>继承</li>
<li>封装</li>
<li>抽象</li>
<li>类</li>
<li>对象</li>
<li>实例</li>
<li>方法</li>
<li>重载</li>
</ul>
<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>类可以看成是创建Java对象的模板。  </p>
<ol>
<li>一个类可以包含以下类型变量：    </li>
</ol>
<ul>
<li><strong>局部变量</strong>：在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。</li>
<li><strong>成员变量</strong>：成员变量是定义在类中，方法体之外的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问。</li>
<li><strong>类变量</strong>：类变量也声明在类中，方法体之外，但必须声明为static类型。</li>
</ul>
<ol>
<li>一个类可以拥有多个方法，在上面的例子中：barking()、hungry()和sleeping()都是Dog类的方法。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">  String breed;</span><br><span class="line">  <span class="keyword">int</span> age;</span><br><span class="line">  String color;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">barking</span><span class="params">()</span></span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">hungry</span><span class="params">()</span></span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">sleeping</span><span class="params">()</span></span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="对象构造和初始化"><a href="#对象构造和初始化" class="headerlink" title="对象构造和初始化"></a>对象构造和初始化</h3><ul>
<li><strong>声明</strong>：声明一个对象，包括对象名称和对象类型。</li>
<li><strong>实例化</strong>：使用关键字new来创建一个对象。</li>
<li><strong>初始化</strong>：使用new创建对象时，会调用构造方法初始化对象。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Puppy</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Puppy</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Puppy</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 这个构造器仅有一个参数：name</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Puppy</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Puppy</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">      <span class="comment">//这个构造器仅有一个参数：name</span></span><br><span class="line">      System.out.println(<span class="string">"小狗的名字是 : "</span> + name ); </span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      <span class="comment">// 下面的语句将创建一个Puppy对象</span></span><br><span class="line">      Puppy myPuppy = <span class="keyword">new</span> Puppy( <span class="string">"tommy"</span> );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="实例变量和调用成员方法"><a href="#实例变量和调用成员方法" class="headerlink" title="实例变量和调用成员方法"></a>实例变量和调用成员方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Puppy</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> puppyAge;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Puppy</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">      <span class="comment">// 这个构造器仅有一个参数：name</span></span><br><span class="line">      System.out.println(<span class="string">"小狗的名字是 : "</span> + name ); </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">( <span class="keyword">int</span> age )</span></span>&#123;</span><br><span class="line">       puppyAge = age;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">( )</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"小狗的年龄为 : "</span> + puppyAge ); </span><br><span class="line">       <span class="keyword">return</span> puppyAge;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      <span class="comment">/* 创建对象 */</span></span><br><span class="line">      Puppy myPuppy = <span class="keyword">new</span> Puppy( <span class="string">"tommy"</span> );</span><br><span class="line">      <span class="comment">/* 通过方法来设定age */</span></span><br><span class="line">      myPuppy.setAge( <span class="number">2</span> );</span><br><span class="line">      <span class="comment">/* 调用另一个方法获取age */</span></span><br><span class="line">      myPuppy.getAge( );</span><br><span class="line">      <span class="comment">/*你也可以像下面这样访问成员变量 */</span></span><br><span class="line">      System.out.println(<span class="string">"变量值 : "</span> + myPuppy.puppyAge ); </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 父类 </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> 子类 <span class="keyword">extends</span> 父类 </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="继承类型"><a href="#继承类型" class="headerlink" title="继承类型"></a>继承类型</h3><p><img src="3.png" alt></p>
<h3 id="继承的特性"><a href="#继承的特性" class="headerlink" title="继承的特性"></a>继承的特性</h3><ol>
<li>子类拥有父类非 private 的属性、方法。</li>
<li>子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。</li>
<li>子类可以用自己的方式实现父类的方法。</li>
</ol>
<h3 id="继承关键字"><a href="#继承关键字" class="headerlink" title="继承关键字"></a>继承关键字</h3><p>继承可以使用 <strong>extends</strong> 和 <strong>implements</strong> 这两个关键字来实现继承，而且所有的类都是继承于 java.lang.Object，当一个类没有继承的两个关键字，则默认继承object（这个类在 java.lang 包中，所以不需要 import）祖先类。</p>
<ol>
<li><p><strong>extends关键字</strong> 在 Java 中，类的继承是单一继承，也就是说，一个子类只能拥有一个父类，所以 extends 只能继承一个类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> String name;   </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String myName, String myid)</span> </span>&#123; </span><br><span class="line">        <span class="comment">//初始化属性值</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;  <span class="comment">//吃东西方法的具体实现  &#125; </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123; <span class="comment">//睡觉方法的具体实现  &#125; </span></span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Penguin</span>  <span class="keyword">extends</span>  <span class="title">Animal</span></span>&#123; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>implements关键字</strong> 使用 implements 关键字可以变相的使java具有多继承的特性，使用范围为类继承接口的情况，可以同时继承多个接口（接口跟接口之间采用逗号分隔）。</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">A</span>,<span class="title">B</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li><strong>super 与 this 关键字</strong></li>
</ol>
<ul>
<li>super：我们可以通过super关键字来实现对父类成员的访问，用来引用当前对象的父类。</li>
<li>this：指向自己的引用。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"animal : eat"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"dog : eat"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">eatTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.eat();   <span class="comment">// this 调用自己的方法</span></span><br><span class="line">    <span class="keyword">super</span>.eat();  <span class="comment">// super 调用父类方法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Animal a = <span class="keyword">new</span> Animal();</span><br><span class="line">    a.eat();</span><br><span class="line">    Dog d = <span class="keyword">new</span> Dog();</span><br><span class="line">    d.eatTest();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// animal : eat</span></span><br><span class="line"><span class="comment">// dog : eat</span></span><br><span class="line"><span class="comment">// animal : eat</span></span><br></pre></td></tr></table></figure>
<ol>
<li><p><strong>final关键字</strong> final 关键字声明类可以把类定义为不能继承的，即最终类；或者用于修饰方法，该方法不能被子类重写。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> 类名 </span>&#123;类体&#125;</span><br><span class="line">修饰符(<span class="keyword">public</span>/<span class="keyword">private</span>/<span class="keyword">default</span>/<span class="keyword">protected</span>) <span class="keyword">final</span> 返回值类型 方法名()&#123;<span class="comment">//方法体&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>子类是<strong>不继承</strong>父类的构造器（构造方法或者构造函数）的，它只是<strong>调用</strong>（隐式或显式）。如果父类的构造器带有参数，则必须在子类的构造器中显式地通过 <strong>super</strong> 关键字调用父类的构造器并配以适当的参数列表。如果父类构造器没有参数，则在子类的构造器中不需要使用 super 关键字调用父类构造器，系统会自动调用父类的无参构造器。</p>
</li>
</ol>
<h2 id="重写-Override-与重载-Overload"><a href="#重写-Override-与重载-Overload" class="headerlink" title="重写(Override)与重载(Overload)"></a>重写(Override)与重载(Overload)</h2><h3 id="重写-Override-规则"><a href="#重写-Override-规则" class="headerlink" title="重写(Override)规则"></a>重写(Override)规则</h3><ul>
<li>参数列表必须完全与被重写方法的相同；</li>
<li>返回类型与被重写方法的返回类型可以不相同，但是必须是父类返回值的派生类（java5 及更早版本返回类型要一样，java7 及更高版本可以不同）；<br>访问权限不能比父类中被重写的方法的访问权限更低。例如：如果父类的一个方法被声明为public，那么在子类中重写该方法就不能声明为protected。</li>
<li>父类的成员方法只能被它的子类重写。</li>
<li>声明为final的方法不能被重写。</li>
<li>声明为static的方法不能被重写，但是能够被再次声明。</li>
<li>子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为private和final的方法。</li>
<li>子类和父类不在同一个包中，那么子类只能够重写父类的声明为public和protected的非final方法。</li>
<li>重写的方法能够抛出任何非强制异常，无论被重写的方法是否抛出异常。但是，重写的方法不能抛出新的强制性异常，或者比被重写方法声明的更广泛的强制性异常，反之则可以。</li>
<li>构造方法不能被重写。</li>
<li>如果不能继承一个方法，则不能重写这个方法。</li>
<li>当需要在子类中调用父类的被重写方法时，要使用super关键字。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"动物可以移动"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"狗可以跑和走"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"狗可以吠叫"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDog</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">      Animal a = <span class="keyword">new</span> Animal(); <span class="comment">// Animal 对象</span></span><br><span class="line">      Animal b = <span class="keyword">new</span> Dog(); <span class="comment">// Dog 对象</span></span><br><span class="line"> </span><br><span class="line">      a.move();<span class="comment">// 执行 Animal 类的方法</span></span><br><span class="line">      b.move();<span class="comment">//执行 Dog 类的方法</span></span><br><span class="line">      b.bark();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="重载-Overload-规则"><a href="#重载-Overload-规则" class="headerlink" title="重载(Overload)规则"></a>重载(Overload)规则</h3><ul>
<li>被重载的方法必须改变参数列表(参数个数或类型不一样)；</li>
<li>被重载的方法可以改变返回类型；</li>
<li>被重载的方法可以改变访问修饰符；</li>
<li>被重载的方法可以声明新的或更广的检查异常；</li>
<li>方法能够在同一个类中或者在一个子类中被重载。</li>
<li>无法以返回值类型作为重载函数的区分标准。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Overloading</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"test1"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"test2"</span>);</span><br><span class="line">    &#125;   </span><br><span class="line"> </span><br><span class="line">    <span class="comment">//以下两个参数类型顺序不同</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(<span class="keyword">int</span> a,String s)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"test3"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"returntest3"</span>;</span><br><span class="line">    &#125;   </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(String s,<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"test4"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"returntest4"</span>;</span><br><span class="line">    &#125;   </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Overloading o = <span class="keyword">new</span> Overloading();</span><br><span class="line">        System.out.println(o.test());</span><br><span class="line">        o.test(<span class="number">1</span>);</span><br><span class="line">        System.out.println(o.test(<span class="number">1</span>,<span class="string">"test3"</span>));</span><br><span class="line">        System.out.println(o.test(<span class="string">"test4"</span>,<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="重写与重载之间的区别"><a href="#重写与重载之间的区别" class="headerlink" title="重写与重载之间的区别"></a>重写与重载之间的区别</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">区别点</th>
<th style="text-align:left">重载方法</th>
<th style="text-align:left">重写方法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">参数列表</td>
<td style="text-align:left">必须修改</td>
<td style="text-align:left">一定不能修改</td>
</tr>
<tr>
<td style="text-align:left">返回类型</td>
<td style="text-align:left">可以修改</td>
<td style="text-align:left">一定不能修改</td>
</tr>
<tr>
<td style="text-align:left">异常</td>
<td style="text-align:left">可以修改</td>
<td style="text-align:left">可以减少或删除，一定不能抛出新的或者更广的异常</td>
</tr>
<tr>
<td style="text-align:left">访问</td>
<td style="text-align:left">可以修改</td>
<td style="text-align:left">一定不能做更严格的限制（可以降低限制）</td>
</tr>
</tbody>
</table>
</div>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><blockquote>
<p>现实中，比如我们按下 F1 键这个动作：<br>如果当前在 Flash 界面下弹出的就是 AS 3 的帮助文档；<br>如果当前在 Word 下弹出的就是 Word 帮助；<br>在 Windows 下弹出的就是 Windows 帮助和支持。<br><strong>同一个事件发生在不同的对象上会产生不同的结果</strong>。</p>
</blockquote>
<p>多态存在的三个必要条件  </p>
<ul>
<li>继承</li>
<li>重写</li>
<li>父类引用指向子类对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      show(<span class="keyword">new</span> Cat());  <span class="comment">// 以 Cat 对象调用 show 方法</span></span><br><span class="line">      show(<span class="keyword">new</span> Dog());  <span class="comment">// 以 Dog 对象调用 show 方法</span></span><br><span class="line">                </span><br><span class="line">      Animal a = <span class="keyword">new</span> Cat();  <span class="comment">// 向上转型  </span></span><br><span class="line">      a.eat();               <span class="comment">// 调用的是 Cat 的 eat</span></span><br><span class="line">      Cat c = (Cat)a;        <span class="comment">// 向下转型  </span></span><br><span class="line">      c.work();        <span class="comment">// 调用的是 Cat 的 work</span></span><br><span class="line">  &#125;  </span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Animal a)</span>  </span>&#123;</span><br><span class="line">      a.eat();  </span><br><span class="line">        <span class="comment">// 类型判断</span></span><br><span class="line">        <span class="keyword">if</span> (a <span class="keyword">instanceof</span> Cat)  &#123;  <span class="comment">// 猫做的事情 </span></span><br><span class="line">            Cat c = (Cat)a;  </span><br><span class="line">            c.work();  </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a <span class="keyword">instanceof</span> Dog) &#123; <span class="comment">// 狗做的事情 </span></span><br><span class="line">            Dog c = (Dog)a;  </span><br><span class="line">            c.work();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"吃鱼"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"抓老鼠"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"吃骨头"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"看家"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="抽象类与抽象方法"><a href="#抽象类与抽象方法" class="headerlink" title="抽象类与抽象方法"></a>抽象类与抽象方法</h2><ol>
<li>如果一个类包含抽象方法，那么该类必须是抽象类。</li>
<li>任何子类必须重写父类的抽象方法，或者声明自身为抽象类。</li>
<li>抽象类不能被实例化(初学者很容易犯的错)，如果被实例化，就会报错，编译无法通过。只有抽象类的非抽象子类可以创建对象。</li>
<li>抽象类中不一定包含抽象方法，但是有抽象方法的类必定是抽象类。</li>
<li>抽象类中的抽象方法只是声明，不包含方法体，就是不给出方法的具体实现也就是方法的具体功能。</li>
<li>构造方法，类方法（用 static 修饰的方法）不能声明为抽象方法。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> String address;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">computePay</span><span class="params">()</span></span>;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//其余代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><ol>
<li><p>修改属性的可见性来限制对属性的访问（一般限制为private），例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>对每个值属性提供对外的公共方法访问，也就是创建一对赋取值方法，用于对私有属性的访问，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 采用 this 关键字是为了解决实例变量（private String name）和局部变量（setName(String name)中的name变量）之间发生的同名的冲突。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">​</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">​</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">​</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">​</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ol>
<li>接口并不是类，编写接口的方式和类很相似，但是它们属于不同的概念。类描述对象的属性和方法。接口则包含类要实现的方法。<br>除非实现接口的类是抽象类，否则该类要定义接口中的所有方法。</li>
<li>接口无法被实例化，但是可以被实现。一个实现接口的类，必须实现接口内所描述的所有方法，否则就必须声明为抽象类。另外，在 Java 中，接口类型可用来声明一个变量，他们可以成为一个空指针，或是被绑定在一个以此接口实现的对象。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[可见度] interface 接口名称 [extends 其他的接口名] &#123;</span><br><span class="line">        <span class="comment">// 声明变量</span></span><br><span class="line">        <span class="comment">// 抽象方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="接口与类的区别："><a href="#接口与类的区别：" class="headerlink" title="接口与类的区别："></a>接口与类的区别：</h3><ul>
<li>接口不能用于实例化对象。</li>
<li>接口没有构造方法。</li>
<li>接口中所有的方法必须是抽象方法。</li>
<li>接口不能包含成员变量，除了 static 和 final 变量。</li>
<li>接口不是被类继承了，而是要被类实现。</li>
<li>接口支持多继承。</li>
</ul>
<h3 id="抽象类和接口的区别"><a href="#抽象类和接口的区别" class="headerlink" title="抽象类和接口的区别"></a>抽象类和接口的区别</h3><ul>
<li>抽象类中的方法可以有方法体，就是能实现方法的具体功能，但是接口中的方法不行。</li>
<li>抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是 public static final 类型的。</li>
<li>接口中不能含有静态代码块以及静态方法(用 static 修饰的方法)，而抽象类是可以有静态代码块和静态方法。</li>
<li>一个类只能继承一个抽象类，而一个类却可以实现多个接口。</li>
</ul>
<h2 id="源文件声明规则"><a href="#源文件声明规则" class="headerlink" title="源文件声明规则"></a>源文件声明规则</h2><ol>
<li>一个源文件中只能有一个public类</li>
<li>一个源文件可以有多个非public类</li>
<li>源文件的名称应该和public类的类名保持一致。例如：源文件中public类的类名是Employee，那么源文件应该命名为Employee.java。</li>
<li>如果一个类定义在某个包中，那么package语句应该在源文件的首行。</li>
<li>如果源文件包含import语句，那么应该放在package语句和类定义之间。如果没有package语句，那么import语句应该在源文件中最前面。</li>
<li>import语句和package语句对源文件中定义的所有类都有效。在同一源文件中，不能给不同的类不同的包声明。</li>
</ol>
<h2 id="Java包"><a href="#Java包" class="headerlink" title="Java包"></a>Java包</h2><p>包主要用来对类和接口进行分类。当开发Java程序时，可能编写成百上千的类，因此很有必要对类和接口进行分类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> pkg1[．pkg2[．pkg3…]];</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 文件名: Animal.java */</span></span><br><span class="line"><span class="keyword">package</span> animals;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">travel</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// -------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 文件名 : MammalInt.java */</span></span><br><span class="line"><span class="keyword">package</span> animals;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MammalInt</span> <span class="keyword">implements</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Mammal eats"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">travel</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Mammal travels"</span>);</span><br><span class="line">   &#125; </span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">noOfLegs</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">      MammalInt m = <span class="keyword">new</span> MammalInt();</span><br><span class="line">      m.eat();</span><br><span class="line">      m.travel();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Import语句"><a href="#Import语句" class="headerlink" title="Import语句"></a>Import语句</h3><p>在Java中，如果给出一个完整的限定名，包括包名、类名，那么Java编译器就可以很容易地定位到源代码或者类。Import语句就是用来提供一个合理的路径，使得编译器可以找到某个类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> package1[.package2…].(classname|*);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programming Language</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Assembler Project</title>
    <url>/Assembler-Project/2019/06/05/</url>
    <content><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p><strong>Objective</strong> Develop an assembler that translates programs written in Hack assembly language into the binary code understood by the Hack hardware platform. </p>
<p><strong>Resources</strong> The only tool needed for completing this project is the program- ming language in which you will implement your assembler. You may also find the following two tools useful: the assembler and CPU emulator supplied with the book. These tools allow you to experiment with a working assembler before you set out to build one yourself. In addition, the supplied assembler provides a visual line-by-line translation GUI and allows online code comparisons with the outputs that your assembler will generate. For more information about these capabilities, refer to the assembler tutorial (part of the book’s software suite).</p>
<p><strong>Contract</strong> When loaded into your assembler, a Prog.asm file containing a valid Hack assembly language program should be translated into the correct Hack binary code and stored in a Prog.hack file. The output produced by your assembler must be identical to the output produced by the assembler supplied with the book.</p>
<p><strong>Building Plan</strong> We suggest building the assembler in two stages. First write a symbol-less assembler, namely, an assembler that can only translate programs that contain no symbols. Then extend your assembler with symbol handling capabilities. The test programs that we supply here come in two such versions (without and with symbols), to help you test your assembler incrementally.</p>
<p><strong>Test Programs</strong> Each test program except the first one comes in two versions: ProgL.asm is symbol-less, and Prog.asm is with symbols.</p>
<ul>
<li>Add: Adds the constants 2 and 3 and puts the result in R0.</li>
<li>Max: Computes maxðR0; R1Þ and puts the result in R2.<br>-Rect: Draws a rectangle at the top left corner of the screen. The rectangle is 16 pixels wide and R0 pixels high.</li>
<li>Pong: A single-player Ping-Pong game. A ball bounces constantly off the screen’s ‘‘walls.’’ The player attempts to hit the ball with a bat by pressing the left and right arrow keys. For every successful hit, the player gains one point and the bat shrinks a little to make the game harder. If the player misses the ball, the game is over. To quit the game, press ESC.</li>
</ul>
<p>The Pong program was written in the Jack programming language (chapter 9) and translated into the supplied assembly program by the Jack compiler (chap- ters 10–11). Although the original Jack program is only about 300 lines of code, the executable Pong application is about 20,000 lines of binary code, most of which being the Jack operating system (chapter 12). Running this interactive pro- gram in the CPU emulator is a slow affair, so don’t expect a high-powered Pong game. This slowness is actually a virtue, since it enables your eye to track the graphical behavior of the program. In future projects in the book, this game will run much faster.</p>
<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p><strong>Parser</strong>: unpacks each instruction into its underlying fields<br><strong>Code</strong>: translates each field into its corresponding binary value<br><strong>SymbolTable</strong>: manages the symbol table<br><strong>Main</strong>: initializes I/O files and drives the process.</p>
<p><img src="1.png" alt><br><img src="2.png" alt><br><img src="3.png" alt></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">A_COMMAND = <span class="number">1</span></span><br><span class="line">C_COMMAND = <span class="number">2</span></span><br><span class="line">L_COMMAND = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SymbolTable</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.symbol_table = &#123;</span><br><span class="line">            <span class="string">"R0"</span>:<span class="number">0</span>,</span><br><span class="line">            <span class="string">"R1"</span>:<span class="number">1</span>,</span><br><span class="line">            <span class="string">"R2"</span>:<span class="number">2</span>,</span><br><span class="line">            <span class="string">"R3"</span>:<span class="number">3</span>,</span><br><span class="line">            <span class="string">"R4"</span>:<span class="number">4</span>,</span><br><span class="line">            <span class="string">"R5"</span>:<span class="number">5</span>,</span><br><span class="line">            <span class="string">"R6"</span>:<span class="number">6</span>,</span><br><span class="line">            <span class="string">"R7"</span>:<span class="number">7</span>,</span><br><span class="line">            <span class="string">"R8"</span>:<span class="number">8</span>,</span><br><span class="line">            <span class="string">"R9"</span>:<span class="number">9</span>,</span><br><span class="line">            <span class="string">"R10"</span>:<span class="number">10</span>,</span><br><span class="line">            <span class="string">"R11"</span>:<span class="number">11</span>,</span><br><span class="line">            <span class="string">"R12"</span>:<span class="number">12</span>,</span><br><span class="line">            <span class="string">"R13"</span>:<span class="number">13</span>,</span><br><span class="line">            <span class="string">"R14"</span>:<span class="number">14</span>,</span><br><span class="line">            <span class="string">"R15"</span>:<span class="number">15</span>,</span><br><span class="line">            <span class="string">"SCREEN"</span>:<span class="number">16384</span>,</span><br><span class="line">            <span class="string">"KBD"</span>:<span class="number">24576</span>,</span><br><span class="line">            <span class="string">"SP"</span>:<span class="number">0</span>,</span><br><span class="line">            <span class="string">"LCL"</span>:<span class="number">1</span>,</span><br><span class="line">            <span class="string">"ARG"</span>:<span class="number">2</span>,</span><br><span class="line">            <span class="string">"THIS"</span>:<span class="number">3</span>,</span><br><span class="line">            <span class="string">"THAT"</span>:<span class="number">4</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addEntry</span><span class="params">(self,symbol,address)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.contains(symbol):</span><br><span class="line">            self.symbol_table[symbol] = address</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">contains</span><span class="params">(self,symbol)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> symbol <span class="keyword">in</span> self.symbol_table</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getAddress</span><span class="params">(self,symbol)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.symbol_table.get(symbol,<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> str(self.symbol_table)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Code</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.dest_table = &#123;</span><br><span class="line">        <span class="string">"None"</span>: <span class="string">"000"</span>,</span><br><span class="line">        <span class="string">"M"</span>: <span class="string">"001"</span>,</span><br><span class="line">        <span class="string">"D"</span>: <span class="string">"010"</span>,</span><br><span class="line">        <span class="string">"MD"</span>: <span class="string">"011"</span>,</span><br><span class="line">        <span class="string">"A"</span>:<span class="string">"100"</span>,</span><br><span class="line">        <span class="string">"AM"</span>: <span class="string">"101"</span>,</span><br><span class="line">        <span class="string">"AD"</span>: <span class="string">"110"</span>,</span><br><span class="line">        <span class="string">"AMD"</span>:<span class="string">"111"</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        self.comp_table = &#123;</span><br><span class="line">            <span class="string">"0"</span>: <span class="string">"0101010"</span>,</span><br><span class="line">            <span class="string">"1"</span>: <span class="string">"0111111"</span>,</span><br><span class="line">            <span class="string">"-1"</span>: <span class="string">"0111010"</span>,</span><br><span class="line">            <span class="string">"D"</span>:  <span class="string">"0001100"</span>,</span><br><span class="line">            <span class="string">"A"</span>:  <span class="string">"0110000"</span>,</span><br><span class="line">            <span class="string">"!D"</span>: <span class="string">"0001101"</span>,</span><br><span class="line">            <span class="string">"!A"</span>: <span class="string">"0110001"</span>,</span><br><span class="line">            <span class="string">"-D"</span>: <span class="string">"0001111"</span>,</span><br><span class="line">            <span class="string">"-A"</span>: <span class="string">"0110011"</span>,</span><br><span class="line">            <span class="string">"D+1"</span>: <span class="string">"0011111"</span>,</span><br><span class="line">            <span class="string">"A+1"</span>: <span class="string">"0110111"</span>,</span><br><span class="line">            <span class="string">"D-1"</span>: <span class="string">"0001110"</span>,</span><br><span class="line">            <span class="string">"A-1"</span>: <span class="string">"0110010"</span>,</span><br><span class="line">            <span class="string">"D+A"</span>: <span class="string">"0000010"</span>,</span><br><span class="line">            <span class="string">"D-A"</span>: <span class="string">"0010011"</span>,</span><br><span class="line">            <span class="string">"A-D"</span>: <span class="string">"0000111"</span>,</span><br><span class="line">            <span class="string">"D&amp;A"</span>: <span class="string">"0000000"</span>,</span><br><span class="line">            <span class="string">"D|A"</span>: <span class="string">"0010101"</span>,</span><br><span class="line">            <span class="string">"M"</span>:   <span class="string">"1110000"</span>,</span><br><span class="line">            <span class="string">"!M"</span>:  <span class="string">"1110001"</span>,</span><br><span class="line">            <span class="string">"-M"</span>:  <span class="string">"1110011"</span>,</span><br><span class="line">            <span class="string">"M+1"</span>: <span class="string">"1110111"</span>,</span><br><span class="line">            <span class="string">"M-1"</span>: <span class="string">"1110010"</span>,</span><br><span class="line">            <span class="string">"D+M"</span>: <span class="string">"1000010"</span>,</span><br><span class="line">            <span class="string">"D-M"</span>: <span class="string">"1010011"</span>,</span><br><span class="line">            <span class="string">"M-D"</span>: <span class="string">"1000111"</span>,</span><br><span class="line">            <span class="string">"D&amp;M"</span>: <span class="string">"1000000"</span>,</span><br><span class="line">            <span class="string">"D|M"</span>: <span class="string">"1010101"</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        self.jump_table = &#123;</span><br><span class="line">            <span class="string">"None"</span>: <span class="string">"000"</span>,</span><br><span class="line">            <span class="string">"JGT"</span> : <span class="string">"001"</span>,</span><br><span class="line">            <span class="string">"JEQ"</span> : <span class="string">"010"</span>,</span><br><span class="line">            <span class="string">"JGE"</span> : <span class="string">"011"</span>,</span><br><span class="line">            <span class="string">"JLT"</span> : <span class="string">"100"</span>,</span><br><span class="line">            <span class="string">"JNE"</span> : <span class="string">"101"</span>,</span><br><span class="line">            <span class="string">"JLE"</span> : <span class="string">"110"</span>,</span><br><span class="line">            <span class="string">"JMP"</span> : <span class="string">"111"</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">comp</span><span class="params">(self,mnemonic)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> mnemonic <span class="keyword">in</span> self.comp_table:</span><br><span class="line">            <span class="keyword">return</span> self.comp_table[mnemonic]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(mnemonic)</span><br><span class="line">            print(<span class="string">"error finding when code comp"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dest</span><span class="params">(self,mnemonic)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> mnemonic <span class="keyword">in</span> self.dest_table:</span><br><span class="line">            <span class="keyword">return</span> self.dest_table[mnemonic]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"error finding when code dest"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jump</span><span class="params">(self,mnemonic)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> mnemonic <span class="keyword">in</span> self.jump_table:</span><br><span class="line">            <span class="keyword">return</span> self.jump_table[mnemonic]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"error finding when code jump"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parser</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, filename)</span>:</span></span><br><span class="line">        self.file = open(filename,<span class="string">"r"</span>)</span><br><span class="line">        self.current_command = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__uncomment__</span><span class="params">(self)</span>:</span></span><br><span class="line">        index = self.current_command.find(<span class="string">"//"</span>)</span><br><span class="line">        <span class="keyword">if</span> index != <span class="number">-1</span>:</span><br><span class="line">            self.current_command = self.current_command[:index]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasMoreCommands</span><span class="params">(self)</span>:</span></span><br><span class="line">        line = self.file.readline()</span><br><span class="line">        <span class="keyword">if</span> line:</span><br><span class="line">            self.current_command = line</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">advance</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.hasMoreCommands():</span><br><span class="line">            self.current_command = self.current_command.strip()</span><br><span class="line">            self.__uncomment__()</span><br><span class="line">            <span class="keyword">if</span> self.current_command == <span class="string">""</span>:</span><br><span class="line">                self.advance()</span><br><span class="line">            <span class="keyword">return</span> self.current_command</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">commandType</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.current_command.startswith(<span class="string">"@"</span>):</span><br><span class="line">            <span class="keyword">return</span> A_COMMAND</span><br><span class="line">        <span class="keyword">elif</span> self.current_command.startswith(<span class="string">"("</span>):</span><br><span class="line">            <span class="keyword">return</span> L_COMMAND</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> C_COMMAND</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">symbol</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.commandType() == A_COMMAND:</span><br><span class="line">            <span class="keyword">return</span> self.current_command[<span class="number">1</span>:]</span><br><span class="line">        <span class="keyword">elif</span> self.commandType() == L_COMMAND:</span><br><span class="line">            <span class="keyword">return</span> self.current_command[<span class="number">1</span>:<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dest</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># dest = comp ; jump</span></span><br><span class="line">        <span class="keyword">if</span> self.commandType() == C_COMMAND:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"="</span> <span class="keyword">in</span> self.current_command:</span><br><span class="line">                <span class="keyword">return</span> self.current_command.split(<span class="string">"="</span>)[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"None"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span>(<span class="string">"error find in dest in parser"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">comp</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.commandType() == C_COMMAND:</span><br><span class="line">            result = <span class="string">""</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">"="</span> <span class="keyword">in</span> self.current_command <span class="keyword">and</span> <span class="string">";"</span> <span class="keyword">in</span> self.current_command:</span><br><span class="line">                result = self.current_command.split(<span class="string">"="</span>)[<span class="number">1</span>].strip()</span><br><span class="line">                result = result.split(<span class="string">";"</span>)[<span class="number">0</span>].strip()</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">"="</span> <span class="keyword">in</span> self.current_command:</span><br><span class="line">                result = self.current_command.split(<span class="string">"="</span>)[<span class="number">1</span>].strip()</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">";"</span> <span class="keyword">in</span> self.current_command:</span><br><span class="line">                result = self.current_command.split(<span class="string">";"</span>)[<span class="number">0</span>].strip()</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span>(<span class="string">"error find in comp in parser"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jump</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.commandType() == C_COMMAND:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">";"</span> <span class="keyword">in</span> self.current_command:</span><br><span class="line">                <span class="keyword">return</span> self.current_command.split(<span class="string">";"</span>)[<span class="number">-1</span>].strip()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"None"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span>(<span class="string">"error find in jump in parser"</span>)</span><br><span class="line">           </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(file)</span>:</span></span><br><span class="line">    symbol_table = SymbolTable()</span><br><span class="line">    coder = Code()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    output_file = open(file.split(<span class="string">"."</span>)[<span class="number">0</span>]+<span class="string">"."</span>+<span class="string">"hack"</span>,<span class="string">"w"</span>)</span><br><span class="line"></span><br><span class="line">    parser = Parser(file)</span><br><span class="line">    command_index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        current_command = parser.advance()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> current_command:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># print(current_command)</span></span><br><span class="line">        <span class="keyword">if</span> parser.commandType() == L_COMMAND:</span><br><span class="line">            symbol_table.addEntry(parser.symbol(),command_index)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        command_index+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    parser = Parser(file)</span><br><span class="line">    command_index = <span class="number">16</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        current_command = parser.advance()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> current_command:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># print(current_command)</span></span><br><span class="line">        <span class="keyword">if</span> parser.commandType() == A_COMMAND:</span><br><span class="line">            symbol = parser.symbol()</span><br><span class="line">            <span class="keyword">if</span> symbol_table.contains(symbol):</span><br><span class="line">                address = symbol_table.getAddress(symbol)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> symbol.isdigit():</span><br><span class="line">                    address = int(symbol)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    symbol_table.addEntry(symbol,command_index)</span><br><span class="line">                    address = command_index</span><br><span class="line">                    command_index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># print("&#123;:0&gt;16b&#125;".format(address))</span></span><br><span class="line">            output_file.write(<span class="string">"&#123;:0&gt;16b&#125;\n"</span>.format(address))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> parser.commandType() ==  C_COMMAND:   </span><br><span class="line"></span><br><span class="line">            c=parser.comp()</span><br><span class="line">            d=parser.dest()</span><br><span class="line">            j=parser.jump()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># print(c)</span></span><br><span class="line">            <span class="comment"># print(d)</span></span><br><span class="line">            <span class="comment"># print(j)</span></span><br><span class="line"></span><br><span class="line">            cc = coder.comp(c)</span><br><span class="line">            dd = coder.dest(d)</span><br><span class="line">            jj = coder.jump(j)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># print(cc)</span></span><br><span class="line">            <span class="comment"># print(dd)</span></span><br><span class="line">            <span class="comment"># print(jj)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment"># print("111" + cc + dd + jj)</span></span><br><span class="line">            output_file.write(<span class="string">"111"</span> + cc + dd + jj + <span class="string">"\n"</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    file = sys.argv[<span class="number">1</span>]</span><br><span class="line">    main(file)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Software Architecture</category>
      </categories>
      <tags>
        <tag>Nand2Tetris</tag>
      </tags>
  </entry>
  <entry>
    <title>Assembler</title>
    <url>/Assembler/2019/06/05/</url>
    <content><![CDATA[<h1 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h1><ul>
<li><a href="#hack-language-specification">Hack language specification</a><ul>
<li><a href="#a-instruction">A-instruction</a></li>
<li><a href="#c-instruction">C-instruction</a></li>
<li><a href="#symbolspre-defined-symbols">Symbols(Pre-defined symbols)</a></li>
<li><a href="#a-translators-perspective">A translator’s perspective</a></li>
</ul>
</li>
<li><a href="#the-assembly-process-instructions">The assembly process: instructions</a></li>
<li><a href="#the-assembly-process-symbols">The assembly process: symbols</a></li>
<li><a href="#symbol-table">Symbol table</a></li>
<li><a href="#the-assembly-process">The assembly process</a></li>
</ul>
<h2 id="Hack-language-specification"><a href="#Hack-language-specification" class="headerlink" title="Hack language specification"></a>Hack language specification</h2><h3 id="A-instruction"><a href="#A-instruction" class="headerlink" title="A-instruction"></a>A-instruction</h3><p><strong>Symbolic syntax</strong> </p>
<blockquote>
<p>@value</p>
</blockquote>
<p>Where value is either</p>
<ul>
<li>a non-negative decimal constant</li>
<li>a symbol referring to such a constant</li>
</ul>
<p><strong>Example</strong> </p>
<blockquote>
<p>@21, @foo</p>
</blockquote>
<p><strong>Binary syntax</strong> </p>
<blockquote>
<p>0valueInBinary<br><strong>Example</strong>:<br>0000000000010101</p>
</blockquote>
<h3 id="C-instruction"><a href="#C-instruction" class="headerlink" title="C-instruction"></a>C-instruction</h3><p><strong>Symbolic syntax</strong> </p>
<blockquote>
<p>dest = comp ; jump</p>
</blockquote>
<p><strong>Binary syntax</strong> </p>
<blockquote>
<p>1 1 1 a c1 c2 c3 c4 c5 c6 d1 d2 d3 j1 j2 j3</p>
</blockquote>
<p><img src="1.png" alt></p>
<h3 id="Symbols-Pre-defined-symbols"><a href="#Symbols-Pre-defined-symbols" class="headerlink" title="Symbols(Pre-defined symbols)"></a>Symbols(Pre-defined symbols)</h3><p>Label declaration: (label)<br>Variable declaration: @variableName</p>
<p>The Hack language specification describes 23 pre-defined symbols</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">Symbol</th>
<th style="text-align:left">Value</th>
<th style="text-align:left">Symbol</th>
<th style="text-align:left">Value</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">R0</td>
<td style="text-align:left">0</td>
<td style="text-align:left">SP</td>
<td style="text-align:left">0</td>
</tr>
<tr>
<td style="text-align:left">R1</td>
<td style="text-align:left">1</td>
<td style="text-align:left">LCL</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">R2</td>
<td style="text-align:left">2</td>
<td style="text-align:left">ARG</td>
<td style="text-align:left">2</td>
</tr>
<tr>
<td style="text-align:left">…</td>
<td style="text-align:left">…</td>
<td style="text-align:left">THIS</td>
<td style="text-align:left">3</td>
</tr>
<tr>
<td style="text-align:left">R15</td>
<td style="text-align:left">15</td>
<td style="text-align:left">THAT</td>
<td style="text-align:left">4</td>
</tr>
<tr>
<td style="text-align:left">SCREEN</td>
<td style="text-align:left">16384</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">KBD</td>
<td style="text-align:left">24576</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
</div>
<h3 id="A-translator’s-perspective"><a href="#A-translator’s-perspective" class="headerlink" title="A translator’s perspective"></a>A translator’s perspective</h3><p>Assembly program elements:</p>
<p><strong>White space</strong></p>
<ul>
<li>q Empty lines / indentation </li>
<li>Linecomments</li>
<li>In-line comments</li>
</ul>
<p><strong>Instructions</strong></p>
<ul>
<li>A-instructions</li>
<li>C-instructions</li>
</ul>
<p><strong>Symbols</strong></p>
<ul>
<li>References</li>
<li>Label declarations</li>
</ul>
<h2 id="The-assembly-process-instructions"><a href="#The-assembly-process-instructions" class="headerlink" title="The assembly process: instructions"></a>The assembly process: instructions</h2><p>For each instruction</p>
<ol>
<li>Parse the instruction: break it into its underlying fields</li>
<li>A-instruction: translate the decimal value into a binary value</li>
<li>C-instruction: for each field in the instruction, generate the corresponding binary code;</li>
<li>Assemble the translated binary codes into a complete 16-bit machine instruction</li>
<li>Write the 16-bit instruction to the output file.</li>
</ol>
<h2 id="The-assembly-process-symbols"><a href="#The-assembly-process-symbols" class="headerlink" title="The assembly process: symbols"></a>The assembly process: symbols</h2><ol>
<li>Translating @preDefinedSymbol: <strong>Replace preDefinedSymbol with its value.</strong></li>
<li>Label symbols<ul>
<li>Used to label destinations of goto commands</li>
<li>Declared by the pseudo-command (XXX)</li>
<li>This directive defines the symbol XXX to refer to the memory location holding the next instruction in the program</li>
<li>Translating @labelSymbol : <strong>Replace _labelSymbol_ with its value</strong></li>
</ul>
</li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">LOOP</td>
<td style="text-align:left">4</td>
</tr>
<tr>
<td style="text-align:left">STOP</td>
<td style="text-align:left">18</td>
</tr>
<tr>
<td style="text-align:left">END</td>
<td style="text-align:left">22</td>
</tr>
</tbody>
</table>
</div>
<ol>
<li>Variable symbols<ul>
<li>Any symbol XXX appearing in an assembly program which is <strong>not</strong> predefined and is not defined elsewhere using the (XXX) directive is treated as a variable</li>
<li>Each variable is assigned a unique memory address, starting at 16</li>
<li>Translating @variableSymbol :<ul>
<li>If seen for the first time, assign a unique memory address</li>
<li>Replace _variableSymbol_ with this address</li>
</ul>
</li>
</ul>
</li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">i</td>
<td style="text-align:left">16</td>
</tr>
<tr>
<td style="text-align:left">sum</td>
<td style="text-align:left">17</td>
</tr>
</tbody>
</table>
</div>
<h2 id="Symbol-table"><a href="#Symbol-table" class="headerlink" title="Symbol table"></a>Symbol table</h2><p>To resolve a symbol, look up its value in the symbol table</p>
<p><img src="2.png" alt></p>
<h2 id="The-assembly-process"><a href="#The-assembly-process" class="headerlink" title="The assembly process"></a>The assembly process</h2><ol>
<li><strong>Initialization</strong></li>
</ol>
<ul>
<li>Construct an empty symbol table</li>
<li>Add the pre-defined symbols to the symbol table</li>
</ul>
<ol>
<li><strong>First pass</strong></li>
</ol>
<ul>
<li>Scan the entire program;</li>
<li>For each <strong>instruction</strong> of the form (xxx):<ul>
<li>Add the pair (xxx, address) to the symbol table, where address is the number of the instruction following (xxx)</li>
</ul>
</li>
</ul>
<ol>
<li><strong>Second pass</strong></li>
</ol>
<ul>
<li>Set n to 16</li>
<li>Scan the entire program again, for each instruction:<ul>
<li>If the instruction is @symbol, look up symbol in the symbol table;<ul>
<li>If (symbol, value) is found, use value to complete the instruction’s translation;</li>
<li>If not found:<ul>
<li>Add (symbol, n) to the symbol table,</li>
<li>Use n to complete the instruction’s translation,</li>
<li>n++</li>
</ul>
</li>
</ul>
</li>
<li>If the instruction is a C-instruction, complete the instruction’s translation</li>
<li>Write the translated instruction to the output file.</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Software Architecture</category>
      </categories>
      <tags>
        <tag>Nand2Tetris</tag>
      </tags>
  </entry>
  <entry>
    <title>Low Level Programming Taste Project</title>
    <url>/Low-Level-Programming-Taste-Project/2019/06/04/</url>
    <content><![CDATA[<p><strong>Objective</strong> Get a taste of low-level programming in machine language, and get acquainted with the Hack computer platform. In the process of working on this project, you will also become familiar with the assembly process, and you will ap- preciate visually how the translated binary code executes on the target hardware.</p>
<p><strong>Resources</strong> In this project you will use two tools supplied with the book: An assem- bler, designed to translate Hack assembly programs into binary code, and a CPU emulator, designed to run binary programs on a simulated Hack platform.</p>
<p><strong>Contract</strong> Write and test the two programs described in what follows. When exe- cuted on the CPU emulator, your programs should generate the results mandated by the test scripts supplied in the project directory.</p>
<ul>
<li><strong>Multiplication Program (Mult.asm)</strong>: The inputs of this program are the current values stored in R0 and R1 (i.e., the two top RAM locations). The program computes the product R0<em>R1 and stores the result in R2. We assume (in this program) that R0&gt;=0, R1&gt;=0, and R0</em>R1&lt;32768. Your program need not test these conditions, but rather assume that they hold. The supplied Mult.tst and Mult.cmp scripts will test your program on several representative data values.</li>
<li><strong>I/O-Handling Program (Fill.asm)</strong>: This program runs an infinite loop that listens to the keyboard input. When a key is pressed (any key), the program blackens the screen, namely, writes ‘‘black’’ in every pixel. When no key is pressed, the screen should be cleared. You may choose to blacken and clear the screen in any spatial order, as long as pressing a key continuously for long enough will result in a fully blackened screen and not pressing any key for long enough will result in a cleared screen. This program has a test script (Fill.tst) but no compare file—it should be checked by visibly inspecting the simulated screen.</li>
</ul>
<figure class="highlight arm"><table><tr><td class="code"><pre><span class="line">// This file is part of www.nand2tetris.org</span><br><span class="line">// <span class="keyword">and </span>the <span class="keyword">book </span><span class="string">"The Elements of Computing Systems"</span></span><br><span class="line">// <span class="keyword">by </span>Nisan <span class="keyword">and </span>Schocken, MIT Press.</span><br><span class="line">// File name: projects/<span class="number">04</span>/<span class="keyword">Mult.asm</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">// </span><span class="keyword">Multiplies </span><span class="built_in">R0</span> <span class="keyword">and </span><span class="built_in">R1</span> <span class="keyword">and </span>stores the result in <span class="built_in">R2</span>.</span><br><span class="line">// (<span class="built_in">R0</span>, <span class="built_in">R1</span>, <span class="built_in">R2</span> refer to RAM[<span class="number">0</span>], RAM[<span class="number">1</span>], <span class="keyword">and </span>RAM[<span class="number">2</span>], respectively.)</span><br><span class="line"></span><br><span class="line">// Put your <span class="meta">code</span> here.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//m * n = m + m + m + ... + m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// <span class="comment">@sum</span></span><br><span class="line">// M<span class="number">=0</span></span><br><span class="line">// <span class="comment">@i</span></span><br><span class="line">// M<span class="number">=1</span></span><br><span class="line"></span><br><span class="line">// (LOOP)</span><br><span class="line">// <span class="comment">@i</span></span><br><span class="line">// D<span class="symbol">=M</span></span><br><span class="line">// <span class="comment">@R0</span></span><br><span class="line">// D<span class="symbol">=M</span>-D</span><br><span class="line">// <span class="comment">@END</span></span><br><span class="line">// D<span class="comment">;JGT</span></span><br><span class="line">// <span class="comment">@R1</span></span><br><span class="line">// sum<span class="symbol">=sum</span>+M</span><br><span class="line">// <span class="comment">@i</span></span><br><span class="line">// M<span class="symbol">=M</span>+<span class="number">1</span></span><br><span class="line">// <span class="comment">@LOOP</span></span><br><span class="line">// <span class="number">0</span><span class="comment">;JMP</span></span><br><span class="line">// (<span class="meta">END</span>)</span><br><span class="line">// <span class="comment">@sum</span></span><br><span class="line">// D<span class="symbol">=M</span></span><br><span class="line">// <span class="comment">@R2</span></span><br><span class="line">// M<span class="symbol">=D</span></span><br><span class="line"></span><br><span class="line"><span class="comment">@sum</span></span><br><span class="line">M<span class="number">=0</span>   //sum<span class="number">=0</span></span><br><span class="line"><span class="comment">@i    //i=1</span></span><br><span class="line">M<span class="number">=1</span></span><br><span class="line">(LOOP)</span><br><span class="line"><span class="comment">@i    //D=i</span></span><br><span class="line">D<span class="symbol">=M</span></span><br><span class="line"><span class="comment">@R0   </span></span><br><span class="line">D<span class="symbol">=D</span>-M  //D<span class="symbol">=I</span>-<span class="built_in">R0</span></span><br><span class="line"><span class="comment">@END</span></span><br><span class="line">D<span class="comment">;JGT  // if(i-R0) &gt; 0 goto END</span></span><br><span class="line"><span class="comment">@R1</span></span><br><span class="line">D<span class="symbol">=M</span>     //D<span class="symbol">=R1</span></span><br><span class="line"><span class="comment">@sum</span></span><br><span class="line">M<span class="symbol">=D</span>+M</span><br><span class="line"><span class="comment">@i</span></span><br><span class="line">M<span class="symbol">=M</span>+<span class="number">1</span></span><br><span class="line"><span class="comment">@LOOP</span></span><br><span class="line"><span class="number">0</span><span class="comment">;JMP   //Goto LOOP</span></span><br><span class="line">(<span class="meta">END</span>)</span><br><span class="line"><span class="comment">@sum</span></span><br><span class="line">D<span class="symbol">=M</span></span><br><span class="line"><span class="comment">@R2</span></span><br><span class="line">M<span class="symbol">=D</span></span><br></pre></td></tr></table></figure>
<figure class="highlight arm"><table><tr><td class="code"><pre><span class="line">// This file is part of www.nand2tetris.org</span><br><span class="line">// <span class="keyword">and </span>the <span class="keyword">book </span><span class="string">"The Elements of Computing Systems"</span></span><br><span class="line">// <span class="keyword">by </span>Nisan <span class="keyword">and </span>Schocken, MIT Press.</span><br><span class="line">// File name: projects/<span class="number">04</span>/<span class="meta">Fill</span>.asm</span><br><span class="line"></span><br><span class="line">// Runs an infinite loop that listens to the keyboard input.</span><br><span class="line">// When a key is pressed (any key), the program <span class="keyword">blackens </span>the screen,</span><br><span class="line">// i.e. writes <span class="string">"black"</span> in every pixel<span class="comment">;</span></span><br><span class="line">// the screen should remain fully <span class="keyword">black </span>as long as the key is pressed. </span><br><span class="line">// When no key is pressed, the program clears the screen, i.e. writes</span><br><span class="line">// <span class="string">"white"</span> in every pixel<span class="comment">;</span></span><br><span class="line">// the screen should remain fully clear as long as no key is pressed.</span><br><span class="line"></span><br><span class="line">// Put your <span class="meta">code</span> here.</span><br><span class="line"></span><br><span class="line">    <span class="comment">@status</span></span><br><span class="line">    M=-<span class="number">1</span>        // status<span class="number">=0xFFFF</span></span><br><span class="line">    D<span class="number">=0</span>         // Argument - what to set screen <span class="keyword">bits </span>to</span><br><span class="line">    <span class="comment">@SETSCREEN</span></span><br><span class="line">    <span class="number">0</span><span class="comment">;JMP</span></span><br><span class="line"></span><br><span class="line">(LOOP)</span><br><span class="line">    <span class="comment">@KBD</span></span><br><span class="line">    D<span class="symbol">=M</span>         // D = current keyboard character</span><br><span class="line">    <span class="comment">@SETSCREEN</span></span><br><span class="line">    D<span class="comment">;JEQ       // If no key, set screen to zeroes (white)</span></span><br><span class="line">    D=-<span class="number">1</span>        // <span class="meta">If</span> key pressed, set screen to all <span class="number">1</span> <span class="keyword">bits </span>(<span class="keyword">black)</span></span><br><span class="line"><span class="keyword"> </span>   </span><br><span class="line">(SETSCREEN)     // Set D<span class="symbol">=new</span> status <span class="keyword">before </span>jumping here</span><br><span class="line">    <span class="comment">@ARG</span></span><br><span class="line">    M<span class="symbol">=D</span>         // Save new status arg</span><br><span class="line">    <span class="comment">@status     // FFFF=black, 0=white - status of entire screen</span></span><br><span class="line">    D<span class="symbol">=D</span>-M       // D<span class="symbol">=newstatus</span>-status</span><br><span class="line">    <span class="comment">@LOOP</span></span><br><span class="line">    D<span class="comment">;JEQ        // Do nothing if new status == old status</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">@ARG</span></span><br><span class="line">    D<span class="symbol">=M</span></span><br><span class="line">    <span class="comment">@status</span></span><br><span class="line">    M<span class="symbol">=D</span>         // status = ARG</span><br><span class="line">    </span><br><span class="line">    <span class="comment">@SCREEN</span></span><br><span class="line">    D<span class="symbol">=A</span>         // D<span class="symbol">=Screen</span> <span class="keyword">address</span></span><br><span class="line"><span class="keyword"> </span>   <span class="comment">@8192</span></span><br><span class="line">    D<span class="symbol">=D</span>+A       // D<span class="symbol">=Byte</span> just past last screen <span class="keyword">address</span></span><br><span class="line"><span class="keyword"> </span>   <span class="comment">@i</span></span><br><span class="line">    M<span class="symbol">=D</span>         // i<span class="symbol">=SCREEN</span> <span class="keyword">address</span></span><br><span class="line"><span class="keyword"> </span>   </span><br><span class="line">(SETLOOP)    </span><br><span class="line">    <span class="comment">@i</span></span><br><span class="line">    D<span class="symbol">=M</span>-<span class="number">1</span></span><br><span class="line">    M<span class="symbol">=D</span>         // i<span class="symbol">=i</span>-<span class="number">1</span></span><br><span class="line">    <span class="comment">@LOOP</span></span><br><span class="line">    D<span class="comment">;JLT       // if i&lt;0 goto LOOP</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">@status</span></span><br><span class="line">    D<span class="symbol">=M</span>         // D<span class="symbol">=status</span></span><br><span class="line">    <span class="comment">@i</span></span><br><span class="line">    A<span class="symbol">=M</span>         // Indirect</span><br><span class="line">    M<span class="symbol">=D</span>         // M[current screen <span class="keyword">address]=status</span></span><br><span class="line"><span class="keyword"> </span>   <span class="comment">@SETLOOP</span></span><br><span class="line">    <span class="number">0</span><span class="comment">;JMP</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hardware Architecture</category>
      </categories>
      <tags>
        <tag>Nand2Tetris</tag>
        <tag>Project</tag>
      </tags>
  </entry>
  <entry>
    <title>The functions of Pooling</title>
    <url>/the-functions-of-Pooling/2019/06/04/</url>
    <content><![CDATA[<blockquote>
<p>作者：谢志宁<br>链接：<a href="https://www.zhihu.com/question/36686900/answer/130890492" target="_blank" rel="noopener">https://www.zhihu.com/question/36686900/answer/130890492</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
</blockquote>
<ol>
<li>invariance(不变性)，这种不变性包括translation(平移)，rotation(旋转)，scale(尺度)</li>
<li>保留主要的特征同时减少参数(降维，效果类似PCA)和计算量，防止过拟合，提高模型泛化能力.</li>
</ol>
<p><strong>translation invariance</strong>：这里举一个直观的例子(数字识别)，假设有一个16x16的图片，里面有个数字1，我们需要识别出来，这个数字1可能写的偏左一点(图1)，这个数字1可能偏右一点(图2)，图1到图2相当于向右平移了一个单位，但是图1和图2经过max pooling之后它们都变成了相同的8x8特征矩阵，主要的特征我们捕获到了，同时又将问题的规模从16x16降到了8x8，而且具有平移不变性的特点。图中的a（或b）表示，在原始图片中的这些a（或b）位置，最终都会映射到相同的位置。</p>
<p><img src="1.png" alt></p>
<p><strong>rotation invariance</strong>：下图表示汉字“一”的识别，第一张相对于x轴有倾斜角，第二张是平行于x轴，两张图片相当于做了旋转，经过多次max pooling后具有相同的特征</p>
<p><img src="2.png" alt></p>
<p><strong>scale invariance</strong>：下图表示数字“0”的识别，第一张的“0”比较大，第二张的“0”进行了较小，相当于作了缩放，同样地，经过多次max pooling后具有相同的特征</p>
<p><img src="3.png" alt></p>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Convolutional Neural Networks</tag>
      </tags>
  </entry>
  <entry>
    <title>Computer Architecture</title>
    <url>/Computer-Architecture/2019/06/03/</url>
    <content><![CDATA[<blockquote class="blockquote-center">We ascribe beauty to that which is simple; which has no superfluous parts; which exactly answers its end; which stands related to all things; which is the mean of many extremes.<br><center>-- Ralph Waldo Emerson</center></blockquote>


<h1 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h1><ul>
<li><a href="#overview">Overview</a></li>
<li><a href="#the-von-neumann-architecture">The von Neumann Architecture</a><ul>
<li><a href="#memory">Memory</a><ul>
<li><a href="#physical-perspective">Physical Perspective</a></li>
<li><a href="#logical-perspective">Logical Perspective</a></li>
<li><a href="#data-memory">Data Memory</a></li>
<li><a href="#instruction-memory">Instruction Memory</a></li>
</ul>
</li>
<li><a href="#central-processing-unitcpu">Central Processing Unit(CPU)</a><ul>
<li><a href="#fetching">Fetching</a></li>
<li><a href="#executing">Executing</a></li>
<li><a href="#arithmetic-logic-unit">Arithmetic Logic Unit</a></li>
<li><a href="#registers">Registers</a></li>
<li><a href="#control-unit">Control Unit</a></li>
<li><a href="#cpu-operation">CPU Operation</a></li>
</ul>
</li>
<li><a href="#registers-1">Registers</a><ul>
<li><a href="#data-registers">Data registers</a></li>
<li><a href="#address-registers">Address registers</a></li>
<li><a href="#program-counter">Program counter</a></li>
</ul>
</li>
<li><a href="#input-and-output">Input and Output</a><ul>
<li><a href="#screen">Screen</a></li>
</ul>
</li>
<li><a href="#keyboard">Keyboard</a></li>
</ul>
</li>
<li><a href="#hack-computer-implementation">Hack Computer implementation</a></li>
</ul>
<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>This chapter is the pinnacle of the hardware part of our journey. We are now ready to take all the chips that we’ve built in chapters 1–3 and integrate them into a general-purpose computer system capable of running programs written in the machine language presented in chapter 4. The specific computer we will build, called Hack, has two important virtues. <strong>On the one hand</strong>, Hack is a simple machine that can be constructed in just a few hours, using previously built chips and the hardware simulator supplied with the book. <strong>On the other hand</strong>, Hack is sufficiently powerful to illustrate the key operating principles and hardware elements of any general-purpose computer. Therefore, building it will give you an excellent understanding of how modern computers work at the low hardware and software levels.</p>
<h2 id="The-von-Neumann-Architecture"><a href="#The-von-Neumann-Architecture" class="headerlink" title="The von Neumann Architecture"></a>The von Neumann Architecture</h2><p><img src="1.png" alt></p>
<p><strong>The von Neumann machine is a practical architecture and the conceptual blueprint of almost all computer platforms today.</strong><br>At the heart of this architecture lies the <strong>stored program concept</strong>: The computer’s memory stores not only the data that the computer manipulates, but also the very instructions that tell the computer what to do. Let us explore this architecture in some detail.</p>
<h3 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h3><h4 id="Physical-Perspective"><a href="#Physical-Perspective" class="headerlink" title="Physical Perspective"></a>Physical Perspective</h4><p>the memory is a linear sequence of addressable registers, each having a unique address and a value, which is a fixed-size word of information.</p>
<h4 id="Logical-Perspective"><a href="#Logical-Perspective" class="headerlink" title="Logical Perspective"></a>Logical Perspective</h4><p>he memory is divided into two areas. One area is dedicated for storing data,e.g. the arrays and objects of programs that are presently executing, while the other area is dedicated for storing the programs’ instructions.</p>
<h4 id="Data-Memory"><a href="#Data-Memory" class="headerlink" title="Data Memory"></a>Data Memory</h4><p>High-level programs manipulate abstract artifacts like variables, arrays, and objects. After the programs are translated into machine language, these data abstractions become binary codes, <strong>stored in the computer’s memory</strong>. Once an individual register has been selected from the memory by specifying its address, its contents can be either <strong>read</strong> or <strong>written</strong> to.</p>
<p><img src="7.png" alt></p>
<h4 id="Instruction-Memory"><a href="#Instruction-Memory" class="headerlink" title="Instruction Memory"></a>Instruction Memory</h4><p>Before high-level programs can be executed on the computer, they must be translated into machine language. These instructions are stored in the computer’s instruction memory as binary codes. <strong>In each step of a program’s execution, the CPU fetches (i.e., reads) a binary machine instruction from a selected register in the instruction memory, decodes it, executes the specified instruction, and figures out which instruction to fetch and execute next.</strong></p>
<p><img src="8.png" alt></p>
<figure class="highlight arm"><table><tr><td class="code"><pre><span class="line">// This file is part of www.nand2tetris.org</span><br><span class="line">// <span class="keyword">and </span>the <span class="keyword">book </span><span class="string">"The Elements of Computing Systems"</span></span><br><span class="line">// <span class="keyword">by </span>Nisan <span class="keyword">and </span>Schocken, MIT Press.</span><br><span class="line">// File name: projects/<span class="number">05</span>/Memory.hdl</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The complete address space of the Hack computer's memory,</span></span><br><span class="line"><span class="comment"> * including RAM and memory-mapped I/O. </span></span><br><span class="line"><span class="comment"> * The chip facilitates read and write operations, as follows:</span></span><br><span class="line"><span class="comment"> *     Read:  out(t) = Memory[address(t)](t)</span></span><br><span class="line"><span class="comment"> *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)</span></span><br><span class="line"><span class="comment"> * In words: the chip always outputs the value stored at the memory </span></span><br><span class="line"><span class="comment"> * location specified by address. If load==1, the in value is loaded </span></span><br><span class="line"><span class="comment"> * into the memory location specified by address. This value becomes </span></span><br><span class="line"><span class="comment"> * available through the out output from the next time step onward.</span></span><br><span class="line"><span class="comment"> * Address space rules:</span></span><br><span class="line"><span class="comment"> * Only the upper 16K+8K+1 words of the Memory chip are used. </span></span><br><span class="line"><span class="comment"> * Access to address&gt;0x6000 is invalid. Access to any address in </span></span><br><span class="line"><span class="comment"> * the range 0x4000-0x5FFF results in accessing the screen memory </span></span><br><span class="line"><span class="comment"> * map. Access to address 0x6000 results in accessing the keyboard </span></span><br><span class="line"><span class="comment"> * memory map. The behavior in these addresses is described in the </span></span><br><span class="line"><span class="comment"> * Screen and Keyboard chip specifications given in the book.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">CHIP</span> Memory &#123;</span><br><span class="line">    IN in[<span class="number">16</span>], load, <span class="keyword">address[15];</span></span><br><span class="line"><span class="keyword"> </span>   OUT out[<span class="number">16</span>]<span class="comment">;</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">    PARTS:</span></span><br><span class="line">    //determine which one to load</span><br><span class="line">    DMux(in<span class="symbol">=load</span>,<span class="keyword">sel=address[14],a=ramload,b=skload);</span></span><br><span class="line"><span class="keyword"> </span>   DMux(in<span class="symbol">=skload</span>,<span class="keyword">sel=address[13],a=sload,b=nothing);</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword"> </span>   //load ram <span class="keyword">and </span>screen</span><br><span class="line">    RAM16K(in<span class="symbol">=in</span>,load<span class="symbol">=ramload</span>,<span class="keyword">address=address[0..13],out=ramout);</span></span><br><span class="line"><span class="keyword"> </span>   Screen(in<span class="symbol">=in</span>,load<span class="symbol">=sload</span>,<span class="keyword">address=address[0..12],out=screenout);</span></span><br><span class="line"><span class="keyword"> </span>   </span><br><span class="line">    //Deal with keyboard, make sure that all <span class="keyword">bits </span>in [<span class="number">0</span>..<span class="number">12</span>] are <span class="number">0</span></span><br><span class="line">    Keyboard(out<span class="symbol">=kbd</span>)<span class="comment">;</span></span><br><span class="line">    Or8Way(in<span class="symbol">=address</span>[<span class="number">0</span>..<span class="number">7</span>], out<span class="symbol">=notkbd1</span>)<span class="comment">;</span></span><br><span class="line">    Or8Way(in[<span class="number">0</span>..<span class="number">4</span>]<span class="symbol">=address</span>[<span class="number">8</span>..<span class="number">12</span>], in[<span class="number">5</span>..<span class="number">7</span>]<span class="symbol">=false</span>, out<span class="symbol">=notkbd2</span>)<span class="comment">;</span></span><br><span class="line">    Or(a<span class="symbol">=notkbd1</span>,<span class="keyword">b=notkbd2,out=notkbd);</span></span><br><span class="line"><span class="keyword"> </span>   Mux16(a<span class="symbol">=kbd</span>,<span class="keyword">b=false,sel=notkbd,out=kbdout);</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword"> </span>   //determine which is the output</span><br><span class="line">    Mux16(a<span class="symbol">=ramout</span>,<span class="keyword">b=outsk,sel=address[14],out=out);</span></span><br><span class="line"><span class="keyword"> </span>   Mux16(a<span class="symbol">=screenout</span>,<span class="keyword">b=kbdout,sel=address[13],out=outsk);</span></span><br><span class="line"><span class="keyword"> </span>       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Central-Processing-Unit-CPU"><a href="#Central-Processing-Unit-CPU" class="headerlink" title="Central Processing Unit(CPU)"></a>Central Processing Unit(CPU)</h3><p>The CPU—the centerpiece of the computer’s architecture—is in charge of executing the instructions of the currently loaded program.  The CPU executes these tasks using three main hardware elements: an <strong>Arithmetic-Logic Unit (ALU)</strong>, a set of <strong>registers</strong>, and a <strong>control unit</strong>.</p>
<p>The CPU operation can be described as a repeated loop: decode the current instruction, execute it, figure out which instruction to execute next, fetch it, decode it, and so on. This process is sometimes referred to as the <strong>fetch-execute cycle</strong>.</p>
<h4 id="Fetching"><a href="#Fetching" class="headerlink" title="Fetching"></a>Fetching</h4><ol>
<li>Put the location of the next instruction in the Memory address input</li>
<li>Get the instruction code by reading the contents at that Memory location<br><img src="2.png" alt></li>
</ol>
<h4 id="Executing"><a href="#Executing" class="headerlink" title="Executing"></a>Executing</h4><p>The instruction code specifies <strong>what to do</strong></p>
<ul>
<li>Which arithmetic or logical instruction to execute</li>
<li>Which memory address to access (for read / write)</li>
<li>If / where to jump</li>
<li>……</li>
</ul>
<p>Executing the instruction involves:</p>
<ul>
<li>accessing registers</li>
<li>accessing the data memory.</li>
</ul>
<p><img src="3.png" alt></p>
<h4 id="Arithmetic-Logic-Unit"><a href="#Arithmetic-Logic-Unit" class="headerlink" title="Arithmetic Logic Unit"></a>Arithmetic Logic Unit</h4><ul>
<li>perform all the low-level arithmetic and logical operations</li>
<li>Any function not supported by the ALU as a primitive hardware operation can be later realized by the computer’s system software</li>
</ul>
<h4 id="Registers"><a href="#Registers" class="headerlink" title="Registers"></a>Registers</h4><ul>
<li>store the intermediate results(rather than ship them in and out of the CPU chip and store them in RAM chip)</li>
<li>typically equipped with a small set of 2 up to 32 resident high-speed registers, each capable of holding a single word.</li>
</ul>
<h4 id="Control-Unit"><a href="#Control-Unit" class="headerlink" title="Control Unit"></a>Control Unit</h4><ul>
<li>decoded binary instructions</li>
<li>signal various hardware devices (ALU, registers, memory) how to execute the instructions.</li>
</ul>
<h4 id="CPU-Operation"><a href="#CPU-Operation" class="headerlink" title="CPU Operation"></a>CPU Operation</h4><p><img src="4.png" alt><br><img src="5.png" alt><br><img src="6.png" alt></p>
<figure class="highlight arm"><table><tr><td class="code"><pre><span class="line">// This file is part of www.nand2tetris.org</span><br><span class="line">// <span class="keyword">and </span>the <span class="keyword">book </span><span class="string">"The Elements of Computing Systems"</span></span><br><span class="line">// <span class="keyword">by </span>Nisan <span class="keyword">and </span>Schocken, MIT Press.</span><br><span class="line">// File name: projects/<span class="number">05</span>/CPU.hdl</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Hack CPU (Central Processing unit), consisting of an ALU,</span></span><br><span class="line"><span class="comment"> * two registers named A and D, and a program counter named PC.</span></span><br><span class="line"><span class="comment"> * The CPU is designed to fetch and execute instructions written in </span></span><br><span class="line"><span class="comment"> * the Hack machine language. In particular, functions as follows:</span></span><br><span class="line"><span class="comment"> * Executes the inputted instruction according to the Hack machine </span></span><br><span class="line"><span class="comment"> * language specification. The D and A in the language specification</span></span><br><span class="line"><span class="comment"> * refer to CPU-resident registers, while M refers to the external</span></span><br><span class="line"><span class="comment"> * memory location addressed by A, i.e. to Memory[A]. The inM input </span></span><br><span class="line"><span class="comment"> * holds the value of this location. If the current instruction needs </span></span><br><span class="line"><span class="comment"> * to write a value to M, the value is placed in outM, the address </span></span><br><span class="line"><span class="comment"> * of the target location is placed in the addressM output, and the </span></span><br><span class="line"><span class="comment"> * writeM control bit is asserted. (When writeM==0, any value may </span></span><br><span class="line"><span class="comment"> * appear in outM). The outM and writeM outputs are combinational: </span></span><br><span class="line"><span class="comment"> * they are affected instantaneously by the execution of the current </span></span><br><span class="line"><span class="comment"> * instruction. The addressM and pc outputs are clocked: although they </span></span><br><span class="line"><span class="comment"> * are affected by the execution of the current instruction, they commit </span></span><br><span class="line"><span class="comment"> * to their new values only in the next time step. If reset==1 then the </span></span><br><span class="line"><span class="comment"> * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather </span></span><br><span class="line"><span class="comment"> * than to the address resulting from executing the current instruction. </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">CHIP</span> CPU &#123;</span><br><span class="line"></span><br><span class="line">    IN  inM[<span class="number">16</span>],         // M value input  (M = contents of RAM[A])</span><br><span class="line">        instruction[<span class="number">16</span>], // Instruction for execution</span><br><span class="line">        reset<span class="comment">;           // Signals whether to re-start the current</span></span><br><span class="line">                         // program (reset<span class="number">=1</span>) or continue executing</span><br><span class="line">                         // the current program (reset<span class="number">=0</span>).</span><br><span class="line"></span><br><span class="line">    OUT outM[<span class="number">16</span>],        // M value output</span><br><span class="line">        writeM,          // Write into M? </span><br><span class="line">        <span class="keyword">addressM[15], </span>   // <span class="keyword">Address </span>in <span class="meta">data</span> memory (of M)</span><br><span class="line">        <span class="built_in">pc</span>[<span class="number">15</span>]<span class="comment">;          // address of next instruction</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">    PARTS:</span></span><br><span class="line">    Mux16(a<span class="symbol">=instruction</span>,<span class="keyword">b=ALUout,sel=instruction[15],out=Ain);</span></span><br><span class="line"><span class="keyword"> </span>   </span><br><span class="line">    Not(in<span class="symbol">=instruction</span>[<span class="number">15</span>],out<span class="symbol">=notinstruction</span>)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">    //RegisterA </span><br><span class="line">    //when instruction[<span class="number">15</span>] = <span class="number">0</span>, <span class="keyword">it </span>is <span class="comment">@value means A should load value</span></span><br><span class="line">    Or(a<span class="symbol">=notinstruction</span>,<span class="keyword">b=instruction[5],out=loadA);//d1</span></span><br><span class="line"><span class="keyword"> </span>   ARegister(in<span class="symbol">=Ain</span>,load<span class="symbol">=loadA</span>,out<span class="symbol">=Aout</span>,out[<span class="number">0</span>..<span class="number">14</span>]<span class="symbol">=addressM</span>)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">    Mux16(a<span class="symbol">=Aout</span>,<span class="keyword">b=inM,sel=instruction[12],out=AMout);</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword"> </span>   //Prepare for ALU, <span class="meta">if</span> <span class="keyword">it </span>is not an instruction, just return D</span><br><span class="line">    <span class="keyword">And(a=instruction[11],b=instruction[15],out=zx);//c1</span></span><br><span class="line"><span class="keyword"> </span>   <span class="keyword">And(a=instruction[10],b=instruction[15],out=nx);//c2</span></span><br><span class="line"><span class="keyword"> </span>   Or(a<span class="symbol">=instruction</span>[<span class="number">9</span>],<span class="keyword">b=notinstruction,out=zy);//c3</span></span><br><span class="line"><span class="keyword"> </span>   Or(a<span class="symbol">=instruction</span>[<span class="number">8</span>],<span class="keyword">b=notinstruction,out=ny);//c4</span></span><br><span class="line"><span class="keyword"> </span>   <span class="keyword">And(a=instruction[7],b=instruction[15],out=f);//c5</span></span><br><span class="line"><span class="keyword"> </span>   <span class="keyword">And(a=instruction[6],b=instruction[15],out=no);//c6</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword"> </span>   ALU(x<span class="symbol">=Dout</span>,y<span class="symbol">=AMout</span>,zx<span class="symbol">=zx</span>,nx<span class="symbol">=nx</span>,zy<span class="symbol">=zy</span>,ny<span class="symbol">=ny</span>,f<span class="symbol">=f</span>,no<span class="symbol">=no</span>,out<span class="symbol">=outM</span>,out<span class="symbol">=ALUout</span>,zr<span class="symbol">=zero</span>,ng<span class="symbol">=neg</span>)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">    //when <span class="keyword">it </span>is an instruction, write M </span><br><span class="line">    <span class="keyword">And(a=instruction[15],b=instruction[3],out=writeM);//d3</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword"> </span>   //RegisterD,when <span class="keyword">it </span>is an instruction, load D</span><br><span class="line">    <span class="keyword">And(a=instruction[15],b=instruction[4],out=loadD);//d2</span></span><br><span class="line"><span class="keyword"> </span>   DRegister(in<span class="symbol">=ALUout</span>,load<span class="symbol">=loadD</span>,out<span class="symbol">=Dout</span>)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">    //Prepare for jump</span><br><span class="line">    //<span class="meta">get</span> positive</span><br><span class="line">    Or(a<span class="symbol">=zero</span>,<span class="keyword">b=neg,out=notpos);</span></span><br><span class="line"><span class="keyword"> </span>   Not(in<span class="symbol">=notpos</span>,out<span class="symbol">=pos</span>)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">And(a=instruction[0],b=pos,out=j3);//j3</span></span><br><span class="line"><span class="keyword"> </span>   <span class="keyword">And(a=instruction[1],b=zero,out=j2);//j2</span></span><br><span class="line"><span class="keyword"> </span>   <span class="keyword">And(a=instruction[2],b=neg,out=j1);//j1</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword"> </span>   Or(a<span class="symbol">=j1</span>,<span class="keyword">b=j2,out=j12);</span></span><br><span class="line"><span class="keyword"> </span>   Or(a<span class="symbol">=j12</span>,<span class="keyword">b=j3,out=j123);</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword"> </span>   <span class="keyword">And(a=j123,b=instruction[15],out=jump);</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword"> </span>   //when jump,load Aout </span><br><span class="line">    <span class="built_in">PC</span>(in<span class="symbol">=Aout</span>,load<span class="symbol">=jump</span>,reset<span class="symbol">=reset</span>,inc<span class="symbol">=true</span>,out[<span class="number">0</span>..<span class="number">14</span>]<span class="symbol">=pc</span>)<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Registers-1"><a href="#Registers-1" class="headerlink" title="Registers"></a>Registers</h3><p>CPU-resident registers save unnecessary memory access, and allow using thinner instruction formats, resulting in faster throughput.(saved ourselves a great deal of time and overhead)</p>
<h4 id="Data-registers"><a href="#Data-registers" class="headerlink" title="Data registers"></a>Data registers</h4><ul>
<li>calculate (a − b)*c, temporary result(a - b) can be stored in some memory register.</li>
<li>Typically, CPU’s use at least one and up to 32 data registers.</li>
</ul>
<h4 id="Address-registers"><a href="#Address-registers" class="headerlink" title="Address registers"></a>Address registers</h4><ul>
<li>the output of an address register is typically connected to the address input of a memory device.</li>
<li>set Memory[17] to 1. First set A=17(@17), followed by M=1(M mnemonic stand for Memory[17])</li>
<li>In addition to supporting this fundamental addressing operation, an address register is, well, a register. Therefore, if needed, it can be used as yet another data register. D=17( @17, D=A)</li>
</ul>
<h4 id="Program-counter"><a href="#Program-counter" class="headerlink" title="Program counter"></a>Program counter</h4><p>When executing a program, the CPU must always keep track of the address of the instruction that must be fetched and executed next. This address is kept in a special register called <strong>program counter</strong>.</p>
<h3 id="Input-and-Output"><a href="#Input-and-Output" class="headerlink" title="Input and Output"></a>Input and Output</h3><p>computer scientists have devised clever schemes to make all these different devices look exactly the same to the computer. The key trick in managing this complexity is called <strong>memory-mapped I/O</strong>.</p>
<ul>
<li>The basic idea is to create a binary emulation of the I/O device, making it “look” to the CPU as if it were a <strong>regular memory segment.</strong></li>
<li>each I/O device is allocated an exclusive area in memory, becoming its “memory map.”</li>
<li>the data that drives each I/O device must be serialized. example: 2-dimensional grid of pixels, must be mapped on a 1-dimensional vector of fixed-size memory registers.</li>
</ul>
<h4 id="Screen"><a href="#Screen" class="headerlink" title="Screen"></a>Screen</h4><p><img src="10.png" alt></p>
<h3 id="Keyboard"><a href="#Keyboard" class="headerlink" title="Keyboard"></a>Keyboard</h3><p><img src="11.png" alt></p>
<h2 id="Hack-Computer-implementation"><a href="#Hack-Computer-implementation" class="headerlink" title="Hack Computer implementation"></a>Hack Computer implementation</h2><p><img src="12.png" alt><br><img src="9.png" alt></p>
<figure class="highlight arm"><table><tr><td class="code"><pre><span class="line">// This file is part of www.nand2tetris.org</span><br><span class="line">// <span class="keyword">and </span>the <span class="keyword">book </span><span class="string">"The Elements of Computing Systems"</span></span><br><span class="line">// <span class="keyword">by </span>Nisan <span class="keyword">and </span>Schocken, MIT Press.</span><br><span class="line">// File name: projects/<span class="number">05</span>/Computer.hdl</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The HACK computer, including CPU, ROM and RAM.</span></span><br><span class="line"><span class="comment"> * When reset is 0, the program stored in the computer's ROM executes.</span></span><br><span class="line"><span class="comment"> * When reset is 1, the execution of the program restarts. </span></span><br><span class="line"><span class="comment"> * Thus, to start a program's execution, reset must be pushed "up" (1)</span></span><br><span class="line"><span class="comment"> * and "down" (0). From this point onward the user is at the mercy of </span></span><br><span class="line"><span class="comment"> * the software. In particular, depending on the program's code, the </span></span><br><span class="line"><span class="comment"> * screen may show some output and the user may be able to interact </span></span><br><span class="line"><span class="comment"> * with the computer via the keyboard.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">CHIP</span> Computer &#123;</span><br><span class="line"></span><br><span class="line">    IN reset<span class="comment">;</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">    PARTS:</span></span><br><span class="line">    CPU(instruction<span class="symbol">=instruction</span>,reset<span class="symbol">=reset</span>,inM<span class="symbol">=outMemo</span>,outM<span class="symbol">=CPUoutM</span>,writeM<span class="symbol">=wM</span>,<span class="keyword">addressM=adM,pc=PC);</span></span><br><span class="line"><span class="keyword"> </span>   Memory(in<span class="symbol">=CPUoutM</span>,load<span class="symbol">=wM</span>,<span class="keyword">address=adM,out=outMemo);</span></span><br><span class="line"><span class="keyword"> </span>   ROM32K(<span class="keyword">address=PC,out=instruction);</span></span><br><span class="line"><span class="keyword">&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hardware Architecture</category>
      </categories>
      <tags>
        <tag>Nand2Tetris</tag>
      </tags>
  </entry>
  <entry>
    <title>Transfer Learning</title>
    <url>/Transfer-Learning/2019/05/31/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line"></span><br><span class="line">from tensorflow.keras import layers</span><br><span class="line">from tensorflow.keras import Model</span><br><span class="line">!wget --no-check-certificate \</span><br><span class="line">    https://storage.googleapis.com/mledu-datasets/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5 \</span><br><span class="line">    -O /tmp/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5</span><br><span class="line">  </span><br><span class="line">from tensorflow.keras.applications.inception_v3 import InceptionV3</span><br><span class="line"></span><br><span class="line">local_weights_file = &apos;/tmp/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5&apos;</span><br><span class="line"></span><br><span class="line">pre_trained_model = InceptionV3(input_shape = (150, 150, 3), </span><br><span class="line">                                include_top = False, </span><br><span class="line">                                weights = None)</span><br><span class="line"></span><br><span class="line">pre_trained_model.load_weights(local_weights_file)</span><br><span class="line"></span><br><span class="line">for layer in pre_trained_model.layers:</span><br><span class="line">  layer.trainable = False</span><br><span class="line">  </span><br><span class="line"># pre_trained_model.summary()</span><br><span class="line"></span><br><span class="line">last_layer = pre_trained_model.get_layer(&apos;mixed7&apos;)</span><br><span class="line">print(&apos;last layer output shape: &apos;, last_layer.output_shape)</span><br><span class="line">last_output = last_layer.output</span><br></pre></td></tr></table></figure>
<pre><code>--2019-02-13 14:04:55--  https://storage.googleapis.com/mledu-datasets/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5
Resolving storage.googleapis.com... 2607:f8b0:4003:c05::80, 64.233.168.128
Connecting to storage.googleapis.com|2607:f8b0:4003:c05::80|:443... connected.
WARNING: cannot verify storage.googleapis.com&#39;s certificate, issued by &#39;CN=Google Internet Authority G3,O=Google Trust Services,C=US&#39;:
  Unable to locally verify the issuer&#39;s authority.
HTTP request sent, awaiting response... 200 OK
Length: 87910968 (84M) [application/x-hdf]
Saving to: &#39;/tmp/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5&#39;

/tmp/inception_v3_w 100%[=====================&gt;]  83.84M  75.6MB/s   in 1.1s   

2019-02-13 14:04:56 (75.6 MB/s) - &#39;/tmp/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5&#39; saved [87910968/87910968]

(&#39;last layer output shape: &#39;, (None, 7, 7, 768))
</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from tensorflow.keras.optimizers import RMSprop</span><br><span class="line"></span><br><span class="line"># Flatten the output layer to 1 dimension</span><br><span class="line">x = layers.Flatten()(last_output)</span><br><span class="line"># Add a fully connected layer with 1,024 hidden units and ReLU activation</span><br><span class="line">x = layers.Dense(1024, activation=&apos;relu&apos;)(x)</span><br><span class="line"># Add a dropout rate of 0.2</span><br><span class="line">x = layers.Dropout(0.2)(x)                  </span><br><span class="line"># Add a final sigmoid layer for classification</span><br><span class="line">x = layers.Dense  (1, activation=&apos;sigmoid&apos;)(x)           </span><br><span class="line"></span><br><span class="line">model = Model( pre_trained_model.input, x) </span><br><span class="line"></span><br><span class="line">model.compile(optimizer = RMSprop(lr=0.0001), </span><br><span class="line">              loss = &apos;binary_crossentropy&apos;, </span><br><span class="line">              metrics = [&apos;acc&apos;])</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">!wget --no-check-certificate \</span><br><span class="line">        https://storage.googleapis.com/mledu-datasets/cats_and_dogs_filtered.zip \</span><br><span class="line">       -O /tmp/cats_and_dogs_filtered.zip</span><br><span class="line"></span><br><span class="line">from tensorflow.keras.preprocessing.image import ImageDataGenerator</span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line">import zipfile</span><br><span class="line"></span><br><span class="line">local_zip = &apos;//tmp/cats_and_dogs_filtered.zip&apos;</span><br><span class="line"></span><br><span class="line">zip_ref = zipfile.ZipFile(local_zip, &apos;r&apos;)</span><br><span class="line"></span><br><span class="line">zip_ref.extractall(&apos;/tmp&apos;)</span><br><span class="line">zip_ref.close()</span><br><span class="line"></span><br><span class="line"># Define our example directories and files</span><br><span class="line">base_dir = &apos;/tmp/cats_and_dogs_filtered&apos;</span><br><span class="line"></span><br><span class="line">train_dir = os.path.join( base_dir, &apos;train&apos;)</span><br><span class="line">validation_dir = os.path.join( base_dir, &apos;validation&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">train_cats_dir = os.path.join(train_dir, &apos;cats&apos;) # Directory with our training cat pictures</span><br><span class="line">train_dogs_dir = os.path.join(train_dir, &apos;dogs&apos;) # Directory with our training dog pictures</span><br><span class="line">validation_cats_dir = os.path.join(validation_dir, &apos;cats&apos;) # Directory with our validation cat pictures</span><br><span class="line">validation_dogs_dir = os.path.join(validation_dir, &apos;dogs&apos;)# Directory with our validation dog pictures</span><br><span class="line"></span><br><span class="line">train_cat_fnames = os.listdir(train_cats_dir)</span><br><span class="line">train_dog_fnames = os.listdir(train_dogs_dir)</span><br><span class="line"></span><br><span class="line"># Add our data-augmentation parameters to ImageDataGenerator</span><br><span class="line">train_datagen = ImageDataGenerator(rescale = 1./255.,</span><br><span class="line">                                   rotation_range = 40,</span><br><span class="line">                                   width_shift_range = 0.2,</span><br><span class="line">                                   height_shift_range = 0.2,</span><br><span class="line">                                   shear_range = 0.2,</span><br><span class="line">                                   zoom_range = 0.2,</span><br><span class="line">                                   horizontal_flip = True)</span><br><span class="line"></span><br><span class="line"># Note that the validation data should not be augmented!</span><br><span class="line">test_datagen = ImageDataGenerator( rescale = 1.0/255. )</span><br><span class="line"></span><br><span class="line"># Flow training images in batches of 20 using train_datagen generator</span><br><span class="line">train_generator = train_datagen.flow_from_directory(train_dir,</span><br><span class="line">                                                    batch_size = 20,</span><br><span class="line">                                                    class_mode = &apos;binary&apos;, </span><br><span class="line">                                                    target_size = (150, 150))     </span><br><span class="line"></span><br><span class="line"># Flow validation images in batches of 20 using test_datagen generator</span><br><span class="line">validation_generator =  test_datagen.flow_from_directory( validation_dir,</span><br><span class="line">                                                          batch_size  = 20,</span><br><span class="line">                                                          class_mode  = &apos;binary&apos;, </span><br><span class="line">                                                          target_size = (150, 150))</span><br></pre></td></tr></table></figure>
<pre><code>--2019-02-13 14:05:24--  https://storage.googleapis.com/mledu-datasets/cats_and_dogs_filtered.zip
Resolving storage.googleapis.com... 2607:f8b0:4003:c0a::80, 173.194.223.128
Connecting to storage.googleapis.com|2607:f8b0:4003:c0a::80|:443... connected.
WARNING: cannot verify storage.googleapis.com&#39;s certificate, issued by &#39;CN=Google Internet Authority G3,O=Google Trust Services,C=US&#39;:
  Unable to locally verify the issuer&#39;s authority.
HTTP request sent, awaiting response... 200 OK
Length: 68606236 (65M) [application/zip]
Saving to: &#39;/tmp/cats_and_dogs_filtered.zip&#39;

/tmp/cats_and_dogs_ 100%[=====================&gt;]  65.43M   168MB/s   in 0.4s   

2019-02-13 14:05:24 (168 MB/s) - &#39;/tmp/cats_and_dogs_filtered.zip&#39; saved [68606236/68606236]

Found 2000 images belonging to 2 classes.
Found 1000 images belonging to 2 classes.
</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">history = model.fit_generator(</span><br><span class="line">            train_generator,</span><br><span class="line">            validation_data = validation_generator,</span><br><span class="line">            steps_per_epoch = 100,</span><br><span class="line">            epochs = 20,</span><br><span class="line">            validation_steps = 50,</span><br><span class="line">            verbose = 2)</span><br></pre></td></tr></table></figure>
<pre><code>Epoch 1/20
100/100 - 17s - loss: 0.5283 - acc: 0.7525 - val_loss: 0.3843 - val_acc: 0.8940
Epoch 2/20
100/100 - 14s - loss: 0.3678 - acc: 0.8340 - val_loss: 0.2040 - val_acc: 0.9480
Epoch 3/20
100/100 - 15s - loss: 0.3352 - acc: 0.8535 - val_loss: 0.3987 - val_acc: 0.9270
Epoch 4/20
100/100 - 15s - loss: 0.3432 - acc: 0.8550 - val_loss: 0.2987 - val_acc: 0.9440
Epoch 5/20
100/100 - 15s - loss: 0.3391 - acc: 0.8640 - val_loss: 0.3390 - val_acc: 0.9450
Epoch 6/20
100/100 - 14s - loss: 0.3135 - acc: 0.8680 - val_loss: 0.3465 - val_acc: 0.9480
Epoch 7/20
100/100 - 14s - loss: 0.3113 - acc: 0.8700 - val_loss: 0.3115 - val_acc: 0.9530
Epoch 8/20
100/100 - 15s - loss: 0.2901 - acc: 0.8820 - val_loss: 0.5042 - val_acc: 0.9370
Epoch 9/20
100/100 - 15s - loss: 0.2912 - acc: 0.8865 - val_loss: 0.3065 - val_acc: 0.9620
Epoch 10/20
100/100 - 15s - loss: 0.2944 - acc: 0.8760 - val_loss: 0.2641 - val_acc: 0.9640
Epoch 11/20
100/100 - 14s - loss: 0.2831 - acc: 0.8810 - val_loss: 0.4515 - val_acc: 0.9450
Epoch 12/20
100/100 - 15s - loss: 0.2682 - acc: 0.8895 - val_loss: 0.3231 - val_acc: 0.9580
Epoch 13/20
100/100 - 15s - loss: 0.2748 - acc: 0.8840 - val_loss: 0.2427 - val_acc: 0.9680
Epoch 14/20
100/100 - 15s - loss: 0.2669 - acc: 0.8945 - val_loss: 0.3075 - val_acc: 0.9630
Epoch 15/20
100/100 - 15s - loss: 0.2732 - acc: 0.8910 - val_loss: 0.2629 - val_acc: 0.9620
Epoch 16/20
100/100 - 14s - loss: 0.2634 - acc: 0.8940 - val_loss: 0.3864 - val_acc: 0.9570
Epoch 17/20
100/100 - 14s - loss: 0.2473 - acc: 0.9040 - val_loss: 0.2648 - val_acc: 0.9670
Epoch 18/20
100/100 - 15s - loss: 0.2767 - acc: 0.8890 - val_loss: 0.2519 - val_acc: 0.9620
Epoch 19/20
100/100 - 17s - loss: 0.2660 - acc: 0.8990 - val_loss: 0.2495 - val_acc: 0.9680
Epoch 20/20
100/100 - 15s - loss: 0.2535 - acc: 0.9020 - val_loss: 0.2682 - val_acc: 0.9670
</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">acc = history.history[&apos;acc&apos;]</span><br><span class="line">val_acc = history.history[&apos;val_acc&apos;]</span><br><span class="line">loss = history.history[&apos;loss&apos;]</span><br><span class="line">val_loss = history.history[&apos;val_loss&apos;]</span><br><span class="line"></span><br><span class="line">epochs = range(len(acc))</span><br><span class="line"></span><br><span class="line">plt.plot(epochs, acc, &apos;r&apos;, label=&apos;Training accuracy&apos;)</span><br><span class="line">plt.plot(epochs, val_acc, &apos;b&apos;, label=&apos;Validation accuracy&apos;)</span><br><span class="line">plt.title(&apos;Training and validation accuracy&apos;)</span><br><span class="line">plt.legend(loc=0)</span><br><span class="line">plt.figure()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="output_4_0.png" alt="png"></p>
<pre><code>&lt;matplotlib.figure.Figure at 0x7ff19c530b90&gt;
</code></pre>]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Project</tag>
        <tag>Computer Vision</tag>
        <tag>Convolutional Neural Networks</tag>
        <tag>Transfer Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Data Augmentation</title>
    <url>/Data-Augmentation/2019/05/31/</url>
    <content><![CDATA[<p>Let’s start with a model that’s very effective at learning Cats v Dogs.</p>
<p>It’s similar to the previous models that you have used, but I have updated the layers definition. Note that there are now 4 convolutional layers with 32, 64, 128 and 128 convolutions respectively.</p>
<p>Also, this will train for 100 epochs, because I want to plot the graph of loss and accuracy.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!wget --no-check-certificate \</span><br><span class="line">    https://storage.googleapis.com/mledu-datasets/cats_and_dogs_filtered.zip \</span><br><span class="line">    -O /tmp/cats_and_dogs_filtered.zip</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.optimizers <span class="keyword">import</span> RMSprop</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.preprocessing.image <span class="keyword">import</span> ImageDataGenerator</span><br><span class="line"></span><br><span class="line">local_zip = <span class="string">'/tmp/cats_and_dogs_filtered.zip'</span></span><br><span class="line">zip_ref = zipfile.ZipFile(local_zip, <span class="string">'r'</span>)</span><br><span class="line">zip_ref.extractall(<span class="string">'/tmp'</span>)</span><br><span class="line">zip_ref.close()</span><br><span class="line"></span><br><span class="line">base_dir = <span class="string">'/tmp/cats_and_dogs_filtered'</span></span><br><span class="line">train_dir = os.path.join(base_dir, <span class="string">'train'</span>)</span><br><span class="line">validation_dir = os.path.join(base_dir, <span class="string">'validation'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory with our training cat pictures</span></span><br><span class="line">train_cats_dir = os.path.join(train_dir, <span class="string">'cats'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory with our training dog pictures</span></span><br><span class="line">train_dogs_dir = os.path.join(train_dir, <span class="string">'dogs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory with our validation cat pictures</span></span><br><span class="line">validation_cats_dir = os.path.join(validation_dir, <span class="string">'cats'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory with our validation dog pictures</span></span><br><span class="line">validation_dogs_dir = os.path.join(validation_dir, <span class="string">'dogs'</span>)</span><br><span class="line"></span><br><span class="line">model = tf.keras.models.Sequential([</span><br><span class="line">    tf.keras.layers.Conv2D(<span class="number">32</span>, (<span class="number">3</span>,<span class="number">3</span>), activation=<span class="string">'relu'</span>, input_shape=(<span class="number">150</span>, <span class="number">150</span>, <span class="number">3</span>)),</span><br><span class="line">    tf.keras.layers.MaxPooling2D(<span class="number">2</span>, <span class="number">2</span>),</span><br><span class="line">    tf.keras.layers.Conv2D(<span class="number">64</span>, (<span class="number">3</span>,<span class="number">3</span>), activation=<span class="string">'relu'</span>),</span><br><span class="line">    tf.keras.layers.MaxPooling2D(<span class="number">2</span>,<span class="number">2</span>),</span><br><span class="line">    tf.keras.layers.Conv2D(<span class="number">128</span>, (<span class="number">3</span>,<span class="number">3</span>), activation=<span class="string">'relu'</span>),</span><br><span class="line">    tf.keras.layers.MaxPooling2D(<span class="number">2</span>,<span class="number">2</span>),</span><br><span class="line">    tf.keras.layers.Conv2D(<span class="number">128</span>, (<span class="number">3</span>,<span class="number">3</span>), activation=<span class="string">'relu'</span>),</span><br><span class="line">    tf.keras.layers.MaxPooling2D(<span class="number">2</span>,<span class="number">2</span>),</span><br><span class="line">    tf.keras.layers.Flatten(),</span><br><span class="line">    tf.keras.layers.Dense(<span class="number">512</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    tf.keras.layers.Dense(<span class="number">1</span>, activation=<span class="string">'sigmoid'</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">model.compile(loss=<span class="string">'binary_crossentropy'</span>,</span><br><span class="line">              optimizer=RMSprop(lr=<span class="number">1e-4</span>),</span><br><span class="line">              metrics=[<span class="string">'acc'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># All images will be rescaled by 1./255</span></span><br><span class="line">train_datagen = ImageDataGenerator(rescale=<span class="number">1.</span>/<span class="number">255</span>)</span><br><span class="line">test_datagen = ImageDataGenerator(rescale=<span class="number">1.</span>/<span class="number">255</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Flow training images in batches of 20 using train_datagen generator</span></span><br><span class="line">train_generator = train_datagen.flow_from_directory(</span><br><span class="line">        train_dir,  <span class="comment"># This is the source directory for training images</span></span><br><span class="line">        target_size=(<span class="number">150</span>, <span class="number">150</span>),  <span class="comment"># All images will be resized to 150x150</span></span><br><span class="line">        batch_size=<span class="number">20</span>,</span><br><span class="line">        <span class="comment"># Since we use binary_crossentropy loss, we need binary labels</span></span><br><span class="line">        class_mode=<span class="string">'binary'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Flow validation images in batches of 20 using test_datagen generator</span></span><br><span class="line">validation_generator = test_datagen.flow_from_directory(</span><br><span class="line">        validation_dir,</span><br><span class="line">        target_size=(<span class="number">150</span>, <span class="number">150</span>),</span><br><span class="line">        batch_size=<span class="number">20</span>,</span><br><span class="line">        class_mode=<span class="string">'binary'</span>)</span><br><span class="line"></span><br><span class="line">history = model.fit_generator(</span><br><span class="line">      train_generator,</span><br><span class="line">      steps_per_epoch=<span class="number">100</span>,  <span class="comment"># 2000 images = batch_size * steps</span></span><br><span class="line">      epochs=<span class="number">100</span>,</span><br><span class="line">      validation_data=validation_generator,</span><br><span class="line">      validation_steps=<span class="number">50</span>,  <span class="comment"># 1000 images = batch_size * steps</span></span><br><span class="line">      verbose=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">acc = history.history[<span class="string">'acc'</span>]</span><br><span class="line">val_acc = history.history[<span class="string">'val_acc'</span>]</span><br><span class="line">loss = history.history[<span class="string">'loss'</span>]</span><br><span class="line">val_loss = history.history[<span class="string">'val_loss'</span>]</span><br><span class="line"></span><br><span class="line">epochs = range(len(acc))</span><br><span class="line"></span><br><span class="line">plt.plot(epochs, acc, <span class="string">'bo'</span>, label=<span class="string">'Training accuracy'</span>)</span><br><span class="line">plt.plot(epochs, val_acc, <span class="string">'b'</span>, label=<span class="string">'Validation accuracy'</span>)</span><br><span class="line">plt.title(<span class="string">'Training and validation accuracy'</span>)</span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line"></span><br><span class="line">plt.plot(epochs, loss, <span class="string">'bo'</span>, label=<span class="string">'Training Loss'</span>)</span><br><span class="line">plt.plot(epochs, val_loss, <span class="string">'b'</span>, label=<span class="string">'Validation Loss'</span>)</span><br><span class="line">plt.title(<span class="string">'Training and validation loss'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="output_2_0.png" alt="png"></p>
<p><img src="output_2_1.png" alt="png"></p>
<p>The Training Accuracy is close to 100%, and the validation accuracy is in the 70%-80% range. This is a great example of overfitting — which in short means that it can do very well with images it has seen before, but not so well with images it hasn’t. Let’s see if we can do better to avoid overfitting — and one simple method is to augment the images a bit. If you think about it, most pictures of a cat are very similar — the ears are at the top, then the eyes, then the mouth etc. Things like the distance between the eyes and ears will always be quite similar too. </p>
<p>What if we tweak with the images to change this up a bit — rotate the image, squash it, etc.  That’s what image augementation is all about. And there’s an API that makes it easy…</p>
<p>Now take a look at the ImageGenerator. There are properties on it that you can use to augment the image. </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Updated to do image augmentation</span><br><span class="line">train_datagen = ImageDataGenerator(</span><br><span class="line">      rotation_range=40,</span><br><span class="line">      width_shift_range=0.2,</span><br><span class="line">      height_shift_range=0.2,</span><br><span class="line">      shear_range=0.2,</span><br><span class="line">      zoom_range=0.2,</span><br><span class="line">      horizontal_flip=True,</span><br><span class="line">      fill_mode=&apos;nearest&apos;)</span><br></pre></td></tr></table></figure>
<p>These are just a few of the options available (for more, see the Keras documentation. Let’s quickly go over what we just wrote:</p>
<ul>
<li>rotation_range is a value in degrees (0–180), a range within which to randomly rotate pictures.</li>
<li>width_shift and height_shift are ranges (as a fraction of total width or height) within which to randomly translate pictures vertically or horizontally.</li>
<li>shear_range is for randomly applying shearing transformations.</li>
<li>zoom_range is for randomly zooming inside pictures.</li>
<li>horizontal_flip is for randomly flipping half of the images horizontally. This is relevant when there are no assumptions of horizontal assymmetry (e.g. real-world pictures).</li>
<li>fill_mode is the strategy used for filling in newly created pixels, which can appear after a rotation or a width/height shift.</li>
</ul>
<p>Here’s some code where we’ve added Image Augmentation. Run it to see the impact.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!wget --no-check-certificate \</span><br><span class="line">    https://storage.googleapis.com/mledu-datasets/cats_and_dogs_filtered.zip \</span><br><span class="line">    -O /tmp/cats_and_dogs_filtered.zip</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.optimizers <span class="keyword">import</span> RMSprop</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.preprocessing.image <span class="keyword">import</span> ImageDataGenerator</span><br><span class="line"></span><br><span class="line">local_zip = <span class="string">'/tmp/cats_and_dogs_filtered.zip'</span></span><br><span class="line">zip_ref = zipfile.ZipFile(local_zip, <span class="string">'r'</span>)</span><br><span class="line">zip_ref.extractall(<span class="string">'/tmp'</span>)</span><br><span class="line">zip_ref.close()</span><br><span class="line"></span><br><span class="line">base_dir = <span class="string">'/tmp/cats_and_dogs_filtered'</span></span><br><span class="line">train_dir = os.path.join(base_dir, <span class="string">'train'</span>)</span><br><span class="line">validation_dir = os.path.join(base_dir, <span class="string">'validation'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory with our training cat pictures</span></span><br><span class="line">train_cats_dir = os.path.join(train_dir, <span class="string">'cats'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory with our training dog pictures</span></span><br><span class="line">train_dogs_dir = os.path.join(train_dir, <span class="string">'dogs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory with our validation cat pictures</span></span><br><span class="line">validation_cats_dir = os.path.join(validation_dir, <span class="string">'cats'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory with our validation dog pictures</span></span><br><span class="line">validation_dogs_dir = os.path.join(validation_dir, <span class="string">'dogs'</span>)</span><br><span class="line"></span><br><span class="line">model = tf.keras.models.Sequential([</span><br><span class="line">    tf.keras.layers.Conv2D(<span class="number">32</span>, (<span class="number">3</span>,<span class="number">3</span>), activation=<span class="string">'relu'</span>, input_shape=(<span class="number">150</span>, <span class="number">150</span>, <span class="number">3</span>)),</span><br><span class="line">    tf.keras.layers.MaxPooling2D(<span class="number">2</span>, <span class="number">2</span>),</span><br><span class="line">    tf.keras.layers.Conv2D(<span class="number">64</span>, (<span class="number">3</span>,<span class="number">3</span>), activation=<span class="string">'relu'</span>),</span><br><span class="line">    tf.keras.layers.MaxPooling2D(<span class="number">2</span>,<span class="number">2</span>),</span><br><span class="line">    tf.keras.layers.Conv2D(<span class="number">128</span>, (<span class="number">3</span>,<span class="number">3</span>), activation=<span class="string">'relu'</span>),</span><br><span class="line">    tf.keras.layers.MaxPooling2D(<span class="number">2</span>,<span class="number">2</span>),</span><br><span class="line">    tf.keras.layers.Conv2D(<span class="number">128</span>, (<span class="number">3</span>,<span class="number">3</span>), activation=<span class="string">'relu'</span>),</span><br><span class="line">    tf.keras.layers.MaxPooling2D(<span class="number">2</span>,<span class="number">2</span>),</span><br><span class="line">    tf.keras.layers.Flatten(),</span><br><span class="line">    tf.keras.layers.Dense(<span class="number">512</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    tf.keras.layers.Dense(<span class="number">1</span>, activation=<span class="string">'sigmoid'</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">model.compile(loss=<span class="string">'binary_crossentropy'</span>,</span><br><span class="line">              optimizer=RMSprop(lr=<span class="number">1e-4</span>),</span><br><span class="line">              metrics=[<span class="string">'acc'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># This code has changed. Now instead of the ImageGenerator just rescaling</span></span><br><span class="line"><span class="comment"># the image, we also rotate and do other operations</span></span><br><span class="line"><span class="comment"># Updated to do image augmentation</span></span><br><span class="line">train_datagen = ImageDataGenerator(</span><br><span class="line">      rescale=<span class="number">1.</span>/<span class="number">255</span>,</span><br><span class="line">      rotation_range=<span class="number">40</span>,</span><br><span class="line">      width_shift_range=<span class="number">0.2</span>,</span><br><span class="line">      height_shift_range=<span class="number">0.2</span>,</span><br><span class="line">      shear_range=<span class="number">0.2</span>,</span><br><span class="line">      zoom_range=<span class="number">0.2</span>,</span><br><span class="line">      horizontal_flip=<span class="keyword">True</span>,</span><br><span class="line">      fill_mode=<span class="string">'nearest'</span>)</span><br><span class="line"></span><br><span class="line">test_datagen = ImageDataGenerator(rescale=<span class="number">1.</span>/<span class="number">255</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Flow training images in batches of 20 using train_datagen generator</span></span><br><span class="line">train_generator = train_datagen.flow_from_directory(</span><br><span class="line">        train_dir,  <span class="comment"># This is the source directory for training images</span></span><br><span class="line">        target_size=(<span class="number">150</span>, <span class="number">150</span>),  <span class="comment"># All images will be resized to 150x150</span></span><br><span class="line">        batch_size=<span class="number">20</span>,</span><br><span class="line">        <span class="comment"># Since we use binary_crossentropy loss, we need binary labels</span></span><br><span class="line">        class_mode=<span class="string">'binary'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Flow validation images in batches of 20 using test_datagen generator</span></span><br><span class="line">validation_generator = test_datagen.flow_from_directory(</span><br><span class="line">        validation_dir,</span><br><span class="line">        target_size=(<span class="number">150</span>, <span class="number">150</span>),</span><br><span class="line">        batch_size=<span class="number">20</span>,</span><br><span class="line">        class_mode=<span class="string">'binary'</span>)</span><br><span class="line"></span><br><span class="line">history = model.fit_generator(</span><br><span class="line">      train_generator,</span><br><span class="line">      steps_per_epoch=<span class="number">100</span>,  <span class="comment"># 2000 images = batch_size * steps</span></span><br><span class="line">      epochs=<span class="number">100</span>,</span><br><span class="line">      validation_data=validation_generator,</span><br><span class="line">      validation_steps=<span class="number">50</span>,  <span class="comment"># 1000 images = batch_size * steps</span></span><br><span class="line">      verbose=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">acc = history.history[<span class="string">'acc'</span>]</span><br><span class="line">val_acc = history.history[<span class="string">'val_acc'</span>]</span><br><span class="line">loss = history.history[<span class="string">'loss'</span>]</span><br><span class="line">val_loss = history.history[<span class="string">'val_loss'</span>]</span><br><span class="line"></span><br><span class="line">epochs = range(len(acc))</span><br><span class="line"></span><br><span class="line">plt.plot(epochs, acc, <span class="string">'bo'</span>, label=<span class="string">'Training accuracy'</span>)</span><br><span class="line">plt.plot(epochs, val_acc, <span class="string">'b'</span>, label=<span class="string">'Validation accuracy'</span>)</span><br><span class="line">plt.title(<span class="string">'Training and validation accuracy'</span>)</span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line"></span><br><span class="line">plt.plot(epochs, loss, <span class="string">'bo'</span>, label=<span class="string">'Training Loss'</span>)</span><br><span class="line">plt.plot(epochs, val_loss, <span class="string">'b'</span>, label=<span class="string">'Validation Loss'</span>)</span><br><span class="line">plt.title(<span class="string">'Training and validation loss'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="output_5_0.png" alt="png"></p>
<p><img src="output_5_1.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!wget --no-check-certificate \</span><br><span class="line">    https://storage.googleapis.com/mledu-datasets/cats_and_dogs_filtered.zip \</span><br><span class="line">    -O /tmp/cats_and_dogs_filtered.zip</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.optimizers <span class="keyword">import</span> RMSprop</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.preprocessing.image <span class="keyword">import</span> ImageDataGenerator</span><br><span class="line"></span><br><span class="line">local_zip = <span class="string">'/tmp/cats_and_dogs_filtered.zip'</span></span><br><span class="line">zip_ref = zipfile.ZipFile(local_zip, <span class="string">'r'</span>)</span><br><span class="line">zip_ref.extractall(<span class="string">'/tmp'</span>)</span><br><span class="line">zip_ref.close()</span><br><span class="line"></span><br><span class="line">base_dir = <span class="string">'/tmp/cats_and_dogs_filtered'</span></span><br><span class="line">train_dir = os.path.join(base_dir, <span class="string">'train'</span>)</span><br><span class="line">validation_dir = os.path.join(base_dir, <span class="string">'validation'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory with our training cat pictures</span></span><br><span class="line">train_cats_dir = os.path.join(train_dir, <span class="string">'cats'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory with our training dog pictures</span></span><br><span class="line">train_dogs_dir = os.path.join(train_dir, <span class="string">'dogs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory with our validation cat pictures</span></span><br><span class="line">validation_cats_dir = os.path.join(validation_dir, <span class="string">'cats'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory with our validation dog pictures</span></span><br><span class="line">validation_dogs_dir = os.path.join(validation_dir, <span class="string">'dogs'</span>)</span><br><span class="line"></span><br><span class="line">model = tf.keras.models.Sequential([</span><br><span class="line">    tf.keras.layers.Conv2D(<span class="number">32</span>, (<span class="number">3</span>,<span class="number">3</span>), activation=<span class="string">'relu'</span>, input_shape=(<span class="number">150</span>, <span class="number">150</span>, <span class="number">3</span>)),</span><br><span class="line">    tf.keras.layers.MaxPooling2D(<span class="number">2</span>, <span class="number">2</span>),</span><br><span class="line">    tf.keras.layers.Conv2D(<span class="number">64</span>, (<span class="number">3</span>,<span class="number">3</span>), activation=<span class="string">'relu'</span>),</span><br><span class="line">    tf.keras.layers.MaxPooling2D(<span class="number">2</span>,<span class="number">2</span>),</span><br><span class="line">    tf.keras.layers.Conv2D(<span class="number">128</span>, (<span class="number">3</span>,<span class="number">3</span>), activation=<span class="string">'relu'</span>),</span><br><span class="line">    tf.keras.layers.MaxPooling2D(<span class="number">2</span>,<span class="number">2</span>),</span><br><span class="line">    tf.keras.layers.Conv2D(<span class="number">128</span>, (<span class="number">3</span>,<span class="number">3</span>), activation=<span class="string">'relu'</span>),</span><br><span class="line">    tf.keras.layers.MaxPooling2D(<span class="number">2</span>,<span class="number">2</span>),</span><br><span class="line">    tf.keras.layers.Dropout(<span class="number">0.5</span>),</span><br><span class="line">    tf.keras.layers.Flatten(),</span><br><span class="line">    tf.keras.layers.Dense(<span class="number">512</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    tf.keras.layers.Dense(<span class="number">1</span>, activation=<span class="string">'sigmoid'</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">model.compile(loss=<span class="string">'binary_crossentropy'</span>,</span><br><span class="line">              optimizer=RMSprop(lr=<span class="number">1e-4</span>),</span><br><span class="line">              metrics=[<span class="string">'acc'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># This code has changed. Now instead of the ImageGenerator just rescaling</span></span><br><span class="line"><span class="comment"># the image, we also rotate and do other operations</span></span><br><span class="line"><span class="comment"># Updated to do image augmentation</span></span><br><span class="line">train_datagen = ImageDataGenerator(</span><br><span class="line">      rescale=<span class="number">1.</span>/<span class="number">255</span>,</span><br><span class="line">      rotation_range=<span class="number">40</span>,</span><br><span class="line">      width_shift_range=<span class="number">0.2</span>,</span><br><span class="line">      height_shift_range=<span class="number">0.2</span>,</span><br><span class="line">      shear_range=<span class="number">0.2</span>,</span><br><span class="line">      zoom_range=<span class="number">0.2</span>,</span><br><span class="line">      horizontal_flip=<span class="keyword">True</span>,</span><br><span class="line">      fill_mode=<span class="string">'nearest'</span>)</span><br><span class="line"></span><br><span class="line">test_datagen = ImageDataGenerator(rescale=<span class="number">1.</span>/<span class="number">255</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Flow training images in batches of 20 using train_datagen generator</span></span><br><span class="line">train_generator = train_datagen.flow_from_directory(</span><br><span class="line">        train_dir,  <span class="comment"># This is the source directory for training images</span></span><br><span class="line">        target_size=(<span class="number">150</span>, <span class="number">150</span>),  <span class="comment"># All images will be resized to 150x150</span></span><br><span class="line">        batch_size=<span class="number">20</span>,</span><br><span class="line">        <span class="comment"># Since we use binary_crossentropy loss, we need binary labels</span></span><br><span class="line">        class_mode=<span class="string">'binary'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Flow validation images in batches of 20 using test_datagen generator</span></span><br><span class="line">validation_generator = test_datagen.flow_from_directory(</span><br><span class="line">        validation_dir,</span><br><span class="line">        target_size=(<span class="number">150</span>, <span class="number">150</span>),</span><br><span class="line">        batch_size=<span class="number">20</span>,</span><br><span class="line">        class_mode=<span class="string">'binary'</span>)</span><br><span class="line"></span><br><span class="line">history = model.fit_generator(</span><br><span class="line">      train_generator,</span><br><span class="line">      steps_per_epoch=<span class="number">100</span>,  <span class="comment"># 2000 images = batch_size * steps</span></span><br><span class="line">      epochs=<span class="number">100</span>,</span><br><span class="line">      validation_data=validation_generator,</span><br><span class="line">      validation_steps=<span class="number">50</span>,  <span class="comment"># 1000 images = batch_size * steps</span></span><br><span class="line">      verbose=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<pre><code>--2019-02-12 07:59:45--  https://storage.googleapis.com/mledu-datasets/cats_and_dogs_filtered.zip
Resolving storage.googleapis.com... 2607:f8b0:4001:c1c::80, 173.194.197.128
Connecting to storage.googleapis.com|2607:f8b0:4001:c1c::80|:443... connected.
WARNING: cannot verify storage.googleapis.com&#39;s certificate, issued by &#39;CN=Google Internet Authority G3,O=Google Trust Services,C=US&#39;:
  Unable to locally verify the issuer&#39;s authority.
HTTP request sent, awaiting response... 200 OK
Length: 68606236 (65M) [application/zip]
Saving to: &#39;/tmp/cats_and_dogs_filtered.zip&#39;

/tmp/cats_and_dogs_ 100%[=====================&gt;]  65.43M   243MB/s   in 0.3s   

2019-02-12 07:59:46 (243 MB/s) - &#39;/tmp/cats_and_dogs_filtered.zip&#39; saved [68606236/68606236]

Found 2000 images belonging to 2 classes.
Found 1000 images belonging to 2 classes.
Epoch 1/100
100/100 - 14s - loss: 0.6931 - acc: 0.5350 - val_loss: 0.6907 - val_acc: 0.5080
Epoch 2/100
100/100 - 14s - loss: 0.6855 - acc: 0.5400 - val_loss: 0.6660 - val_acc: 0.6200
Epoch 3/100
100/100 - 13s - loss: 0.6702 - acc: 0.5810 - val_loss: 0.6665 - val_acc: 0.5650
Epoch 4/100
100/100 - 13s - loss: 0.6541 - acc: 0.6000 - val_loss: 0.6342 - val_acc: 0.6300
Epoch 5/100
100/100 - 14s - loss: 0.6415 - acc: 0.6180 - val_loss: 0.6457 - val_acc: 0.5920
Epoch 6/100
100/100 - 13s - loss: 0.6248 - acc: 0.6495 - val_loss: 0.5875 - val_acc: 0.6840
Epoch 7/100
100/100 - 13s - loss: 0.6115 - acc: 0.6575 - val_loss: 0.5864 - val_acc: 0.6810
Epoch 8/100
100/100 - 13s - loss: 0.6010 - acc: 0.6780 - val_loss: 0.5550 - val_acc: 0.7130
Epoch 9/100
100/100 - 14s - loss: 0.5972 - acc: 0.6670 - val_loss: 0.5640 - val_acc: 0.7020
Epoch 10/100
100/100 - 14s - loss: 0.5877 - acc: 0.6920 - val_loss: 0.5830 - val_acc: 0.6900
Epoch 11/100
100/100 - 14s - loss: 0.5761 - acc: 0.7055 - val_loss: 0.5663 - val_acc: 0.7030
Epoch 12/100
100/100 - 14s - loss: 0.5708 - acc: 0.7100 - val_loss: 0.5662 - val_acc: 0.7030
Epoch 13/100
100/100 - 14s - loss: 0.5810 - acc: 0.6935 - val_loss: 0.5600 - val_acc: 0.6980
Epoch 14/100
100/100 - 14s - loss: 0.5734 - acc: 0.7025 - val_loss: 0.5253 - val_acc: 0.7220
Epoch 15/100
100/100 - 13s - loss: 0.5616 - acc: 0.7150 - val_loss: 0.6329 - val_acc: 0.6470
Epoch 16/100
100/100 - 14s - loss: 0.5487 - acc: 0.7150 - val_loss: 0.5577 - val_acc: 0.7160
Epoch 17/100
100/100 - 13s - loss: 0.5575 - acc: 0.7180 - val_loss: 0.5160 - val_acc: 0.7390
Epoch 18/100
100/100 - 13s - loss: 0.5481 - acc: 0.7250 - val_loss: 0.5057 - val_acc: 0.7360
Epoch 19/100
100/100 - 14s - loss: 0.5398 - acc: 0.7285 - val_loss: 0.5052 - val_acc: 0.7320
Epoch 20/100
100/100 - 13s - loss: 0.5448 - acc: 0.7240 - val_loss: 0.4988 - val_acc: 0.7560
Epoch 21/100
100/100 - 13s - loss: 0.5321 - acc: 0.7345 - val_loss: 0.5014 - val_acc: 0.7500
Epoch 22/100
100/100 - 13s - loss: 0.5379 - acc: 0.7295 - val_loss: 0.4910 - val_acc: 0.7500
Epoch 23/100
100/100 - 13s - loss: 0.5211 - acc: 0.7395 - val_loss: 0.4985 - val_acc: 0.7400
Epoch 24/100
100/100 - 14s - loss: 0.5236 - acc: 0.7420 - val_loss: 0.5055 - val_acc: 0.7410
Epoch 25/100
100/100 - 13s - loss: 0.5206 - acc: 0.7360 - val_loss: 0.4907 - val_acc: 0.7550
Epoch 26/100
100/100 - 14s - loss: 0.5234 - acc: 0.7310 - val_loss: 0.4880 - val_acc: 0.7430
Epoch 27/100
100/100 - 13s - loss: 0.5126 - acc: 0.7470 - val_loss: 0.4863 - val_acc: 0.7510
Epoch 28/100
100/100 - 13s - loss: 0.5086 - acc: 0.7545 - val_loss: 0.5446 - val_acc: 0.7160
Epoch 29/100
100/100 - 13s - loss: 0.5237 - acc: 0.7330 - val_loss: 0.5041 - val_acc: 0.7470
Epoch 30/100
100/100 - 13s - loss: 0.5077 - acc: 0.7475 - val_loss: 0.4819 - val_acc: 0.7510
Epoch 31/100
100/100 - 13s - loss: 0.5134 - acc: 0.7425 - val_loss: 0.4766 - val_acc: 0.7480
Epoch 32/100
100/100 - 13s - loss: 0.5066 - acc: 0.7535 - val_loss: 0.5445 - val_acc: 0.7220
Epoch 33/100
100/100 - 13s - loss: 0.5005 - acc: 0.7535 - val_loss: 0.4800 - val_acc: 0.7490
Epoch 34/100
100/100 - 13s - loss: 0.5027 - acc: 0.7625 - val_loss: 0.4992 - val_acc: 0.7570
Epoch 35/100
100/100 - 13s - loss: 0.5069 - acc: 0.7565 - val_loss: 0.5262 - val_acc: 0.7460
Epoch 36/100
100/100 - 13s - loss: 0.5000 - acc: 0.7560 - val_loss: 0.4814 - val_acc: 0.7500
Epoch 37/100
100/100 - 13s - loss: 0.4965 - acc: 0.7595 - val_loss: 0.4773 - val_acc: 0.7650
Epoch 38/100
100/100 - 13s - loss: 0.4830 - acc: 0.7665 - val_loss: 0.4946 - val_acc: 0.7370
Epoch 39/100
100/100 - 13s - loss: 0.4884 - acc: 0.7635 - val_loss: 0.4844 - val_acc: 0.7500
Epoch 40/100
100/100 - 13s - loss: 0.4742 - acc: 0.7745 - val_loss: 0.4790 - val_acc: 0.7500
Epoch 41/100
100/100 - 13s - loss: 0.4752 - acc: 0.7760 - val_loss: 0.4774 - val_acc: 0.7550
Epoch 42/100
100/100 - 13s - loss: 0.4743 - acc: 0.7655 - val_loss: 0.4838 - val_acc: 0.7700
Epoch 43/100
100/100 - 13s - loss: 0.4805 - acc: 0.7725 - val_loss: 0.4712 - val_acc: 0.7780
Epoch 44/100
100/100 - 13s - loss: 0.4706 - acc: 0.7790 - val_loss: 0.4564 - val_acc: 0.7840
Epoch 45/100
100/100 - 13s - loss: 0.4730 - acc: 0.7785 - val_loss: 0.4546 - val_acc: 0.7890
Epoch 46/100
100/100 - 13s - loss: 0.4762 - acc: 0.7835 - val_loss: 0.4599 - val_acc: 0.7570
Epoch 47/100
100/100 - 13s - loss: 0.4656 - acc: 0.7785 - val_loss: 0.4936 - val_acc: 0.7450
Epoch 48/100
100/100 - 13s - loss: 0.4719 - acc: 0.7685 - val_loss: 0.4557 - val_acc: 0.7910
Epoch 49/100
100/100 - 13s - loss: 0.4671 - acc: 0.7755 - val_loss: 0.4599 - val_acc: 0.7930
Epoch 50/100
100/100 - 13s - loss: 0.4559 - acc: 0.7815 - val_loss: 0.4702 - val_acc: 0.7620
Epoch 51/100
100/100 - 13s - loss: 0.4663 - acc: 0.7725 - val_loss: 0.5053 - val_acc: 0.7500
Epoch 52/100
100/100 - 13s - loss: 0.4641 - acc: 0.7715 - val_loss: 0.4698 - val_acc: 0.7700
Epoch 53/100
100/100 - 13s - loss: 0.4549 - acc: 0.7900 - val_loss: 0.4361 - val_acc: 0.7950
Epoch 54/100
100/100 - 13s - loss: 0.4506 - acc: 0.7835 - val_loss: 0.4389 - val_acc: 0.8000
Epoch 55/100
100/100 - 13s - loss: 0.4462 - acc: 0.7890 - val_loss: 0.4503 - val_acc: 0.7730
Epoch 56/100
100/100 - 13s - loss: 0.4399 - acc: 0.7975 - val_loss: 0.4550 - val_acc: 0.7860
Epoch 57/100
100/100 - 13s - loss: 0.4473 - acc: 0.7905 - val_loss: 0.4416 - val_acc: 0.7980
Epoch 58/100
100/100 - 13s - loss: 0.4471 - acc: 0.7880 - val_loss: 0.4301 - val_acc: 0.8070
Epoch 59/100
100/100 - 13s - loss: 0.4310 - acc: 0.8005 - val_loss: 0.4300 - val_acc: 0.7980
Epoch 60/100
100/100 - 13s - loss: 0.4435 - acc: 0.7960 - val_loss: 0.4549 - val_acc: 0.7950
Epoch 61/100
100/100 - 13s - loss: 0.4436 - acc: 0.7910 - val_loss: 0.4562 - val_acc: 0.7710
Epoch 62/100
100/100 - 13s - loss: 0.4402 - acc: 0.7975 - val_loss: 0.4704 - val_acc: 0.7740
Epoch 63/100
100/100 - 13s - loss: 0.4225 - acc: 0.8125 - val_loss: 0.4337 - val_acc: 0.8020
Epoch 64/100
100/100 - 13s - loss: 0.4312 - acc: 0.7975 - val_loss: 0.4532 - val_acc: 0.7800
Epoch 65/100
100/100 - 13s - loss: 0.4314 - acc: 0.8000 - val_loss: 0.4433 - val_acc: 0.7990
Epoch 66/100
100/100 - 12s - loss: 0.4273 - acc: 0.8055 - val_loss: 0.4204 - val_acc: 0.8030
Epoch 67/100
100/100 - 12s - loss: 0.4427 - acc: 0.7950 - val_loss: 0.4254 - val_acc: 0.8040
Epoch 68/100
100/100 - 12s - loss: 0.4229 - acc: 0.8055 - val_loss: 0.4383 - val_acc: 0.7950
Epoch 69/100
100/100 - 12s - loss: 0.4116 - acc: 0.8150 - val_loss: 0.4749 - val_acc: 0.7670
Epoch 70/100
100/100 - 13s - loss: 0.4167 - acc: 0.8125 - val_loss: 0.4388 - val_acc: 0.7950
Epoch 71/100
100/100 - 13s - loss: 0.4216 - acc: 0.8015 - val_loss: 0.4123 - val_acc: 0.8240
Epoch 72/100
100/100 - 13s - loss: 0.4165 - acc: 0.8075 - val_loss: 0.4087 - val_acc: 0.8060
Epoch 73/100
100/100 - 13s - loss: 0.4048 - acc: 0.8105 - val_loss: 0.4676 - val_acc: 0.7890
Epoch 74/100
100/100 - 13s - loss: 0.4071 - acc: 0.8185 - val_loss: 0.4029 - val_acc: 0.8140
Epoch 75/100
100/100 - 13s - loss: 0.4111 - acc: 0.8205 - val_loss: 0.4629 - val_acc: 0.7800
Epoch 76/100
100/100 - 13s - loss: 0.4103 - acc: 0.8145 - val_loss: 0.4440 - val_acc: 0.8040
Epoch 77/100
100/100 - 13s - loss: 0.4101 - acc: 0.8110 - val_loss: 0.4412 - val_acc: 0.7920
Epoch 78/100
100/100 - 13s - loss: 0.4050 - acc: 0.8095 - val_loss: 0.4516 - val_acc: 0.7890
Epoch 79/100
100/100 - 13s - loss: 0.4211 - acc: 0.8060 - val_loss: 0.4109 - val_acc: 0.8020
Epoch 80/100
100/100 - 13s - loss: 0.4120 - acc: 0.8070 - val_loss: 0.3999 - val_acc: 0.8190
Epoch 81/100
100/100 - 13s - loss: 0.4064 - acc: 0.8215 - val_loss: 0.4246 - val_acc: 0.8010
Epoch 82/100
100/100 - 13s - loss: 0.4150 - acc: 0.8100 - val_loss: 0.4260 - val_acc: 0.8120
Epoch 83/100
100/100 - 13s - loss: 0.3988 - acc: 0.8195 - val_loss: 0.4198 - val_acc: 0.8090
Epoch 84/100
100/100 - 13s - loss: 0.3964 - acc: 0.8265 - val_loss: 0.4204 - val_acc: 0.8080
Epoch 85/100
100/100 - 13s - loss: 0.3946 - acc: 0.8200 - val_loss: 0.4179 - val_acc: 0.8060
Epoch 86/100
100/100 - 13s - loss: 0.4067 - acc: 0.8170 - val_loss: 0.4001 - val_acc: 0.8210
Epoch 87/100
100/100 - 13s - loss: 0.4072 - acc: 0.8135 - val_loss: 0.4360 - val_acc: 0.8010
Epoch 88/100
100/100 - 13s - loss: 0.4049 - acc: 0.8090 - val_loss: 0.4009 - val_acc: 0.8220
Epoch 89/100
100/100 - 13s - loss: 0.3992 - acc: 0.8170 - val_loss: 0.4432 - val_acc: 0.7840
Epoch 90/100
100/100 - 13s - loss: 0.3868 - acc: 0.8280 - val_loss: 0.4135 - val_acc: 0.8140
Epoch 91/100
100/100 - 13s - loss: 0.3855 - acc: 0.8310 - val_loss: 0.4134 - val_acc: 0.8100
Epoch 92/100
100/100 - 13s - loss: 0.3789 - acc: 0.8340 - val_loss: 0.4227 - val_acc: 0.8170
Epoch 93/100
100/100 - 13s - loss: 0.3828 - acc: 0.8295 - val_loss: 0.4429 - val_acc: 0.8120
Epoch 94/100
100/100 - 13s - loss: 0.3903 - acc: 0.8260 - val_loss: 0.4364 - val_acc: 0.8030
Epoch 95/100
100/100 - 13s - loss: 0.3718 - acc: 0.8385 - val_loss: 0.4082 - val_acc: 0.8280
Epoch 96/100
100/100 - 13s - loss: 0.3831 - acc: 0.8305 - val_loss: 0.3946 - val_acc: 0.8240
Epoch 97/100
100/100 - 13s - loss: 0.3824 - acc: 0.8270 - val_loss: 0.4335 - val_acc: 0.8160
Epoch 98/100
100/100 - 13s - loss: 0.3835 - acc: 0.8330 - val_loss: 0.3861 - val_acc: 0.8320
Epoch 99/100
100/100 - 13s - loss: 0.3789 - acc: 0.8330 - val_loss: 0.4047 - val_acc: 0.8250
Epoch 100/100
100/100 - 13s - loss: 0.3822 - acc: 0.8275 - val_loss: 0.3997 - val_acc: 0.8260
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">acc = history.history[<span class="string">'acc'</span>]</span><br><span class="line">val_acc = history.history[<span class="string">'val_acc'</span>]</span><br><span class="line">loss = history.history[<span class="string">'loss'</span>]</span><br><span class="line">val_loss = history.history[<span class="string">'val_loss'</span>]</span><br><span class="line"></span><br><span class="line">epochs = range(len(acc))</span><br><span class="line"></span><br><span class="line">plt.plot(epochs, acc, <span class="string">'bo'</span>, label=<span class="string">'Training accuracy'</span>)</span><br><span class="line">plt.plot(epochs, val_acc, <span class="string">'b'</span>, label=<span class="string">'Validation accuracy'</span>)</span><br><span class="line">plt.title(<span class="string">'Training and validation accuracy'</span>)</span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line"></span><br><span class="line">plt.plot(epochs, loss, <span class="string">'bo'</span>, label=<span class="string">'Training Loss'</span>)</span><br><span class="line">plt.plot(epochs, val_loss, <span class="string">'b'</span>, label=<span class="string">'Validation Loss'</span>)</span><br><span class="line">plt.title(<span class="string">'Training and validation loss'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="output_7_0.png" alt="png"></p>
<p><img src="output_7_1.png" alt="png"></p>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Project</tag>
        <tag>Computer Vision</tag>
        <tag>Convolutional Neural Networks</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Multiprocessing</title>
    <url>/Python-Multiprocessing/2019/05/30/</url>
    <content><![CDATA[<h2 id="Multiprocessing-Pool中-apply-apply-async-map-map-async的区别"><a href="#Multiprocessing-Pool中-apply-apply-async-map-map-async的区别" class="headerlink" title="Multiprocessing.Pool中 apply, apply_async, map, map_async的区别"></a>Multiprocessing.Pool中 apply, apply_async, map, map_async的区别</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">Multi-args</td>
<td style="text-align:left">Concurrence</td>
<td style="text-align:left">Blocking</td>
<td style="text-align:left">Ordered-results</td>
</tr>
<tr>
<td style="text-align:left">map</td>
<td style="text-align:left">no</td>
<td style="text-align:left">yes</td>
<td style="text-align:left">yes</td>
<td style="text-align:left">yes</td>
</tr>
<tr>
<td style="text-align:left">apply</td>
<td style="text-align:left">yes</td>
<td style="text-align:left">no</td>
<td style="text-align:left">yes</td>
<td style="text-align:left">no</td>
</tr>
<tr>
<td style="text-align:left">map_async</td>
<td style="text-align:left">no</td>
<td style="text-align:left">yes</td>
<td style="text-align:left">no</td>
<td style="text-align:left">yes</td>
</tr>
<tr>
<td style="text-align:left">apply_async</td>
<td style="text-align:left">yes</td>
<td style="text-align:left">yes</td>
<td style="text-align:left">no</td>
<td style="text-align:left">no</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>apply 与 apply_async相比，apply是阻塞的，通常不在使用。apply_async方法还有一个回调callback，如果提供，则在函数完成时调用。callback是可调用对象，接收输入参数。当func的结果变为可用时，将理解传递给callback。callback禁止执行任何阻塞操作，否则将接收其他异步操作中的结果。</li>
<li>map 与 map_async 相比，map_async 不会阻塞主线程。</li>
<li>map 和 map_async 返回结果是根据参数的顺序有序，apply 与 apply_async 无序<br>from multiprocessing import Pool<br>import time</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line">result = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mycallback</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> result.append(x)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span><span class="params">(num)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    e1 = time.time()</span><br><span class="line">    pool = Pool()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        pool.apply_async(worker, args = (i, ),callback = mycallback)   </span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    e2 = time.time()</span><br><span class="line">    print(float(e2 - e1)) <span class="comment"># 2.07s</span></span><br><span class="line"> </span><br><span class="line">    print(result)  <span class="comment"># [2, 4, 3, 0, 1, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span><span class="params">(num)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    e1 = time.time()</span><br><span class="line">    pool = Pool()</span><br><span class="line"> </span><br><span class="line">    result = pool.map(worker, [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)])</span><br><span class="line"></span><br><span class="line">    e2 = time.time()</span><br><span class="line">    print(float(e2 - e1))</span><br><span class="line"></span><br><span class="line">    print(result) <span class="comment">#[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line">result = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mycallback</span><span class="params">(x)</span>:</span></span><br><span class="line">    result.append(x)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span><span class="params">(num)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    e1 = time.time()</span><br><span class="line">    pool = Pool(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    pool.map_async(worker, [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)], callback = mycallback)   </span><br><span class="line"></span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line"></span><br><span class="line">    e2 = time.time()</span><br><span class="line">    print(float(e2 - e1)) <span class="comment"># 2.07s</span></span><br><span class="line"> </span><br><span class="line">    print(result)  <span class="comment"># [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]</span></span><br></pre></td></tr></table></figure>
<h2 id="多进程写入同一个文件时，为了避免写入顺序混乱，有如下几种解决办法。"><a href="#多进程写入同一个文件时，为了避免写入顺序混乱，有如下几种解决办法。" class="headerlink" title="多进程写入同一个文件时，为了避免写入顺序混乱，有如下几种解决办法。"></a>多进程写入同一个文件时，为了避免写入顺序混乱，有如下几种解决办法。</h2><p><strong>对写入操作进行加锁</strong>  对当前进行写入操作的进程锁定，直到该进程写完十个字，也就是一个完成的操作，后解除该进程的锁定，放它离开。切换到另外一个进程来操作。因为一次只能一个进程执行写入操作，而且必须执行完成完整的操作，才允许切换。所以不会造成文件内容的混乱。但是加锁一般会完造成程序的执行效率下降。而且，如果写入操作分散在整个代码的多处，lock作为一个不可直接打包的资源是没有办法作为一个参数直接给Pool的map方法里的函数传参的。为了解决这个问题，有两种解决方法，一种是使用多进程的管理器Manager()，并使用偏函数的办法传递对象Manager.Lock()。第二种是在进程池创建时传递multiprocessing.Lock()对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool,Lock,Manager</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span><span class="params">(lock,x)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    lock.acquire()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'result.txt'</span>, <span class="string">'a+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.writelines(str(x))</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        lock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    e1 = time.time()</span><br><span class="line">    pool = Pool(<span class="number">4</span>)</span><br><span class="line">    manager = Manager()</span><br><span class="line">    lock = manager.Lock()</span><br><span class="line"></span><br><span class="line">    partial_worker = partial(worker, lock)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># for i in range(10):</span></span><br><span class="line">    <span class="comment">#     pool.apply_async(partial_worker, (i,))</span></span><br><span class="line">    pool.map(partial_worker, [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)])</span><br><span class="line"> </span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    e2 = time.time()</span><br><span class="line">    print(float(e2 - e1))</span><br></pre></td></tr></table></figure>
<p><strong>通过initializer参数在Pool对象创建时传递Lock对象</strong>。这种方式将Lock对象变为了所有子进程的全局对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_request</span><span class="params">(data)</span>:</span></span><br><span class="line">    api_url = <span class="string">'http://api.xxxx.com/?data=%s'</span></span><br><span class="line">    start_time = clock()</span><br><span class="line">    <span class="keyword">print</span> urllib2.urlopen(api_url % data).read()</span><br><span class="line">    end_time = clock()</span><br><span class="line">    lock.acquire()</span><br><span class="line">    whit open(<span class="string">'request.log'</span>, <span class="string">'a+'</span>) <span class="keyword">as</span> logs:</span><br><span class="line">        logs.write(<span class="string">'request %s cost: %s\n'</span> % (data, end_time - start_time))</span><br><span class="line">    lock.release()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">(l)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> lock</span><br><span class="line">    lock = l</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    data_list = [<span class="string">'data1'</span>, <span class="string">'data2'</span>, <span class="string">'data3'</span>]</span><br><span class="line">    lock = Lock()</span><br><span class="line">    pool = Pool(<span class="number">8</span>, initializer=init, initargs=(lock,))</span><br><span class="line">    pool.map(send_request, data_list)</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br></pre></td></tr></table></figure>
<p><strong>更优雅的方法，使用multiprocessing的回调函数。</strong></p>
<ul>
<li>把写入操作抽象为单独的一个函数</li>
<li>把进程需要写入的内容，作为返回值返回</li>
<li>使用回调函数写入进程返回内容。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mycallback</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'result.txt'</span>, <span class="string">'a+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.writelines(str(x))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span><span class="params">(num)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    e1 = time.time()</span><br><span class="line">    pool = Pool()</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        pool.apply_async(worker, (i,), callback=mycallback)</span><br><span class="line"> </span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    e2 = time.time()</span><br><span class="line">    print(float(e2 - e1))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Big Data Architecture</category>
        <category>Parallel Computation</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Debris 20190530</title>
    <url>/Debris-20190530/2019/05/30/</url>
    <content><![CDATA[<h2 id="Problem-fixed"><a href="#Problem-fixed" class="headerlink" title="Problem fixed"></a>Problem fixed</h2><h3 id="Conda-修改-channel"><a href="#Conda-修改-channel" class="headerlink" title="Conda 修改 channel"></a>Conda 修改 channel</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nano ~/.condrc</span><br><span class="line"><span class="built_in">source</span> ~/.condrc</span><br><span class="line">conda config --add channels xxxx</span><br><span class="line">conda config --remove channels xxxx</span><br><span class="line"></span><br><span class="line"><span class="comment">## example: conda config --remove channels 'intel'</span></span><br></pre></td></tr></table></figure>
<h3 id="Conda-保存于环境保存与重建"><a href="#Conda-保存于环境保存与重建" class="headerlink" title="Conda 保存于环境保存与重建"></a>Conda 保存于环境保存与重建</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda env <span class="built_in">export</span> &gt; environment.yaml</span><br><span class="line">pip freeze &gt; requirement.txt</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda env create -f environment.yaml</span><br></pre></td></tr></table></figure>
<h3 id="SSH-SCP穿越跳板机"><a href="#SSH-SCP穿越跳板机" class="headerlink" title="SSH,SCP穿越跳板机"></a>SSH,SCP穿越跳板机</h3><ol>
<li><p>直接编辑 <code>~/.ssh/config</code> 文件, 增加ProxyCommand选项</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Host gateway</span><br><span class="line">  HostName gatewayhost</span><br><span class="line">  User gateway_user</span><br><span class="line"></span><br><span class="line">Host target.machine   <span class="comment">#主机别名，也可写成目标服务器IP，可使用通配符，如：Host 10.208.*</span></span><br><span class="line">    HostName      target.machine     <span class="comment">#目标机域名或IP地址</span></span><br><span class="line">    User          targetuser         <span class="comment">#SSH用户名</span></span><br><span class="line">    Port          22                 <span class="comment">#SSH端口</span></span><br><span class="line">    ProxyCommand ssh -q -W %h:%p gateway</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa  <span class="comment">#登陆跳板机的私钥所在位置，如默认位置可不用显示指定</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>用ssh-keygen在本机生成private key and public key</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen <span class="comment">## in local host</span></span><br></pre></td></tr></table></figure>
<ol>
<li>copy the public key to authorized_keys in <strong>gateway</strong> and <strong>target.machine</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub  <span class="comment">## in local host</span></span><br><span class="line"></span><br><span class="line">nano ~/.ssh/authorized_keys  <span class="comment">## in gateway and target.machine, add the content got above</span></span><br></pre></td></tr></table></figure>
<ol>
<li><p>现在，只需要通过下面这样简单的语句登陆远程计算机：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh target.machine</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>还可以直接SCP过去，跳板机完全透明：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp ToCopy.txt target.machine:~</span><br></pre></td></tr></table></figure></p>
<ol>
<li>使用 command</li>
</ol>
<ul>
<li><p>直接跳到远程计算机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -o ProxyCommand=<span class="string">"ssh -q -W %h:%p user@jumphost"</span> lmx@target.machine</span><br></pre></td></tr></table></figure>
</li>
<li><p>拷贝文件到远程计算机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp -o ProxyCommand=<span class="string">"ssh -q  -W %h:%p user@jumphost"</span> lmx@target.machine:~/rdsAgent .</span><br></pre></td></tr></table></figure>
</li>
<li><p>在远程计算机执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -o <span class="string">"ProxyCommand ssh -q  -W %h:%p user@jumphost"</span> lmx@target.machine <span class="string">'ip a'</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="本地配置多个-ssh-key"><a href="#本地配置多个-ssh-key" class="headerlink" title="本地配置多个 ssh key"></a>本地配置多个 ssh key</h2><ol>
<li><p>为github 生成 ssh key</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"your_mail@example.com"</span> -f github_rsa</span><br></pre></td></tr></table></figure>
</li>
<li><p>为gitlab 生成 ssh key </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"your_mail@example.com"</span> -f gitlab_rsa</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改.ssh/config </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># github.com</span></span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/github_rsa</span><br><span class="line"></span><br><span class="line"><span class="comment"># gitlab.company.com</span></span><br><span class="line">Host gitlab.company.com</span><br><span class="line">HostName gitlab.company.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/company_rsa</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果需要代理，给github设置proxy</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy <span class="string">'socks5://127.0.0.1:1080'</span></span><br><span class="line">git config --global https.proxy <span class="string">'socks5://127.0.0.1:1080'</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// edit ~/.ssh/config   add the lines blow</span><br><span class="line">host github.com</span><br><span class="line">    hostname ssh.github.com</span><br><span class="line">    user git</span><br><span class="line">    port 443</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_zrc</span><br><span class="line">    proxycommand socat - PROXY:&lt;Ip&gt;:%h:%p,proxyport=&lt;Port&gt;</span><br></pre></td></tr></table></figure>
<ol>
<li>Test <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Skills"><a href="#Skills" class="headerlink" title="Skills"></a>Skills</h2><h3 id="对象的深浅拷贝"><a href="#对象的深浅拷贝" class="headerlink" title="对象的深浅拷贝"></a>对象的深浅拷贝</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tmp = []</span><br><span class="line">all_pos = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    tmp.append(i)</span><br><span class="line">    <span class="keyword">if</span> len(tmp) % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">        all_pos.append(tmp)</span><br><span class="line">        <span class="comment">#print(id(tmp) == id(all_pos[-1]))   # True</span></span><br><span class="line">        tmp[:] = []  <span class="comment">## 清空当前对象</span></span><br><span class="line">print(all_pos) <span class="comment"># [[],[],[]]</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tmp = []</span><br><span class="line">all_pos = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    tmp.append(i)</span><br><span class="line">    <span class="keyword">if</span> len(tmp) % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">        all_pos.append(tmp)</span><br><span class="line">        <span class="comment">#print(id(tmp) == id(all_pos[-1]))   # True</span></span><br><span class="line">        tmp = []  <span class="comment">## 生成新的对象</span></span><br><span class="line">print(all_pos) <span class="comment"># [[ 1,2,3...],[11,12,...],]</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Debris</category>
      </categories>
  </entry>
  <entry>
    <title>Using more sophisticated images with Convolutional Neural Networks</title>
    <url>/Using-more-sophisticated-images-with-Convolutional-Neural-Networks/2019/05/30/</url>
    <content><![CDATA[<h1 id="Using-more-sophisticated-images-with-Convolutional-Neural-Networks"><a href="#Using-more-sophisticated-images-with-Convolutional-Neural-Networks" class="headerlink" title="Using more sophisticated images with Convolutional Neural Networks"></a>Using more sophisticated images with Convolutional Neural Networks</h1><p>In the previous lesson you saw how to use a CNN to make your recognition of the handwriting digits more efficient. In this lesson you’ll take that to the next level, recognizing real images of Cats and Dogs in order to classify an incoming image as one or the other. In particular the handwriting recognition made your life a little easier by having all the images be the same size and shape, and they were all monochrome color. Real-world images aren’t like that — they’re in different shapes, aspect ratios etc, and they’re usually in color!</p>
<p>So, as part of the task you need to process your data — not least resizing it to be uniform in shape. </p>
<p>You’ll follow these steps:</p>
<ol>
<li>Explore the Example Data of Cats and Dogs</li>
<li>Build and Train a Neural Network to recognize the difference between the two</li>
<li>Evaluate the Training and Validation accuracy</li>
</ol>
<h2 id="Explore-the-Example-Data"><a href="#Explore-the-Example-Data" class="headerlink" title="Explore the Example Data"></a>Explore the Example Data</h2><p>Let’s start by downloading our example data, a .zip of 2,000 JPG pictures of cats and dogs, and extracting it locally in <code>/tmp</code>.</p>
<p><strong>NOTE:</strong> The 2,000 images used in this exercise are excerpted from the <a href="https://www.kaggle.com/c/dogs-vs-cats/data" target="_blank" rel="noopener">“Dogs vs. Cats” dataset</a> available on Kaggle, which contains 25,000 images. Here, we use a subset of the full dataset to decrease training time for educational purposes.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!wget --no-check-certificate \</span><br><span class="line">  https://storage.googleapis.com/mledu-datasets/cats_and_dogs_filtered.zip \</span><br><span class="line">  -O /tmp/cats_and_dogs_filtered.zip</span><br></pre></td></tr></table></figure>
<pre><code>--2019-05-29 15:45:05--  https://storage.googleapis.com/mledu-datasets/cats_and_dogs_filtered.zip
Resolving storage.googleapis.com (storage.googleapis.com)... 74.125.141.128, 2607:f8b0:400c:c06::80
Connecting to storage.googleapis.com (storage.googleapis.com)|74.125.141.128|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 68606236 (65M) [application/zip]
Saving to: ‘/tmp/cats_and_dogs_filtered.zip’

/tmp/cats_and_dogs_ 100%[===================&gt;]  65.43M   104MB/s    in 0.6s    

2019-05-29 15:45:10 (104 MB/s) - ‘/tmp/cats_and_dogs_filtered.zip’ saved [68606236/68606236]
</code></pre><p>The following python code will use the OS library to use Operating System libraries, giving you access to the file system, and the zipfile library allowing you to unzip the data. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line">local_zip = <span class="string">'/tmp/cats_and_dogs_filtered.zip'</span></span><br><span class="line"></span><br><span class="line">zip_ref = zipfile.ZipFile(local_zip, <span class="string">'r'</span>)</span><br><span class="line"></span><br><span class="line">zip_ref.extractall(<span class="string">'/tmp'</span>)</span><br><span class="line">zip_ref.close()</span><br></pre></td></tr></table></figure>
<p>The contents of the .zip are extracted to the base directory <code>/tmp/cats_and_dogs_filtered</code>, which contains <code>train</code> and <code>validation</code> subdirectories for the training and validation datasets (see the <a href="https://developers.google.com/machine-learning/crash-course/validation/check-your-intuition" target="_blank" rel="noopener">Machine Learning Crash Course</a> for a refresher on training, validation, and test sets), which in turn each contain <code>cats</code> and <code>dogs</code> subdirectories.</p>
<p>In short: The training set is the data that is used to tell the neural network model that ‘this is what a cat looks like’, ‘this is what a dog looks like’ etc. The validation data set is images of cats and dogs that the neural network will not see as part of the training, so you can test how well or how badly it does in evaluating if an image contains a cat or a dog.</p>
<p>One thing to pay attention to in this sample: We do not explicitly label the images as cats or dogs. If you remember with the handwriting example earlier, we had labelled ‘this is a 1’, ‘this is a 7’ etc.  Later you’ll see something called an ImageGenerator being used — and this is coded to read images from subdirectories, and automatically label them from the name of that subdirectory. So, for example, you will have a ‘training’ directory containing a ‘cats’ directory and a ‘dogs’ one. ImageGenerator will label the images appropriately for you, reducing a coding step. </p>
<p>Let’s define each of these directories:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">base_dir = <span class="string">'/tmp/cats_and_dogs_filtered'</span></span><br><span class="line"></span><br><span class="line">train_dir = os.path.join(base_dir, <span class="string">'train'</span>)</span><br><span class="line">validation_dir = os.path.join(base_dir, <span class="string">'validation'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory with our training cat/dog pictures</span></span><br><span class="line">train_cats_dir = os.path.join(train_dir, <span class="string">'cats'</span>)</span><br><span class="line">train_dogs_dir = os.path.join(train_dir, <span class="string">'dogs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory with our validation cat/dog pictures</span></span><br><span class="line">validation_cats_dir = os.path.join(validation_dir, <span class="string">'cats'</span>)</span><br><span class="line">validation_dogs_dir = os.path.join(validation_dir, <span class="string">'dogs'</span>)</span><br></pre></td></tr></table></figure>
<p>Now, let’s see what the filenames look like in the <code>cats</code> and <code>dogs</code> <code>train</code> directories (file naming conventions are the same in the <code>validation</code> directory):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_cat_fnames = os.listdir( train_cats_dir )</span><br><span class="line">train_dog_fnames = os.listdir( train_dogs_dir )</span><br><span class="line"></span><br><span class="line">print(train_cat_fnames[:<span class="number">10</span>])</span><br><span class="line">print(train_dog_fnames[:<span class="number">10</span>])</span><br></pre></td></tr></table></figure>
<pre><code>[&#39;cat.684.jpg&#39;, &#39;cat.182.jpg&#39;, &#39;cat.56.jpg&#39;, &#39;cat.993.jpg&#39;, &#39;cat.700.jpg&#39;, &#39;cat.135.jpg&#39;, &#39;cat.587.jpg&#39;, &#39;cat.536.jpg&#39;, &#39;cat.55.jpg&#39;, &#39;cat.273.jpg&#39;]
[&#39;dog.55.jpg&#39;, &#39;dog.235.jpg&#39;, &#39;dog.454.jpg&#39;, &#39;dog.211.jpg&#39;, &#39;dog.207.jpg&#39;, &#39;dog.117.jpg&#39;, &#39;dog.869.jpg&#39;, &#39;dog.238.jpg&#39;, &#39;dog.254.jpg&#39;, &#39;dog.190.jpg&#39;]
</code></pre><p>Let’s find out the total number of cat and dog images in the <code>train</code> and <code>validation</code> directories:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'total training cat images :'</span>, len(os.listdir(      train_cats_dir ) ))</span><br><span class="line">print(<span class="string">'total training dog images :'</span>, len(os.listdir(      train_dogs_dir ) ))</span><br><span class="line"></span><br><span class="line">print(<span class="string">'total validation cat images :'</span>, len(os.listdir( validation_cats_dir ) ))</span><br><span class="line">print(<span class="string">'total validation dog images :'</span>, len(os.listdir( validation_dogs_dir ) ))</span><br></pre></td></tr></table></figure>
<pre><code>total training cat images : 1000
total training dog images : 1000
total validation cat images : 500
total validation dog images : 500
</code></pre><p>For both cats and dogs, we have 1,000 training images and 500 validation images.</p>
<p>Now let’s take a look at a few pictures to get a better sense of what the cat and dog datasets look like. First, configure the matplot parameters:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.image <span class="keyword">as</span> mpimg</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># Parameters for our graph; we'll output images in a 4x4 configuration</span></span><br><span class="line">nrows = <span class="number">4</span></span><br><span class="line">ncols = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">pic_index = <span class="number">0</span> <span class="comment"># Index for iterating over images</span></span><br></pre></td></tr></table></figure>
<p>Now, display a batch of 8 cat and 8 dog pictures. You can rerun the cell to see a fresh batch each time:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Set up matplotlib fig, and size it to fit 4x4 pics</span></span><br><span class="line">fig = plt.gcf()</span><br><span class="line">fig.set_size_inches(ncols*<span class="number">4</span>, nrows*<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">pic_index+=<span class="number">8</span></span><br><span class="line"></span><br><span class="line">next_cat_pix = [os.path.join(train_cats_dir, fname) </span><br><span class="line">                <span class="keyword">for</span> fname <span class="keyword">in</span> train_cat_fnames[ pic_index<span class="number">-8</span>:pic_index] </span><br><span class="line">               ]</span><br><span class="line"></span><br><span class="line">next_dog_pix = [os.path.join(train_dogs_dir, fname) </span><br><span class="line">                <span class="keyword">for</span> fname <span class="keyword">in</span> train_dog_fnames[ pic_index<span class="number">-8</span>:pic_index]</span><br><span class="line">               ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, img_path <span class="keyword">in</span> enumerate(next_cat_pix+next_dog_pix):</span><br><span class="line">  <span class="comment"># Set up subplot; subplot indices start at 1</span></span><br><span class="line">  sp = plt.subplot(nrows, ncols, i + <span class="number">1</span>)</span><br><span class="line">  sp.axis(<span class="string">'Off'</span>) <span class="comment"># Don't show axes (or gridlines)</span></span><br><span class="line"></span><br><span class="line">  img = mpimg.imread(img_path)</span><br><span class="line">  plt.imshow(img)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="output_16_0.png" alt="png"></p>
<p>It may not be obvious from looking at the images in this grid, but an important note here, and a significant difference from the previous lesson is that these images come in all shapes and sizes. When you did the handwriting recognition example, you had 28x28 greyscale images to work with. These are color and in a variety of shapes. Before training a Neural network with them you’ll need to tweak the images. You’ll see that in the next section.</p>
<p>Ok, now that you have an idea for what your data looks like, the next step is to define the model that will be trained to recognize cats or dogs from these images </p>
<h2 id="Building-a-Small-Model-from-Scratch-to-Get-to-72-Accuracy"><a href="#Building-a-Small-Model-from-Scratch-to-Get-to-72-Accuracy" class="headerlink" title="Building a Small Model from Scratch to Get to ~72% Accuracy"></a>Building a Small Model from Scratch to Get to ~72% Accuracy</h2><p>In the previous section you saw that the images were in a variety of shapes and sizes. In order to train a neural network to handle them you’ll need them to be in a uniform size. We’ve chosen 150x150 for this, and you’ll see the code that preprocesses the images to that shape shortly. </p>
<p>But before we continue, let’s start defining the model:</p>
<p>Step 1 will be to import tensorflow.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br></pre></td></tr></table></figure>
<p>Next we will define a Sequential layer as before, adding some convolutional layers first. Note the input shape parameter this time. In the earlier example it was 28x28x1, because the image was 28x28 in greyscale (8 bits, 1 byte for color depth). This time it is 150x150 for the size and 3 (24 bits, 3 bytes) for the color depth. </p>
<p>We then add a couple of convolutional layers as in the previous example, and flatten the final result to feed into the densely connected layers.</p>
<p>Finally we add the densely connected layers. </p>
<p>Note that because we are facing a two-class classification problem, i.e. a <em>binary classification problem</em>, we will end our network with a <a href="https://wikipedia.org/wiki/Sigmoid_function" target="_blank" rel="noopener"><em>sigmoid</em> activation</a>, so that the output of our network will be a single scalar between 0 and 1, encoding the probability that the current image is class 1 (as opposed to class 0).</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model = tf.keras.models.Sequential([</span><br><span class="line">    <span class="comment"># Note the input shape is the desired size of the image 150x150 with 3 bytes color</span></span><br><span class="line">    tf.keras.layers.Conv2D(<span class="number">16</span>, (<span class="number">3</span>,<span class="number">3</span>), activation=<span class="string">'relu'</span>, input_shape=(<span class="number">150</span>, <span class="number">150</span>, <span class="number">3</span>)),</span><br><span class="line">    tf.keras.layers.MaxPooling2D(<span class="number">2</span>,<span class="number">2</span>),</span><br><span class="line">    tf.keras.layers.Conv2D(<span class="number">32</span>, (<span class="number">3</span>,<span class="number">3</span>), activation=<span class="string">'relu'</span>),</span><br><span class="line">    tf.keras.layers.MaxPooling2D(<span class="number">2</span>,<span class="number">2</span>), </span><br><span class="line">    tf.keras.layers.Conv2D(<span class="number">64</span>, (<span class="number">3</span>,<span class="number">3</span>), activation=<span class="string">'relu'</span>), </span><br><span class="line">    tf.keras.layers.MaxPooling2D(<span class="number">2</span>,<span class="number">2</span>),</span><br><span class="line">    <span class="comment"># Flatten the results to feed into a DNN</span></span><br><span class="line">    tf.keras.layers.Flatten(), </span><br><span class="line">    <span class="comment"># 512 neuron hidden layer</span></span><br><span class="line">    tf.keras.layers.Dense(<span class="number">512</span>, activation=<span class="string">'relu'</span>), </span><br><span class="line">    <span class="comment"># Only 1 output neuron. It will contain a value from 0-1 where 0 for 1 class ('cats') and 1 for the other ('dogs')</span></span><br><span class="line">    tf.keras.layers.Dense(<span class="number">1</span>, activation=<span class="string">'sigmoid'</span>)  </span><br><span class="line">])</span><br></pre></td></tr></table></figure>
<pre><code>WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/resource_variable_ops.py:435: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.
Instructions for updating:
Colocations handled automatically by placer.
</code></pre><p>The model.summary() method call prints a summary of the NN </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model.summary()</span><br></pre></td></tr></table></figure>
<pre><code>_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
conv2d (Conv2D)              (None, 148, 148, 16)      448       
_________________________________________________________________
max_pooling2d (MaxPooling2D) (None, 74, 74, 16)        0         
_________________________________________________________________
conv2d_1 (Conv2D)            (None, 72, 72, 32)        4640      
_________________________________________________________________
max_pooling2d_1 (MaxPooling2 (None, 36, 36, 32)        0         
_________________________________________________________________
conv2d_2 (Conv2D)            (None, 34, 34, 64)        18496     
_________________________________________________________________
max_pooling2d_2 (MaxPooling2 (None, 17, 17, 64)        0         
_________________________________________________________________
flatten (Flatten)            (None, 18496)             0         
_________________________________________________________________
dense (Dense)                (None, 512)               9470464   
_________________________________________________________________
dense_1 (Dense)              (None, 1)                 513       
=================================================================
Total params: 9,494,561
Trainable params: 9,494,561
Non-trainable params: 0
_________________________________________________________________
</code></pre><p>The “output shape” column shows how the size of your feature map evolves in each successive layer. The convolution layers reduce the size of the feature maps by a bit due to padding, and each pooling layer halves the dimensions.</p>
<p>Next, we’ll configure the specifications for model training. We will train our model with the <code>binary_crossentropy</code> loss, because it’s a binary classification problem and our final activation is a sigmoid. (For a refresher on loss metrics, see the <a href="https://developers.google.com/machine-learning/crash-course/descending-into-ml/video-lecture" target="_blank" rel="noopener">Machine Learning Crash Course</a>.) We will use the <code>rmsprop</code> optimizer with a learning rate of <code>0.001</code>. During training, we will want to monitor classification accuracy.</p>
<p><strong>NOTE</strong>: In this case, using the <a href="https://wikipedia.org/wiki/Stochastic_gradient_descent#RMSProp" target="_blank" rel="noopener">RMSprop optimization algorithm</a> is preferable to <a href="https://developers.google.com/machine-learning/glossary/#SGD" target="_blank" rel="noopener">stochastic gradient descent</a> (SGD), because RMSprop automates learning-rate tuning for us. (Other optimizers, such as <a href="https://wikipedia.org/wiki/Stochastic_gradient_descent#Adam" target="_blank" rel="noopener">Adam</a> and <a href="https://developers.google.com/machine-learning/glossary/#AdaGrad" target="_blank" rel="noopener">Adagrad</a>, also automatically adapt the learning rate during training, and would work equally well here.)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.keras.optimizers <span class="keyword">import</span> RMSprop</span><br><span class="line"></span><br><span class="line">model.compile(optimizer=RMSprop(lr=<span class="number">0.001</span>),</span><br><span class="line">              loss=<span class="string">'binary_crossentropy'</span>,</span><br><span class="line">              metrics = [<span class="string">'acc'</span>])</span><br></pre></td></tr></table></figure>
<h3 id="Data-Preprocessing"><a href="#Data-Preprocessing" class="headerlink" title="Data Preprocessing"></a>Data Preprocessing</h3><p>Let’s set up data generators that will read pictures in our source folders, convert them to <code>float32</code> tensors, and feed them (with their labels) to our network. We’ll have one generator for the training images and one for the validation images. Our generators will yield batches of 20 images of size 150x150 and their labels (binary).</p>
<p>As you may already know, data that goes into neural networks should usually be normalized in some way to make it more amenable to processing by the network. (It is uncommon to feed raw pixels into a convnet.) In our case, we will preprocess our images by normalizing the pixel values to be in the <code>[0, 1]</code> range (originally all values are in the <code>[0, 255]</code> range).</p>
<p>In Keras this can be done via the <code>keras.preprocessing.image.ImageDataGenerator</code> class using the <code>rescale</code> parameter. This <code>ImageDataGenerator</code> class allows you to instantiate generators of augmented image batches (and their labels) via <code>.flow(data, labels)</code> or <code>.flow_from_directory(directory)</code>. These generators can then be used with the Keras model methods that accept data generators as inputs: <code>fit_generator</code>, <code>evaluate_generator</code>, and <code>predict_generator</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.keras.preprocessing.image <span class="keyword">import</span> ImageDataGenerator</span><br><span class="line"></span><br><span class="line"><span class="comment"># All images will be rescaled by 1./255.</span></span><br><span class="line">train_datagen = ImageDataGenerator( rescale = <span class="number">1.0</span>/<span class="number">255.</span> )</span><br><span class="line">test_datagen  = ImageDataGenerator( rescale = <span class="number">1.0</span>/<span class="number">255.</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------</span></span><br><span class="line"><span class="comment"># Flow training images in batches of 20 using train_datagen generator</span></span><br><span class="line"><span class="comment"># --------------------</span></span><br><span class="line">train_generator = train_datagen.flow_from_directory(train_dir,</span><br><span class="line">                                                    batch_size=<span class="number">20</span>,</span><br><span class="line">                                                    class_mode=<span class="string">'binary'</span>,</span><br><span class="line">                                                    target_size=(<span class="number">150</span>, <span class="number">150</span>))     </span><br><span class="line"><span class="comment"># --------------------</span></span><br><span class="line"><span class="comment"># Flow validation images in batches of 20 using test_datagen generator</span></span><br><span class="line"><span class="comment"># --------------------</span></span><br><span class="line">validation_generator =  test_datagen.flow_from_directory(validation_dir,</span><br><span class="line">                                                         batch_size=<span class="number">20</span>,</span><br><span class="line">                                                         class_mode  = <span class="string">'binary'</span>,</span><br><span class="line">                                                         target_size = (<span class="number">150</span>, <span class="number">150</span>))</span><br></pre></td></tr></table></figure>
<pre><code>Found 2000 images belonging to 2 classes.
Found 1000 images belonging to 2 classes.
</code></pre><h3 id="Training"><a href="#Training" class="headerlink" title="Training"></a>Training</h3><p>Let’s train on all 2,000 images available, for 15 epochs, and validate on all 1,000 test images. (This may take a few minutes to run.)</p>
<p>Do note the values per epoch.</p>
<p>You’ll see 4 values per epoch — Loss, Accuracy, Validation Loss and Validation Accuracy. </p>
<p>The Loss and Accuracy are a great indication of progress of training. It’s making a guess as to the classification of the training data, and then measuring it against the known label, calculating the result. Accuracy is the portion of correct guesses. The Validation accuracy is the measurement with the data that has not been used in training. As expected this would be a bit lower. You’ll learn about why this occurs in the section on overfitting later in this course.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">history = model.fit_generator(train_generator,</span><br><span class="line">                              validation_data=validation_generator,</span><br><span class="line">                              steps_per_epoch=<span class="number">100</span>,</span><br><span class="line">                              epochs=<span class="number">15</span>,</span><br><span class="line">                              validation_steps=<span class="number">50</span>,</span><br><span class="line">                              verbose=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<pre><code>WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/math_ops.py:3066: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.
Instructions for updating:
Use tf.cast instead.
Epoch 1/15
50/50 [==============================] - 14s 272ms/step - loss: 0.6361 - acc: 0.6190
 - 78s - loss: 0.7195 - acc: 0.5605 - val_loss: 0.6361 - val_acc: 0.6190
Epoch 2/15
50/50 [==============================] - 13s 269ms/step - loss: 0.7688 - acc: 0.5900
 - 77s - loss: 0.6116 - acc: 0.6705 - val_loss: 0.7688 - val_acc: 0.5900
Epoch 3/15
50/50 [==============================] - 13s 268ms/step - loss: 0.5508 - acc: 0.7180
 - 77s - loss: 0.5054 - acc: 0.7630 - val_loss: 0.5508 - val_acc: 0.7180
Epoch 4/15
50/50 [==============================] - 14s 271ms/step - loss: 0.5617 - acc: 0.7150
 - 77s - loss: 0.4182 - acc: 0.8070 - val_loss: 0.5617 - val_acc: 0.7150
Epoch 5/15
50/50 [==============================] - 13s 268ms/step - loss: 0.6630 - acc: 0.7160
 - 77s - loss: 0.3139 - acc: 0.8710 - val_loss: 0.6630 - val_acc: 0.7160
Epoch 6/15
50/50 [==============================] - 14s 271ms/step - loss: 0.8500 - acc: 0.6780
 - 77s - loss: 0.2327 - acc: 0.9105 - val_loss: 0.8500 - val_acc: 0.6780
Epoch 7/15
50/50 [==============================] - 13s 269ms/step - loss: 0.7612 - acc: 0.7390
 - 77s - loss: 0.1560 - acc: 0.9340 - val_loss: 0.7612 - val_acc: 0.7390
Epoch 8/15
50/50 [==============================] - 13s 269ms/step - loss: 0.9279 - acc: 0.7250
 - 77s - loss: 0.1019 - acc: 0.9640 - val_loss: 0.9279 - val_acc: 0.7250
Epoch 9/15
50/50 [==============================] - 14s 271ms/step - loss: 1.5360 - acc: 0.6420
 - 77s - loss: 0.0758 - acc: 0.9755 - val_loss: 1.5360 - val_acc: 0.6420
Epoch 10/15
50/50 [==============================] - 13s 269ms/step - loss: 1.4697 - acc: 0.7330
 - 77s - loss: 0.0571 - acc: 0.9825 - val_loss: 1.4697 - val_acc: 0.7330
Epoch 11/15
50/50 [==============================] - 14s 279ms/step - loss: 4.1017 - acc: 0.5790
 - 78s - loss: 0.0970 - acc: 0.9810 - val_loss: 4.1017 - val_acc: 0.5790
Epoch 12/15
50/50 [==============================] - 14s 273ms/step - loss: 1.1633 - acc: 0.7120
 - 78s - loss: 0.0560 - acc: 0.9845 - val_loss: 1.1633 - val_acc: 0.7120
Epoch 13/15
50/50 [==============================] - 14s 274ms/step - loss: 2.4055 - acc: 0.6760
 - 78s - loss: 0.0534 - acc: 0.9865 - val_loss: 2.4055 - val_acc: 0.6760
Epoch 14/15
50/50 [==============================] - 14s 273ms/step - loss: 1.6190 - acc: 0.7200
 - 77s - loss: 0.0416 - acc: 0.9905 - val_loss: 1.6190 - val_acc: 0.7200
Epoch 15/15
50/50 [==============================] - 13s 270ms/step - loss: 1.8248 - acc: 0.7410
 - 78s - loss: 0.0207 - acc: 0.9955 - val_loss: 1.8248 - val_acc: 0.7410
</code></pre><h3 id="Running-the-Model"><a href="#Running-the-Model" class="headerlink" title="Running the Model"></a>Running the Model</h3><p>Let’s now take a look at actually running a prediction using the model. This code will allow you to choose 1 or more files from your file system, it will then upload them, and run them through the model, giving an indication of whether the object is a dog or a cat.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> google.colab <span class="keyword">import</span> files</span><br><span class="line"><span class="keyword">from</span> keras.preprocessing <span class="keyword">import</span> image</span><br><span class="line"></span><br><span class="line">uploaded=files.upload()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> fn <span class="keyword">in</span> uploaded.keys():</span><br><span class="line"> </span><br><span class="line">  <span class="comment"># predicting images</span></span><br><span class="line">  path=<span class="string">'/content/'</span> + fn</span><br><span class="line">  img=image.load_img(path, target_size=(<span class="number">150</span>, <span class="number">150</span>))</span><br><span class="line">  </span><br><span class="line">  x=image.img_to_array(img)</span><br><span class="line">  x=np.expand_dims(x, axis=<span class="number">0</span>)</span><br><span class="line">  images = np.vstack([x])</span><br><span class="line">  </span><br><span class="line">  classes = model.predict(images, batch_size=<span class="number">10</span>)</span><br><span class="line">  </span><br><span class="line">  print(classes[<span class="number">0</span>])</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> classes[<span class="number">0</span>]&gt;<span class="number">0</span>:</span><br><span class="line">    print(fn + <span class="string">" is a dog"</span>)</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    print(fn + <span class="string">" is a cat"</span>)</span><br></pre></td></tr></table></figure>
<pre><code>Using TensorFlow backend.
</code></pre><p><input type="file" id="files-80374c95-3324-4bdf-aa57-651b56378a36" name="files[]" multiple disabled></p>
<p><output id="result-80374c95-3324-4bdf-aa57-651b56378a36"><br> Upload widget is only available when the cell has been executed in the<br> current browser session. Please rerun this cell to enable.
 </output><br> <script src="/nbextensions/google.colab/files.js"></script> </p>
<h3 id="Visualizing-Intermediate-Representations"><a href="#Visualizing-Intermediate-Representations" class="headerlink" title="Visualizing Intermediate Representations"></a>Visualizing Intermediate Representations</h3><p>To get a feel for what kind of features our convnet has learned, one fun thing to do is to visualize how an input gets transformed as it goes through the convnet.</p>
<p>Let’s pick a random cat or dog image from the training set, and then generate a figure where each row is the output of a layer, and each image in the row is a specific filter in that output feature map. Rerun this cell to generate intermediate representations for a variety of training images.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span>   tensorflow.keras.preprocessing.image <span class="keyword">import</span> img_to_array, load_img</span><br><span class="line"></span><br><span class="line"><span class="comment"># Let's define a new Model that will take an image as input, and will output</span></span><br><span class="line"><span class="comment"># intermediate representations for all layers in the previous model after</span></span><br><span class="line"><span class="comment"># the first.</span></span><br><span class="line">successive_outputs = [layer.output <span class="keyword">for</span> layer <span class="keyword">in</span> model.layers[<span class="number">1</span>:]]</span><br><span class="line"></span><br><span class="line"><span class="comment">#visualization_model = Model(img_input, successive_outputs)</span></span><br><span class="line">visualization_model = tf.keras.models.Model(inputs = model.input, outputs = successive_outputs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Let's prepare a random input image of a cat or dog from the training set.</span></span><br><span class="line">cat_img_files = [os.path.join(train_cats_dir, f) <span class="keyword">for</span> f <span class="keyword">in</span> train_cat_fnames]</span><br><span class="line">dog_img_files = [os.path.join(train_dogs_dir, f) <span class="keyword">for</span> f <span class="keyword">in</span> train_dog_fnames]</span><br><span class="line"></span><br><span class="line">img_path = random.choice(cat_img_files + dog_img_files)</span><br><span class="line">img = load_img(img_path, target_size=(<span class="number">150</span>, <span class="number">150</span>))  <span class="comment"># this is a PIL image</span></span><br><span class="line"></span><br><span class="line">x   = img_to_array(img)                           <span class="comment"># Numpy array with shape (150, 150, 3)</span></span><br><span class="line">x   = x.reshape((<span class="number">1</span>,) + x.shape)                   <span class="comment"># Numpy array with shape (1, 150, 150, 3)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Rescale by 1/255</span></span><br><span class="line">x /= <span class="number">255.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Let's run our image through our network, thus obtaining all</span></span><br><span class="line"><span class="comment"># intermediate representations for this image.</span></span><br><span class="line">successive_feature_maps = visualization_model.predict(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># These are the names of the layers, so can have them as part of our plot</span></span><br><span class="line">layer_names = [layer.name <span class="keyword">for</span> layer <span class="keyword">in</span> model.layers]</span><br><span class="line"></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Now let's display our representations</span></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">for</span> layer_name, feature_map <span class="keyword">in</span> zip(layer_names, successive_feature_maps):</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> len(feature_map.shape) == <span class="number">4</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#-------------------------------------------</span></span><br><span class="line">    <span class="comment"># Just do this for the conv / maxpool layers, not the fully-connected layers</span></span><br><span class="line">    <span class="comment">#-------------------------------------------</span></span><br><span class="line">    n_features = feature_map.shape[<span class="number">-1</span>]  <span class="comment"># number of features in the feature map</span></span><br><span class="line">    size       = feature_map.shape[ <span class="number">1</span>]  <span class="comment"># feature map shape (1, size, size, n_features)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># We will tile our images in this matrix</span></span><br><span class="line">    display_grid = np.zeros((size, size * n_features))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#-------------------------------------------------</span></span><br><span class="line">    <span class="comment"># Postprocess the feature to be visually palatable</span></span><br><span class="line">    <span class="comment">#-------------------------------------------------</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n_features):</span><br><span class="line">      x  = feature_map[<span class="number">0</span>, :, :, i]</span><br><span class="line">      x -= x.mean()</span><br><span class="line">      x /= x.std ()</span><br><span class="line">      x *=  <span class="number">64</span></span><br><span class="line">      x += <span class="number">128</span></span><br><span class="line">      x  = np.clip(x, <span class="number">0</span>, <span class="number">255</span>).astype(<span class="string">'uint8'</span>)</span><br><span class="line">      display_grid[:, i * size : (i + <span class="number">1</span>) * size] = x <span class="comment"># Tile each filter into a horizontal grid</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#-----------------</span></span><br><span class="line">    <span class="comment"># Display the grid</span></span><br><span class="line">    <span class="comment">#-----------------</span></span><br><span class="line"></span><br><span class="line">    scale = <span class="number">20.</span> / n_features</span><br><span class="line">    plt.figure( figsize=(scale * n_features, scale) )</span><br><span class="line">    plt.title ( layer_name )</span><br><span class="line">    plt.grid  ( <span class="keyword">False</span> )</span><br><span class="line">    plt.imshow( display_grid, aspect=<span class="string">'auto'</span>, cmap=<span class="string">'viridis'</span> )</span><br></pre></td></tr></table></figure>
<pre><code>/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:55: RuntimeWarning: invalid value encountered in true_divide
</code></pre><p><img src="output_36_1.png" alt="png"></p>
<p><img src="output_36_2.png" alt="png"></p>
<p><img src="output_36_3.png" alt="png"></p>
<p><img src="output_36_4.png" alt="png"></p>
<p><img src="output_36_5.png" alt="png"></p>
<p>As you can see we go from the raw pixels of the images to increasingly abstract and compact representations. The representations downstream start highlighting what the network pays attention to, and they show fewer and fewer features being “activated”; most are set to zero. This is called “sparsity.” Representation sparsity is a key feature of deep learning.</p>
<p>These representations carry increasingly less information about the original pixels of the image, but increasingly refined information about the class of the image. You can think of a convnet (or a deep network in general) as an information distillation pipeline.</p>
<h3 id="Evaluating-Accuracy-and-Loss-for-the-Model"><a href="#Evaluating-Accuracy-and-Loss-for-the-Model" class="headerlink" title="Evaluating Accuracy and Loss for the Model"></a>Evaluating Accuracy and Loss for the Model</h3><p>Let’s plot the training/validation accuracy and loss as collected during training:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-----------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Retrieve a list of list results on training and test data</span></span><br><span class="line"><span class="comment"># sets for each training epoch</span></span><br><span class="line"><span class="comment">#-----------------------------------------------------------</span></span><br><span class="line">acc      = history.history[     <span class="string">'acc'</span> ]</span><br><span class="line">val_acc  = history.history[ <span class="string">'val_acc'</span> ]</span><br><span class="line">loss     = history.history[    <span class="string">'loss'</span> ]</span><br><span class="line">val_loss = history.history[<span class="string">'val_loss'</span> ]</span><br><span class="line"></span><br><span class="line">epochs   = range(len(acc)) <span class="comment"># Get number of epochs</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------</span></span><br><span class="line"><span class="comment"># Plot training and validation accuracy per epoch</span></span><br><span class="line"><span class="comment">#------------------------------------------------</span></span><br><span class="line">plt.plot  ( epochs,     acc )</span><br><span class="line">plt.plot  ( epochs, val_acc )</span><br><span class="line">plt.title (<span class="string">'Training and validation accuracy'</span>)</span><br><span class="line">plt.figure()</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------</span></span><br><span class="line"><span class="comment"># Plot training and validation loss per epoch</span></span><br><span class="line"><span class="comment">#------------------------------------------------</span></span><br><span class="line">plt.plot  ( epochs,     loss )</span><br><span class="line">plt.plot  ( epochs, val_loss )</span><br><span class="line">plt.title (<span class="string">'Training and validation loss'</span>   )</span><br></pre></td></tr></table></figure>
<pre><code>Text(0.5, 1.0, &#39;Training and validation loss&#39;)
</code></pre><p><img src="output_39_1.png" alt="png"></p>
<p><img src="output_39_2.png" alt="png"></p>
<p>As you can see, we are <strong>overfitting</strong> like it’s getting out of fashion. Our training accuracy (in blue) gets close to 100% (!) while our validation accuracy (in green) stalls as 70%. Our validation loss reaches its minimum after only five epochs.</p>
<p>Since we have a relatively small number of training examples (2000), overfitting should be our number one concern. Overfitting happens when a model exposed to too few examples learns patterns that do not generalize to new data, i.e. when the model starts using irrelevant features for making predictions. For instance, if you, as a human, only see three images of people who are lumberjacks, and three images of people who are sailors, and among them the only person wearing a cap is a lumberjack, you might start thinking that wearing a cap is a sign of being a lumberjack as opposed to a sailor. You would then make a pretty lousy lumberjack/sailor classifier.</p>
<p>Overfitting is the central problem in machine learning: given that we are fitting the parameters of our model to a given dataset, how can we make sure that the representations learned by the model will be applicable to data never seen before? How do we avoid learning things that are specific to the training data?</p>
<p>In the next exercise, we’ll look at ways to prevent overfitting in the cat vs. dog classification model.</p>
<h2 id="Clean-Up"><a href="#Clean-Up" class="headerlink" title="Clean Up"></a>Clean Up</h2><p>Before running the next exercise, run the following cell to terminate the kernel and free memory resources:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os, signal</span><br><span class="line"></span><br><span class="line">os.kill(     os.getpid() , </span><br><span class="line">         signal.SIGKILL</span><br><span class="line">       )</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Project</tag>
        <tag>Computer Vision</tag>
        <tag>Convolutional Neural Networks</tag>
      </tags>
  </entry>
  <entry>
    <title>Debris 20190529</title>
    <url>/Debris-20190529/2019/05/29/</url>
    <content><![CDATA[<h2 id="Problem-fixed"><a href="#Problem-fixed" class="headerlink" title="Problem fixed"></a>Problem fixed</h2><h3 id="Set-http-proxy-for-package-control"><a href="#Set-http-proxy-for-package-control" class="headerlink" title="Set http proxy for package control"></a>Set http proxy for package control</h3><ol>
<li><p>change the user setting of package control<br>add some channels</p>
</li>
<li><p>use the http proxy</p>
<ul>
<li>check the shadowsocks’s HTTP proxy listen address and port</li>
<li>add the HTTP proxy listen address and port to the user setting file<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">"channels"</span>:</span><br><span class="line">[</span><br><span class="line">    <span class="string">"http://cst.stu.126.net/u/json/cms/channel_v3.json"</span>,</span><br><span class="line">    <span class="string">"https://raw.githubusercontent.com/wilon/sublime/master/download/channel_v3.json"</span></span><br><span class="line">],</span><br><span class="line"><span class="string">"http_proxy"</span>: <span class="string">"127.0.0.1:1087"</span>,</span><br><span class="line"><span class="string">"https_proxy"</span>: <span class="string">"127.0.0.1:1087"</span>,</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h2 id="Skills"><a href="#Skills" class="headerlink" title="Skills"></a>Skills</h2><h3 id="Use-the-sublime-text3-to-connect-the-remote-server"><a href="#Use-the-sublime-text3-to-connect-the-remote-server" class="headerlink" title="Use the sublime text3 to connect the remote server"></a>Use the sublime text3 to connect the remote server</h3><ol>
<li>open the package control and downlad the SFTP</li>
<li>right click the local folder in sublime text3 to map it to remote folder</li>
<li>setting the config file which had been created above</li>
</ol>
<h3 id="Gist-and-sublime-text3-integration"><a href="#Gist-and-sublime-text3-integration" class="headerlink" title="Gist and sublime text3 integration"></a>Gist and sublime text3 integration</h3><ol>
<li>open the package control and downlad the Gist</li>
<li><p>get the GitHub Token</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -v -u zhangruochi -X POST https://api.github.com/authorizations --data &#123;<span class="string">"\"scopes\":[\"gist\"], \"note\": \"SublimeText 2/3 Gist plugin\”&#125;”</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>add the token to the user setting of Gist in Sublime Text</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">"token"</span>:xxxxxx&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>Debris</category>
      </categories>
  </entry>
  <entry>
    <title>Sequential Logic</title>
    <url>/Sequential-Logic/2019/05/27/</url>
    <content><![CDATA[<h1 id="Sequential-Logic"><a href="#Sequential-Logic" class="headerlink" title="Sequential Logic"></a>Sequential Logic</h1><p><strong>Combinational chips</strong> compute functions that depend solely on combinations of their input values. These relatively simple chips provide many important processing functions (like the ALU), but they cannot <strong>maintain state</strong>. Since computers must be able to not only compute values but also store and recall values, they must be equipped with memory elements that can preserve data over time. These memory elements are built from <strong>sequential chips</strong>.</p>
<p><img src="1.png" alt></p>
<h2 id="Flip-Flop"><a href="#Flip-Flop" class="headerlink" title="Flip-Flop"></a>Flip-Flop</h2><p><img src="DFF.png" alt></p>
<ul>
<li>the DFF has a clock input that continuously changes according to the master clock’s signal.</li>
<li>1-bit input, 1-bit output</li>
<li>The gate outputs its previous input:</li>
</ul>
<script type="math/tex; mode=display">out(t)=in(t-1)</script><ul>
<li>Implementation: a gate that can flip between two stable states: <strong>remembering 0</strong>, or <strong>remembering 1</strong></li>
<li>Gates that feature this behavior are called data flip-flops.</li>
</ul>
<h2 id="1-bit-register"><a href="#1-bit-register" class="headerlink" title="1-bit register"></a>1-bit register</h2><p>A single-bit register, which we call Bit, or binary cell, is designed to <strong>store</strong> a single bit of information (0 or 1). The chip interface consists of </p>
<ul>
<li>an <strong>input pin</strong> that carries a data bit;</li>
<li>a <strong>load pin</strong> that enables the cell for writes;</li>
<li>an <strong>output pin</strong> that emits the current state of the cell</li>
</ul>
<h3 id="read-write-behavior"><a href="#read-write-behavior" class="headerlink" title="read/write behavior"></a>read/write behavior</h3><ul>
<li><strong>Read</strong>: To read the contents of a register, we simply probe its output.</li>
<li><strong>Write</strong>: To write a new data value d into a register, we put d in the in input and assert (set to 1) the load input. In the next clock cycle, the register commits to the new data value, and its output starts emitting d.</li>
</ul>
<p><img src="register1.png" alt></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 1-bit register:</span><br><span class="line"> * If load[t] == 1 <span class="keyword">then</span> out[t+1] = <span class="keyword">in</span>[t]</span><br><span class="line"> *                 <span class="keyword">else</span> out does not change (out[t+1] = out[t])</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">CHIP Bit &#123;</span><br><span class="line">    IN <span class="keyword">in</span>, load;</span><br><span class="line">    OUT out;</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    // Put your code here:</span><br><span class="line"></span><br><span class="line">    Mux(a=dout,b=<span class="keyword">in</span>, sel=load, out=out1);</span><br><span class="line">    DFF(<span class="keyword">in</span>=out1,out=dout,out=out);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Multi-bit-register-also-known-as-“register”"><a href="#Multi-bit-register-also-known-as-“register”" class="headerlink" title="Multi-bit register (also known as “register”)"></a>Multi-bit register (also known as “register”)</h2><p>A w-bit register can be created from an array of w 1-bit registers.</p>
<p><img src="register16.png" alt></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 16-bit register:</span><br><span class="line"> * If load[t] == 1 <span class="keyword">then</span> out[t+1] = <span class="keyword">in</span>[t]</span><br><span class="line"> * <span class="keyword">else</span> out does not change</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">CHIP Register &#123;</span><br><span class="line">    IN <span class="keyword">in</span>[16], load;</span><br><span class="line">    OUT out[16];</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    // Put your code here:</span><br><span class="line">    Bit(<span class="keyword">in</span>=<span class="keyword">in</span>[0],load=load,out=out[0]);</span><br><span class="line">    Bit(<span class="keyword">in</span>=<span class="keyword">in</span>[1],load=load,out=out[1]);</span><br><span class="line">    Bit(<span class="keyword">in</span>=<span class="keyword">in</span>[2],load=load,out=out[2]);</span><br><span class="line">    Bit(<span class="keyword">in</span>=<span class="keyword">in</span>[3],load=load,out=out[3]);</span><br><span class="line">    Bit(<span class="keyword">in</span>=<span class="keyword">in</span>[4],load=load,out=out[4]);</span><br><span class="line">    Bit(<span class="keyword">in</span>=<span class="keyword">in</span>[5],load=load,out=out[5]);</span><br><span class="line">    Bit(<span class="keyword">in</span>=<span class="keyword">in</span>[6],load=load,out=out[6]);</span><br><span class="line">    Bit(<span class="keyword">in</span>=<span class="keyword">in</span>[7],load=load,out=out[7]);</span><br><span class="line">    Bit(<span class="keyword">in</span>=<span class="keyword">in</span>[8],load=load,out=out[8]);</span><br><span class="line">    Bit(<span class="keyword">in</span>=<span class="keyword">in</span>[9],load=load,out=out[9]);</span><br><span class="line">    Bit(<span class="keyword">in</span>=<span class="keyword">in</span>[10],load=load,out=out[10]);</span><br><span class="line">    Bit(<span class="keyword">in</span>=<span class="keyword">in</span>[11],load=load,out=out[11]);</span><br><span class="line">    Bit(<span class="keyword">in</span>=<span class="keyword">in</span>[12],load=load,out=out[12]);</span><br><span class="line">    Bit(<span class="keyword">in</span>=<span class="keyword">in</span>[13],load=load,out=out[13]);</span><br><span class="line">    Bit(<span class="keyword">in</span>=<span class="keyword">in</span>[14],load=load,out=out[14]);</span><br><span class="line">    Bit(<span class="keyword">in</span>=<span class="keyword">in</span>[15],load=load,out=out[15]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Random-Access-Memory-RAM"><a href="#Random-Access-Memory-RAM" class="headerlink" title="Random Access Memory (RAM)"></a>Random Access Memory (RAM)</h2><ol>
<li><p>Architecture<br>A sequence of n addressable registers, with addresses 0 to n-1</p>
</li>
<li><p>The number of registers (n) and the width of each register (w) are called the memory’s <strong>size</strong> and <strong>width</strong></p>
</li>
<li><p>Address width</p>
<script type="math/tex; mode=display">k = log_2 n</script></li>
<li><p>To read Register i:</p>
<ul>
<li>set address = i</li>
<li>probe out</li>
</ul>
</li>
<li><p>To set Register i to v:</p>
<ul>
<li>set address = i</li>
<li>set in = v </li>
<li>set load = 1</li>
</ul>
</li>
</ol>
<p><img src="RAM.png" alt></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Memory of 8 registers, each 16 bit-wide. Out holds the value</span><br><span class="line"> * stored at the memory location specified by address. If load=1, <span class="keyword">then</span> </span><br><span class="line"> * the <span class="keyword">in</span> value is loaded into the memory location specified by address </span><br><span class="line"> * (the loaded value will be emitted to out after the next time step.)</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">CHIP RAM8 &#123;</span><br><span class="line">    IN <span class="keyword">in</span>[16], load, address[3];</span><br><span class="line">    OUT out[16];</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    DMux8Way(<span class="keyword">in</span>=load,sel=address,a=load0,b=load1,c=load2,d=load3,e=load4,f=load5,g=load6,h=load7);</span><br><span class="line">    Register(<span class="keyword">in</span>=<span class="keyword">in</span>,load=load0,out=out0);</span><br><span class="line">    Register(<span class="keyword">in</span>=<span class="keyword">in</span>,load=load1,out=out1);</span><br><span class="line">    Register(<span class="keyword">in</span>=<span class="keyword">in</span>,load=load2,out=out2);</span><br><span class="line">    Register(<span class="keyword">in</span>=<span class="keyword">in</span>,load=load3,out=out3);</span><br><span class="line">    Register(<span class="keyword">in</span>=<span class="keyword">in</span>,load=load4,out=out4);</span><br><span class="line">    Register(<span class="keyword">in</span>=<span class="keyword">in</span>,load=load5,out=out5);</span><br><span class="line">    Register(<span class="keyword">in</span>=<span class="keyword">in</span>,load=load6,out=out6);</span><br><span class="line">    Register(<span class="keyword">in</span>=<span class="keyword">in</span>,load=load7,out=out7);</span><br><span class="line">    Mux8Way16(a=out0,b=out1,c=out2,d=out3,e=out4,f=out5,g=out6,h=out7,sel=address,out=out);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Program-Counter"><a href="#Program-Counter" class="headerlink" title="Program Counter"></a>Program Counter</h2><ul>
<li>The computer must keep track of which instruction should be fetched and executed next</li>
<li>This control mechanism can be realized by a register called Program Counter</li>
<li>The PC contains the address of the instruction that will be fetched and executed next</li>
<li>The PC is designed to support three possible control operations:<ol>
<li><strong>Reset</strong>: fetch the first instruction (PC = 0)</li>
<li><strong>Next</strong>: fetch the next instruction (PC++)</li>
<li><strong>Goto</strong>: fetch instruction n(PC = n)</li>
</ol>
</li>
</ul>
<p><img src="counter.png" alt></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * A 16-bit counter with load and reset control bits.</span><br><span class="line"> * <span class="keyword">if</span>      (reset[t] == 1) out[t+1] = 0</span><br><span class="line"> * <span class="keyword">else</span> <span class="keyword">if</span> (load[t] == 1)  out[t+1] = <span class="keyword">in</span>[t]</span><br><span class="line"> * <span class="keyword">else</span> <span class="keyword">if</span> (inc[t] == 1)   out[t+1] = out[t] + 1  (<span class="built_in">integer</span> addition)</span><br><span class="line"> * <span class="keyword">else</span>                    out[t+1] = out[t]</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">CHIP PC &#123;</span><br><span class="line">    IN <span class="keyword">in</span>[16],load,inc,reset;</span><br><span class="line">    OUT out[16];</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    // Put your code here:</span><br><span class="line">    Inc16(<span class="keyword">in</span>=out5,out=out1);</span><br><span class="line">    Mux16(a=out5,b=out1,sel=inc,out=out2);</span><br><span class="line">    Mux16(a=out2,b=<span class="keyword">in</span>,sel=load,out=out3);</span><br><span class="line">    Mux16(a=out3,b=<span class="literal">false</span>,sel=reset,out=out4);</span><br><span class="line">    Register(<span class="keyword">in</span>=out4,load=<span class="literal">true</span>,out=out5,out=out);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Hardware Architecture</category>
      </categories>
      <tags>
        <tag>Nand2Tetris</tag>
      </tags>
  </entry>
  <entry>
    <title>Horses or Humans with Validation</title>
    <url>/Horses-or-Humans-with-Validation/2019/05/23/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!wget --no-check-certificate \</span><br><span class="line">    https://storage.googleapis.com/laurencemoroney-blog.appspot.com/horse-<span class="keyword">or</span>-human.zip \</span><br><span class="line">    -O /tmp/horse-<span class="keyword">or</span>-human.zip</span><br></pre></td></tr></table></figure>
<pre><code>--2019-05-23 08:11:52--  https://storage.googleapis.com/laurencemoroney-blog.appspot.com/horse-or-human.zip
Resolving storage.googleapis.com (storage.googleapis.com)... 108.177.125.128, 2404:6800:4008:c06::80
Connecting to storage.googleapis.com (storage.googleapis.com)|108.177.125.128|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 149574867 (143M) [application/zip]
Saving to: ‘/tmp/horse-or-human.zip’

/tmp/horse-or-human 100%[===================&gt;] 142.65M  81.4MB/s    in 1.8s    

2019-05-23 08:11:54 (81.4 MB/s) - ‘/tmp/horse-or-human.zip’ saved [149574867/149574867]
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!wget --no-check-certificate \</span><br><span class="line">    https://storage.googleapis.com/laurencemoroney-blog.appspot.com/validation-horse-<span class="keyword">or</span>-human.zip \</span><br><span class="line">    -O /tmp/validation-horse-<span class="keyword">or</span>-human.zip</span><br></pre></td></tr></table></figure>
<pre><code>--2019-05-23 08:13:02--  https://storage.googleapis.com/laurencemoroney-blog.appspot.com/validation-horse-or-human.zip
Resolving storage.googleapis.com (storage.googleapis.com)... 108.177.125.128, 2404:6800:4008:c06::80
Connecting to storage.googleapis.com (storage.googleapis.com)|108.177.125.128|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 11480187 (11M) [application/zip]
Saving to: ‘/tmp/validation-horse-or-human.zip’

/tmp/validation-hor 100%[===================&gt;]  10.95M  --.-KB/s    in 0.1s    

2019-05-23 08:13:03 (96.6 MB/s) - ‘/tmp/validation-horse-or-human.zip’ saved [11480187/11480187]
</code></pre><p>The following python code will use the OS library to use Operating System libraries, giving you access to the file system, and the zipfile library allowing you to unzip the data. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line">local_zip = <span class="string">'/tmp/horse-or-human.zip'</span></span><br><span class="line">zip_ref = zipfile.ZipFile(local_zip, <span class="string">'r'</span>)</span><br><span class="line">zip_ref.extractall(<span class="string">'/tmp/horse-or-human'</span>)</span><br><span class="line">local_zip = <span class="string">'/tmp/validation-horse-or-human.zip'</span></span><br><span class="line">zip_ref = zipfile.ZipFile(local_zip, <span class="string">'r'</span>)</span><br><span class="line">zip_ref.extractall(<span class="string">'/tmp/validation-horse-or-human'</span>)</span><br><span class="line">zip_ref.close()</span><br></pre></td></tr></table></figure>
<p>The contents of the .zip are extracted to the base directory <code>/tmp/horse-or-human</code>, which in turn each contain <code>horses</code> and <code>humans</code> subdirectories.</p>
<p>In short: The training set is the data that is used to tell the neural network model that ‘this is what a horse looks like’, ‘this is what a human looks like’ etc. </p>
<p>One thing to pay attention to in this sample: We do not explicitly label the images as horses or humans. If you remember with the handwriting example earlier, we had labelled ‘this is a 1’, ‘this is a 7’ etc.  Later you’ll see something called an ImageGenerator being used — and this is coded to read images from subdirectories, and automatically label them from the name of that subdirectory. So, for example, you will have a ‘training’ directory containing a ‘horses’ directory and a ‘humans’ one. ImageGenerator will label the images appropriately for you, reducing a coding step. </p>
<p>Let’s define each of these directories:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Directory with our training horse pictures</span></span><br><span class="line">train_horse_dir = os.path.join(<span class="string">'/tmp/horse-or-human/horses'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory with our training human pictures</span></span><br><span class="line">train_human_dir = os.path.join(<span class="string">'/tmp/horse-or-human/humans'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory with our training horse pictures</span></span><br><span class="line">validation_horse_dir = os.path.join(<span class="string">'/tmp/validation-horse-or-human/horses'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory with our training human pictures</span></span><br><span class="line">validation_human_dir = os.path.join(<span class="string">'/tmp/validation-horse-or-human/humans'</span>)</span><br></pre></td></tr></table></figure>
<p>Now, let’s see what the filenames look like in the <code>horses</code> and <code>humans</code> training directories:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_horse_names = os.listdir(train_horse_dir)</span><br><span class="line">print(train_horse_names[:<span class="number">10</span>])</span><br><span class="line"></span><br><span class="line">train_human_names = os.listdir(train_human_dir)</span><br><span class="line">print(train_human_names[:<span class="number">10</span>])</span><br><span class="line"></span><br><span class="line">validation_horse_hames = os.listdir(validation_horse_dir)</span><br><span class="line">print(validation_horse_hames[:<span class="number">10</span>])</span><br><span class="line"></span><br><span class="line">validation_human_names = os.listdir(validation_human_dir)</span><br><span class="line">print(validation_human_names[:<span class="number">10</span>])</span><br></pre></td></tr></table></figure>
<pre><code>[&#39;horse29-9.png&#39;, &#39;horse15-9.png&#39;, &#39;horse05-0.png&#39;, &#39;horse30-0.png&#39;, &#39;horse35-4.png&#39;, &#39;horse02-3.png&#39;, &#39;horse31-8.png&#39;, &#39;horse09-5.png&#39;, &#39;horse03-9.png&#39;, &#39;horse37-2.png&#39;]
[&#39;human13-16.png&#39;, &#39;human08-24.png&#39;, &#39;human14-00.png&#39;, &#39;human16-16.png&#39;, &#39;human06-27.png&#39;, &#39;human04-17.png&#39;, &#39;human03-18.png&#39;, &#39;human16-00.png&#39;, &#39;human16-17.png&#39;, &#39;human09-24.png&#39;]
[&#39;horse1-276.png&#39;, &#39;horse4-530.png&#39;, &#39;horse2-040.png&#39;, &#39;horse2-183.png&#39;, &#39;horse2-201.png&#39;, &#39;horse1-554.png&#39;, &#39;horse6-218.png&#39;, &#39;horse3-011.png&#39;, &#39;horse6-004.png&#39;, &#39;horse3-326.png&#39;]
[&#39;valhuman02-13.png&#39;, &#39;valhuman01-23.png&#39;, &#39;valhuman03-24.png&#39;, &#39;valhuman01-07.png&#39;, &#39;valhuman02-14.png&#39;, &#39;valhuman05-08.png&#39;, &#39;valhuman03-12.png&#39;, &#39;valhuman05-27.png&#39;, &#39;valhuman04-10.png&#39;, &#39;valhuman05-11.png&#39;]
</code></pre><p>Let’s find out the total number of horse and human images in the directories:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'total training horse images:'</span>, len(os.listdir(train_horse_dir)))</span><br><span class="line">print(<span class="string">'total training human images:'</span>, len(os.listdir(train_human_dir)))</span><br><span class="line">print(<span class="string">'total validation horse images:'</span>, len(os.listdir(validation_horse_dir)))</span><br><span class="line">print(<span class="string">'total validation human images:'</span>, len(os.listdir(validation_human_dir)))</span><br></pre></td></tr></table></figure>
<pre><code>total training horse images: 500
total training human images: 527
total validation horse images: 128
total validation human images: 128
</code></pre><p>Now let’s take a look at a few pictures to get a better sense of what they look like. First, configure the matplot parameters:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.image <span class="keyword">as</span> mpimg</span><br><span class="line"></span><br><span class="line"><span class="comment"># Parameters for our graph; we'll output images in a 4x4 configuration</span></span><br><span class="line">nrows = <span class="number">4</span></span><br><span class="line">ncols = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Index for iterating over images</span></span><br><span class="line">pic_index = <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>Now, display a batch of 8 horse and 8 human pictures. You can rerun the cell to see a fresh batch each time:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Set up matplotlib fig, and size it to fit 4x4 pics</span></span><br><span class="line">fig = plt.gcf()</span><br><span class="line">fig.set_size_inches(ncols * <span class="number">4</span>, nrows * <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">pic_index += <span class="number">8</span></span><br><span class="line">next_horse_pix = [os.path.join(train_horse_dir, fname) </span><br><span class="line">                <span class="keyword">for</span> fname <span class="keyword">in</span> train_horse_names[pic_index<span class="number">-8</span>:pic_index]]</span><br><span class="line">next_human_pix = [os.path.join(train_human_dir, fname) </span><br><span class="line">                <span class="keyword">for</span> fname <span class="keyword">in</span> train_human_names[pic_index<span class="number">-8</span>:pic_index]]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, img_path <span class="keyword">in</span> enumerate(next_horse_pix+next_human_pix):</span><br><span class="line">  <span class="comment"># Set up subplot; subplot indices start at 1</span></span><br><span class="line">  sp = plt.subplot(nrows, ncols, i + <span class="number">1</span>)</span><br><span class="line">  sp.axis(<span class="string">'Off'</span>) <span class="comment"># Don't show axes (or gridlines)</span></span><br><span class="line"></span><br><span class="line">  img = mpimg.imread(img_path)</span><br><span class="line">  plt.imshow(img)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="output_13_0.png" alt="png"></p>
<h2 id="Building-a-Small-Model-from-Scratch"><a href="#Building-a-Small-Model-from-Scratch" class="headerlink" title="Building a Small Model from Scratch"></a>Building a Small Model from Scratch</h2><p>But before we continue, let’s start defining the model:</p>
<p>Step 1 will be to import tensorflow.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br></pre></td></tr></table></figure>
<p>We then add convolutional layers as in the previous example, and flatten the final result to feed into the densely connected layers.</p>
<p>Finally we add the densely connected layers. </p>
<p>Note that because we are facing a two-class classification problem, i.e. a <em>binary classification problem</em>, we will end our network with a <a href="https://wikipedia.org/wiki/Sigmoid_function" target="_blank" rel="noopener"><em>sigmoid</em> activation</a>, so that the output of our network will be a single scalar between 0 and 1, encoding the probability that the current image is class 1 (as opposed to class 0).</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model = tf.keras.models.Sequential([</span><br><span class="line">    <span class="comment"># Note the input shape is the desired size of the image 300x300 with 3 bytes color</span></span><br><span class="line">    <span class="comment"># This is the first convolution</span></span><br><span class="line">    tf.keras.layers.Conv2D(<span class="number">16</span>, (<span class="number">3</span>,<span class="number">3</span>), activation=<span class="string">'relu'</span>, input_shape=(<span class="number">300</span>, <span class="number">300</span>, <span class="number">3</span>)),</span><br><span class="line">    tf.keras.layers.MaxPooling2D(<span class="number">2</span>, <span class="number">2</span>),</span><br><span class="line">    <span class="comment"># The second convolution</span></span><br><span class="line">    tf.keras.layers.Conv2D(<span class="number">32</span>, (<span class="number">3</span>,<span class="number">3</span>), activation=<span class="string">'relu'</span>),</span><br><span class="line">    tf.keras.layers.MaxPooling2D(<span class="number">2</span>,<span class="number">2</span>),</span><br><span class="line">    <span class="comment"># The third convolution</span></span><br><span class="line">    tf.keras.layers.Conv2D(<span class="number">64</span>, (<span class="number">3</span>,<span class="number">3</span>), activation=<span class="string">'relu'</span>),</span><br><span class="line">    tf.keras.layers.MaxPooling2D(<span class="number">2</span>,<span class="number">2</span>),</span><br><span class="line">    <span class="comment"># The fourth convolution</span></span><br><span class="line">    tf.keras.layers.Conv2D(<span class="number">64</span>, (<span class="number">3</span>,<span class="number">3</span>), activation=<span class="string">'relu'</span>),</span><br><span class="line">    tf.keras.layers.MaxPooling2D(<span class="number">2</span>,<span class="number">2</span>),</span><br><span class="line">    <span class="comment"># The fifth convolution</span></span><br><span class="line">    tf.keras.layers.Conv2D(<span class="number">64</span>, (<span class="number">3</span>,<span class="number">3</span>), activation=<span class="string">'relu'</span>),</span><br><span class="line">    tf.keras.layers.MaxPooling2D(<span class="number">2</span>,<span class="number">2</span>),</span><br><span class="line">    <span class="comment"># Flatten the results to feed into a DNN</span></span><br><span class="line">    tf.keras.layers.Flatten(),</span><br><span class="line">    <span class="comment"># 512 neuron hidden layer</span></span><br><span class="line">    tf.keras.layers.Dense(<span class="number">512</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    <span class="comment"># Only 1 output neuron. It will contain a value from 0-1 where 0 for 1 class ('horses') and 1 for the other ('humans')</span></span><br><span class="line">    tf.keras.layers.Dense(<span class="number">1</span>, activation=<span class="string">'sigmoid'</span>)</span><br><span class="line">])</span><br></pre></td></tr></table></figure>
<pre><code>WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/resource_variable_ops.py:435: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.
Instructions for updating:
Colocations handled automatically by placer.
</code></pre><p>The model.summary() method call prints a summary of the NN </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model.summary()</span><br></pre></td></tr></table></figure>
<pre><code>_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
conv2d (Conv2D)              (None, 298, 298, 16)      448       
_________________________________________________________________
max_pooling2d (MaxPooling2D) (None, 149, 149, 16)      0         
_________________________________________________________________
conv2d_1 (Conv2D)            (None, 147, 147, 32)      4640      
_________________________________________________________________
max_pooling2d_1 (MaxPooling2 (None, 73, 73, 32)        0         
_________________________________________________________________
conv2d_2 (Conv2D)            (None, 71, 71, 64)        18496     
_________________________________________________________________
max_pooling2d_2 (MaxPooling2 (None, 35, 35, 64)        0         
_________________________________________________________________
conv2d_3 (Conv2D)            (None, 33, 33, 64)        36928     
_________________________________________________________________
max_pooling2d_3 (MaxPooling2 (None, 16, 16, 64)        0         
_________________________________________________________________
conv2d_4 (Conv2D)            (None, 14, 14, 64)        36928     
_________________________________________________________________
max_pooling2d_4 (MaxPooling2 (None, 7, 7, 64)          0         
_________________________________________________________________
flatten (Flatten)            (None, 3136)              0         
_________________________________________________________________
dense (Dense)                (None, 512)               1606144   
_________________________________________________________________
dense_1 (Dense)              (None, 1)                 513       
=================================================================
Total params: 1,704,097
Trainable params: 1,704,097
Non-trainable params: 0
_________________________________________________________________
</code></pre><p>The “output shape” column shows how the size of your feature map evolves in each successive layer. The convolution layers reduce the size of the feature maps by a bit due to padding, and each pooling layer halves the dimensions.</p>
<p>Next, we’ll configure the specifications for model training. We will train our model with the <code>binary_crossentropy</code> loss, because it’s a binary classification problem and our final activation is a sigmoid. (For a refresher on loss metrics, see the <a href="https://developers.google.com/machine-learning/crash-course/descending-into-ml/video-lecture" target="_blank" rel="noopener">Machine Learning Crash Course</a>.) We will use the <code>rmsprop</code> optimizer with a learning rate of <code>0.001</code>. During training, we will want to monitor classification accuracy.</p>
<p><strong>NOTE</strong>: In this case, using the <a href="https://wikipedia.org/wiki/Stochastic_gradient_descent#RMSProp" target="_blank" rel="noopener">RMSprop optimization algorithm</a> is preferable to <a href="https://developers.google.com/machine-learning/glossary/#SGD" target="_blank" rel="noopener">stochastic gradient descent</a> (SGD), because RMSprop automates learning-rate tuning for us. (Other optimizers, such as <a href="https://wikipedia.org/wiki/Stochastic_gradient_descent#Adam" target="_blank" rel="noopener">Adam</a> and <a href="https://developers.google.com/machine-learning/glossary/#AdaGrad" target="_blank" rel="noopener">Adagrad</a>, also automatically adapt the learning rate during training, and would work equally well here.)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.keras.optimizers <span class="keyword">import</span> RMSprop</span><br><span class="line"></span><br><span class="line">model.compile(loss=<span class="string">'binary_crossentropy'</span>,</span><br><span class="line">              optimizer=RMSprop(lr=<span class="number">0.001</span>),</span><br><span class="line">              metrics=[<span class="string">'acc'</span>])</span><br></pre></td></tr></table></figure>
<h3 id="Data-Preprocessing"><a href="#Data-Preprocessing" class="headerlink" title="Data Preprocessing"></a>Data Preprocessing</h3><p>Let’s set up data generators that will read pictures in our source folders, convert them to <code>float32</code> tensors, and feed them (with their labels) to our network. We’ll have one generator for the training images and one for the validation images. Our generators will yield batches of images of size 300x300 and their labels (binary).</p>
<p>As you may already know, data that goes into neural networks should usually be normalized in some way to make it more amenable to processing by the network. (It is uncommon to feed raw pixels into a convnet.) In our case, we will preprocess our images by normalizing the pixel values to be in the <code>[0, 1]</code> range (originally all values are in the <code>[0, 255]</code> range).</p>
<p>In Keras this can be done via the <code>keras.preprocessing.image.ImageDataGenerator</code> class using the <code>rescale</code> parameter. This <code>ImageDataGenerator</code> class allows you to instantiate generators of augmented image batches (and their labels) via <code>.flow(data, labels)</code> or <code>.flow_from_directory(directory)</code>. These generators can then be used with the Keras model methods that accept data generators as inputs: <code>fit_generator</code>, <code>evaluate_generator</code>, and <code>predict_generator</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.keras.preprocessing.image <span class="keyword">import</span> ImageDataGenerator</span><br><span class="line"></span><br><span class="line"><span class="comment"># All images will be rescaled by 1./255</span></span><br><span class="line">train_datagen = ImageDataGenerator(rescale=<span class="number">1</span>/<span class="number">255</span>)</span><br><span class="line">validation_datagen = ImageDataGenerator(rescale=<span class="number">1</span>/<span class="number">255</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Flow training images in batches of 128 using train_datagen generator</span></span><br><span class="line">train_generator = train_datagen.flow_from_directory(</span><br><span class="line">        <span class="string">'/tmp/horse-or-human/'</span>,  <span class="comment"># This is the source directory for training images</span></span><br><span class="line">        target_size=(<span class="number">300</span>, <span class="number">300</span>),  <span class="comment"># All images will be resized to 150x150</span></span><br><span class="line">        batch_size=<span class="number">128</span>,</span><br><span class="line">        <span class="comment"># Since we use binary_crossentropy loss, we need binary labels</span></span><br><span class="line">        class_mode=<span class="string">'binary'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Flow training images in batches of 128 using train_datagen generator</span></span><br><span class="line">validation_generator = validation_datagen.flow_from_directory(</span><br><span class="line">        <span class="string">'/tmp/validation-horse-or-human/'</span>,  <span class="comment"># This is the source directory for training images</span></span><br><span class="line">        target_size=(<span class="number">300</span>, <span class="number">300</span>),  <span class="comment"># All images will be resized to 150x150</span></span><br><span class="line">        batch_size=<span class="number">32</span>,</span><br><span class="line">        <span class="comment"># Since we use binary_crossentropy loss, we need binary labels</span></span><br><span class="line">        class_mode=<span class="string">'binary'</span>)</span><br></pre></td></tr></table></figure>
<pre><code>Found 1027 images belonging to 2 classes.
Found 256 images belonging to 2 classes.
</code></pre><h3 id="Training"><a href="#Training" class="headerlink" title="Training"></a>Training</h3><p>Let’s train for 15 epochs — this may take a few minutes to run.</p>
<p>Do note the values per epoch.</p>
<p>The Loss and Accuracy are a great indication of progress of training. It’s making a guess as to the classification of the training data, and then measuring it against the known label, calculating the result. Accuracy is the portion of correct guesses. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">history = model.fit_generator(</span><br><span class="line">      train_generator,</span><br><span class="line">      steps_per_epoch=<span class="number">8</span>,  </span><br><span class="line">      epochs=<span class="number">15</span>,</span><br><span class="line">      verbose=<span class="number">1</span>,</span><br><span class="line">      validation_data = validation_generator,</span><br><span class="line">      validation_steps=<span class="number">8</span>)</span><br></pre></td></tr></table></figure>
<pre><code>WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/math_ops.py:3066: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.
Instructions for updating:
Use tf.cast instead.
Epoch 1/15
8/8 [==============================] - 2s 216ms/step - loss: 0.6814 - acc: 0.5000
9/9 [==============================] - 11s 1s/step - loss: 0.8579 - acc: 0.5268 - val_loss: 0.6814 - val_acc: 0.5000
Epoch 2/15
8/8 [==============================] - 2s 206ms/step - loss: 0.8800 - acc: 0.5000
9/9 [==============================] - 9s 955ms/step - loss: 0.6284 - acc: 0.5881 - val_loss: 0.8800 - val_acc: 0.5000
Epoch 3/15
8/8 [==============================] - 2s 207ms/step - loss: 0.6334 - acc: 0.5781
9/9 [==============================] - 8s 940ms/step - loss: 0.6655 - acc: 0.6602 - val_loss: 0.6334 - val_acc: 0.5781
Epoch 4/15
8/8 [==============================] - 2s 207ms/step - loss: 0.4119 - acc: 0.8711
9/9 [==============================] - 8s 938ms/step - loss: 0.5446 - acc: 0.7790 - val_loss: 0.4119 - val_acc: 0.8711
Epoch 5/15
8/8 [==============================] - 2s 206ms/step - loss: 1.3072 - acc: 0.8125
9/9 [==============================] - 9s 956ms/step - loss: 0.4118 - acc: 0.8189 - val_loss: 1.3072 - val_acc: 0.8125
Epoch 6/15
8/8 [==============================] - 2s 205ms/step - loss: 2.0815 - acc: 0.7852
9/9 [==============================] - 9s 960ms/step - loss: 0.1871 - acc: 0.9309 - val_loss: 2.0815 - val_acc: 0.7852
Epoch 7/15
8/8 [==============================] - 2s 208ms/step - loss: 1.7291 - acc: 0.7539
9/9 [==============================] - 9s 1s/step - loss: 0.6104 - acc: 0.8384 - val_loss: 1.7291 - val_acc: 0.7539
Epoch 8/15
8/8 [==============================] - 2s 211ms/step - loss: 1.3320 - acc: 0.8242
9/9 [==============================] - 9s 956ms/step - loss: 0.1349 - acc: 0.9406 - val_loss: 1.3320 - val_acc: 0.8242
Epoch 9/15
8/8 [==============================] - 2s 205ms/step - loss: 1.7191 - acc: 0.7969
9/9 [==============================] - 8s 942ms/step - loss: 0.1120 - acc: 0.9581 - val_loss: 1.7191 - val_acc: 0.7969
Epoch 10/15
8/8 [==============================] - 2s 201ms/step - loss: 0.3554 - acc: 0.9062
9/9 [==============================] - 8s 938ms/step - loss: 0.0666 - acc: 0.9718 - val_loss: 0.3554 - val_acc: 0.9062
Epoch 11/15
8/8 [==============================] - 2s 205ms/step - loss: 1.1811 - acc: 0.8398
9/9 [==============================] - 8s 941ms/step - loss: 0.1556 - acc: 0.9669 - val_loss: 1.1811 - val_acc: 0.8398
Epoch 12/15
8/8 [==============================] - 2s 204ms/step - loss: 1.2945 - acc: 0.8398
9/9 [==============================] - 8s 938ms/step - loss: 0.0237 - acc: 0.9932 - val_loss: 1.2945 - val_acc: 0.8398
Epoch 13/15
8/8 [==============================] - 2s 203ms/step - loss: 1.0270 - acc: 0.8945
9/9 [==============================] - 9s 969ms/step - loss: 0.0034 - acc: 1.0000 - val_loss: 1.0270 - val_acc: 0.8945
Epoch 14/15
8/8 [==============================] - 2s 203ms/step - loss: 0.8244 - acc: 0.7773
9/9 [==============================] - 8s 940ms/step - loss: 0.5428 - acc: 0.9007 - val_loss: 0.8244 - val_acc: 0.7773
Epoch 15/15
8/8 [==============================] - 2s 207ms/step - loss: 1.0451 - acc: 0.8633
9/9 [==============================] - 9s 946ms/step - loss: 0.0516 - acc: 0.9873 - val_loss: 1.0451 - val_acc: 0.8633
</code></pre><h3 id="Running-the-Model"><a href="#Running-the-Model" class="headerlink" title="Running the Model"></a>Running the Model</h3><p>Let’s now take a look at actually running a prediction using the model. This code will allow you to choose 1 or more files from your file system, it will then upload them, and run them through the model, giving an indication of whether the object is a horse or a human.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> google.colab <span class="keyword">import</span> files</span><br><span class="line"><span class="keyword">from</span> keras.preprocessing <span class="keyword">import</span> image</span><br><span class="line"></span><br><span class="line">uploaded = files.upload()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> fn <span class="keyword">in</span> uploaded.keys():</span><br><span class="line"> </span><br><span class="line">  <span class="comment"># predicting images</span></span><br><span class="line">  path = <span class="string">'/content/'</span> + fn</span><br><span class="line">  img = image.load_img(path, target_size=(<span class="number">300</span>, <span class="number">300</span>))</span><br><span class="line">  x = image.img_to_array(img)</span><br><span class="line">  x = np.expand_dims(x, axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  images = np.vstack([x])</span><br><span class="line">  classes = model.predict(images, batch_size=<span class="number">10</span>)</span><br><span class="line">  print(classes[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">if</span> classes[<span class="number">0</span>]&gt;<span class="number">0.5</span>:</span><br><span class="line">    print(fn + <span class="string">" is a human"</span>)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    print(fn + <span class="string">" is a horse"</span>)</span><br></pre></td></tr></table></figure>
<p><input type="file" id="files-c0467943-dbfc-4f9b-b3f2-4f00403096db" name="files[]" multiple disabled></p>
<p><output id="result-c0467943-dbfc-4f9b-b3f2-4f00403096db"><br> Upload widget is only available when the cell has been executed in the<br> current browser session. Please rerun this cell to enable.
 </output><br> <script src="/nbextensions/google.colab/files.js"></script> </p>
<pre><code>Saving zhenjianzhao.jpg to zhenjianzhao (3).jpg
[0.]
zhenjianzhao.jpg is a horse
</code></pre><h3 id="Visualizing-Intermediate-Representations"><a href="#Visualizing-Intermediate-Representations" class="headerlink" title="Visualizing Intermediate Representations"></a>Visualizing Intermediate Representations</h3><p>To get a feel for what kind of features our convnet has learned, one fun thing to do is to visualize how an input gets transformed as it goes through the convnet.</p>
<p>Let’s pick a random image from the training set, and then generate a figure where each row is the output of a layer, and each image in the row is a specific filter in that output feature map. Rerun this cell to generate intermediate representations for a variety of training images.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.preprocessing.image <span class="keyword">import</span> img_to_array, load_img</span><br><span class="line"></span><br><span class="line"><span class="comment"># Let's define a new Model that will take an image as input, and will output</span></span><br><span class="line"><span class="comment"># intermediate representations for all layers in the previous model after</span></span><br><span class="line"><span class="comment"># the first.</span></span><br><span class="line">successive_outputs = [layer.output <span class="keyword">for</span> layer <span class="keyword">in</span> model.layers[<span class="number">1</span>:]]</span><br><span class="line"><span class="comment">#visualization_model = Model(img_input, successive_outputs)</span></span><br><span class="line">visualization_model = tf.keras.models.Model(inputs = model.input, outputs = successive_outputs)</span><br><span class="line"><span class="comment"># Let's prepare a random input image from the training set.</span></span><br><span class="line">horse_img_files = [os.path.join(train_horse_dir, f) <span class="keyword">for</span> f <span class="keyword">in</span> train_horse_names]</span><br><span class="line">human_img_files = [os.path.join(train_human_dir, f) <span class="keyword">for</span> f <span class="keyword">in</span> train_human_names]</span><br><span class="line">img_path = random.choice(horse_img_files + human_img_files)</span><br><span class="line"></span><br><span class="line">img = load_img(img_path, target_size=(<span class="number">300</span>, <span class="number">300</span>))  <span class="comment"># this is a PIL image</span></span><br><span class="line">x = img_to_array(img)  <span class="comment"># Numpy array with shape (150, 150, 3)</span></span><br><span class="line">x = x.reshape((<span class="number">1</span>,) + x.shape)  <span class="comment"># Numpy array with shape (1, 150, 150, 3)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Rescale by 1/255</span></span><br><span class="line">x /= <span class="number">255</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Let's run our image through our network, thus obtaining all</span></span><br><span class="line"><span class="comment"># intermediate representations for this image.</span></span><br><span class="line">successive_feature_maps = visualization_model.predict(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># These are the names of the layers, so can have them as part of our plot</span></span><br><span class="line">layer_names = [layer.name <span class="keyword">for</span> layer <span class="keyword">in</span> model.layers]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Now let's display our representations</span></span><br><span class="line"><span class="keyword">for</span> layer_name, feature_map <span class="keyword">in</span> zip(layer_names, successive_feature_maps):</span><br><span class="line">  <span class="keyword">if</span> len(feature_map.shape) == <span class="number">4</span>:</span><br><span class="line">    <span class="comment"># Just do this for the conv / maxpool layers, not the fully-connected layers</span></span><br><span class="line">    n_features = feature_map.shape[<span class="number">-1</span>]  <span class="comment"># number of features in feature map</span></span><br><span class="line">    <span class="comment"># The feature map has shape (1, size, size, n_features)</span></span><br><span class="line">    size = feature_map.shape[<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># We will tile our images in this matrix</span></span><br><span class="line">    display_grid = np.zeros((size, size * n_features))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n_features):</span><br><span class="line">      <span class="comment"># Postprocess the feature to make it visually palatable</span></span><br><span class="line">      x = feature_map[<span class="number">0</span>, :, :, i]</span><br><span class="line">      x -= x.mean()</span><br><span class="line">      x /= x.std()</span><br><span class="line">      x *= <span class="number">64</span></span><br><span class="line">      x += <span class="number">128</span></span><br><span class="line">      x = np.clip(x, <span class="number">0</span>, <span class="number">255</span>).astype(<span class="string">'uint8'</span>)</span><br><span class="line">      <span class="comment"># We'll tile each filter into this big horizontal grid</span></span><br><span class="line">      display_grid[:, i * size : (i + <span class="number">1</span>) * size] = x</span><br><span class="line">    <span class="comment"># Display the grid</span></span><br><span class="line">    scale = <span class="number">20.</span> / n_features</span><br><span class="line">    plt.figure(figsize=(scale * n_features, scale))</span><br><span class="line">    plt.title(layer_name)</span><br><span class="line">    plt.grid(<span class="keyword">False</span>)</span><br><span class="line">    plt.imshow(display_grid, aspect=<span class="string">'auto'</span>, cmap=<span class="string">'viridis'</span>)</span><br></pre></td></tr></table></figure>
<pre><code>/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:43: RuntimeWarning: invalid value encountered in true_divide
</code></pre><p><img src="output_31_1.png" alt="png"></p>
<p><img src="output_31_2.png" alt="png"></p>
<p><img src="output_31_3.png" alt="png"></p>
<p><img src="output_31_4.png" alt="png"></p>
<p><img src="output_31_5.png" alt="png"></p>
<p><img src="output_31_6.png" alt="png"></p>
<p><img src="output_31_7.png" alt="png"></p>
<p><img src="output_31_8.png" alt="png"></p>
<p><img src="output_31_9.png" alt="png"></p>
<p>As you can see we go from the raw pixels of the images to increasingly abstract and compact representations. The representations downstream start highlighting what the network pays attention to, and they show fewer and fewer features being “activated”; most are set to zero. This is called “sparsity.” Representation sparsity is a key feature of deep learning.</p>
<p>These representations carry increasingly less information about the original pixels of the image, but increasingly refined information about the class of the image. You can think of a convnet (or a deep network in general) as an information distillation pipeline.</p>
<h2 id="Clean-Up"><a href="#Clean-Up" class="headerlink" title="Clean Up"></a>Clean Up</h2><p>Before running the next exercise, run the following cell to terminate the kernel and free memory resources:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os, signal</span><br><span class="line">os.kill(os.getpid(), signal.SIGKILL)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Project</tag>
        <tag>Computer Vision</tag>
        <tag>Convolutional Neural Networks</tag>
      </tags>
  </entry>
  <entry>
    <title>Exploring How Convolutions and Pooling work</title>
    <url>/Exploring-how-Convolutions-and-Pooling-work/2019/05/23/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line"></span><br><span class="line">from tensorflow.keras import layers</span><br><span class="line">from tensorflow.keras import Model</span><br><span class="line">!wget --no-check-certificate \</span><br><span class="line">    https://storage.googleapis.com/mledu-datasets/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5 \</span><br><span class="line">    -O /tmp/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5</span><br><span class="line">  </span><br><span class="line">from tensorflow.keras.applications.inception_v3 import InceptionV3</span><br><span class="line"></span><br><span class="line">local_weights_file = &apos;/tmp/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5&apos;</span><br><span class="line"></span><br><span class="line">pre_trained_model = InceptionV3(input_shape = (150, 150, 3), </span><br><span class="line">                                include_top = False, </span><br><span class="line">                                weights = None)</span><br><span class="line"></span><br><span class="line">pre_trained_model.load_weights(local_weights_file)</span><br><span class="line"></span><br><span class="line">for layer in pre_trained_model.layers:</span><br><span class="line">  layer.trainable = False</span><br><span class="line">  </span><br><span class="line"># pre_trained_model.summary()</span><br><span class="line"></span><br><span class="line">last_layer = pre_trained_model.get_layer(&apos;mixed7&apos;)</span><br><span class="line">print(&apos;last layer output shape: &apos;, last_layer.output_shape)</span><br><span class="line">last_output = last_layer.output</span><br></pre></td></tr></table></figure>
<pre><code>--2019-02-13 14:04:55--  https://storage.googleapis.com/mledu-datasets/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5
Resolving storage.googleapis.com... 2607:f8b0:4003:c05::80, 64.233.168.128
Connecting to storage.googleapis.com|2607:f8b0:4003:c05::80|:443... connected.
WARNING: cannot verify storage.googleapis.com&#39;s certificate, issued by &#39;CN=Google Internet Authority G3,O=Google Trust Services,C=US&#39;:
  Unable to locally verify the issuer&#39;s authority.
HTTP request sent, awaiting response... 200 OK
Length: 87910968 (84M) [application/x-hdf]
Saving to: &#39;/tmp/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5&#39;

/tmp/inception_v3_w 100%[=====================&gt;]  83.84M  75.6MB/s   in 1.1s   

2019-02-13 14:04:56 (75.6 MB/s) - &#39;/tmp/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5&#39; saved [87910968/87910968]

(&#39;last layer output shape: &#39;, (None, 7, 7, 768))
</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from tensorflow.keras.optimizers import RMSprop</span><br><span class="line"></span><br><span class="line"># Flatten the output layer to 1 dimension</span><br><span class="line">x = layers.Flatten()(last_output)</span><br><span class="line"># Add a fully connected layer with 1,024 hidden units and ReLU activation</span><br><span class="line">x = layers.Dense(1024, activation=&apos;relu&apos;)(x)</span><br><span class="line"># Add a dropout rate of 0.2</span><br><span class="line">x = layers.Dropout(0.2)(x)                  </span><br><span class="line"># Add a final sigmoid layer for classification</span><br><span class="line">x = layers.Dense  (1, activation=&apos;sigmoid&apos;)(x)           </span><br><span class="line"></span><br><span class="line">model = Model( pre_trained_model.input, x) </span><br><span class="line"></span><br><span class="line">model.compile(optimizer = RMSprop(lr=0.0001), </span><br><span class="line">              loss = &apos;binary_crossentropy&apos;, </span><br><span class="line">              metrics = [&apos;acc&apos;])</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">!wget --no-check-certificate \</span><br><span class="line">        https://storage.googleapis.com/mledu-datasets/cats_and_dogs_filtered.zip \</span><br><span class="line">       -O /tmp/cats_and_dogs_filtered.zip</span><br><span class="line"></span><br><span class="line">from tensorflow.keras.preprocessing.image import ImageDataGenerator</span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line">import zipfile</span><br><span class="line"></span><br><span class="line">local_zip = &apos;//tmp/cats_and_dogs_filtered.zip&apos;</span><br><span class="line"></span><br><span class="line">zip_ref = zipfile.ZipFile(local_zip, &apos;r&apos;)</span><br><span class="line"></span><br><span class="line">zip_ref.extractall(&apos;/tmp&apos;)</span><br><span class="line">zip_ref.close()</span><br><span class="line"></span><br><span class="line"># Define our example directories and files</span><br><span class="line">base_dir = &apos;/tmp/cats_and_dogs_filtered&apos;</span><br><span class="line"></span><br><span class="line">train_dir = os.path.join( base_dir, &apos;train&apos;)</span><br><span class="line">validation_dir = os.path.join( base_dir, &apos;validation&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">train_cats_dir = os.path.join(train_dir, &apos;cats&apos;) # Directory with our training cat pictures</span><br><span class="line">train_dogs_dir = os.path.join(train_dir, &apos;dogs&apos;) # Directory with our training dog pictures</span><br><span class="line">validation_cats_dir = os.path.join(validation_dir, &apos;cats&apos;) # Directory with our validation cat pictures</span><br><span class="line">validation_dogs_dir = os.path.join(validation_dir, &apos;dogs&apos;)# Directory with our validation dog pictures</span><br><span class="line"></span><br><span class="line">train_cat_fnames = os.listdir(train_cats_dir)</span><br><span class="line">train_dog_fnames = os.listdir(train_dogs_dir)</span><br><span class="line"></span><br><span class="line"># Add our data-augmentation parameters to ImageDataGenerator</span><br><span class="line">train_datagen = ImageDataGenerator(rescale = 1./255.,</span><br><span class="line">                                   rotation_range = 40,</span><br><span class="line">                                   width_shift_range = 0.2,</span><br><span class="line">                                   height_shift_range = 0.2,</span><br><span class="line">                                   shear_range = 0.2,</span><br><span class="line">                                   zoom_range = 0.2,</span><br><span class="line">                                   horizontal_flip = True)</span><br><span class="line"></span><br><span class="line"># Note that the validation data should not be augmented!</span><br><span class="line">test_datagen = ImageDataGenerator( rescale = 1.0/255. )</span><br><span class="line"></span><br><span class="line"># Flow training images in batches of 20 using train_datagen generator</span><br><span class="line">train_generator = train_datagen.flow_from_directory(train_dir,</span><br><span class="line">                                                    batch_size = 20,</span><br><span class="line">                                                    class_mode = &apos;binary&apos;, </span><br><span class="line">                                                    target_size = (150, 150))     </span><br><span class="line"></span><br><span class="line"># Flow validation images in batches of 20 using test_datagen generator</span><br><span class="line">validation_generator =  test_datagen.flow_from_directory( validation_dir,</span><br><span class="line">                                                          batch_size  = 20,</span><br><span class="line">                                                          class_mode  = &apos;binary&apos;, </span><br><span class="line">                                                          target_size = (150, 150))</span><br></pre></td></tr></table></figure>
<pre><code>--2019-02-13 14:05:24--  https://storage.googleapis.com/mledu-datasets/cats_and_dogs_filtered.zip
Resolving storage.googleapis.com... 2607:f8b0:4003:c0a::80, 173.194.223.128
Connecting to storage.googleapis.com|2607:f8b0:4003:c0a::80|:443... connected.
WARNING: cannot verify storage.googleapis.com&#39;s certificate, issued by &#39;CN=Google Internet Authority G3,O=Google Trust Services,C=US&#39;:
  Unable to locally verify the issuer&#39;s authority.
HTTP request sent, awaiting response... 200 OK
Length: 68606236 (65M) [application/zip]
Saving to: &#39;/tmp/cats_and_dogs_filtered.zip&#39;

/tmp/cats_and_dogs_ 100%[=====================&gt;]  65.43M   168MB/s   in 0.4s   

2019-02-13 14:05:24 (168 MB/s) - &#39;/tmp/cats_and_dogs_filtered.zip&#39; saved [68606236/68606236]

Found 2000 images belonging to 2 classes.
Found 1000 images belonging to 2 classes.
</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">history = model.fit_generator(</span><br><span class="line">            train_generator,</span><br><span class="line">            validation_data = validation_generator,</span><br><span class="line">            steps_per_epoch = 100,</span><br><span class="line">            epochs = 20,</span><br><span class="line">            validation_steps = 50,</span><br><span class="line">            verbose = 2)</span><br></pre></td></tr></table></figure>
<pre><code>Epoch 1/20
100/100 - 17s - loss: 0.5283 - acc: 0.7525 - val_loss: 0.3843 - val_acc: 0.8940
Epoch 2/20
100/100 - 14s - loss: 0.3678 - acc: 0.8340 - val_loss: 0.2040 - val_acc: 0.9480
Epoch 3/20
100/100 - 15s - loss: 0.3352 - acc: 0.8535 - val_loss: 0.3987 - val_acc: 0.9270
Epoch 4/20
100/100 - 15s - loss: 0.3432 - acc: 0.8550 - val_loss: 0.2987 - val_acc: 0.9440
Epoch 5/20
100/100 - 15s - loss: 0.3391 - acc: 0.8640 - val_loss: 0.3390 - val_acc: 0.9450
Epoch 6/20
100/100 - 14s - loss: 0.3135 - acc: 0.8680 - val_loss: 0.3465 - val_acc: 0.9480
Epoch 7/20
100/100 - 14s - loss: 0.3113 - acc: 0.8700 - val_loss: 0.3115 - val_acc: 0.9530
Epoch 8/20
100/100 - 15s - loss: 0.2901 - acc: 0.8820 - val_loss: 0.5042 - val_acc: 0.9370
Epoch 9/20
100/100 - 15s - loss: 0.2912 - acc: 0.8865 - val_loss: 0.3065 - val_acc: 0.9620
Epoch 10/20
100/100 - 15s - loss: 0.2944 - acc: 0.8760 - val_loss: 0.2641 - val_acc: 0.9640
Epoch 11/20
100/100 - 14s - loss: 0.2831 - acc: 0.8810 - val_loss: 0.4515 - val_acc: 0.9450
Epoch 12/20
100/100 - 15s - loss: 0.2682 - acc: 0.8895 - val_loss: 0.3231 - val_acc: 0.9580
Epoch 13/20
100/100 - 15s - loss: 0.2748 - acc: 0.8840 - val_loss: 0.2427 - val_acc: 0.9680
Epoch 14/20
100/100 - 15s - loss: 0.2669 - acc: 0.8945 - val_loss: 0.3075 - val_acc: 0.9630
Epoch 15/20
100/100 - 15s - loss: 0.2732 - acc: 0.8910 - val_loss: 0.2629 - val_acc: 0.9620
Epoch 16/20
100/100 - 14s - loss: 0.2634 - acc: 0.8940 - val_loss: 0.3864 - val_acc: 0.9570
Epoch 17/20
100/100 - 14s - loss: 0.2473 - acc: 0.9040 - val_loss: 0.2648 - val_acc: 0.9670
Epoch 18/20
100/100 - 15s - loss: 0.2767 - acc: 0.8890 - val_loss: 0.2519 - val_acc: 0.9620
Epoch 19/20
100/100 - 17s - loss: 0.2660 - acc: 0.8990 - val_loss: 0.2495 - val_acc: 0.9680
Epoch 20/20
100/100 - 15s - loss: 0.2535 - acc: 0.9020 - val_loss: 0.2682 - val_acc: 0.9670
</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">acc = history.history[&apos;acc&apos;]</span><br><span class="line">val_acc = history.history[&apos;val_acc&apos;]</span><br><span class="line">loss = history.history[&apos;loss&apos;]</span><br><span class="line">val_loss = history.history[&apos;val_loss&apos;]</span><br><span class="line"></span><br><span class="line">epochs = range(len(acc))</span><br><span class="line"></span><br><span class="line">plt.plot(epochs, acc, &apos;r&apos;, label=&apos;Training accuracy&apos;)</span><br><span class="line">plt.plot(epochs, val_acc, &apos;b&apos;, label=&apos;Validation accuracy&apos;)</span><br><span class="line">plt.title(&apos;Training and validation accuracy&apos;)</span><br><span class="line">plt.legend(loc=0)</span><br><span class="line">plt.figure()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="output_4_0.png" alt="png"></p>
<pre><code>&lt;matplotlib.figure.Figure at 0x7ff19c530b90&gt;
</code></pre>]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Project</tag>
        <tag>Computer Vision</tag>
        <tag>Convolutional Neural Networks</tag>
      </tags>
  </entry>
  <entry>
    <title>Improving Computer Vision Accuracy using Convolutions</title>
    <url>/Improving-Computer-Vision-Accuracy-using-Convolutions/2019/05/23/</url>
    <content><![CDATA[<h1 id="Improving-Computer-Vision-Accuracy-using-Convolutions"><a href="#Improving-Computer-Vision-Accuracy-using-Convolutions" class="headerlink" title="Improving Computer Vision Accuracy using Convolutions"></a>Improving Computer Vision Accuracy using Convolutions</h1><p>In the previous lessons you saw how to do fashion recognition using a Deep Neural Network (DNN) containing three layers — the input layer (in the shape of the data), the output layer (in the shape of the desired output) and a hidden layer. You experimented with the impact of different sized of hidden layer, number of training epochs etc on the final accuracy.</p>
<p>For convenience, here’s the entire code again. Run it and take a note of the test accuracy that is printed out at the end. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">mnist = tf.keras.datasets.fashion_mnist</span><br><span class="line">(training_images, training_labels), (test_images, test_labels) = mnist.load_data()</span><br><span class="line">training_images=training_images / <span class="number">255.0</span></span><br><span class="line">test_images=test_images / <span class="number">255.0</span></span><br><span class="line">model = tf.keras.models.Sequential([</span><br><span class="line">  tf.keras.layers.Flatten(),</span><br><span class="line">  tf.keras.layers.Dense(<span class="number">128</span>, activation=tf.nn.relu),</span><br><span class="line">  tf.keras.layers.Dense(<span class="number">10</span>, activation=tf.nn.softmax)</span><br><span class="line">])</span><br><span class="line">model.compile(optimizer=<span class="string">'adam'</span>, loss=<span class="string">'sparse_categorical_crossentropy'</span>, metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line">model.fit(training_images, training_labels, epochs=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">test_loss = model.evaluate(test_images, test_labels)</span><br></pre></td></tr></table></figure>
<pre><code>Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-labels-idx1-ubyte.gz
32768/29515 [=================================] - 0s 0us/step
Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-images-idx3-ubyte.gz
26427392/26421880 [==============================] - 0s 0us/step
Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-labels-idx1-ubyte.gz
8192/5148 [===============================================] - 0s 0us/step
Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-images-idx3-ubyte.gz
4423680/4422102 [==============================] - 0s 0us/step
WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/resource_variable_ops.py:435: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.
Instructions for updating:
Colocations handled automatically by placer.
Epoch 1/5
60000/60000 [==============================] - 8s 131us/sample - loss: 0.5016 - acc: 0.8235
Epoch 2/5
60000/60000 [==============================] - 7s 119us/sample - loss: 0.3723 - acc: 0.8658
Epoch 3/5
60000/60000 [==============================] - 7s 116us/sample - loss: 0.3366 - acc: 0.8770
Epoch 4/5
60000/60000 [==============================] - 7s 115us/sample - loss: 0.3108 - acc: 0.8873
Epoch 5/5
60000/60000 [==============================] - 7s 113us/sample - loss: 0.2961 - acc: 0.8911
10000/10000 [==============================] - 0s 43us/sample - loss: 0.3413 - acc: 0.8808
</code></pre><p>Your accuracy is probably about 89% on training and 87% on validation…not bad…But how do you make that even better? One way is to use something called Convolutions. I’m not going to details on Convolutions here, but the ultimate concept is that they narrow down the content of the image to focus on specific, distinct, details. </p>
<p>If you’ve ever done image processing using a filter (like this: <a href="https://en.wikipedia.org/wiki/Kernel_(image_processing" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Kernel_(image_processing</a>)) then convolutions will look very familiar.</p>
<p>In short, you take an array (usually 3x3 or 5x5) and pass it over the image. By changing the underlying pixels based on the formula within that matrix, you can do things like edge detection. So, for example, if you look at the above link, you’ll see a 3x3 that is defined for edge detection where the middle cell is 8, and all of its neighbors are -1. In this case, for each pixel, you would multiply its value by 8, then subtract the value of each neighbor. Do this for every pixel, and you’ll end up with a new image that has the edges enhanced.</p>
<p>This is perfect for computer vision, because often it’s features that can get highlighted like this that distinguish one item for another, and the amount of information needed is then much less…because you’ll just train on the highlighted features.</p>
<p>That’s the concept of Convolutional Neural Networks. Add some layers to do convolution before you have the dense layers, and then the information going to the dense layers is more focussed, and possibly more accurate.</p>
<p>Run the below code — this is the same neural network as earlier, but this time with Convolutional layers added first. It will take longer, but look at the impact on the accuracy:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">print(tf.__version__)</span><br><span class="line">mnist = tf.keras.datasets.fashion_mnist</span><br><span class="line">(training_images, training_labels), (test_images, test_labels) = mnist.load_data()</span><br><span class="line">training_images=training_images.reshape(<span class="number">60000</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)</span><br><span class="line">training_images=training_images / <span class="number">255.0</span></span><br><span class="line">test_images = test_images.reshape(<span class="number">10000</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)</span><br><span class="line">test_images=test_images/<span class="number">255.0</span></span><br><span class="line">model = tf.keras.models.Sequential([</span><br><span class="line">  tf.keras.layers.Conv2D(<span class="number">64</span>, (<span class="number">3</span>,<span class="number">3</span>), activation=<span class="string">'relu'</span>, input_shape=(<span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)),</span><br><span class="line">  tf.keras.layers.MaxPooling2D(<span class="number">2</span>, <span class="number">2</span>),</span><br><span class="line">  tf.keras.layers.Conv2D(<span class="number">64</span>, (<span class="number">3</span>,<span class="number">3</span>), activation=<span class="string">'relu'</span>),</span><br><span class="line">  tf.keras.layers.MaxPooling2D(<span class="number">2</span>,<span class="number">2</span>),</span><br><span class="line">  tf.keras.layers.Flatten(),</span><br><span class="line">  tf.keras.layers.Dense(<span class="number">128</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">  tf.keras.layers.Dense(<span class="number">10</span>, activation=<span class="string">'softmax'</span>)</span><br><span class="line">])</span><br><span class="line">model.compile(optimizer=<span class="string">'adam'</span>, loss=<span class="string">'sparse_categorical_crossentropy'</span>, metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line">model.summary()</span><br><span class="line">model.fit(training_images, training_labels, epochs=<span class="number">5</span>)</span><br><span class="line">test_loss = model.evaluate(test_images, test_labels)</span><br></pre></td></tr></table></figure>
<pre><code>1.13.1
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
conv2d (Conv2D)              (None, 26, 26, 64)        640       
_________________________________________________________________
max_pooling2d (MaxPooling2D) (None, 13, 13, 64)        0         
_________________________________________________________________
conv2d_1 (Conv2D)            (None, 11, 11, 64)        36928     
_________________________________________________________________
max_pooling2d_1 (MaxPooling2 (None, 5, 5, 64)          0         
_________________________________________________________________
flatten_1 (Flatten)          (None, 1600)              0         
_________________________________________________________________
dense_2 (Dense)              (None, 128)               204928    
_________________________________________________________________
dense_3 (Dense)              (None, 10)                1290      
=================================================================
Total params: 243,786
Trainable params: 243,786
Non-trainable params: 0
_________________________________________________________________
Epoch 1/5
60000/60000 [==============================] - 106s 2ms/sample - loss: 0.4447 - acc: 0.8383
Epoch 2/5
60000/60000 [==============================] - 104s 2ms/sample - loss: 0.3024 - acc: 0.8891
Epoch 3/5
60000/60000 [==============================] - 105s 2ms/sample - loss: 0.2557 - acc: 0.9052
Epoch 4/5
60000/60000 [==============================] - 103s 2ms/sample - loss: 0.2237 - acc: 0.9165
Epoch 5/5
60000/60000 [==============================] - 103s 2ms/sample - loss: 0.1969 - acc: 0.9260
10000/10000 [==============================] - 5s 509us/sample - loss: 0.2639 - acc: 0.9047
</code></pre><p>It’s likely gone up to about 93% on the training data and 91% on the validation data. </p>
<p>That’s significant, and a step in the right direction!</p>
<p>Try running it for more epochs — say about 20, and explore the results! But while the results might seem really good, the validation results may actually go down, due to something called ‘overfitting’ which will be discussed later. </p>
<p>(In a nutshell, ‘overfitting’ occurs when the network learns the data from the training set really well, but it’s too specialised to only that data, and as a result is less effective at seeing <em>other</em> data. For example, if all your life you only saw red shoes, then when you see a red shoe you would be very good at identifying it, but blue suade shoes might confuse you…and you know you should never mess with my blue suede shoes.)</p>
<p>Then, look at the code again, and see, step by step how the Convolutions were built:</p>
<p>Step 1 is to gather the data. You’ll notice that there’s a bit of a change here in that the training data needed to be reshaped. That’s because the first convolution expects a single tensor containing everything, so instead of 60,000 28x28x1 items in a list, we have a single 4D list that is 60,000x28x28x1, and the same for the test images. If you don’t do this, you’ll get an error when training as the Convolutions do not recognize the shape. </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">mnist = tf.keras.datasets.fashion_mnist</span><br><span class="line">(training_images, training_labels), (test_images, test_labels) = mnist.load_data()</span><br><span class="line">training_images=training_images.reshape(60000, 28, 28, 1)</span><br><span class="line">training_images=training_images / 255.0</span><br><span class="line">test_images = test_images.reshape(10000, 28, 28, 1)</span><br><span class="line">test_images=test_images/255.0</span><br></pre></td></tr></table></figure>
<p>Next is to define your model. Now instead of the input layer at the top, you’re going to add a Convolution. The parameters are:</p>
<ol>
<li>The number of convolutions you want to generate. Purely arbitrary, but good to start with something in the order of 32</li>
<li>The size of the Convolution, in this case a 3x3 grid</li>
<li>The activation function to use — in this case we’ll use relu, which you might recall is the equivalent of returning x when x&gt;0, else returning 0</li>
<li>In the first layer, the shape of the input data.</li>
</ol>
<p>You’ll follow the Convolution with a MaxPooling layer which is then designed to compress the image, while maintaining the content of the features that were highlighted by the convlution. By specifying (2,2) for the MaxPooling, the effect is to quarter the size of the image. Without going into too much detail here, the idea is that it creates a 2x2 array of pixels, and picks the biggest one, thus turning 4 pixels into 1. It repeats this across the image, and in so doing halves the number of horizontal, and halves the number of vertical pixels, effectively reducing the image by 25%.</p>
<p>You can call model.summary() to see the size and shape of the network, and you’ll notice that after every MaxPooling layer, the image size is reduced in this way. </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">model = tf.keras.models.Sequential([</span><br><span class="line">  tf.keras.layers.Conv2D(32, (3,3), activation=&apos;relu&apos;, input_shape=(28, 28, 1)),</span><br><span class="line">  tf.keras.layers.MaxPooling2D(2, 2),</span><br></pre></td></tr></table></figure>
<p>Add another convolution</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tf.keras.layers.Conv2D(64, (3,3), activation=&apos;relu&apos;),</span><br><span class="line">tf.keras.layers.MaxPooling2D(2,2)</span><br></pre></td></tr></table></figure>
<p>Now flatten the output. After this you’ll just have the same DNN structure as the non convolutional version</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tf.keras.layers.Flatten(),</span><br></pre></td></tr></table></figure>
<p>The same 128 dense layers, and 10 output layers as in the pre-convolution example:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  tf.keras.layers.Dense(128, activation=&apos;relu&apos;),</span><br><span class="line">  tf.keras.layers.Dense(10, activation=&apos;softmax&apos;)</span><br><span class="line">])</span><br></pre></td></tr></table></figure>
<p>Now compile the model, call the fit method to do the training, and evaluate the loss and accuracy from the test set.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">model.compile(optimizer=&apos;adam&apos;, loss=&apos;sparse_categorical_crossentropy&apos;, metrics=[&apos;accuracy&apos;])</span><br><span class="line">model.fit(training_images, training_labels, epochs=5)</span><br><span class="line">test_loss, test_acc = model.evaluate(test_images, test_labels)</span><br><span class="line">print(test_acc)</span><br></pre></td></tr></table></figure>
<h1 id="Visualizing-the-Convolutions-and-Pooling"><a href="#Visualizing-the-Convolutions-and-Pooling" class="headerlink" title="Visualizing the Convolutions and Pooling"></a>Visualizing the Convolutions and Pooling</h1><p>This code will show us the convolutions graphically. The print (test_labels[;100]) shows us the first 100 labels in the test set, and you can see that the ones at index 0, index 23 and index 28 are all the same value (9). They’re all shoes. Let’s take a look at the result of running the convolution on each, and you’ll begin to see common features between them emerge. Now, when the DNN is training on that data, it’s working with a lot less, and it’s perhaps finding a commonality between shoes based on this convolution/pooling combination.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(test_labels[:<span class="number">100</span>])</span><br></pre></td></tr></table></figure>
<pre><code>[9 2 1 1 6 1 4 6 5 7 4 5 7 3 4 1 2 4 8 0 2 5 7 9 1 4 6 0 9 3 8 8 3 3 8 0 7
 5 7 9 6 1 3 7 6 7 2 1 2 2 4 4 5 8 2 2 8 4 8 0 7 7 8 5 1 1 2 3 9 8 7 0 2 6
 2 3 1 2 8 4 1 8 5 9 5 0 3 2 0 6 5 3 6 7 1 8 0 1 4 2]
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">f, axarr = plt.subplots(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">FIRST_IMAGE=<span class="number">0</span></span><br><span class="line">SECOND_IMAGE=<span class="number">7</span></span><br><span class="line">THIRD_IMAGE=<span class="number">26</span></span><br><span class="line">CONVOLUTION_NUMBER = <span class="number">1</span> <span class="comment">## 64个 filter, 查看某一个filter</span></span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> models</span><br><span class="line">layer_outputs = [layer.output <span class="keyword">for</span> layer <span class="keyword">in</span> model.layers]</span><br><span class="line">print(len(layer_outputs))</span><br><span class="line">activation_model = tf.keras.models.Model(inputs = model.input, outputs = layer_outputs)</span><br><span class="line">print(len(activation_model.predict(test_images[FIRST_IMAGE].reshape(<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>))))</span><br><span class="line"></span><br><span class="line"><span class="comment">## check the x layers' ouyput</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">4</span>):</span><br><span class="line">  f1 = activation_model.predict(test_images[FIRST_IMAGE].reshape(<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>))[x]</span><br><span class="line">  axarr[<span class="number">0</span>,x].imshow(f1[<span class="number">0</span>, : , :, CONVOLUTION_NUMBER], cmap=<span class="string">'inferno'</span>)</span><br><span class="line">  axarr[<span class="number">0</span>,x].grid(<span class="keyword">False</span>)</span><br><span class="line">  f2 = activation_model.predict(test_images[SECOND_IMAGE].reshape(<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>))[x]</span><br><span class="line">  axarr[<span class="number">1</span>,x].imshow(f2[<span class="number">0</span>, : , :, CONVOLUTION_NUMBER], cmap=<span class="string">'inferno'</span>)</span><br><span class="line">  axarr[<span class="number">1</span>,x].grid(<span class="keyword">False</span>)</span><br><span class="line">  f3 = activation_model.predict(test_images[THIRD_IMAGE].reshape(<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>))[x]</span><br><span class="line">  axarr[<span class="number">2</span>,x].imshow(f3[<span class="number">0</span>, : , :, CONVOLUTION_NUMBER], cmap=<span class="string">'inferno'</span>)</span><br><span class="line">  axarr[<span class="number">2</span>,x].grid(<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure>
<pre><code>7
7
</code></pre><p><img src="output_13_1.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">f, axarr = plt.subplots(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">FIRST_IMAGE=<span class="number">0</span></span><br><span class="line">SECOND_IMAGE=<span class="number">7</span></span><br><span class="line">THIRD_IMAGE=<span class="number">26</span></span><br><span class="line">CONVOLUTION_NUMBER = <span class="number">2</span></span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> models</span><br><span class="line">layer_outputs = [layer.output <span class="keyword">for</span> layer <span class="keyword">in</span> model.layers]</span><br><span class="line">print(len(layer_outputs))</span><br><span class="line">activation_model = tf.keras.models.Model(inputs = model.input, outputs = layer_outputs)</span><br><span class="line">print(len(activation_model.predict(test_images[FIRST_IMAGE].reshape(<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>))))</span><br><span class="line"></span><br><span class="line"><span class="comment">## check the x layers' ouyput</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">4</span>):</span><br><span class="line">  f1 = activation_model.predict(test_images[FIRST_IMAGE].reshape(<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>))[x]</span><br><span class="line">  axarr[<span class="number">0</span>,x].imshow(f1[<span class="number">0</span>, : , :, CONVOLUTION_NUMBER], cmap=<span class="string">'inferno'</span>)</span><br><span class="line">  axarr[<span class="number">0</span>,x].grid(<span class="keyword">False</span>)</span><br><span class="line">  f2 = activation_model.predict(test_images[SECOND_IMAGE].reshape(<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>))[x]</span><br><span class="line">  axarr[<span class="number">1</span>,x].imshow(f2[<span class="number">0</span>, : , :, CONVOLUTION_NUMBER], cmap=<span class="string">'inferno'</span>)</span><br><span class="line">  axarr[<span class="number">1</span>,x].grid(<span class="keyword">False</span>)</span><br><span class="line">  f3 = activation_model.predict(test_images[THIRD_IMAGE].reshape(<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>))[x]</span><br><span class="line">  axarr[<span class="number">2</span>,x].imshow(f3[<span class="number">0</span>, : , :, CONVOLUTION_NUMBER], cmap=<span class="string">'inferno'</span>)</span><br><span class="line">  axarr[<span class="number">2</span>,x].grid(<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure>
<pre><code>7
7
</code></pre><p><img src="output_14_1.png" alt="png"></p>
<p>EXERCISES</p>
<ol>
<li><p>Try editing the convolutions. Change the 32s to either 16 or 64. What impact will this have on accuracy and/or training time.</p>
</li>
<li><p>Remove the final Convolution. What impact will this have on accuracy or training time?</p>
</li>
<li><p>How about adding more Convolutions? What impact do you think this will have? Experiment with it.</p>
</li>
<li><p>Remove all Convolutions but the first. What impact do you think this will have? Experiment with it. </p>
</li>
<li><p>In the previous lesson you implemented a callback to check on the loss function and to cancel training once it hit a certain amount. See if you can implement that here!</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">print(tf.__version__)</span><br><span class="line">mnist = tf.keras.datasets.mnist</span><br><span class="line">(training_images, training_labels), (test_images, test_labels) = mnist.load_data()</span><br><span class="line">training_images=training_images.reshape(<span class="number">60000</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)</span><br><span class="line">training_images=training_images / <span class="number">255.0</span></span><br><span class="line">test_images = test_images.reshape(<span class="number">10000</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)</span><br><span class="line">test_images=test_images/<span class="number">255.0</span></span><br><span class="line">model = tf.keras.models.Sequential([</span><br><span class="line">  tf.keras.layers.Conv2D(<span class="number">32</span>, (<span class="number">3</span>,<span class="number">3</span>), activation=<span class="string">'relu'</span>, input_shape=(<span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)),</span><br><span class="line">  tf.keras.layers.MaxPooling2D(<span class="number">2</span>, <span class="number">2</span>),</span><br><span class="line">  tf.keras.layers.Flatten(),</span><br><span class="line">  tf.keras.layers.Dense(<span class="number">128</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">  tf.keras.layers.Dense(<span class="number">10</span>, activation=<span class="string">'softmax'</span>)</span><br><span class="line">])</span><br><span class="line">model.compile(optimizer=<span class="string">'adam'</span>, loss=<span class="string">'sparse_categorical_crossentropy'</span>, metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line">model.fit(training_images, training_labels, epochs=<span class="number">10</span>)</span><br><span class="line">test_loss, test_acc = model.evaluate(test_images, test_labels)</span><br><span class="line">print(test_acc)</span><br></pre></td></tr></table></figure>
<pre><code>1.12.0
Epoch 1/10
60000/60000==============================] - 6s 104us/sample - loss: 0.1510 - acc: 0.9551
Epoch 2/10
60000/60000==============================] - 5s 79us/sample - loss: 0.0512 - acc: 0.9843
Epoch 3/10
60000/60000==============================] - 5s 77us/sample - loss: 0.0319 - acc: 0.9902
Epoch 4/10
60000/60000==============================] - 5s 78us/sample - loss: 0.0209 - acc: 0.9934
Epoch 5/10
60000/60000==============================] - 5s 78us/sample - loss: 0.0136 - acc: 0.9956
Epoch 6/10
60000/60000==============================] - 5s 78us/sample - loss: 0.0111 - acc: 0.9964
Epoch 7/10
60000/60000==============================] - 5s 79us/sample - loss: 0.0076 - acc: 0.9974
Epoch 8/10
60000/60000==============================] - 5s 78us/sample - loss: 0.0052 - acc: 0.9985
Epoch 9/10
60000/60000==============================] - 5s 81us/sample - loss: 0.0046 - acc: 0.9988
Epoch 10/10
60000/60000==============================] - 5s 81us/sample - loss: 0.0053 - acc: 0.9981
10000/10000==============================] - 1s 53us/sample - loss: 0.0583 - acc: 0.9873
0.9873
</code></pre>]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Project</tag>
        <tag>Computer Vision</tag>
        <tag>Convolutional Neural Networks</tag>
      </tags>
  </entry>
  <entry>
    <title>Beyond Hello World, A Computer Vision Example</title>
    <url>/Beyond-Hello-World-A-Computer-Vision-Example/2019/05/22/</url>
    <content><![CDATA[<h1 id="Beyond-Hello-World-A-Computer-Vision-Example"><a href="#Beyond-Hello-World-A-Computer-Vision-Example" class="headerlink" title="Beyond Hello World, A Computer Vision Example"></a>Beyond Hello World, A Computer Vision Example</h1><p>In the previous exercise you saw how to create a neural network that figured out the problem you were trying to solve. This gave an explicit example of learned behavior. Of course, in that instance, it was a bit of overkill because it would have been easier to write the function Y=2x-1 directly, instead of bothering with using Machine Learning to learn the relationship between X and Y for a fixed set of values, and extending that for all values.</p>
<p>But what about a scenario where writing rules like that is much more difficult — for example a computer vision problem? Let’s take a look at a scenario where we can recognize different items of clothing, trained from a dataset containing 10 different types.</p>
<h2 id="Start-Coding"><a href="#Start-Coding" class="headerlink" title="Start Coding"></a>Start Coding</h2><p>Let’s start with our import of TensorFlow</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">print(tf.__version__)</span><br></pre></td></tr></table></figure>
<pre><code>1.13.1
</code></pre><p>The Fashion MNIST data is available directly in the tf.keras datasets API. You load it like this:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mnist = tf.keras.datasets.fashion_mnist</span><br></pre></td></tr></table></figure>
<p>Calling load_data on this object will give you two sets of two lists, these will be the training and testing values for the graphics that contain the clothing items and their labels.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(training_images, training_labels), (test_images, test_labels) = mnist.load_data()</span><br></pre></td></tr></table></figure>
<pre><code>Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-labels-idx1-ubyte.gz
32768/29515 [=================================] - 0s 0us/step
40960/29515 [=========================================] - 0s 0us/step
Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-images-idx3-ubyte.gz
26427392/26421880 [==============================] - 0s 0us/step
26435584/26421880 [==============================] - 0s 0us/step
Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-labels-idx1-ubyte.gz
16384/5148 [===============================================================================================] - 0s 0us/step
Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-images-idx3-ubyte.gz
4423680/4422102 [==============================] - 0s 0us/step
4431872/4422102 [==============================] - 0s 0us/step
</code></pre><p>What does these values look like? Let’s print a training image, and a training label to see…Experiment with different indices in the array. For example, also take a look at index 42…that’s a a different boot than the one at index 0</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">plt.imshow(training_images[0])</span><br><span class="line">print(training_labels[0])</span><br><span class="line">print(training_images[0])</span><br></pre></td></tr></table></figure>
<pre><code>9
[[  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
    0   0   0   0   0   0   0   0   0   0]
 [  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
    0   0   0   0   0   0   0   0   0   0]
 [  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
    0   0   0   0   0   0   0   0   0   0]
 [  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0  13  73   0
    0   1   4   0   0   0   0   1   1   0]
 [  0   0   0   0   0   0   0   0   0   0   0   0   3   0  36 136 127  62
   54   0   0   0   1   3   4   0   0   3]
 [  0   0   0   0   0   0   0   0   0   0   0   0   6   0 102 204 176 134
  144 123  23   0   0   0   0  12  10   0]
 [  0   0   0   0   0   0   0   0   0   0   0   0   0   0 155 236 207 178
  107 156 161 109  64  23  77 130  72  15]
 [  0   0   0   0   0   0   0   0   0   0   0   1   0  69 207 223 218 216
  216 163 127 121 122 146 141  88 172  66]
 [  0   0   0   0   0   0   0   0   0   1   1   1   0 200 232 232 233 229
  223 223 215 213 164 127 123 196 229   0]
 [  0   0   0   0   0   0   0   0   0   0   0   0   0 183 225 216 223 228
  235 227 224 222 224 221 223 245 173   0]
 [  0   0   0   0   0   0   0   0   0   0   0   0   0 193 228 218 213 198
  180 212 210 211 213 223 220 243 202   0]
 [  0   0   0   0   0   0   0   0   0   1   3   0  12 219 220 212 218 192
  169 227 208 218 224 212 226 197 209  52]
 [  0   0   0   0   0   0   0   0   0   0   6   0  99 244 222 220 218 203
  198 221 215 213 222 220 245 119 167  56]
 [  0   0   0   0   0   0   0   0   0   4   0   0  55 236 228 230 228 240
  232 213 218 223 234 217 217 209  92   0]
 [  0   0   1   4   6   7   2   0   0   0   0   0 237 226 217 223 222 219
  222 221 216 223 229 215 218 255  77   0]
 [  0   3   0   0   0   0   0   0   0  62 145 204 228 207 213 221 218 208
  211 218 224 223 219 215 224 244 159   0]
 [  0   0   0   0  18  44  82 107 189 228 220 222 217 226 200 205 211 230
  224 234 176 188 250 248 233 238 215   0]
 [  0  57 187 208 224 221 224 208 204 214 208 209 200 159 245 193 206 223
  255 255 221 234 221 211 220 232 246   0]
 [  3 202 228 224 221 211 211 214 205 205 205 220 240  80 150 255 229 221
  188 154 191 210 204 209 222 228 225   0]
 [ 98 233 198 210 222 229 229 234 249 220 194 215 217 241  65  73 106 117
  168 219 221 215 217 223 223 224 229  29]
 [ 75 204 212 204 193 205 211 225 216 185 197 206 198 213 240 195 227 245
  239 223 218 212 209 222 220 221 230  67]
 [ 48 203 183 194 213 197 185 190 194 192 202 214 219 221 220 236 225 216
  199 206 186 181 177 172 181 205 206 115]
 [  0 122 219 193 179 171 183 196 204 210 213 207 211 210 200 196 194 191
  195 191 198 192 176 156 167 177 210  92]
 [  0   0  74 189 212 191 175 172 175 181 185 188 189 188 193 198 204 209
  210 210 211 188 188 194 192 216 170   0]
 [  2   0   0   0  66 200 222 237 239 242 246 243 244 221 220 193 191 179
  182 182 181 176 166 168  99  58   0   0]
 [  0   0   0   0   0   0   0  40  61  44  72  41  35   0   0   0   0   0
    0   0   0   0   0   0   0   0   0   0]
 [  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
    0   0   0   0   0   0   0   0   0   0]
 [  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
    0   0   0   0   0   0   0   0   0   0]]
</code></pre><p><img src="output_8_1.png" alt="png"></p>
<p>You’ll notice that all of the values in the number are between 0 and 255. If we are training a neural network, for various reasons it’s easier if we treat all values as between 0 and 1, a process called ‘<strong>normalizing</strong>‘…and fortunately in Python it’s easy to normalize a list like this without looping. You do it like this:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">training_images  = training_images / 255.0</span><br><span class="line">test_images = test_images / 255.0</span><br></pre></td></tr></table></figure>
<p>Now you might be wondering why there are 2 sets…training and testing — remember we spoke about this in the intro? The idea is to have 1 set of data for training, and then another set of data…that the model hasn’t yet seen…to see how good it would be at classifying values. After all, when you’re done, you’re going to want to try it out with data that it hadn’t previously seen!</p>
<p>Let’s now design the model. There’s quite a few new concepts here, but don’t worry, you’ll get the hang of them. </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">model = tf.keras.models.Sequential([tf.keras.layers.Flatten(), </span><br><span class="line">                                    tf.keras.layers.Dense(128, activation=tf.nn.relu), </span><br><span class="line">                                    tf.keras.layers.Dense(10, activation=tf.nn.softmax)])</span><br></pre></td></tr></table></figure>
<p><strong>Sequential</strong>: That defines a SEQUENCE of layers in the neural network</p>
<p><strong>Flatten</strong>: Remember earlier where our images were a square, when you printed them out? Flatten just takes that square and turns it into a 1 dimensional set.</p>
<p><strong>Dense</strong>: Adds a layer of neurons</p>
<p>Each layer of neurons need an <strong>activation function</strong> to tell them what to do. There’s lots of options, but just use these for now. </p>
<p><strong>Relu</strong> effectively means “If X&gt;0 return X, else return 0” — so what it does it it only passes values 0 or greater to the next layer in the network.</p>
<p><strong>Softmax</strong> takes a set of values, and effectively picks the biggest one, so, for example, if the output of the last layer looks like [0.1, 0.1, 0.05, 0.1, 9.5, 0.1, 0.05, 0.05, 0.05], it saves you from fishing through it looking for the biggest value, and turns it into [0,0,0,0,1,0,0,0,0] — The goal is to save a lot of coding!</p>
<p>The next thing to do, now the model is defined, is to actually build it. You do this by compiling it with an optimizer and loss function as before — and then you train it by calling <strong>model.fit </strong> asking it to fit your training data to your training labels — i.e. have it figure out the relationship between the training data and its actual labels, so in future if you have data that looks like the training data, then it can make a prediction for what that data would look like. </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">model.compile(optimizer = tf.train.AdamOptimizer(),</span><br><span class="line">              loss = &apos;sparse_categorical_crossentropy&apos;,</span><br><span class="line">              metrics=[&apos;accuracy&apos;])</span><br><span class="line"></span><br><span class="line">model.fit(training_images, training_labels, epochs=5)</span><br></pre></td></tr></table></figure>
<pre><code>WARNING:tensorflow:From /usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/resource_variable_ops.py:435: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.
Instructions for updating:
Colocations handled automatically by placer.
Epoch 1/5
60000/60000 [==============================] - 6s 95us/sample - loss: 0.5005 - acc: 0.8231
Epoch 2/5
60000/60000 [==============================] - 5s 84us/sample - loss: 0.3743 - acc: 0.8650
Epoch 3/5
60000/60000 [==============================] - 5s 83us/sample - loss: 0.3380 - acc: 0.8768
Epoch 4/5
60000/60000 [==============================] - 5s 83us/sample - loss: 0.3141 - acc: 0.8854
Epoch 5/5
60000/60000 [==============================] - 6s 94us/sample - loss: 0.2957 - acc: 0.8923





&lt;tensorflow.python.keras.callbacks.History at 0x7fabe56c5c90&gt;
</code></pre><p>Once it’s done training — you should see an accuracy value at the end of the final epoch. It might look something like 0.9098. This tells you that your neural network is about 91% accurate in classifying the training data. I.E., it figured out a pattern match between the image and the labels that worked 91% of the time. Not great, but not bad considering it was only trained for 5 epochs and done quite quickly.</p>
<p>But how would it work with unseen data? That’s why we have the test images. We can call model.evaluate, and pass in the two sets, and it will report back the loss for each. Let’s give it a try:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">model.evaluate(test_images, test_labels)</span><br></pre></td></tr></table></figure>
<pre><code>10000/10000 [==============================] - 1s 54us/sample - loss: 0.3491 - acc: 0.8730





[0.34906602528095243, 0.873]
</code></pre><p>For me, that returned a accuracy of about .8838, which means it was about 88% accurate. As expected it probably would not do as well with <em>unseen</em> data as it did with data it was trained on!  As you go through this course, you’ll look at ways to improve this. </p>
<p>To explore further, try the below exercises:</p>
<h1 id="Exploration-Exercises"><a href="#Exploration-Exercises" class="headerlink" title="Exploration Exercises"></a>Exploration Exercises</h1><h3 id="Exercise-1"><a href="#Exercise-1" class="headerlink" title="Exercise 1:"></a>Exercise 1:</h3><p>For this first exercise run the below code: It creates a set of classifications for each of the test images, and then prints the first entry in the classifications. The output, after you run it is a list of numbers. Why do you think this is, and what do those numbers represent? </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">classifications = model.predict(test_images)</span><br><span class="line"></span><br><span class="line">print(classifications[0])</span><br></pre></td></tr></table></figure>
<pre><code>[2.9386058e-05 2.7936271e-09 5.3627440e-07 5.8023255e-07 6.8692401e-07
 6.4106613e-02 2.8751344e-06 4.3294847e-02 1.4372403e-04 8.9242077e-01]
</code></pre><p>Hint: try running print(test_labels[0]) — and you’ll get a 9. Does that help you understand why this list looks the way it does? </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(test_labels[0])</span><br></pre></td></tr></table></figure>
<pre><code>9
</code></pre><h3 id="What-does-this-list-represent"><a href="#What-does-this-list-represent" class="headerlink" title="What does this list represent?"></a>What does this list represent?</h3><ol>
<li>It’s 10 random meaningless values</li>
<li>It’s the first 10 classifications that the computer made</li>
<li>It’s the probability that this item is each of the 10 classes</li>
</ol>
<h4 id="Answer"><a href="#Answer" class="headerlink" title="Answer:"></a>Answer:</h4><p>The correct answer is (3)</p>
<p>The output of the model is a list of 10 numbers. These numbers are a probability that the value being classified is the corresponding value, i.e. the first value in the list is the probability that the handwriting is of a ‘0’, the next is a ‘1’ etc. Notice that they are all VERY LOW probabilities.</p>
<p>For the 7, the probability was .999+, i.e. the neural network is telling us that it’s almost certainly a 7.</p>
<h3 id="How-do-you-know-that-this-list-tells-you-that-the-item-is-an-ankle-boot"><a href="#How-do-you-know-that-this-list-tells-you-that-the-item-is-an-ankle-boot" class="headerlink" title="How do you know that this list tells you that the item is an ankle boot?"></a>How do you know that this list tells you that the item is an ankle boot?</h3><ol>
<li>There’s not enough information to answer that question</li>
<li>The 10th element on the list is the biggest, and the ankle boot is labelled 9</li>
<li>The ankle boot is label 9, and there are 0-&gt;9 elements in the list</li>
</ol>
<h4 id="Answer-1"><a href="#Answer-1" class="headerlink" title="Answer"></a>Answer</h4><p>The correct answer is (2). Both the list and the labels are 0 based, so the ankle boot having label 9 means that it is the 10th of the 10 classes. The list having the 10th element being the highest value means that the Neural Network has predicted that the item it is classifying is most likely an ankle boot</p>
<h2 id="Exercise-2"><a href="#Exercise-2" class="headerlink" title="Exercise 2:"></a>Exercise 2:</h2><p>Let’s now look at the layers in your model. Experiment with different values for the dense layer with 512 neurons. What different results do you get for loss, training time etc? Why do you think that’s the case? </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">print(tf.__version__)</span><br><span class="line"></span><br><span class="line">mnist = tf.keras.datasets.mnist</span><br><span class="line"></span><br><span class="line">(training_images, training_labels) ,  (test_images, test_labels) = mnist.load_data()</span><br><span class="line"></span><br><span class="line">training_images = training_images/255.0</span><br><span class="line">test_images = test_images/255.0</span><br><span class="line"></span><br><span class="line">model = tf.keras.models.Sequential([tf.keras.layers.Flatten(),</span><br><span class="line">                                    tf.keras.layers.Dense(1024, activation=tf.nn.relu),</span><br><span class="line">                                    tf.keras.layers.Dense(10, activation=tf.nn.softmax)])</span><br><span class="line"></span><br><span class="line">model.compile(optimizer = &apos;adam&apos;,</span><br><span class="line">              loss = &apos;sparse_categorical_crossentropy&apos;)</span><br><span class="line"></span><br><span class="line">model.fit(training_images, training_labels, epochs=5)</span><br><span class="line"></span><br><span class="line">model.evaluate(test_images, test_labels)</span><br><span class="line"></span><br><span class="line">classifications = model.predict(test_images)</span><br><span class="line"></span><br><span class="line">print(classifications[0])</span><br><span class="line">print(test_labels[0])</span><br></pre></td></tr></table></figure>
<pre><code>1.13.1
Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz
11493376/11490434 [==============================] - 0s 0us/step
11501568/11490434 [==============================] - 0s 0us/step
Epoch 1/5
60000/60000 [==============================] - 33s 555us/sample - loss: 0.1836
Epoch 2/5
60000/60000 [==============================] - 33s 542us/sample - loss: 0.0752
Epoch 3/5
60000/60000 [==============================] - 33s 545us/sample - loss: 0.0477
Epoch 4/5
60000/60000 [==============================] - 32s 541us/sample - loss: 0.0349
Epoch 5/5
60000/60000 [==============================] - 31s 519us/sample - loss: 0.0268
10000/10000 [==============================] - 1s 103us/sample - loss: 0.0701
[2.1580526e-08 1.4492238e-08 4.2619092e-07 7.1163056e-05 5.7726481e-16
 1.0863318e-08 9.1534202e-12 9.9992311e-01 2.1176172e-07 5.0823205e-06]
7
</code></pre><h3 id="Question-1-Increase-to-1024-Neurons-—-What’s-the-impact"><a href="#Question-1-Increase-to-1024-Neurons-—-What’s-the-impact" class="headerlink" title="Question 1. Increase to 1024 Neurons — What’s the impact?"></a>Question 1. Increase to 1024 Neurons — What’s the impact?</h3><ol>
<li>Training takes longer, but is more accurate</li>
<li>Training takes longer, but no impact on accuracy</li>
<li>Training takes the same time, but is more accurate</li>
</ol>
<h4 id="Answer-2"><a href="#Answer-2" class="headerlink" title="Answer"></a>Answer</h4><p>The correct answer is (1) by adding more Neurons we have to do more calculations, slowing down the process, but in this case they have a good impact — we do get more accurate. That doesn’t mean it’s always a case of ‘more is better’, you can hit the law of diminishing returns very quickly!</p>
<h2 id="Exercise-3"><a href="#Exercise-3" class="headerlink" title="Exercise 3:"></a>Exercise 3:</h2><p>What would happen if you remove the Flatten() layer. Why do you think that’s the case? </p>
<p>You get an error about the shape of the data. It may seem vague right now, but it reinforces the rule of thumb that the first layer in your network should be the same shape as your data. Right now our data is 28x28 images, and 28 layers of 28 neurons would be infeasible, so it makes more sense to ‘flatten’ that 28,28 into a 784x1. Instead of wriitng all the code to handle that ourselves, we add the Flatten() layer at the begining, and when the arrays are loaded into the model later, they’ll automatically be flattened for us.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">print(tf.__version__)</span><br><span class="line"></span><br><span class="line">mnist = tf.keras.datasets.mnist</span><br><span class="line"></span><br><span class="line">(training_images, training_labels) ,  (test_images, test_labels) = mnist.load_data()</span><br><span class="line"></span><br><span class="line">training_images = training_images/255.0</span><br><span class="line">test_images = test_images/255.0</span><br><span class="line"></span><br><span class="line">model = tf.keras.models.Sequential([#tf.keras.layers.Flatten(),</span><br><span class="line">                                    tf.keras.layers.Dense(64, activation=tf.nn.relu),</span><br><span class="line">                                    tf.keras.layers.Dense(10, activation=tf.nn.softmax)])</span><br><span class="line"></span><br><span class="line">model.compile(optimizer = &apos;adam&apos;,</span><br><span class="line">              loss = &apos;sparse_categorical_crossentropy&apos;)</span><br><span class="line"></span><br><span class="line">model.fit(training_images, training_labels, epochs=5)</span><br><span class="line"></span><br><span class="line">model.evaluate(test_images, test_labels)</span><br><span class="line"></span><br><span class="line">classifications = model.predict(test_images)</span><br><span class="line"></span><br><span class="line">print(classifications[0])</span><br><span class="line">print(test_labels[0])</span><br><span class="line"></span><br><span class="line">    1.13.1</span><br><span class="line">    Epoch 1/5</span><br></pre></td></tr></table></figure>
<h2 id="Exercise-4"><a href="#Exercise-4" class="headerlink" title="Exercise 4:"></a>Exercise 4:</h2><p>Consider the final (output) layers. Why are there 10 of them? What would happen if you had a different amount than 10? For example, try training the network with 5</p>
<p>You get an error as soon as it finds an unexpected value. Another rule of thumb — the number of neurons in the last layer should match the number of classes you are classifying for. In this case it’s the digits 0-9, so there are 10 of them, hence you should have 10 neurons in your final layer.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">print(tf.__version__)</span><br><span class="line"></span><br><span class="line">mnist = tf.keras.datasets.mnist</span><br><span class="line"></span><br><span class="line">(training_images, training_labels) ,  (test_images, test_labels) = mnist.load_data()</span><br><span class="line"></span><br><span class="line">training_images = training_images/255.0</span><br><span class="line">test_images = test_images/255.0</span><br><span class="line"></span><br><span class="line">model = tf.keras.models.Sequential([tf.keras.layers.Flatten(),</span><br><span class="line">                                    tf.keras.layers.Dense(64, activation=tf.nn.relu),</span><br><span class="line">                                    tf.keras.layers.Dense(5, activation=tf.nn.softmax)])</span><br><span class="line"></span><br><span class="line">model.compile(optimizer = &apos;adam&apos;,</span><br><span class="line">              loss = &apos;sparse_categorical_crossentropy&apos;)</span><br><span class="line"></span><br><span class="line">model.fit(training_images, training_labels, epochs=5)</span><br><span class="line"></span><br><span class="line">model.evaluate(test_images, test_labels)</span><br><span class="line"></span><br><span class="line">classifications = model.predict(test_images)</span><br><span class="line"></span><br><span class="line">print(classifications[0])</span><br><span class="line">print(test_labels[0])</span><br></pre></td></tr></table></figure>
<pre><code>1.13.1
Epoch 1/5
</code></pre><h2 id="Exercise-5"><a href="#Exercise-5" class="headerlink" title="Exercise 5:"></a>Exercise 5:</h2><p>Consider the effects of additional layers in the network. What will happen if you add another layer between the one with 512 and the final layer with 10. </p>
<p>Ans: There isn’t a significant impact — because this is relatively simple data. For far more complex data (including color images to be classified as flowers that you’ll see in the next lesson), extra layers are often necessary. </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">print(tf.__version__)</span><br><span class="line"></span><br><span class="line">mnist = tf.keras.datasets.mnist</span><br><span class="line"></span><br><span class="line">(training_images, training_labels) ,  (test_images, test_labels) = mnist.load_data()</span><br><span class="line"></span><br><span class="line">training_images = training_images/255.0</span><br><span class="line">test_images = test_images/255.0</span><br><span class="line"></span><br><span class="line">model = tf.keras.models.Sequential([tf.keras.layers.Flatten(),</span><br><span class="line">                                    tf.keras.layers.Dense(512, activation=tf.nn.relu),</span><br><span class="line">                                    tf.keras.layers.Dense(256, activation=tf.nn.relu),</span><br><span class="line">                                    tf.keras.layers.Dense(5, activation=tf.nn.softmax)])</span><br><span class="line"></span><br><span class="line">model.compile(optimizer = &apos;adam&apos;,</span><br><span class="line">              loss = &apos;sparse_categorical_crossentropy&apos;)</span><br><span class="line"></span><br><span class="line">model.fit(training_images, training_labels, epochs=5)</span><br><span class="line"></span><br><span class="line">model.evaluate(test_images, test_labels)</span><br><span class="line"></span><br><span class="line">classifications = model.predict(test_images)</span><br><span class="line"></span><br><span class="line">print(classifications[0])</span><br><span class="line">print(test_labels[0])</span><br></pre></td></tr></table></figure>
<pre><code>1.13.1
Epoch 1/5
</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="Exercise-6"><a href="#Exercise-6" class="headerlink" title="Exercise 6:"></a>Exercise 6:</h1><p>Consider the impact of training for more or less epochs. Why do you think that would be the case? </p>
<p>Try 15 epochs — you’ll probably get a model with a much better loss than the one with 5<br>Try 30 epochs — you might see the loss value stops decreasing, and sometimes increases. This is a side effect of something called ‘overfitting’ which you can learn about [somewhere] and it’s something you need to keep an eye out for when training neural networks. There’s no point in wasting your time training if you aren’t improving your loss, right! :)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">print(tf.__version__)</span><br><span class="line"></span><br><span class="line">mnist = tf.keras.datasets.mnist</span><br><span class="line"></span><br><span class="line">(training_images, training_labels) ,  (test_images, test_labels) = mnist.load_data()</span><br><span class="line"></span><br><span class="line">training_images = training_images/255.0</span><br><span class="line">test_images = test_images/255.0</span><br><span class="line"></span><br><span class="line">model = tf.keras.models.Sequential([tf.keras.layers.Flatten(),</span><br><span class="line">                                    tf.keras.layers.Dense(128, activation=tf.nn.relu),</span><br><span class="line">                                    tf.keras.layers.Dense(10, activation=tf.nn.softmax)])</span><br><span class="line"></span><br><span class="line">model.compile(optimizer = &apos;adam&apos;,</span><br><span class="line">              loss = &apos;sparse_categorical_crossentropy&apos;)</span><br><span class="line"></span><br><span class="line">model.fit(training_images, training_labels, epochs=30)</span><br><span class="line"></span><br><span class="line">model.evaluate(test_images, test_labels)</span><br><span class="line"></span><br><span class="line">classifications = model.predict(test_images)</span><br><span class="line"></span><br><span class="line">print(classifications[34])</span><br><span class="line">print(test_labels[34])</span><br></pre></td></tr></table></figure>
<pre><code>1.13.1
Epoch 1/30
60000/60000 [==============================] - 8s 135us/sample - loss: 0.2565
Epoch 2/30
60000/60000 [==============================] - 7s 120us/sample - loss: 0.1119
Epoch 3/30
60000/60000 [==============================] - 7s 121us/sample - loss: 0.0766
Epoch 4/30
60000/60000 [==============================] - 7s 123us/sample - loss: 0.0576
Epoch 5/30
39232/60000 [==================&gt;...........] - ETA: 2s - loss: 0.0452
</code></pre><h1 id="Exercise-7"><a href="#Exercise-7" class="headerlink" title="Exercise 7:"></a>Exercise 7:</h1><p>Before you trained, you normalized the data, going from values that were 0-255 to values that were 0-1. What would be the impact of removing that? Here’s the complete code to give it a try. Why do you think you get different results? </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">print(tf.__version__)</span><br><span class="line">mnist = tf.keras.datasets.mnist</span><br><span class="line">(training_images, training_labels), (test_images, test_labels) = mnist.load_data()</span><br><span class="line">training_images=training_images/255.0</span><br><span class="line">test_images=test_images/255.0</span><br><span class="line">model = tf.keras.models.Sequential([</span><br><span class="line">  tf.keras.layers.Flatten(),</span><br><span class="line">  tf.keras.layers.Dense(512, activation=tf.nn.relu),</span><br><span class="line">  tf.keras.layers.Dense(10, activation=tf.nn.softmax)</span><br><span class="line">])</span><br><span class="line">model.compile(optimizer=&apos;adam&apos;, loss=&apos;sparse_categorical_crossentropy&apos;)</span><br><span class="line">model.fit(training_images, training_labels, epochs=5)</span><br><span class="line">model.evaluate(test_images, test_labels)</span><br><span class="line">classifications = model.predict(test_images)</span><br><span class="line">print(classifications[0])</span><br><span class="line">print(test_labels[0])</span><br></pre></td></tr></table></figure>
<pre><code>1.13.1
Epoch 1/5
60000/60000 [==============================] - 18s 295us/sample - loss: 0.2024
Epoch 2/5
60000/60000 [==============================] - 15s 256us/sample - loss: 0.0818
Epoch 3/5
60000/60000 [==============================] - 16s 262us/sample - loss: 0.0531
Epoch 4/5
60000/60000 [==============================] - 16s 259us/sample - loss: 0.0367
Epoch 5/5
60000/60000 [==============================] - 16s 266us/sample - loss: 0.0269
10000/10000 [==============================] - 1s 86us/sample - loss: 0.0637
[2.1945258e-10 4.0893786e-10 3.8862879e-08 9.5302096e-07 1.1423730e-13
 3.0100249e-11 5.3545825e-14 9.9999654e-01 1.7650142e-09 2.5158711e-06]
7
</code></pre><h1 id="Exercise-8"><a href="#Exercise-8" class="headerlink" title="Exercise 8:"></a>Exercise 8:</h1><p>Earlier when you trained for extra epochs you had an issue where your loss might change. It might have taken a bit of time for you to wait for the training to do that, and you might have thought ‘wouldn’t it be nice if I could stop the training when I reach a desired value?’ — i.e. 95% accuracy might be enough for you, and if you reach that after 3 epochs, why sit around waiting for it to finish a lot more epochs….So how would you fix that? Like any other program…you have callbacks! Let’s see them in action…</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">print(tf.__version__)</span><br><span class="line"></span><br><span class="line">class myCallback(tf.keras.callbacks.Callback):</span><br><span class="line">  def on_epoch_end(self, epoch, logs=&#123;&#125;):</span><br><span class="line">    if(logs.get(&apos;loss&apos;)&lt;0.4):</span><br><span class="line">      print(&quot;\nReached 60% accuracy so cancelling training!&quot;)</span><br><span class="line">      self.model.stop_training = True</span><br><span class="line"></span><br><span class="line">callbacks = myCallback()</span><br><span class="line">mnist = tf.keras.datasets.fashion_mnist</span><br><span class="line">(training_images, training_labels), (test_images, test_labels) = mnist.load_data()</span><br><span class="line">training_images=training_images/255.0</span><br><span class="line">test_images=test_images/255.0</span><br><span class="line">model = tf.keras.models.Sequential([</span><br><span class="line">  tf.keras.layers.Flatten(),</span><br><span class="line">  tf.keras.layers.Dense(512, activation=tf.nn.relu),</span><br><span class="line">  tf.keras.layers.Dense(10, activation=tf.nn.softmax)</span><br><span class="line">])</span><br><span class="line">model.compile(optimizer=&apos;adam&apos;, loss=&apos;sparse_categorical_crossentropy&apos;)</span><br><span class="line">model.fit(training_images, training_labels, epochs=5, callbacks=[callbacks])</span><br></pre></td></tr></table></figure>
<pre><code>1.13.1
Epoch 1/5
60000/60000 [==============================] - 16s 270us/sample - loss: 0.4741
Epoch 2/5
59840/60000 [============================&gt;.] - ETA: 0s - loss: 0.3592
Reached 60% accuracy so cancelling training!
60000/60000 [==============================] - 15s 254us/sample - loss: 0.3589


&lt;tensorflow.python.keras.callbacks.History at 0x7fabde78a4d0&gt;
</code></pre>]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Project</tag>
        <tag>Computer Vision</tag>
      </tags>
  </entry>
  <entry>
    <title>Boolean Arithmetic</title>
    <url>/Boolean-Arithmetic/2019/05/21/</url>
    <content><![CDATA[<h1 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h1><ul>
<li><a href="#boolean-arithmetic">Boolean Arithmetic</a><ul>
<li><a href="#binary-numbers">Binary numbers</a></li>
<li><a href="#addition">Addition</a></li>
<li><a href="#building-an-adder">Building an Adder</a><ul>
<li><a href="#half-adder">Half adder</a></li>
<li><a href="#full-adder">Full adder</a></li>
<li><a href="#multi-bit-adder">Multi-bit Adder</a></li>
</ul>
</li>
<li><a href="#negative-numbers">Negative numbers</a></li>
<li><a href="#arithmetic-logic-unit">Arithmetic Logic Unit</a><ul>
<li><a href="#von-neumann-architecture">Von Neumann Architecture</a></li>
<li><a href="#the-hack-alu">The Hack ALU</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="Boolean-Arithmetic"><a href="#Boolean-Arithmetic" class="headerlink" title="Boolean Arithmetic"></a>Boolean Arithmetic</h1><h2 id="Binary-numbers"><a href="#Binary-numbers" class="headerlink" title="Binary numbers"></a>Binary numbers</h2><ol>
<li>Representing numbers</li>
</ol>
<script type="math/tex; mode=display">b_{n}b_{n-1}b_{n-2}\cdots b_{1}b_{0}</script><ol>
<li>Binary to Decimal</li>
</ol>
<script type="math/tex; mode=display">\sum_{i=0}^{n}b_{i} * 2^{i}</script><ol>
<li>Maximum value represented by k bits</li>
</ol>
<script type="math/tex; mode=display">1+2+4+8+\cdots +2^{k-1} = 2^{k}-1</script><ol>
<li>Decimal to Binary</li>
</ol>
<p>以十进制的数除以所要转换的进制数,把每次除得的余数保留,所得的商数继续除以进制数,直到余数为0时止.</p>
<ul>
<li><p>如把100转换成八进制: </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">100/8=12...4</span><br><span class="line">12/8=1.....4</span><br><span class="line">1/8=0......1</span><br><span class="line"><span class="comment">#把相应的余数从低向高顺着写出来,如上的为144,此即为100的八进制表示形式.</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如100转换为十六进制: </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">100/16=6....4 </span><br><span class="line">6/16=0......6</span><br><span class="line">``` </span><br><span class="line">- 如100转换为二进制: </span><br><span class="line">```BASH</span><br><span class="line">100/2=50....0</span><br><span class="line">50/2=25.....0</span><br><span class="line">25/2=12.....1</span><br><span class="line">12/2=6......0</span><br><span class="line">6/2=3.......0</span><br><span class="line">3/2=1.......1</span><br><span class="line">1/2=0.......1</span><br><span class="line"><span class="comment">#所以100的二进制表示形式为1100100;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Addition"><a href="#Addition" class="headerlink" title="Addition"></a>Addition</h2><p><img src="add.png" alt><br><img src="overflow.png" alt></p>
<h2 id="Building-an-Adder"><a href="#Building-an-Adder" class="headerlink" title="Building an Adder"></a>Building an Adder</h2><ul>
<li>Half adder: adds two bits</li>
<li>Full adder: adds three bits</li>
<li>Adder: adds two integers</li>
</ul>
<h3 id="Half-adder"><a href="#Half-adder" class="headerlink" title="Half adder"></a>Half adder</h3><p><img src="halfadder1.png" alt><br><img src="halfadder2.png" alt></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Computes the sum of two bits.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">CHIP HalfAdder &#123;</span><br><span class="line">    IN a, b;    // 1-bit inputs</span><br><span class="line">    OUT sum,    // Right bit of a + b </span><br><span class="line">        carry;  // Left bit of a + b</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    // Put you code here:</span><br><span class="line">    Xor(a=a,b=b,out=sum);</span><br><span class="line">    And(a=a,b=b,out=carry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Full-adder"><a href="#Full-adder" class="headerlink" title="Full adder"></a>Full adder</h3><p><img src="fulladder1.png" alt><br><img src="fulladder2.png" alt></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> /**</span><br><span class="line"> * Computes the sum of three bits.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">CHIP FullAdder &#123;</span><br><span class="line">    IN a, b, c;  // 1-bit inputs</span><br><span class="line">    OUT sum,     // Right bit of a + b + c</span><br><span class="line">        carry;   // Left bit of a + b + c</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    // Put you code here:</span><br><span class="line">    HalfAdder(a=a,b=b,sum=sum1,carry=carry1);</span><br><span class="line">    HalfAdder(a=c,b=sum1,sum=sum,carry=carry2);</span><br><span class="line">    Or(a=carry1,b=carry2,out=carry);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Multi-bit-Adder"><a href="#Multi-bit-Adder" class="headerlink" title="Multi-bit Adder"></a>Multi-bit Adder</h3><p><img src="Multibitadder.png" alt></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Adds two 16-bit values.</span><br><span class="line"> * The most significant carry bit is ignored.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">CHIP Add16 &#123;</span><br><span class="line">    IN a[16], b[16];</span><br><span class="line">    OUT out[16];</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">   // Put you code here:</span><br><span class="line">    HalfAdder(a=a[0],b=b[0],sum=out[0],carry=carry1);</span><br><span class="line">    FullAdder(a=a[1],b=b[1],c=carry1,sum=out[1],carry=carry2);</span><br><span class="line">    FullAdder(a=a[2],b=b[2],c=carry2,sum=out[2],carry=carry3);</span><br><span class="line">    FullAdder(a=a[3],b=b[3],c=carry3,sum=out[3],carry=carry4);</span><br><span class="line">    FullAdder(a=a[4],b=b[4],c=carry4,sum=out[4],carry=carry5);</span><br><span class="line">    FullAdder(a=a[5],b=b[5],c=carry5,sum=out[5],carry=carry6);</span><br><span class="line">    FullAdder(a=a[6],b=b[6],c=carry6,sum=out[6],carry=carry7);</span><br><span class="line">    FullAdder(a=a[7],b=b[7],c=carry7,sum=out[7],carry=carry8);</span><br><span class="line">    FullAdder(a=a[8],b=b[8],c=carry8,sum=out[8],carry=carry9);</span><br><span class="line">    FullAdder(a=a[9],b=b[9],c=carry9,sum=out[9],carry=carry10);</span><br><span class="line">    FullAdder(a=a[10],b=b[10],c=carry10,sum=out[10],carry=carry11);</span><br><span class="line">    FullAdder(a=a[11],b=b[11],c=carry11,sum=out[11],carry=carry12);</span><br><span class="line">    FullAdder(a=a[12],b=b[12],c=carry12,sum=out[12],carry=carry13);</span><br><span class="line">    FullAdder(a=a[13],b=b[13],c=carry13,sum=out[13],carry=carry14);</span><br><span class="line">    FullAdder(a=a[14],b=b[14],c=carry14,sum=out[14],carry=carry15);</span><br><span class="line">    FullAdder(a=a[15],b=b[15],c=carry15,sum=out[15],carry=carry16);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Negative-numbers"><a href="#Negative-numbers" class="headerlink" title="Negative numbers"></a>Negative numbers</h2><ol>
<li>Possible Solution: use a sign bit</li>
</ol>
<p>Use the left-most bit to represent the sign, -/+; Use the remaining bits to represent a positive number</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0000-----0</span><br><span class="line">0001-----1</span><br><span class="line">0010-----2</span><br><span class="line">0011-----3</span><br><span class="line">0100-----4</span><br><span class="line">0101-----5</span><br><span class="line">0110-----6</span><br><span class="line">0111-----7</span><br><span class="line">1000-----(-0)</span><br><span class="line">1001-----(-1)</span><br><span class="line">1010-----(-2)</span><br><span class="line">1011-----(-3)</span><br><span class="line">1100-----(-4)</span><br><span class="line">1101-----(-5)</span><br><span class="line">1110-----(-6)</span><br><span class="line">1111-----(-7)</span><br></pre></td></tr></table></figure>
<p>Complications:</p>
<ul>
<li>different representation of 0 and -0</li>
<li>x + (-x) != 0</li>
<li>more complication</li>
</ul>
<ol>
<li>Two’s Complement<blockquote>
<p>Represent the negative number $-x$ using the positive number $2^n - x$</p>
</blockquote>
</li>
</ol>
<p><img src="twos.png" alt></p>
<ol>
<li>Computing $-x$</li>
</ol>
<p><strong>Input</strong>: x<br><strong>Output</strong>: -x (in two’s complement)<br><strong>Idea:</strong></p>
<script type="math/tex; mode=display">2^{n} - x = 1 + (2^{n} - 1) - x</script><ul>
<li>$2^{n} - 1 = 11111111_{2}$</li>
<li>$11111111_{2} - x$ means <strong>flip all the bits of x</strong></li>
<li><img src="flip.png" alt></li>
</ul>
<h2 id="Arithmetic-Logic-Unit"><a href="#Arithmetic-Logic-Unit" class="headerlink" title="Arithmetic Logic Unit"></a>Arithmetic Logic Unit</h2><h3 id="Von-Neumann-Architecture"><a href="#Von-Neumann-Architecture" class="headerlink" title="Von Neumann Architecture"></a>Von Neumann Architecture</h3><p><img src="VonNeumann.png" alt></p>
<h3 id="The-Hack-ALU"><a href="#The-Hack-ALU" class="headerlink" title="The Hack ALU"></a>The Hack ALU</h3><p><img src="ALU.png" alt></p>
<ul>
<li>The ALU computes a function on the two inputs, and outputs the result</li>
<li>$f$: one out of a family of pre-defined arithmetic and logical functions<ul>
<li>Arithmetic functions: integer addition, multiplication, division,…</li>
<li>logical functions: And, Or, Xor, …</li>
</ul>
</li>
<li><p>Which functions should the ALU perform?<br><img src="hackALU.png" alt></p>
</li>
<li><p>two control bits </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (out == 0) <span class="keyword">then</span> zr = 1, <span class="keyword">else</span> zr = 0 </span><br><span class="line"><span class="keyword">if</span>(out&lt;0) thenng=1,<span class="keyword">else</span> ng=0</span><br></pre></td></tr></table></figure>
</li>
<li><p>Example<br><img src="e1.png" alt><br><img src="e2.png" alt></p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * The ALU (Arithmetic Logic Unit).</span><br><span class="line"> * Computes one of the following functions:</span><br><span class="line"> * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,</span><br><span class="line"> * x+1, y+1, x-1, y-1, x&amp;y, x|y on two 16-bit inputs, </span><br><span class="line"> * according to 6 input bits denoted zx,nx,zy,ny,f,no.</span><br><span class="line"> * In addition, the ALU computes two 1-bit outputs:</span><br><span class="line"> * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;</span><br><span class="line"> * if the ALU output &lt; 0, ng is set to 1; otherwise ng is set to 0.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">// Implementation: the ALU logic manipulates the x and y inputs</span><br><span class="line">// and operates on the resulting values, as follows:</span><br><span class="line">// if (zx == 1) set x = 0        // 16-bit constant</span><br><span class="line">// if (nx == 1) set x = !x       // bitwise not</span><br><span class="line">// if (zy == 1) set y = 0        // 16-bit constant</span><br><span class="line">// if (ny == 1) set y = !y       // bitwise not</span><br><span class="line">// if (f == 1)  set out = x + y  // integer 2&apos;s complement addition</span><br><span class="line">// if (f == 0)  set out = x &amp; y  // bitwise and</span><br><span class="line">// if (no == 1) set out = !out   // bitwise not</span><br><span class="line">// if (out == 0) set zr = 1</span><br><span class="line">// if (out &lt; 0) set ng = 1</span><br><span class="line"></span><br><span class="line">CHIP ALU &#123;</span><br><span class="line">    IN  </span><br><span class="line">        x[16], y[16],  // 16-bit inputs        </span><br><span class="line">        zx, // zero the x input?</span><br><span class="line">        nx, // negate the x input?</span><br><span class="line">        zy, // zero the y input?</span><br><span class="line">        ny, // negate the y input?</span><br><span class="line">        f,  // compute out = x + y (if 1) or x &amp; y (if 0)</span><br><span class="line">        no; // negate the out output?</span><br><span class="line"></span><br><span class="line">    OUT </span><br><span class="line">        out[16], // 16-bit output</span><br><span class="line">        zr, // 1 if (out == 0), 0 otherwise</span><br><span class="line">        ng; // 1 if (out &lt; 0),  0 otherwise</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">   // Put you code here:</span><br><span class="line">   // if (zx==1) set x = 0</span><br><span class="line">    Mux16(a=x,b=false,sel=zx,out=zxout);</span><br><span class="line"></span><br><span class="line">    // if (zy==1) set y = 0</span><br><span class="line">    Mux16(a=y,b=false,sel=zy,out=zyout); </span><br><span class="line"></span><br><span class="line">    // if (nx==1) set x = ~x</span><br><span class="line">    // if (ny==1) set y = ~y  </span><br><span class="line">    Not16(in=zxout,out=notx);</span><br><span class="line">    Not16(in=zyout,out=noty);</span><br><span class="line">    Mux16(a=zxout,b=notx,sel=nx,out=nxout); </span><br><span class="line">    Mux16(a=zyout,b=noty,sel=ny,out=nyout);</span><br><span class="line"></span><br><span class="line">    // if (f==1)  set out = x + y </span><br><span class="line">    // if (f==0)  set out = x &amp; y</span><br><span class="line">    Add16(a=nxout,b=nyout,out=addout);</span><br><span class="line">    And16(a=nxout,b=nyout,out=andout);</span><br><span class="line">    Mux16(a=andout,b=addout,sel=f,out=fout);</span><br><span class="line">    </span><br><span class="line">    // if (no==1) set out = ~out</span><br><span class="line">    // 1 if (out&lt;0),  0 otherwise</span><br><span class="line">    Not16(in=fout,out=nfout);</span><br><span class="line">    Mux16(a=fout,b=nfout,sel=no,out=out,out[0..7]=zr1,out[8..15]=zr2,out[15]=ng);</span><br><span class="line">    </span><br><span class="line">    // 1 if (out==0), 0 otherwise</span><br><span class="line">    Or8Way(in=zr1,out=or1);</span><br><span class="line">    Or8Way(in=zr2,out=or2);</span><br><span class="line">    Or(a=or1,b=or2,out=or3);</span><br><span class="line">    Not(in=or3,out=zr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hardware Architecture</category>
      </categories>
      <tags>
        <tag>Nand2Tetris</tag>
      </tags>
  </entry>
  <entry>
    <title>Boolean Logic Project</title>
    <url>/Boolean-Logic-Project/2019/05/21/</url>
    <content><![CDATA[<p><strong>Objective</strong>: Implement all the logic gates presented in the chapter. The only building blocks that you can use are primitive Nand gates and the composite gates that you will gradually build on top of them.</p>
<p><strong>Resources</strong>: The only tool that you need for this project is the hardware simulator supplied with the book. All the chips should be implemented in the HDL language specified in appendix A. For each one of the chips mentioned in the chapter, we provide a skeletal .hdl program (text file) with a missing implementation part. In addition, for each chip we provide a .tst script file that tells the hardware simulator how to test it, along with the correct output file that this script should generate, called .cmp or ‘‘compare file.’’ Your job is to complete the missing implementation parts of the supplied .hdl programs.</p>
<p><strong>Contract</strong>: When loaded into the hardware simulator, your chip design (modified .hdl program), tested on the supplied .tst file, should produce the outputs listed in the supplied .cmp file. If that is not the case, the simulator will let you know.</p>
<p><strong>Tips</strong>: The Nand gate is considered primitive and thus there is no need to build it: Whenever you use Nand in one of your HDL programs, the simulator will auto- matically invoke its built-in tools/builtIn/Nand.hdl implementation. We rec- ommend implementing the other gates in this project in the order in which they appear in the chapter. However, since the builtIn directory features working ver- sions of all the chips described in the book, you can always use these chips without defining them first: The simulator will automatically use their built-in versions.</p>
<p>For example, consider the skeletal Mux.hdl program supplied in this project. Suppose that for one reason or another you did not complete this program’s im- plementation, but you still want to use Mux gates as internal parts in other chip designs. This is not a problem, thanks to the following convention. If our simula- tor fails to find a Mux.hdl file in the current directory, it automatically invokes a built-in Mux implementation, pre-supplied with the simulator’s software. This built- in implementation—a Java class stored in the builtIn directory—has the same in- terface and functionality as those of the Mux gate described in the book. Thus, if you want the simulator to ignore one or more of your chip implementations, simply move the corresponding .hdl files out of the current directory.</p>
<p><strong>Steps</strong>: We recommend proceeding in the following order:</p>
<ol>
<li>The hardware simulator needed for this project is available in the tools directory of the book’s software suite.</li>
<li>Read appendix A, sections A1–A6 only.</li>
<li>Go through the hardware simulator tutorial, parts I, II, and III only.</li>
<li>Build and simulate all the chips specified in the projects/01 directory.</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * And gate: </span><br><span class="line"> * out = 1 <span class="keyword">if</span> (a == 1 and b == 1)</span><br><span class="line"> *       0 otherwise</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">CHIP And &#123;</span><br><span class="line">    IN a, b;</span><br><span class="line">    OUT out;</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    // Put your code here:</span><br><span class="line">    Nand(a=a,b=b,out=nandout);</span><br><span class="line">    Not(<span class="keyword">in</span>=nandout,out=out);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 16-bit bitwise And:</span><br><span class="line"> * <span class="keyword">for</span> i = 0..15: out[i] = (a[i] and b[i])</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">CHIP And16 &#123;</span><br><span class="line">    IN a[16], b[16];</span><br><span class="line">    OUT out[16];</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    // Put your code here:</span><br><span class="line">    And(a=a[0],b=b[0],out=out[0]);</span><br><span class="line">    And(a=a[1],b=b[1],out=out[1]);</span><br><span class="line">    And(a=a[2],b=b[2],out=out[2]);</span><br><span class="line">    And(a=a[3],b=b[3],out=out[3]);</span><br><span class="line">    And(a=a[4],b=b[4],out=out[4]);</span><br><span class="line">    And(a=a[5],b=b[5],out=out[5]);</span><br><span class="line">    And(a=a[6],b=b[6],out=out[6]);</span><br><span class="line">    And(a=a[7],b=b[7],out=out[7]);</span><br><span class="line">    And(a=a[8],b=b[8],out=out[8]);</span><br><span class="line">    And(a=a[9],b=b[9],out=out[9]);</span><br><span class="line">    And(a=a[10],b=b[10],out=out[10]);</span><br><span class="line">    And(a=a[11],b=b[11],out=out[11]);</span><br><span class="line">    And(a=a[12],b=b[12],out=out[12]);</span><br><span class="line">    And(a=a[13],b=b[13],out=out[13]);</span><br><span class="line">    And(a=a[14],b=b[14],out=out[14]);</span><br><span class="line">    And(a=a[15],b=b[15],out=out[15]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Demultiplexor:</span><br><span class="line"> * &#123;a, b&#125; = &#123;<span class="keyword">in</span>, 0&#125; <span class="keyword">if</span> sel == 0</span><br><span class="line"> *          &#123;0, <span class="keyword">in</span>&#125; <span class="keyword">if</span> sel == 1</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">CHIP DMux &#123;</span><br><span class="line">    IN <span class="keyword">in</span>, sel;</span><br><span class="line">    OUT a, b;</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    // Put your code here:</span><br><span class="line">    And(a=<span class="keyword">in</span>,b=sel,out=b);</span><br><span class="line">    Not(<span class="keyword">in</span>=sel,out=notsel);</span><br><span class="line">    And(a=<span class="keyword">in</span>,b=notsel,out=a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 4-way demultiplexor:</span><br><span class="line"> * &#123;a, b, c, d&#125; = &#123;<span class="keyword">in</span>, 0, 0, 0&#125; <span class="keyword">if</span> sel == 00</span><br><span class="line"> *                &#123;0, <span class="keyword">in</span>, 0, 0&#125; <span class="keyword">if</span> sel == 01</span><br><span class="line"> *                &#123;0, 0, <span class="keyword">in</span>, 0&#125; <span class="keyword">if</span> sel == 10</span><br><span class="line"> *                &#123;0, 0, 0, <span class="keyword">in</span>&#125; <span class="keyword">if</span> sel == 11</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">CHIP DMux4Way &#123;</span><br><span class="line">    IN <span class="keyword">in</span>, sel[2];</span><br><span class="line">    OUT a, b, c, d;</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    // Put your code here:</span><br><span class="line">    DMux(<span class="keyword">in</span>=<span class="keyword">in</span>,sel=sel[1],a=out1,b=out2);</span><br><span class="line">    DMux(<span class="keyword">in</span>=out1,sel=sel[0],a=a,b=b);</span><br><span class="line">    DMux(<span class="keyword">in</span>=out2,sel=sel[0],a=c,b=d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 8-way demultiplexor:</span><br><span class="line"> * &#123;a, b, c, d, e, f, g, h&#125; = &#123;<span class="keyword">in</span>, 0, 0, 0, 0, 0, 0, 0&#125; <span class="keyword">if</span> sel == 000</span><br><span class="line"> *                            &#123;0, <span class="keyword">in</span>, 0, 0, 0, 0, 0, 0&#125; <span class="keyword">if</span> sel == 001</span><br><span class="line"> *                            etc.</span><br><span class="line"> *                            &#123;0, 0, 0, 0, 0, 0, 0, <span class="keyword">in</span>&#125; <span class="keyword">if</span> sel == 111</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">CHIP DMux8Way &#123;</span><br><span class="line">    IN <span class="keyword">in</span>, sel[3];</span><br><span class="line">    OUT a, b, c, d, e, f, g, h;</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    // Put your code here:</span><br><span class="line">    DMux(<span class="keyword">in</span>=<span class="keyword">in</span>,sel=sel[2],a=out1,b=out2);</span><br><span class="line">    DMux4Way(<span class="keyword">in</span>=out1,sel=sel[0..1],a=a,b=b,c=c,d=d);</span><br><span class="line">    DMux4Way(<span class="keyword">in</span>=out2,sel=sel[0..1],a=e,b=f,c=g,d=h);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/** </span><br><span class="line"> * Multiplexor:</span><br><span class="line"> * out = a <span class="keyword">if</span> sel == 0</span><br><span class="line"> *       b otherwise</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">CHIP Mux &#123;</span><br><span class="line">    IN a, b, sel;</span><br><span class="line">    OUT out;</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    // Put your code here:</span><br><span class="line">    Not(<span class="keyword">in</span>=sel,out=notsel);</span><br><span class="line">    And(a=a,b=notsel,out=anotsel);</span><br><span class="line">    And(a=b,b=sel,out=bsel);</span><br><span class="line">    Or(a=anotsel,b=bsel,out=out);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 16-bit multiplexor: </span><br><span class="line"> * <span class="keyword">for</span> i = 0..15 out[i] = a[i] <span class="keyword">if</span> sel == 0 </span><br><span class="line"> *                        b[i] <span class="keyword">if</span> sel == 1</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">CHIP Mux16 &#123;</span><br><span class="line">    IN a[16], b[16], sel;</span><br><span class="line">    OUT out[16];</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    // Put your code here:</span><br><span class="line">    Mux(a=a[0],b=b[0],sel=sel,out=out[0]);</span><br><span class="line">    Mux(a=a[1],b=b[1],sel=sel,out=out[1]);</span><br><span class="line">    Mux(a=a[2],b=b[2],sel=sel,out=out[2]);</span><br><span class="line">    Mux(a=a[3],b=b[3],sel=sel,out=out[3]);</span><br><span class="line">    Mux(a=a[4],b=b[4],sel=sel,out=out[4]);</span><br><span class="line">    Mux(a=a[5],b=b[5],sel=sel,out=out[5]);</span><br><span class="line">    Mux(a=a[6],b=b[6],sel=sel,out=out[6]);</span><br><span class="line">    Mux(a=a[7],b=b[7],sel=sel,out=out[7]);</span><br><span class="line">    Mux(a=a[8],b=b[8],sel=sel,out=out[8]);</span><br><span class="line">    Mux(a=a[9],b=b[9],sel=sel,out=out[9]);</span><br><span class="line">    Mux(a=a[10],b=b[10],sel=sel,out=out[10]);</span><br><span class="line">    Mux(a=a[11],b=b[11],sel=sel,out=out[11]);</span><br><span class="line">    Mux(a=a[12],b=b[12],sel=sel,out=out[12]);</span><br><span class="line">    Mux(a=a[13],b=b[13],sel=sel,out=out[13]);</span><br><span class="line">    Mux(a=a[14],b=b[14],sel=sel,out=out[14]);</span><br><span class="line">    Mux(a=a[15],b=b[15],sel=sel,out=out[15]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 4-way 16-bit multiplexor:</span><br><span class="line"> * out = a <span class="keyword">if</span> sel == 00</span><br><span class="line"> *       b <span class="keyword">if</span> sel == 01</span><br><span class="line"> *       c <span class="keyword">if</span> sel == 10</span><br><span class="line"> *       d <span class="keyword">if</span> sel == 11</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">CHIP Mux4Way16 &#123;</span><br><span class="line">    IN a[16], b[16], c[16], d[16], sel[2];</span><br><span class="line">    OUT out[16];</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    // Put your code here:</span><br><span class="line">    Mux16(a=a,b=b,sel=sel[0],out=out1);</span><br><span class="line">    Mux16(a=c,b=d,sel=sel[0],out=out2);</span><br><span class="line">    Mux16(a=out1,b=out2,sel=sel[1],out=out);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 8-way 16-bit multiplexor:</span><br><span class="line"> * out = a <span class="keyword">if</span> sel == 000</span><br><span class="line"> *       b <span class="keyword">if</span> sel == 001</span><br><span class="line"> *       etc.</span><br><span class="line"> *       h <span class="keyword">if</span> sel == 111</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">CHIP Mux8Way16 &#123;</span><br><span class="line">    IN a[16], b[16], c[16], d[16],</span><br><span class="line">       e[16], f[16], g[16], h[16],</span><br><span class="line">       sel[3];</span><br><span class="line">    OUT out[16];</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    // Put your code here:</span><br><span class="line">    Mux4Way16(a=a,b=b,c=c,d=d,sel=sel[0..1],out=out1);</span><br><span class="line">    Mux4Way16(a=e,b=f,c=g,d=h,sel=sel[0..1],out=out2);</span><br><span class="line">    Mux16(a=out1,b=out2,sel=sel[2],out=out);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Not gate:</span><br><span class="line"> * out = not <span class="keyword">in</span></span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">CHIP Not &#123;</span><br><span class="line">    IN <span class="keyword">in</span>;</span><br><span class="line">    OUT out;</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    // Put your code here:</span><br><span class="line">    Nand(a=<span class="keyword">in</span>,b=<span class="keyword">in</span>,out=out);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 16-bit Not:</span><br><span class="line"> * <span class="keyword">for</span> i=0..15: out[i] = not <span class="keyword">in</span>[i]</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">CHIP Not16 &#123;</span><br><span class="line">    IN <span class="keyword">in</span>[16];</span><br><span class="line">    OUT out[16];</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    // Put your code here:</span><br><span class="line">    Not(<span class="keyword">in</span>=<span class="keyword">in</span>[0],out=out[0]);</span><br><span class="line">    Not(<span class="keyword">in</span>=<span class="keyword">in</span>[1],out=out[1]);</span><br><span class="line">    Not(<span class="keyword">in</span>=<span class="keyword">in</span>[2],out=out[2]);</span><br><span class="line">    Not(<span class="keyword">in</span>=<span class="keyword">in</span>[3],out=out[3]);</span><br><span class="line">    Not(<span class="keyword">in</span>=<span class="keyword">in</span>[4],out=out[4]);</span><br><span class="line">    Not(<span class="keyword">in</span>=<span class="keyword">in</span>[5],out=out[5]);</span><br><span class="line">    Not(<span class="keyword">in</span>=<span class="keyword">in</span>[6],out=out[6]);</span><br><span class="line">    Not(<span class="keyword">in</span>=<span class="keyword">in</span>[7],out=out[7]);</span><br><span class="line">    Not(<span class="keyword">in</span>=<span class="keyword">in</span>[8],out=out[8]);</span><br><span class="line">    Not(<span class="keyword">in</span>=<span class="keyword">in</span>[9],out=out[9]);</span><br><span class="line">    Not(<span class="keyword">in</span>=<span class="keyword">in</span>[10],out=out[10]);</span><br><span class="line">    Not(<span class="keyword">in</span>=<span class="keyword">in</span>[11],out=out[11]);</span><br><span class="line">    Not(<span class="keyword">in</span>=<span class="keyword">in</span>[12],out=out[12]);</span><br><span class="line">    Not(<span class="keyword">in</span>=<span class="keyword">in</span>[13],out=out[13]);</span><br><span class="line">    Not(<span class="keyword">in</span>=<span class="keyword">in</span>[14],out=out[14]);</span><br><span class="line">    Not(<span class="keyword">in</span>=<span class="keyword">in</span>[15],out=out[15]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Or gate:</span><br><span class="line"> * out = 1 <span class="keyword">if</span> (a == 1 or b == 1)</span><br><span class="line"> *       0 otherwise</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">CHIP Or &#123;</span><br><span class="line">    IN a, b;</span><br><span class="line">    OUT out;</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    // Put your code here:</span><br><span class="line">    Nand(a=a,b=a,out=outa);</span><br><span class="line">    Nand(a=b,b=b,out=outb);</span><br><span class="line">    Nand(a=outa,b=outb,out=out);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 16-bit bitwise Or:</span><br><span class="line"> * <span class="keyword">for</span> i = 0..15 out[i] = (a[i] or b[i])</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">CHIP Or16 &#123;</span><br><span class="line">    IN a[16], b[16];</span><br><span class="line">    OUT out[16];</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    // Put your code here:</span><br><span class="line">    Or(a=a[0],b=b[0],out=out[0]);</span><br><span class="line">    Or(a=a[1],b=b[1],out=out[1]);</span><br><span class="line">    Or(a=a[2],b=b[2],out=out[2]);</span><br><span class="line">    Or(a=a[3],b=b[3],out=out[3]);</span><br><span class="line">    Or(a=a[4],b=b[4],out=out[4]);</span><br><span class="line">    Or(a=a[5],b=b[5],out=out[5]);</span><br><span class="line">    Or(a=a[6],b=b[6],out=out[6]);</span><br><span class="line">    Or(a=a[7],b=b[7],out=out[7]);</span><br><span class="line">    Or(a=a[8],b=b[8],out=out[8]);</span><br><span class="line">    Or(a=a[9],b=b[9],out=out[9]);</span><br><span class="line">    Or(a=a[10],b=b[10],out=out[10]);</span><br><span class="line">    Or(a=a[11],b=b[11],out=out[11]);</span><br><span class="line">    Or(a=a[12],b=b[12],out=out[12]);</span><br><span class="line">    Or(a=a[13],b=b[13],out=out[13]);</span><br><span class="line">    Or(a=a[14],b=b[14],out=out[14]);</span><br><span class="line">    Or(a=a[15],b=b[15],out=out[15]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 8-way Or: </span><br><span class="line"> * out = (<span class="keyword">in</span>[0] or <span class="keyword">in</span>[1] or ... or <span class="keyword">in</span>[7])</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">CHIP Or8Way &#123;</span><br><span class="line">    IN <span class="keyword">in</span>[8];</span><br><span class="line">    OUT out;</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    // Put your code here:</span><br><span class="line">    Or(a=<span class="keyword">in</span>[0],b=<span class="keyword">in</span>[1],out=or1);</span><br><span class="line">    Or(a=<span class="keyword">in</span>[2],b=<span class="keyword">in</span>[3],out=or2);</span><br><span class="line">    Or(a=<span class="keyword">in</span>[4],b=<span class="keyword">in</span>[5],out=or3);</span><br><span class="line">    Or(a=<span class="keyword">in</span>[6],b=<span class="keyword">in</span>[7],out=or4);</span><br><span class="line">    Or(a=or1,b=or2,out=or5);</span><br><span class="line">    Or(a=or3,b=or4,out=or6);</span><br><span class="line">    Or(a=or5,b=or6,out=out);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Exclusive-or gate:</span><br><span class="line"> * out = not (a == b)</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">CHIP Xor &#123;</span><br><span class="line">    IN a, b;</span><br><span class="line">    OUT out;</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    // Put your code here:</span><br><span class="line">    Not(<span class="keyword">in</span>=a,out=nota);</span><br><span class="line">    Not(<span class="keyword">in</span>=b,out=notb);</span><br><span class="line">    And(a=nota,b=b,out=t1);</span><br><span class="line">    And(a=a,b=notb,out=t2);</span><br><span class="line">    Or(a=t1,b=t2,out=out);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Nand2Tetris</tag>
        <tag>Project</tag>
      </tags>
  </entry>
  <entry>
    <title>Boolean Functions and Gate Logic</title>
    <url>/Boolean-Functions-and-Gate-Logic/2019/05/20/</url>
    <content><![CDATA[<h2 id="Boolean-Logic"><a href="#Boolean-Logic" class="headerlink" title="Boolean Logic"></a>Boolean Logic</h2><ol>
<li>Every digital device is made from the same building blocks: <strong>Elementary logic gates</strong>;</li>
<li>Nand can build all the other logic gate from itself;</li>
</ol>
<h3 id="Boolean-Algebra"><a href="#Boolean-Algebra" class="headerlink" title="Boolean Algebra"></a>Boolean Algebra</h3><ol>
<li><strong>Boolean algebra</strong> deals with Boolean (also called binary) values that are typically labeled true/false, 1/0, yes/no, on/off, and so forth</li>
<li><strong>A Boolean function</strong> is a function that operates on binary inputs and returns binary outputs.</li>
</ol>
<ul>
<li>Infinitely many Boolean expressions vs. only a finite number of Boolean functions</li>
<li>Infinitely many Boolean expressions are equivalent to the same Boolean function</li>
<li>Boolean values are the two logic constants True, and False. </li>
<li>for n independent Boolean variables, each taking one particular Boolean value, there are $2^n$ different possible combinations. A Boolean function has to assign one Boolean value to each one of these combinations. This brings the number of different possible Boolean functions of n variables to a total of $2^{2^n}$</li>
<li><img src="functions.png" alt></li>
</ul>
<ol>
<li>Boolean Identities<br><img src="identities.png" alt></li>
</ol>
<h3 id="two-ways-to-represent-the-boolean-functions"><a href="#two-ways-to-represent-the-boolean-functions" class="headerlink" title="two ways to represent the boolean functions"></a>two ways to represent the boolean functions</h3><ol>
<li><strong>Truth Table Representation</strong>: The simplest way to specify a Boolean function is to enumerate all the possible values of the function’s input variables, along with the function’s output for each set of inputs.</li>
</ol>
<p><img src="truth_table.png" alt> </p>
<ol>
<li><strong>Boolean Expressions</strong>: a Boolean function can also be specified using Boolean operations over its input variables</li>
</ol>
<script type="math/tex; mode=display">f(x,y,z) = (x + y) * \bar(z)</script><h4 id="Canonical-Representation"><a href="#Canonical-Representation" class="headerlink" title="Canonical Representation"></a>Canonical Representation</h4><p>Every Boolean function, no matter how complex, can be expressed using three Boolean operators only: And, Or, and Not.</p>
<p>example: for the figure above, we can get</p>
<script type="math/tex; mode=display">f(x,y,z) = \bar(x)y\bar(z) + x\bar(y)\bar(z) + xy\bar(z)</script><p>find all the expressions euqual to 1, use “and” conbines the bits together and use “or” conbine all the expressions.</p>
<h2 id="Gate-Logic"><a href="#Gate-Logic" class="headerlink" title="Gate Logic"></a>Gate Logic</h2><p>A gate is a physical device that implements a Boolean function. If a Boolean function f operates on n variables and returns m binary results (in all our examples so far, m was 1), the gate that implements f will have n input pins and m output pins.</p>
<p>Each one of the operations And, Or, and Not can be constructed from it, and it alone (e.g., x Or y = (x Nand x) Nand (y Nand y). And since every Boolean function can be constructed from And, Or, and Not operations using the canonical representation method, it follows that every Boolean function can be constructed from Nand operations alone</p>
<h3 id="Primitive-and-Composite-Gates"><a href="#Primitive-and-Composite-Gates" class="headerlink" title="Primitive and Composite Gates"></a>Primitive and Composite Gates</h3><p>a primitive gate (see figure 1.3) can be viewed as a black box device that implements an elementary logical operation in one way or another—we don’t care how. Computer scientists can be content with the <strong>abstract notions</strong> of Boolean algebra and gate logic, trusting that someone else (the physicists and electrical engineers—bless their souls) will figure out how to actually realize them in hardware<br><img src="gate.png" alt></p>
<p>We see that any given logic gate can be viewed from two different perspectives: external and internal. As the blow picture a example. The right-hand side of figure gives the gate’s internal architecture, or <strong>implementation</strong>, whereas the left side shows only the gate <strong>interface</strong>. The gate implementation will realize its stated interface, in one way or another.</p>
<p><img src="implementation.png" alt></p>
<h3 id="Multi-Bit-Versions-of-Basic-Gates"><a href="#Multi-Bit-Versions-of-Basic-Gates" class="headerlink" title="Multi-Bit Versions of Basic Gates"></a>Multi-Bit Versions of Basic Gates</h3><p>Computer hardware is typically designed to operate on multi-bit arrays called <strong>buses</strong>.</p>
<p>or example, a basic requirement of a 32-bit computer is to be able to compute (bit-wise) an And function on two given 32-bit buses. To implement this operation, we can build an array of 32 binary And gates, each operating separately on a pair of bits. In order to enclose all this logic in one package, we can encapsulate the gates array in a single chip interface consisting of two 32-bit input buses and one 32-bit output bus.</p>
<p>example, <strong>Multi-Bit Not</strong> An n-bit Not gate applies the Boolean operation Not to every one of the bits in its n-bit input bus:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Chip name: Not16</span><br><span class="line">Inputs: <span class="keyword">in</span>[16] // a 16-bit pin Outputs: out[16]</span><br><span class="line">Function: For i=0..15 out[i]=Not(<span class="keyword">in</span>[i]).</span><br></pre></td></tr></table></figure>
<h3 id="Multi-Way-Versions-of-Basic-Gates"><a href="#Multi-Way-Versions-of-Basic-Gates" class="headerlink" title="Multi-Way Versions of Basic Gates"></a>Multi-Way Versions of Basic Gates</h3><p>any 2-way logic gates that accept two inputs have natural generalization to multi- way variants that accept an arbitrary number of inputs.</p>
<p>example, <strong>Multi-Way Or An n-way Or</strong> gate outputs 1 when at least one of its n bit inputs is 1, and 0 otherwise. Here is the 8-way variant of this gate:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Chip name: Or8Way</span><br><span class="line">Inputs: <span class="keyword">in</span>[8]</span><br><span class="line">Outputs: out</span><br><span class="line">Function: out=Or(<span class="keyword">in</span>[0],<span class="keyword">in</span>[1],...,<span class="keyword">in</span>[7]).</span><br></pre></td></tr></table></figure>
<h3 id="Multiplexor"><a href="#Multiplexor" class="headerlink" title="Multiplexor"></a>Multiplexor</h3><p>A multiplexor is a three-input gate that uses one of the inputs, called <strong>selection bit</strong>, to select and output one of the other two inputs, called <strong>data bits</strong>. Thus, a better name for this device might have been <strong>selector</strong>.</p>
<p><img src="Multiplexor.png" alt></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Chip name: Xor</span><br><span class="line">Inputs: a, b</span><br><span class="line">Outputs: out</span><br><span class="line">Function: If a=/b <span class="keyword">then</span> out=1 <span class="keyword">else</span> out=0.</span><br></pre></td></tr></table></figure>
<h3 id="Demultiplexor"><a href="#Demultiplexor" class="headerlink" title="Demultiplexor"></a>Demultiplexor</h3><p>A demultiplexor performs the opposite function of a multiplexor: It takes a single input and channels it to one of two possible outputs according to a selector bit that specifies which output to chose.</p>
<p><a href="Demultiplexor.png"></a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Chip name: DMux</span><br><span class="line">Inputs: <span class="keyword">in</span>, sel</span><br><span class="line">Outputs: a, b</span><br><span class="line">Function: If sel=0 <span class="keyword">then</span> &#123;a=<span class="keyword">in</span>, b=0&#125; <span class="keyword">else</span> &#123;a=0, b=<span class="keyword">in</span>&#125;.</span><br></pre></td></tr></table></figure>
<h2 id="Hardware-Description-Language-HDL"><a href="#Hardware-Description-Language-HDL" class="headerlink" title="Hardware Description Language (HDL)"></a>Hardware Description Language (HDL)</h2><p>Thus, using HDL, one can completely plan, debug, and optimize the entire chip before a single penny is spent on actual production. When the HDL program is deemed complete, that is, when the performance of the simulated chip satisfies the client who ordered it, the HDL program can become the blueprint from which many copies of the physical chip can be stamped in silicon.</p>
<p>An HDL definition of a chip consists of a <strong>header section</strong> and a <strong>parts section</strong>. The header section specifies the chip interface, namely the chip name and the names of its input and output pins. The parts section describes the names and topol- ogy of all the lower-level parts (other chips) from which this chip is constructed</p>
<h3 id="HDL-implementation-of-a-Xor-gate"><a href="#HDL-implementation-of-a-Xor-gate" class="headerlink" title="HDL implementation of a Xor gate."></a>HDL implementation of a Xor gate.</h3><p><img src="xor.png" alt></p>
<h2 id="Hardware-Simulation"><a href="#Hardware-Simulation" class="headerlink" title="Hardware Simulation"></a>Hardware Simulation</h2><p>Since HDL is a hardware construction language, the process of writing and debug- ging HDL programs is quite similar to software development. The main difference is that instead of writing code in a language like Java, we write it in HDL, and instead of using a compiler to translate and test the code, we use a hardware simulator. The hardware simulator is a computer program that knows how to parse and interpret HDL code, turn it into an executable representation, and test it according to the specifications of a given test script</p>
]]></content>
      <categories>
        <category>Hardware Architecture</category>
      </categories>
      <tags>
        <tag>Nand2Tetris</tag>
      </tags>
  </entry>
  <entry>
    <title>Domain Driven Design Introduction</title>
    <url>/Domain-Driven-Design-Introduction/2019/05/16/</url>
    <content><![CDATA[<h3 id="DDD把模型分成四层"><a href="#DDD把模型分成四层" class="headerlink" title="DDD把模型分成四层"></a>DDD把模型分成四层</h3><ol>
<li>UI 层，负责界面展示。</li>
<li>应用层（Application Layer），负责业务流程。</li>
<li>领域层（Domain Layer），负责领域逻辑</li>
<li>基建层（Infrastructure Layer），负责提供基建。</li>
</ol>
<ul>
<li>DDD 把业务分成 UI、应用、领域、基建四层，其核心是高度提纯、通用、少变化的领域层，是谓“领域驱动”；</li>
<li>领域层中包含领域模型，捕捉领域逻辑，暴露出接口用于操作领域模型，这些接口提供的操作可以确保领域是自洽的；</li>
<li>领域模型既是业务描述，又是代码实现的结构设计，二者的结合点在于公开出来的界面、接口。</li>
</ul>
<p><img src="ddd.png" alt></p>
<h3 id="实体-Entity-amp-值对象-Value-Object"><a href="#实体-Entity-amp-值对象-Value-Object" class="headerlink" title="实体(Entity) &amp; 值对象(Value Object)"></a>实体(Entity) &amp; 值对象(Value Object)</h3><p>实体与面向对象中的概念类似，在这里再次提出是因为它是领域模型的基本元素。在领域模型中，实体应该具有唯一的标识符，从设计的一开始就应该考虑实体，决定是否建立一个实体也是十分重要的。</p>
<p>值对象和我们说的编程中数值类型的变量是不同的，它仅仅是没有唯一标识符的实体，比如有两个收获地址的信息完全一样，那它就是值对象，并不是实体。值对象在领域模型中是可以被共享的，他们应该是“不可变的”（只读的），当有其他地方需要用到值对象时，可以将它的副本作为参数传递。</p>
<h3 id="服务-Services"><a href="#服务-Services" class="headerlink" title="服务(Services)"></a>服务(Services)</h3><p>当我们在分析某一领域时，一直在尝试如何将信息转化为领域模型，但并非所有的点我们都能用Model来涵盖。对象应当有属性，状态和行为，但有时领域中有一些行为是无法映射到具体的对象中的，我们也不能强行将其放入在某一个模型对象中，而将其单独作为一个方法又没有地方，此时就需要服务.</p>
<p>服务具有以下特点：</p>
<ul>
<li>服务中体现的行为一定是不属于任何实体和值对象的，但它属于领域模型的范围内</li>
<li>服务的行为一定涉及其他多个对象</li>
<li>服务的操作是无状态的</li>
</ul>
<p><strong>Reference from <a href="https://blog.csdn.net/xuxuerlai/article/details/81318565" target="_blank" rel="noopener">https://blog.csdn.net/xuxuerlai/article/details/81318565</a></strong></p>
]]></content>
      <categories>
        <category>Software Architecture</category>
      </categories>
  </entry>
  <entry>
    <title>Gaussian Mixed Model Introduction</title>
    <url>/Gaussian-Mixed-Model-Introduction/2019/05/15/</url>
    <content><![CDATA[<h2 id="Gaussian-Mixture-Models-高斯混合模型"><a href="#Gaussian-Mixture-Models-高斯混合模型" class="headerlink" title="Gaussian Mixture Models(高斯混合模型)"></a>Gaussian Mixture Models(高斯混合模型)</h2><p>高斯模型即正态分布，高斯混合模型就是几个正态分布的叠加，每一个正态分布代表一个类别，所以和K-means很像，高斯混合模型也可以用来做无监督的聚类分析。</p>
<h2 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h2><blockquote>
<p>即通过模型来计算数据的期望值。通过更新参数μ和σ来让期望值最大化。这个过程可以不断迭代直到两次迭代中生成的参数变化非常小为止。该过程和k-means的算法训练过程很相似（k-means不断更新类中心来让结果最大化），只不过在这里的高斯模型中，我们需要同时更新两个参数：分布的均值和标准差。</p>
</blockquote>
<ol>
<li>猜测有几个类别，既有几个高斯分布;</li>
<li>针对每一个高斯分布，随机给其均值和方差进行赋值;</li>
<li>针对每一个样本，计算其在各个高斯分布下的概率;</li>
</ol>
<script type="math/tex; mode=display">f(x)=\frac{1 }{\sqrt\times\sigma}e^{\frac{1}{2}(\frac{x-\mu}{\sigma})^2}</script><ol>
<li><p>针对每一个高斯分布，每一个样本对该高斯分布的贡献可以由其下的概率表示，如概率大则表示贡献大，反之亦然。这样把样本对该高斯分布的贡献作为权重来计算加权的均值和方差。之后替代其原本的均值和方差;</p>
</li>
<li><p>重复3~4直到每一个高斯分布的均值和方差收敛;</p>
</li>
<li>当高斯混合模型的特征值维数大于一维时，在计算加权的时候还要计算协方差，即要考虑不同维度之间的相互关联.</li>
</ol>
<h2 id="GMM-VS-KMeans"><a href="#GMM-VS-KMeans" class="headerlink" title="GMM VS KMeans"></a>GMM VS KMeans</h2><p>KMeans 将样本分到离其最近的聚类中心所在的簇，也就是每个样本数据属于某簇的概率非零即1。对比KMeans，高斯混合的不同之处在于，样本点属于某簇的概率不是非零即1的，而是属于不同簇有不同的概率值。高斯混合模型假设所有样本点是由K个高斯分布混合而成的。</p>
<h2 id="Implementing-the-EM-Expectation-Maximization-algorithm-for-Gaussian-mixture-models"><a href="#Implementing-the-EM-Expectation-Maximization-algorithm-for-Gaussian-mixture-models" class="headerlink" title="Implementing the EM(Expectation Maximization) algorithm for Gaussian mixture models"></a>Implementing the EM(Expectation Maximization) algorithm for Gaussian mixture models</h2><h3 id="Log-likelihood"><a href="#Log-likelihood" class="headerlink" title="Log likelihood"></a>Log likelihood</h3><p>We provide a function to calculate log likelihood for mixture of Gaussians. The log likelihood quantifies the probability of observing a given set of data under a particular setting of the parameters in our model. We will use this to assess convergence of our EM algorithm; specifically, we will keep looping through EM update steps until the log likehood ceases to increase at a certain rate.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log_sum_exp</span><span class="params">(Z)</span>:</span></span><br><span class="line">    <span class="string">""" Compute log(\sum_i exp(Z_i)) for some array Z."""</span></span><br><span class="line">    <span class="keyword">return</span> np.max(Z) + np.log(np.sum(np.exp(Z - np.max(Z))))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loglikelihood</span><span class="params">(data, weights, means, covs)</span>:</span></span><br><span class="line">    <span class="string">""" Compute the loglikelihood of the data for a Gaussian mixture model with the given parameters. """</span></span><br><span class="line">    num_clusters = len(means)</span><br><span class="line">    num_dim = len(data[<span class="number">0</span>])</span><br><span class="line">    </span><br><span class="line">    ll = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> data:</span><br><span class="line">        </span><br><span class="line">        Z = np.zeros(num_clusters)</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(num_clusters):</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># Compute (x-mu)^T * Sigma^&#123;-1&#125; * (x-mu)</span></span><br><span class="line">            delta = np.array(d) - means[k]</span><br><span class="line">            exponent_term = np.dot(delta.T, np.dot(np.linalg.inv(covs[k]), delta))</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># Compute loglikelihood contribution for this data point and this cluster</span></span><br><span class="line">            Z[k] += np.log(weights[k])</span><br><span class="line">            Z[k] -= <span class="number">1</span>/<span class="number">2.</span> * (num_dim * np.log(<span class="number">2</span>*np.pi) + np.log(np.linalg.det(covs[k])) + exponent_term)</span><br><span class="line">            </span><br><span class="line">        <span class="comment"># Increment loglikelihood contribution of this data point across all clusters</span></span><br><span class="line">        ll += log_sum_exp(Z)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> ll</span><br></pre></td></tr></table></figure>
<h3 id="E-step-assign-cluster-responsibilities-given-current-parameters"><a href="#E-step-assign-cluster-responsibilities-given-current-parameters" class="headerlink" title="E-step: assign cluster responsibilities, given current parameters"></a>E-step: assign cluster responsibilities, given current parameters</h3><p>The first step in the EM algorithm is to compute cluster responsibilities. Let $r_{ik}$ denote the responsibility of cluster $k$ for data point $i$. Note that cluster responsibilities are fractional parts: Cluster responsibilities for a single data point $i$ should sum to 1.</p>
<script type="math/tex; mode=display">
r_{i1} + r_{i2} + \ldots + r_{iK} = 1</script><p>To figure how much a cluster is responsible for a given data point, we compute the likelihood of the data point under the  particular cluster assignment, multiplied by the weight of the cluster. For data point $i$ and cluster $k$, this quantity is</p>
<script type="math/tex; mode=display">
r_{ik} \propto \pi_k N(x_i | \mu_k, \Sigma_k)</script><p>where $N(x_i | \mu_k, \Sigma_k)$ is the Gaussian distribution for cluster $k$ (with mean $\mu_k$ and covariance $\Sigma_k$).</p>
<p>We used $\propto$ because the quantity $N(x_i | \mu_k, \Sigma_k)$ is not yet the responsibility we want. To ensure that all responsibilities over each data point add up to 1, we add the normalization constant in the denominator:</p>
<script type="math/tex; mode=display">
r_{ik} = \frac{\pi_k N(x_i | \mu_k, \Sigma_k)}{\sum_{k=1}^{K} \pi_k N(x_i | \mu_k, \Sigma_k)}.</script><p>Complete the following function that computes $r_{ik}$ for all data points $i$ and clusters $k$.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_responsibilities</span><span class="params">(data, weights, means, covariances)</span>:</span></span><br><span class="line">    <span class="string">'''E-step: compute responsibilities, given the current parameters'''</span></span><br><span class="line">    num_data = len(data)</span><br><span class="line">    num_clusters = len(means)</span><br><span class="line">    resp = np.zeros((num_data, num_clusters))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Update resp matrix so that resp[i,k] is the responsibility of cluster k for data point i.</span></span><br><span class="line">    <span class="comment"># Hint: To compute likelihood of seeing data point i given cluster k, use multivariate_normal.pdf.</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num_data):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(num_clusters):</span><br><span class="line">            <span class="comment"># YOUR CODE HERE</span></span><br><span class="line">            resp[i, k] = weights[k]*multivariate_normal.pdf(data[i], mean=means[k], cov=covariances[k])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Add up responsibilities over each data point and normalize</span></span><br><span class="line">    row_sums = resp.sum(axis=<span class="number">1</span>)[:, np.newaxis]</span><br><span class="line">    resp = resp / row_sums</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> resp</span><br></pre></td></tr></table></figure>
<h3 id="M-step-Update-parameters-given-current-cluster-responsibilities"><a href="#M-step-Update-parameters-given-current-cluster-responsibilities" class="headerlink" title="M-step: Update parameters, given current cluster responsibilities"></a>M-step: Update parameters, given current cluster responsibilities</h3><p>Once the cluster responsibilities are computed, we update the parameters (weights, means, and covariances) associated with the clusters.</p>
<p><strong>Computing soft counts</strong>. Before updating the parameters, we first compute what is known as “soft counts”. The soft count of a cluster is the sum of all cluster responsibilities for that cluster:</p>
<script type="math/tex; mode=display">
N^{\text{soft}}_k = r_{1k} + r_{2k} + \ldots + r_{Nk} = \sum_{i=1}^{N} r_{ik}</script><p>where we loop over data points. Note that, unlike k-means, we must loop over every single data point in the dataset. This is because all clusters are represented in all data points, to a varying degree.</p>
<p>We provide the function for computing the soft counts:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_soft_counts</span><span class="params">(resp)</span>:</span></span><br><span class="line">    <span class="comment"># Compute the total responsibility assigned to each cluster, which will be useful when </span></span><br><span class="line">    <span class="comment"># implementing M-steps below. In the lectures this is called N^&#123;soft&#125;</span></span><br><span class="line">    counts = np.sum(resp, axis=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> counts</span><br></pre></td></tr></table></figure>
<p><strong>Updating weights.</strong> The cluster weights show us how much each cluster is represented over all data points. The weight of cluster $k$ is given by the ratio of the soft count $N^{\text{soft}}_{k}$ to the total number of data points $N$:</p>
<script type="math/tex; mode=display">
\hat{\pi}_k = \frac{N^{\text{soft}}_{k}}{N}</script><p>Notice that $N$ is equal to the sum over the soft counts $N^{\text{soft}}_{k}$ of all clusters.</p>
<p>Complete the following function:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_weights</span><span class="params">(counts)</span>:</span></span><br><span class="line">    num_clusters = len(counts)</span><br><span class="line">    weights = [<span class="number">0.</span>] * num_clusters</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(num_clusters):</span><br><span class="line">        <span class="comment"># Update the weight for cluster k using the M-step update rule for the cluster weight, \hat&#123;\pi&#125;_k.</span></span><br><span class="line">        <span class="comment"># HINT: compute # of data points by summing soft counts.</span></span><br><span class="line">        <span class="comment"># YOUR CODE HERE</span></span><br><span class="line">        weights[k] = counts[k] / np.sum(counts)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> weights</span><br></pre></td></tr></table></figure>
<p><strong>Updating means</strong>. The mean of each cluster is set to the <a href="https://en.wikipedia.org/wiki/Weighted_arithmetic_mean" target="_blank" rel="noopener">weighted average</a> of all data points, weighted by the cluster responsibilities:</p>
<script type="math/tex; mode=display">
\hat{\mu}_k = \frac{1}{N_k^{\text{soft}}} \sum_{i=1}^N r_{ik}x_i</script><p>Complete the following function:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_means</span><span class="params">(data, resp, counts)</span>:</span></span><br><span class="line">    num_clusters = len(counts)</span><br><span class="line">    num_data = len(data)</span><br><span class="line">    means = [np.zeros(len(data[<span class="number">0</span>]))] * num_clusters</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(num_clusters):</span><br><span class="line">        <span class="comment"># Update means for cluster k using the M-step update rule for the mean variables.</span></span><br><span class="line">        <span class="comment"># This will assign the variable means[k] to be our estimate for \hat&#123;\mu&#125;_k.</span></span><br><span class="line">        weighted_sum = <span class="number">0.</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(num_data):</span><br><span class="line">            <span class="comment"># YOUR CODE HERE</span></span><br><span class="line">            weighted_sum += data[i] * resp[i][k]</span><br><span class="line">        <span class="comment"># YOUR CODE HERE</span></span><br><span class="line">        means[k] = weighted_sum / counts[k]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> means</span><br></pre></td></tr></table></figure>
<p><strong>Updating covariances</strong>.  The covariance of each cluster is set to the weighted average of all <a href="https://people.duke.edu/~ccc14/sta-663/LinearAlgebraReview.html" target="_blank" rel="noopener">outer products</a>, weighted by the cluster responsibilities:</p>
<script type="math/tex; mode=display">
\hat{\Sigma}_k = \frac{1}{N^{\text{soft}}_k}\sum_{i=1}^N r_{ik} (x_i - \hat{\mu}_k)(x_i - \hat{\mu}_k)^T</script><p>The “outer product” in this context refers to the matrix product</p>
<script type="math/tex; mode=display">
(x_i - \hat{\mu}_k)(x_i - \hat{\mu}_k)^T.</script><p>Letting $(x_i - \hat{\mu}_k)$ to be $d \times 1$ column vector, this product is a $d \times d$ matrix. Taking the weighted average of all outer products gives us the covariance matrix, which is also $d \times d$.</p>
<p>Complete the following function:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_covariances</span><span class="params">(data, resp, counts, means)</span>:</span></span><br><span class="line">    num_clusters = len(counts)</span><br><span class="line">    num_dim = len(data[<span class="number">0</span>])</span><br><span class="line">    num_data = len(data)</span><br><span class="line">    covariances = [np.zeros((num_dim,num_dim))] * num_clusters</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(num_clusters):</span><br><span class="line">        <span class="comment"># Update covariances for cluster k using the M-step update rule for covariance variables.</span></span><br><span class="line">        <span class="comment"># This will assign the variable covariances[k] to be the estimate for \hat&#123;\Sigma&#125;_k.</span></span><br><span class="line">        weighted_sum = np.zeros((num_dim, num_dim))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(num_data):</span><br><span class="line">            <span class="comment"># YOUR CODE HERE (Hint: Use np.outer on the data[i] and this cluster's mean)</span></span><br><span class="line">            weighted_sum += resp[i][k]*np.outer(data[i] - means[k], data[i] - means[k])</span><br><span class="line">        <span class="comment"># YOUR CODE HERE</span></span><br><span class="line">        covariances[k] = weighted_sum / counts[k]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> covariances</span><br></pre></td></tr></table></figure>
<h3 id="The-EM-algorithm"><a href="#The-EM-algorithm" class="headerlink" title="The EM algorithm"></a>The EM algorithm</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># SOLUTION</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">EM</span><span class="params">(data, init_means, init_covariances, init_weights, maxiter=<span class="number">1000</span>, thresh=<span class="number">1e-4</span>)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Make copies of initial parameters, which we will update during each iteration</span></span><br><span class="line">    means = init_means[:]</span><br><span class="line">    covariances = init_covariances[:]</span><br><span class="line">    weights = init_weights[:]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Infer dimensions of dataset and the number of clusters</span></span><br><span class="line">    num_data = len(data)</span><br><span class="line">    num_dim = len(data[<span class="number">0</span>])</span><br><span class="line">    num_clusters = len(means)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Initialize some useful variables</span></span><br><span class="line">    resp = np.zeros((num_data, num_clusters))</span><br><span class="line">    ll = loglikelihood(data, weights, means, covariances)</span><br><span class="line">    ll_trace = [ll]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> it <span class="keyword">in</span> range(maxiter):</span><br><span class="line">        <span class="keyword">if</span> it % <span class="number">5</span> == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">"Iteration %s"</span> % it)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># E-step: compute responsibilities</span></span><br><span class="line">        resp = compute_responsibilities(data, weights, means, covariances)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># M-step</span></span><br><span class="line">        <span class="comment"># Compute the total responsibility assigned to each cluster, which will be useful when </span></span><br><span class="line">        <span class="comment"># implementing M-steps below. In the lectures this is called N^&#123;soft&#125;</span></span><br><span class="line">        counts = compute_soft_counts(resp)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Update the weight for cluster k using the M-step update rule for the cluster weight, \hat&#123;\pi&#125;_k.</span></span><br><span class="line">        <span class="comment"># YOUR CODE HERE</span></span><br><span class="line">        weights = compute_weights(counts)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Update means for cluster k using the M-step update rule for the mean variables.</span></span><br><span class="line">        <span class="comment"># This will assign the variable means[k] to be our estimate for \hat&#123;\mu&#125;_k.</span></span><br><span class="line">        <span class="comment"># YOUR CODE HERE</span></span><br><span class="line">        means = compute_means(data, resp, counts)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Update covariances for cluster k using the M-step update rule for covariance variables.</span></span><br><span class="line">        <span class="comment"># This will assign the variable covariances[k] to be the estimate for \hat&#123;\Sigma&#125;_k.</span></span><br><span class="line">        <span class="comment"># YOUR CODE HERE</span></span><br><span class="line">        covariances = compute_covariances(data, resp, counts, means)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Compute the loglikelihood at this iteration</span></span><br><span class="line">        <span class="comment"># YOUR CODE HERE</span></span><br><span class="line">        ll_latest = loglikelihood(data, weights, means, covariances)</span><br><span class="line">        ll_trace.append(ll_latest)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Check for convergence in log-likelihood and store</span></span><br><span class="line">        <span class="keyword">if</span> (ll_latest - ll) &lt; thresh <span class="keyword">and</span> ll_latest &gt; -np.inf:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        ll = ll_latest</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> it % <span class="number">5</span> != <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">"Iteration %s"</span> % it)</span><br><span class="line">    </span><br><span class="line">    out = &#123;<span class="string">'weights'</span>: weights, <span class="string">'means'</span>: means, <span class="string">'covs'</span>: covariances, <span class="string">'loglik'</span>: ll_trace, <span class="string">'resp'</span>: resp&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> out</span><br></pre></td></tr></table></figure>
<p><strong>Reference from <a href="https://zhuanlan.zhihu.com/p/29538307" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/29538307</a></strong><br><strong>Reference from <a href="https://zhuanlan.zhihu.com/p/31103654" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/31103654</a></strong><br><strong>Reference from coursera course Machine Learning Foundation from University of Washington</strong>  </p>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Machine Learning Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>KMeans Improving</title>
    <url>/KMeans-Improving/2019/05/15/</url>
    <content><![CDATA[<h2 id="KMeans-Algorithm"><a href="#KMeans-Algorithm" class="headerlink" title="KMeans++ Algorithm"></a>KMeans++ Algorithm</h2><ol>
<li><p>Smart initialization:</p>
<ol>
<li>Choose first cluster center uniformly at random from data points</li>
<li>For each obs x, compute distance d(x) to nearest cluster center</li>
<li>Choose new cluster center from amongst data points, with probability of x being chosen proportional to d(x)2</li>
<li>Repeat Steps 2 and 3 until k centers have been chosen</li>
</ol>
</li>
<li><p>Run the standard KMeans with centers got above</p>
<ol>
<li>Assign observations to closest cluster center</li>
<li>Revise cluster centers as mean of assigned observations</li>
<li>Repeat 1.+2. until convergence</li>
</ol>
</li>
</ol>
<h2 id="KMeans-visualized"><a href="#KMeans-visualized" class="headerlink" title="KMeans++ visualized"></a>KMeans++ visualized</h2><p><img src="1.png" alt><br><img src="2.png" alt><br><img src="3.png" alt></p>
<h2 id="Elkan-K-Means-Algorithm-距离计算优化"><a href="#Elkan-K-Means-Algorithm-距离计算优化" class="headerlink" title="Elkan K-Means Algorithm (距离计算优化)"></a>Elkan K-Means Algorithm (距离计算优化)</h2><p>在传统的K-Means算法中，我们在每轮迭代时，要计算所有的样本点到所有的质心的距离，这样会比较的耗时。那么，对于距离的计算有没有能够简化的地方呢？elkan K-Means算法就是从这块入手加以改进。它的目标是减少不必要的距离的计算。那么哪些距离不需要计算呢？</p>
<blockquote>
<p>elkan K-Means利用了两边之和大于等于第三边,以及两边之差小于第三边的三角形性质，来减少距离的计算。</p>
</blockquote>
<ol>
<li>对于一个样本点$x$和两个质心$\mu_1$,$\mu_2$.如果我们预先计算出了这两个质心之间的距离$D(\mu_1,\mu_2)$,则如果计算发现 $2D(x,\mu_1) \leq D(\mu_1,\mu_2)$, 我们可以得知 $2D(x,\mu_1) \leq D(x,\mu_2)$,此时我们不需要再计算$D(x,\mu_2)$,也就是说省了一步距离计算。</li>
<li>对于一个样本点$x$和两个质心$\mu_1$,$\mu_2$,我们可以得到 $D(x,\mu_2) &gt; max\lbrace 0, D(x,\mu_1) - D(\mu_1,\mu_2)\rbrace$</li>
</ol>
<h2 id="MapReduce-for-scaling-KMeans"><a href="#MapReduce-for-scaling-KMeans" class="headerlink" title="MapReduce for scaling KMeans"></a>MapReduce for scaling KMeans</h2><h4 id="What-is-MapReduce"><a href="#What-is-MapReduce" class="headerlink" title="What is MapReduce"></a>What is MapReduce</h4><p><img src="4.png" alt><br><img src="5.png" alt></p>
<h4 id="Scaling-up-KMeans-via-MapReduce"><a href="#Scaling-up-KMeans-via-MapReduce" class="headerlink" title="Scaling up KMeans via MapReduce"></a>Scaling up KMeans via MapReduce</h4><ol>
<li>Classify: Assign observations to closest cluster center<script type="math/tex; mode=display">z_i = \mathop{\arg\min}_{j}\Vert \mu_{j} - x_{j} \Vert^2_2</script></li>
</ol>
<blockquote>
<p>For each data point, given $(\mu_{j}, x_{i} )$, $emit(z_i, x_i)$</p>
</blockquote>
<ol>
<li>Recenter: Revise cluster centers as mean of assigned observations</li>
</ol>
<script type="math/tex; mode=display">\mu_j = \frac{1}{n_j}\sum\limits_{i:z_i = k} x_i</script><blockquote>
<p>Reduce: Average over all points in cluster $j(z_j = k)$</p>
</blockquote>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Machine Learning Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>KNN with KDtree</title>
    <url>/KNN-with-KDtree/2019/05/14/</url>
    <content><![CDATA[<h2 id="What-is-KDtree"><a href="#What-is-KDtree" class="headerlink" title="What is KDtree"></a>What is KDtree</h2><ol>
<li>kd-tree或者k维树是计算机科学中使用的一种数据结构，用来组织表示k维空间中点集合。它是一种带有其他约束条件的二分查找树。kd-tree对于区间和搜索十分有用。 </li>
<li>对于构造kd-tree二叉树有两个关键的问题：1）每次对子空间的划分时，怎样确定在哪个维度上进行划分；2）在某个维度上进行划分时，怎样确保在这一维度上的划分得到的两个子集合的数量尽量相等，即左子树和右子树中的结点个数尽量相等。</li>
<li><strong>Works well in low-medium dimensions</strong><ul>
<li>Unlikely to have any data points close to query point</li>
<li>Once <strong>nearby</strong> point is found, the search radius is likely to intersect many hypercubes in at least one dim</li>
<li>Not many nodes can be pruned</li>
<li>Can show under some conditions that you visit at least $2^{d}$ nodes</li>
</ul>
</li>
</ol>
<h3 id="每次对子空间的划分时，怎样进行划分？"><a href="#每次对子空间的划分时，怎样进行划分？" class="headerlink" title="每次对子空间的划分时，怎样进行划分？"></a>每次对子空间的划分时，怎样进行划分？</h3><blockquote>
<p>max invarince</p>
</blockquote>
<p>最简单的方法就是轮着来，即如果这次选择了在第i维上进行数据划分，那下一次就在第j(j≠i)维上进行划分，例如：j = (i mod k) + 1。想象一下我们切豆腐时，先是竖着切一刀，切成两半后，再横着来一刀，就得到了很小的方块豆腐。<br>可是“轮着来”的方法是否可以很好地解决问题呢？再次想象一下，我们现在要切的是一根木条，按照“轮着来”的方法先是竖着切一刀，木条一分为二，干净利落，接下来就是再横着切一刀，这个时候就有点考验刀法了，如果木条的直径（横截面）较大，还可以下手，如果直径较小，就没法往下切了。因此，如果K维数据的分布像上面的豆腐一样，“轮着来”的切分方法是可以奏效，但是如果K维度上数据的分布像木条一样，“轮着来”就不好用了。因此，还需要想想其他的切法。<br>如果一个K维数据集合的分布像木条一样，那就是说明这K维数据在木条较长方向代表的维度上，<strong>这些数据的分布散得比较开，数学上来说，就是这些数据在该维度上的方差（invariance）比较大</strong>，换句话说，正因为这些数据在该维度上分散的比较开，我们就更容易在这个维度上将它们划分开，因此，这就引出了我们选择维度的另一种方法：最大方差法（max invarince），即每次我们选择维度进行划分时，都选择具有最大方差维度。</p>
<h3 id="如何确保划分的左子树和右子树中的节点个数尽量相等。"><a href="#如何确保划分的左子树和右子树中的节点个数尽量相等。" class="headerlink" title="如何确保划分的左子树和右子树中的节点个数尽量相等。"></a>如何确保划分的左子树和右子树中的节点个数尽量相等。</h3><blockquote>
<p>use medium as pivot</p>
</blockquote>
<p>假设当前我们按照最大方差法选择了在维度i上进行K维数据集S的划分，此时我们需要在维度i上将K维数据集合S划分为两个子集合A和B，子集合A中的数据在维度i上的值都小于子集合B中。首先考虑最简单的划分法，即选择第一个数作为比较对象（即划分轴，pivot），S中剩余的其他所有K维数据都跟该pivot在维度i上进行比较，如果小于pivot则划A集合，大于则划入B集合。把A集合和B集合分别看做是左子树和右子树，那么我们在构造一个二叉树的时候，当然是希望它是一棵尽量平衡的树，即左右子树中的结点个数相差不大。而A集合和B集合中数据的个数显然跟pivot值有关，因为它们是跟pivot比较后才被划分到相应的集合中去的。好了，现在的问题就是确定pivot了。给定一个数组，怎样才能得到两个子数组，这两个数组包含的元素个数差不多且其中一个子数组中的元素值都小于另一个子数组呢？方法很简单，<strong>找到数组中的中值（即中位数，median）</strong>，然后将数组中所有元素与中值进行比较，就可以得到上述两个子数组。同样，在维度i上进行划分时，pivot就选择该维度i上所有数据的中值，这样得到的两个子集合数据个数就基本相同了。</p>
<h2 id="构建好一棵Kd-Tree后，下面给出利用Kd-Tree进行最近邻查找的算法："><a href="#构建好一棵Kd-Tree后，下面给出利用Kd-Tree进行最近邻查找的算法：" class="headerlink" title="构建好一棵Kd-Tree后，下面给出利用Kd-Tree进行最近邻查找的算法："></a>构建好一棵Kd-Tree后，下面给出利用Kd-Tree进行最近邻查找的算法：</h2><ol>
<li>将查询数据Q从根结点开始，按照Q与各个结点的比较结果向下访问Kd-Tree，直至达到叶子结点。</li>
</ol>
<p>其中Q与结点的比较指的是将Q对应于结点中的k维度上的值与m进行比较，若Q(k) &lt; m，则访问左子树，否则访问右子树。达到叶子结点时，计算Q与叶子结点上保存的数据之间的距离，记录下最小距离对应的数据点，记为当前“最近邻点”Pcur和最小距离Dcur。</p>
<ol>
<li><p>进行回溯（Backtracking）操作，该操作是为了找到离Q更近的“最近邻点”。即判断未被访问过的分支里是否还有离Q更近的点，它们之间的距离小于Dcur。</p>
<ul>
<li><p>如果Q与其父结点下的未被访问过的分支之间的距离小于Dcur，则认为该分支中存在离P更近的数据，进入该结点，进行（1）步骤一样的查找过程，如果找到更近的数据点，则更新为当前的“最近邻点”Pcur，并更新Dcur。</p>
</li>
<li><p>如果Q与其父结点下的未被访问过的分支之间的距离大于Dcur，则说明该分支内不存在与Q更近的点。</p>
</li>
</ul>
</li>
</ol>
<p>回溯的判断过程是从下往上进行的，直到回溯到根结点时已经不存在与P更近的分支为止。</p>
<p><strong>Reference from <a href="https://blog.csdn.net/qq_34510308/article/details/60151260" target="_blank" rel="noopener">https://blog.csdn.net/qq_34510308/article/details/60151260</a></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">rng = np.random.RandomState(<span class="number">0</span>)</span><br><span class="line">X = rng.random_sample((<span class="number">10</span>, <span class="number">3</span>))  <span class="comment"># 10 points in 3 dimensions</span></span><br><span class="line">tree = KDTree(X, leaf_size=<span class="number">2</span>)        </span><br><span class="line">s = pickle.dumps(tree)                     </span><br><span class="line">tree_copy = pickle.loads(s)                </span><br><span class="line">dist, ind = tree_copy.query(X[:<span class="number">1</span>], k=<span class="number">3</span>)     </span><br><span class="line">print(ind)  <span class="comment"># indices of 3 closest neighbors</span></span><br><span class="line"><span class="comment"># [0 3 1]</span></span><br><span class="line">print(dist)  <span class="comment"># distances to 3 closest neighbors</span></span><br><span class="line"><span class="comment"># [ 0.          0.19662693  0.29473397]</span></span><br></pre></td></tr></table></figure>
<h3 id="screen-shoot-to-explain"><a href="#screen-shoot-to-explain" class="headerlink" title="screen shoot to explain"></a>screen shoot to explain</h3><p><img src="1.png" alt="1.png"><br><img src="2.png" alt="2.png"><br><img src="2.png" alt="3.png"></p>
<h2 id="How-to-use-KDtree-in-KNN"><a href="#How-to-use-KDtree-in-KNN" class="headerlink" title="How to use KDtree in KNN"></a>How to use KDtree in KNN</h2><ol>
<li>Start by exploring leaf node containing query point </li>
<li>Compute distance to each other point at leaf node </li>
<li>Backtrack and try other branch at each node visited</li>
</ol>
<p><img src="4.png" alt="4.png"></p>
<h2 id="Moving-away-from-exact-NN-search"><a href="#Moving-away-from-exact-NN-search" class="headerlink" title="Moving away from exact NN search"></a>Moving away from exact NN search</h2><p>what we want? </p>
<ol>
<li>Approximate neighbor finding(Don’t find exact neighbor, but that’s okay for<br>many applications)</li>
<li>Focus on methods that provide good probabilistic guarantees on approximation</li>
</ol>
<h2 id="LSH-as-an-alternative-to-KD-trees"><a href="#LSH-as-an-alternative-to-KD-trees" class="headerlink" title="LSH as an alternative to KD-trees"></a>LSH as an alternative to KD-trees</h2><ol>
<li>Draw h random lines</li>
<li>Compute <strong>score</strong> for each point under each line and translate to binary index</li>
<li>Use h-bit binary vector per data point as bin index</li>
<li>Create hash table</li>
<li>For each query point x, search bin(x),then neighboring bins until time limit</li>
</ol>
<p><img src="5.png" alt="5.png"><br><img src="6.png" alt="6.png"></p>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Machine Learning Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>AdaBoost Summary</title>
    <url>/AdaBoost-Summary/2019/05/14/</url>
    <content><![CDATA[<ol>
<li><p>initialize equal weights for all samples</p>
<script type="math/tex; mode=display">\alpha_{i} = \frac{1}{N}</script></li>
<li><p>Repeat t = 1,…,T</p>
<ul>
<li>learn $f_{t}(x)$ with data weights $\alpha_{i}$</li>
<li>compute weighted error<script type="math/tex; mode=display">weighted_{error_{t}} = \sum_{i=1}^{m}\alpha_{i}I(y_{i} \neq f_{t}(x_{i}))</script></li>
<li>compute coefficient <script type="math/tex; mode=display">\hat{w_{t}} = \frac{1}{2}\ln(\frac{1 - weighted_{error_{t}} }{weighted_{error_{t}}})</script><ul>
<li>$\hat{w_{t}}$ is higher when weighted_error is larger</li>
</ul>
</li>
<li>recomputed weights $\alpha_{i}$<script type="math/tex; mode=display">\alpha_{i} =  
    \begin{equation}
    \left\{ 
    \begin{array}{lr}
      \alpha_{i}e^{-\hat{w_{t}}} & \\ 
      \alpha_{i}e^{\hat{w{t}}}   &
     \end{array}
     \right.
     \end{equation}</script></li>
<li>Normalize weights $\alpha_{i}$<ul>
<li>if $x_{i}$ often mistake, weight $\alpha_{i}$ gets very large</li>
<li>if $x_{i}$ often correct, weight $\alpha_{i}$ gets very small<script type="math/tex; mode=display">\alpha_{i} = \frac{\alpha_{i}}{\sum_{i}^{m}\alpha_{i}}</script></li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="screen-shoot"><a href="#screen-shoot" class="headerlink" title="screen shoot"></a>screen shoot</h3><p><img src="adaboost.png" alt></p>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Machine Learning Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>TFserving Introdcution</title>
    <url>/TFserving-Introdcution/2019/05/13/</url>
    <content><![CDATA[<h2 id="TensorFlow-SavedModel"><a href="#TensorFlow-SavedModel" class="headerlink" title="TensorFlow SavedModel"></a>TensorFlow SavedModel</h2><ul>
<li>SaveModel与语言无关</li>
<li>Tensorflow Serving server部署模型必须选择SavedModel格式。</li>
</ul>
<p>一个比较完整的SavedModel模型包含以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assets/</span><br><span class="line">assets.extra/</span><br><span class="line">variables/</span><br><span class="line">    variables.data</span><br><span class="line">    variables.index</span><br><span class="line">saved_model.pb</span><br></pre></td></tr></table></figure>
<p>saved_model.pb是<strong>MetaGraphDef</strong>，它包含图形结构。variables文件夹保存训练所习得的权重。assets文件夹可以添加可能需要的外部文件，assets.extra是一个库可以添加其特定assets的地方。</p>
<blockquote>
<p>MetaGraph是一个数据流图，加上其相关的变量、assets和签名。MetaGraphDef是MetaGraph的Protocol Buffer表示。</p>
</blockquote>
<h3 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tf.saved_model.simple_save(sess,</span><br><span class="line">            <span class="string">"./model"</span>,</span><br><span class="line">            inputs=&#123;<span class="string">"myInput"</span>: x&#125;,</span><br><span class="line">            outputs=&#123;<span class="string">"myOutput"</span>: y&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.Session(graph=tf.Graph()) <span class="keyword">as</span> sess:</span><br><span class="line">  tf.saved_model.loader.load(sess, [<span class="string">"serve"</span>], <span class="string">"./model"</span>)</span><br><span class="line">  graph = tf.get_default_graph()</span><br></pre></td></tr></table></figure>
<h2 id="Tensorflow-Serving"><a href="#Tensorflow-Serving" class="headerlink" title="Tensorflow Serving"></a>Tensorflow Serving</h2><h3 id="Key-Concepts"><a href="#Key-Concepts" class="headerlink" title="Key Concepts:"></a>Key Concepts:</h3><ul>
<li><strong>Servables</strong>: the underlying objects that clients use to perform computation.<br>Typical servables include:<ul>
<li>TensorFlow SavedModelBundle(tensorflow::Session)</li>
<li>lookup table for embedding/vocabulary lookups.</li>
</ul>
</li>
<li><strong>Loaders</strong>: manage a servable’s life cycle.</li>
<li><strong>Sources</strong>: plugin modules that originate servables.</li>
<li><strong>Managers</strong>: Sounds like they basically just work with the 3 previous things. They load, serve, and unload servables.</li>
<li><strong>Core</strong>: All of the above wrapped into a single object.</li>
</ul>
<p><img src="7D22A7732CAFA18CAC17320F8FA0FE1D.png" alt="Screen Shot 2019-05-13 at 10.16.36.png"></p>
<h4 id="Servables"><a href="#Servables" class="headerlink" title="Servables"></a>Servables</h4><p>Servables 是 TensorFlow Serving 中最核心的抽象，是客户端用于执行计算 (例如：查找或推断) 的底层对象。</p>
<h4 id="Servables-Streams"><a href="#Servables-Streams" class="headerlink" title="Servables Streams"></a>Servables Streams</h4><p>一个 Servables Stream 是多个版本的 Servable 的序列，其按照版本号的递增排序。</p>
<h4 id="Loaders"><a href="#Loaders" class="headerlink" title="Loaders"></a>Loaders</h4><p>Loaders 管理一个 Servable 的生命周期。Loader API 提供了一个独立于特定机器学习算法，数据和用户产品用例的通用基础平台。具体说，Loaders 将一个 Servable 的加载和卸载的 API 进行了标准化。</p>
<h4 id="Sources"><a href="#Sources" class="headerlink" title="Sources"></a>Sources</h4><p>Sources 是用于查找和提供 Servables 的插件模块，每个 Source 提供零个或多个 Servable Streams。对于每个 Servable Stream，一个 Source 为一个 Loader 实例对不同版本的载入提供支持。(一个 Source 通常是由零个或多个 SourceAdapters 链接在一起，其中最后一项将触发 Loaders。)</p>
<h4 id="Managers"><a href="#Managers" class="headerlink" title="Managers"></a>Managers</h4><p>Managers 维护 Servables 的整个生命周期，包括：</p>
<ul>
<li>加载 Servables</li>
<li>为 Servables 提供服务</li>
<li>卸载 Servables</li>
</ul>
<h4 id="Core"><a href="#Core" class="headerlink" title="Core"></a>Core</h4><p>TensorFlow Serving Core 通过 TensorFlow Serving APIs 管理 Servales 的如下方面：</p>
<ul>
<li>生命周期 (lifecycle)</li>
<li>度量信息 (metrics)</li>
</ul>
<p>启动过程主要是创建ServerCore对象, 并启动grpc server和http server.</p>
<ul>
<li><p>ServerCore对象可以认为是系统中枢, 模型的维护, 服务请求的处理都是由他完成. ServerCore通过BasicManager管理所有的model(多版本号), 并查处模型已经提供预测、分类、回归请求.</p>
</li>
<li><p>ServerCore启动的时候创建AspiredVersionManager, AspiredVersionManager会启动定时任务(线程), 用于处理AspiredVersionRequest消息, 其实就是模型的加载、卸载.</p>
</li>
<li><p>启动的时候ServerCore还会根据模型配置创建文件系统扫描任务, 定时扫描模型文件目录并进行相应的处理</p>
</li>
<li><p>http rest服务启动后, 会监听http post请求, 通过serverCore查找对应的模型版本, 获取对应的已加载的模型, 进行运算并返回结果. gRPC服务与 http rest服务类似.</p>
</li>
</ul>
<h4 id="example"><a href="#example" class="headerlink" title="example"></a>example</h4><p>例如：一个 Source 请求一个包含最近更新的权重的 TensorFlow 计算图，其权重信息存储在硬盘的一个文件中。</p>
<ol>
<li>Source 检测到一个新版本的模型权重，其会创建一个包含指向磁盘中模型数据指针的 Loader。</li>
<li>Source 通知 Dynamic Manager 此时的 Aspired Version。</li>
<li>Dynamic Manager 应用 Version Policy 并决定载入新版本。</li>
<li>Dynamic Manager 通知 Loader 目前有充足的内存，Loader 利用新的权重实例化 Tensorflow 计算图。</li>
<li>一个客户端请求最新版本的模型，Dynamic Manager 返回一个最新版本 Servable 的处理器。</li>
</ol>
<h3 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h3><ol>
<li>Support distributed TensorFlow models</li>
<li>Support the general RESTful/HTTP APIs</li>
<li>Support inference with accelerated GPU</li>
</ol>
<p>If you want to use GPU, try with the docker image with GPU tag and put cuda files in /usr/cuda_files/.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> CUDA_SO=<span class="string">"-v /usr/cuda_files/:/usr/cuda_files/"</span></span><br><span class="line"><span class="built_in">export</span> DEVICES=$(\ls /dev/nvidia* | xargs -I&#123;&#125; <span class="built_in">echo</span> <span class="string">'--device &#123;&#125;:&#123;&#125;'</span>)</span><br><span class="line"><span class="built_in">export</span> LIBRARY_ENV=<span class="string">"-e LD_LIBRARY_PATH=/usr/local/cuda/extras/CUPTI/lib64:/usr/local/nvidia/lib:/usr/local/nvidia/lib64:/usr/cuda_files"</span></span><br><span class="line">docker run -it -p 8500:8500 <span class="variable">$CUDA_SO</span> <span class="variable">$DEVICES</span> <span class="variable">$LIBRARY_ENV</span> tobegit3hub/simple_tensorflow_serving:latest-gpu</span><br></pre></td></tr></table></figure>
<p>You can set session config and gpu options in command-line parameter or the model config file.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">simple_tensorflow_serving --model_base_path=<span class="string">"./models/tensorflow_template_application_model"</span> --session_config=<span class="string">'&#123;"log_device_placement": true, "allow_soft_placement": ˓→true, "allow_growth": true, "per_process_gpu_memory_fraction": 0.5&#125;'</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"model_config_list"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"default"</span>,</span><br><span class="line"><span class="string">"base_path"</span>: <span class="string">"./models/tensorflow_template_application_model/"</span>, <span class="string">"platform"</span>: <span class="string">"tensorflow"</span>,</span><br><span class="line"><span class="string">"session_config"</span>: &#123;</span><br><span class="line"><span class="string">"log_device_placement"</span>: <span class="literal">true</span>, <span class="string">"allow_soft_placement"</span>: <span class="literal">true</span>, <span class="string">"allow_growth"</span>: <span class="literal">true</span>, <span class="string">"per_process_gpu_memory_fraction"</span>: 0.5</span><br><span class="line">&#125; &#125;</span><br><span class="line">] &#125;</span><br></pre></td></tr></table></figure>
<p>Here is the benchmark of CPU and GPU inference and y-coordinate is the latency(the lower the better).<br><img src="0E839B6EE8212EBA65B9FA12663C1F51.png" alt="Screen Shot 2019-05-13 at 13.05.55.png"></p>
<ol>
<li>Support curl and other command-line tools</li>
<li>Support clients in any programming language</li>
<li>Support code-gen client by models without coding</li>
</ol>
<ul>
<li><p>You can generate the test json data for the online models.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://localhost:8500/v1/models/default/gen_json</span><br></pre></td></tr></table></figure>
</li>
<li><p>Or generate clients in different languages(Bash, Python, Golang, JavaScript etc.) for your model without writing any code.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://localhost:8500/v1/models/default/gen_client?language=python &gt; client.py</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol>
<li><p>Support inference with raw file for image models</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X POST -F <span class="string">'image=@./images/mew.jpg'</span> -F <span class="string">"model_version=1"</span> 127.0.0.1:8500</span><br></pre></td></tr></table></figure>
</li>
<li><p>Support statistical metrics for verbose requests</p>
</li>
<li>Support serving multiple models/multiple version at the same time<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    model_config_list:&#123;</span><br><span class="line">    config:&#123;</span><br><span class="line">      name:&quot;model1&quot;,</span><br><span class="line">      base_path:&quot;/models/multiModel/model1&quot;,</span><br><span class="line">      model_platform:&quot;tensorflow&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    config:&#123;</span><br><span class="line">      name:&quot;model2&quot;,</span><br><span class="line">      base_path:&quot;/models/multiModel/model2&quot;,</span><br><span class="line">      model_platform:&quot;tensorflow&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    config:&#123;</span><br><span class="line">      name:&quot;model3&quot;,</span><br><span class="line">      base_path:&quot;/models/multiModel/model3&quot;,</span><br><span class="line">      model_platform:&quot;tensorflow&quot;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -p 8501:8501 --mount <span class="built_in">type</span>=<span class="built_in">bind</span>,<span class="built_in">source</span>=/home/jerry/tmp/multiModel/,target=/models/multiModel \</span><br><span class="line"> -t tensorflow/serving --model_config_file=/models/multiModel/models.config</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line">SERVER_URL = <span class="string">'http://localhost:8501/v1/models/model3:predict'</span>  </span><br><span class="line"><span class="comment">#注意SERVER_URL中的‘model3’是config文件中定义的模型name,不是文件夹名称</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prediction</span><span class="params">()</span>:</span> </span><br><span class="line">    predict_request=<span class="string">'&#123;"instances":%s&#125;'</span> % str([[[<span class="number">10</span>]*<span class="number">7</span>]*<span class="number">7</span>]) </span><br><span class="line">    print(predict_request) </span><br><span class="line">    response = requests.post(SERVER_URL, data=predict_request) </span><br><span class="line">    print(response)</span><br><span class="line">    prediction = response.json()[<span class="string">'predictions'</span>][<span class="number">0</span>] </span><br><span class="line">    print(prediction) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>: </span><br><span class="line">    prediction()</span><br></pre></td></tr></table></figure>
<p><strong>请求指定模型版本</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SERVER_URL = &apos;http://localhost:8501/v1/models/model1/versions/100001:predict&apos;</span><br></pre></td></tr></table></figure></p>
<ol>
<li>Support dynamic online and offline(hot plugin) for model versions</li>
</ol>
<p>tfserving支持模型的Hot Plug，上述容器运行起来之后，如果在宿主机的 /home/jerry/tmp/multiModel/model1/ 文件夹下新增模型文件如100003/，tfserving会自动加载新模型；同样如果移除现有模型，tfserving也会自动卸载模型。</p>
<ol>
<li>Support loading new custom op for TensorFlow models</li>
</ol>
<p>If your models rely on new TensorFlow custom op, you can run the server while loading the so files.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">simple_tensorflow_serving --model_base_path=<span class="string">"./model/"</span> --custom_op_paths=<span class="string">"./foo_op/"</span></span><br></pre></td></tr></table></figure></p>
<ol>
<li>Support secure authentication with configurable basic auth</li>
</ol>
<p>For enterprises, we can enable basic auth for all the APIs and any anonymous request is denied.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./server.py --model_base_path=<span class="string">"./models/tensorflow_template_application_model/"</span> -- enable_auth=True --auth_username=<span class="string">"admin"</span> --auth_password=<span class="string">"admin"</span></span><br></pre></td></tr></table></figure></p>
<p>If you are using the Web dashboard, just type your certification. If you are using clients, give the username and password within the request.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -u admin:admin -H <span class="string">"Content-Type: application/json"</span> -X POST -d <span class="string">'&#123;"data": &#123;"keys": ˓→[[11.0], [2.0]], "features": [[1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, ˓→1]]&#125;&#125;'</span> http://127.0.0.1:8500</span><br></pre></td></tr></table></figure></p>
<ol>
<li>Support multiple models of TensorFlow/MXNet/PyTorch/Caffe2/CNTK/ONNX/H2o/Scikit-learn/XGBoost/PMML</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">simple_tensorflow_serving --model_base_path=<span class="string">"./models/tensorflow_template_application_ model"</span> --model_platform=<span class="string">"tensorflow"</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">simple_tensorflow_serving --model_base_path=<span class="string">"./models/mxnet_mlp/mx_mlp"</span> --model_ platform=<span class="string">"mxnet"</span></span><br></pre></td></tr></table></figure>
<ol>
<li>Extra support for image models</li>
</ol>
<ul>
<li>uploading the image files in web browser</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">simple_tensorflow_serving --model_base_path=<span class="string">"./deep_image_model"</span></span><br></pre></td></tr></table></figure>
<ul>
<li>using form-data<br>  accept the base64 strings as input, then decode and resize the tensor for the required model input.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">image_string = base64.urlsafe_b64encode(open(<span class="string">"./test.png"</span>, <span class="string">"rb"</span>).read())</span><br><span class="line">  endpoint = <span class="string">"http://127.0.0.1:8500"</span></span><br><span class="line">  json_data = &#123;<span class="string">"model_name"</span>: <span class="string">"default"</span>, <span class="string">"data"</span>: &#123;<span class="string">"images"</span>: [image_string]&#125; &#125;</span><br><span class="line">  result = requests.post(endpoint, json=json_data)</span><br><span class="line">  print(result.json())</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>: </span><br><span class="line">  main()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>To conclude, its seems that the serialization of Tensorflow Protobuff is less “consistent”, time wise, then the one to plain JSON, though it is more efficient size wise. I would test these on more complex objects, but for now, it seems that if you have simple big inputs then gRPC would be much faster. Having more complex objects as inputs (such as arrays and matrix), up until a certain size, REST with JSON should be faster (as we have seen in the MNIST example tested locally). However, the requests themselves (and probably their processing on the server side) are much faster using gRPC, so bandwidth should be put into the equation as the inputs size grows.</p>
</blockquote>
<h3 id="APIs"><a href="#APIs" class="headerlink" title="APIs"></a>APIs</h3><h4 id="gRPC"><a href="#gRPC" class="headerlink" title="gRPC"></a>gRPC</h4><ul>
<li>gRPC使用ProtoBuf来定义服务，ProtoBuf是由Google开发的一种数据序列化协议，性能出众，得到了广泛的应用;</li>
<li>支持多种语言;</li>
<li>基于HTTP/2标准设计。</li>
</ul>
<h4 id="RESTful-API"><a href="#RESTful-API" class="headerlink" title="RESTful API"></a>RESTful API</h4><p>TensorFlow ModelServr 除了提供 gRPC APIs 以外，还支持 RESTful APIs 用于 TensorFlow 的分类，回归和预测模型<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST http://host:port/&lt;URI&gt;:&lt;VERB&gt;</span><br><span class="line"></span><br><span class="line">URI: /v1/models/<span class="variable">$&#123;MODEL_NAME&#125;</span>[/versions/<span class="variable">$&#123;MODEL_VERSION&#125;</span>]</span><br><span class="line">VERB: classify|regress|predict</span><br></pre></td></tr></table></figure></p>
<p>example<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://host:port/v1/models/iris:classify</span><br><span class="line">http://host:port/v1/models/mnist/versions/314:predict</span><br></pre></td></tr></table></figure></p>
<p>classify 和 regress APIs 的请求内容必须为如下格式的 JSON 对象</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  // Optional: serving signature to use.</span><br><span class="line">  // If unspecifed default serving signature is used.</span><br><span class="line">  <span class="string">"signature_name"</span>: &lt;string&gt;,</span><br><span class="line"></span><br><span class="line">  // Optional: Common context shared by all examples.</span><br><span class="line">  // Features that appear here MUST NOT appear <span class="keyword">in</span> examples (below).</span><br><span class="line">  <span class="string">"context"</span>: &#123;</span><br><span class="line">    <span class="string">"&lt;feature_name3&gt;"</span>: &lt;value&gt;|&lt;list&gt;</span><br><span class="line">    <span class="string">"&lt;feature_name4&gt;"</span>: &lt;value&gt;|&lt;list&gt;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // List of Example objects</span><br><span class="line">  <span class="string">"examples"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      // Example 1</span><br><span class="line">      <span class="string">"&lt;feature_name1&gt;"</span>: &lt;value&gt;|&lt;list&gt;,</span><br><span class="line">      <span class="string">"&lt;feature_name2&gt;"</span>: &lt;value&gt;|&lt;list&gt;,</span><br><span class="line">      ...</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      // Example 2</span><br><span class="line">      <span class="string">"&lt;feature_name1&gt;"</span>: &lt;value&gt;|&lt;list&gt;,</span><br><span class="line">      <span class="string">"&lt;feature_name2&gt;"</span>: &lt;value&gt;|&lt;list&gt;,</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Response format<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"result"</span>: [</span><br><span class="line">    // List of class label/score pairs <span class="keyword">for</span> first Example (<span class="keyword">in</span> request)</span><br><span class="line">    [ [&lt;label1&gt;, &lt;score1&gt;], [&lt;label2&gt;, &lt;score2&gt;], ... ],</span><br><span class="line"></span><br><span class="line">    // List of class label/score pairs <span class="keyword">for</span> next Example (<span class="keyword">in</span> request)</span><br><span class="line">    [ [&lt;label1&gt;, &lt;score1&gt;], [&lt;label2&gt;, &lt;score2&gt;], ... ],</span><br><span class="line">    ...</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="Encoding-binary-values"><a href="#Encoding-binary-values" class="headerlink" title="Encoding binary values"></a>Encoding binary values</h4><p>JSON 使用 UTF-8 格式编码。如果输入特征或张量的值为二进制 (例如：图像)，则你需要将数据利用 Base64 进行编码，并将其以 b64 为键封装在 JSON 对象中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123; &quot;b64&quot;: &lt;base64 encoded string&gt; &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;signature_name&quot;: &quot;classify_objects&quot;,</span><br><span class="line">  &quot;examples&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;image&quot;: &#123; &quot;b64&quot;: &quot;aW1hZ2UgYnl0ZXM=&quot; &#125;,</span><br><span class="line">      &quot;caption&quot;: &quot;seaside&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;image&quot;: &#123; &quot;b64&quot;: &quot;YXdlc29tZSBpbWFnZSBieXRlcw==&quot; &#125;,</span><br><span class="line">      &quot;caption&quot;: &quot;mountains&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一个包含图片 image (二进制数据) 和标题 caption 特征的分类请求示例如下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"signature_name"</span>: <span class="string">"classify_objects"</span>,</span><br><span class="line">  <span class="string">"examples"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"image"</span>: &#123; <span class="string">"b64"</span>: <span class="string">"aW1hZ2UgYnl0ZXM="</span> &#125;,</span><br><span class="line">      <span class="string">"caption"</span>: <span class="string">"seaside"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"image"</span>: &#123; <span class="string">"b64"</span>: <span class="string">"YXdlc29tZSBpbWFnZSBieXRlcw=="</span> &#125;,</span><br><span class="line">      <span class="string">"caption"</span>: <span class="string">"mountains"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="TensorFlow-Serving-Benchmark"><a href="#TensorFlow-Serving-Benchmark" class="headerlink" title="TensorFlow Serving Benchmark"></a>TensorFlow Serving Benchmark</h3><h3 id="MNIST-235MB-image"><a href="#MNIST-235MB-image" class="headerlink" title="MNIST (235MB image)"></a>MNIST (235MB image)</h3><p>Running a simple benchmark on my machine (Macbook pro) with 1000 sync requests and a batch size of 100 images in each request had some surprising results. The inference rate was in favor of the REST API, tough, as expected, the payload of requests was twice the size when using REST. I run this test several times and got the same results.</p>
<ul>
<li><p>REST<br>Inference rate: 1,729 img/sec<br>Network: 620 MB</p>
</li>
<li><p>gRPC<br>Inference rate: 1,239 img/sec<br>Network: 320 MB</p>
</li>
</ul>
<p>Removing the serializations part from the gRPC, and sending the same prepared request over and over again indeed had increased the inference rate dramatically to 25,961 img/sec when using gRPC. Doing the same, and sending the same already serialized REST request (JSON) have increased the inference rate as well, but not as much, to 7,680 img/sec. Giving the advantage to using gRPC by a factor of ~3.5. This suggests that a lot of the overhead is in the transformation of the Numpy array into a tensor Protobuff or JSON. This actually made sense when working locally as the network bandwidth is less of an issue.</p>
<ul>
<li><p>REST (serialized once)<br>Inference rate: 7,680 img/sec<br>Network: 620 MB</p>
</li>
<li><p>gRPC (serialized once)<br>Inference rate: 25,961 img/sec<br>Network: 320 MB</p>
</li>
</ul>
<p>checking only the preparation of the requests (both gRPC and REST) have shown that when using Numpy arrays as input gRPC is little slower then REST. Using a raw PNG image (basically a string) as input, REST seems to be much slower (X6) then gRPC</p>
<ul>
<li><p>REST (preperation only)<br>Image: 2,148 img/sec<br>Numpy array: 1,090 img/sec</p>
</li>
<li><p>gRPC (preperation only)<br>Image: 14,490 img/sec<br>Numpy array: 1,249 img/sec</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> grpc.beta <span class="keyword">import</span> implementations</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow_serving.apis <span class="keyword">import</span> predict_pb2</span><br><span class="line"><span class="keyword">from</span> tensorflow_serving.apis <span class="keyword">import</span> prediction_service_pb2</span><br><span class="line"><span class="comment"># returns the network IN traffic size for a given container</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_network_i</span><span class="params">(container_name)</span>:</span></span><br><span class="line">    command = <span class="string">'docker stats --no-stream --format "table &#123;&#123;.NetIO&#125;&#125;" %s'</span> % container_name</span><br><span class="line">    proc = subprocess.Popen([<span class="string">'bash'</span>, <span class="string">'-c'</span>, command], stderr=subprocess.STDOUT, stdout=subprocess.PIPE)</span><br><span class="line">object = proc.communicate()</span><br><span class="line">    output = object[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">return</span> float(re.sub(<span class="string">"[^0-9.]"</span>, <span class="string">""</span>, str.split(str.split(output, <span class="string">"\n"</span>)[<span class="number">1</span>], <span class="string">'/'</span>)[<span class="number">0</span>]))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prepare_grpc_request</span><span class="params">(model_name, signature_name, data)</span>:</span></span><br><span class="line">    request = predict_pb2.PredictRequest()</span><br><span class="line">    request.model_spec.name = model_name</span><br><span class="line">    request.model_spec.signature_name = signature_name</span><br><span class="line">    request.inputs[input_name].CopyFrom(</span><br><span class="line">        tf.contrib.util.make_tensor_proto(data, dtype=<span class="keyword">None</span>))</span><br><span class="line"><span class="keyword">return</span> request</span><br><span class="line">host = <span class="string">'localhost'</span></span><br><span class="line">grpc_container_name = <span class="string">'tf_serving_mnist1'</span></span><br><span class="line">rest_container_name = <span class="string">'tf_serving_mnist2'</span></span><br><span class="line">grpc_port = <span class="string">'8500'</span></span><br><span class="line">rest_port = <span class="string">'8501'</span></span><br><span class="line">batch_size = <span class="number">100</span></span><br><span class="line">num_of_requests = <span class="number">1000</span></span><br><span class="line">model_name = <span class="string">'model'</span></span><br><span class="line">signature_name = <span class="string">'predict_images'</span></span><br><span class="line">input_name = <span class="string">'images'</span></span><br><span class="line">image_path = <span class="string">"./mnist_image.pkl"</span></span><br><span class="line"><span class="keyword">with</span> open(image_path, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    image = pickle.load(f)</span><br><span class="line">print(<span class="string">"input shape: %s"</span> % str(np.shape(image)))</span><br><span class="line">batch = np.repeat(image, batch_size, axis=<span class="number">0</span>).tolist()</span><br><span class="line">print(<span class="string">"creating batch. Now shape is: %s"</span> % str(np.shape(batch)))</span><br><span class="line">image_cnt = num_of_requests * batch_size</span><br><span class="line">print(<span class="string">"total number of images to be sent: %d"</span> % image_cnt)</span><br><span class="line">channel = implementations.insecure_channel(host, int(grpc_port))</span><br><span class="line">stub = prediction_service_pb2.beta_create_PredictionService_stub(channel)</span><br><span class="line"><span class="comment"># gRPC</span></span><br><span class="line">print(<span class="string">"starting gRPC test..."</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"warming up...."</span>)</span><br><span class="line">request = prepare_grpc_request(model_name, signature_name, batch)</span><br><span class="line">stub.Predict(request, timeout=<span class="number">600</span>)</span><br><span class="line">grpc_start_net = get_network_i(grpc_container_name)</span><br><span class="line">total_start = time.time()</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(num_of_requests):</span><br><span class="line">    request = prepare_grpc_request(model_name, signature_name, batch)</span><br><span class="line">    response = stub.Predict(request, timeout=<span class="number">600</span>)</span><br><span class="line">total_duration = float(time.time() - total_start)</span><br><span class="line">grpc_rate = image_cnt / total_duration</span><br><span class="line">grpc_end_net = get_network_i(grpc_container_name)</span><br><span class="line">grpc_net = grpc_end_net - grpc_start_net</span><br><span class="line">print(<span class="string">"--gRPC--\n"</span></span><br><span class="line"><span class="string">"Duration: %f secs -- requests: %d -- images: %d -- batch size: %d -- rate: %f img/sec -- net: %s"</span></span><br><span class="line">% (total_duration, num_of_requests, image_cnt, batch_size, grpc_rate, grpc_net))</span><br><span class="line"><span class="comment"># REST</span></span><br><span class="line">print(<span class="string">"starting REST test..."</span>)</span><br><span class="line">json = &#123;</span><br><span class="line"><span class="string">"signature_name"</span>: signature_name,</span><br><span class="line"><span class="string">"instances"</span>: batch</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"warming up...."</span>)</span><br><span class="line">req = requests.Request(<span class="string">'post'</span>, <span class="string">"http://%s:%s/v1/models/model:predict"</span> % (host, rest_port), json=json)</span><br><span class="line">rest_start_net = get_network_i(rest_container_name)</span><br><span class="line">total_start = time.time()</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(num_of_requests):</span><br><span class="line">    response = requests.post(<span class="string">"http://%s:%s/v1/models/model:predict"</span> % (host, rest_port), json=json)</span><br><span class="line">total_duration = float(time.time() - total_start)</span><br><span class="line">rest_rate = image_cnt / total_duration</span><br><span class="line">rest_end_net = get_network_i(rest_container_name)</span><br><span class="line">rest_net = rest_end_net - rest_start_net</span><br><span class="line">print(<span class="string">"--REST--\n"</span></span><br><span class="line"><span class="string">"Duration: %f secs -- requests: %d -- images: %d -- batch size: %d -- rate: %f img/sec -- net: %s"</span></span><br><span class="line">% (total_duration, num_of_requests, image_cnt, batch_size, rest_rate, rest_net))</span><br><span class="line">print(<span class="string">"--Summary--\n"</span></span><br><span class="line"><span class="string">"Inference rate ratio (REST/gRPC): %f"</span> % (rest_rate / grpc_rate))</span><br></pre></td></tr></table></figure>
<p>TFS(Simple TensorFlow Serving) and TFS(TensorFlow Serving) have similar performances for different models. Vertical coordinate is inference latency(microsecond) and the less is better.<br><img src="74BF9D5A46B9F999DAE5C1D682CCDA00.png" alt="Screen Shot 2019-05-13 at 13.21.33.png"></p>
<p>For simplest model, each request only costs ~1.9 microseconds and one instance of Simple TensorFlow Serving can achieve 5000+ QPS. With larger batch size, it can inference more than 1M instances per second.</p>
<p><img src="4D3D10F107C2EF93283F76BAFBA065D9.png" alt="Screen Shot 2019-05-13 at 13.24.15.png"></p>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Deep Learning</category>
        <category>Big Data Architecture</category>
      </categories>
      <tags>
        <tag>Tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title>Overfitting in decision trees</title>
    <url>/Overfittingin-decision-trees/2019/05/11/</url>
    <content><![CDATA[<p><strong>Reference from course note of Machine Learning Foundation from University of Washington</strong></p>
<h3 id="Principle-of-Occam’s-razor-Simpler-trees-are-better"><a href="#Principle-of-Occam’s-razor-Simpler-trees-are-better" class="headerlink" title="Principle of Occam’s razor: Simpler trees are better"></a>Principle of Occam’s razor: Simpler trees are better</h3><blockquote class="blockquote-center">Among competing hypotheses, the one with fewest assumptions should be selected </blockquote>




<h3 id="Early-stopping-for-learning-decision-trees"><a href="#Early-stopping-for-learning-decision-trees" class="headerlink" title="Early stopping for learning decision trees"></a>Early stopping for learning decision trees</h3><ol>
<li><strong>Limit tree depth</strong>: Stop splitting after a certain depth<br><img src="1.png" alt></li>
<li><strong>Classification error</strong>: Do not consider any split that does not cause a sufficient decrease in classification error<ul>
<li>Typically, add magic parameter $\epsilon$,Stop if error doesn’t decrease by more than $\epsilon$</li>
<li>Some pitfalls to this rule</li>
<li>Very useful in practice</li>
</ul>
</li>
<li><strong>Minimum node “size”</strong>: Do not split an intermediate node which contains too few data points<br><img src="2.png" alt></li>
</ol>
<h3 id="Pruning-Simplify-the-tree-after-the-learning-algorithm-terminates"><a href="#Pruning-Simplify-the-tree-after-the-learning-algorithm-terminates" class="headerlink" title="Pruning: Simplify the tree after the learning algorithm terminates"></a>Pruning: Simplify the tree after the learning algorithm terminates</h3><ol>
<li>Simple measure of complexity of tree<center><p><strong>L(T) = number of leaf nodes</strong></p></center></li>
<li>Balance simplicity &amp; predictive power<br><strong>Desired total quality format</strong><br><center><p><strong>Total cost = measure of fit + measure of complexity</strong></p></center><script type="math/tex; mode=display">C(T) = Error(T) + \lambda L(T)</script></li>
</ol>
<ul>
<li>$\lambda = 0$: standard Decision Tree learning</li>
<li>$\lambda = +\inf$: root, majority classification</li>
<li>$\lambda = 0 - +\inf$: balance of fit and complexity<br><img src="3.png" alt></li>
</ul>
<h3 id="Tree-pruning-algorithm"><a href="#Tree-pruning-algorithm" class="headerlink" title="Tree pruning algorithm"></a>Tree pruning algorithm</h3><p><img src="4.png" alt><br><img src="5.png" alt><br><img src="6.png" alt></p>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Machine Learning Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Debris 20190509</title>
    <url>/Debris-20190509/2019/05/09/</url>
    <content><![CDATA[<h2 id="Docker-deployment"><a href="#Docker-deployment" class="headerlink" title="Docker deployment"></a>Docker deployment</h2><p>The Docker daemon uses the HTTP_PROXY, HTTPS_PROXY, and NO_PROXY environmental variables in its start-up environment to configure HTTP or HTTPS proxy behavior. If your compant use a proxy, you need to change the setting of proxy in docker.</p>
<ol>
<li><p>edit the http-proxy.conf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nano /etc/systemd/system/docker.service.d/http-proxy.conf</span><br><span class="line">[Service]</span><br><span class="line">Environment=<span class="string">"HTTP_PROXY=http://ip:port"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>edit daemon.json</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>:[<span class="string">"https://docker.mirrors.ustc.edu.cn"</span>,<span class="string">"http://hub-mirror.c.163.com"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li><p>sudo systemctl daemon-reload</p>
</li>
<li><p>sudo systemctl restart docker</p>
</li>
</ol>
<p><strong>if not work</strong></p>
<ol>
<li>check the version of docker</li>
<li>downgrade the version to </li>
</ol>
<h2 id="TFserving"><a href="#TFserving" class="headerlink" title="TFserving"></a>TFserving</h2><p>Once we have our Tensorflow or Keras based model trained, we needs to think on how to use it in, deploy it in production. we may want to Dockerize it as a micro-service, implementing a custom GRPC (or REST- or not) interface. Then deploy this to server or Kubernetes cluster and have other client micro-services calling it. Google Tensorflow Serving library helps here, to save our model to disk, and then load and serve a <strong>GRPC</strong> or <strong>RESTful</strong> interface to interact with it.</p>
<p><img src="TFserving.png" alt="TFserving.png"></p>
<h3 id="Deploy-docker-environment-of-TFserving"><a href="#Deploy-docker-environment-of-TFserving" class="headerlink" title="Deploy docker environment of TFserving"></a>Deploy docker environment of TFserving</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull tensorflow/serving</span><br></pre></td></tr></table></figure>
<h3 id="download-example-code"><a href="#download-example-code" class="headerlink" title="download example code"></a>download example code</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /tmp/tfserving</span><br><span class="line"><span class="built_in">cd</span> /tmp/tfserving</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/tensorflow/serving</span><br></pre></td></tr></table></figure>
<h3 id="RESTful-API"><a href="#RESTful-API" class="headerlink" title="RESTful API"></a>RESTful API</h3><ol>
<li>run TFserving</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -p 8501:8501 \</span><br><span class="line">  --mount <span class="built_in">type</span>=<span class="built_in">bind</span>,\</span><br><span class="line">   <span class="built_in">source</span>=/tmp/tfserving/serving/tensorflow_serving/servables/tensorflow/testdata/saved_model_half_plus_two_cpu,\</span><br><span class="line">target=/models/half_plus_two \</span><br><span class="line">-e MODEL_NAME=half_plus_two -t tensorflow/serving &amp;</span><br></pre></td></tr></table></figure>
<ol>
<li>run Client</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -d <span class="string">'&#123;"instances": [1.0, 2.0, 5.0]&#125;'</span> \</span><br><span class="line">  -X POST http://localhost:8501/v1/models/half_plus_two:predict</span><br></pre></td></tr></table></figure>
<ol>
<li>result</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123; <span class="string">"predictions"</span>: [2.5, 3.0, 4.5] &#125;</span><br></pre></td></tr></table></figure>
<h3 id="gPRC-API"><a href="#gPRC-API" class="headerlink" title="gPRC API"></a>gPRC API</h3><ol>
<li>run a mnist model and save the model</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 mnist_saved_model.py models/mnist</span><br></pre></td></tr></table></figure>
<p>source code</p>
<ul>
<li>rain a model</li>
<li>Save the model we have trained</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> os</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">    <span class="comment"># This is a placeholder for a Google-internal import.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> mnist_input_data</span><br><span class="line"></span><br><span class="line">    tf.app.flags.DEFINE_integer(<span class="string">'training_iteration'</span>, <span class="number">1000</span>,</span><br><span class="line">                                <span class="string">'number of training iterations.'</span>)</span><br><span class="line">    tf.app.flags.DEFINE_integer(<span class="string">'model_version'</span>, <span class="number">1</span>, <span class="string">'version number of the model.'</span>)</span><br><span class="line">    tf.app.flags.DEFINE_string(<span class="string">'work_dir'</span>, <span class="string">'/tmp'</span>, <span class="string">'Working directory.'</span>)</span><br><span class="line">    FLAGS = tf.app.flags.FLAGS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(_)</span>:</span></span><br><span class="line">      <span class="keyword">if</span> len(sys.argv) &lt; <span class="number">2</span> <span class="keyword">or</span> sys.argv[<span class="number">-1</span>].startswith(<span class="string">'-'</span>):</span><br><span class="line">        print(<span class="string">'Usage: mnist_saved_model.py [--training_iteration=x] '</span></span><br><span class="line">              <span class="string">'[--model_version=y] export_dir'</span>)</span><br><span class="line">        sys.exit(<span class="number">-1</span>)</span><br><span class="line">      <span class="keyword">if</span> FLAGS.training_iteration &lt;= <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'Please specify a positive value for training iteration.'</span>)</span><br><span class="line">        sys.exit(<span class="number">-1</span>)</span><br><span class="line">      <span class="keyword">if</span> FLAGS.model_version &lt;= <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'Please specify a positive value for version number.'</span>)</span><br><span class="line">        sys.exit(<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">      <span class="comment"># Train model</span></span><br><span class="line">      print(<span class="string">'Training model...'</span>)</span><br><span class="line">      mnist = mnist_input_data.read_data_sets(FLAGS.work_dir, one_hot=<span class="keyword">True</span>)</span><br><span class="line">      sess = tf.InteractiveSession()</span><br><span class="line">      serialized_tf_example = tf.placeholder(tf.string, name=<span class="string">'tf_example'</span>)</span><br><span class="line">      feature_configs = &#123;<span class="string">'x'</span>: tf.FixedLenFeature(shape=[<span class="number">784</span>], dtype=tf.float32),&#125;</span><br><span class="line">      tf_example = tf.parse_example(serialized_tf_example, feature_configs)</span><br><span class="line">      x = tf.identity(tf_example[<span class="string">'x'</span>], name=<span class="string">'x'</span>)  <span class="comment"># use tf.identity() to assign name</span></span><br><span class="line">      y_ = tf.placeholder(<span class="string">'float'</span>, shape=[<span class="keyword">None</span>, <span class="number">10</span>])</span><br><span class="line">      w = tf.Variable(tf.zeros([<span class="number">784</span>, <span class="number">10</span>]))</span><br><span class="line">      b = tf.Variable(tf.zeros([<span class="number">10</span>]))</span><br><span class="line">      sess.run(tf.global_variables_initializer())</span><br><span class="line">      y = tf.nn.softmax(tf.matmul(x, w) + b, name=<span class="string">'y'</span>)</span><br><span class="line">      cross_entropy = -tf.reduce_sum(y_ * tf.log(y))</span><br><span class="line">      train_step = tf.train.GradientDescentOptimizer(<span class="number">0.01</span>).minimize(cross_entropy)</span><br><span class="line">      values, indices = tf.nn.top_k(y, <span class="number">10</span>)</span><br><span class="line">      table = tf.contrib.lookup.index_to_string_table_from_tensor(</span><br><span class="line">          tf.constant([str(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]))</span><br><span class="line">      prediction_classes = table.lookup(tf.to_int64(indices))</span><br><span class="line">      <span class="keyword">for</span> _ <span class="keyword">in</span> range(FLAGS.training_iteration):</span><br><span class="line">        batch = mnist.train.next_batch(<span class="number">50</span>)</span><br><span class="line">        train_step.run(feed_dict=&#123;x: batch[<span class="number">0</span>], y_: batch[<span class="number">1</span>]&#125;)</span><br><span class="line">      correct_prediction = tf.equal(tf.argmax(y, <span class="number">1</span>), tf.argmax(y_, <span class="number">1</span>))</span><br><span class="line">      accuracy = tf.reduce_mean(tf.cast(correct_prediction, <span class="string">'float'</span>))</span><br><span class="line">      print(<span class="string">'training accuracy %g'</span> % sess.run(</span><br><span class="line">          accuracy, feed_dict=&#123;</span><br><span class="line">              x: mnist.test.images,</span><br><span class="line">              y_: mnist.test.labels</span><br><span class="line">          &#125;))</span><br><span class="line">      print(<span class="string">'Done training!'</span>)</span><br><span class="line"></span><br><span class="line">      <span class="comment"># Export model</span></span><br><span class="line">      <span class="comment"># WARNING(break-tutorial-inline-code): The following code snippet is</span></span><br><span class="line">      <span class="comment"># in-lined in tutorials, please update tutorial documents accordingly</span></span><br><span class="line">      <span class="comment"># whenever code changes.</span></span><br><span class="line">      export_path_base = sys.argv[<span class="number">-1</span>]</span><br><span class="line">      export_path = os.path.join(</span><br><span class="line">          tf.compat.as_bytes(export_path_base),</span><br><span class="line">          tf.compat.as_bytes(str(FLAGS.model_version)))</span><br><span class="line">      print(<span class="string">'Exporting trained model to'</span>, export_path)</span><br><span class="line">      builder = tf.saved_model.builder.SavedModelBuilder(export_path)</span><br><span class="line"></span><br><span class="line">      <span class="comment"># Build the signature_def_map.</span></span><br><span class="line">      classification_inputs = tf.saved_model.utils.build_tensor_info(</span><br><span class="line">          serialized_tf_example)</span><br><span class="line">      classification_outputs_classes = tf.saved_model.utils.build_tensor_info(</span><br><span class="line">          prediction_classes)</span><br><span class="line">      classification_outputs_scores = tf.saved_model.utils.build_tensor_info(values)</span><br><span class="line"></span><br><span class="line">      classification_signature = (</span><br><span class="line">          tf.saved_model.signature_def_utils.build_signature_def(</span><br><span class="line">              inputs=&#123;</span><br><span class="line">                  tf.saved_model.signature_constants.CLASSIFY_INPUTS:</span><br><span class="line">                      classification_inputs</span><br><span class="line">              &#125;,</span><br><span class="line">              outputs=&#123;</span><br><span class="line">                  tf.saved_model.signature_constants.CLASSIFY_OUTPUT_CLASSES:</span><br><span class="line">                      classification_outputs_classes,</span><br><span class="line">                  tf.saved_model.signature_constants.CLASSIFY_OUTPUT_SCORES:</span><br><span class="line">                      classification_outputs_scores</span><br><span class="line">              &#125;,</span><br><span class="line">              method_name=tf.saved_model.signature_constants.CLASSIFY_METHOD_NAME))</span><br><span class="line"></span><br><span class="line">      tensor_info_x = tf.saved_model.utils.build_tensor_info(x)</span><br><span class="line">      tensor_info_y = tf.saved_model.utils.build_tensor_info(y)</span><br><span class="line"></span><br><span class="line">      prediction_signature = (</span><br><span class="line">          tf.saved_model.signature_def_utils.build_signature_def(</span><br><span class="line">              inputs=&#123;<span class="string">'images'</span>: tensor_info_x&#125;,</span><br><span class="line">              outputs=&#123;<span class="string">'scores'</span>: tensor_info_y&#125;,</span><br><span class="line">              method_name=tf.saved_model.signature_constants.PREDICT_METHOD_NAME))</span><br><span class="line"></span><br><span class="line">      builder.add_meta_graph_and_variables(</span><br><span class="line">          sess, [tf.saved_model.tag_constants.SERVING],</span><br><span class="line">          signature_def_map=&#123;</span><br><span class="line">              <span class="string">'predict_images'</span>:</span><br><span class="line">                  prediction_signature,</span><br><span class="line">              tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY:</span><br><span class="line">                  classification_signature,</span><br><span class="line">          &#125;,</span><br><span class="line">          main_op=tf.tables_initializer(),</span><br><span class="line">          strip_default_attrs=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">      builder.save()</span><br><span class="line"></span><br><span class="line">      print(<span class="string">'Done exporting!'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">      tf.app.run()</span><br><span class="line">```    </span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> Deploy the model we have exported using TFserving</span><br><span class="line"></span><br><span class="line">```BASH</span><br><span class="line">docker run -p <span class="number">8500</span>:<span class="number">8500</span> \</span><br><span class="line">--mount type=bind,source=$(pwd)/models/mnist,target=/models/mnist \</span><br><span class="line">-e MODEL_NAME=mnist -t tensorflow/serving</span><br></pre></td></tr></table></figure>
<ol>
<li>run client</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install tensorflow-serving-api</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 mnist_client.py --num_tests=<span class="number">1000</span> --server=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8500</span></span><br></pre></td></tr></table></figure>
<ol>
<li>result </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Inference error rate: 11.13%</span><br></pre></td></tr></table></figure>
<p>Client source code</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="comment"># This is a placeholder for a Google-internal import.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> grpc</span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tensorflow_serving.apis <span class="keyword">import</span> predict_pb2</span><br><span class="line"><span class="keyword">from</span> tensorflow_serving.apis <span class="keyword">import</span> prediction_service_pb2_grpc</span><br><span class="line"><span class="keyword">import</span> mnist_input_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tf.app.flags.DEFINE_integer(<span class="string">'concurrency'</span>, <span class="number">1</span>,</span><br><span class="line">                            <span class="string">'maximum number of concurrent inference requests'</span>)</span><br><span class="line">tf.app.flags.DEFINE_integer(<span class="string">'num_tests'</span>, <span class="number">100</span>, <span class="string">'Number of test images'</span>)</span><br><span class="line">tf.app.flags.DEFINE_string(<span class="string">'server'</span>, <span class="string">''</span>, <span class="string">'PredictionService host:port'</span>)</span><br><span class="line">tf.app.flags.DEFINE_string(<span class="string">'work_dir'</span>, <span class="string">'/tmp'</span>, <span class="string">'Working directory. '</span>)</span><br><span class="line">FLAGS = tf.app.flags.FLAGS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ResultCounter</span><span class="params">(object)</span>:</span></span><br><span class="line">  <span class="string">"""Counter for the prediction results."""</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num_tests, concurrency)</span>:</span></span><br><span class="line">    self._num_tests = num_tests</span><br><span class="line">    self._concurrency = concurrency</span><br><span class="line">    self._error = <span class="number">0</span></span><br><span class="line">    self._done = <span class="number">0</span></span><br><span class="line">    self._active = <span class="number">0</span></span><br><span class="line">    self._condition = threading.Condition()</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">inc_error</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> self._condition:</span><br><span class="line">      self._error += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">inc_done</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> self._condition:</span><br><span class="line">      self._done += <span class="number">1</span></span><br><span class="line">      self._condition.notify()</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">dec_active</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> self._condition:</span><br><span class="line">      self._active -= <span class="number">1</span></span><br><span class="line">      self._condition.notify()</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_error_rate</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> self._condition:</span><br><span class="line">      <span class="keyword">while</span> self._done != self._num_tests:</span><br><span class="line">        self._condition.wait()</span><br><span class="line">      <span class="keyword">return</span> self._error / float(self._num_tests)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">throttle</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> self._condition:</span><br><span class="line">      <span class="keyword">while</span> self._active == self._concurrency:</span><br><span class="line">        self._condition.wait()</span><br><span class="line">      self._active += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_create_rpc_callback</span><span class="params">(label, result_counter)</span>:</span></span><br><span class="line">  <span class="string">"""Creates RPC callback function.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  Args:</span></span><br><span class="line"><span class="string">    label: The correct label for the predicted example.</span></span><br><span class="line"><span class="string">    result_counter: Counter for the prediction result.</span></span><br><span class="line"><span class="string">  Returns:</span></span><br><span class="line"><span class="string">    The callback function.</span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">_callback</span><span class="params">(result_future)</span>:</span></span><br><span class="line">    <span class="string">"""Callback function.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Calculates the statistics for the prediction result.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">      result_future: Result future of the RPC.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    exception = result_future.exception()</span><br><span class="line">    <span class="keyword">if</span> exception:</span><br><span class="line">      result_counter.inc_error()</span><br><span class="line">      print(exception)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      sys.stdout.write(<span class="string">'.'</span>)</span><br><span class="line">      sys.stdout.flush()</span><br><span class="line">      response = numpy.array(</span><br><span class="line">          result_future.result().outputs[<span class="string">'scores'</span>].float_val)</span><br><span class="line">      prediction = numpy.argmax(response)</span><br><span class="line">      <span class="keyword">if</span> label != prediction:</span><br><span class="line">        result_counter.inc_error()</span><br><span class="line">    result_counter.inc_done()</span><br><span class="line">    result_counter.dec_active()</span><br><span class="line">  <span class="keyword">return</span> _callback</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_inference</span><span class="params">(hostport, work_dir, concurrency, num_tests)</span>:</span></span><br><span class="line">  <span class="string">"""Tests PredictionService with concurrent requests.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  Args:</span></span><br><span class="line"><span class="string">    hostport: Host:port address of the PredictionService.</span></span><br><span class="line"><span class="string">    work_dir: The full path of working directory for test data set.</span></span><br><span class="line"><span class="string">    concurrency: Maximum number of concurrent requests.</span></span><br><span class="line"><span class="string">    num_tests: Number of test images to use.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  Returns:</span></span><br><span class="line"><span class="string">    The classification error rate.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  Raises:</span></span><br><span class="line"><span class="string">    IOError: An error occurred processing test data set.</span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line">  test_data_set = mnist_input_data.read_data_sets(work_dir).test</span><br><span class="line">  channel = grpc.insecure_channel(hostport)</span><br><span class="line">  stub = prediction_service_pb2_grpc.PredictionServiceStub(channel)</span><br><span class="line">  result_counter = _ResultCounter(num_tests, concurrency)</span><br><span class="line">  <span class="keyword">for</span> _ <span class="keyword">in</span> range(num_tests):</span><br><span class="line">    request = predict_pb2.PredictRequest()</span><br><span class="line">    request.model_spec.name = <span class="string">'mnist'</span></span><br><span class="line">    request.model_spec.signature_name = <span class="string">'predict_images'</span></span><br><span class="line">    image, label = test_data_set.next_batch(<span class="number">1</span>)</span><br><span class="line">    request.inputs[<span class="string">'images'</span>].CopyFrom(</span><br><span class="line">        tf.contrib.util.make_tensor_proto(image[<span class="number">0</span>], shape=[<span class="number">1</span>, image[<span class="number">0</span>].size]))</span><br><span class="line">    result_counter.throttle()</span><br><span class="line">    result_future = stub.Predict.future(request, <span class="number">5.0</span>)  <span class="comment"># 5 seconds</span></span><br><span class="line">    result_future.add_done_callback(</span><br><span class="line">        _create_rpc_callback(label[<span class="number">0</span>], result_counter))</span><br><span class="line">  <span class="keyword">return</span> result_counter.get_error_rate()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(_)</span>:</span></span><br><span class="line">  <span class="keyword">if</span> FLAGS.num_tests &gt; <span class="number">10000</span>:</span><br><span class="line">    print(<span class="string">'num_tests should not be greater than 10k'</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> FLAGS.server:</span><br><span class="line">    print(<span class="string">'please specify server host:port'</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  error_rate = do_inference(FLAGS.server, FLAGS.work_dir,</span><br><span class="line">                            FLAGS.concurrency, FLAGS.num_tests)</span><br><span class="line">  print(<span class="string">'\nInference error rate: %s%%'</span> % (error_rate * <span class="number">100</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  tf.app.run()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Debris</category>
      </categories>
  </entry>
  <entry>
    <title>Logistic Regression and Maximum likelihood estimation</title>
    <url>/Logistic-Regression-and-Maximum-likelihood-estimation/2019/05/03/</url>
    <content><![CDATA[<h3 id="为什么-LR-用极大似然估计而不用最小二乘"><a href="#为什么-LR-用极大似然估计而不用最小二乘" class="headerlink" title="为什么 LR 用极大似然估计而不用最小二乘"></a>为什么 LR 用极大似然估计而不用最小二乘</h3><ol>
<li>如果用最小二乘法，目标函数就是 <script type="math/tex; mode=display">E_{w,b}=\sum_{i=1}^{m}\left ( y_{i}-\frac{1}{1+e^{-\left ( w^{T}x_{i}+b \right )}}\right )^2</script>是非凸的，不容易求解，会得到局部最优。</li>
</ol>
<p><img src="1.png" alt></p>
<ol>
<li>如果用最大似然估计，目标函数就是对数似然函数： <script type="math/tex; mode=display">l_{w,b}=\sum_{i=1}^{m}\left ( -y_{i}\left ( w^{T}x_{i}+b \right )+ln\left ( 1+e^{w^{T}x_{i}+b} \right ) \right )</script></li>
</ol>
<p>是关于 (w,b) 的高阶连续可导凸函数，可以方便通过一些凸优化算法求解，比如梯度下降法、牛顿法等。</p>
<p><img src="2.png" alt></p>
<h3 id="LR-cost-function-的具体推导过程"><a href="#LR-cost-function-的具体推导过程" class="headerlink" title="LR cost function 的具体推导过程"></a>LR cost function 的具体推导过程</h3><p>最大化似然概率的形式:</p>
<script type="math/tex; mode=display">max \prod_{i=1}^{m}p(y_{i}|x_{i},\theta)</script><p>对于二分类问题有:</p>
<script type="math/tex; mode=display">p_{1}=p(y=1|x,\theta)=\frac{e^{x\theta}}{1+e^{x\theta}},y=1</script><script type="math/tex; mode=display">p_{0}=p(y=0|x,\theta)=\frac{1}{1+e^{x\theta}},y=0</script><p>用一个式子表示上面这个分段的函数为：</p>
<script type="math/tex; mode=display">p=p(y|x,\theta)=p_{1}^{y_{i}}\ast p_{0}^{1-y_{i}}</script><p>代入目标函数中，再对目标函数取对数，则目标函数变为：</p>
<script type="math/tex; mode=display">max \sum_{i=1}^{m}({y_{i}\log{p_{1}}+(1-y_{i})\log{p_{0})}}</script><p>如果用 $h_{\theta}(x_{i})$ 来表示 $p_{1}$ ，则可用 $1-h_{\theta}(x_{i})$ 来表示 $p_{0}$ ，再将目标函数max换成min，则目标函数变为：</p>
<script type="math/tex; mode=display">min -\frac{1}{m}\sum_{i=1}^{m}({y_{i}\log{h_{\theta}(x_{i})}+(1-y_{i})\log({1-h_{\theta}(x_{i})}))}</script><p><strong>Reference from <a href="https://www.zhihu.com/question/65350200" target="_blank" rel="noopener">https://www.zhihu.com/question/65350200</a></strong></p>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Concept</tag>
      </tags>
  </entry>
  <entry>
    <title>Maximum Likelihood Estimation</title>
    <url>/Maximum-Likelihood-Estimation/2019/05/03/</url>
    <content><![CDATA[<h3 id="Likelihood-amp-Maximum-likelihood"><a href="#Likelihood-amp-Maximum-likelihood" class="headerlink" title="Likelihood &amp; Maximum likelihood"></a>Likelihood &amp; Maximum likelihood</h3><p>在统计学中，似然函数（likelihood function，通常简写为likelihood，似然）是一个非常重要的内容，在非正式场合似然和概率（Probability）几乎是一对同义词，但是在统计学中似然和概率却是两个不同的概念。概率是在特定环境下某件事情发生的可能性，也就是结果没有产生之前依据环境所对应的参数来预测某件事情发生的可能性，比如抛硬币，抛之前我们不知道最后是哪一面朝上，但是根据硬币的性质我们可以推测任何一面朝上的可能性均为50%，这个概率只有在抛硬币之前才是有意义的，抛完硬币后的结果便是确定的；而似然刚好相反，是在确定的结果下去推测产生这个结果的可能环境（参数），还是抛硬币的例子，假设我们随机抛掷一枚硬币1,000次，结果500次人头朝上，500次数字朝上（实际情况一般不会这么理想，这里只是举个例子），我们很容易判断这是一枚标准的硬币，两面朝上的概率均为50%，这个过程就是我们运用出现的结果来判断这个事情本身的性质（参数），也就是似然。</p>
<p>结果和参数相互对应的时候，似然和概率在数值上是相等的，如果用$\theta$表示环境对应的参数，$x$表示结果，那么概率可以表示为:</p>
<script type="math/tex; mode=display">P(x| \theta)</script><p>$P(x|\theta)$是条件概率的表示方法，$\theta$是前置条件，理解为在$θ$的前提下，事件$x$发生的概率，相对应的似然可以表示为:</p>
<script type="math/tex; mode=display">\ell(\theta |x)</script><p>可以理解为已知结果为$x$，参数为$\theta$(似然函数里$\theta$是变量，这里说的参数和变量是相对与概率而言的)对应的概率，即:</p>
<script type="math/tex; mode=display">\ell(\theta |x) = P(x| \theta)</script><p>需要说明的是两者在数值上相等，但是意义并不相同，$\ell$是关于$\theta$的函数，而$P$则是关于$x$的函数，两者从不同的角度描述一件事情。</p>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><ol>
<li>假设一个袋子装有白球与红球，比例未知，现在抽取10次（每次抽完都放回，保证事件独立性），假设抽到了7次白球和3次红球，在此数据样本条件下，可以采用最大似然估计法求解袋子中白球的比例（最大似然估计是一种“模型已定，参数未知”的方法）。当然，这种数据情况下很明显，白球的比例是70%，但如何通过理论的方法得到这个答案呢？一些复杂的条件下，是很难通过直观的方式获得答案的，这时候理论分析就尤为重要了，这也是学者们为何要提出最大似然估计的原因。我们可以定义从袋子中抽取白球和红球的概率如下：</li>
</ol>
<p><img src="1.png" alt><br><img src="2.png" alt><br><img src="3.png" alt></p>
<ol>
<li>正态分布<br>假如有一组采样值（x1,…,xn），我们知道其服从正态分布，且标准差已知。当这个正态分布的期望为多少时，产生这个采样数据的概率为最大？<br>这个例子中正态分布就是模型M，而期望就是前文提到的theta。</li>
</ol>
<p><img src="4.png" alt></p>
<h3 id="由上可知最大似然估计的一般求解过程："><a href="#由上可知最大似然估计的一般求解过程：" class="headerlink" title="由上可知最大似然估计的一般求解过程："></a>由上可知最大似然估计的一般求解过程：</h3><ol>
<li>写出似然函数</li>
<li>对似然函数取对数，并整理</li>
<li>求导数</li>
<li>解似然方程</li>
</ol>
<p><strong>Reference from <a href="http://fangs.in/post/thinkstats/likelihood/" target="_blank" rel="noopener">http://fangs.in/post/thinkstats/likelihood/</a></strong><br><strong>Reference from <a href="https://www.jianshu.com/p/f1d3906e4a3e" target="_blank" rel="noopener">https://www.jianshu.com/p/f1d3906e4a3e</a></strong></p>
]]></content>
      <categories>
        <category>Math</category>
        <category>Statistics</category>
      </categories>
      <tags>
        <tag>Concept</tag>
      </tags>
  </entry>
  <entry>
    <title>Kernel method</title>
    <url>/Kernel-method/2019/05/02/</url>
    <content><![CDATA[<blockquote>
<p>Kernel Method 不是对特征做低维空间到高维空间的映射，只是用来计算映射到高维空间之后的内积的一种简便方法。</p>
</blockquote>
<p>我们如果想对原本线性不可分的数据集进行分割，一般有两种方法:</p>
<ol>
<li>Soft Margin  </li>
<li>对Input Space做Feature Expansion，把数据集映射到高维中去，形成了Feature Space。<br>我们几乎可以认为（We are safe but not certain）原本在低维中线性不可分的数据集在足够高的维度中存在线性可分的超平面。</li>
</ol>
<p>对于2，我们所做的就是要在Feature Space套用原本在线性可分情况下的Input Space中使用过的优化方法，来找到那个Maximaizing Margin的超平面。原理机制一模一样，是二次规划，唯一不同是代入数据的不同，我们需要代入$\phi(x)$而不是$x$。这时（在假设我们已知了如何选取mapping之后）才有了Kernel Method的概念。</p>
<p>Kernel Trick的意义，是简化计算二次规划中间的内积计算。因为中间步骤有一步必须求得$\phi(x_i)^{T}\phi(x_j)$，而我们可以定义核函数$K(x_i,x_j)=\phi(x_i)^{T}\phi(x_j)$，使得我们在不需要显式计算每一个$\phi(x_i)$、甚至不需要知道$\phi(\cdot )$长什么样的情况下，直接求出$\phi(x_i)^{T}\phi(x_j)$的值来。</p>
<p>也就是说，<strong>核函数</strong>、<strong>内积</strong>、<strong>相似度</strong>这三个词是等价的。因为inner product其实就是一种similarity的度量。核函数和映射是无关的。</p>
<p><strong>一句话概括的话，核函数等于映射至高维空间后的高维特征的点积，目的是降低计算的复杂度</strong>。</p>
<script type="math/tex; mode=display">K(x_1,x_2) = \phi(x_1)^{T}\cdot\phi(x_2)</script><h3 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h3><ol>
<li>$K(X_1,X_2) = <p(x_1,x_2)>$</p(x_1,x_2)></li>
</ol>
<p>已知 $P(X) = (X,X^2)$, 可得 $K(X_1,X_2) = <p(x_1),p(x_2)> = &lt;(X_1,X_1^2),(X_2,X_2^2)&gt; = X_1X_2+X_1^2 X_2^2$</p(x_1),p(x_2)></p>
<p>很多时候，我们只关心核函数，不需要显式地表示映射函数。可以用核函数表示低维空间下特性向量的操作（例子中的 $X_1X_2+X_1^2 X_2^2$ ），令其代替映射后高维特征的点积（ ($X_1$,$X_1^2$) 与 ($X_2$,$X_2^2$) 的点积）。</p>
<ol>
<li>内积平方<br>我们现在考虑核函数$K(v_1,v_2) = <v_1,v_2>^2$，即“内积平方”。<br>这里面$v_1=(x_1,y_1), v_2=(x_2,y_2)$是二维空间中的两个点。</v_1,v_2></li>
</ol>
<p>这个核函数对应着一个二维空间到三维空间的映射，它的表达式是：</p>
<script type="math/tex; mode=display">P(x,y)=(x^2,\sqrt{2}xy,y^2)</script><p>可以验证，</p>
<script type="math/tex; mode=display">
\begin{align} <P(v_1),P(v_2)> &= \, <(x_1^2,\sqrt{2}x_1y_1,y_1^2),(x_2^2,\sqrt{2}x_2y_2,y_2^2)> \\ &= \, x_1^2x_2^2 + 2x_1x_2y_1y_2+y_1^2y_2^2 \\ &= \, (x_1x_2 + y_1y_2)^2 \\ &= \, \, <v_1,v_2>^2 \\ &= \, K(v_1,v_2) \end{align}</script><ol>
<li>多项式核函数的特征映射</li>
</ol>
<p><img src="1.png" alt><br><img src="2.png" alt></p>
<ol>
<li>RBF 核函数</li>
</ol>
<p><img src="3.png" alt><br><img src="4.png" alt></p>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Machine Learning</category>
      </categories>
  </entry>
  <entry>
    <title>Coordinate descent for lasso</title>
    <url>/Coordinate-descent-for-lasso/2019/05/01/</url>
    <content><![CDATA[<h2 id="Goal"><a href="#Goal" class="headerlink" title="Goal"></a>Goal</h2><blockquote>
<p>Minimize some function g, Often, hard to find minimum for all coordinates, but easy for each coordinate.</p>
</blockquote>
<p><strong>Coordinate descent</strong>:  </p>
<p>Initialize $\hat{w} = 0$ (or smartly…)<br>——while not converged<br>————-for j =0,1,…,D(pick a coordinate j)<br>———————-$\hat{w_{j}} &lt;-  min_{w}g(w_{0},…w_{D})$</p>
<h2 id="Optimizing-least-squares-objective-one-coordinate-at-a-time"><a href="#Optimizing-least-squares-objective-one-coordinate-at-a-time" class="headerlink" title="Optimizing least squares objective one coordinate at a time"></a>Optimizing least squares objective one coordinate at a time</h2><script type="math/tex; mode=display">RSS(w) = \sum^{N}_{i=1}(y_{i} - \sum^{D}_{j=0}w_{j}h_{j}(xi))^{2}</script><p>aside: $h_{j}(xi)$ represent normalized feature</p>
<p>Fix all coordinates $w_{-j}$(all feature except $w_{j}$) and take partial w.r.t $w_{j}$</p>
<script type="math/tex; mode=display">\frac{\partial}{\partial w_{j}}RSS(w) = -2\sum^{N}_{i=1}h_{j}(x_{i})(y_{i} - \sum^{D}_{j=0}w_{j}h_{j}(xi))</script><p>= <script type="math/tex">-2\sum^{N}_{i=1}h_{j}(x_{i})(y_{i} - \sum_{k \neq j}w_{k}h_{k}(x_{i}) - w_{j}h_{j}(x_{i}))</script><br>= <script type="math/tex">-2\sum^{N}_{i=1}h_{j}(x_{i})(y_{i} - \sum_{k \neq j}w_{k}h_{k}(x_{i})) + 2w_{j}\sum^{N}_{i=1}h_{j}(x_{i})^{2}</script></p>
<p>by definition, $\sum^{N}_{i=1}h_{j}(x_{i})^{2}$ = 1, \qquad $-2\sum^{N}_{i=1}h_{j}(x_{i})(y_{i} - \sum_{k \neq j}w_{k}h_{k}(x_{i})) = p_{j}$<br>we get  </p>
<pre><code>$$-2p_{j} + 2w_{j}$$  
</code></pre><p>Set partial = 0 and solve:</p>
<pre><code>$$\frac{\partial}{\partial w_{j}}RSS(w) = -p_{j} + w_{j}$$
</code></pre><p>==&gt; <script type="math/tex">p_{j} =  w_{j}</script></p>
<h2 id="Coordinate-descent-for-least-squares-regression"><a href="#Coordinate-descent-for-least-squares-regression" class="headerlink" title="Coordinate descent for least squares regression"></a>Coordinate descent for least squares regression</h2><p>Initialize $\hat{w} = 0$ (or smartly…)<br>——while not converged<br>————-for j =0,1,…,D(pick a coordinate j)<br>———————-compute: <script type="math/tex">-2\sum^{N}_{i=1}h_{j}(x_{i})(y_{i} - \sum_{k \neq j}w_{k}h_{k}(x_{i}))</script><br>———————-set: </p>
<script type="math/tex; mode=display">
w_{j} =   
\left\{
\begin{aligned}  
& p_{j} + \frac{\lambda}{2} &\quad if \, p_{j} < -\frac{\lambda}{2} \\
& 0                         &\quad if \, p_{j} \, in \, [-\frac{\lambda}{2},\frac{\lambda}{2}] \\
& p_{j} - \frac{\lambda}{2} &\quad if \, p_{j} > \frac{\lambda}{2}
\end{aligned}
\right.</script><p><img src="1.png" alt></p>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Machine Learning</category>
      </categories>
  </entry>
  <entry>
    <title>The difference between Lasso and Ridge regularization</title>
    <url>/The-difference-between-Lasso-and-Ridge-regularization/2019/05/01/</url>
    <content><![CDATA[<h2 id="Cost-Function-of-Ridge"><a href="#Cost-Function-of-Ridge" class="headerlink" title="Cost Function of Ridge"></a>Cost Function of Ridge</h2><script type="math/tex; mode=display">Cost = RSS(W) + \lambda ||W||^{2}_{2} = \sum_{i=1}^{N}(y_{i} - w_{0}h_{0}(x_{i})- w_{1}h_{1}(x_{i}))^{2} + \lambda (w_{0}^2 + w_{1}^{2})</script><ol>
<li>上述方程可以表示为一个重心不在原点的椭圆(有cross term)</li>
</ol>
<p>==&gt;</p>
<script type="math/tex; mode=display">\sum y^{2} + W_{0}^{2}\sum h_{0}^{2} + W_{1}^{2}\sum h_{1}^{2} + cross\; term  = constant</script><p>==&gt;</p>
<script type="math/tex; mode=display">W_{0}^{2}\sum h_{0}^{2} + W_{1}^{2}\sum h_{1}^{2} + cross\; term = constant</script><p><img src="1.png" alt></p>
<p><strong>椭圆更大的半径表示更大的cost</strong></p>
<ol>
<li>增大$\lambda$, 在求最优cost的过程中，$w_{0}$ 和 $w_{1}$会趋近于0.</li>
</ol>
<p><img src="2.png" alt></p>
<h2 id="分开表示cost-function-的-rss-和-l2-penalty"><a href="#分开表示cost-function-的-rss-和-l2-penalty" class="headerlink" title="分开表示cost function 的 rss 和 l2 penalty"></a>分开表示cost function 的 rss 和 l2 penalty</h2><ol>
<li>rss 表示椭圆<br><img src="3.png" alt></li>
<li>l2 norm 表示圆<script type="math/tex; mode=display">\lambda (w_{0}^2 + w_{1}^{2})</script><img src="4.png" alt></li>
</ol>
<h2 id="Ridge-的最优解"><a href="#Ridge-的最优解" class="headerlink" title="Ridge 的最优解"></a>Ridge 的最优解</h2><p>Ridge的最优解是 rss 和 l2 penalty 之间balance 后的结果</p>
<p><img src="5.png" alt></p>
<h2 id="Cost-Function-of-Lasso"><a href="#Cost-Function-of-Lasso" class="headerlink" title="Cost Function of Lasso"></a>Cost Function of Lasso</h2><script type="math/tex; mode=display">Cost = RSS(W) + \lambda ||W||^{2}_{2} = \sum_{i=1}^{N}(y_{i} - w_{0}h_{0}(x_{i})- w_{1}h_{1}(x_{i}))^{2} + \lambda (|w_{0}| + |w_{1}|)</script><ol>
<li>上述方程可以表示为一个重心不在原点的椭圆(有cross term)</li>
</ol>
<p>==&gt;</p>
<script type="math/tex; mode=display">\sum y^{2} + W_{0}^{2}\sum h_{0}^{2} + W_{1}^{2}\sum h_{1}^{2} + cross\; term  = constant</script><p>==&gt;</p>
<script type="math/tex; mode=display">W_{0}^{2}\sum h_{0}^{2} + W_{1}^{2}\sum h_{1}^{2} + cross\; term = constant</script><p><img src="1.png" alt></p>
<ol>
<li>增大$\lambda$, 在求最优cost的过程中，$w_{0}$ 和 $w_{1}$会趋近于0. <strong>但是，不是同时趋近为0，会有部分w先为0</strong></li>
</ol>
<p><img src="6.png" alt></p>
<h2 id="分开表示cost-function-的-rss-和-l1-penalty"><a href="#分开表示cost-function-的-rss-和-l1-penalty" class="headerlink" title="分开表示cost function 的 rss 和 l1 penalty"></a>分开表示cost function 的 rss 和 l1 penalty</h2><ol>
<li><p>rss 表示椭圆（和ridge相同）<br><img src="3.png" alt></p>
</li>
<li><p>l1 norm 表示菱形</p>
<script type="math/tex; mode=display">\lambda (|w_{0}| + |w_{1}|)</script><p><img src="7.png" alt></p>
</li>
</ol>
<h2 id="Lasso-的最优解"><a href="#Lasso-的最优解" class="headerlink" title="Lasso 的最优解"></a>Lasso 的最优解</h2><p>Ridge的最优解是 rss 和 l1 penalty 之间balance 后的结果<br><img src="8.png" alt></p>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Concept</tag>
      </tags>
  </entry>
  <entry>
    <title>3 sources of error</title>
    <url>/3-sources-of-error/2019/04/20/</url>
    <content><![CDATA[<h2 id="3-sources-of-error"><a href="#3-sources-of-error" class="headerlink" title="3 sources of error"></a>3 sources of error</h2><p>In forming predictions, there are 3 sources of error:</p>
<ol>
<li>Noise</li>
<li>Bias</li>
<li>Variance </li>
</ol>
<h3 id="Noise-contribution"><a href="#Noise-contribution" class="headerlink" title="Noise contribution"></a>Noise contribution</h3><blockquote>
<p>Data inherently noisy</p>
</blockquote>
<p>The world works is that there’s some true relationship between X and Y. Or generically, between x and y. And we’re representing that arbitrary relationship defined by the world, by $f_{w}$ true. Which is the notation we’re using for that functional relationship. But of course that’s not a perfect description between x and y. There are lot of other contributing factors have the impact on y. Lots and lots of other things that we can’t ever perfectly capture with just some function between x and y, and so that is the noise that’s inherent in this process represented by this epsilon term.</p>
<p><img src="1.png" alt></p>
<h3 id="Bias-contribution"><a href="#Bias-contribution" class="headerlink" title="Bias contribution"></a>Bias contribution</h3><script type="math/tex; mode=display">Bias(x) = f_{w}(X) - f_{\hat{w}}(X)</script><p>For one data set of size N, we get this fit. But there are other datasets. For the fits associated with those data sets. there’s a continuum of possible fits we might have gotten. And for all those possible fits, here this dashed green line represents our average fit, averaged over all those fits weighted by how likely they were to have appeared.<br>What bias is it’s the difference between this average fit and the true function.</p>
<p><img src="2.png" alt></p>
<h3 id="Variance-contribution"><a href="#Variance-contribution" class="headerlink" title="Variance contribution"></a>Variance contribution</h3><p>What variance is how different can my specific fits to a given data set be from one another, as I’m looking at different possible data sets? To summarize what this variance is saying is, how much can the fits vary?</p>
<p><img src="3.png" alt><br><img src="4.png" alt></p>
<h2 id="Average-prediction-error-at-x-t"><a href="#Average-prediction-error-at-x-t" class="headerlink" title="Average prediction error at x_{t}"></a>Average prediction error at x_{t}</h2><script type="math/tex; mode=display">\sigma^{2} + [bias(f_{\hat{w}}(X_{t}))]^{2} + var(f_{\hat{w}}(X_{t}))</script><p><img src="7.png" alt></p>
<h2 id="prove"><a href="#prove" class="headerlink" title="prove"></a>prove</h2><p><img src="5.png" alt="5.png"><br><img src="6.png" alt="6.png"></p>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Concept</tag>
      </tags>
  </entry>
  <entry>
    <title>LSTM Mxnet Implementation</title>
    <url>/LSTM-Mxnet-Implementation/2019/04/13/</url>
    <content><![CDATA[<h1 id="长短期记忆（LSTM）"><a href="#长短期记忆（LSTM）" class="headerlink" title="长短期记忆（LSTM）"></a>长短期记忆（LSTM）</h1><p>本节将介绍另一种常用的门控循环神经网络：长短期记忆（long short-term memory，简称 LSTM）[1]。它比门控循环单元的结构稍微复杂一点。</p>
<h2 id="长短期记忆"><a href="#长短期记忆" class="headerlink" title="长短期记忆"></a>长短期记忆</h2><p>LSTM 中引入了三个门：输入门（input gate）、遗忘门（forget gate）和输出门（output gate），以及与隐藏状态形状相同的记忆细胞（某些文献把记忆细胞当成一种特殊的隐藏状态），从而记录额外的信息。</p>
<h3 id="输入门、遗忘门和输出门"><a href="#输入门、遗忘门和输出门" class="headerlink" title="输入门、遗忘门和输出门"></a>输入门、遗忘门和输出门</h3><p>同门控循环单元中的重置门和更新门一样，如图 6.7 所示，长短期记忆的门的输入均为当前时间步输入 $\boldsymbol{X}_t$ 与上一时间步隐藏状态 $\boldsymbol{H}_{t-1}$，输出由激活函数为 sigmoid 函数的全连接层计算得到。如此一来，这三个门元素的值域均为 $[0,1]$。</p>
<p><img src="lstm_0.svg" alt="长短期记忆中输入门、遗忘门和输出门的计算。"></p>
<p>具体来说，假设隐藏单元个数为 $h$，给定时间步 $t$ 的小批量输入 $\boldsymbol{X}_t \in \mathbb{R}^{n \times d}$（样本数为 $n$，输入个数为 $d$）和上一时间步隐藏状态 $\boldsymbol{H}_{t-1} \in \mathbb{R}^{n \times h}$。<br>时间步 $t$ 的输入门 $\boldsymbol{I}_t \in \mathbb{R}^{n \times h}$、遗忘门 $\boldsymbol{F}_t \in \mathbb{R}^{n \times h}$ 和输出门 $\boldsymbol{O}_t \in \mathbb{R}^{n \times h}$ 分别计算如下：</p>
<script type="math/tex; mode=display">
\begin{aligned}
\boldsymbol{I}_t &= \sigma(\boldsymbol{X}_t \boldsymbol{W}_{xi} + \boldsymbol{H}_{t-1} \boldsymbol{W}_{hi} + \boldsymbol{b}_i),\\
\boldsymbol{F}_t &= \sigma(\boldsymbol{X}_t \boldsymbol{W}_{xf} + \boldsymbol{H}_{t-1} \boldsymbol{W}_{hf} + \boldsymbol{b}_f),\\
\boldsymbol{O}_t &= \sigma(\boldsymbol{X}_t \boldsymbol{W}_{xo} + \boldsymbol{H}_{t-1} \boldsymbol{W}_{ho} + \boldsymbol{b}_o),
\end{aligned}</script><p>其中的 $\boldsymbol{W}_{xi}, \boldsymbol{W}_{xf}, \boldsymbol{W}_{xo} \in \mathbb{R}^{d \times h}$ 和 $\boldsymbol{W}_{hi}, \boldsymbol{W}_{hf}, \boldsymbol{W}_{ho} \in \mathbb{R}^{h \times h}$ 是权重参数，$\boldsymbol{b}_i, \boldsymbol{b}_f, \boldsymbol{b}_o \in \mathbb{R}^{1 \times h}$ 是偏差参数。</p>
<h3 id="候选记忆细胞"><a href="#候选记忆细胞" class="headerlink" title="候选记忆细胞"></a>候选记忆细胞</h3><p>接下来，长短期记忆需要计算候选记忆细胞 $\tilde{\boldsymbol{C}}_t$。它的计算同上面介绍的三个门类似，但使用了值域在 $[-1, 1]$ 的 tanh 函数做激活函数，如图 6.8 所示。</p>
<p><img src="lstm_1.svg" alt="长短期记忆中候选记忆细胞的计算。"></p>
<p>具体来说，时间步 $t$ 的候选记忆细胞 $\tilde{\boldsymbol{C}}_t \in \mathbb{R}^{n \times h}$ 的计算为</p>
<script type="math/tex; mode=display">\tilde{\boldsymbol{C}}_t = \text{tanh}(\boldsymbol{X}_t \boldsymbol{W}_{xc} + \boldsymbol{H}_{t-1} \boldsymbol{W}_{hc} + \boldsymbol{b}_c),</script><p>其中的 $\boldsymbol{W}_{xc} \in \mathbb{R}^{d \times h}$ 和 $\boldsymbol{W}_{hc} \in \mathbb{R}^{h \times h}$ 是权重参数，$\boldsymbol{b}_c \in \mathbb{R}^{1 \times h}$ 是偏差参数。</p>
<h3 id="记忆细胞"><a href="#记忆细胞" class="headerlink" title="记忆细胞"></a>记忆细胞</h3><p>我们可以通过元素值域在 $[0, 1]$ 的输入门、遗忘门和输出门来控制隐藏状态中信息的流动：这一般也是通过使用按元素乘法（符号为 $\odot$）来实现。当前时间步记忆细胞 $\boldsymbol{C}_t \in \mathbb{R}^{n \times h}$ 的计算组合了上一时间步记忆细胞和当前时间步候选记忆细胞的信息，并通过遗忘门和输入门来控制信息的流动：</p>
<script type="math/tex; mode=display">\boldsymbol{C}_t = \boldsymbol{F}_t \odot \boldsymbol{C}_{t-1} + \boldsymbol{I}_t \odot \tilde{\boldsymbol{C}}_t.</script><p>如图 6.9 所示，遗忘门控制上一时间步的记忆细胞 $\boldsymbol{C}_{t-1}$ 中的信息是否传递到当前时间步，而输入门则可以控制当前时间步的输入 $\boldsymbol{X}_t$ 通过候选记忆细胞 $\tilde{\boldsymbol{C}}_t$ 如何流入当前时间步的记忆细胞。如果遗忘门一直近似 1 且输入门一直近似 0，过去的记忆细胞将一直通过时间保存并传递至当前时间步。这个设计可以应对循环神经网络中的梯度衰减问题，并更好地捕捉时间序列中时间步距离较大的依赖关系。</p>
<p><img src="lstm_2.svg" alt="长短期记忆中记忆细胞的计算。这里的乘号是按元素乘法。"></p>
<h3 id="隐藏状态"><a href="#隐藏状态" class="headerlink" title="隐藏状态"></a>隐藏状态</h3><p>有了记忆细胞以后，接下来我们还可以通过输出门来控制从记忆细胞到隐藏状态 $\boldsymbol{H}_t \in \mathbb{R}^{n \times h}$ 的信息的流动：</p>
<script type="math/tex; mode=display">\boldsymbol{H}_t = \boldsymbol{O}_t \odot \text{tanh}(\boldsymbol{C}_t).</script><p>这里的 tanh 函数确保隐藏状态元素值在 -1 到 1 之间。需要注意的是，当输出门近似 1 时，记忆细胞信息将传递到隐藏状态供输出层使用；当输出门近似 0 时，记忆细胞信息只自己保留。图 6.10 展示了长短期记忆中隐藏状态的计算。</p>
<p><img src="lstm_3.svg" alt="长短期记忆中隐藏状态的计算。这里的乘号是按元素乘法。"></p>
<h2 id="读取数据集"><a href="#读取数据集" class="headerlink" title="读取数据集"></a>读取数据集</h2><p>下面我们开始实现并展示长短期记忆。和前几节中的实验一样，我们依然使用周杰伦歌词数据集来训练模型作词。</p>
<h1 id="循环神经网络"><a href="#循环神经网络" class="headerlink" title="循环神经网络"></a>循环神经网络</h1><p>本节将介绍循环神经网络。它并非刚性地记忆所有固定长度的序列，而是通过隐藏状态来储存之前时间步的信息。首先我们回忆一下前面介绍过的多层感知机，然后描述如何添加隐藏状态来将它变成循环神经网络。</p>
<h2 id="不含隐藏状态的神经网络"><a href="#不含隐藏状态的神经网络" class="headerlink" title="不含隐藏状态的神经网络"></a>不含隐藏状态的神经网络</h2><p>让我们考虑一个单隐藏层的多层感知机。给定样本数为 $n$、输入个数（特征数或特征向量维度）为 $d$ 的小批量数据样本 $\boldsymbol{X} \in \mathbb{R}^{n \times d}$。设隐藏层的激活函数为 $\phi$，那么隐藏层的输出 $\boldsymbol{H} \in \mathbb{R}^{n \times h}$ 计算为</p>
<script type="math/tex; mode=display">\boldsymbol{H} = \phi(\boldsymbol{X} \boldsymbol{W}_{xh} + \boldsymbol{b}_h),</script><p>其中隐藏层权重参数 $\boldsymbol{W}_{xh} \in \mathbb{R}^{d \times h}$，隐藏层偏差参数 $\boldsymbol{b}_h \in \mathbb{R}^{1 \times h}$，$h$ 为隐藏单元个数。上式相加的两项形状不同，因此将按照广播机制相加。把隐藏变量 $\boldsymbol{H}$ 作为输出层的输入，且设输出个数为 $q$（例如分类问题中的类别数），输出层的输出为</p>
<script type="math/tex; mode=display">\boldsymbol{O} = \boldsymbol{H} \boldsymbol{W}_{hq} + \boldsymbol{b}_q,</script><p>其中输出变量 $\boldsymbol{O} \in \mathbb{R}^{n \times q}$, 输出层权重参数 $\boldsymbol{W}_{hq} \in \mathbb{R}^{h \times q}$, 输出层偏差参数 $\boldsymbol{b}_q \in \mathbb{R}^{1 \times q}$。如果是分类问题，我们可以使用 $\text{softmax}(\boldsymbol{O})$ 来计算输出类别的概率分布。</p>
<h2 id="含隐藏状态的循环神经网络"><a href="#含隐藏状态的循环神经网络" class="headerlink" title="含隐藏状态的循环神经网络"></a>含隐藏状态的循环神经网络</h2><p>现在我们考虑输入数据存在时间相关性的情况。假设 $\boldsymbol{X}_t \in \mathbb{R}^{n \times d}$ 是序列中时间步 $t$ 的小批量输入，$\boldsymbol{H}_t  \in \mathbb{R}^{n \times h}$ 是该时间步的隐藏层变量。跟多层感知机不同的是，这里我们保存上一时间步的隐藏变量 $\boldsymbol{H}_{t-1}$，并引入一个新的权重参数 $\boldsymbol{W}_{hh} \in \mathbb{R}^{h \times h}$，该参数用来描述在当前时间步如何使用上一时间步的隐藏变量。具体来说，当前时间步的隐藏变量的计算由当前时间步的输入和上一时间步的隐藏变量共同决定：</p>
<script type="math/tex; mode=display">\boldsymbol{H}_t = \phi(\boldsymbol{X}_t \boldsymbol{W}_{xh} + \boldsymbol{H}_{t-1} \boldsymbol{W}_{hh}  + \boldsymbol{b}_h).</script><p>与多层感知机相比，我们在这里添加了 $\boldsymbol{H}_{t-1} \boldsymbol{W}_{hh}$ 一项。由上式中相邻时间步的隐藏变量 $\boldsymbol{H}_t$ 和 $\boldsymbol{H}_{t-1}$ 之间的关系可知，这里的隐藏变量捕捉了截至当前时间步的序列的历史信息，就像是神经网络当前时间步的状态或记忆一样。因此，该隐藏变量也称为隐藏状态。由于隐藏状态在当前时间步的定义使用了它在上一时间步相同的定义，上式的计算是循环的。使用循环计算的网络即循环神经网络。</p>
<p>循环神经网络有很多种不同的构造方法。含上式所定义的隐藏状态的循环神经网络是极为常见的一种。如无特别说明，本章中的循环神经网络基于上式中隐藏状态的循环计算。在时间步 $t$，输出层的输出和多层感知机中的计算类似：</p>
<script type="math/tex; mode=display">\boldsymbol{O}_t = \boldsymbol{H}_t \boldsymbol{W}_{hq} + \boldsymbol{b}_q.</script><p>循环神经网络的参数包括隐藏层的权重 $\boldsymbol{W}_{xh} \in \mathbb{R}^{d \times h}, \boldsymbol{W}_{hh} \in \mathbb{R}^{h \times h}$ 和偏差 $\boldsymbol{b}_h \in \mathbb{R}^{1 \times h}$，以及输出层的权重 $\boldsymbol{W}_{hq} \in \mathbb{R}^{h \times q}$ 和偏差 $\boldsymbol{b}_q \in \mathbb{R}^{1 \times q}$。值得一提的是，即便在不同时间步，循环神经网络始终使用这些模型参数。因此，循环神经网络模型参数的数量不随时间步的递增而增长。</p>
<p>图 6.1 展示了循环神经网络在三个相邻时间步的计算逻辑。在时间步 $t$，隐藏状态的计算可以看成是将输入 $\boldsymbol{X}_t$ 和前一时间步隐藏状态 $\boldsymbol{H}_{t-1}$ 连结后输入一个激活函数为 $\phi$ 的全连接层。该全连接层的输出就是当前时间步的隐藏状态 $\boldsymbol{H}_t$，且模型参数为 $\boldsymbol{W}_{xh}$ 与 $\boldsymbol{W}_{hh}$ 的连结，偏差为 $\boldsymbol{b}_h$。当前时间步 $t$ 的隐藏状态 $\boldsymbol{H}_t$ 将参与下一个时间步 $t+1$ 的隐藏状态 $\boldsymbol{H}_{t+1}$ 的计算，并输入到当前时间步的全连接输出层。</p>
<p><img src="rnn.svg" alt="含隐藏状态的循环神经网络。"></p>
<p>我们刚刚提到，隐藏状态中 $\boldsymbol{X}_t \boldsymbol{W}_{xh} + \boldsymbol{H}_{t-1} \boldsymbol{W}_{hh}$ 的计算等价于 $\boldsymbol{X}_t$ 与 $\boldsymbol{H}_{t-1}$ 连结后的矩阵乘以 $\boldsymbol{W}_{xh}$ 与 $\boldsymbol{W}_{hh}$ 连结后的矩阵。接下来，我们用一个具体的例子来验证这一点。首先，我们构造矩阵<code>X</code>、<code>W_xh</code>、<code>H</code>和<code>W_hh</code>，它们的形状分别为（3，1）、（1，4）、（3，2）和（2，4）。将<code>X</code>与<code>W_xh</code>、<code>H</code>与<code>W_hh</code>分别相乘，再把两个相乘的结果相加，得到形状为（3，4）的矩阵。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> nd, autograd</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">from</span> mxnet.gluon <span class="keyword">import</span> loss <span class="keyword">as</span> gloss</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> math</span><br></pre></td></tr></table></figure>
<h2 id="读取数据集-1"><a href="#读取数据集-1" class="headerlink" title="读取数据集"></a>读取数据集</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> zipfile.ZipFile(<span class="string">"jaychou_lyrics.txt.zip"</span>) <span class="keyword">as</span> zin:</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> zin.namelist():</span><br><span class="line">        <span class="keyword">with</span> zin.open(file) <span class="keyword">as</span> f:</span><br><span class="line">            corpus_chars = f.read().decode(<span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">corpus_chars = corpus_chars.replace(<span class="string">'\n'</span>,<span class="string">' '</span>).replace(<span class="string">'\r'</span>,<span class="string">' '</span>)</span><br><span class="line">corpus_chars = corpus_chars[:<span class="number">10000</span>]</span><br><span class="line">corpus_chars[:<span class="number">40</span>]</span><br></pre></td></tr></table></figure>
<pre><code>&#39;想要有直升机 想要和你飞到宇宙去 想要和你融化在一起 融化在宇宙里 我每天每天每&#39;
</code></pre><h2 id="建立字符索引"><a href="#建立字符索引" class="headerlink" title="建立字符索引"></a>建立字符索引</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">index_to_char = list(set(corpus_chars))</span><br><span class="line">vocab_size = len(index_to_char)</span><br><span class="line">char_to_index = &#123;char:i <span class="keyword">for</span> i,char <span class="keyword">in</span> enumerate(index_to_char)&#125;</span><br><span class="line">vocab_size</span><br></pre></td></tr></table></figure>
<pre><code>1027
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">indices_corpus = [char_to_index[char] <span class="keyword">for</span> char <span class="keyword">in</span> corpus_chars]</span><br><span class="line">sample = indices_corpus[:<span class="number">20</span>]</span><br><span class="line">print(<span class="string">"chars: &#123;&#125;"</span>.format(<span class="string">""</span>.join(index_to_char[idx] <span class="keyword">for</span> idx <span class="keyword">in</span> sample)))</span><br><span class="line">print(<span class="string">"index: &#123;&#125;"</span>.format(sample))</span><br></pre></td></tr></table></figure>
<pre><code>chars: 想要有直升机 想要和你飞到宇宙去 想要和
index: [824, 97, 659, 481, 263, 293, 559, 824, 97, 107, 87, 364, 893, 291, 847, 206, 559, 824, 97, 107]
</code></pre><h2 id="时序数据的采样"><a href="#时序数据的采样" class="headerlink" title="时序数据的采样"></a>时序数据的采样</h2><ol>
<li>随机采样</li>
<li>相邻采样</li>
</ol>
<h3 id="随机采样"><a href="#随机采样" class="headerlink" title="随机采样"></a>随机采样</h3><ul>
<li>批量大小 batch_size指每个小批量的样本数，num_steps为每个样本所包含的时间步数。</li>
<li>在随机采样中，每个样本是原始序列上任意截 取的一段序列。相邻的两个随机小批量在原始序列上的位置不一定相毗邻。因此，我们无法用一 个小批量最终时间步的隐藏状态来初始化下一个小批量的隐藏状态。</li>
<li>在训练模型时，每次随机采样前都需要重新初始化隐藏状态。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_iter_random</span><span class="params">(indices_corpus, batch_size, num_steps, ctx=None)</span>:</span></span><br><span class="line">    num_example = (len(indices_corpus) - <span class="number">1</span>) // num_steps    <span class="comment">## 总共有多少个样本</span></span><br><span class="line">    epoch_size = num_example // batch_size  <span class="comment">## 每个 epoch 有多少个小批量</span></span><br><span class="line">    example_indices = list(range(num_example)) <span class="comment">## 样本的索引</span></span><br><span class="line">    random.shuffle(example_indices)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_data</span><span class="params">(pos)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> indices_corpus[pos : pos + num_steps]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(epoch_size):</span><br><span class="line">        <span class="comment"># 每次生成 batch_size 个随机样本</span></span><br><span class="line">        batch_start = i * batch_size</span><br><span class="line">        batch_indices = example_indices[batch_start:batch_start + batch_size]  <span class="comment">## 小批量的样本索引</span></span><br><span class="line">        X = [_data( j * num_steps ) <span class="keyword">for</span> j <span class="keyword">in</span> batch_indices]</span><br><span class="line">        Y = [_data( j * num_steps + <span class="number">1</span>) <span class="keyword">for</span> j <span class="keyword">in</span> batch_indices]</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">yield</span> nd.array(X, ctx), nd.array(Y, ctx)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_seq = list(range(<span class="number">30</span>))</span><br><span class="line"><span class="keyword">for</span> X, Y <span class="keyword">in</span> data_iter_random(my_seq, batch_size=<span class="number">2</span>, num_steps=<span class="number">6</span>):</span><br><span class="line">    print(<span class="string">'X: '</span>, X, <span class="string">'\nY:'</span>, Y, <span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure>
<pre><code>X:  
[[12. 13. 14. 15. 16. 17.]
 [ 0.  1.  2.  3.  4.  5.]]
&lt;NDArray 2x6 @cpu(0)&gt; 
Y: 
[[13. 14. 15. 16. 17. 18.]
 [ 1.  2.  3.  4.  5.  6.]]
&lt;NDArray 2x6 @cpu(0)&gt; 

X:  
[[18. 19. 20. 21. 22. 23.]
 [ 6.  7.  8.  9. 10. 11.]]
&lt;NDArray 2x6 @cpu(0)&gt; 
Y: 
[[19. 20. 21. 22. 23. 24.]
 [ 7.  8.  9. 10. 11. 12.]]
&lt;NDArray 2x6 @cpu(0)&gt; 
</code></pre><h3 id="相邻采样"><a href="#相邻采样" class="headerlink" title="相邻采样"></a>相邻采样</h3><p>除了对原始序列做随机采样之外，我们还可以令相邻的两个随机小批量在原始序列上的位置相毗邻。此时，我们就可以用一个小批量最终时间步的隐藏状态来初始化下一个小批量的隐藏状态， 从而使下一个小批量的输出也取决于当前小批量的输入，并如此循环下去。这对实现循环神经网络造成了两方面影响。一方面，在训练模型时，我们只需在每一个迭代周期开始时初始化隐藏状态。另一方面，当多个相邻小批量通过传递隐藏状态串联起来时，模型参数的梯度计算将依赖所有串联起来的小批量序列。同一迭代周期中，随着迭代次数的增加，梯度的计算开销会越来越大。 为了使模型参数的梯度计算只依赖一次迭代读取的小批量序列，我们可以在每次读取小批量前将隐藏状态从计算图分离出来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_iter_consecutive</span><span class="params">(corpus_indices, batch_size, num_steps, ctx=None)</span>:</span></span><br><span class="line">    corpus_indices = nd.array(corpus_indices)</span><br><span class="line">    data_len = len(corpus_indices)</span><br><span class="line">    batch_len = data_len // batch_size  </span><br><span class="line">    </span><br><span class="line">    indices = corpus_indices[<span class="number">0</span>: batch_size*batch_len].reshape((</span><br><span class="line">batch_size, batch_len))</span><br><span class="line">    </span><br><span class="line">    epoch_size = (batch_len - <span class="number">1</span>) // num_steps</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(epoch_size):</span><br><span class="line">        i = i * num_steps</span><br><span class="line">        X = indices[:, i: i + num_steps]</span><br><span class="line">        Y = indices[:, i + <span class="number">1</span>: i + num_steps + <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">yield</span> X, Y</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> X, Y <span class="keyword">in</span> data_iter_consecutive(my_seq, batch_size=<span class="number">2</span>, num_steps=<span class="number">6</span>): </span><br><span class="line">    print(<span class="string">'X: '</span>, X, <span class="string">'\nY:'</span>, Y, <span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure>
<pre><code>X:  
[[ 0.  1.  2.  3.  4.  5.]
 [15. 16. 17. 18. 19. 20.]]
&lt;NDArray 2x6 @cpu(0)&gt; 
Y: 
[[ 1.  2.  3.  4.  5.  6.]
 [16. 17. 18. 19. 20. 21.]]
&lt;NDArray 2x6 @cpu(0)&gt; 

X:  
[[ 6.  7.  8.  9. 10. 11.]
 [21. 22. 23. 24. 25. 26.]]
&lt;NDArray 2x6 @cpu(0)&gt; 
Y: 
[[ 7.  8.  9. 10. 11. 12.]
 [22. 23. 24. 25. 26. 27.]]
&lt;NDArray 2x6 @cpu(0)&gt; 
</code></pre><h2 id="循环神经网络的从零开始实现"><a href="#循环神经网络的从零开始实现" class="headerlink" title="循环神经网络的从零开始实现"></a>循环神经网络的从零开始实现</h2><h3 id="One-hot-encoding"><a href="#One-hot-encoding" class="headerlink" title="One hot encoding"></a>One hot encoding</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_onehot</span><span class="params">(X,size)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [nd.one_hot(x,size) <span class="keyword">for</span> x <span class="keyword">in</span> X.T]</span><br><span class="line">X = nd.arange(<span class="number">10</span>).reshape((<span class="number">2</span>, <span class="number">5</span>))</span><br><span class="line">inputs = to_onehot(X, vocab_size)</span><br><span class="line">len(inputs), inputs[<span class="number">0</span>].shape  <span class="comment"># time_step = 5，batch_size = 2, features = 2582</span></span><br></pre></td></tr></table></figure>
<pre><code>(5, (2, 1027))
</code></pre><h3 id="初始化模型参数"><a href="#初始化模型参数" class="headerlink" title="初始化模型参数"></a>初始化模型参数</h3><ul>
<li>num_hiddens 是hidden cell的差参数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num_inputs, num_hiddens, num_outputs = vocab_size, <span class="number">256</span>, vocab_size</span><br><span class="line">ctx = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_params</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_one</span><span class="params">(shape)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> nd.random.normal(scale=<span class="number">0.01</span>, shape=shape, ctx=ctx)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_three</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (_one((num_inputs, num_hiddens)),</span><br><span class="line">                        _one((num_hiddens, num_hiddens)),</span><br><span class="line">                        nd.zeros(num_hiddens, ctx=ctx))</span><br><span class="line">    <span class="comment"># 隐藏层参数</span></span><br><span class="line">    W_xi, W_hi, b_i = _three() <span class="comment">#输入门</span></span><br><span class="line">    W_xf, W_hf, b_f = _three() <span class="comment">#遗忘门</span></span><br><span class="line">    W_xo, W_ho, b_o = _three() <span class="comment">#输出门</span></span><br><span class="line">    W_xc, W_hc, b_c = _three() <span class="comment">#候选cell参数 </span></span><br><span class="line">    <span class="comment"># 输出层参数</span></span><br><span class="line">    </span><br><span class="line">    W_hq = _one((num_hiddens, num_outputs))</span><br><span class="line">    b_q = nd.zeros(num_outputs, ctx=ctx)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 附上梯度</span></span><br><span class="line">    params = [W_xi, W_hi, b_i, W_xf, W_hf, b_f, W_xo, W_ho, b_o, W_xc, W_hc,</span><br><span class="line">b_c, W_hq, b_q]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> param <span class="keyword">in</span> params:</span><br><span class="line">        param.attach_grad()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> params</span><br></pre></td></tr></table></figure>
<h3 id="定义模型"><a href="#定义模型" class="headerlink" title="定义模型"></a>定义模型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_lstm_state</span><span class="params">(batch_size, num_hiddens, ctx)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (nd.zeros(shape=(batch_size, num_hiddens), ctx=ctx),nd.zeros(shape=(batch_size, num_hiddens), ctx=ctx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lstm</span><span class="params">(inputs, state, params)</span>:</span></span><br><span class="line">    [W_xi, W_hi, b_i, W_xf, W_hf, b_f, W_xo, W_ho, b_o, W_xc, W_hc, b_c,</span><br><span class="line">             W_hq, b_q] = params</span><br><span class="line">    H,C = state</span><br><span class="line">    outputs = []</span><br><span class="line">    <span class="keyword">for</span> X <span class="keyword">in</span> inputs:</span><br><span class="line">        I = nd.sigmoid(nd.dot(X, W_xi) + nd.dot(H, W_hi) + b_i)</span><br><span class="line">        F = nd.sigmoid(nd.dot(X, W_xf) + nd.dot(H, W_hf) + b_f)</span><br><span class="line">        O = nd.sigmoid(nd.dot(X, W_xo) + nd.dot(H, W_ho) + b_o)</span><br><span class="line">        C_tilda = nd.tanh(nd.dot(X, W_xc) + nd.dot(H, W_hc) + b_c)</span><br><span class="line">        C = F * C + I * C_tilda</span><br><span class="line">        H = O * C.tanh()</span><br><span class="line">        Y = nd.dot(H, W_hq) + b_q</span><br><span class="line">        outputs.append(Y)</span><br><span class="line">    <span class="keyword">return</span> outputs, (H,C)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">state = init_lstm_state(X.shape[<span class="number">0</span>], num_hiddens, ctx = <span class="keyword">None</span>)</span><br><span class="line">inputs = to_onehot(X, vocab_size)</span><br><span class="line">params = get_params()</span><br><span class="line">outputs, state_new = lstm(inputs, state, params)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">len(outputs), outputs[<span class="number">0</span>].shape, state_new[<span class="number">0</span>].shape</span><br></pre></td></tr></table></figure>
<pre><code>(5, (2, 1027), (2, 256))
</code></pre><h2 id="定义预测函数"><a href="#定义预测函数" class="headerlink" title="定义预测函数"></a>定义预测函数</h2><p>以下函数基于前缀 prefix(含有数个字符的字符串)来预测接下来的 num_chars个字符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict_lstm</span><span class="params">(prefix, num_chars, rnn, params, init_lstm_state,</span></span></span><br><span class="line"><span class="function"><span class="params">                        num_hiddens, vocab_size, ctx, idx_to_char, char_to_idx)</span>:</span></span><br><span class="line">    state = init_lstm_state(<span class="number">1</span>, num_hiddens, ctx)</span><br><span class="line">    output = [char_to_idx[prefix[<span class="number">0</span>]]]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> range(num_chars + len(prefix) - <span class="number">1</span>):</span><br><span class="line">        <span class="comment"># 将上一时间步的输出作为当前时间步的输入。</span></span><br><span class="line">        X = to_onehot(nd.array([output[<span class="number">-1</span>]], ctx=ctx), vocab_size)</span><br><span class="line">        (Y, state) = lstm(X, state, params)</span><br><span class="line">        <span class="keyword">if</span> t &lt; len(prefix) - <span class="number">1</span>:</span><br><span class="line">            output.append(char_to_idx[prefix[t + <span class="number">1</span>]])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            output.append(int(Y[<span class="number">0</span>].argmax(axis=<span class="number">1</span>).asscalar()))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join([idx_to_char[i] <span class="keyword">for</span> i <span class="keyword">in</span> output])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">predict_lstm(<span class="string">'分开'</span>, <span class="number">10</span>, lstm, params, init_lstm_state, num_hiddens, vocab_size, ctx, index_to_char, char_to_index)</span><br></pre></td></tr></table></figure>
<pre><code>&#39;分开蟑榜沉篇来他已密明漠&#39;
</code></pre><h2 id="梯度剪裁"><a href="#梯度剪裁" class="headerlink" title="梯度剪裁"></a>梯度剪裁</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">grad_clipping</span><span class="params">(params, theta, ctx = None)</span>:</span></span><br><span class="line">    norm = nd.array([<span class="number">0.0</span>], ctx) </span><br><span class="line">    <span class="keyword">for</span> param <span class="keyword">in</span> params:</span><br><span class="line">        norm += (param.grad ** <span class="number">2</span>).sum() </span><br><span class="line">    norm = norm.sqrt().asscalar()</span><br><span class="line">    <span class="keyword">if</span> norm &gt; theta:</span><br><span class="line">        <span class="keyword">for</span> param <span class="keyword">in</span> params: </span><br><span class="line">            param.grad[:] *= theta / norm</span><br></pre></td></tr></table></figure>
<h2 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sgd</span><span class="params">(params, lr, batch_size)</span>:</span> <span class="comment"># 本函数已保存在 gluonbook 包中方便以后使用。 </span></span><br><span class="line">    <span class="keyword">for</span> param <span class="keyword">in</span> params:</span><br><span class="line">        param[:] = param - lr * param.grad / batch_size</span><br></pre></td></tr></table></figure>
<h2 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_and_predict_rnn</span><span class="params">(lstm, get_params, init_lstm_state, num_hiddens,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   vocab_size, corpus_indices, idx_to_char,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   char_to_idx, is_random_iter, num_epochs, num_steps,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   lr, clipping_theta, batch_size, pred_period,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   pred_len, prefixes, ctx = None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> is_random_iter:</span><br><span class="line">        data_iter_fn = data_iter_random</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        data_iter_fn = data_iter_consecutive</span><br><span class="line">    </span><br><span class="line">    params = get_params()</span><br><span class="line">    loss = gloss.SoftmaxCrossEntropyLoss()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(num_epochs):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_random_iter: <span class="comment"># 如使用相邻采样，在 epoch 开始时初始化隐藏状态。</span></span><br><span class="line">            state = init_lstm_state(batch_size, num_hiddens, ctx)</span><br><span class="line">        </span><br><span class="line">        loss_sum, start = <span class="number">0.0</span>, time.time()</span><br><span class="line">        data_iter = data_iter_fn(indices_corpus, batch_size, num_steps, ctx)</span><br><span class="line">        <span class="keyword">for</span> t, (X, Y) <span class="keyword">in</span> enumerate(data_iter):</span><br><span class="line">            <span class="keyword">if</span> is_random_iter: <span class="comment"># 如使用随机采样，在每个小批量更新前初始化隐藏状态。 </span></span><br><span class="line">                state = init_rnn_state(batch_size, num_hiddens, ctx)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 否则需要使用 detach 函数从计算图分离隐藏状态</span></span><br><span class="line">                <span class="keyword">for</span> s <span class="keyword">in</span> state: </span><br><span class="line">                    s.detach()</span><br><span class="line">        </span><br><span class="line">            <span class="keyword">with</span> autograd.record():</span><br><span class="line">                inputs = to_onehot(X, vocab_size)</span><br><span class="line">                <span class="comment"># outputs 有 num_steps 个形状为(batch_size，vocab_size)的矩阵。 </span></span><br><span class="line">                (outputs, state) = lstm(inputs, state, params)</span><br><span class="line">                <span class="comment"># 拼接之后形状为(num_steps * batch_size，vocab_size)。</span></span><br><span class="line">                outputs = nd.concat(*outputs, dim=<span class="number">0</span>)</span><br><span class="line">                <span class="comment"># Y 的形状是(batch_size，num_steps)，转置后再变成⻓度为</span></span><br><span class="line">                <span class="comment"># batch * num_steps 的向量，这样跟输出的行一一对应。</span></span><br><span class="line">                y = Y.T.reshape((<span class="number">-1</span>,))</span><br><span class="line">                <span class="comment"># 使用交叉熵损失计算平均分类误差。</span></span><br><span class="line">                l = loss(outputs, y).mean()</span><br><span class="line">            l.backward()</span><br><span class="line">            grad_clipping(params, clipping_theta, ctx) <span class="comment"># 裁剪梯度。 gb.sgd(params, lr, 1) # 因为误差已经取过均值，梯度不用再做平均。 loss_sum += l.asscalar()</span></span><br><span class="line">            sgd(params, lr, <span class="number">1</span>) <span class="comment"># 因为误差已经取过均值，梯度不用再做平均。 </span></span><br><span class="line">            loss_sum += l.asscalar()</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">if</span> (epoch + <span class="number">1</span>) % pred_period == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">'epoch %d, perplexity %f, time %.2f sec'</span> % (epoch + <span class="number">1</span>, math.exp(loss_sum / (t + <span class="number">1</span>)), time.time() - start)) </span><br><span class="line">            <span class="keyword">for</span> prefix <span class="keyword">in</span> prefixes:</span><br><span class="line">                print(<span class="string">' -'</span>, predict_lstm(prefix, pred_len, lstm, params, init_lstm_state, num_hiddens, vocab_size, ctx, idx_to_char, char_to_idx))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num_epochs, num_steps, batch_size, lr, clipping_theta = <span class="number">200</span>, <span class="number">35</span>, <span class="number">32</span>, <span class="number">1e2</span>, <span class="number">1e-2</span> </span><br><span class="line">pred_period, pred_len, prefixes = <span class="number">50</span>, <span class="number">50</span>, [<span class="string">'分开'</span>, <span class="string">'不分开'</span>]</span><br><span class="line"></span><br><span class="line">train_and_predict_rnn(lstm, get_params, init_lstm_state, num_hiddens,</span><br><span class="line">                                   vocab_size, indices_corpus, index_to_char,</span><br><span class="line">                                   char_to_index, <span class="keyword">False</span>, num_epochs, num_steps,</span><br><span class="line">                                   lr, clipping_theta, batch_size, pred_period,</span><br><span class="line">                                   pred_len, prefixes, ctx = <span class="keyword">None</span>)</span><br></pre></td></tr></table></figure>
<pre><code>epoch 50, perplexity 163.030127, time 3.16 sec
 - 分开 我想你你你的可爱人 我想想你你你的可爱 我想想你你你的可爱 我想想你你你的可爱 我想想你你你的可爱
 - 不分开 我想你你你的可爱人 我想想你你你的可爱 我想想你你你的可爱 我想想你你你的可爱 我想想你你你的可爱
epoch 100, perplexity 32.180855, time 3.49 sec
 - 分开 我想你这你是我 一场我 你给我的太笑 有有后觉 我给了这生我 我知好觉 我该了好生活 我知后觉 我
 - 不分开 我想你的你笑我妈妈 我想你的你 我不要这想 我不 我不 我不要 我爱 我不了 你不不觉 我爱了觉 
epoch 150, perplexity 5.679034, time 3.21 sec
 - 分开 你在我不里 除非一乌截棍 它什么 干什么 我想都有难信 干檐是人 是谁在在切记 哼哼哈兮 快使用双
 - 不分开 我已你的个笑 我爱你 你爱我的我有你 败一抖的黑有 说你的让我有听的可有人人  我有你这里单美但家
epoch 200, perplexity 1.841203, time 3.22 sec
 - 分开 一直我 是场于枪年代白墙黑瓦的淡淡的忧伤 消失的 旧时光 一九四三 在头看 的片段 有一些风霜 老
 - 不分开 我已经 我开我 我想了大牵牵着你 不开开心不你 让不不 你经开 我想就这牵牵着你的手不放开 爱可不
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Project</tag>
        <tag>Sequence Models</tag>
      </tags>
  </entry>
  <entry>
    <title>GRU MXNET Implemetation</title>
    <url>/GRU-MXNET-Implemetation/2019/04/13/</url>
    <content><![CDATA[<h1 id="门控循环单元（GRU）"><a href="#门控循环单元（GRU）" class="headerlink" title="门控循环单元（GRU）"></a>门控循环单元（GRU）</h1><p>上一节介绍了循环神经网络中的梯度计算方法。我们发现，当时间步数较大或者时间步较小时，循环神经网络的梯度较容易出现衰减或爆炸。虽然裁剪梯度可以应对梯度爆炸，但无法解决梯度衰减的问题。通常由于这个原因，循环神经网络在实际中较难捕捉时间序列中时间步距离较大的依赖关系。</p>
<p>门控循环神经网络（gated recurrent neural network）的提出，正是为了更好地捕捉时间序列中时间步距离较大的依赖关系。它通过可以学习的门来控制信息的流动。其中，门控循环单元（gated recurrent unit，简称 GRU）是一种常用的门控循环神经网络 [1, 2]。另一种常见门控循环神经网络则将在下一节中介绍。</p>
<h2 id="门控循环单元"><a href="#门控循环单元" class="headerlink" title="门控循环单元"></a>门控循环单元</h2><p>下面将介绍门控循环单元的设计。它引入了重置门和更新门的概念，从而修改了循环神经网络中隐藏状态的计算方式。</p>
<h3 id="重置门和更新门"><a href="#重置门和更新门" class="headerlink" title="重置门和更新门"></a>重置门和更新门</h3><p>如图 6.4 所示，门控循环单元中的重置门（reset gate）和更新门（update gate）的输入均为当前时间步输入 $\boldsymbol{X}_t$ 与上一时间步隐藏状态 $\boldsymbol{H}_{t-1}$，输出由激活函数为 sigmoid 函数的全连接层计算得到。</p>
<p><img src="gru_1.svg" alt="门控循环单元中重置门和更新门的计算"></p>
<p>具体来说，假设隐藏单元个数为 $h$，给定时间步 $t$ 的小批量输入 $\boldsymbol{X}_t \in \mathbb{R}^{n \times d}$（样本数为 $n$，输入个数为 $d$）和上一时间步隐藏状态 $\boldsymbol{H}_{t-1} \in \mathbb{R}^{n \times h}$。重置门 $\boldsymbol{R}_t \in \mathbb{R}^{n \times h}$ 和更新门 $\boldsymbol{Z}_t \in \mathbb{R}^{n \times h}$ 的计算如下：</p>
<script type="math/tex; mode=display">
\begin{aligned}
\boldsymbol{R}\_t = \sigma(\boldsymbol{X}\_t \boldsymbol{W}\_{xr} + \boldsymbol{H}\_{t-1} \boldsymbol{W}\_{hr} + \boldsymbol{b}\_r),\\
\boldsymbol{Z}\_t = \sigma(\boldsymbol{X}\_t \boldsymbol{W}\_{xz} + \boldsymbol{H}\_{t-1} \boldsymbol{W}\_{hz} + \boldsymbol{b}\_z),
\end{aligned}</script><p>其中 $\boldsymbol{W}_{xr}, \boldsymbol{W}_{xz} \in \mathbb{R}^{d \times h}$ 和 $\boldsymbol{W}_{hr}, \boldsymbol{W}_{hz} \in \mathbb{R}^{h \times h}$ 是权重参数，$\boldsymbol{b}_r, \boldsymbol{b}_z \in \mathbb{R}^{1 \times h}$ 是偏差参数。<a href="../chapter\_deep-learning-basics/mlp.md">“多层感知机”</a>一节中介绍过，sigmoid 函数可以将元素的值变换到 0 和 1 之间。因此，重置门 $\boldsymbol{R}_t$ 和更新门 $\boldsymbol{Z}_t$ 中每个元素的值域都是 $[0, 1]$。</p>
<h3 id="候选隐藏状态"><a href="#候选隐藏状态" class="headerlink" title="候选隐藏状态"></a>候选隐藏状态</h3><p>接下来，门控循环单元将计算候选隐藏状态来辅助稍后的隐藏状态计算。如图 6.5 所示，我们将当前时间步重置门的输出与上一时间步隐藏状态做按元素乘法（符号为 $\odot$）。如果重置门中元素值接近 0，那么意味着重置对应隐藏状态元素为 0，即丢弃上一时间步的隐藏状态。如果元素值接近 1，那么表示保留上一时间步的隐藏状态。然后，将按元素乘法的结果与当前时间步的输入连结，再通过含激活函数 tanh 的全连接层计算出候选隐藏状态，其所有元素的值域为 $[-1, 1]$。</p>
<p><img src="gru_2.svg" alt="门控循环单元中候选隐藏状态的计算"></p>
<p>具体来说，时间步 $t$ 的候选隐藏状态 $\tilde{\boldsymbol{H}}_t \in \mathbb{R}^{n \times h}$ 的计算为</p>
<script type="math/tex; mode=display">\tilde{\boldsymbol{H}}\_t = \text{tanh}(\boldsymbol{X}\_t \boldsymbol{W}\_{xh} + \left(\boldsymbol{R}\_t \odot \boldsymbol{H}\_{t-1}\right) \boldsymbol{W}\_{hh} + \boldsymbol{b}\_h),</script><p>其中 $\boldsymbol{W}_{xh} \in \mathbb{R}^{d \times h}$ 和 $\boldsymbol{W}_{hh} \in \mathbb{R}^{h \times h}$ 是权重参数，$\boldsymbol{b}_h \in \mathbb{R}^{1 \times h}$ 是偏差参数。从上面这个公式可以看出，重置门控制了上一时间步的隐藏状态如何流入当前时间步的候选隐藏状态。而上一时间步的隐藏状态可能包含了时间序列截至上一时间步的全部历史信息。因此，重置门可以用来丢弃与预测无关的历史信息。</p>
<h3 id="隐藏状态"><a href="#隐藏状态" class="headerlink" title="隐藏状态"></a>隐藏状态</h3><p>最后，时间步 $t$ 的隐藏状态 $\boldsymbol{H}_t \in \mathbb{R}^{n \times h}$ 的计算使用当前时间步的更新门 $\boldsymbol{Z}_t$ 来对上一时间步的隐藏状态 $\boldsymbol{H}_{t-1}$ 和当前时间步的候选隐藏状态 $\tilde{\boldsymbol{H}}_t$ 做组合：</p>
<script type="math/tex; mode=display">\boldsymbol{H}\_t = \boldsymbol{Z}\_t \odot \boldsymbol{H}\_{t-1}  + (1 - \boldsymbol{Z}\_t) \odot \tilde{\boldsymbol{H}}\_t.</script><p><img src="gru_3.svg" alt="门控循环单元中隐藏状态的计算"></p>
<p>值得注意的是，更新门可以控制隐藏状态应该如何被包含当前时间步信息的候选隐藏状态所更新，如图 6.6 所示。假设更新门在时间步 $t’$ 到 $t$（$t’ &lt; t$）之间一直近似 1。那么，在时间步 $t’$ 到 $t$ 之间的输入信息几乎没有流入时间步 $t$ 的隐藏状态 $\boldsymbol{H}_t$。实际上，这可以看作是较早时刻的隐藏状态 $\boldsymbol{H}_{t’-1}$ 一直通过时间保存并传递至当前时间步 $t$。这个设计可以应对循环神经网络中的梯度衰减问题，并更好地捕捉时间序列中时间步距离较大的依赖关系。</p>
<p>我们对门控循环单元的设计稍作总结：</p>
<ul>
<li>重置门有助于捕捉时间序列里短期的依赖关系。</li>
<li>更新门有助于捕捉时间序列里长期的依赖关系。</li>
</ul>
<h2 id="读取数据集"><a href="#读取数据集" class="headerlink" title="读取数据集"></a>读取数据集</h2><p>为了实现并展示门控循环单元，我们依然使用周杰伦歌词数据集来训练模型作词。这里除门控循环单元以外的实现已在<a href="rnn.md">“循环神经网络”</a>一节中介绍。以下为读取数据集部分。</p>
<h1 id="循环神经网络"><a href="#循环神经网络" class="headerlink" title="循环神经网络"></a>循环神经网络</h1><p>本节将介绍循环神经网络。它并非刚性地记忆所有固定长度的序列，而是通过隐藏状态来储存之前时间步的信息。首先我们回忆一下前面介绍过的多层感知机，然后描述如何添加隐藏状态来将它变成循环神经网络。</p>
<h2 id="不含隐藏状态的神经网络"><a href="#不含隐藏状态的神经网络" class="headerlink" title="不含隐藏状态的神经网络"></a>不含隐藏状态的神经网络</h2><p>让我们考虑一个单隐藏层的多层感知机。给定样本数为 $n$、输入个数（特征数或特征向量维度）为 $d$ 的小批量数据样本 $\boldsymbol{X} \in \mathbb{R}^{n \times d}$。设隐藏层的激活函数为 $\phi$，那么隐藏层的输出 $\boldsymbol{H} \in \mathbb{R}^{n \times h}$ 计算为</p>
<script type="math/tex; mode=display">\boldsymbol{H} = \phi(\boldsymbol{X} \boldsymbol{W}\_{xh} + \boldsymbol{b}\_h),</script><p>其中隐藏层权重参数 $\boldsymbol{W}_{xh} \in \mathbb{R}^{d \times h}$，隐藏层偏差参数 $\boldsymbol{b}_h \in \mathbb{R}^{1 \times h}$，$h$ 为隐藏单元个数。上式相加的两项形状不同，因此将按照广播机制相加。把隐藏变量 $\boldsymbol{H}$ 作为输出层的输入，且设输出个数为 $q$（例如分类问题中的类别数），输出层的输出为</p>
<script type="math/tex; mode=display">\boldsymbol{O} = \boldsymbol{H} \boldsymbol{W}\_{hq} + \boldsymbol{b}\_q,</script><p>其中输出变量 $\boldsymbol{O} \in \mathbb{R}^{n \times q}$, 输出层权重参数 $\boldsymbol{W}_{hq} \in \mathbb{R}^{h \times q}$, 输出层偏差参数 $\boldsymbol{b}_q \in \mathbb{R}^{1 \times q}$。如果是分类问题，我们可以使用 $\text{softmax}(\boldsymbol{O})$ 来计算输出类别的概率分布。</p>
<h2 id="含隐藏状态的循环神经网络"><a href="#含隐藏状态的循环神经网络" class="headerlink" title="含隐藏状态的循环神经网络"></a>含隐藏状态的循环神经网络</h2><p>现在我们考虑输入数据存在时间相关性的情况。假设 $\boldsymbol{X}_t \in \mathbb{R}^{n \times d}$ 是序列中时间步 $t$ 的小批量输入，$\boldsymbol{H}_t  \in \mathbb{R}^{n \times h}$ 是该时间步的隐藏层变量。跟多层感知机不同的是，这里我们保存上一时间步的隐藏变量 $\boldsymbol{H}_{t-1}$，并引入一个新的权重参数 $\boldsymbol{W}_{hh} \in \mathbb{R}^{h \times h}$，该参数用来描述在当前时间步如何使用上一时间步的隐藏变量。具体来说，当前时间步的隐藏变量的计算由当前时间步的输入和上一时间步的隐藏变量共同决定：</p>
<script type="math/tex; mode=display">\boldsymbol{H}\_t = \phi(\boldsymbol{X}\_t \boldsymbol{W}\_{xh} + \boldsymbol{H}\_{t-1} \boldsymbol{W}\_{hh}  + \boldsymbol{b}\_h).</script><p>与多层感知机相比，我们在这里添加了 $\boldsymbol{H}_{t-1} \boldsymbol{W}_{hh}$ 一项。由上式中相邻时间步的隐藏变量 $\boldsymbol{H}_t$ 和 $\boldsymbol{H}_{t-1}$ 之间的关系可知，这里的隐藏变量捕捉了截至当前时间步的序列的历史信息，就像是神经网络当前时间步的状态或记忆一样。因此，该隐藏变量也称为隐藏状态。由于隐藏状态在当前时间步的定义使用了它在上一时间步相同的定义，上式的计算是循环的。使用循环计算的网络即循环神经网络。</p>
<p>循环神经网络有很多种不同的构造方法。含上式所定义的隐藏状态的循环神经网络是极为常见的一种。如无特别说明，本章中的循环神经网络基于上式中隐藏状态的循环计算。在时间步 $t$，输出层的输出和多层感知机中的计算类似：</p>
<script type="math/tex; mode=display">\boldsymbol{O}\_t = \boldsymbol{H}\_t \boldsymbol{W}\_{hq} + \boldsymbol{b}\_q.</script><p>循环神经网络的参数包括隐藏层的权重 $\boldsymbol{W}_{xh} \in \mathbb{R}^{d \times h}, \boldsymbol{W}_{hh} \in \mathbb{R}^{h \times h}$ 和偏差 $\boldsymbol{b}_h \in \mathbb{R}^{1 \times h}$，以及输出层的权重 $\boldsymbol{W}_{hq} \in \mathbb{R}^{h \times q}$ 和偏差 $\boldsymbol{b}_q \in \mathbb{R}^{1 \times q}$。值得一提的是，即便在不同时间步，循环神经网络始终使用这些模型参数。因此，循环神经网络模型参数的数量不随时间步的递增而增长。</p>
<p>图 6.1 展示了循环神经网络在三个相邻时间步的计算逻辑。在时间步 $t$，隐藏状态的计算可以看成是将输入 $\boldsymbol{X}_t$ 和前一时间步隐藏状态 $\boldsymbol{H}_{t-1}$ 连结后输入一个激活函数为 $\phi$ 的全连接层。该全连接层的输出就是当前时间步的隐藏状态 $\boldsymbol{H}_t$，且模型参数为 $\boldsymbol{W}_{xh}$ 与 $\boldsymbol{W}_{hh}$ 的连结，偏差为 $\boldsymbol{b}_h$。当前时间步 $t$ 的隐藏状态 $\boldsymbol{H}_t$ 将参与下一个时间步 $t+1$ 的隐藏状态 $\boldsymbol{H}_{t+1}$ 的计算，并输入到当前时间步的全连接输出层。</p>
<p><img src="rnn.svg" alt="含隐藏状态的循环神经网络。"></p>
<p>我们刚刚提到，隐藏状态中 $\boldsymbol{X}_t \boldsymbol{W}_{xh} + \boldsymbol{H}_{t-1} \boldsymbol{W}_{hh}$ 的计算等价于 $\boldsymbol{X}_t$ 与 $\boldsymbol{H}_{t-1}$ 连结后的矩阵乘以 $\boldsymbol{W}_{xh}$ 与 $\boldsymbol{W}_{hh}$ 连结后的矩阵。接下来，我们用一个具体的例子来验证这一点。首先，我们构造矩阵<code>X</code>、<code>W\_xh</code>、<code>H</code>和<code>W\_hh</code>，它们的形状分别为（3，1）、（1，4）、（3，2）和（2，4）。将<code>X</code>与<code>W\_xh</code>、<code>H</code>与<code>W\_hh</code>分别相乘，再把两个相乘的结果相加，得到形状为（3，4）的矩阵。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> nd, autograd</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">from</span> mxnet.gluon <span class="keyword">import</span> loss <span class="keyword">as</span> gloss</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> math</span><br></pre></td></tr></table></figure>
<h2 id="读取数据集-1"><a href="#读取数据集-1" class="headerlink" title="读取数据集"></a>读取数据集</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> zipfile.ZipFile(<span class="string">"jaychou_lyrics.txt.zip"</span>) <span class="keyword">as</span> zin:</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> zin.namelist():</span><br><span class="line">        <span class="keyword">with</span> zin.open(file) <span class="keyword">as</span> f:</span><br><span class="line">            corpus_chars = f.read().decode(<span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">corpus_chars = corpus_chars.replace(<span class="string">'\n'</span>,<span class="string">' '</span>).replace(<span class="string">'\r'</span>,<span class="string">' '</span>)</span><br><span class="line">corpus_chars = corpus_chars[:<span class="number">10000</span>]</span><br><span class="line">corpus_chars[:<span class="number">40</span>]</span><br></pre></td></tr></table></figure>
<pre><code>&#39;想要有直升机 想要和你飞到宇宙去 想要和你融化在一起 融化在宇宙里 我每天每天每&#39;
</code></pre><h2 id="建立字符索引"><a href="#建立字符索引" class="headerlink" title="建立字符索引"></a>建立字符索引</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">index_to_char = list(set(corpus_chars))</span><br><span class="line">vocab_size = len(index_to_char)</span><br><span class="line">char_to_index = &#123;char:i <span class="keyword">for</span> i,char <span class="keyword">in</span> enumerate(index_to_char)&#125;</span><br><span class="line">vocab_size</span><br></pre></td></tr></table></figure>
<pre><code>1027
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">indices_corpus = [char_to_index[char] <span class="keyword">for</span> char <span class="keyword">in</span> corpus_chars]</span><br><span class="line">sample = indices_corpus[:<span class="number">20</span>]</span><br><span class="line">print(<span class="string">"chars: &#123;&#125;"</span>.format(<span class="string">""</span>.join(index_to_char[idx] <span class="keyword">for</span> idx <span class="keyword">in</span> sample)))</span><br><span class="line">print(<span class="string">"index: &#123;&#125;"</span>.format(sample))</span><br></pre></td></tr></table></figure>
<pre><code>chars: 想要有直升机 想要和你飞到宇宙去 想要和
index: [411, 880, 895, 556, 110, 829, 374, 411, 880, 525, 567, 837, 551, 220, 203, 258, 374, 411, 880, 525]
</code></pre><h2 id="时序数据的采样"><a href="#时序数据的采样" class="headerlink" title="时序数据的采样"></a>时序数据的采样</h2><ol>
<li>随机采样</li>
<li>相邻采样</li>
</ol>
<h3 id="随机采样"><a href="#随机采样" class="headerlink" title="随机采样"></a>随机采样</h3><ul>
<li>批量大小 batch_size指每个小批量的样本数，num_steps为每个样本所包含的时间步数。</li>
<li>在随机采样中，每个样本是原始序列上任意截 取的一段序列。相邻的两个随机小批量在原始序列上的位置不一定相毗邻。因此，我们无法用一 个小批量最终时间步的隐藏状态来初始化下一个小批量的隐藏状态。</li>
<li>在训练模型时，每次随机采样前都需要重新初始化隐藏状态。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_iter_random</span><span class="params">(indices_corpus, batch_size, num_steps, ctx=None)</span>:</span></span><br><span class="line">    num_example = (len(indices_corpus) - <span class="number">1</span>) // num_steps    <span class="comment">## 总共有多少个样本</span></span><br><span class="line">    epoch_size = num_example // batch_size  <span class="comment">## 每个 epoch 有多少个小批量</span></span><br><span class="line">    example_indices = list(range(num_example)) <span class="comment">## 样本的索引</span></span><br><span class="line">    random.shuffle(example_indices)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_data</span><span class="params">(pos)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> indices_corpus[pos : pos + num_steps]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(epoch_size):</span><br><span class="line">        <span class="comment"># 每次生成 batch_size 个随机样本</span></span><br><span class="line">        batch_start = i * batch_size</span><br><span class="line">        batch_indices = example_indices[batch_start:batch_start + batch_size]  <span class="comment">## 小批量的样本索引</span></span><br><span class="line">        X = [_data( j * num_steps ) <span class="keyword">for</span> j <span class="keyword">in</span> batch_indices]</span><br><span class="line">        Y = [_data( j * num_steps + <span class="number">1</span>) <span class="keyword">for</span> j <span class="keyword">in</span> batch_indices]</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">yield</span> nd.array(X, ctx), nd.array(Y, ctx)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_seq = list(range(<span class="number">30</span>))</span><br><span class="line"><span class="keyword">for</span> X, Y <span class="keyword">in</span> data_iter_random(my_seq, batch_size=<span class="number">2</span>, num_steps=<span class="number">6</span>):</span><br><span class="line">    print(<span class="string">'X: '</span>, X, <span class="string">'\nY:'</span>, Y, <span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure>
<pre><code>X:  
[[ 0.  1.  2.  3.  4.  5.]
 [12. 13. 14. 15. 16. 17.]]
&lt;NDArray 2x6 @cpu(0)&gt; 
Y: 
[[ 1.  2.  3.  4.  5.  6.]
 [13. 14. 15. 16. 17. 18.]]
&lt;NDArray 2x6 @cpu(0)&gt; 

X:  
[[18. 19. 20. 21. 22. 23.]
 [ 6.  7.  8.  9. 10. 11.]]
&lt;NDArray 2x6 @cpu(0)&gt; 
Y: 
[[19. 20. 21. 22. 23. 24.]
 [ 7.  8.  9. 10. 11. 12.]]
&lt;NDArray 2x6 @cpu(0)&gt; 
</code></pre><h3 id="相邻采样"><a href="#相邻采样" class="headerlink" title="相邻采样"></a>相邻采样</h3><p>除了对原始序列做随机采样之外，我们还可以令相邻的两个随机小批量在原始序列上的位置相毗邻。此时，我们就可以用一个小批量最终时间步的隐藏状态来初始化下一个小批量的隐藏状态， 从而使下一个小批量的输出也取决于当前小批量的输入，并如此循环下去。这对实现循环神经网络造成了两方面影响。一方面，在训练模型时，我们只需在每一个迭代周期开始时初始化隐藏状态。另一方面，当多个相邻小批量通过传递隐藏状态串联起来时，模型参数的梯度计算将依赖所有串联起来的小批量序列。同一迭代周期中，随着迭代次数的增加，梯度的计算开销会越来越大。 为了使模型参数的梯度计算只依赖一次迭代读取的小批量序列，我们可以在每次读取小批量前将隐藏状态从计算图分离出来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_iter_consecutive</span><span class="params">(corpus_indices, batch_size, num_steps, ctx=None)</span>:</span></span><br><span class="line">    corpus_indices = nd.array(corpus_indices)</span><br><span class="line">    data_len = len(corpus_indices)</span><br><span class="line">    batch_len = data_len // batch_size  </span><br><span class="line">    </span><br><span class="line">    indices = corpus_indices[<span class="number">0</span>: batch_size*batch_len].reshape((</span><br><span class="line">batch_size, batch_len))</span><br><span class="line">    </span><br><span class="line">    epoch_size = (batch_len - <span class="number">1</span>) // num_steps</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(epoch_size):</span><br><span class="line">        i = i * num_steps</span><br><span class="line">        X = indices[:, i: i + num_steps]</span><br><span class="line">        Y = indices[:, i + <span class="number">1</span>: i + num_steps + <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">yield</span> X, Y</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> X, Y <span class="keyword">in</span> data_iter_consecutive(my_seq, batch_size=<span class="number">2</span>, num_steps=<span class="number">6</span>): </span><br><span class="line">    print(<span class="string">'X: '</span>, X, <span class="string">'\nY:'</span>, Y, <span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure>
<pre><code>X:  
[[ 0.  1.  2.  3.  4.  5.]
 [15. 16. 17. 18. 19. 20.]]
&lt;NDArray 2x6 @cpu(0)&gt; 
Y: 
[[ 1.  2.  3.  4.  5.  6.]
 [16. 17. 18. 19. 20. 21.]]
&lt;NDArray 2x6 @cpu(0)&gt; 

X:  
[[ 6.  7.  8.  9. 10. 11.]
 [21. 22. 23. 24. 25. 26.]]
&lt;NDArray 2x6 @cpu(0)&gt; 
Y: 
[[ 7.  8.  9. 10. 11. 12.]
 [22. 23. 24. 25. 26. 27.]]
&lt;NDArray 2x6 @cpu(0)&gt; 
</code></pre><h2 id="循环神经网络的从零开始实现"><a href="#循环神经网络的从零开始实现" class="headerlink" title="循环神经网络的从零开始实现"></a>循环神经网络的从零开始实现</h2><h3 id="One-hot-encoding"><a href="#One-hot-encoding" class="headerlink" title="One hot encoding"></a>One hot encoding</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_onehot</span><span class="params">(X,size)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [nd.one_hot(x,size) <span class="keyword">for</span> x <span class="keyword">in</span> X.T]</span><br><span class="line">X = nd.arange(<span class="number">10</span>).reshape((<span class="number">2</span>, <span class="number">5</span>))</span><br><span class="line">inputs = to_onehot(X, vocab_size)</span><br><span class="line">len(inputs), inputs[<span class="number">0</span>].shape  <span class="comment"># time_step = 5，batch_size = 2, features = 2582</span></span><br></pre></td></tr></table></figure>
<pre><code>(5, (2, 1027))
</code></pre><h3 id="初始化模型参数"><a href="#初始化模型参数" class="headerlink" title="初始化模型参数"></a>初始化模型参数</h3><ul>
<li>num_hiddens 是hidden cell的差参数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num_inputs, num_hiddens, num_outputs = vocab_size, <span class="number">256</span>, vocab_size</span><br><span class="line">ctx = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_params</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_one</span><span class="params">(shape)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> nd.random.normal(scale=<span class="number">0.01</span>, shape=shape, ctx=ctx)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_three</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (_one((num_inputs, num_hiddens)),</span><br><span class="line">            _one((num_hiddens, num_hiddens)),</span><br><span class="line">            nd.zeros(num_hiddens, ctx=ctx))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 隐藏层参数</span></span><br><span class="line">    W_xz, W_hz, b_z = _three()   <span class="comment">#更新门</span></span><br><span class="line">    W_xr, W_hr, b_r = _three()   <span class="comment">#重置门</span></span><br><span class="line">    W_xh, W_hh, b_h = _three()   <span class="comment">#候选隐藏状态</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 输出层参数</span></span><br><span class="line">    W_hq = _one((num_hiddens, num_outputs))</span><br><span class="line">    b_q = nd.zeros(num_outputs, ctx=ctx)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 附上梯度</span></span><br><span class="line">    params = [W_xz, W_hz, b_z, W_xr, W_hr, b_r, W_xh, W_hh, b_h, W_hq, b_q]</span><br><span class="line">    <span class="keyword">for</span> param <span class="keyword">in</span> params:</span><br><span class="line">        param.attach_grad()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> params</span><br></pre></td></tr></table></figure>
<h3 id="定义模型"><a href="#定义模型" class="headerlink" title="定义模型"></a>定义模型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_rnn_state</span><span class="params">(batch_size, num_hiddens, ctx)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (nd.zeros(shape=(batch_size, num_hiddens), ctx=ctx), )</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gru</span><span class="params">(inputs, state, params)</span>:</span></span><br><span class="line">    W_xz, W_hz, b_z, W_xr, W_hr, b_r, W_xh, W_hh, b_h, W_hq, b_q = params</span><br><span class="line">    H, = state</span><br><span class="line">    outputs = []</span><br><span class="line">    <span class="keyword">for</span> X <span class="keyword">in</span> inputs:</span><br><span class="line">        Z = nd.sigmoid(nd.dot(X, W_xz) + nd.dot(H, W_hz) + b_z)</span><br><span class="line">        R = nd.sigmoid(nd.dot(X, W_xr) + nd.dot(H, W_hr) + b_r)</span><br><span class="line">        H_tilda = nd.tanh(nd.dot(X, W_xh) + R * nd.dot(H, W_hh) + b_h) <span class="comment"># 重置门，丢弃无关历史信息</span></span><br><span class="line">        H = Z * H + (<span class="number">1</span> - Z) * H_tilda  <span class="comment"># 更新门，保持长时记忆</span></span><br><span class="line">        Y = nd.dot(H, W_hq) + b_q</span><br><span class="line">        outputs.append(Y)</span><br><span class="line">    <span class="keyword">return</span> outputs, (H,)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">state = init_rnn_state(X.shape[<span class="number">0</span>], num_hiddens, ctx = <span class="keyword">None</span>)</span><br><span class="line">inputs = to_onehot(X, vocab_size)</span><br><span class="line">params = get_params()</span><br><span class="line">outputs, state_new = gru(inputs, state, params)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">len(outputs), outputs[<span class="number">0</span>].shape, state_new[<span class="number">0</span>].shape</span><br></pre></td></tr></table></figure>
<pre><code>(5, (2, 1027), (2, 256))
</code></pre><h2 id="定义预测函数"><a href="#定义预测函数" class="headerlink" title="定义预测函数"></a>定义预测函数</h2><p>以下函数基于前缀 prefix(含有数个字符的字符串)来预测接下来的 num_chars个字符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict_gru</span><span class="params">(prefix, num_chars, gru, params, init_rnn_state,</span></span></span><br><span class="line"><span class="function"><span class="params">                        num_hiddens, vocab_size, ctx, idx_to_char, char_to_idx)</span>:</span></span><br><span class="line">    state = init_rnn_state(<span class="number">1</span>, num_hiddens, ctx)</span><br><span class="line">    output = [char_to_idx[prefix[<span class="number">0</span>]]]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> range(num_chars + len(prefix) - <span class="number">1</span>):</span><br><span class="line">        <span class="comment"># 将上一时间步的输出作为当前时间步的输入。</span></span><br><span class="line">        X = to_onehot(nd.array([output[<span class="number">-1</span>]], ctx=ctx), vocab_size)</span><br><span class="line">        (Y, state) = gru(X, state, params)</span><br><span class="line">        <span class="keyword">if</span> t &lt; len(prefix) - <span class="number">1</span>:</span><br><span class="line">            output.append(char_to_idx[prefix[t + <span class="number">1</span>]])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            output.append(int(Y[<span class="number">0</span>].argmax(axis=<span class="number">1</span>).asscalar()))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join([idx_to_char[i] <span class="keyword">for</span> i <span class="keyword">in</span> output])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">predict_rnn(<span class="string">'分开'</span>, <span class="number">10</span>, gru, params, init_rnn_state, num_hiddens, vocab_size, ctx, index_to_char, char_to_index)</span><br></pre></td></tr></table></figure>
<pre><code>&#39;分开怒泊甜甜甜惚蝴解火术&#39;
</code></pre><h2 id="梯度剪裁"><a href="#梯度剪裁" class="headerlink" title="梯度剪裁"></a>梯度剪裁</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">grad_clipping</span><span class="params">(params, theta, ctx = None)</span>:</span></span><br><span class="line">    norm = nd.array([<span class="number">0.0</span>], ctx) </span><br><span class="line">    <span class="keyword">for</span> param <span class="keyword">in</span> params:</span><br><span class="line">        norm += (param.grad ** <span class="number">2</span>).sum() </span><br><span class="line">    norm = norm.sqrt().asscalar()</span><br><span class="line">    <span class="keyword">if</span> norm &gt; theta:</span><br><span class="line">        <span class="keyword">for</span> param <span class="keyword">in</span> params: </span><br><span class="line">            param.grad[:] *= theta / norm</span><br></pre></td></tr></table></figure>
<h2 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sgd</span><span class="params">(params, lr, batch_size)</span>:</span> <span class="comment"># 本函数已保存在 gluonbook 包中方便以后使用。 </span></span><br><span class="line">    <span class="keyword">for</span> param <span class="keyword">in</span> params:</span><br><span class="line">        param[:] = param - lr * param.grad / batch_size</span><br></pre></td></tr></table></figure>
<h2 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_and_predict_gru</span><span class="params">(gru, get_params, init_rnn_state, num_hiddens,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   vocab_size, corpus_indices, idx_to_char,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   char_to_idx, is_random_iter, num_epochs, num_steps,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   lr, clipping_theta, batch_size, pred_period,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   pred_len, prefixes, ctx = None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> is_random_iter:</span><br><span class="line">        data_iter_fn = data_iter_random</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        data_iter_fn = data_iter_consecutive</span><br><span class="line">    </span><br><span class="line">    params = get_params()</span><br><span class="line">    loss = gloss.SoftmaxCrossEntropyLoss()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(num_epochs):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_random_iter: <span class="comment"># 如使用相邻采样，在 epoch 开始时初始化隐藏状态。</span></span><br><span class="line">            state = init_rnn_state(batch_size, num_hiddens, ctx)</span><br><span class="line">        </span><br><span class="line">        loss_sum, start = <span class="number">0.0</span>, time.time()</span><br><span class="line">        data_iter = data_iter_fn(indices_corpus, batch_size, num_steps, ctx)</span><br><span class="line">        <span class="keyword">for</span> t, (X, Y) <span class="keyword">in</span> enumerate(data_iter):</span><br><span class="line">            <span class="keyword">if</span> is_random_iter: <span class="comment"># 如使用随机采样，在每个小批量更新前初始化隐藏状态。 </span></span><br><span class="line">                state = init_rnn_state(batch_size, num_hiddens, ctx)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 否则需要使用 detach 函数从计算图分离隐藏状态</span></span><br><span class="line">                <span class="keyword">for</span> s <span class="keyword">in</span> state: </span><br><span class="line">                    s.detach()</span><br><span class="line">        </span><br><span class="line">            <span class="keyword">with</span> autograd.record():</span><br><span class="line">                inputs = to_onehot(X, vocab_size)</span><br><span class="line">                <span class="comment"># outputs 有 num_steps 个形状为(batch_size，vocab_size)的矩阵。 </span></span><br><span class="line">                (outputs, state) = gru(inputs, state, params)</span><br><span class="line">                <span class="comment"># 拼接之后形状为(num_steps * batch_size，vocab_size)。</span></span><br><span class="line">                outputs = nd.concat(*outputs, dim=<span class="number">0</span>)</span><br><span class="line">                <span class="comment"># Y 的形状是(batch_size，num_steps)，转置后再变成⻓度为</span></span><br><span class="line">                <span class="comment"># batch * num_steps 的向量，这样跟输出的行一一对应。</span></span><br><span class="line">                y = Y.T.reshape((<span class="number">-1</span>,))</span><br><span class="line">                <span class="comment"># 使用交叉熵损失计算平均分类误差。</span></span><br><span class="line">                l = loss(outputs, y).mean()</span><br><span class="line">            l.backward()</span><br><span class="line">            grad_clipping(params, clipping_theta, ctx) <span class="comment"># 裁剪梯度。 gb.sgd(params, lr, 1) # 因为误差已经取过均值，梯度不用再做平均。 loss_sum += l.asscalar()</span></span><br><span class="line">            sgd(params, lr, <span class="number">1</span>) <span class="comment"># 因为误差已经取过均值，梯度不用再做平均。 </span></span><br><span class="line">            loss_sum += l.asscalar()</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">if</span> (epoch + <span class="number">1</span>) % pred_period == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">'epoch %d, perplexity %f, time %.2f sec'</span> % (epoch + <span class="number">1</span>, math.exp(loss_sum / (t + <span class="number">1</span>)), time.time() - start)) </span><br><span class="line">            <span class="keyword">for</span> prefix <span class="keyword">in</span> prefixes:</span><br><span class="line">                print(<span class="string">' -'</span>, predict_gru(prefix, pred_len, gru, params, init_rnn_state, num_hiddens, vocab_size, ctx, idx_to_char, char_to_idx))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num_epochs, num_steps, batch_size, lr, clipping_theta = <span class="number">200</span>, <span class="number">35</span>, <span class="number">32</span>, <span class="number">1e2</span>, <span class="number">1e-2</span> </span><br><span class="line">pred_period, pred_len, prefixes = <span class="number">50</span>, <span class="number">50</span>, [<span class="string">'分开'</span>, <span class="string">'不分开'</span>]</span><br><span class="line"></span><br><span class="line">train_and_predict_gru(gru, get_params, init_rnn_state, num_hiddens,</span><br><span class="line">                                   vocab_size, indices_corpus, index_to_char,</span><br><span class="line">                                   char_to_index, <span class="keyword">False</span>, num_epochs, num_steps,</span><br><span class="line">                                   lr, clipping_theta, batch_size, pred_period,</span><br><span class="line">                                   pred_len, prefixes, ctx = <span class="keyword">None</span>)</span><br></pre></td></tr></table></figure>
<pre><code>epoch 50, perplexity 107.604530, time 2.57 sec
 - 分开 我想你的让我 爱爱人 我不要你的可爱女人  坏的让我疯狂的可爱女人 坏坏的让我疯狂的可爱女人 坏坏
 - 不分开  说我有你的爱人  爱有我有你的可爱女人  坏的让我疯狂的可爱女人 坏坏的让我疯狂的可爱女人 坏坏
epoch 100, perplexity 12.245766, time 2.56 sec
 - 分开 我想要这样 我不要再想 我不 我不 我不 我不 我不 我不 我不 我不 我不 我不 我不 我不 我
 - 不分开  没有你在我有多多 难散 你想很久了吧? 我想想你 你不要再想 我不 我不 我不 我不 我不 我不
epoch 150, perplexity 1.785267, time 2.54 sec
 - 分开 我想带这样布 对你依依不舍 连隔壁邻居都猜到我现在的感受 河边的风 在吹着头发飘动 牵着你的手 一
 - 不分开  没有你烦我有多烦多多难熬  穿过云层 我试著努力向你奔跑 爱才送到 你却已在别人怀抱 就是开不了
epoch 200, perplexity 1.072161, time 2.53 sec
 - 分开 我已轻这天布 对你依依不舍 连隔壁邻居都猜到我现在的感受 河边的风 在吹着头发飘动 牵着你的手 一
 - 不分开 你已经离开我 不知不觉 我跟了这节奏 后知后觉 后知后觉 迷迷蒙蒙 你给的梦 出现裂缝 隐隐作痛 
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Project</tag>
        <tag>Sequence Models</tag>
      </tags>
  </entry>
  <entry>
    <title>RNN MXNET Implementation</title>
    <url>/RNN-MXNET-Implementation/2019/04/12/</url>
    <content><![CDATA[<h1 id="循环神经网络"><a href="#循环神经网络" class="headerlink" title="循环神经网络"></a>循环神经网络</h1><p>本节将介绍循环神经网络。它并非刚性地记忆所有固定长度的序列，而是通过隐藏状态来储存之前时间步的信息。首先我们回忆一下前面介绍过的多层感知机，然后描述如何添加隐藏状态来将它变成循环神经网络。</p>
<h2 id="不含隐藏状态的神经网络"><a href="#不含隐藏状态的神经网络" class="headerlink" title="不含隐藏状态的神经网络"></a>不含隐藏状态的神经网络</h2><p>让我们考虑一个单隐藏层的多层感知机。给定样本数为 $n$、输入个数（特征数或特征向量维度）为 $d$ 的小批量数据样本 $\boldsymbol{X} \in \mathbb{R}^{n \times d}$。设隐藏层的激活函数为 $\phi$，那么隐藏层的输出 $\boldsymbol{H} \in \mathbb{R}^{n \times h}$ 计算为</p>
<script type="math/tex; mode=display">\boldsymbol{H} = \phi(\boldsymbol{X} \boldsymbol{W}\_{xh} + \boldsymbol{b}\_h),</script><p>其中隐藏层权重参数 $\boldsymbol{W}_{xh} \in \mathbb{R}^{d \times h}$，隐藏层偏差参数 $\boldsymbol{b}_h \in \mathbb{R}^{1 \times h}$，$h$ 为隐藏单元个数。上式相加的两项形状不同，因此将按照广播机制相加。把隐藏变量 $\boldsymbol{H}$ 作为输出层的输入，且设输出个数为 $q$（例如分类问题中的类别数），输出层的输出为</p>
<script type="math/tex; mode=display">\boldsymbol{O} = \boldsymbol{H} \boldsymbol{W}\_{hq} + \boldsymbol{b}\_q,</script><p>其中输出变量 $\boldsymbol{O} \in \mathbb{R}^{n \times q}$, 输出层权重参数 $\boldsymbol{W}_{hq} \in \mathbb{R}^{h \times q}$, 输出层偏差参数 $\boldsymbol{b}_q \in \mathbb{R}^{1 \times q}$。如果是分类问题，我们可以使用 $\text{softmax}(\boldsymbol{O})$ 来计算输出类别的概率分布。</p>
<h2 id="含隐藏状态的循环神经网络"><a href="#含隐藏状态的循环神经网络" class="headerlink" title="含隐藏状态的循环神经网络"></a>含隐藏状态的循环神经网络</h2><p>现在我们考虑输入数据存在时间相关性的情况。假设 $\boldsymbol{X}_t \in \mathbb{R}^{n \times d}$ 是序列中时间步 $t$ 的小批量输入，$\boldsymbol{H}_t  \in \mathbb{R}^{n \times h}$ 是该时间步的隐藏层变量。跟多层感知机不同的是，这里我们保存上一时间步的隐藏变量 $\boldsymbol{H}_{t-1}$，并引入一个新的权重参数 $\boldsymbol{W}_{hh} \in \mathbb{R}^{h \times h}$，该参数用来描述在当前时间步如何使用上一时间步的隐藏变量。具体来说，当前时间步的隐藏变量的计算由当前时间步的输入和上一时间步的隐藏变量共同决定：</p>
<script type="math/tex; mode=display">\boldsymbol{H}\_t = \phi(\boldsymbol{X}\_t \boldsymbol{W}\_{xh} + \boldsymbol{H}\_{t-1} \boldsymbol{W}\_{hh}  + \boldsymbol{b}\_h).</script><p>与多层感知机相比，我们在这里添加了 $\boldsymbol{H}_{t-1} \boldsymbol{W}_{hh}$ 一项。由上式中相邻时间步的隐藏变量 $\boldsymbol{H}_t$ 和 $\boldsymbol{H}_{t-1}$ 之间的关系可知，这里的隐藏变量捕捉了截至当前时间步的序列的历史信息，就像是神经网络当前时间步的状态或记忆一样。因此，该隐藏变量也称为隐藏状态。由于隐藏状态在当前时间步的定义使用了它在上一时间步相同的定义，上式的计算是循环的。使用循环计算的网络即循环神经网络。</p>
<p>循环神经网络有很多种不同的构造方法。含上式所定义的隐藏状态的循环神经网络是极为常见的一种。如无特别说明，本章中的循环神经网络基于上式中隐藏状态的循环计算。在时间步 $t$，输出层的输出和多层感知机中的计算类似：</p>
<script type="math/tex; mode=display">\boldsymbol{O}\_t = \boldsymbol{H}\_t \boldsymbol{W}\_{hq} + \boldsymbol{b}\_q.</script><p>循环神经网络的参数包括隐藏层的权重 $\boldsymbol{W}_{xh} \in \mathbb{R}^{d \times h}, \boldsymbol{W}_{hh} \in \mathbb{R}^{h \times h}$ 和偏差 $\boldsymbol{b}_h \in \mathbb{R}^{1 \times h}$，以及输出层的权重 $\boldsymbol{W}_{hq} \in \mathbb{R}^{h \times q}$ 和偏差 $\boldsymbol{b}_q \in \mathbb{R}^{1 \times q}$。值得一提的是，即便在不同时间步，循环神经网络始终使用这些模型参数。因此，循环神经网络模型参数的数量不随时间步的递增而增长。</p>
<p>图 6.1 展示了循环神经网络在三个相邻时间步的计算逻辑。在时间步 $t$，隐藏状态的计算可以看成是将输入 $\boldsymbol{X}_t$ 和前一时间步隐藏状态 $\boldsymbol{H}_{t-1}$ 连结后输入一个激活函数为 $\phi$ 的全连接层。该全连接层的输出就是当前时间步的隐藏状态 $\boldsymbol{H}_t$，且模型参数为 $\boldsymbol{W}_{xh}$ 与 $\boldsymbol{W}_{hh}$ 的连结，偏差为 $\boldsymbol{b}_h$。当前时间步 $t$ 的隐藏状态 $\boldsymbol{H}_t$ 将参与下一个时间步 $t+1$ 的隐藏状态 $\boldsymbol{H}_{t+1}$ 的计算，并输入到当前时间步的全连接输出层。</p>
<p><img src="rnn.svg" alt="含隐藏状态的循环神经网络。"></p>
<p>我们刚刚提到，隐藏状态中 $\boldsymbol{X}_t \boldsymbol{W}_{xh} + \boldsymbol{H}_{t-1} \boldsymbol{W}_{hh}$ 的计算等价于 $\boldsymbol{X}_t$ 与 $\boldsymbol{H}_{t-1}$ 连结后的矩阵乘以 $\boldsymbol{W}_{xh}$ 与 $\boldsymbol{W}_{hh}$ 连结后的矩阵。接下来，我们用一个具体的例子来验证这一点。首先，我们构造矩阵<code>X</code>、<code>W\_xh</code>、<code>H</code>和<code>W\_hh</code>，它们的形状分别为（3，1）、（1，4）、（3，2）和（2，4）。将<code>X</code>与<code>W\_xh</code>、<code>H</code>与<code>W\_hh</code>分别相乘，再把两个相乘的结果相加，得到形状为（3，4）的矩阵。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> nd, autograd</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">from</span> mxnet.gluon <span class="keyword">import</span> loss <span class="keyword">as</span> gloss</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> math</span><br></pre></td></tr></table></figure>
<h2 id="读取数据集"><a href="#读取数据集" class="headerlink" title="读取数据集"></a>读取数据集</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> zipfile.ZipFile(<span class="string">"jaychou_lyrics.txt.zip"</span>) <span class="keyword">as</span> zin:</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> zin.namelist():</span><br><span class="line">        <span class="keyword">with</span> zin.open(file) <span class="keyword">as</span> f:</span><br><span class="line">            corpus_chars = f.read().decode(<span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">corpus_chars = corpus_chars.replace(<span class="string">'\n'</span>,<span class="string">' '</span>).replace(<span class="string">'\r'</span>,<span class="string">' '</span>)</span><br><span class="line">corpus_chars = corpus_chars[:<span class="number">10000</span>]</span><br><span class="line">corpus_chars[:<span class="number">40</span>]</span><br></pre></td></tr></table></figure>
<pre><code>&#39;想要有直升机 想要和你飞到宇宙去 想要和你融化在一起 融化在宇宙里 我每天每天每&#39;
</code></pre><h2 id="建立字符索引"><a href="#建立字符索引" class="headerlink" title="建立字符索引"></a>建立字符索引</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">index_to_char = list(set(corpus_chars))</span><br><span class="line">vocab_size = len(index_to_char)</span><br><span class="line">char_to_index = &#123;char:i <span class="keyword">for</span> i,char <span class="keyword">in</span> enumerate(index_to_char)&#125;</span><br><span class="line">vocab_size</span><br></pre></td></tr></table></figure>
<pre><code>1027
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">indices_corpus = [char_to_index[char] <span class="keyword">for</span> char <span class="keyword">in</span> corpus_chars]</span><br><span class="line">sample = indices_corpus[:<span class="number">20</span>]</span><br><span class="line">print(<span class="string">"chars: &#123;&#125;"</span>.format(<span class="string">""</span>.join(index_to_char[idx] <span class="keyword">for</span> idx <span class="keyword">in</span> sample)))</span><br><span class="line">print(<span class="string">"index: &#123;&#125;"</span>.format(sample))</span><br></pre></td></tr></table></figure>
<pre><code>chars: 想要有直升机 想要和你飞到宇宙去 想要和
index: [61, 344, 208, 730, 798, 864, 723, 61, 344, 900, 763, 490, 826, 188, 217, 762, 723, 61, 344, 900]
</code></pre><h2 id="时序数据的采样"><a href="#时序数据的采样" class="headerlink" title="时序数据的采样"></a>时序数据的采样</h2><ol>
<li>随机采样</li>
<li>相邻采样</li>
</ol>
<h3 id="随机采样"><a href="#随机采样" class="headerlink" title="随机采样"></a>随机采样</h3><ul>
<li>批量大小 batch_size指每个小批量的样本数，num_steps为每个样本所包含的时间步数。</li>
<li>在随机采样中，每个样本是原始序列上任意截 取的一段序列。相邻的两个随机小批量在原始序列上的位置不一定相毗邻。因此，我们无法用一 个小批量最终时间步的隐藏状态来初始化下一个小批量的隐藏状态。</li>
<li>在训练模型时，每次随机采样前都需要重新初始化隐藏状态。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_iter_random</span><span class="params">(indices_corpus, batch_size, num_steps, ctx=None)</span>:</span></span><br><span class="line">    num_example = (len(indices_corpus) - <span class="number">1</span>) // num_steps    <span class="comment">## 总共有多少个样本</span></span><br><span class="line">    epoch_size = num_example // batch_size  <span class="comment">## 每个 epoch 有多少个小批量</span></span><br><span class="line">    example_indices = list(range(num_example)) <span class="comment">## 样本的索引</span></span><br><span class="line">    random.shuffle(example_indices)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_data</span><span class="params">(pos)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> indices_corpus[pos : pos + num_steps]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(epoch_size):</span><br><span class="line">        <span class="comment"># 每次生成 batch_size 个随机样本</span></span><br><span class="line">        batch_start = i * batch_size</span><br><span class="line">        batch_indices = example_indices[batch_start:batch_start + batch_size]  <span class="comment">## 小批量的样本索引</span></span><br><span class="line">        X = [_data( j * num_steps ) <span class="keyword">for</span> j <span class="keyword">in</span> batch_indices]</span><br><span class="line">        Y = [_data( j * num_steps + <span class="number">1</span>) <span class="keyword">for</span> j <span class="keyword">in</span> batch_indices]</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">yield</span> nd.array(X, ctx), nd.array(Y, ctx)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_seq = list(range(<span class="number">30</span>))</span><br><span class="line"><span class="keyword">for</span> X, Y <span class="keyword">in</span> data_iter_random(my_seq, batch_size=<span class="number">2</span>, num_steps=<span class="number">6</span>):</span><br><span class="line">    print(<span class="string">'X: '</span>, X, <span class="string">'\nY:'</span>, Y, <span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure>
<pre><code>X:  
[[ 0.  1.  2.  3.  4.  5.]
 [12. 13. 14. 15. 16. 17.]]
&lt;NDArray 2x6 @cpu(0)&gt; 
Y: 
[[ 1.  2.  3.  4.  5.  6.]
 [13. 14. 15. 16. 17. 18.]]
&lt;NDArray 2x6 @cpu(0)&gt; 

X:  
[[ 6.  7.  8.  9. 10. 11.]
 [18. 19. 20. 21. 22. 23.]]
&lt;NDArray 2x6 @cpu(0)&gt; 
Y: 
[[ 7.  8.  9. 10. 11. 12.]
 [19. 20. 21. 22. 23. 24.]]
&lt;NDArray 2x6 @cpu(0)&gt; 
</code></pre><h3 id="相邻采样"><a href="#相邻采样" class="headerlink" title="相邻采样"></a>相邻采样</h3><p>除了对原始序列做随机采样之外，我们还可以令相邻的两个随机小批量在原始序列上的位置相毗邻。此时，我们就可以用一个小批量最终时间步的隐藏状态来初始化下一个小批量的隐藏状态， 从而使下一个小批量的输出也取决于当前小批量的输入，并如此循环下去。这对实现循环神经网络造成了两方面影响。一方面，在训练模型时，我们只需在每一个迭代周期开始时初始化隐藏状态。另一方面，当多个相邻小批量通过传递隐藏状态串联起来时，模型参数的梯度计算将依赖所有串联起来的小批量序列。同一迭代周期中，随着迭代次数的增加，梯度的计算开销会越来越大。 为了使模型参数的梯度计算只依赖一次迭代读取的小批量序列，我们可以在每次读取小批量前将隐藏状态从计算图分离出来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_iter_consecutive</span><span class="params">(corpus_indices, batch_size, num_steps, ctx=None)</span>:</span></span><br><span class="line">    corpus_indices = nd.array(corpus_indices)</span><br><span class="line">    data_len = len(corpus_indices)</span><br><span class="line">    batch_len = data_len // batch_size  </span><br><span class="line">    </span><br><span class="line">    indices = corpus_indices[<span class="number">0</span>: batch_size*batch_len].reshape((</span><br><span class="line">batch_size, batch_len))</span><br><span class="line">    </span><br><span class="line">    epoch_size = (batch_len - <span class="number">1</span>) // num_steps</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(epoch_size):</span><br><span class="line">        i = i * num_steps</span><br><span class="line">        X = indices[:, i: i + num_steps]</span><br><span class="line">        Y = indices[:, i + <span class="number">1</span>: i + num_steps + <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">yield</span> X, Y</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> X, Y <span class="keyword">in</span> data_iter_consecutive(my_seq, batch_size=<span class="number">2</span>, num_steps=<span class="number">6</span>): </span><br><span class="line">    print(<span class="string">'X: '</span>, X, <span class="string">'\nY:'</span>, Y, <span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure>
<pre><code>X:  
[[ 0.  1.  2.  3.  4.  5.]
 [15. 16. 17. 18. 19. 20.]]
&lt;NDArray 2x6 @cpu(0)&gt; 
Y: 
[[ 1.  2.  3.  4.  5.  6.]
 [16. 17. 18. 19. 20. 21.]]
&lt;NDArray 2x6 @cpu(0)&gt; 

X:  
[[ 6.  7.  8.  9. 10. 11.]
 [21. 22. 23. 24. 25. 26.]]
&lt;NDArray 2x6 @cpu(0)&gt; 
Y: 
[[ 7.  8.  9. 10. 11. 12.]
 [22. 23. 24. 25. 26. 27.]]
&lt;NDArray 2x6 @cpu(0)&gt; 
</code></pre><h2 id="循环神经网络的从零开始实现"><a href="#循环神经网络的从零开始实现" class="headerlink" title="循环神经网络的从零开始实现"></a>循环神经网络的从零开始实现</h2><h3 id="One-hot-encoding"><a href="#One-hot-encoding" class="headerlink" title="One hot encoding"></a>One hot encoding</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_onehot</span><span class="params">(X,size)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [nd.one_hot(x,size) <span class="keyword">for</span> x <span class="keyword">in</span> X.T]</span><br><span class="line">X = nd.arange(<span class="number">10</span>).reshape((<span class="number">2</span>, <span class="number">5</span>))</span><br><span class="line">inputs = to_onehot(X, vocab_size)</span><br><span class="line">len(inputs), inputs[<span class="number">0</span>].shape  <span class="comment"># time_step = 5，batch_size = 2, features = 2582</span></span><br></pre></td></tr></table></figure>
<pre><code>(5, (2, 1027))
</code></pre><h3 id="初始化模型参数"><a href="#初始化模型参数" class="headerlink" title="初始化模型参数"></a>初始化模型参数</h3><ul>
<li>num_hiddens 是hidden cell的差参数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num_inputs, num_hiddens, num_outputs = vocab_size, <span class="number">256</span>, vocab_size</span><br><span class="line">ctx = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_params</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_one</span><span class="params">(shape)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> nd.random.normal(scale=<span class="number">0.01</span>, shape=shape, ctx=ctx)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 隐藏层参数</span></span><br><span class="line">    W_xh = _one((num_inputs, num_hiddens))</span><br><span class="line">    W_hh = _one((num_hiddens, num_hiddens))</span><br><span class="line">    b_h = nd.zeros(num_hiddens, ctx=ctx)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 输出层参数</span></span><br><span class="line">    W_hq = _one((num_hiddens, num_outputs))</span><br><span class="line">    b_q = nd.zeros(num_outputs, ctx=ctx)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 附上梯度</span></span><br><span class="line">    params = [W_xh, W_hh, b_h, W_hq, b_q]</span><br><span class="line">    <span class="keyword">for</span> param <span class="keyword">in</span> params:</span><br><span class="line">        param.attach_grad()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> params</span><br></pre></td></tr></table></figure>
<h3 id="定义模型"><a href="#定义模型" class="headerlink" title="定义模型"></a>定义模型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_rnn_state</span><span class="params">(batch_size, num_hiddens, ctx)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (nd.zeros(shape=(batch_size, num_hiddens), ctx=ctx), )</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rnn</span><span class="params">(inputs, state, params)</span>:</span></span><br><span class="line">    W_xh, W_hh, b_h, W_hq, b_q = params</span><br><span class="line">    H, = state</span><br><span class="line">    outputs = []</span><br><span class="line">    <span class="keyword">for</span> X <span class="keyword">in</span> inputs:</span><br><span class="line">        H = nd.tanh(nd.dot(X, W_xh) + nd.dot(H, W_hh) + b_h)</span><br><span class="line">        Y = nd.dot(H, W_hq) + b_q</span><br><span class="line">        outputs.append(Y)</span><br><span class="line">    <span class="keyword">return</span> outputs, (H,)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">state = init_rnn_state(X.shape[<span class="number">0</span>], num_hiddens, ctx = <span class="keyword">None</span>)</span><br><span class="line">inputs = to_onehot(X, vocab_size)</span><br><span class="line">params = get_params()</span><br><span class="line">outputs, state_new = rnn(inputs, state, params)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">len(outputs), outputs[<span class="number">0</span>].shape, state_new[<span class="number">0</span>].shape</span><br></pre></td></tr></table></figure>
<pre><code>(5, (2, 1027), (2, 256))
</code></pre><h2 id="定义预测函数"><a href="#定义预测函数" class="headerlink" title="定义预测函数"></a>定义预测函数</h2><p>以下函数基于前缀 prefix(含有数个字符的字符串)来预测接下来的 num_chars个字符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict_rnn</span><span class="params">(prefix, num_chars, rnn, params, init_rnn_state,</span></span></span><br><span class="line"><span class="function"><span class="params">                        num_hiddens, vocab_size, ctx, idx_to_char, char_to_idx)</span>:</span></span><br><span class="line">    state = init_rnn_state(<span class="number">1</span>, num_hiddens, ctx)</span><br><span class="line">    output = [char_to_idx[prefix[<span class="number">0</span>]]]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> range(num_chars + len(prefix) - <span class="number">1</span>):</span><br><span class="line">        <span class="comment"># 将上一时间步的输出作为当前时间步的输入。</span></span><br><span class="line">        X = to_onehot(nd.array([output[<span class="number">-1</span>]], ctx=ctx), vocab_size)</span><br><span class="line">        (Y, state) = rnn(X, state, params)</span><br><span class="line">        <span class="keyword">if</span> t &lt; len(prefix) - <span class="number">1</span>:</span><br><span class="line">            output.append(char_to_idx[prefix[t + <span class="number">1</span>]])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            output.append(int(Y[<span class="number">0</span>].argmax(axis=<span class="number">1</span>).asscalar()))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join([idx_to_char[i] <span class="keyword">for</span> i <span class="keyword">in</span> output])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">predict_rnn(<span class="string">'分开'</span>, <span class="number">10</span>, rnn, params, init_rnn_state, num_hiddens, vocab_size, ctx, index_to_char, char_to_index)</span><br></pre></td></tr></table></figure>
<pre><code>&#39;分开微寄载术苏沟及消等双&#39;
</code></pre><h2 id="梯度剪裁"><a href="#梯度剪裁" class="headerlink" title="梯度剪裁"></a>梯度剪裁</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">grad_clipping</span><span class="params">(params, theta, ctx = None)</span>:</span></span><br><span class="line">    norm = nd.array([<span class="number">0.0</span>], ctx) </span><br><span class="line">    <span class="keyword">for</span> param <span class="keyword">in</span> params:</span><br><span class="line">        norm += (param.grad ** <span class="number">2</span>).sum() </span><br><span class="line">    norm = norm.sqrt().asscalar()</span><br><span class="line">    <span class="keyword">if</span> norm &gt; theta:</span><br><span class="line">        <span class="keyword">for</span> param <span class="keyword">in</span> params: </span><br><span class="line">            param.grad[:] *= theta / norm</span><br></pre></td></tr></table></figure>
<h2 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sgd</span><span class="params">(params, lr, batch_size)</span>:</span> <span class="comment"># 本函数已保存在 gluonbook 包中方便以后使用。 </span></span><br><span class="line">    <span class="keyword">for</span> param <span class="keyword">in</span> params:</span><br><span class="line">        param[:] = param - lr * param.grad / batch_size</span><br></pre></td></tr></table></figure>
<h2 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_and_predict_rnn</span><span class="params">(rnn, get_params, init_rnn_state, num_hiddens,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   vocab_size, corpus_indices, idx_to_char,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   char_to_idx, is_random_iter, num_epochs, num_steps,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   lr, clipping_theta, batch_size, pred_period,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   pred_len, prefixes, ctx = None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> is_random_iter:</span><br><span class="line">        data_iter_fn = data_iter_random</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        data_iter_fn = data_iter_consecutive</span><br><span class="line">    </span><br><span class="line">    params = get_params()</span><br><span class="line">    loss = gloss.SoftmaxCrossEntropyLoss()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(num_epochs):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_random_iter: <span class="comment"># 如使用相邻采样，在 epoch 开始时初始化隐藏状态。</span></span><br><span class="line">            state = init_rnn_state(batch_size, num_hiddens, ctx)</span><br><span class="line">        </span><br><span class="line">        loss_sum, start = <span class="number">0.0</span>, time.time()</span><br><span class="line">        data_iter = data_iter_fn(indices_corpus, batch_size, num_steps, ctx)</span><br><span class="line">        <span class="keyword">for</span> t, (X, Y) <span class="keyword">in</span> enumerate(data_iter):</span><br><span class="line">            <span class="keyword">if</span> is_random_iter: <span class="comment"># 如使用随机采样，在每个小批量更新前初始化隐藏状态。 </span></span><br><span class="line">                state = init_rnn_state(batch_size, num_hiddens, ctx)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 否则需要使用 detach 函数从计算图分离隐藏状态</span></span><br><span class="line">                <span class="keyword">for</span> s <span class="keyword">in</span> state: </span><br><span class="line">                    s.detach()</span><br><span class="line">        </span><br><span class="line">            <span class="keyword">with</span> autograd.record():</span><br><span class="line">                inputs = to_onehot(X, vocab_size)</span><br><span class="line">                <span class="comment"># outputs 有 num_steps 个形状为(batch_size，vocab_size)的矩阵。 </span></span><br><span class="line">                (outputs, state) = rnn(inputs, state, params)</span><br><span class="line">                <span class="comment"># 拼接之后形状为(num_steps * batch_size，vocab_size)。</span></span><br><span class="line">                outputs = nd.concat(*outputs, dim=<span class="number">0</span>)</span><br><span class="line">                <span class="comment"># Y 的形状是(batch_size，num_steps)，转置后再变成⻓度为</span></span><br><span class="line">                <span class="comment"># batch * num_steps 的向量，这样跟输出的行一一对应。</span></span><br><span class="line">                y = Y.T.reshape((<span class="number">-1</span>,))</span><br><span class="line">                <span class="comment"># 使用交叉熵损失计算平均分类误差。</span></span><br><span class="line">                l = loss(outputs, y).mean()</span><br><span class="line">            l.backward()</span><br><span class="line">            grad_clipping(params, clipping_theta, ctx) <span class="comment"># 裁剪梯度。 gb.sgd(params, lr, 1) # 因为误差已经取过均值，梯度不用再做平均。 loss_sum += l.asscalar()</span></span><br><span class="line">            sgd(params, lr, <span class="number">1</span>) <span class="comment"># 因为误差已经取过均值，梯度不用再做平均。 </span></span><br><span class="line">            loss_sum += l.asscalar()</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">if</span> (epoch + <span class="number">1</span>) % pred_period == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">'epoch %d, perplexity %f, time %.2f sec'</span> % (epoch + <span class="number">1</span>, math.exp(loss_sum / (t + <span class="number">1</span>)), time.time() - start)) </span><br><span class="line">            <span class="keyword">for</span> prefix <span class="keyword">in</span> prefixes:</span><br><span class="line">                print(<span class="string">' -'</span>, predict_rnn(prefix, pred_len, rnn, params, init_rnn_state, num_hiddens, vocab_size, ctx, idx_to_char, char_to_idx))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num_epochs, num_steps, batch_size, lr, clipping_theta = <span class="number">200</span>, <span class="number">35</span>, <span class="number">32</span>, <span class="number">1e2</span>, <span class="number">1e-2</span> </span><br><span class="line">pred_period, pred_len, prefixes = <span class="number">50</span>, <span class="number">50</span>, [<span class="string">'分开'</span>, <span class="string">'不分开'</span>]</span><br><span class="line"></span><br><span class="line">train_and_predict_rnn(rnn, get_params, init_rnn_state, num_hiddens,</span><br><span class="line">                                   vocab_size, indices_corpus, index_to_char,</span><br><span class="line">                                   char_to_index, <span class="keyword">False</span>, num_epochs, num_steps,</span><br><span class="line">                                   lr, clipping_theta, batch_size, pred_period,</span><br><span class="line">                                   pred_len, prefixes, ctx = <span class="keyword">None</span>)</span><br></pre></td></tr></table></figure>
<pre><code>epoch 50, perplexity 64.202943, time 1.44 sec
 - 分开 我想你这你 我不的你 我有你这 我有了双 我有一空 我有一空 我有一空 我有一空 我有一空 我有一
 - 不分开 我想你这你 我不的你 我有你这 我有一直 我有一空 我有一空 我有一空 我有一空 我有一空 我有一
epoch 100, perplexity 7.041272, time 1.50 sec
 - 分开 我想要这样牵着你的手 它在灌木丛旁折的 像入再里我想要 却你现没有经怎么  说有么 快我的没像错怎
 - 不分开 我不要再可牵我 你一 我有你的话爱 我想 这对了义了吧 说通 你想很久了吧 说真 你想很久了吧 说
epoch 150, perplexity 2.039475, time 1.48 sec
 - 分开 我想要再想坦 有你你被默默 一亮都掉 我跟得好节奏 后知后觉 又过了一个秋 后知后觉 快使用双截棍
 - 不分开觉 你已经离开我 不知不觉 我跟了这节奏 后知后觉 又过了一个秋 后知后觉 我该好好生活 我该好好生
epoch 200, perplexity 1.279734, time 1.47 sec
 - 分开 问候的风我 谁 在么胸 三经空 停么我遇着你说 满为了动 在来马步 硬底的功 全面裂纵 恨一作痛 
 - 不分开觉 你已经离开我 不知不觉 我跟了这节奏 后知后觉 又知了一个秋 后知后觉 我该好好生活 我该好好生
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Project</tag>
        <tag>Sequence Models</tag>
      </tags>
  </entry>
  <entry>
    <title>Structuring Machine Learning Projects</title>
    <url>/Structuring-Machine-Learning-Projects/2019/03/29/</url>
    <content><![CDATA[<p><strong>Reference from lecture slides of Andrew Ng and github repo from <a href="https://github.com/mbadry1/DeepLearning.ai-Summary" target="_blank" rel="noopener">DeepLearning.ai-Summary</a></strong></p>
<h2 id="Table-of-contents"><a href="#Table-of-contents" class="headerlink" title="Table of contents"></a>Table of contents</h2><ul>
<li><a href="#structuring-machine-learning-projects">Structuring Machine Learning Projects</a><ul>
<li><a href="#table-of-contents">Table of contents</a></li>
<li><a href="#course-summary">Course summary</a></li>
<li><a href="#ml-strategy-1">ML Strategy 1</a><ul>
<li><a href="#why-ml-strategy">Why ML Strategy</a></li>
<li><a href="#orthogonalization">Orthogonalization</a></li>
<li><a href="#single-number-evaluation-metric">Single number evaluation metric</a></li>
<li><a href="#satisfying-and-optimizing-metric">Satisfying and Optimizing metric</a></li>
<li><a href="#traindevtest-distributions">Train/Dev/Test distributions</a></li>
<li><a href="#size-of-the-dev-and-test-sets">Size of the Dev and Test sets</a></li>
<li><a href="#when-to-change-devtest-sets-and-metrics">When to change Dev/Test sets and metrics</a></li>
<li><a href="#why-human-level-performance">Why human-level performance?</a></li>
<li><a href="#avoidable-bias">Avoidable bias</a></li>
<li><a href="#understanding-human-level-performance">Understanding human-level performance</a></li>
<li><a href="#surpassing-human-level-performance">Surpassing human-level performance</a></li>
<li><a href="#improving-your-model-performance">Improving your model performance</a></li>
</ul>
</li>
<li><a href="#ml-strategy-2">ML Strategy 2</a><ul>
<li><a href="#carrying-out-error-analysis">Carrying out error analysis</a></li>
<li><a href="#cleaning-up-incorrectly-labeled-data">Cleaning up incorrectly labeled data</a></li>
<li><a href="#build-your-first-system-quickly-then-iterate">Build your first system quickly, then iterate</a></li>
<li><a href="#training-and-testing-on-different-distributions">Training and testing on different distributions</a></li>
<li><a href="#bias-and-variance-with-mismatched-data-distributions">Bias and Variance with mismatched data distributions</a></li>
<li><a href="#addressing-data-mismatch">Addressing data mismatch</a></li>
<li><a href="#transfer-learning">Transfer learning</a></li>
<li><a href="#multi-task-learning">Multi-task learning</a></li>
<li><a href="#what-is-end-to-end-deep-learning">What is end-to-end deep learning?</a></li>
<li><a href="#whether-to-use-end-to-end-deep-learning">Whether to use end-to-end deep learning</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Course-summary"><a href="#Course-summary" class="headerlink" title="Course summary"></a>Course summary</h2><p>Here are the course summary as its given on the course <a href="https://www.coursera.org/learn/machine-learning-projects" target="_blank" rel="noopener">link</a>:</p>
<blockquote>
<p>You will learn how to build a successful machine learning project. If you aspire to be a technical leader in AI, and know how to set direction for your team’s work, this course will show you how.</p>
<p>Much of this content has never been taught elsewhere, and is drawn from my experience building and shipping many deep learning products. This course also has two “flight simulators” that let you practice decision-making as a machine learning project leader. This provides “industry experience” that you might otherwise get only after years of ML work experience.</p>
<p>After 2 weeks, you will: </p>
<ul>
<li>Understand how to diagnose errors in a machine learning system, and </li>
<li>Be able to prioritize the most promising directions for reducing error</li>
<li>Understand complex ML settings, such as mismatched training/test sets, and comparing to and/or surpassing human-level performance</li>
<li>Know how to apply end-to-end learning, transfer learning, and multi-task learning</li>
</ul>
<p>I’ve seen teams waste months or years through not understanding the principles taught in this course. I hope this two week course will save you months of time.</p>
<p>This is a standalone course, and you can take this so long as you have basic machine learning knowledge. This is the third course in the Deep Learning Specialization.</p>
</blockquote>
<h2 id="ML-Strategy-1"><a href="#ML-Strategy-1" class="headerlink" title="ML Strategy 1"></a>ML Strategy 1</h2><h3 id="Why-ML-Strategy"><a href="#Why-ML-Strategy" class="headerlink" title="Why ML Strategy"></a>Why ML Strategy</h3><ul>
<li>You have a lot of ideas to improve the accuracy of your deep learning system:<ul>
<li>Collect more data.</li>
<li>Collect more diverse training set.</li>
<li>Train gradient decent longer.</li>
<li>Try bigger network.</li>
<li>Try smaller network.</li>
<li>Try dropout</li>
<li>Add L2 regularization</li>
<li>Try different optimization algorithm “ex. Adam”</li>
<li>Activation functions.</li>
</ul>
</li>
<li>This course will give you some strategies to help you analyze your problem to go in a direction that will get you a better results.</li>
</ul>
<h3 id="Orthogonalization"><a href="#Orthogonalization" class="headerlink" title="Orthogonalization"></a>Orthogonalization</h3><ul>
<li>Some deep learning developers knows exactly what hyperparameter to tune to achieve a specific task. This is called Orthogonalization.</li>
<li>In Orthogonalization you have some controls, but each control does a specific task and doesn’t effect other controls.</li>
<li>Chain of assumptions in machine learning:<ol>
<li>You’ll have to fit training set well on cost function. (Near human level performance if possible)<ul>
<li>If its not achieved you could try: bigger network - other optimization algorithm…</li>
</ul>
</li>
<li>Fit Dev set well on cost function.<ul>
<li>If its not achieved you could try: regularization - Bigger training set …</li>
</ul>
</li>
<li>Fit test set well on cost function.<ul>
<li>If its not achieved you could try: Bigger Dev. set …</li>
</ul>
</li>
<li>Performs well in real world.<ul>
<li>If its not achieved you could try: change dev. set - change cost function..</li>
</ul>
</li>
</ol>
</li>
</ul>
<h3 id="Single-number-evaluation-metric"><a href="#Single-number-evaluation-metric" class="headerlink" title="Single number evaluation metric"></a>Single number evaluation metric</h3><ul>
<li>Its better and faster to set a Single number evaluation metric to your project before you start it.</li>
<li><p>Difference between precision and recall (In cat classification example):</p>
<ul>
<li><p>Suppose we run the classifier on 10 images which are 5 cats and 5 non-cats. The classifier identifies that there are 4 cats. but he identified 1 wrong cat.</p>
</li>
<li><p>Confusion matrix:</p>
<ul>
<li>|             | Cat  | Non-Cat |<br>| —————- | —— | ———- |<br>| <strong>Cat</strong>     | 3    | 2       |<br>| <strong>Non-Cat</strong> | 1    | 4       |</li>
</ul>
</li>
<li><p><strong>Precision</strong>: percentage of true cats in the recognized result. per = 3/4</p>
</li>
<li><p><strong>Recall</strong>: percentage of true recognition in the whole dataset. rec = 3/5</p>
</li>
<li><p><strong>Accuracy</strong>= 3/10</p>
</li>
</ul>
</li>
<li><p>Using a precision/recall for evaluation is good in a lot of cases they doesn’t tell you which is better. Ex:</p>
<p>| Classifier | Precision | Recall |<br>| ————— | ————- | ——— |<br>| A          | 95%       | 90%    |<br>| B          | 98%       | 85%    |</p>
</li>
<li><p>A better thing is to merge precision and Recall together. There a something called <code>F1</code> score</p>
<ul>
<li>You can think of <code>F1</code> score as average of Precision and Recall<br><code>F1 = 2/ ((1/Per) + (1/Rec))</code></li>
</ul>
</li>
<li>IF you have a lot of value as your metric  you should take the average.</li>
</ul>
<h3 id="Satisfying-and-Optimizing-metric"><a href="#Satisfying-and-Optimizing-metric" class="headerlink" title="Satisfying and Optimizing metric"></a>Satisfying and Optimizing metric</h3><ul>
<li><p>Its hard sometimes to get a single number evaluation metric. Ex:</p>
<p>| Classifier | F1   | Running time |<br>| ————— | —— | —————— |<br>| A          | 90%  | 80 ms        |<br>| B          | 92%  | 95 ms        |<br>| C          | 92%  | 1,500 ms     |</p>
</li>
<li><p>In this case we can solve that by Satisfying and Optimizing metric. Ex:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Maximize      F1                          # Optimizing metric</span><br><span class="line">subject to        Running time &lt; 100ms        # Satisficing metric</span><br></pre></td></tr></table></figure>
</li>
<li><p>So as a general rule:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Maximize      1                   #Optimizing metric (One optimizing metric)</span><br><span class="line">subject to        N-1                 #Satisficing metric (N-1 Satisficing metric)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Train-Dev-Test-distributions"><a href="#Train-Dev-Test-distributions" class="headerlink" title="Train/Dev/Test distributions"></a>Train/Dev/Test distributions</h3><ul>
<li>Dev/Test set has to come from the same distribution.</li>
<li>Choose Dev/Test sets to reflect data you expect to get in the future and consider important to do well on.</li>
</ul>
<h3 id="Size-of-the-Dev-and-Test-sets"><a href="#Size-of-the-Dev-and-Test-sets" class="headerlink" title="Size of the Dev and Test sets"></a>Size of the Dev and Test sets</h3><ul>
<li>Old way of splitting was 70% training, 30% test.</li>
<li>Old way of splitting was 60% training, 20% Dev, 20% test.</li>
<li>The old way was valid for ranges 1000 —&gt; 100000</li>
<li>In the modern deep learning you have if you have a million or more<ul>
<li>98% Training, 1% Dev, 1% Test</li>
</ul>
</li>
</ul>
<h3 id="When-to-change-Dev-Test-sets-and-metrics"><a href="#When-to-change-Dev-Test-sets-and-metrics" class="headerlink" title="When to change Dev/Test sets and metrics"></a>When to change Dev/Test sets and metrics</h3><ul>
<li><p>Lets take an example. In a cat classification example we have these metric results:</p>
<p>| Metric      | Classification error                     |<br>| —————- | ———————————————————— |<br>| Algorithm A | 3% error (But a lot of porn images is treated as cat images here) |<br>| Algorithm B | 5% error                                 |</p>
<ul>
<li><p>In the last example if we choose the best algorithm by metric it would be “A”, but if the users decide it will be “B”</p>
</li>
<li><p>Thus here we want to change out metric.</p>
</li>
<li><code>OldMetric = (1/m) * sum(y_pred[i] != y[i] ,m)</code><ul>
<li>Where m is the number of Dev set items.</li>
</ul>
</li>
<li><code>NewMetric = (1/sum(w[i])) * sum( w[i] * (y_pred[i] != y[i]) ,m)</code><ul>
<li>where:<ul>
<li><code>w[i] = 1                   if x[i] is not porn</code></li>
<li><code>w[i] = 10                 if x[i] is porn</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Conclusion: If doing well on your metric + Dev/test set doesn’t correspond to doing well in your application, change your metric and/or Dev/test set.</p>
</li>
</ul>
<h3 id="Why-human-level-performance"><a href="#Why-human-level-performance" class="headerlink" title="Why human-level performance?"></a>Why human-level performance?</h3><ul>
<li>We compare to human-level performance because a lot of deep learning algorithms in the recent days are a lot better than human level.</li>
<li>After an algorithm reaches the human level performance it doesn’t get better much.<ul>
<li><img src="Images/01-_Why_human-level_performance.png" alt="01- Why human-level performance"></li>
</ul>
</li>
<li>You won’t surpass an error that’s called “Bayes optimal error”</li>
<li>There aren’t much error range between human-level error and Bayes optimal error.</li>
<li>Humans are quite good at lot of tasks. So as long as Machine learning is worse than humans, you can:<ul>
<li>Get labeled data from humans.</li>
<li>Gain insight from manual error analysis. (Why did a person get it right?)</li>
<li>Better analysis of bias/variance</li>
</ul>
</li>
</ul>
<h3 id="Avoidable-bias"><a href="#Avoidable-bias" class="headerlink" title="Avoidable bias"></a>Avoidable bias</h3><ul>
<li><p>Suppose that the cat classification algorithm gives these percentages:</p>
<p>| Humans             | 1%   | 7.5% |<br>| ————————— | —— | —— |<br>| <strong>Training error</strong> | 8%   | 8%   |<br>| <strong>Dev Error</strong>      | 10%  | 10%  |</p>
<ul>
<li>In the left example, if the human level error is 1% then we have to focus on the <strong>bias</strong>.</li>
<li>In the right example, if the human level error is 7.5% then we have to focus on the <strong>variance</strong>.</li>
<li>In the latest examples we have used the human level as a proxy form Bayes optimal error because humans vision is too good.</li>
</ul>
</li>
</ul>
<h3 id="Understanding-human-level-performance"><a href="#Understanding-human-level-performance" class="headerlink" title="Understanding human-level performance"></a>Understanding human-level performance</h3><ul>
<li>When choosing human-level performance, it has to be choose in the terms of what you want to achieve with the system.</li>
<li>You might have multiple human-level performance based on the human experience. Then the system you are trying to build will choose from these human levels as set it as proxy for Bayes error.</li>
<li>Improving deep learning algorithms is harder once you reach a human level performance.</li>
<li>Summary of bias/variance with human-level performance:<ol>
<li>human level error (Proxy for Bayes error)<ul>
<li>Calculate <code>training error - human level error</code></li>
<li>If difference is bigger then its <strong>Avoidable bias</strong> then you should use a strategy for <strong>bias</strong>.</li>
</ul>
</li>
<li>Training error<ul>
<li>Calculate <code>dev error - training error</code></li>
<li>If difference is bigger then its <strong>Variance</strong> then you should use a strategy for <strong>Variance</strong>.</li>
</ul>
</li>
<li>Dev error</li>
</ol>
</li>
<li>In a lot of problems Bayes error isn’t zero that’s why we need human level performance comparing.</li>
</ul>
<h3 id="Surpassing-human-level-performance"><a href="#Surpassing-human-level-performance" class="headerlink" title="Surpassing human-level performance"></a>Surpassing human-level performance</h3><ul>
<li>In some problems, deep learning has surpassed human level performance. Like:<ul>
<li>Online advertising.</li>
<li>Product recommendation.</li>
<li>Loan approval.</li>
</ul>
</li>
<li>The last examples are non natural perception task. Humans are far better in natural perception task like computer vision and speech recognition.</li>
<li>Its harder for machines to surpass human level in natural perception task.</li>
</ul>
<h3 id="Improving-your-model-performance"><a href="#Improving-your-model-performance" class="headerlink" title="Improving your model performance"></a>Improving your model performance</h3><ul>
<li>To improve your deep learning supervised system follow these guideline:<ol>
<li>Look at the difference between human level error and the training error.  <strong><em>Avoidable bias</em></strong></li>
<li>Look at the difference between the training error and the Test/Dev set. <strong><em>Variance</em></strong></li>
<li>If number 1 difference is large you have these options:<ul>
<li>Train bigger model.</li>
<li>Train longer/better optimization algorithm (Adam).</li>
<li>NN architecture/hyperparameters search.</li>
<li>Bigger training data.</li>
</ul>
</li>
<li>If number 2 difference is large you have these options:<ul>
<li>Get more training data.</li>
<li>Regularization.</li>
<li>NN architecture/hyperparameters search.</li>
</ul>
</li>
</ol>
</li>
</ul>
<h2 id="ML-Strategy-2"><a href="#ML-Strategy-2" class="headerlink" title="ML Strategy 2"></a>ML Strategy 2</h2><h3 id="Carrying-out-error-analysis"><a href="#Carrying-out-error-analysis" class="headerlink" title="Carrying out error analysis"></a>Carrying out error analysis</h3><ul>
<li>Error analysis is to analysis why the accuracy of the system is like that. Example:<ul>
<li>In the cat classification example, if you have 10% error on your Dev set and you want to solve the error.</li>
<li>If you discovered that some of the mislabeled data are dog pictures that looks like cats, should you try to make your cat classifier do better on dogs? this could take some weeks.</li>
<li>Error analysis approach (To take a decision):<ul>
<li>Get 100 mislabeled Dev set examples at random.</li>
<li>Count up how many are dogs.</li>
<li>if there are 5/100 is dogs then it doesn’t count to train your classifier to dogs.</li>
<li>if there are 50/100 is dogs then you should work in that.</li>
</ul>
</li>
</ul>
</li>
<li>Based on the last example, error analysis helps you to analyze the error before taking an action that could take lot of time with no need.</li>
<li><p>You can evaluate multiple ideas -Error analysis ideas- in parallel and choose the best idea. create an excel shape to do that and decide Ex:</p>
<p>| Image        | Dog    | Great Cats | blurry  | Comments |<br>| —————— | ——— | ————— | ———- | ———— |<br>| 1            | ✓      |            |         |          |<br>| 2            | ✓      |            | ✓       |          |<br>| 3            |        |            |         |          |<br>| 4            |        | ✓          |         |          |<br>| ….         |        |            |         |          |<br>| <strong>% totals</strong> | <strong>8%</strong> | <strong>43%</strong>    | <strong>61%</strong> |          |</p>
</li>
<li><p>In the last example you will decide to work on great cats or blurry images to improve your performance.</p>
</li>
</ul>
<h3 id="Cleaning-up-incorrectly-labeled-data"><a href="#Cleaning-up-incorrectly-labeled-data" class="headerlink" title="Cleaning up incorrectly labeled data"></a>Cleaning up incorrectly labeled data</h3><ul>
<li>Labeled data is incorrect when y of x is incorrect.</li>
<li>If the incorrect labeled data is in the training set, Deep learning are quite robust to random error (Not systematic error). But its OK to go and fix these labels if you can.</li>
<li><p>If you want to check for mislabeled data in Dev/test set, you should also try error analysis with mislabeled column. Ex:</p>
<p>| Image        | Dog    | Great Cats | blurry  | Mislabeled | Comments |<br>| —————— | ——— | ————— | ———- | ————— | ———— |<br>| 1            | ✓      |            |         |            |          |<br>| 2            | ✓      |            | ✓       |            |          |<br>| 3            |        |            |         |            |          |<br>| 4            |        | ✓          |         |            |          |<br>| ….         |        |            |         |            |          |<br>| <strong>% totals</strong> | <strong>8%</strong> | <strong>43%</strong>    | <strong>61%</strong> | <strong>6%</strong>     |          |</p>
<ul>
<li>Then:<ul>
<li>If Overall Dev set error:         10%<ul>
<li>Then Errors due incorrect data: 0.6%<ul>
<li>Then Errors due other causes:9.4%</li>
</ul>
</li>
</ul>
</li>
<li>Then you should focus on the 9.4% error rather than the incorrect data.</li>
</ul>
</li>
</ul>
</li>
<li>Consider these while correcting the Dev/test mislabeled:<ul>
<li>Apply same process to your Dev and test sets to make sure they continue to come from the same distribution.</li>
<li>Consider examining examples your algorithm got right as well as ones it got wrong. (Not always done if you reached a good accuracy)</li>
<li>Train and (Dev/Test) data may now come from slightly different distributions</li>
</ul>
</li>
</ul>
<h3 id="Build-your-first-system-quickly-then-iterate"><a href="#Build-your-first-system-quickly-then-iterate" class="headerlink" title="Build your first system quickly, then iterate"></a>Build your first system quickly, then iterate</h3><ul>
<li>The steps you take to make your deep learning project:<ul>
<li>Setup Dev/test set and metric</li>
<li>Build initial system quickly<ul>
<li>Using the training data.</li>
</ul>
</li>
<li>Use Bias/Variance analysis &amp; Error analysis to prioritize next steps.</li>
</ul>
</li>
</ul>
<h3 id="Training-and-testing-on-different-distributions"><a href="#Training-and-testing-on-different-distributions" class="headerlink" title="Training and testing on different distributions"></a>Training and testing on different distributions</h3><ul>
<li>A lot of teams are working with deep learning applications that has training sets that are different from the Dev/test sets due to the hanger of deep learning to data.</li>
<li>There are some strategies to follow up when training set distribution differs from Dev/test sets distribution.<ul>
<li>Option one (Not recommended): shuffle all the data together and extract randomly training and Dev/test sets.<ul>
<li>Advantages:   All the sets now are from the same distribution.</li>
<li>Disadvantages: The other distribution that was in the Dev/test sets will occur less in the new Dev/test sets and that might not what you want to achieve.</li>
</ul>
</li>
<li>Option two: Take some of the Dev/test set examples and put them with the training distribution.<ul>
<li>Advantages: The distribution you care about is your target now.</li>
<li>Disadvantage: the distributions are different. but you will get a better performance over a long time.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Bias-and-Variance-with-mismatched-data-distributions"><a href="#Bias-and-Variance-with-mismatched-data-distributions" class="headerlink" title="Bias and Variance with mismatched data distributions"></a>Bias and Variance with mismatched data distributions</h3><ul>
<li>Bias and Variance analysis changes when training and Dev/test set is from different distribution.</li>
<li>Example: Assume the cat classification example. Suppose you’ve worked in the example and reached this<ul>
<li>Human error:               0%</li>
<li>Training error:              1%</li>
<li>Dev error:                      10%</li>
</ul>
</li>
<li>In the last example you’ll think that this is a variance problem, but because the distributions aren’t the same you cant judge this.</li>
<li>Imagine if we created a new set called training-Dev set as a random subset of the training distribution. and we run error analysis and it came as follows:<ul>
<li>Human error:               0%</li>
<li>Training error:              1%</li>
<li>TrainingDev error:       8%</li>
<li>Dev error:                      10%</li>
</ul>
</li>
<li>Now you are sure this is a variance error.</li>
<li>Suppose you have a different situation:<ul>
<li>Human error:               0%</li>
<li>Training error:              1%</li>
<li>TrainingDev error:       1.5%</li>
<li>Dev error:                      10%</li>
</ul>
</li>
<li>In this case you have something called <em>Data mismatch</em> problem.</li>
<li>To conclude, first you’ll have a new set called training-Dev set which has the same distribution as training set. Then follow this:<ol>
<li>human level error (Proxy for Bayes error)<ul>
<li>Calculate <code>training error - human level error</code></li>
<li>If difference is bigger then its <strong>Avoidable bias</strong> then you should use a strategy for <strong>bias</strong>.</li>
</ul>
</li>
<li>Training error<ul>
<li>Calculate <code>Training-Dev error - training error</code></li>
<li>If difference is bigger then its <strong>Variance</strong> then you should use a strategy for <strong>Variance</strong>.</li>
</ul>
</li>
<li>Training-Dev error<ul>
<li>Calculate <code>dev error - training-dev error</code></li>
<li>If difference is bigger then its <strong>Data mismatch</strong> then you should use a strategy for <strong>Data mismatch</strong>.</li>
</ul>
</li>
<li>Dev error<ul>
<li>Calculate <code>test error - dev error</code></li>
<li>Is the degree of overfitting to Dev set</li>
</ul>
</li>
<li>Test error</li>
</ol>
</li>
<li>Unfortunately there aren’t much systematic ways to deal with Data mismatch but the next section will try to give us some insights.</li>
</ul>
<h3 id="Addressing-data-mismatch"><a href="#Addressing-data-mismatch" class="headerlink" title="Addressing data mismatch"></a>Addressing data mismatch</h3><ul>
<li>Carry out manual error analysis to try to understand difference between training and Dev/test sets.</li>
<li>Make training data more similar; or collect more data similar to Dev/test sets.<ul>
<li>There are something called <strong>Artificial data synthesis</strong> that can help you Make more training data.<ul>
<li>Combine some of your training data with something that can convert it to the Dev/test set distribution.<ul>
<li>Ex. Generate cars using 3D in a car classification example.</li>
</ul>
</li>
<li>Be careful with “Artificial data synthesis” because your NN might overfit these generated data.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Transfer-learning"><a href="#Transfer-learning" class="headerlink" title="Transfer learning"></a>Transfer learning</h3><ul>
<li>Apply the knowledge you took in a task and apply it in another task.</li>
<li>For example You have trained a cat classifier with a lot of data, you can use all the learning data or part of it to solve x-ray classification problem.</li>
<li>To do transfer learning, delete the weights of the last layer of the NN and keep all the other weights as a fixed weights. Initialize the new weights and feed the new data to the NN and learn the new weights. Thats if you have a small data set, but if you have enough data you can retrain all the weights again this is called <strong>fine tuning</strong>.</li>
<li>You can create a several new layers not just one layer to original NN.</li>
<li>When transfer learning make sense:<ul>
<li>When you have a lot of data for the problem you are transferring from and relatively less data for the problem your transferring to.</li>
<li>Task A and B has the same input X.   (Same type as input ex. image, audio)</li>
<li>Low level features from A could be helpful for learning B</li>
</ul>
</li>
</ul>
<h3 id="Multi-task-learning"><a href="#Multi-task-learning" class="headerlink" title="Multi-task learning"></a>Multi-task learning</h3><ul>
<li>One NN do some tasks in the same time, and tasks can help each others.</li>
<li>Example:<ul>
<li>You want to build an object recognition system that detects cars, stop signs, and traffic lights. (Image has a multiple labels.)</li>
<li>Then Y shape will be <code>(3,m)</code> because we have 3 classification and each one is a binary one.</li>
<li>Then <code>Loss = (1/m) sum(sum(L(Y_dash[i], Y[i]),3) ,m)</code></li>
</ul>
</li>
<li>In the last example you could have train 3 neural network to get the same results, but if you suspect that the earlier layers has the same features then this will be faster.</li>
<li><p>This will also work if y isn’t complete for some labels. For example:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Y = [1    ?   1   ..]</span><br><span class="line">    [0    0   1   ..]</span><br><span class="line">    [?    1   ?   ..]</span><br></pre></td></tr></table></figure>
<ul>
<li>And in this case it will do good with the missing data. but the loss function will be different:<ul>
<li><code>Loss = (1/m) sum(sum(L(Y_dash[i], Y[i]),for all i which Y[i] != ?) ,m)</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li>When Multi-task learning make sense:<ul>
<li>Training on a set of tasks that could benefit from having shared lower-level features.</li>
<li>Usually amount of data you have for each task is quite similar.</li>
<li>Can train a big enough network to do well on all the tasks.</li>
</ul>
</li>
<li>If you have a big enough NN, the performance of the Multi-task learning compared to splitting the tasks is better.</li>
<li>Today Transfer learning is used more than Multi-task learning.</li>
</ul>
<h3 id="What-is-end-to-end-deep-learning"><a href="#What-is-end-to-end-deep-learning" class="headerlink" title="What is end-to-end deep learning?"></a>What is end-to-end deep learning?</h3><ul>
<li>Some systems has multiple stages to implement. An end to end deep learning implements all these stages with a single NN.</li>
<li><p>Example:</p>
<ul>
<li><p>Suppose you have a speech recognition system:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Audio ---&gt; Features --&gt; Phonemes --&gt; Words --&gt; Transcript           # System</span><br><span class="line">Audio ---------------------------------------&gt; Transcript           # End to end</span><br></pre></td></tr></table></figure>
</li>
<li><p>End to end deep learning gives data more freedom, it might not use phonemes when training!</p>
</li>
</ul>
</li>
<li><p>To build and end to end deep learning system that works well, we need a big dataset. If you have a small dataset the ordinary implementation of each stage is just fine.</p>
</li>
<li><p>Another example:</p>
<ul>
<li><p>Suppose you want to build a face recognition system:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Image-&gt;Image adjustments-&gt;Face detection-&gt;Face recognition-&gt;Matching    # System.</span><br><span class="line">Image -----------------------------------&gt;Face recognition-&gt;Matching  # End to end</span><br><span class="line">Image-&gt;Image adjustments-&gt;Face detection-------------------&gt;Matching  # Best imp for now</span><br></pre></td></tr></table></figure>
</li>
<li><p>Best in practice now is the third approach.</p>
</li>
<li>In the third implementation its a two steps approach where part is manually implemented and the other is using deep learning.</li>
<li>Its working well because its harder to get a lot of pictures with people in front of the camera than getting faces of people and compare them.</li>
<li>In the third implementation the NN takes two faces as an input and outputs if the two faces are the same or not.</li>
</ul>
</li>
<li><p>Another example:</p>
<ul>
<li><p>Suppose you want to build a machine translation system:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">English --&gt; Text analysis --&gt; ......................... --&gt; Fresh       # System.</span><br><span class="line">English --------------------------------------------------&gt; Fresh       # End to end</span><br></pre></td></tr></table></figure>
</li>
<li><p>Here end to end deep leaning system works well because we have enough data to build it.</p>
</li>
</ul>
</li>
</ul>
<h3 id="Whether-to-use-end-to-end-deep-learning"><a href="#Whether-to-use-end-to-end-deep-learning" class="headerlink" title="Whether to use end-to-end deep learning"></a>Whether to use end-to-end deep learning</h3><ul>
<li>Here are some guidelines on Whether to use end-to-end deep learning.</li>
<li>Pros of end to end deep learning:<ul>
<li>Let the data speak.</li>
<li>Less hand designing of components needed.</li>
</ul>
</li>
<li>Cons of end to end deep learning:<ul>
<li>May need large amount of data.</li>
<li>Excludes potentially useful hand design components. (It helps more on small dataset)</li>
</ul>
</li>
<li>Applying end to end deep learning:<ul>
<li>Do you have sufficient data to learn a function of the <strong><em>complexity</em></strong> needed to map x to y?</li>
</ul>
</li>
</ul>
<p><br><br><br><br><br><br>These Notes were made by <a href="mailto:mma18@fayoum.edu.eg" target="_blank" rel="noopener">Mahmoud Badry</a> @2017</p>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Deep Learning</category>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Course Note</tag>
      </tags>
  </entry>
  <entry>
    <title>Improving Deep Neural Networks</title>
    <url>/Improving-Deep-Neural-Networks/2019/03/29/</url>
    <content><![CDATA[<p><strong>Reference from lecture slides of Andrew Ng and github repo from <a href="https://github.com/mbadry1/DeepLearning.ai-Summary" target="_blank" rel="noopener">DeepLearning.ai-Summary</a></strong></p>
<h2 id="Table-of-contents"><a href="#Table-of-contents" class="headerlink" title="Table of contents"></a>Table of contents</h2><ul>
<li><a href="#improving-deep-neural-networks-hyperparameter-tuning-regularization-and-optimization">Improving Deep Neural Networks: Hyperparameter tuning, Regularization and Optimization</a><ul>
<li><a href="#table-of-contents">Table of contents</a></li>
<li><a href="#course-summary">Course summary</a></li>
<li><a href="#practical-aspects-of-deep-learning">Practical aspects of Deep Learning</a><ul>
<li><a href="#train--dev--test-sets">Train / Dev / Test sets</a></li>
<li><a href="#bias--variance">Bias / Variance</a></li>
<li><a href="#basic-recipe-for-machine-learning">Basic Recipe for Machine Learning</a></li>
<li><a href="#regularization">Regularization</a></li>
<li><a href="#dropout-regularization">Dropout Regularization</a></li>
<li><a href="#understanding-dropout">Understanding Dropout</a></li>
<li><a href="#other-regularization-methods">Other regularization methods</a></li>
<li><a href="#normalizing-inputs">Normalizing inputs</a></li>
<li><a href="#vanishing--exploding-gradients">Vanishing / Exploding gradients</a></li>
<li><a href="#weight-initialization-for-deep-networks">Weight Initialization for Deep Networks</a></li>
<li><a href="#numerical-approximation-of-gradients">Numerical approximation of gradients</a></li>
<li><a href="#gradient-checking-implementation-notes">Gradient checking implementation notes</a></li>
</ul>
</li>
<li><a href="#optimization-algorithms">Optimization algorithms</a><ul>
<li><a href="#mini-batch-gradient-descent">Mini-batch gradient descent</a></li>
<li><a href="#understanding-mini-batch-gradient-descent">Understanding mini-batch gradient descent</a></li>
<li><a href="#exponentially-weighted-averages">Exponentially weighted averages</a></li>
<li><a href="#understanding-exponentially-weighted-averages">Understanding exponentially weighted averages</a></li>
<li><a href="#bias-correction-in-exponentially-weighted-averages">Bias correction in exponentially weighted averages</a></li>
<li><a href="#gradient-descent-with-momentum">Gradient descent with momentum</a></li>
<li><a href="#rmsprop">RMSprop</a></li>
<li><a href="#adam-optimization-algorithm">Adam optimization algorithm</a></li>
<li><a href="#learning-rate-decay">Learning rate decay</a></li>
<li><a href="#the-problem-of-local-optima">The problem of local optima</a></li>
</ul>
</li>
<li><a href="#hyperparameter-tuning-batch-normalization-and-programming-frameworks">Hyperparameter tuning, Batch Normalization and Programming Frameworks</a><ul>
<li><a href="#tuning-process">Tuning process</a></li>
<li><a href="#using-an-appropriate-scale-to-pick-hyperparameters">Using an appropriate scale to pick hyperparameters</a></li>
<li><a href="#hyperparameters-tuning-in-practice-pandas-vs-caviar">Hyperparameters tuning in practice: Pandas vs. Caviar</a></li>
<li><a href="#normalizing-activations-in-a-network">Normalizing activations in a network</a></li>
<li><a href="#fitting-batch-normalization-into-a-neural-network">Fitting Batch Normalization into a neural network</a></li>
<li><a href="#why-does-batch-normalization-work">Why does Batch normalization work</a></li>
<li><a href="#batch-normalization-at-test-time">Batch normalization at test time</a></li>
<li><a href="#softmax-regression">Softmax Regression</a></li>
<li><a href="#training-a-softmax-classifier">Training a Softmax classifier</a></li>
<li><a href="#deep-learning-frameworks">Deep learning frameworks</a></li>
<li><a href="#tensorflow">TensorFlow</a></li>
</ul>
</li>
<li><a href="#extra-notes">Extra Notes</a></li>
</ul>
</li>
</ul>
<h2 id="Course-summary"><a href="#Course-summary" class="headerlink" title="Course summary"></a>Course summary</h2><p>Here are the course summary as its given on the course <a href="https://www.coursera.org/learn/deep-neural-network" target="_blank" rel="noopener">link</a>:</p>
<blockquote>
<p>This course will teach you the “magic” of getting deep learning to work well. Rather than the deep learning process being a black box, you will understand what drives performance, and be able to more systematically get good results. You will also learn TensorFlow. </p>
<p>After 3 weeks, you will: </p>
<ul>
<li>Understand industry best-practices for building deep learning applications. </li>
<li>Be able to effectively use the common neural network “tricks”, including initialization, L2 and dropout regularization, Batch normalization, gradient checking, </li>
<li>Be able to implement and apply a variety of optimization algorithms, such as mini-batch gradient descent, Momentum, RMSprop and Adam, and check for their convergence. </li>
<li>Understand new best-practices for the deep learning era of how to set up train/dev/test sets and analyze bias/variance</li>
<li>Be able to implement a neural network in TensorFlow. </li>
</ul>
<p>This is the second course of the Deep Learning Specialization.</p>
</blockquote>
<h2 id="Practical-aspects-of-Deep-Learning"><a href="#Practical-aspects-of-Deep-Learning" class="headerlink" title="Practical aspects of Deep Learning"></a>Practical aspects of Deep Learning</h2><h3 id="Train-Dev-Test-sets"><a href="#Train-Dev-Test-sets" class="headerlink" title="Train / Dev / Test sets"></a>Train / Dev / Test sets</h3><ul>
<li>Its impossible to get all your hyperparameters right on a new application from the first time.</li>
<li>So the idea is you go through the loop: <code>Idea ==&gt; Code ==&gt; Experiment</code>.</li>
<li>You have to go through the loop many times to figure out your hyperparameters.</li>
<li>Your data will be split into three parts:<ul>
<li>Training set.       (Has to be the largest set)</li>
<li>Dev set or Validation set.</li>
<li>Testing set.</li>
</ul>
</li>
<li>You will try to build a model upon training set then try to optimize hyperparameters on Dev set as much as possible. Then after your model is ready you try and evaluate the testing set.</li>
<li>so the trend on the ratio of splitting the models:<ul>
<li>If size of the  dataset is 100 to 1000000  ==&gt; 60/20/20</li>
<li>If size of the  dataset is 1000000  to INF  ==&gt; 98/1/1 or  99.5/0.25/0.25</li>
</ul>
</li>
<li>The trend now gives the training data the biggest sets.</li>
<li>Make sure the Training/Dev/test set is coming from the same distribution.<ul>
<li>For example if cat training pictures is from the web and the Dev/test pictures are from users cell phone they will mismatch. It is better to make them one distribution.</li>
</ul>
</li>
<li>The Dev set rule is to try them on some of the good models you’ve created.</li>
<li>Its OK to only have a Dev set without a testing set.</li>
<li>Almost all people call the Dev set as the test set. But a better terminology is to call it a Dev set as its used in the development.</li>
</ul>
<h3 id="Bias-Variance"><a href="#Bias-Variance" class="headerlink" title="Bias / Variance"></a>Bias / Variance</h3><ul>
<li>Bias / Variance techniques are Easy to learn, but difficult to master.</li>
<li>So here the explanation of Bias / Variance:<ul>
<li>If your model is underfitting (logistic regression of non linear data) it has a “high bias”</li>
<li>If your model is overfitting then it has a “high variance”</li>
<li>Your model will be alright if you balance the Bias / Variance</li>
<li>For more:<ul>
<li><img src="Images/01-_Bias_-_Variance.png" alt></li>
</ul>
</li>
</ul>
</li>
<li>Another idea to get the bias /  variance if you don’t have a 2D plotting mechanism:<ul>
<li>High variance (overfitting) for example:<ul>
<li>Training error: 1%</li>
<li>Dev error: 11%</li>
</ul>
</li>
<li>high Bias (underfitting) for example:<ul>
<li>Training error: 15%</li>
<li>Dev error: 14%</li>
</ul>
</li>
<li>high Bias (underfitting) &amp;&amp; High variance (overfitting) for example:<ul>
<li>Training error: 15%</li>
<li>Test error: 30%</li>
</ul>
</li>
<li>Best:<ul>
<li>Training error: 0.5%</li>
<li>Test error: 1%</li>
</ul>
</li>
<li>These Assumptions came from that human has 0% error. If the problem isn’t like that you’ll need to use human error as baseline.</li>
</ul>
</li>
</ul>
<h3 id="Basic-Recipe-for-Machine-Learning"><a href="#Basic-Recipe-for-Machine-Learning" class="headerlink" title="Basic Recipe for Machine Learning"></a>Basic Recipe for Machine Learning</h3><ul>
<li>If your algorithm has a high bias:<ul>
<li>Try to make your NN bigger (Size of Hidden units, Number of layers)</li>
<li>Try a different model that are suitable for your data.</li>
<li>Try to run it longer.</li>
<li>Different optimization algorithm.</li>
</ul>
</li>
<li>If your algorithm has a high variance:<ul>
<li>More data.</li>
<li>Try regularization.</li>
<li>Try a different model that are suitable for your data.</li>
</ul>
</li>
<li>You should try the previous two points until you have a low bias / low variance.</li>
<li>In the older days before deep learning there was a “Bias / variance trade off”. But because now you have more options on solving the bias and variance problem its really helpful to use deep learning.</li>
<li>Training a bigger neural network never hurt.</li>
</ul>
<h3 id="Regularization"><a href="#Regularization" class="headerlink" title="Regularization"></a>Regularization</h3><ul>
<li>Adding Regularization to NN will help it reduce variance (Overfitting)</li>
<li>L1 matrix Norm:<ul>
<li><code>||W|| = Sum(|W[i,j]|)      # Sum of all Ws with abs</code></li>
</ul>
</li>
<li>L2 matrix Norm sometimes its called Frobenius norm:<ul>
<li><code>||W||^2 = Sum(|W[i,j]|^2)  #Sum of all Ws squared</code></li>
<li>Also can be calculated using<code>||W||^2 = W.T * W</code></li>
</ul>
</li>
<li>Regularization For logistic regression:<ul>
<li>The normal cost function that we want to minimize is:<br> <code>J(w,b) = (1/m) * Sum(L(y(i),y&#39;(i)))</code></li>
<li>The L2 Regularization version:<br><code>J(w,b) = (1/m) * Sum(L(y(i),y&#39;(i))) + (Lmda/2m) * ||W||^2</code></li>
<li>The L1 Regularization version:<br><code>J(w,b) = (1/m) * Sum(L(y(i),y&#39;(i))) + (Lmda/2m) * (||W||)</code></li>
<li>The L1 Regularization version makes a lot of w values become zeros, which makes the model size is small.</li>
<li>L2 Regularization is being used much often.</li>
<li><code>Lmda</code> here is the Regularization parameter (Hyperparameter)</li>
</ul>
</li>
</ul>
<ul>
<li><p>Regularization For NN:</p>
<ul>
<li>The normal cost function that we want to minimize is:<br><code>J(W1,b1...,WL,bL) = (1/m) * Sum(L(y(i),y&#39;(i)))</code></li>
<li>The L2 Regularization version:<br><code>J(w,b) = (1/m) * Sum(L(y(i),y&#39;(i))) + (Lmda/2m) * Sum((||W[l]||) ^2)</code></li>
<li>We stack the matrix as one vector <code>(mn,1)</code> and then we apply <code>sqrt(w1^2+w2^2.....)</code></li>
<li><p>To do back propagation (old way):</p>
<p><code>w[l] = w[l] - learningRate * dw[l]</code></p>
</li>
<li><p>The new way:</p>
<p><code>dw[l] = (Back prob) + (Lmda/m)*w[l]</code></p>
</li>
<li><p>So: </p>
<ul>
<li><code>w[l] = w[l] - (Lmda/m)*w[l] - learningRate * dw[l]</code> </li>
<li><code>w[l] = (1 - (learninRate*Lmda)/m) w[l] - learninRate*dw[l]</code></li>
</ul>
</li>
<li>In practice this penalizes large weights and effectively limits the freedom in your model.</li>
<li>The new term <code>(1 - (learninRate*Lmda)/m) w[l]</code>  causes the weight to decay in proportion to its size.</li>
</ul>
</li>
<li>Why regularization reduces overfitting? Here are some intuitions:<ol>
<li>Number 1<ul>
<li>If <code>Lmda</code> is too large, as the equations we discussed before a lot of w’s will be zeros which will make the NN act like logistic regression.</li>
<li>If <code>Lmda</code> is good enough it will just reduce some weights that makes the neural network overfit.</li>
</ul>
</li>
<li>Number 2 (in Tanh activation function)<ul>
<li>If <code>Lmda</code> is too large, w’s will be small which makes the Tanh activation function to be from non linear to linear which makes the NN a linear classifier.</li>
<li>If <code>Lmda</code> good enough it will just make some Tanh activation a linear classifier which will prevent overfitting.</li>
</ul>
</li>
</ol>
</li>
</ul>
<h3 id="Dropout-Regularization"><a href="#Dropout-Regularization" class="headerlink" title="Dropout Regularization"></a>Dropout Regularization</h3><ul>
<li>In the most cases Andrew Ng tells that he uses the L1/L2 regularization.</li>
<li>The dropout Regularization eliminates some neurons/weights on each iteration based on a probability.</li>
<li>A technique called “Inverse dropout” is one of the techniques that are used to implement Inverse dropout.</li>
<li><p>Code for Inverse dropout:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">keep_prob = 0.8</span><br><span class="line">l = 3          # This code will work only on layer 3</span><br><span class="line"># the generated number that are less than 0.8 will be dropped. 80% stay, 20% dropped</span><br><span class="line">d3 = np.random.randn(a[l].shape[0], a[l].shape[1]) &lt; keep_prob</span><br><span class="line"></span><br><span class="line">a3 = np.multiply(a3,d3)   #Keeps only the values in d3</span><br><span class="line"></span><br><span class="line"># Maximize a3 again to gain the loss (The expected value of a3 is the same) - To solve the</span><br><span class="line"># scaling problem</span><br><span class="line">a3 = a3 / keep_prob</span><br></pre></td></tr></table></figure>
</li>
<li><p>At test time we don’t run the “Inverse dropout”</p>
</li>
</ul>
<h3 id="Understanding-Dropout"><a href="#Understanding-Dropout" class="headerlink" title="Understanding Dropout"></a>Understanding Dropout</h3><ul>
<li>Can’t rely on one feature so have to spread out weights</li>
<li>Dropout can have different dropouts per layer.</li>
<li>The input layer drop out is has to be near 1 because we need to learn a lot from the input.</li>
<li>A lot of researchers are using dropout with CNN.</li>
<li>Downside of dropout is that the loss function is not well defined and it will be hard to debug.<ul>
<li>To solve that you’ll need to set all the dropouts by 1 and then check your cost graph if its going well set the dropouts again.</li>
</ul>
</li>
</ul>
<h3 id="Other-regularization-methods"><a href="#Other-regularization-methods" class="headerlink" title="Other regularization methods"></a>Other regularization methods</h3><ul>
<li><strong>Data augmentation</strong>:<ul>
<li>For example in a computer vision data:<ul>
<li>You can flip all your pictures horizontally this will give you m more data instances.</li>
<li>You could also take a random position and rotation in an image to get more data.</li>
</ul>
</li>
<li>For example in OCR, you’ll need to distort the digits.</li>
<li>This technique’s new data isn’t as good as the real independent data, but still can be used as a Regularization technique.</li>
</ul>
</li>
<li><strong>Early stopping</strong>:<ul>
<li>In this technique we plot the training data and the Dev data cost together. At some iteration the Dev data cost will stop decreasing.</li>
<li>We will pick the point at which the training data graph and Dev data graph are best (lowest training cost with lowest dev cost).</li>
<li>We will take these parameters as the best parameters.<ul>
<li><img src="Images/02-_Early_stopping.png" alt></li>
</ul>
</li>
<li>This technique is not recommended because it makes us think about something else more than optimize W’s and b’s.</li>
<li>But its advantage is that you don’t need to modify a Hyperparameter like in Regularization.</li>
</ul>
</li>
<li><strong>Model Ensembles</strong>:<ul>
<li>Algorithm:<ul>
<li>Train multiple independent models.</li>
<li>At test time average their results.</li>
</ul>
</li>
<li>It can get you extra 2% performance.</li>
<li>It reduces the generalization error.</li>
<li>You can use some snapshots of your NN at the training ensembles them and take the results.</li>
</ul>
</li>
</ul>
<h3 id="Normalizing-inputs"><a href="#Normalizing-inputs" class="headerlink" title="Normalizing inputs"></a>Normalizing inputs</h3><ul>
<li>If you normalize your inputs this will speed up the training process a lot.</li>
<li>Normalization are going on these steps:<ol>
<li>Get mean. <code>Mean = (1/m) * sum(x(i))</code></li>
<li>Subtract the mean from each input. <code>X = X - Mean</code><ul>
<li>This makes your inputs centered around 0.</li>
</ul>
</li>
<li>Get the variance. <code>variance = (1/m) * sum(x(i)^2)</code></li>
<li>Normalize the variance. <code>X/= variance</code></li>
</ol>
</li>
<li>These steps should be applied to training, Dev, and testing sets.</li>
<li>Why normalize?<ul>
<li>If we don’t normalize the inputs our loss function will be deep and its shape is inconsistent then optimizing it will take a long time.</li>
<li>But if we normalize it the opposite will occur. the shape of the function will be consistent and the optimizing will be easier.</li>
</ul>
</li>
</ul>
<h3 id="Vanishing-Exploding-gradients"><a href="#Vanishing-Exploding-gradients" class="headerlink" title="Vanishing / Exploding gradients"></a>Vanishing / Exploding gradients</h3><ul>
<li>The Vanishing / Exploding gradients occurs when your derivatives become very small or very big.</li>
<li><p>To understand the problem, suppose that we have a deep neural network with number of layers L, and all the activation functions are <strong>linear</strong> and each <code>b = 0</code></p>
<ul>
<li><p>Then:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Y&apos; = W[L]W[L-1].....W[2]W[1]X</span><br></pre></td></tr></table></figure>
</li>
<li><p>Then, if we have 2 layers, in each layer, we have two assumptions:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Y&apos; = (W[L][1.5  0]^(L-1)) X = 1.5^L     # which will be so large</span><br><span class="line">          [0  1.5]</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Y&apos; = (W[L][0.5  0]^(L-1)) X = 0.5^L     # which will be so small</span><br><span class="line">          [0  0.5]</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>The last example explains that the derivatives will be decreased/Increased exponentially.</p>
</li>
<li>So If W &gt; I (Identity matrix)     The weights will explode.</li>
<li>And If W &lt; I (Identity matrix)     The weights will vanish.</li>
<li>Recently Microsoft trained 152 layers (ResNet)! which is a really big number.</li>
</ul>
<h3 id="Weight-Initialization-for-Deep-Networks"><a href="#Weight-Initialization-for-Deep-Networks" class="headerlink" title="Weight Initialization for Deep Networks"></a>Weight Initialization for Deep Networks</h3><ul>
<li>A partial solution to the Vanishing / Exploding gradients in NN is better or more careful choice of the random initialization of weights.</li>
<li>In a single neuron (Perceptron model): <code>Z = w1X1 + w2X2 + ...+wnXn</code><ul>
<li>So if <code>Nx</code> is large we want <code>W</code>‘s to be smaller to not explode the cost.</li>
</ul>
</li>
<li>So it turns out that we need the variance which equals <code>1/Nx</code> to be the range of <code>W</code>‘s</li>
<li><p>So lets say when we initialize <code>W</code>‘s we initialize like this (For Tanh its better to use this):</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">np.random.rand(shape)*np.sqrt(1/n[l-1])               #n[l-1] In the multiple layers.</span><br></pre></td></tr></table></figure>
</li>
<li><p>Setting this to <code>2/n[l-1]</code> especially for RELU is better:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">np.random.rand(shape)*np.sqrt(2/n[l-1])               #n[l-1] In the multiple layers.</span><br></pre></td></tr></table></figure>
</li>
<li><p>This is the best way to solve Vanishing / Exploding gradients (RELU + Weight Initialization with variance)</p>
</li>
<li>The initialization in this video is called “He Initialization / Xavier Initialization” and has been published in 2015 paper.</li>
</ul>
<h3 id="Numerical-approximation-of-gradients"><a href="#Numerical-approximation-of-gradients" class="headerlink" title="Numerical approximation of gradients"></a>Numerical approximation of gradients</h3><ul>
<li>There is an implementation called gradient check which tells if your implementation of back prob. is right.</li>
<li>There’s a numerical way to calculate the derivative<ul>
<li><img src="Images/03-_Numerical_approximation_of_gradients.png" alt></li>
</ul>
</li>
<li>This checking is so helpful at finding the errors in your back prob. algorithm but its slower than gradient descent.</li>
<li>Implementation of this is so simple.</li>
<li><p>Gradient checking:</p>
<ul>
<li>First take <code>W[1],b[1]...W[L]b[L]</code> and reshape into one big vector (<code>Ceta</code>)</li>
<li>The cost function will be <code>L(Ceta)</code></li>
<li>Then take <code>dW[1],db[1]......dW[L]db[L]</code> into one big vector (<code>d_ceta</code>)</li>
<li><p><strong>Algorithm</strong>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eps = 10^-7   #Small number</span><br><span class="line">for i in len(Ceta):</span><br><span class="line">    d_ceta_calc[i] = (J(ceta1,..,ceta[i] + eps) -  J(ceta1,..,ceta[i] - eps)) / 2*eps</span><br></pre></td></tr></table></figure>
</li>
<li><p>Finally we check this formula  <code>(||d_ceta_calc - d_ceta||) / (||d_ceta_calc||+||d_ceta||)</code> </p>
<ul>
<li>The <code>||</code> is the Euclidean distance.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Gradient-checking-implementation-notes"><a href="#Gradient-checking-implementation-notes" class="headerlink" title="Gradient checking implementation notes"></a>Gradient checking implementation notes</h3><ul>
<li>Don’t use the gradient-checking algorithm for all the calculation because its a much slow algorithm</li>
<li>The gradient-checking is for debugging.</li>
<li>If algorithm fails grad check, look at components to try to identify the bug.</li>
<li>Don’t forget to add <code>(lamda/2m)sum(W[l])</code> to <code>J</code> if you are using L1 or L2 regularization.</li>
<li>Gradient checking doesn’t work with dropout.<ul>
<li>because J is not consistent.</li>
</ul>
</li>
<li>Run gradient checking at random initialization and train the network for a while maybe there’s a bug that are not on the first iteration.</li>
</ul>
<h2 id="Optimization-algorithms"><a href="#Optimization-algorithms" class="headerlink" title="Optimization algorithms"></a>Optimization algorithms</h2><h3 id="Mini-batch-gradient-descent"><a href="#Mini-batch-gradient-descent" class="headerlink" title="Mini-batch gradient descent"></a>Mini-batch gradient descent</h3><ul>
<li>Training NN with a large data is slow. So to find an optimization algorithm that runs faster is a good idea.</li>
<li>Suppose we have <code>m = 50 million.</code> To train this data it will take a huge processing time for one step.<ul>
<li>because 50 million won’t fit in the memory at once we need other processing to make such a thing.</li>
</ul>
</li>
<li>It turns out you can make a faster algorithm to make gradient decent process some of your items even before you finish the 50 million items.</li>
<li>Suppose we have split m to <strong>mini batches</strong>.<ul>
<li><code>X{1} = 0    ==&gt;  1000</code></li>
<li><code>X{2} = 1001 ==&gt;  2000</code></li>
<li><code>....</code></li>
<li><code>X{bs} = ...</code></li>
</ul>
</li>
<li>We similarly split <code>X</code> &amp; <code>Y</code>.</li>
<li>So the definition of mini batches ==&gt; <code>t: X{t}, Y{t}</code></li>
<li>In <strong>Batch gradient descent</strong> We run the gradient decent on the whole dataset.</li>
<li>While in <strong>Mini-Batch gradient descent</strong> We run the gradient decent on the mini datasets.</li>
<li><p>Mini-Batch algorithm pseudo code:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for t = 1:No_of_batches                                     #This is called on epoch</span><br><span class="line">  AL, caches = forward_prop(X&#123;t&#125;, Y&#123;t&#125;)</span><br><span class="line">  Cost = compute_cost(AL, Y&#123;t&#125;)</span><br><span class="line">  grads = backward_prop(AL, caches)</span><br><span class="line">  UpdateParameters(grads)</span><br></pre></td></tr></table></figure>
</li>
<li><p>The code inside an epoch should be vectorized.</p>
</li>
<li>This works much faster in the large datasets.</li>
</ul>
<h3 id="Understanding-mini-batch-gradient-descent"><a href="#Understanding-mini-batch-gradient-descent" class="headerlink" title="Understanding mini-batch gradient descent"></a>Understanding mini-batch gradient descent</h3><ul>
<li>In mini batch algorithm, the cost won’t go down with each step as batch algorithm do. It could contain some ups and downs but at whole it has to go down.<ul>
<li><img src="Images/04-_batch_vs_mini_batch_cost.png" alt></li>
</ul>
</li>
<li>Choosing mini-batch size<ul>
<li>If (<code>mini batch size = m</code>)     ==&gt;    Batch gradient descent<ul>
<li>If (<code>mini batch size = 1</code>)  ==&gt;    Stochastic gradient descent</li>
<li>Might be faster than standard in big data <code>&gt; 10^7</code></li>
<li>If (<code>mini batch size = between 1 and m</code>) ==&gt;    Mini Batch gradient descent</li>
</ul>
</li>
</ul>
</li>
<li>In Stochastic gradient descent is so noisy regarding cost minimization and won’t reach the minimum cost. Also you lose vectorization advantage.</li>
<li>In mini batch gradient descent is so noisy regarding cost minimization and won’t reach the minimum cost. But you have the vectorization advantage and you can look at the costs when the code is running to see if its right. To help with the noisy cost minimization you should reduce the learning rate.</li>
<li>Guidelines for using mini batch:<ul>
<li>It has to be a power of 2 to take advantage of vectorization:<br><code>64, 128, 256, 512, 1024....</code></li>
<li>Make sure mini-batch fits in CPU/GPU</li>
</ul>
</li>
<li>Mini batch size is a Hyperparameter.</li>
</ul>
<h3 id="Exponentially-weighted-averages"><a href="#Exponentially-weighted-averages" class="headerlink" title="Exponentially weighted averages"></a>Exponentially weighted averages</h3><ul>
<li>There are optimization algorithms that are better than <strong>gradient descent</strong>. but you should first learn about Exponentially weighted averages.</li>
<li><p>If we have data like the temperature of day through the year it could be like this:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">t(1) = 40</span><br><span class="line">t(2) = 49</span><br><span class="line">t(3) = 45</span><br><span class="line">..</span><br><span class="line">t(180) = 60</span><br><span class="line">..</span><br></pre></td></tr></table></figure>
</li>
<li><p>This data is small in winter and big in summer. If we plot this data we will find it some noisy.</p>
</li>
<li><p>Now lets compute the Exponentially weighted averages:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">V0 = 0</span><br><span class="line">V1 = 0.9 * V0 + 0.1 * t(1) = 4        # 0.9 and 0.1 are hyperparameters</span><br><span class="line">V2 = 0.9 * V1 + 0.1 * t(2) = 8.5</span><br><span class="line">V3 = 0.9 * V2 + 0.1 * t(3) = 12.15</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
</li>
<li><p>If we plot this it will represent averages.</p>
</li>
<li>Another imagery example:<ul>
<li><img src="Images/Nasdaq1_small.png" alt></li>
<li>Taken from: <a href="investopedia.com">investopedia.com</a></li>
</ul>
</li>
<li><p>General equation</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">V(t) = beta v(t-1) + (1-beta) ceta(t)</span><br></pre></td></tr></table></figure>
<ul>
<li>If <code>beta = 0.9</code> then we are averaging through this equation: <code>(1/ (1-beta))</code> Then<ul>
<li>beta = 0.9 will average last 10 entries.</li>
<li>beta = 0.98 will average last 50 entries.</li>
<li>beta = 0.5 will average last 2 entries.</li>
</ul>
</li>
</ul>
</li>
<li>Best beta average for our case is between 0.9 and 0.98</li>
</ul>
<h3 id="Understanding-exponentially-weighted-averages"><a href="#Understanding-exponentially-weighted-averages" class="headerlink" title="Understanding exponentially weighted averages"></a>Understanding exponentially weighted averages</h3><ul>
<li>Intuitions:<ul>
<li><img src="Images/05-_exponentially_weighted_averages_intuitions.png" alt></li>
</ul>
</li>
<li><p>We can implement this algorithm with more accurate results if we make a moving window. But the code is more efficient and faster using the exponentially weighted averages algorithm.</p>
</li>
<li><p>Algorithm is so simple:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">V = 0</span><br><span class="line">Repeat</span><br><span class="line">&#123;</span><br><span class="line">  Get ceta(t)</span><br><span class="line">  V = beta * V + (1-beta) * ceta(t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Bias-correction-in-exponentially-weighted-averages"><a href="#Bias-correction-in-exponentially-weighted-averages" class="headerlink" title="Bias correction in exponentially weighted averages"></a>Bias correction in exponentially weighted averages</h3><ul>
<li>The bias correction helps making the exponentially weighted averages more accurate.</li>
<li>Because <code>V(0) = 0</code>, the bias of the weighted averages is shifted and the accuracy suffers.</li>
<li><p>To solve the bias issue we have to use this equation:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">V(t) = (beta v(t-1) + (1-beta) ceta(t)) / (1 - beta^t)</span><br></pre></td></tr></table></figure>
</li>
<li><p>As you see the as t became larger the <code>(1 - beta^t)</code> became <code>1</code></p>
</li>
</ul>
<h3 id="Gradient-descent-with-momentum"><a href="#Gradient-descent-with-momentum" class="headerlink" title="Gradient descent with momentum"></a>Gradient descent with momentum</h3><ul>
<li>The momentum algorithm works faster than standard Gradient descent.</li>
<li>The simple idea is to calculate the exponentially weighted averages for your gradients and then updates your weights with the new values.</li>
<li><p>Pseudo code:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VdW = 0, Vdb = 0</span><br><span class="line">on iteration t:</span><br><span class="line">  # The mini batch can be the whole batch its ok</span><br><span class="line">  compute dw, db on current mini batch                </span><br><span class="line">          </span><br><span class="line">  VdW = (beta * VdW) + (1 - beta)dW</span><br><span class="line">  Vdb = (beta * Vdb) + (1 - beta)db</span><br><span class="line">  W = W - learning_rate * VdW</span><br><span class="line">  b = B - learning_rate * Vdb</span><br></pre></td></tr></table></figure>
</li>
<li><p>This will help the cost function to go to the minimum point in a more fast and consistent way.</p>
</li>
<li><code>beta = 0.9</code> is working very well for lots of people.</li>
<li>In practice people don’t bother with <strong>Bias correction</strong> (They leave the first iterations to work as they want)</li>
</ul>
<h3 id="RMSprop"><a href="#RMSprop" class="headerlink" title="RMSprop"></a>RMSprop</h3><ul>
<li>Stands for <strong>Root mean square prop</strong>.</li>
<li>This algorithm speeds up the Gradient descent.</li>
<li><p>Pseudo code:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SdW = 0, Sdb = 0</span><br><span class="line">on iteration t:</span><br><span class="line">  # The mini batch can be the whole batch its ok</span><br><span class="line">  compute dw, db on current mini batch</span><br><span class="line">  </span><br><span class="line">  SdW = (beta * SdW) + (1 - beta)dW^2</span><br><span class="line">  Sdb = (beta * Sdb) + (1 - beta)db^2</span><br><span class="line">  W = W - learning_rate * dW/sqrt(SdW)</span><br><span class="line">  b = B - learning_rate * db/sqrt(Sdb)</span><br></pre></td></tr></table></figure>
</li>
<li><p>This algorithm will make the cost function move on the vertical direction slow and the horizontal direction fast, in the following example.</p>
<ul>
<li><img src="Images/06-_RMSprop.png" alt></li>
</ul>
</li>
<li><p>Ensure that <code>SdW</code> is not zero by adding a small value to it (epsilon).<br> <code>W = W - learning_rate * dW/(sqrt(SdW) + epsilon)</code></p>
</li>
<li><p>With this algorithm you can increase your learning rate.</p>
</li>
<li>Developed by Jeoffery Hinton on <a href="Coursea.com">Coursea.com</a>.</li>
</ul>
<h3 id="Adam-optimization-algorithm"><a href="#Adam-optimization-algorithm" class="headerlink" title="Adam optimization algorithm"></a>Adam optimization algorithm</h3><ul>
<li>Stands for <strong>Adaptive Momentum Estimation</strong>.</li>
<li>Adam optimization and RMSprop are among the optimization algorithms that worked very well with a lot of NN architectures.</li>
<li>Adam optimization simply puts RMSprop and momentum and puts the together!</li>
<li><p>Pseudo code:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VdW = 0, VdW = 0</span><br><span class="line">SdW = 0, Sdb = 0</span><br><span class="line">on iteration t:</span><br><span class="line">  # The mini batch can be the whole batch its ok</span><br><span class="line">  compute dw, db on current mini batch                </span><br><span class="line">          </span><br><span class="line">  VdW = (beta1 * dW) + (1 - beta1)dW                    #Momentum</span><br><span class="line">  Vdb = (beta1 * db) + (1 - beta1)db                  #Momentum</span><br><span class="line">          </span><br><span class="line">  SdW = (beta2 * dW) + (1 - beta2)dW^2                    #RMSprop</span><br><span class="line">  Sdb = (beta2 * db) + (1 - beta2)db^2                    #RMSprop</span><br><span class="line">          </span><br><span class="line">  VdW = VdW/ (1 - beta^t)         #Fixing bias</span><br><span class="line">  Vdb = Vdb/ (1 - beta^t)         #Fixing bias</span><br><span class="line">          </span><br><span class="line">  SdW = SdW/ (1 - beta^t)         #Fixing bias</span><br><span class="line">  Sdb = Sdb/ (1 - beta^t)         #Fixing bias</span><br><span class="line">                  </span><br><span class="line">  W = W - learning_rate * VdW/(sqrt(SdW) + epsilon)</span><br><span class="line">  b = B - learning_rate * Vdb/(sqrt(Sdb) + epsilon)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Hyperparameters:</p>
<ul>
<li>Learning rate: needed to be tuned.</li>
<li><code>Beta1</code>. Parameter of the momentum. <code>0.9</code> is recommended by default.</li>
<li><code>Beta2</code>. Parameter of the RMSprop. <code>0.999</code> is recommended by default.</li>
<li><code>epsilon</code>. <code>10^-8</code> is recommended by default.</li>
</ul>
</li>
</ul>
<h3 id="Learning-rate-decay"><a href="#Learning-rate-decay" class="headerlink" title="Learning rate decay"></a>Learning rate decay</h3><ul>
<li>Slowly reduce learning rate.</li>
<li>In mini batch algorithm, we said that the minimization of the cost won’t reach optimum point. But by making the learning rate decays with iterations it will reach it as the steps beside the optimum is small.</li>
<li>One technique equations is<code>learning_rate = (1 / (1 + decay_rate * epoch_num)) * learning_rate_0</code>  <ul>
<li><code>epoch_num</code> is over all data (not a single mini batch).</li>
</ul>
</li>
<li>Other learning rate decay methods (Continuous):<ul>
<li><code>learning_rate = (0.95 ^ epoch_num) * learning_rate_0</code></li>
<li><code>learning_rate = (k / sqrt(epoch_num)) * learning_rate_0</code></li>
</ul>
</li>
<li>Some people is making changing the learning rate manually.</li>
<li>For Andrew Ng, learning rate decay has less priority</li>
</ul>
<h3 id="The-problem-of-local-optima"><a href="#The-problem-of-local-optima" class="headerlink" title="The problem of local optima"></a>The problem of local optima</h3><ul>
<li>The normal local optima is not likely to appear in a deep neural network.</li>
<li>You are unlikely to get stuck in a bad local optima in high dimensions.</li>
<li>Plateaus can make learning slow.<ul>
<li>Plateaus is an area of fairly level high ground.</li>
<li>This is where algorithms like momentum and Adam helps.</li>
</ul>
</li>
</ul>
<h2 id="Hyperparameter-tuning-Batch-Normalization-and-Programming-Frameworks"><a href="#Hyperparameter-tuning-Batch-Normalization-and-Programming-Frameworks" class="headerlink" title="Hyperparameter tuning, Batch Normalization and Programming Frameworks"></a>Hyperparameter tuning, Batch Normalization and Programming Frameworks</h2><h3 id="Tuning-process"><a href="#Tuning-process" class="headerlink" title="Tuning process"></a>Tuning process</h3><ul>
<li>We need some steps to tune our Hyperparameters to get the best out of them.</li>
<li>So far the Hyperparameters importance are (As to Andrew Ng)<ol>
<li>Learning rate.</li>
<li>Mini-batch size.</li>
<li>No. of hidden units.</li>
<li>Momentum beta.</li>
<li>No. of layers.</li>
<li>Use learning rate decay?</li>
<li>Adam <code>beta1</code> &amp; <code>beta2</code></li>
<li>regularization lambda</li>
<li>Activation functions</li>
</ol>
</li>
<li>Its hard to decide which Hyperparameter is the more important in a problem. It depends much on your problem.</li>
<li>One of the ideas to tune is to make a box with <code>N</code> Hyperparameter settings and then try the <code>N</code> settings on your problem.</li>
<li>You can use Coarse to fine box and randomly initialize it the hyperparameters.<ul>
<li>Then if you find some values that gives you a better values. Zoom into the box.</li>
</ul>
</li>
<li>This methods can be automated!</li>
</ul>
<h3 id="Using-an-appropriate-scale-to-pick-hyperparameters"><a href="#Using-an-appropriate-scale-to-pick-hyperparameters" class="headerlink" title="Using an appropriate scale to pick hyperparameters"></a>Using an appropriate scale to pick hyperparameters</h3><ul>
<li><p>If you have a specific range for a hyper parameter lets say from “a” to “b”. Lets demonstrate the logarithmic scale, this will give you a good random points:</p>
<ul>
<li>Calculate: <code>aLog = log(a)</code>                   <code># Ex. a = 0.0001 then aLog = -4</code><ul>
<li>Calculate: <code>bLog = log(b)</code>                 <code># Ex. b = 1  then bLog = 0</code></li>
</ul>
</li>
<li><p>Then: write this code:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">r = (aLog-bLog) * np.random.rand() +    bLog</span><br><span class="line"># In our Ex the range would be from [-4, 0] because rand range [0,1)</span><br><span class="line">result = 10^r</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p>It uniformly samples values from [a, b] as r.</p>
<ul>
<li>If we want to use the last method on exploring on the “momentum beta”:<ul>
<li>Beta best range is from 0.9 to 0.999</li>
<li>You should scale this to <code>1-Beta = 0.001 to 0.1</code> and the use <code>a = 0.001</code> and <code>b = 0.1</code></li>
<li>And remember to subtract 1 from the resulted random value.</li>
</ul>
</li>
</ul>
<h3 id="Hyperparameters-tuning-in-practice-Pandas-vs-Caviar"><a href="#Hyperparameters-tuning-in-practice-Pandas-vs-Caviar" class="headerlink" title="Hyperparameters tuning in practice: Pandas vs. Caviar"></a>Hyperparameters tuning in practice: Pandas vs. Caviar</h3><ul>
<li>If you don’t have a much computational resources you will go thought “The baby sit model”<ul>
<li>Run the model with different hyperparameters day by day.</li>
<li>Check at the end of each day if there are a progress or not.</li>
<li>You run one model at a time.</li>
<li>Called panda approach</li>
</ul>
</li>
<li>If you have computational resources, you can run some models in parallel and at the end of the day(s) you check the results.<ul>
<li>Called Caviar model.</li>
</ul>
</li>
</ul>
<h3 id="Normalizing-activations-in-a-network"><a href="#Normalizing-activations-in-a-network" class="headerlink" title="Normalizing activations in a network"></a>Normalizing activations in a network</h3><ul>
<li>In the current evolution of deep learning an algorithm called <strong>Batch Normalization</strong> is so important.<ul>
<li>Made by Sergey Ioffe and Christian Szegedy.</li>
</ul>
</li>
<li>Batch Normalization speeds up learning.</li>
<li>We discussed before that we can normalize input using the mean and variance method. This helped a lot in the shape of the cost function and reaching the minimum point in a more faster way!</li>
<li>The question is <em>For any hidden layer can we normalize <code>A[l]</code> to train <code>W[l]</code>, <code>b[l]</code> faster?</em>. This is what batch normalization is about.</li>
<li>Some papers normalize <code>Z[l]</code> and some normalize <code>A[l]</code>. Most of them uses <code>Z[l]</code> and recommended from Andrew Ng.</li>
<li>Algorithm<ul>
<li>Given <code>Z[l] = [z(1) z(2) .. z(m)]</code>   <code>#i = 1 to m (for one input)</code></li>
<li>Compute <code>mean[i] = 1/m * sum(z[i])</code></li>
<li>Compute <code>Variance[i] = 1/m * sum((z[i] - mean)^2)</code></li>
<li>Then <code>Z_norm[i] = (z(i) - mean) / np.sqrt(Variance + epsilon)</code><ul>
<li>Forcing the outputs to a specific distribution.</li>
</ul>
</li>
<li>Then <code>Z_dash[i] = alpha * Z_norm[i] + beta</code><ul>
<li>alpha and beta are learnable parameters.</li>
<li>Making the NN learn the distribution of the outputs.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Fitting-Batch-Normalization-into-a-neural-network"><a href="#Fitting-Batch-Normalization-into-a-neural-network" class="headerlink" title="Fitting Batch Normalization into a neural network"></a>Fitting Batch Normalization into a neural network</h3><ul>
<li>Using batch norm in 3 hidden layers NN:<ul>
<li><img src="Images/bn.png" alt></li>
</ul>
</li>
<li>Our NN parameters will be:<ul>
<li><code>W[1]</code>, <code>b[1]</code>, <code>W[2]</code>, <code>b[2]</code>, <code>W[3]</code>, <code>b[3]</code>, <code>beta[1]</code>, <code>alpha[1]</code>, <code>beta[2]</code>, <code>alpha[2]</code>, <code>beta[3]</code>, <code>alpha[3]</code></li>
</ul>
</li>
<li>If you are using a deep learning framework, You won’t have to implement batch norm yourself.<ul>
<li>Ex. in Tensorflow you can add this line: <code>tf.nn.batch-normalization()</code></li>
</ul>
</li>
<li>If we are using batch norm the parameter <code>b[1]</code>, <code>b[2]</code>,…. Doesn’t count because:<ul>
<li><code>Z[l] = W[l]A[l-1] + b[l]</code></li>
<li><code>Z_N[l] = alpha[l] * Z_norm[l] + beta[l]</code></li>
<li>Taking the mean of a constant <code>b[l]</code> will eliminate the <code>b[l]</code></li>
</ul>
</li>
<li>So if you are using batch normalization, you can remove b[l] or make it always zero.</li>
<li>So the parameter will be Ws, betas, and alphas.</li>
<li>Shapes:<ul>
<li><code>Z[l]</code>              <code>#(n[l], m)</code><ul>
<li><code>alpha[l]</code>                <code>#(n[l], m)</code></li>
<li><code>beta[l]</code>                <code>#(n[l], m)</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Why-does-Batch-normalization-work"><a href="#Why-does-Batch-normalization-work" class="headerlink" title="Why does Batch normalization work"></a>Why does Batch normalization work</h3><ul>
<li>The first reason is the same reason as why we normalize X.</li>
<li>The second reason is that batch normalization reduces the problem of input values changing.</li>
<li>Batch norm does some regularization:<ul>
<li>Each mini batch is scaled by the mean/variance computed of that mini batch.</li>
<li>-This adds some noise to the values <code>Z[l]</code> within that mini batch. Similar to dropout it adds some noise to each hidden layer activation</li>
<li>This has a slight regularization effect.</li>
</ul>
</li>
<li>To reduce this regularization effect you can make your mini batch bigger.</li>
<li>If you need regularization you cant just rely on that slight regularization you’ll need to add your regularization (L2 or dropout).</li>
</ul>
<h3 id="Batch-normalization-at-test-time"><a href="#Batch-normalization-at-test-time" class="headerlink" title="Batch normalization at test time"></a>Batch normalization at test time</h3><ul>
<li>When we train a NN with Batch normalization, we compute the mean and the variance of the size of mini-batch.</li>
<li>In testing we have to test one by one example. The mean and the variance of one example doesn’t make sense!</li>
<li>We have to compute an estimate value of mean and variance to use it in the testing time.</li>
<li>We can use the weighted average across the mini batches.</li>
<li>We will use the estimate values of the mean and variance to test.</li>
<li>There are another method to estimate this value called “Running average”</li>
<li>In practice don’t worry as you will use a deep learning framework and it will contain some default of doing such a thing.</li>
</ul>
<h3 id="Softmax-Regression"><a href="#Softmax-Regression" class="headerlink" title="Softmax Regression"></a>Softmax Regression</h3><ul>
<li>Every example we have used so far are talking about classification on only two classes.</li>
<li>There are a generalization of logistic regression called Softmax regression that are more general.</li>
<li>For example if we are classifying dogs, cat, and none of that<ul>
<li>Dog <code>class = 1</code></li>
<li>Cat <code>class = 2</code></li>
<li>None <code>class = 0</code></li>
<li>To represent a dog vector <code>y = [1 0 0]</code></li>
<li>To represent a cat vector <code>y = [0 1 0]</code></li>
<li>To represent a none vector <code>y = [0 0 1]</code></li>
</ul>
</li>
<li>We will use these notations:<ul>
<li><code>C = no. Of classes</code></li>
<li>Range of classes is <code>(0,...C-1)</code></li>
<li>In output layer. <code>Ny = C</code></li>
</ul>
</li>
<li>Each of the output layers will contain a probability if the class is true.</li>
<li>In the last layer we will have to activate the Softmax activation function instead of the sigmoid activation.</li>
<li><p>Softmax activation equations:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">t = e^(Z[L])        # shape(C, m)</span><br><span class="line">A[L] = e^(Z[L]) / sum(t, C)       # shape(C, m)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Training-a-Softmax-classifier"><a href="#Training-a-Softmax-classifier" class="headerlink" title="Training a Softmax classifier"></a>Training a Softmax classifier</h3><ul>
<li>There’s an activation which is called hard max, which gets 1 for the maximum value and zeros for the others.<ul>
<li>If you are using NumPy, its <code>np.max</code> over the vertical axis.</li>
</ul>
</li>
<li>The Softmax name came from Softening the values and not harding them like hard max.</li>
<li>Softmax is a generalization of logistic regression with two or more classes.</li>
<li><p>The loss function used with Softmax:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">L(y,y_dash) = -sum(y[i]*log(y_dash), C)</span><br></pre></td></tr></table></figure>
</li>
<li><p>The cost function used with Softmax:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">J(w[1], b[1], ....) = -1/m * (sum(L(y[i],y_dash[i]), m))</span><br></pre></td></tr></table></figure>
</li>
<li><p>Back propagation with Softmax:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dZ[L] = Y_dash - Y</span><br></pre></td></tr></table></figure>
</li>
<li><p>The derivative of Softmax is:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Y_dash( 1 - Y_dash)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Example:</p>
<ul>
<li><img src="Images/07-_softmax.png" alt></li>
</ul>
</li>
</ul>
<h3 id="Deep-learning-frameworks"><a href="#Deep-learning-frameworks" class="headerlink" title="Deep learning frameworks"></a>Deep learning frameworks</h3><ul>
<li>Its not practical to implement everything from scratch. Out last implementations was to know how NN works.</li>
<li>There are many good deep learning frameworks.</li>
<li>Deep learning is now in the phase of doing something with the frameworks and not from scratch to keep on going.</li>
<li>Here are some of the leading deep learning frameworks:<ul>
<li>Caffe/ Caffe2</li>
<li>CNTK</li>
<li>DL4j</li>
<li>Keras</li>
<li>Lasagne</li>
<li>mxnet</li>
<li>PaddlePaddle</li>
<li>TensorFlow</li>
<li>Theano</li>
<li>Torch/Pytorch</li>
</ul>
</li>
<li>These frameworks are getting better month by month. Comparison between them can be found <a href="https://en.wikipedia.org/wiki/Comparison_of_deep_learning_software" target="_blank" rel="noopener">here</a>.</li>
<li>How to choose deep learning framework:<ul>
<li>Ease of programming (development and deployment)</li>
<li>Running speed</li>
<li>Truly open (Open source with good governance)</li>
</ul>
</li>
<li>Programing frameworks can not only shorten your coding time, but sometimes also perform optimizations that speed up your code.</li>
</ul>
<h3 id="TensorFlow"><a href="#TensorFlow" class="headerlink" title="TensorFlow"></a>TensorFlow</h3><ul>
<li>In this section we will learn the basic structure of TensorFlow.</li>
<li><p>Lets see how implement a minimization function:</p>
<ul>
<li>Function: <code>J(w) = w^2 - 10w + 25</code></li>
<li>the result should be <code>w = 5</code> as the function is <code>(w-5)^2 = 0</code></li>
<li><p>Code V1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">w = tf.Variable(0, dtype=tf.float32)                 # Creating a variable w</span><br><span class="line">cost = tf.add(tf.add(w**2, tf.multiply(-10.0, w)), 25.0)        # can be written as this [cost = w**2 - 10*w + 25]</span><br><span class="line">train = tf.train.GradientDescentOptimizer(0.01).minimize(cost)</span><br><span class="line"></span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line">session = tf.Session()</span><br><span class="line">session.run(init)</span><br><span class="line">session.run(w)    # Runs the definition of w, if you print this it will print zero</span><br><span class="line">session.run(train)</span><br><span class="line"></span><br><span class="line">print(&quot;W after one run: &quot;, session.run(w))</span><br><span class="line"></span><br><span class="line">for i in range(1000):</span><br><span class="line">    session.run(train)</span><br><span class="line"></span><br><span class="line">print(&quot;W after 1000 run: &quot;, session.run(w))</span><br></pre></td></tr></table></figure>
</li>
<li><p>Code V2 (we feed the inputs to the algorithm through coefficient):</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">coefficient = np.array([[1.], [-10.], [25.]])</span><br><span class="line"></span><br><span class="line">x = tf.placeholder(tf.float32, [3, 1])</span><br><span class="line">w = tf.Variable(0, dtype=tf.float32)                 # Creating a variable w</span><br><span class="line">cost = x[0][0]*w**2 + x[1][0]*w + x[2][0]</span><br><span class="line"></span><br><span class="line">train = tf.train.GradientDescentOptimizer(0.01).minimize(cost)</span><br><span class="line"></span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line">session = tf.Session()</span><br><span class="line">session.run(init)</span><br><span class="line">session.run(w)    # Runs the definition of w, if you print this it will print zero</span><br><span class="line">session.run(train, feed_dict=&#123;x: coefficient&#125;)</span><br><span class="line"></span><br><span class="line">print(&quot;W after one run: &quot;, session.run(w))</span><br><span class="line"></span><br><span class="line">for i in range(1000):</span><br><span class="line">    session.run(train, feed_dict=&#123;x: coefficient&#125;)</span><br><span class="line"></span><br><span class="line">print(&quot;W after 1000 run: &quot;, session.run(w))</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>In TensorFlow you implement the forward propagation and TensorFlow will do the back propagation because it knows how to do it.</p>
</li>
<li>In TensorFlow a placeholder is a variable you can assign a value to later.</li>
<li>If you are using a mini-batch training you should change the <code>feed_dict={x: coefficient}</code> to the current mini batch.</li>
<li><p>Almost all TensorFlow  program uses this:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with tf.Session() as session:             # Because its better at clean up.</span><br><span class="line">  session.run(init)</span><br><span class="line">  session.run(w)</span><br></pre></td></tr></table></figure>
</li>
<li><p>In deep learning frameworks there are a lot of things that you can do with one line of code like changing the optimizer.</p>
</li>
<li><p>Writing and running programs in TensorFlow has the following steps:</p>
<ol>
<li>Create Tensors (variables) that are not yet executed/evaluated.</li>
<li>Write operations between those Tensors.</li>
<li>Initialize your Tensors.</li>
<li>Create a Session.</li>
<li>Run the Session. This will run the operations you’d written above.</li>
</ol>
</li>
<li><p>Instead of needing to write code to compute the cost function we know, we can use this line in TensorFlow :</p>
<p><code>tf.nn.sigmoid_cross_entropy_with_logits(logits = ...,  labels = ...)</code></p>
</li>
<li><p>To initialize weights in NN using TensorFlow use:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">W1 = tf.get_variable(&quot;W1&quot;, [25,12288], initializer = tf.contrib.layers.xavier_initializer(seed = 1))</span><br><span class="line"></span><br><span class="line">b1 = tf.get_variable(&quot;b1&quot;, [25,1], initializer = tf.zeros_initializer())</span><br></pre></td></tr></table></figure>
</li>
<li><p>For 3 layers NN, It is important to note that the forward propagation stops at <code>Z3</code>. The reason is that in TensorFlow the last linear layer output is given as input to the function computing the loss. Therefore, you don’t need <code>A3</code>!</p>
</li>
<li>To reset the graph<ul>
<li><code>tf.reset_default_graph()</code></li>
</ul>
</li>
</ul>
<h2 id="Extra-Notes"><a href="#Extra-Notes" class="headerlink" title="Extra Notes"></a>Extra Notes</h2><ul>
<li>If you want a good papers in deep learning look at the ICLR proceedings (Or NIPS proceedings) and that will give you a really good view of the field.</li>
<li>Who is Yuanqing Lin?<ul>
<li>Head of Baidu research.</li>
<li>First one to win ImageNet</li>
<li>Works in PaddlePaddle deep learning platform.</li>
</ul>
</li>
</ul>
<p><br><br><br><br><br><br>These Notes were made by <a href="mailto:mma18@fayoum.edu.eg" target="_blank" rel="noopener">Mahmoud Badry</a> @2017</p>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Course Note</tag>
      </tags>
  </entry>
  <entry>
    <title>Neural Networks and Deep Learning</title>
    <url>/Neural-Networks-and-Deep-Learning/2019/03/29/</url>
    <content><![CDATA[<p><strong>Reference from lecture slides of Andrew Ng and github repo from <a href="https://github.com/mbadry1/DeepLearning.ai-Summary" target="_blank" rel="noopener">DeepLearning.ai-Summary</a></strong></p>
<h2 id="Table-of-contents"><a href="#Table-of-contents" class="headerlink" title="Table of contents"></a>Table of contents</h2><ul>
<li><a href="#neural-networks-and-deep-learning">Neural Networks and Deep Learning</a><ul>
<li><a href="#table-of-contents">Table of contents</a></li>
<li><a href="#course-summary">Course summary</a></li>
<li><a href="#introduction-to-deep-learning">Introduction to deep learning</a><ul>
<li><a href="#what-is-a-neural-network-nn">What is a (Neural Network) NN?</a></li>
<li><a href="#supervised-learning-with-neural-networks">Supervised learning with neural networks</a></li>
<li><a href="#why-is-deep-learning-taking-off">Why is deep learning taking off?</a></li>
</ul>
</li>
<li><a href="#neural-networks-basics">Neural Networks Basics</a><ul>
<li><a href="#binary-classification">Binary classification</a></li>
<li><a href="#logistic-regression">Logistic regression</a></li>
<li><a href="#logistic-regression-cost-function">Logistic regression cost function</a></li>
<li><a href="#gradient-descent">Gradient Descent</a></li>
<li><a href="#derivatives">Derivatives</a></li>
<li><a href="#more-derivatives-examples">More Derivatives examples</a></li>
<li><a href="#computation-graph">Computation graph</a></li>
<li><a href="#derivatives-with-a-computation-graph">Derivatives with a Computation Graph</a></li>
<li><a href="#logistic-regression-gradient-descent">Logistic Regression Gradient Descent</a></li>
<li><a href="#gradient-descent-on-m-examples">Gradient Descent on m Examples</a></li>
<li><a href="#vectorization">Vectorization</a></li>
<li><a href="#vectorizing-logistic-regression">Vectorizing Logistic Regression</a></li>
<li><a href="#notes-on-python-and-numpy">Notes on Python and NumPy</a></li>
<li><a href="#general-notes">General Notes</a></li>
</ul>
</li>
<li><a href="#shallow-neural-networks">Shallow neural networks</a><ul>
<li><a href="#neural-networks-overview">Neural Networks Overview</a></li>
<li><a href="#neural-network-representation">Neural Network Representation</a></li>
<li><a href="#computing-a-neural-networks-output">Computing a Neural Network’s Output</a></li>
<li><a href="#vectorizing-across-multiple-examples">Vectorizing across multiple examples</a></li>
<li><a href="#activation-functions">Activation functions</a></li>
<li><a href="#why-do-you-need-non-linear-activation-functions">Why do you need non-linear activation functions?</a></li>
<li><a href="#derivatives-of-activation-functions">Derivatives of activation functions</a></li>
<li><a href="#gradient-descent-for-neural-networks">Gradient descent for Neural Networks</a></li>
<li><a href="#random-initialization">Random Initialization</a></li>
</ul>
</li>
<li><a href="#deep-neural-networks">Deep Neural Networks</a><ul>
<li><a href="#deep-l-layer-neural-network">Deep L-layer neural network</a></li>
<li><a href="#forward-propagation-in-a-deep-network">Forward Propagation in a Deep Network</a></li>
<li><a href="#getting-your-matrix-dimensions-right">Getting your matrix dimensions right</a></li>
<li><a href="#why-deep-representations">Why deep representations?</a></li>
<li><a href="#building-blocks-of-deep-neural-networks">Building blocks of deep neural networks</a></li>
<li><a href="#forward-and-backward-propagation">Forward and Backward Propagation</a></li>
<li><a href="#parameters-vs-hyperparameters">Parameters vs Hyperparameters</a></li>
<li><a href="#what-does-this-have-to-do-with-the-brain">What does this have to do with the brain</a></li>
</ul>
</li>
<li><a href="#extra-ian-goodfellow-interview">Extra: Ian Goodfellow interview</a></li>
</ul>
</li>
</ul>
<h2 id="Course-summary"><a href="#Course-summary" class="headerlink" title="Course summary"></a>Course summary</h2><p>Here are the course summary as its given on the course <a href="https://www.coursera.org/learn/neural-networks-deep-learning" target="_blank" rel="noopener">link</a>:</p>
<blockquote>
<p>If you want to break into cutting-edge AI, this course will help you do so. Deep learning engineers are highly sought after, and mastering deep learning will give you numerous new career opportunities. Deep learning is also a new “superpower” that will let you build AI systems that just weren’t possible a few years ago. </p>
<p>In this course, you will learn the foundations of deep learning. When you finish this class, you will:</p>
<ul>
<li>Understand the major technology trends driving Deep Learning</li>
<li>Be able to build, train and apply fully connected deep neural networks </li>
<li>Know how to implement efficient (vectorized) neural networks </li>
<li>Understand the key parameters in a neural network’s architecture </li>
</ul>
<p>This course also teaches you how Deep Learning actually works, rather than presenting only a cursory or surface-level description. So after completing it, you will be able to apply deep learning to a your own applications. If you are looking for a job in AI, after this course you will also be able to answer basic interview questions. </p>
</blockquote>
<h2 id="Introduction-to-deep-learning"><a href="#Introduction-to-deep-learning" class="headerlink" title="Introduction to deep learning"></a>Introduction to deep learning</h2><blockquote>
<p>Be able to explain the major trends driving the rise of deep learning, and understand where and how it is applied today.</p>
</blockquote>
<h3 id="What-is-a-Neural-Network-NN"><a href="#What-is-a-Neural-Network-NN" class="headerlink" title="What is a (Neural Network) NN?"></a>What is a (Neural Network) NN?</h3><ul>
<li>Single neuron == linear regression</li>
<li>Simple NN graph:<ul>
<li><img src="images/12.jpg" alt></li>
<li>Image taken from <a href="tutorialspoint.com">tutorialspoint.com</a></li>
</ul>
</li>
<li>RELU stands for rectified linear unit is the most popular activation function right now that makes deep NNs train faster now.</li>
<li>Hidden layers predicts connection between inputs automatically, thats what deep learning is good at.</li>
<li>Deep NN consists of more hidden layers (Deeper layers)<ul>
<li><img src="images/13.png" alt></li>
<li>Image taken from <a href="opennn.net">opennn.net</a></li>
</ul>
</li>
<li>Each Input will be connected to the hidden layer and the NN will decide the connections.</li>
<li>Supervised learning means we have the (X,Y) and we need to get the function that maps X to Y.</li>
</ul>
<h3 id="Supervised-learning-with-neural-networks"><a href="#Supervised-learning-with-neural-networks" class="headerlink" title="Supervised learning with neural networks"></a>Supervised learning with neural networks</h3><ul>
<li>Different types of neural networks for supervised learning which includes:<ul>
<li>CNN or convolutional neural networks (Useful in computer vision)</li>
<li>RNN or Recurrent neural networks (Useful in Speech recognition or NLP)</li>
<li>Standard NN (Useful for Structured data)</li>
<li>Hybrid/custom NN or a Collection of NNs types</li>
</ul>
</li>
<li>Structured data is like the databases and tables.</li>
<li>Unstructured data is like images, video, audio, and text.</li>
<li>Structured data gives more money because companies relies on prediction on its big data.</li>
</ul>
<h3 id="Why-is-deep-learning-taking-off"><a href="#Why-is-deep-learning-taking-off" class="headerlink" title="Why is deep learning taking off?"></a>Why is deep learning taking off?</h3><ul>
<li><p>Deep learning is taking off for 3 reasons:</p>
<ol>
<li>Data:<ul>
<li>Using this image we can conclude:<ul>
<li><img src="images/11.png" alt></li>
</ul>
</li>
<li>For small data NN can perform as Linear regression or SVM (Support vector machine)</li>
<li>For big data a small NN is better that SVM</li>
<li>For big data a big NN is better that a medium NN is better that small NN.</li>
<li>Hopefully we have a lot of data because the world is using the computer a little bit more<ul>
<li>Mobiles</li>
<li>IOT (Internet of things)</li>
</ul>
</li>
</ul>
</li>
<li>Computation:<ul>
<li>GPUs.</li>
<li>Powerful CPUs.</li>
<li>Distributed computing.</li>
<li>ASICs</li>
</ul>
</li>
<li>Algorithm:<ol>
<li>Creative algorithms has appeared that changed the way NN works.<ul>
<li>For example using RELU function is so much better than using SIGMOID function in training a NN because it helps with the vanishing gradient problem.</li>
</ul>
</li>
</ol>
</li>
</ol>
<p>​</p>
</li>
</ul>
<h2 id="Neural-Networks-Basics"><a href="#Neural-Networks-Basics" class="headerlink" title="Neural Networks Basics"></a>Neural Networks Basics</h2><blockquote>
<p>Learn to set up a machine learning problem with a neural network mindset. Learn to use vectorization to speed up your models.</p>
</blockquote>
<h3 id="Binary-classification"><a href="#Binary-classification" class="headerlink" title="Binary classification"></a>Binary classification</h3><ul>
<li>Mainly he is talking about how to do a logistic regression to make a binary classifier.<ul>
<li><img src="images/14.png" alt="log"></li>
<li>Image taken from <a href="http://3.bp.blogspot.com" target="_blank" rel="noopener">3.bp.blogspot.com</a></li>
</ul>
</li>
<li>He talked about an example of knowing if the current image contains a cat or not.</li>
<li>Here are some notations:<ul>
<li><code>M is the number of training vectors</code></li>
<li><code>Nx is the size of the input vector</code></li>
<li><code>Ny is the size of the output vector</code></li>
<li><code>X(1) is the first input vector</code></li>
<li><code>Y(1) is the first output vector</code></li>
<li><code>X = [x(1) x(2).. x(M)]</code></li>
<li><code>Y = (y(1) y(2).. y(M))</code></li>
</ul>
</li>
<li>We will use python in this course.</li>
<li>In NumPy we can make matrices and make operations on them in a fast and reliable time.</li>
</ul>
<h3 id="Logistic-regression"><a href="#Logistic-regression" class="headerlink" title="Logistic regression"></a>Logistic regression</h3><ul>
<li>Algorithm is used for classification algorithm of 2 classes.</li>
<li>Equations:<ul>
<li>Simple equation:    <code>y = wx + b</code></li>
<li>If x is a vector: <code>y = w(transpose)x + b</code></li>
<li>If we need y to be in between 0 and 1 (probability): <code>y = sigmoid(w(transpose)x + b)</code></li>
<li>In some notations this might be used: <code>y = sigmoid(w(transpose)x)</code> <ul>
<li>While <code>b</code> is <code>w0</code> of <code>w</code> and we add <code>x0 = 1</code>. but we won’t use this notation in the course (Andrew said that the first notation is better).</li>
</ul>
</li>
</ul>
</li>
<li>In binary classification <code>Y</code> has to be between <code>0</code> and <code>1</code>.</li>
<li>In the last equation <code>w</code> is a vector of <code>Nx</code> and <code>b</code> is a real number</li>
</ul>
<h3 id="Logistic-regression-cost-function"><a href="#Logistic-regression-cost-function" class="headerlink" title="Logistic regression cost function"></a>Logistic regression cost function</h3><ul>
<li>First loss function would be the square root error:  <code>L(y&#39;,y) = 1/2 (y&#39; - y)^2</code><ul>
<li>But we won’t use this notation because it leads us to optimization problem which is non convex, means it contains local optimum points.</li>
</ul>
</li>
<li>This is the function that we will use: <code>L(y&#39;,y) = - (y*log(y&#39;) + (1-y)*log(1-y&#39;))</code></li>
<li>To explain the last function lets see:<ul>
<li>if <code>y = 1</code> ==&gt; <code>L(y&#39;,1) = -log(y&#39;)</code>  ==&gt; we want <code>y&#39;</code> to be the largest   ==&gt; <code>y</code>‘ biggest value is 1</li>
<li>if <code>y = 0</code> ==&gt; <code>L(y&#39;,0) = -log(1-y&#39;)</code> ==&gt; we want <code>1-y&#39;</code> to be the largest ==&gt; <code>y&#39;</code> to be smaller as possible because it can only has 1 value.</li>
</ul>
</li>
<li>Then the Cost function will be: <code>J(w,b) = (1/m) * Sum(L(y&#39;[i],y[i]))</code></li>
<li>The loss function computes the error for a single training example; the cost function is the average of the loss functions of the entire training set.</li>
</ul>
<h3 id="Gradient-Descent"><a href="#Gradient-Descent" class="headerlink" title="Gradient Descent"></a>Gradient Descent</h3><ul>
<li>We want to predict <code>w</code> and <code>b</code> that minimize the cost function.</li>
<li>Our cost function is convex.</li>
<li>First we initialize <code>w</code> and <code>b</code> to 0,0 or initialize them to a random value in the convex function and then try to improve the values the reach minimum value.</li>
<li>In Logistic regression people always use 0,0 instead of random.</li>
<li>The gradient decent algorithm repeats: <code>w = w - alpha * dw</code><br>where alpha is the learning rate and <code>dw</code> is the derivative of <code>w</code> (Change to <code>w</code>)<br>The derivative is also the slope of <code>w</code></li>
<li>Looks like greedy algorithms. the derivative give us the direction to improve our parameters.</li>
</ul>
<ul>
<li>The actual equations we will implement:<ul>
<li><code>w = w - alpha * d(J(w,b) / dw)</code>        (how much the function slopes in the w direction)</li>
<li><code>b = b - alpha * d(J(w,b) / db)</code>        (how much the function slopes in the d direction)</li>
</ul>
</li>
</ul>
<h3 id="Derivatives"><a href="#Derivatives" class="headerlink" title="Derivatives"></a>Derivatives</h3><ul>
<li>We will talk about some of required calculus.</li>
<li>You don’t need to be a calculus geek to master deep learning but you’ll need some skills from it.</li>
<li>Derivative of a linear line is its slope.<ul>
<li>ex. <code>f(a) = 3a</code>                    <code>d(f(a))/d(a) = 3</code></li>
<li>if <code>a = 2</code> then <code>f(a) = 6</code></li>
<li>if we move a a little bit <code>a = 2.001</code> then <code>f(a) = 6.003</code> means that we multiplied the derivative (Slope) to the moved area and added it to the last result.</li>
</ul>
</li>
</ul>
<h3 id="More-Derivatives-examples"><a href="#More-Derivatives-examples" class="headerlink" title="More Derivatives examples"></a>More Derivatives examples</h3><ul>
<li><code>f(a) = a^2</code>  ==&gt; <code>d(f(a))/d(a) = 2a</code><ul>
<li><code>a = 2</code>  ==&gt; <code>f(a) = 4</code></li>
<li><code>a = 2.0001</code> ==&gt; <code>f(a) = 4.0004</code> approx.</li>
</ul>
</li>
<li><code>f(a) = a^3</code>  ==&gt; <code>d(f(a))/d(a) = 3a^2</code></li>
<li><code>f(a) = log(a)</code>  ==&gt; <code>d(f(a))/d(a) = 1/a</code></li>
<li>To conclude, Derivative is the slope and slope is different in different points in the function thats why the derivative is a function.</li>
</ul>
<h3 id="Computation-graph"><a href="#Computation-graph" class="headerlink" title="Computation graph"></a>Computation graph</h3><ul>
<li>Its a graph that organizes the computation from left to right.<ul>
<li><img src="images/02.png" alt></li>
</ul>
</li>
</ul>
<h3 id="Derivatives-with-a-Computation-Graph"><a href="#Derivatives-with-a-Computation-Graph" class="headerlink" title="Derivatives with a Computation Graph"></a>Derivatives with a Computation Graph</h3><ul>
<li>Calculus chain rule says:<br>If <code>x -&gt; y -&gt; z</code>          (x effect y and y effects z)<br>Then <code>d(z)/d(x) = d(z)/d(y) * d(y)/d(x)</code></li>
<li>The video illustrates a big example.<ul>
<li><img src="images/03.png" alt></li>
</ul>
</li>
<li>We compute the derivatives on a graph from right to left and it will be a lot more easier.</li>
<li><code>dvar</code> means the derivatives of a final output variable with respect to various intermediate quantities.</li>
</ul>
<h3 id="Logistic-Regression-Gradient-Descent"><a href="#Logistic-Regression-Gradient-Descent" class="headerlink" title="Logistic Regression Gradient Descent"></a>Logistic Regression Gradient Descent</h3><ul>
<li>In the video he discussed the derivatives of gradient decent example for one sample with two features <code>x1</code> and <code>x2</code>.<ul>
<li><img src="images/04.png" alt></li>
</ul>
</li>
</ul>
<h3 id="Gradient-Descent-on-m-Examples"><a href="#Gradient-Descent-on-m-Examples" class="headerlink" title="Gradient Descent on m Examples"></a>Gradient Descent on m Examples</h3><ul>
<li><p>Lets say we have these variables:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">X1                  Feature</span><br><span class="line">X2                  Feature</span><br><span class="line">W1                  Weight of the first feature.</span><br><span class="line">W2                  Weight of the second feature.</span><br><span class="line">B                   Logistic Regression parameter.</span><br><span class="line">M                   Number of training examples</span><br><span class="line">Y(i)                Expected output of i</span><br></pre></td></tr></table></figure>
</li>
<li><p>So we have:<br><img src="images/09.png" alt></p>
</li>
<li><p>Then from right to left we will calculate derivations compared to the result:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">d(a)  = d(l)/d(a) = -(y/a) + ((1-y)/(1-a))</span><br><span class="line">d(z)  = d(l)/d(z) = a - y</span><br><span class="line">d(W1) = X1 * d(z)</span><br><span class="line">d(W2) = X2 * d(z)</span><br><span class="line">d(B) = d(z)</span><br></pre></td></tr></table></figure>
</li>
<li><p>From the above we can conclude the logistic regression pseudo code:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">J = 0; dw1 = 0; dw2 =0; db = 0;                 # Devs.</span><br><span class="line">w1 = 0; w2 = 0; b=0;                            # Weights</span><br><span class="line">for i = 1 to m</span><br><span class="line">    # Forward pass</span><br><span class="line">    z(i) = W1*x1(i) + W2*x2(i) + b</span><br><span class="line">    a(i) = Sigmoid(z(i))</span><br><span class="line">    J += (Y(i)*log(a(i)) + (1-Y(i))*log(1-a(i)))</span><br><span class="line">    </span><br><span class="line">    # Backward pass</span><br><span class="line">    dz(i) = a(i) - Y(i)</span><br><span class="line">    dw1 += dz(i) * x1(i)</span><br><span class="line">    dw2 += dz(i) * x2(i)</span><br><span class="line">    db  += dz(i)</span><br><span class="line">J /= m</span><br><span class="line">dw1/= m</span><br><span class="line">dw2/= m</span><br><span class="line">db/= m</span><br><span class="line"></span><br><span class="line"># Gradient descent</span><br><span class="line">w1 = w1 - alpa * dw1</span><br><span class="line">w2 = w2 - alpa * dw2</span><br><span class="line">b = b - alpa * db</span><br></pre></td></tr></table></figure>
</li>
<li><p>The above code should run for some iterations to minimize error.</p>
</li>
<li><p>So there will be two inner loops to implement the logistic regression.</p>
</li>
<li><p>Vectorization is so important on deep learning to reduce loops. In the last code we can make the whole loop in one step using vectorization!</p>
</li>
</ul>
<h3 id="Vectorization"><a href="#Vectorization" class="headerlink" title="Vectorization"></a>Vectorization</h3><ul>
<li>Deep learning shines when the dataset are big. However for loops will make you wait a lot for a result. Thats why we need vectorization to get rid of some of our for loops.</li>
<li>NumPy library (dot) function is using vectorization by default.</li>
<li>The vectorization can be done on CPU or GPU thought the SIMD operation. But its faster on GPU.</li>
<li>Whenever possible avoid for loops.</li>
<li>Most of the NumPy library methods are vectorized version.</li>
</ul>
<h3 id="Vectorizing-Logistic-Regression"><a href="#Vectorizing-Logistic-Regression" class="headerlink" title="Vectorizing Logistic Regression"></a>Vectorizing Logistic Regression</h3><ul>
<li>We will implement Logistic Regression using one for loop then without any for loop.</li>
<li>As an input we have a matrix <code>X</code> and its <code>[Nx, m]</code> and a matrix <code>Y</code> and its <code>[Ny, m]</code>.</li>
<li><p>We will then compute at instance <code>[z1,z2...zm] = W&#39; * X + [b,b,...b]</code>. This can be written in python as:</p>
<pre><code>      Z = np.dot(W.T,X) + b    # Vectorization, then broadcasting, Z shape is (1, m)
      A = 1 / 1 + np.exp(-Z)   # Vectorization, A shape is (1, m)
</code></pre></li>
<li><p>Vectorizing Logistic Regression’s Gradient Output:</p>
<pre><code>      dz = A - Y                  # Vectorization, dz shape is (1, m)
      dw = np.dot(X, dz.T) / m    # Vectorization, dw shape is (Nx, 1)
      db = dz.sum() / m           # Vectorization, dz shape is (1, 1)
</code></pre></li>
</ul>
<h3 id="Notes-on-Python-and-NumPy"><a href="#Notes-on-Python-and-NumPy" class="headerlink" title="Notes on Python and NumPy"></a>Notes on Python and NumPy</h3><ul>
<li>In NumPy, <code>obj.sum(axis = 0)</code> sums the columns while <code>obj.sum(axis = 1)</code> sums the rows.</li>
<li>In NumPy, <code>obj.reshape(1,4)</code> changes the shape of the matrix by broadcasting the values.</li>
<li>Reshape is cheap in calculations so put it everywhere you’re not sure about the calculations.</li>
<li>Broadcasting works when you do a matrix operation with matrices that doesn’t match for the operation, in this case NumPy automatically makes the shapes ready for the operation by broadcasting the values.</li>
<li>Some tricks to eliminate all the strange bugs in the code:<ul>
<li>If you didn’t specify the shape of a vector, it will take a shape of <code>(m,)</code> and the transpose operation won’t work. You have to reshape it to <code>(m, 1)</code></li>
<li>Try to not use the rank one matrix in ANN</li>
<li>Don’t hesitate to use <code>assert(a.shape == (5,1))</code> to check if your matrix shape is the required one.</li>
<li>If you’ve found a rank one matrix try to run reshape on it.</li>
</ul>
</li>
<li>Jupyter / IPython notebooks are so useful library in python that makes it easy to integrate code and document at the same time. It runs in the browser and doesn’t need an IDE to run.<ul>
<li>To open Jupyter Notebook, open the command line and call: <code>jupyter-notebook</code> It should be installed to work.</li>
</ul>
</li>
<li><p>To Compute the derivative of Sigmoid:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s = sigmoid(x)</span><br><span class="line">ds = s * (1 - s)       # derivative  using calculus</span><br></pre></td></tr></table></figure>
</li>
<li><p>To make an image of <code>(width,height,depth)</code> be a vector, use this:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">v = image.reshape(image.shape[0]*image.shape[1]*image.shape[2],1)  #reshapes the image.</span><br></pre></td></tr></table></figure>
</li>
<li><p>Gradient descent converges faster after normalization of the input matrices.</p>
</li>
</ul>
<h3 id="General-Notes"><a href="#General-Notes" class="headerlink" title="General Notes"></a>General Notes</h3><ul>
<li>The main steps for building a Neural Network are:<ul>
<li>Define the model structure (such as number of input features and outputs)</li>
<li>Initialize the model’s parameters.</li>
<li>Loop.<ul>
<li>Calculate current loss (forward propagation)</li>
<li>Calculate current gradient (backward propagation)</li>
<li>Update parameters (gradient descent)</li>
</ul>
</li>
</ul>
</li>
<li>Preprocessing the dataset is important.</li>
<li>Tuning the learning rate (which is an example of a “hyperparameter”) can make a big difference to the algorithm.</li>
<li><a href="kaggle.com">kaggle.com</a> is a good place for datasets and competitions.</li>
<li><a href="https://www2.eecs.berkeley.edu/Faculty/Homepages/abbeel.html" target="_blank" rel="noopener">Pieter Abbeel</a> is one of the best in deep reinforcement learning.</li>
</ul>
<h2 id="Shallow-neural-networks"><a href="#Shallow-neural-networks" class="headerlink" title="Shallow neural networks"></a>Shallow neural networks</h2><blockquote>
<p>Learn to build a neural network with one hidden layer, using forward propagation and backpropagation.</p>
</blockquote>
<h3 id="Neural-Networks-Overview"><a href="#Neural-Networks-Overview" class="headerlink" title="Neural Networks Overview"></a>Neural Networks Overview</h3><ul>
<li><p>In logistic regression we had:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">X1  \  </span><br><span class="line">X2   ==&gt;  z = XW + B ==&gt; a = Sigmoid(z) ==&gt; l(a,Y)</span><br><span class="line">X3  /</span><br></pre></td></tr></table></figure>
</li>
<li><p>In neural networks with one layer we will have:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">X1  \  </span><br><span class="line">X2   =&gt;  z1 = XW1 + B1 =&gt; a1 = Sigmoid(a1) =&gt; z2 = a1W2 + B2 =&gt; a2 = Sigmoid(z2) =&gt; l(a2,Y)</span><br><span class="line">X3  /</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>X</code> is the input vector <code>(X1, X2, X3)</code>, and <code>Y</code> is the output variable <code>(1x1)</code></p>
</li>
<li>NN is stack of logistic regression objects.</li>
</ul>
<h3 id="Neural-Network-Representation"><a href="#Neural-Network-Representation" class="headerlink" title="Neural Network Representation"></a>Neural Network Representation</h3><ul>
<li>We will define the neural networks that has one hidden layer.</li>
<li>NN contains of input layers, hidden layers, output layers.</li>
<li>Hidden layer means we cant see that layers in the training set.</li>
<li><code>a0 = x</code> (the input layer)</li>
<li><code>a1</code> will represent the activation of the hidden neurons.</li>
<li><code>a2</code> will represent the output layer.</li>
<li>We are talking about 2 layers NN. The input layer isn’t counted.</li>
</ul>
<h3 id="Computing-a-Neural-Network’s-Output"><a href="#Computing-a-Neural-Network’s-Output" class="headerlink" title="Computing a Neural Network’s Output"></a>Computing a Neural Network’s Output</h3><ul>
<li>Equations of Hidden layers:<ul>
<li><img src="images/05.png" alt></li>
</ul>
</li>
<li>Here are some informations about the last image:<ul>
<li><code>noOfHiddenNeurons = 4</code></li>
<li><code>Nx = 3</code></li>
<li>Shapes of the variables:<ul>
<li><code>W1</code> is the matrix of the first hidden layer, it has a shape of <code>(noOfHiddenNeurons,nx)</code></li>
<li><code>b1</code> is the matrix of the first hidden layer, it has a shape of <code>(noOfHiddenNeurons,1)</code></li>
<li><code>z1</code> is the result of the equation <code>z1 = W1*X + b</code>, it has a shape of <code>(noOfHiddenNeurons,1)</code></li>
<li><code>a1</code> is the result of the equation <code>a1 = sigmoid(z1)</code>, it has a shape of <code>(noOfHiddenNeurons,1)</code></li>
<li><code>W2</code> is the matrix of the second hidden layer, it has a shape of <code>(1,noOfHiddenLayers)</code></li>
<li><code>b2</code> is the matrix of the second hidden layer, it has a shape of <code>(1,1)</code></li>
<li><code>z2</code> is the result of the equation <code>z2 = W2*a1 + b</code>, it has a shape of <code>(1,1)</code></li>
<li><code>a2</code> is the result of the equation <code>a2 = sigmoid(z2)</code>, it has a shape of <code>(1,1)</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Vectorizing-across-multiple-examples"><a href="#Vectorizing-across-multiple-examples" class="headerlink" title="Vectorizing across multiple examples"></a>Vectorizing across multiple examples</h3><ul>
<li><p>Pseudo code for forward propagation for the 2 layers NN:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for i = 1 to m</span><br><span class="line">  z[1, i] = W1*x[i] + b1      # shape of z[1, i] is (noOfHiddenNeurons,1)</span><br><span class="line">  a[1, i] = sigmoid(z[1, i])  # shape of a[1, i] is (noOfHiddenNeurons,1)</span><br><span class="line">  z[2, i] = W2*a[1, i] + b2   # shape of z[2, i] is (1,1)</span><br><span class="line">  a[2, i] = sigmoid(z[2, i])  # shape of a[2, i] is (1,1)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Lets say we have <code>X</code> on shape <code>(Nx,m)</code>. So the new pseudo code:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Z1 = W1X + b1     # shape of Z1 (noOfHiddenNeurons,m)</span><br><span class="line">A1 = sigmoid(Z1)  # shape of A1 (noOfHiddenNeurons,m)</span><br><span class="line">Z2 = W2A1 + b2    # shape of Z2 is (1,m)</span><br><span class="line">A2 = sigmoid(Z2)  # shape of A2 is (1,m)</span><br></pre></td></tr></table></figure>
</li>
<li><p>If you notice always m is the number of columns.</p>
</li>
<li><p>In the last example we can call <code>X</code> = <code>A0</code>. So the previous step can be rewritten as:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Z1 = W1A0 + b1    # shape of Z1 (noOfHiddenNeurons,m)</span><br><span class="line">A1 = sigmoid(Z1)  # shape of A1 (noOfHiddenNeurons,m)</span><br><span class="line">Z2 = W2A1 + b2    # shape of Z2 is (1,m)</span><br><span class="line">A2 = sigmoid(Z2)  # shape of A2 is (1,m)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Activation-functions"><a href="#Activation-functions" class="headerlink" title="Activation functions"></a>Activation functions</h3><ul>
<li>So far we are using sigmoid, but in some cases other functions can be a lot better.</li>
<li>Sigmoid can lead us to gradient decent problem where the updates are so low.</li>
<li>Sigmoid activation function range is [0,1]<br><code>A = 1 / (1 + np.exp(-z)) # Where z is the input matrix</code></li>
<li><p>Tanh activation function range is [-1,1]   (Shifted version of sigmoid function)</p>
<ul>
<li><p>In NumPy we can implement Tanh using one of these methods:<br><code>A = (np.exp(z) - np.exp(-z)) / (np.exp(z) + np.exp(-z)) # Where z is the input matrix</code></p>
<p>Or<br><code>A = np.tanh(z)   # Where z is the input matrix</code></p>
</li>
</ul>
</li>
<li>It turns out that the tanh activation usually works better than sigmoid activation function for hidden units because the mean of its output is closer to zero, and so it centers the data better for the next layer.</li>
<li>Sigmoid or Tanh function disadvantage is that if the input is too small or too high, the slope will be near zero which will cause us the gradient decent problem.</li>
<li>One of the popular activation functions that solved the slow gradient decent is the RELU function.<br><code>RELU = max(0,z) # so if z is negative the slope is 0 and if z is positive the slope remains linear.</code></li>
<li>So here is some basic rule for choosing activation functions, if your classification is between 0 and 1, use the output activation as sigmoid and the others as RELU.</li>
<li>Leaky RELU activation function different of RELU is that if the input is negative the slope will be so small. It works as RELU but most people uses RELU.<br><code>Leaky_RELU = max(0.01z,z)  #the 0.01 can be a parameter for your algorithm.</code></li>
<li>In NN you will decide a lot of choices like:<ul>
<li>No of hidden layers.</li>
<li>No of neurons in each hidden layer.</li>
<li>Learning rate.       (The most important parameter)</li>
<li>Activation functions.</li>
<li>And others..</li>
</ul>
</li>
<li>It turns out there are no guide lines for that. You should try all activation functions for example.</li>
</ul>
<h3 id="Why-do-you-need-non-linear-activation-functions"><a href="#Why-do-you-need-non-linear-activation-functions" class="headerlink" title="Why do you need non-linear activation functions?"></a>Why do you need non-linear activation functions?</h3><ul>
<li>If we removed the activation function from our algorithm that can be called linear activation function.</li>
<li>Linear activation function will output linear activations<ul>
<li>Whatever hidden layers you add, the activation will be always linear like logistic regression (So its useless in a lot of complex problems)</li>
</ul>
</li>
<li>You might use linear activation function in one place - in the output layer if the output is real numbers (regression problem). But even in this case if the output value is non-negative you could use RELU instead.</li>
</ul>
<h3 id="Derivatives-of-activation-functions"><a href="#Derivatives-of-activation-functions" class="headerlink" title="Derivatives of activation functions"></a>Derivatives of activation functions</h3><ul>
<li><p>Derivation of Sigmoid activation function:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">g(z) = 1 / (1 + np.exp(-z))</span><br><span class="line">g&apos;(z) = (1 / (1 + np.exp(-z))) * (1 - (1 / (1 + np.exp(-z))))</span><br><span class="line">g&apos;(z) = g(z) * (1 - g(z))</span><br></pre></td></tr></table></figure>
</li>
<li><p>Derivation of Tanh activation function:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">g(z)  = (e^z - e^-z) / (e^z + e^-z)</span><br><span class="line">g&apos;(z) = 1 - np.tanh(z)^2 = 1 - g(z)^2</span><br></pre></td></tr></table></figure>
</li>
<li><p>Derivation of RELU activation function:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">g(z)  = np.maximum(0,z)</span><br><span class="line">g&apos;(z) = &#123; 0  if z &lt; 0</span><br><span class="line">          1  if z &gt;= 0  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Derivation of leaky RELU activation function:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">g(z)  = np.maximum(0.01 * z, z)</span><br><span class="line">g&apos;(z) = &#123; 0.01  if z &lt; 0</span><br><span class="line">          1     if z &gt;= 0   &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Gradient-descent-for-Neural-Networks"><a href="#Gradient-descent-for-Neural-Networks" class="headerlink" title="Gradient descent for Neural Networks"></a>Gradient descent for Neural Networks</h3><ul>
<li>In this section we will have the full back propagation of the neural network (Just the equations with no explanations).</li>
<li><p>Gradient descent algorithm:</p>
<ul>
<li>NN parameters:<ul>
<li><code>n[0] = Nx</code></li>
<li><code>n[1] = NoOfHiddenNeurons</code></li>
<li><code>n[2] = NoOfOutputNeurons = 1</code></li>
<li><code>W1</code> shape is <code>(n[1],n[0])</code></li>
<li><code>b1</code> shape is <code>(n[1],1)</code></li>
<li><code>W2</code> shape is <code>(n[2],n[1])</code></li>
<li><code>b2</code> shape is <code>(n[2],1)</code></li>
</ul>
</li>
<li>Cost function <code>I =  I(W1, b1, W2, b2) = (1/m) * Sum(L(Y,A2))</code></li>
<li><p>Then Gradient descent:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Repeat:</span><br><span class="line">        Compute predictions (y&apos;[i], i = 0,...m)</span><br><span class="line">        Get derivatives: dW1, db1, dW2, db2</span><br><span class="line">        Update: W1 = W1 - LearningRate * dW1</span><br><span class="line">                b1 = b1 - LearningRate * db1</span><br><span class="line">                W2 = W2 - LearningRate * dW2</span><br><span class="line">                b2 = b2 - LearningRate * db2</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Forward propagation:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Z1 = W1A0 + b1    # A0 is X</span><br><span class="line">A1 = g1(Z1)</span><br><span class="line">Z2 = W2A1 + b2</span><br><span class="line">A2 = Sigmoid(Z2)      # Sigmoid because the output is between 0 and 1</span><br></pre></td></tr></table></figure>
</li>
<li><p>Back propagation (The new thing / derivations):</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dZ2 = A2 - Y      # derivative of cost function we used * derivative of the sigmoid function</span><br><span class="line">dW2 = (dZ2 * A1.T) / m</span><br><span class="line">db2 = Sum(dZ2) / m</span><br><span class="line">dZ1 = (W2.T * dZ2) * g&apos;1(Z1)  # element wise product (*)</span><br><span class="line">dW2 = (dZ1 * A0.T) / m   # A0 = X</span><br><span class="line">db2 = Sum(dZ1) / m</span><br><span class="line"># Hint there are transposes when you are trying to multiplicate because these are matrices.</span><br></pre></td></tr></table></figure>
</li>
<li><p>How we derived the 6 equations of the back propagation:</p>
<ul>
<li><img src="images/06.png" alt></li>
</ul>
</li>
</ul>
<h3 id="Random-Initialization"><a href="#Random-Initialization" class="headerlink" title="Random Initialization"></a>Random Initialization</h3><ul>
<li><p>In logistic regression it wasn’t important to initialize the weights randomly, while in NN we have to initialize them randomly.</p>
</li>
<li><p>If we initialize all the weights with zeros in NN it won’t work (initializing bias with zero is OK):</p>
<ul>
<li>all hidden units will be completely identical (symmetric) - compute exactly the same function</li>
<li>on each gradient descent iteration all the hidden units will always update the same</li>
</ul>
</li>
<li><p>To solve this we initialize the W’s with a small random numbers:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">W1 = np.random.randn((2,2)) * 0.01    # 0.01 to make it small enough</span><br><span class="line">b1 = np.zeros((2,1))                  # its ok to have b as zero, it won&apos;t get us to the symmetry breaking problem</span><br></pre></td></tr></table></figure>
</li>
<li><p>We need small values because in sigmoid (or tanh), for example, if the weight is too large you are more likely to end up even at the very start of training with very large values of Z. Which causes your tanh or your sigmoid activation function to be saturated, thus slowing down learning. If you don’t have any sigmoid or tanh activation functions throughout your neural network, this is less of an issue.</p>
</li>
<li><p>Constant 0.01 is alright for 1 hidden layer networks, but if the NN is deep this number can be changed but it will always be a small number.</p>
</li>
</ul>
<h2 id="Deep-Neural-Networks"><a href="#Deep-Neural-Networks" class="headerlink" title="Deep Neural Networks"></a>Deep Neural Networks</h2><blockquote>
<p>Understand the key computations underlying deep learning, use them to build and train deep neural networks, and apply it to computer vision.</p>
</blockquote>
<h3 id="Deep-L-layer-neural-network"><a href="#Deep-L-layer-neural-network" class="headerlink" title="Deep L-layer neural network"></a>Deep L-layer neural network</h3><ul>
<li>Shallow NN is a NN with one or two layers.</li>
<li>Deep NN is a NN with three or more layers.</li>
<li>We will use the notation <code>L</code> to denote the number of layers in a NN.</li>
<li><code>n[l]</code> is the number of neurons in a specific layer <code>l</code>.</li>
<li><code>n[0]</code> denotes the number of neurons input layer. <code>n[L]</code> denotes the number of neurons in output layer.</li>
<li><code>g[l]</code> is the activation function.</li>
<li><code>a[l] = g[l](z[l])</code></li>
<li><code>w[l]</code> weights is used for <code>z[l]</code></li>
<li><code>x = a[0]</code>, <code>a[l] = y&#39;</code></li>
<li>These were the notation we will use for deep neural network.</li>
<li>So we have:<ul>
<li>A vector <code>n</code> of shape <code>(1, NoOfLayers+1)</code></li>
<li>A vector <code>g</code> of shape <code>(1, NoOfLayers)</code></li>
<li>A list of different shapes <code>w</code> based on the number of neurons on the previous and the current layer.</li>
<li>A list of different shapes <code>b</code> based on the number of neurons on the current layer.</li>
</ul>
</li>
</ul>
<h3 id="Forward-Propagation-in-a-Deep-Network"><a href="#Forward-Propagation-in-a-Deep-Network" class="headerlink" title="Forward Propagation in a Deep Network"></a>Forward Propagation in a Deep Network</h3><ul>
<li><p>Forward propagation General rule for one input:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">z[l] = W[l]a[l-1] + b[l]</span><br><span class="line">a[l] = g[l](a[l])</span><br></pre></td></tr></table></figure>
</li>
<li><p>Forward propagation General rule for <code>m</code> inputs:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Z[l] = W[l]A[l-1] + B[l]</span><br><span class="line">A[l] = g[l](A[l])</span><br></pre></td></tr></table></figure>
</li>
<li><p>We can’t compute the whole layers forward propagation without a for loop so its OK to have a for loop here.</p>
</li>
<li>The dimensions of the matrices are so important you need to figure it out.</li>
</ul>
<h3 id="Getting-your-matrix-dimensions-right"><a href="#Getting-your-matrix-dimensions-right" class="headerlink" title="Getting your matrix dimensions right"></a>Getting your matrix dimensions right</h3><ul>
<li>The best way to debug your matrices dimensions is by a pencil and paper.</li>
<li>Dimension of <code>W</code> is <code>(n[l],n[l-1])</code> . Can be thought by Right to left.</li>
<li>Dimension of <code>b</code> is <code>(n[l],1)</code></li>
<li><code>dw</code> has the same shape as <code>W</code>, while <code>db</code> is the same shape as <code>b</code></li>
<li>Dimension of <code>Z[l],</code> <code>A[l]</code>, <code>dZ[l]</code>, and <code>dA[l]</code>  is <code>(n[l],m)</code></li>
</ul>
<h3 id="Why-deep-representations"><a href="#Why-deep-representations" class="headerlink" title="Why deep representations?"></a>Why deep representations?</h3><ul>
<li>Why deep NN works well, we will discuss this question in this section.</li>
<li>Deep NN makes relations with data from simpler to complex. In each layer it tries to make a relations between the previous layer.</li>
<li>Face recognition application:<ul>
<li>Image ==&gt; Edges ==&gt; Face parts ==&gt; Faces ==&gt; desired face</li>
</ul>
</li>
<li>Audio recognition application:<ul>
<li>Audio ==&gt; Low level sound features like (sss,bb) ==&gt; Phonemes ==&gt; Words ==&gt; Sentences</li>
</ul>
</li>
<li>Neural Researchers thinks that deep neural networks thinks like brains (Simple ==&gt; Complex)</li>
<li>Circuit theory and deep learning:<ul>
<li><img src="images/07.png" alt></li>
</ul>
</li>
<li>When starting on an application don’t start directly by dozens of hidden layers. Try the simplest solutions (L Regression) then try the parameters then try the shallow neural network and so on.</li>
</ul>
<h3 id="Building-blocks-of-deep-neural-networks"><a href="#Building-blocks-of-deep-neural-networks" class="headerlink" title="Building blocks of deep neural networks"></a>Building blocks of deep neural networks</h3><ul>
<li>Forward and back propagation for a layer l:<ul>
<li><img src="images/10.png" alt="Untitled"></li>
</ul>
</li>
<li>Deep NN blocks:<ul>
<li><img src="images/08.png" alt></li>
</ul>
</li>
</ul>
<h3 id="Forward-and-Backward-Propagation"><a href="#Forward-and-Backward-Propagation" class="headerlink" title="Forward and Backward Propagation"></a>Forward and Backward Propagation</h3><ul>
<li><p>Pseudo code for forward propagation for layer l:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input  A[l-1]</span><br><span class="line">Z[l] = W[l]A[l-1] + b[l]</span><br><span class="line">A[l] = g[l](Z[l])</span><br><span class="line">Output A[l], cache(Z[l])</span><br></pre></td></tr></table></figure>
</li>
<li><p>Pseudo  code for back propagation for layer l:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input da[l], Caches</span><br><span class="line">dZ[l] = dA[l] * g&apos;[l](Z[l])</span><br><span class="line">dW[l] = (dZ[l]A[l-1].T) / m</span><br><span class="line">db[l] = sum(dZ[l])/m                # Dont forget axis=1, keepdims=True</span><br><span class="line">dA[l-1] = w[l].T * dZ[1]            # The multiplication here are a dot product.</span><br><span class="line">Output dA[l-1], dW[l], db[l]</span><br></pre></td></tr></table></figure>
</li>
<li><p>If we have used our loss function then:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dA[L] = (-(y/a) + ((1-y)/(1-a)))</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Parameters-vs-Hyperparameters"><a href="#Parameters-vs-Hyperparameters" class="headerlink" title="Parameters vs Hyperparameters"></a>Parameters vs Hyperparameters</h3><ul>
<li>Main parameters of the NN is <code>W</code> and <code>b</code></li>
<li>Hyper parameters (parameters that control the algorithm) are like:<ul>
<li>Learning rate.</li>
<li>Number of iteration.</li>
<li>Number of hidden layers <code>L</code>.</li>
<li>Number of hidden units <code>n</code>.</li>
<li>Choice of activation functions.</li>
</ul>
</li>
<li>You have to try values yourself of hyper parameters.</li>
<li>In the old days they thought that learning rate is a parameter while now all knows its a hyper parameter.</li>
<li>On the next course we will see how to optimize hyperparameters.</li>
</ul>
<h3 id="What-does-this-have-to-do-with-the-brain"><a href="#What-does-this-have-to-do-with-the-brain" class="headerlink" title="What does this have to do with the brain"></a>What does this have to do with the brain</h3><ul>
<li>No Human today understand how a human brain neuron works.</li>
<li>No Human today know exactly how many neurons on the brain.</li>
<li>NN is a small representation of how brain work. The most near model of human brain is in the computer vision (CNN)</li>
</ul>
<h2 id="Extra-Ian-Goodfellow-interview"><a href="#Extra-Ian-Goodfellow-interview" class="headerlink" title="Extra: Ian Goodfellow interview"></a>Extra: Ian Goodfellow interview</h2><ul>
<li>Ian is one of the world’s most visible deep learning researchers.</li>
<li>Ian is mainly working with generative models. He is the creator of GANs.</li>
<li>We need to stabilize GANs. Stabilized GANs can become the best generative models.</li>
<li>Ian wrote the first textbook on the modern version of deep learning with Yoshua Bengio and Aaron Courville.</li>
<li>Ian worked with <a href="OpenAI.com">OpenAI.com</a> and Google on ML and NN applications.</li>
<li>Ian tells all who wants to get into AI to get a Ph.D. or post your code on Github and the companies will find you.</li>
<li>Ian thinks that we need to start anticipating security problems with ML now and make sure that these algorithms are secure from the start instead of trying to patch it in retroactively years later.</li>
</ul>
<p><br><br><br><br><br><br>These Notes were made by <a href="mailto:mma18@fayoum.edu.eg" target="_blank" rel="noopener">Mahmoud Badry</a> @2017</p>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Course Note</tag>
        <tag>Project</tag>
      </tags>
  </entry>
  <entry>
    <title>Trigger word detection</title>
    <url>/Trigger-word-detection/2019/03/29/</url>
    <content><![CDATA[<h2 id="Trigger-Word-Detection"><a href="#Trigger-Word-Detection" class="headerlink" title="Trigger Word Detection"></a>Trigger Word Detection</h2><p>Welcome to the final programming assignment of this specialization! </p>
<p>In this week’s videos, you learned about applying deep learning to speech recognition. In this assignment, you will construct a speech dataset and implement an algorithm for trigger word detection (sometimes also called keyword detection, or wakeword detection). Trigger word detection is the technology that allows devices like Amazon Alexa, Google Home, Apple Siri, and Baidu DuerOS to wake up upon hearing a certain word.  </p>
<p>For this exercise, our trigger word will be “Activate.” Every time it hears you say “activate,” it will make a “chiming” sound. By the end of this assignment, you will be able to record a clip of yourself talking, and have the algorithm trigger a chime when it detects you saying “activate.” </p>
<p>After completing this assignment, perhaps you can also extend it to run on your laptop so that every time you say “activate” it starts up your favorite app, or turns on a network connected lamp in your house, or triggers some other event? </p>
<p><img src="images/sound.png" style="width:1000px;height:150px;"></p>
<p>In this assignment you will learn to: </p>
<ul>
<li>Structure a speech recognition project</li>
<li>Synthesize and process audio recordings to create train/dev datasets</li>
<li>Train a trigger word detection model and make predictions</li>
</ul>
<p>Lets get started! Run the following cell to load the package you are going to use.    </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> pydub <span class="keyword">import</span> AudioSegment</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> IPython</span><br><span class="line"><span class="keyword">from</span> td_utils <span class="keyword">import</span> *</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure>
<h1 id="1-Data-synthesis-Creating-a-speech-dataset"><a href="#1-Data-synthesis-Creating-a-speech-dataset" class="headerlink" title="1 - Data synthesis: Creating a speech dataset"></a>1 - Data synthesis: Creating a speech dataset</h1><p>Let’s start by building a dataset for your trigger word detection algorithm. A speech dataset should ideally be as close as possible to the application you will want to run it on. In this case, you’d like to detect the word “activate” in working environments (library, home, offices, open-spaces …). You thus need to create recordings with a mix of positive words (“activate”) and negative words (random words other than activate) on different background sounds. Let’s see how you can create such a dataset. </p>
<h2 id="1-1-Listening-to-the-data"><a href="#1-1-Listening-to-the-data" class="headerlink" title="1.1 - Listening to the data"></a>1.1 - Listening to the data</h2><p>One of your friends is helping you out on this project, and they’ve gone to libraries, cafes, restaurants, homes and offices all around the region to record background noises, as well as snippets of audio of people saying positive/negative words. This dataset includes people speaking in a variety of accents. </p>
<p>In the raw_data directory, you can find a subset of the raw audio files of the positive words, negative words, and background noise. You will use these audio files to synthesize a dataset to train the model. The “activate” directory contains positive examples of people saying the word “activate”. The “negatives” directory contains negative examples of people saying random words other than “activate”. There is one word per audio recording. The “backgrounds” directory contains 10 second clips of background noise in different environments.</p>
<p>Run the cells below to listen to some examples.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">IPython.display.Audio(<span class="string">"./raw_data/activates/1.wav"</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">IPython.display.Audio(<span class="string">"./raw_data/negatives/4.wav"</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">IPython.display.Audio(<span class="string">"./raw_data/backgrounds/1.wav"</span>)</span><br></pre></td></tr></table></figure>
<p>You will use these three type of recordings (positives/negatives/backgrounds) to create a labelled dataset.</p>
<h2 id="1-2-From-audio-recordings-to-spectrograms"><a href="#1-2-From-audio-recordings-to-spectrograms" class="headerlink" title="1.2 - From audio recordings to spectrograms"></a>1.2 - From audio recordings to spectrograms</h2><p>What really is an audio recording? A microphone records little variations in air pressure over time, and it is these little variations in air pressure that your ear also perceives as sound. You can think of an audio recording is a long list of numbers measuring the little air pressure changes detected by the microphone. We will use audio sampled at 44100 Hz (or 44100 Hertz). This means the microphone gives us 44100 numbers per second. Thus, a 10 second audio clip is represented by 441000 numbers (= $10 \times 44100$). </p>
<p>It is quite difficult to figure out from this “raw” representation of audio whether the word “activate” was said. In  order to help your sequence model more easily learn to detect triggerwords, we will compute a <em>spectrogram</em> of the audio. The spectrogram tells us how much different frequencies are present in an audio clip at a moment in time. </p>
<p>(If you’ve ever taken an advanced class on signal processing or on Fourier transforms, a spectrogram is computed by sliding a window over the raw audio signal, and calculates the most active frequencies in each window using a Fourier transform. If you don’t understand the previous sentence, don’t worry about it.) </p>
<p>Lets see an example. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">IPython.display.Audio(<span class="string">"audio_examples/example_train.wav"</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = graph_spectrogram(<span class="string">"audio_examples/example_train.wav"</span>)</span><br></pre></td></tr></table></figure>
<p><img src="images/output_9_0.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x</span><br></pre></td></tr></table></figure>
<pre><code>array([[  9.20850313e-08,   4.94545058e-01,   9.88447548e+01, ...,
          2.30894224e-03,   4.91766839e-02,   3.50139219e-01],
       [  1.80512628e-07,   1.00418722e+00,   1.18114390e+02, ...,
          3.28274988e-02,   1.63775223e-01,   2.46378304e-01],
       [  1.69854057e-07,   9.54327257e-01,   1.84377595e+02, ...,
          3.10392369e-01,   1.30484879e+00,   8.80165188e-01],
       ..., 
       [  2.16098310e-07,   5.44274404e-05,   2.88564585e-05, ...,
          1.51337049e-04,   1.92541456e-05,   4.46536973e-05],
       [  2.25828769e-07,   1.96743381e-05,   3.15255813e-05, ...,
          3.30137333e-04,   4.54464074e-05,   2.49749955e-05],
       [  1.14628741e-07,   1.09958935e-07,   6.32568913e-05, ...,
          1.75251216e-04,   9.53804196e-06,   2.46519606e-05]])
</code></pre><p>The graph above represents how active each frequency is (y axis) over a number of time-steps (x axis). </p>
<p><img src="images/spectrogram.png" style="width:500px;height:200px;"></p>
<center> **Figure 1**: Spectrogram of an audio recording, where the color shows the degree to which different frequencies are present (loud) in the audio at different points in time. Green squares means a certain frequency is more active or more present in the audio clip (louder); blue squares denote less active frequencies. </center>

<p>The dimension of the output spectrogram depends upon the hyperparameters of the spectrogram software and the length of the input. In this notebook, we will be working with 10 second audio clips as the “standard length” for our training examples. The number of timesteps of the spectrogram will be 5511. You’ll see later that the spectrogram will be the input $x$ into the network, and so $T_x = 5511$.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_, data = wavfile.read(<span class="string">"audio_examples/example_train.wav"</span>)</span><br><span class="line">print(<span class="string">"Time steps in audio recording before spectrogram"</span>, data[:,<span class="number">0</span>].shape)</span><br><span class="line">print(<span class="string">"Time steps in input after spectrogram"</span>, x.shape)</span><br></pre></td></tr></table></figure>
<pre><code>Time steps in audio recording before spectrogram (441000,)
Time steps in input after spectrogram (101, 5511)
</code></pre><p>Now, you can define:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Tx = <span class="number">5511</span> <span class="comment"># The number of time steps input to the model from the spectrogram</span></span><br><span class="line">n_freq = <span class="number">101</span> <span class="comment"># Number of frequencies input to the model at each time step of the spectrogram</span></span><br></pre></td></tr></table></figure>
<p>Note that even with 10 seconds being our default training example length, 10 seconds of time can be discretized to different numbers of value. You’ve seen 441000 (raw audio) and 5511 (spectrogram). In the former case, each step represents $10/441000 \approx 0.000023$ seconds. In the second case, each step represents $10/5511 \approx 0.0018$ seconds. </p>
<p>For the 10sec of audio, the key values you will see in this assignment are:</p>
<ul>
<li>$441000$ (raw audio)</li>
<li>$5511 = T_x$ (spectrogram output, and dimension of input to the neural network). </li>
<li>$10000$ (used by the <code>pydub</code> module to synthesize audio) </li>
<li>$1375 = T_y$ (the number of steps in the output of the GRU you’ll build). </li>
</ul>
<p>Note that each of these representations correspond to exactly 10 seconds of time. It’s just that they are discretizing them to different degrees. All of these are hyperparameters and can be changed (except the 441000, which is a function of the microphone). We have chosen values that are within the standard ranges uses for speech systems. </p>
<p>Consider the $T_y = 1375$ number above. This means that for the output of the model, we discretize the 10s into 1375 time-intervals (each one of length $10/1375 \approx 0.0072$s) and try to predict for each of these intervals whether someone recently finished saying “activate.” </p>
<p>Consider also the 10000 number above. This corresponds to discretizing the 10sec clip into 10/10000 = 0.001 second itervals. 0.001 seconds is also called 1 millisecond, or 1ms. So when we say we are discretizing according to 1ms intervals, it means we are using 10,000 steps. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Ty = <span class="number">1375</span> <span class="comment"># The number of time steps in the output of our model</span></span><br></pre></td></tr></table></figure>
<h2 id="1-3-Generating-a-single-training-example"><a href="#1-3-Generating-a-single-training-example" class="headerlink" title="1.3 - Generating a single training example"></a>1.3 - Generating a single training example</h2><p>Because speech data is hard to acquire and label, you will synthesize your training data using the audio clips of activates, negatives, and backgrounds. It is quite slow to record lots of 10 second audio clips with random “activates” in it. Instead, it is easier to record lots of positives and negative words, and record background noise separately (or download background noise from free online sources). </p>
<p>To synthesize a single training example, you will:</p>
<ul>
<li>Pick a random 10 second background audio clip</li>
<li>Randomly insert 0-4 audio clips of “activate” into this 10sec clip</li>
<li>Randomly insert 0-2 audio clips of negative words into this 10sec clip</li>
</ul>
<p>Because you had synthesized the word “activate” into the background clip, you know exactly when in the 10sec clip the “activate” makes its appearance. You’ll see later that this makes it easier to generate the labels $y^{\langle t \rangle}$ as well. </p>
<p>You will use the pydub package to manipulate audio. Pydub converts raw audio files into lists of Pydub data structures (it is not important to know the details here). Pydub uses 1ms as the discretization interval (1ms is 1 millisecond = 1/1000 seconds) which is why a 10sec clip is always represented using 10,000 steps. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Load audio segments using pydub </span></span><br><span class="line">activates, negatives, backgrounds = load_raw_audio()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"background len: "</span> + str(len(backgrounds[<span class="number">0</span>])))    <span class="comment"># Should be 10,000, since it is a 10 sec clip</span></span><br><span class="line">print(<span class="string">"activate[0] len: "</span> + str(len(activates[<span class="number">0</span>])))     <span class="comment"># Maybe around 1000, since an "activate" audio clip is usually around 1 sec (but varies a lot)</span></span><br><span class="line">print(<span class="string">"activate[1] len: "</span> + str(len(activates[<span class="number">1</span>])))     <span class="comment"># Different "activate" clips can have different lengths</span></span><br></pre></td></tr></table></figure>
<pre><code>background len: 10000
activate[0] len: 916
activate[1] len: 1579
</code></pre><p><strong>Overlaying positive/negative words on the background</strong>:</p>
<p>Given a 10sec background clip and a short audio clip (positive or negative word), you need to be able to “add” or “insert” the word’s short audio clip onto the background. To ensure audio segments inserted onto the background do not overlap, you will keep track of the times of previously inserted audio clips. You will be inserting multiple clips of positive/negative words onto the background, and you don’t want to insert an “activate” or a random word somewhere that overlaps with another clip you had previously added. </p>
<p>For clarity, when you insert a 1sec “activate” onto a 10sec clip of cafe noise, you end up with a 10sec clip that sounds like someone sayng “activate” in a cafe, with “activate” superimposed on the background cafe noise. You do <em>not</em> end up with an 11 sec clip. You’ll see later how pydub allows you to do this. </p>
<p><strong>Creating the labels at the same time you overlay</strong>:</p>
<p>Recall also that the labels $y^{\langle t \rangle}$ represent whether or not someone has just finished saying “activate.” Given a background clip, we can initialize $y^{\langle t \rangle}=0$ for all $t$, since the clip doesn’t contain any “activates.” </p>
<p>When you insert or overlay an “activate” clip, you will also update labels for $y^{\langle t \rangle}$, so that 50 steps of the output now have target label 1. You will train a GRU to detect when someone has <em>finished</em> saying “activate”. For example, suppose the synthesized “activate” clip ends at the 5sec mark in the 10sec audio—-exactly halfway into the clip. Recall that $T_y = 1375$, so timestep $687 = $ <code>int(1375*0.5)</code> corresponds to the moment at 5sec into the audio. So, you will set $y^{\langle 688 \rangle} = 1$. Further, you would quite satisfied if the GRU detects “activate” anywhere within a short time-internal after this moment, so we actually set 50 consecutive values of the label $y^{\langle t \rangle}$ to 1. Specifically, we have $y^{\langle 688 \rangle} = y^{\langle 689 \rangle} = \cdots = y^{\langle 737 \rangle} = 1$.  </p>
<p>This is another reason for synthesizing the training data: It’s relatively straightforward to generate these labels $y^{\langle t \rangle}$ as described above. In contrast, if you have 10sec of audio recorded on a microphone, it’s quite time consuming for a person to listen to it and mark manually exactly when “activate” finished. </p>
<p>Here’s a figure illustrating the labels $y^{\langle t \rangle}$, for a clip which we have inserted “activate”, “innocent”, activate”, “baby.” Note that the positive labels “1” are associated only with the positive words. </p>
<p><img src="images/label_diagram.png" style="width:500px;height:200px;"></p>
<center> **Figure 2** </center>

<p>To implement the training set synthesis process, you will use the following helper functions. All of these function will use a 1ms discretization interval, so the 10sec of audio is alwsys discretized into 10,000 steps. </p>
<ol>
<li><code>get_random_time_segment(segment_ms)</code> gets a random time segment in our background audio</li>
<li><code>is_overlapping(segment_time, existing_segments)</code> checks if a time segment overlaps with existing segments</li>
<li><code>insert_audio_clip(background, audio_clip, existing_times)</code> inserts an audio segment at a random time in our background audio using <code>get_random_time_segment</code> and <code>is_overlapping</code></li>
<li><code>insert_ones(y, segment_end_ms)</code> inserts 1’s into our label vector y after the word “activate”</li>
</ol>
<p>The function <code>get_random_time_segment(segment_ms)</code> returns a random time segment onto which we can insert an audio clip of duration <code>segment_ms</code>. Read through the code to make sure you understand what it is doing. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_random_time_segment</span><span class="params">(segment_ms)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Gets a random time segment of duration segment_ms in a 10,000 ms audio clip.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    segment_ms -- the duration of the audio clip in ms ("ms" stands for "milliseconds")</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    segment_time -- a tuple of (segment_start, segment_end) in ms</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    segment_start = np.random.randint(low=<span class="number">0</span>, high=<span class="number">10000</span>-segment_ms)   <span class="comment"># Make sure segment doesn't run past the 10sec background </span></span><br><span class="line">    segment_end = segment_start + segment_ms - <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (segment_start, segment_end)</span><br></pre></td></tr></table></figure>
<p>Next, suppose you have inserted audio clips at segments (1000,1800) and (3400,4500). I.e., the first segment starts at step 1000, and ends at step 1800. Now, if we are considering inserting a new audio clip at (3000,3600) does this overlap with one of the previously inserted segments? In this case, (3000,3600) and (3400,4500) overlap, so we should decide against inserting a clip here. </p>
<p>For the purpose of this function, define (100,200) and (200,250) to be overlapping, since they overlap at timestep 200. However, (100,199) and (200,250) are non-overlapping. </p>
<p><strong>Exercise</strong>: Implement <code>is_overlapping(segment_time, existing_segments)</code> to check if a new time segment overlaps with any of the previous segments. You will need to carry out 2 steps:</p>
<ol>
<li>Create a “False” flag, that you will later set to “True” if you find that there is an overlap.</li>
<li>Loop over the previous_segments’ start and end times. Compare these times to the segment’s start and end times. If there is an overlap, set the flag defined in (1) as True. You can use:<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ....:</span><br><span class="line">        <span class="keyword">if</span> ... &lt;= ... <span class="keyword">and</span> ... &gt;= ...:</span><br><span class="line">            ...</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>Hint: There is overlap if the segment starts before the previous segment ends, and the segment ends after the previous segment starts.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: is_overlapping</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_overlapping</span><span class="params">(segment_time, previous_segments)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Checks if the time of a segment overlaps with the times of existing segments.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    segment_time -- a tuple of (segment_start, segment_end) for the new segment</span></span><br><span class="line"><span class="string">    previous_segments -- a list of tuples of (segment_start, segment_end) for the existing segments</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    True if the time segment overlaps with any of the existing segments, False otherwise</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    segment_start, segment_end = segment_time</span><br><span class="line">    </span><br><span class="line">    <span class="comment">### START CODE HERE ### (≈ 4 line)</span></span><br><span class="line">    <span class="comment"># Step 1: Initialize overlap as a "False" flag. (≈ 1 line)</span></span><br><span class="line">    overlap = <span class="keyword">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Step 2: loop over the previous_segments start and end times.</span></span><br><span class="line">    <span class="comment"># Compare start/end times and set the flag to True if there is an overlap (≈ 3 lines)</span></span><br><span class="line">    <span class="keyword">for</span> previous_start, previous_end <span class="keyword">in</span> previous_segments:</span><br><span class="line">        <span class="keyword">if</span> segment_start &lt;= previous_end <span class="keyword">and</span> segment_end &gt;= previous_start:</span><br><span class="line">            overlap = <span class="keyword">True</span></span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> overlap</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">overlap1 = is_overlapping((<span class="number">950</span>, <span class="number">1430</span>), [(<span class="number">2000</span>, <span class="number">2550</span>), (<span class="number">260</span>, <span class="number">949</span>)])</span><br><span class="line">overlap2 = is_overlapping((<span class="number">2305</span>, <span class="number">2950</span>), [(<span class="number">824</span>, <span class="number">1532</span>), (<span class="number">1900</span>, <span class="number">2305</span>), (<span class="number">3424</span>, <span class="number">3656</span>)])</span><br><span class="line">print(<span class="string">"Overlap 1 = "</span>, overlap1)</span><br><span class="line">print(<span class="string">"Overlap 2 = "</span>, overlap2)</span><br></pre></td></tr></table></figure>
<pre><code>Overlap 1 =  False
Overlap 2 =  True
</code></pre><p><strong>Expected Output</strong>:</p>
<table>
    <tr>
        <td>
            **Overlap 1**
        </td>
        <td>
           False
        </td>
    </tr>
    <tr>
        <td>
            **Overlap 2**
        </td>
        <td>
           True
        </td>
    </tr>
</table>

<p>Now, lets use the previous helper functions to insert a new audio clip onto the 10sec background at a random time, but making sure that any newly inserted segment doesn’t overlap with the previous segments. </p>
<p><strong>Exercise</strong>: Implement <code>insert_audio_clip()</code> to overlay an audio clip onto the background 10sec clip. You will need to carry out 4 steps:</p>
<ol>
<li>Get a random time segment of the right duration in ms.</li>
<li>Make sure that the time segment does not overlap with any of the previous time segments. If it is overlapping, then go back to step 1 and pick a new time segment.</li>
<li>Add the new time segment to the list of existing time segments, so as to keep track of all the segments you’ve inserted.  </li>
<li>Overlay the audio clip over the background using pydub. We have implemented this for you.</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: insert_audio_clip</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_audio_clip</span><span class="params">(background, audio_clip, previous_segments)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Insert a new audio segment over the background noise at a random time step, ensuring that the </span></span><br><span class="line"><span class="string">    audio segment does not overlap with existing segments.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    background -- a 10 second background audio recording.  </span></span><br><span class="line"><span class="string">    audio_clip -- the audio clip to be inserted/overlaid. </span></span><br><span class="line"><span class="string">    previous_segments -- times where audio segments have already been placed</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    new_background -- the updated background audio</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Get the duration of the audio clip in ms</span></span><br><span class="line">    segment_ms = len(audio_clip)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">### START CODE HERE ### </span></span><br><span class="line">    <span class="comment"># Step 1: Use one of the helper functions to pick a random time segment onto which to insert </span></span><br><span class="line">    <span class="comment"># the new audio clip. (≈ 1 line)</span></span><br><span class="line">    segment_time = get_random_time_segment(segment_ms)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Step 2: Check if the new segment_time overlaps with one of the previous_segments. If so, keep </span></span><br><span class="line">    <span class="comment"># picking new segment_time at random until it doesn't overlap. (≈ 2 lines)</span></span><br><span class="line">    <span class="keyword">while</span> is_overlapping(segment_time, previous_segments):</span><br><span class="line">        segment_time = get_random_time_segment(segment_ms)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Step 3: Add the new segment_time to the list of previous_segments (≈ 1 line)</span></span><br><span class="line">    previous_segments.append(segment_time)</span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Step 4: Superpose audio segment and background</span></span><br><span class="line">    new_background = background.overlay(audio_clip, position = segment_time[<span class="number">0</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> new_background, segment_time</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.seed(<span class="number">5</span>)</span><br><span class="line">audio_clip, segment_time = insert_audio_clip(backgrounds[<span class="number">0</span>], activates[<span class="number">0</span>], [(<span class="number">3790</span>, <span class="number">4400</span>)])</span><br><span class="line">audio_clip.export(<span class="string">"insert_test.wav"</span>, format=<span class="string">"wav"</span>)</span><br><span class="line">print(<span class="string">"Segment Time: "</span>, segment_time)</span><br><span class="line">IPython.display.Audio(<span class="string">"insert_test.wav"</span>)</span><br></pre></td></tr></table></figure>
<pre><code>Segment Time:  (2254, 3169)
</code></pre><p><strong>Expected Output</strong></p>
<table>
    <tr>
        <td>
            **Segment Time**
        </td>
        <td>
           (2254, 3169)
        </td>
    </tr>
</table>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Expected audio</span></span><br><span class="line">IPython.display.Audio(<span class="string">"audio_examples/insert_reference.wav"</span>)</span><br></pre></td></tr></table></figure>
<p>Finally, implement code to update the labels $y^{\langle t \rangle}$, assuming you just inserted an “activate.” In the code below, <code>y</code> is a <code>(1,1375)</code> dimensional vector, since $T_y = 1375$. </p>
<p>If the “activate” ended at time step $t$, then set $y^{\langle t+1 \rangle} = 1$ as well as for up to 49 additional consecutive values. However, make sure you don’t run off the end of the array and try to update <code>y[0][1375]</code>, since the valid indices are <code>y[0][0]</code> through <code>y[0][1374]</code> because $T_y = 1375$. So if “activate” ends at step 1370, you would get only <code>y[0][1371] = y[0][1372] = y[0][1373] = y[0][1374] = 1</code></p>
<p><strong>Exercise</strong>: Implement <code>insert_ones()</code>. You can use a for loop. (If you are an expert in python’s slice operations, feel free also to use slicing to vectorize this.) If a segment ends at <code>segment_end_ms</code> (using a 10000 step discretization), to convert it to the indexing for the outputs $y$ (using a $1375$ step discretization), we will use this formula:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">segment_end_y = int(segment_end_ms * Ty / 10000.0)</span><br></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: insert_ones</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_ones</span><span class="params">(y, segment_end_ms)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Update the label vector y. The labels of the 50 output steps strictly after the end of the segment </span></span><br><span class="line"><span class="string">    should be set to 1. By strictly we mean that the label of segment_end_y should be 0 while, the</span></span><br><span class="line"><span class="string">    50 followinf labels should be ones.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    y -- numpy array of shape (1, Ty), the labels of the training example</span></span><br><span class="line"><span class="string">    segment_end_ms -- the end time of the segment in ms</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    y -- updated labels</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># duration of the background (in terms of spectrogram time-steps)</span></span><br><span class="line">    segment_end_y = int(segment_end_ms * Ty / <span class="number">10000.0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Add 1 to the correct index in the background label (y)</span></span><br><span class="line">    <span class="comment">### START CODE HERE ### (≈ 3 lines)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(segment_end_y+<span class="number">1</span>, segment_end_y+<span class="number">51</span>):</span><br><span class="line">        <span class="keyword">if</span> i &lt; Ty:</span><br><span class="line">            y[<span class="number">0</span>, i] = <span class="number">1.0</span></span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> y</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr1 = insert_ones(np.zeros((<span class="number">1</span>, Ty)), <span class="number">9700</span>)</span><br><span class="line">plt.plot(insert_ones(arr1, <span class="number">4251</span>)[<span class="number">0</span>,:])</span><br><span class="line">print(<span class="string">"sanity checks:"</span>, arr1[<span class="number">0</span>][<span class="number">1333</span>], arr1[<span class="number">0</span>][<span class="number">634</span>], arr1[<span class="number">0</span>][<span class="number">635</span>])</span><br></pre></td></tr></table></figure>
<pre><code>sanity checks: 0.0 1.0 0.0
</code></pre><p><img src="images/output_33_1.png" alt="png"></p>
<p><strong>Expected Output</strong></p>
<table>
    <tr>
        <td>
            **sanity checks**:
        </td>
        <td>
           0.0 1.0 0.0
        </td>
    </tr>
</table>
<img src="images/ones_reference.png" style="width:320;height:240px;">

Finally, you can use `insert_audio_clip` and `insert_ones` to create a new training example.

**Exercise**: Implement `create_training_example()`. You will need to carry out the following steps:

1. Initialize the label vector $y$ as a numpy array of zeros and shape $(1, T_y)$.
2. Initialize the set of existing segments to an empty list.
3. Randomly select 0 to 4 "activate" audio clips, and insert them onto the 10sec clip. Also insert labels at the correct position in the label vector $y$.
4. Randomly select 0 to 2 negative audio clips, and insert them into the 10sec clip. 



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: create_training_example</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_training_example</span><span class="params">(background, activates, negatives)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Creates a training example with a given background, activates, and negatives.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    background -- a 10 second background audio recording</span></span><br><span class="line"><span class="string">    activates -- a list of audio segments of the word "activate"</span></span><br><span class="line"><span class="string">    negatives -- a list of audio segments of random words that are not "activate"</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    x -- the spectrogram of the training example</span></span><br><span class="line"><span class="string">    y -- the label at each time step of the spectrogram</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Set the random seed</span></span><br><span class="line">    np.random.seed(<span class="number">18</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Make background quieter</span></span><br><span class="line">    background = background - <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    <span class="comment"># Step 1: Initialize y (label vector) of zeros (≈ 1 line)</span></span><br><span class="line">    y = np.zeros((<span class="number">1</span>,Ty))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Step 2: Initialize segment times as empty list (≈ 1 line)</span></span><br><span class="line">    previous_segments = []</span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Select 0-4 random "activate" audio clips from the entire list of "activates" recordings</span></span><br><span class="line">    number_of_activates = np.random.randint(<span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line">    random_indices = np.random.randint(len(activates), size=number_of_activates)</span><br><span class="line">    random_activates = [activates[i] <span class="keyword">for</span> i <span class="keyword">in</span> random_indices]</span><br><span class="line">    </span><br><span class="line">    <span class="comment">### START CODE HERE ### (≈ 3 lines)</span></span><br><span class="line">    <span class="comment"># Step 3: Loop over randomly selected "activate" clips and insert in background</span></span><br><span class="line">    <span class="keyword">for</span> random_activate <span class="keyword">in</span> random_activates:</span><br><span class="line">        <span class="comment"># Insert the audio clip on the background</span></span><br><span class="line">        background, segment_time =  insert_audio_clip(background, random_activate, previous_segments)</span><br><span class="line">        <span class="comment"># Retrieve segment_start and segment_end from segment_time</span></span><br><span class="line">        segment_start, segment_end =  segment_time</span><br><span class="line">        <span class="comment"># Insert labels in "y"</span></span><br><span class="line">        y = insert_ones(y, segment_end)</span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Select 0-2 random negatives audio recordings from the entire list of "negatives" recordings</span></span><br><span class="line">    number_of_negatives = np.random.randint(<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line">    random_indices = np.random.randint(len(negatives), size=number_of_negatives)</span><br><span class="line">    random_negatives = [negatives[i] <span class="keyword">for</span> i <span class="keyword">in</span> random_indices]</span><br><span class="line"></span><br><span class="line">    <span class="comment">### START CODE HERE ### (≈ 2 lines)</span></span><br><span class="line">    <span class="comment"># Step 4: Loop over randomly selected negative clips and insert in background</span></span><br><span class="line">    <span class="keyword">for</span> random_negative <span class="keyword">in</span> random_negatives:</span><br><span class="line">        <span class="comment"># Insert the audio clip on the background </span></span><br><span class="line">        background, _ = insert_audio_clip(background, random_negative, previous_segments)</span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Standardize the volume of the audio clip </span></span><br><span class="line">    background = match_target_amplitude(background, <span class="number">-20.0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Export new training example </span></span><br><span class="line">    file_handle = background.export(<span class="string">"train"</span> + <span class="string">".wav"</span>, format=<span class="string">"wav"</span>)</span><br><span class="line">    print(<span class="string">"File (train.wav) was saved in your directory."</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Get and plot spectrogram of the new recording (background with superposition of positive and negatives)</span></span><br><span class="line">    x = graph_spectrogram(<span class="string">"train.wav"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> x, y</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x, y = create_training_example(backgrounds[<span class="number">0</span>], activates, negatives)</span><br></pre></td></tr></table></figure>

    File (train.wav) was saved in your directory.



![png](output_37_1.png)


**Expected Output**
<img src="images/train_reference.png" style="width:320;height:240px;">

Now you can listen to the training example you created and compare it to the spectrogram generated above.


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">IPython.display.Audio(<span class="string">"train.wav"</span>)</span><br></pre></td></tr></table></figure>





**Expected Output**


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">IPython.display.Audio(<span class="string">"audio_examples/train_reference.wav"</span>)</span><br></pre></td></tr></table></figure>





Finally, you can plot the associated labels for the generated training example.


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.plot(y[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

    [<matplotlib.lines.line2d at 0x7f717da726a0>]




![png](output_44_1.png)


**Expected Output**
<img src="images/train_label.png" style="width:320;height:240px;">

## 1.4 - Full training set

You've now implemented the code needed to generate a single training example. We used this process to generate a large training set. To save time, we've already generated a set of training examples. 


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Load preprocessed training examples</span></span><br><span class="line">X = np.load(<span class="string">"./XY_train/X.npy"</span>)</span><br><span class="line">Y = np.load(<span class="string">"./XY_train/Y.npy"</span>)</span><br></pre></td></tr></table></figure>

## 1.5 - Development set

To test our model, we recorded a development set of 25 examples. While our training data is synthesized, we want to create a development set using the same distribution as the real inputs. Thus, we recorded 25 10-second audio clips of people saying "activate" and other random words, and labeled them by hand. This follows the principle described in Course 3 that we should create the dev set to be as similar as possible to the test set distribution; that's why our dev set uses real rather than synthesized audio. 



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Load preprocessed dev set examples</span></span><br><span class="line">X_dev = np.load(<span class="string">"./XY_dev/X_dev.npy"</span>)</span><br><span class="line">Y_dev = np.load(<span class="string">"./XY_dev/Y_dev.npy"</span>)</span><br></pre></td></tr></table></figure>

# 2 - Model

Now that you've built a dataset, lets write and train a trigger word detection model! 

The model will use 1-D convolutional layers, GRU layers, and dense layers. Let's load the packages that will allow you to use these layers in Keras. This might take a minute to load. 


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.callbacks <span class="keyword">import</span> ModelCheckpoint</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Model, load_model, Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense, Activation, Dropout, Input, Masking, TimeDistributed, LSTM, Conv1D</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> GRU, Bidirectional, BatchNormalization, Reshape</span><br><span class="line"><span class="keyword">from</span> keras.optimizers <span class="keyword">import</span> Adam</span><br></pre></td></tr></table></figure>

## 2.1 - Build the model

Here is the architecture we will use. Take some time to look over the model and see if it makes sense. 

<img src="images/model.png" style="width:600px;height:600px;">
<center> **Figure 3** </center>

One key step of this model is the 1D convolutional step (near the bottom of Figure 3). It inputs the 5511 step spectrogram, and outputs a 1375 step output, which is then further processed by multiple layers to get the final $T_y = 1375$ step output. This layer plays a role similar to the 2D convolutions you saw in Course 4, of extracting low-level features and then possibly generating an output of a smaller dimension. 

Computationally, the 1-D conv layer also helps speed up the model because now the GRU  has to process only 1375 timesteps rather than 5511 timesteps. The two GRU layers read the sequence of inputs from left to right, then ultimately uses a dense+sigmoid layer to make a prediction for $y^{\langle t \rangle}$. Because $y$ is binary valued (0 or 1), we use a sigmoid output at the last layer to estimate the chance of the output being 1, corresponding to the user having just said "activate."

Note that we use a uni-directional RNN rather than a bi-directional RNN. This is really important for trigger word detection, since we want to be able to detect the trigger word almost immediately after it is said. If we used a bi-directional RNN, we would have to wait for the whole 10sec of audio to be recorded before we could tell if "activate" was said in the first second of the audio clip.  


Implementing the model can be done in four steps:

**Step 1**: CONV layer. Use `Conv1D()` to implement this, with 196 filters, 
a filter size of 15 (`kernel_size=15`), and stride of 4. [[See documentation.](https://keras.io/layers/convolutional/#conv1d)]

**Step 2**: First GRU layer. To generate the GRU layer, use:
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">X = GRU(units = 128, return_sequences = True)(X)</span><br></pre></td></tr></table></figure>

Setting `return_sequences=True` ensures that all the GRU's hidden states are fed to the next layer. Remember to follow this with Dropout and BatchNorm layers. 

**Step 3**: Second GRU layer. This is similar to the previous GRU layer (remember to use `return_sequences=True`), but has an extra dropout layer. 

**Step 4**: Create a time-distributed dense layer as follows: 
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">X = TimeDistributed(Dense(1, activation = &quot;sigmoid&quot;))(X)</span><br></pre></td></tr></table></figure>

This creates a dense layer followed by a sigmoid, so that the parameters used for the dense layer are the same for every time step. [[See documentation](https://keras.io/layers/wrappers/).]

**Exercise**: Implement `model()`, the architecture is presented in Figure 3.


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: model</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">model</span><span class="params">(input_shape)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Function creating the model's graph in Keras.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Argument:</span></span><br><span class="line"><span class="string">    input_shape -- shape of the model's input data (using Keras conventions)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    model -- Keras model instance</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    X_input = Input(shape = input_shape)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Step 1: CONV layer (≈4 lines)</span></span><br><span class="line">    X = Conv1D(filters = <span class="number">196</span>, kernel_size=<span class="number">15</span>,strides=<span class="number">4</span>)(X_input)        <span class="comment"># CONV1D</span></span><br><span class="line">    X = BatchNormalization()(X)                                <span class="comment"># Batch normalization</span></span><br><span class="line">    X = Activation(<span class="string">'relu'</span>)(X)                                  <span class="comment"># ReLu activation</span></span><br><span class="line">    X = Dropout(<span class="number">0.8</span>)(X) </span><br><span class="line"></span><br><span class="line">    <span class="comment"># Step 2: First GRU Layer (≈4 lines)</span></span><br><span class="line">    X = GRU(units = <span class="number">128</span>, return_sequences=<span class="keyword">True</span>)(X)                                 <span class="comment"># GRU (use 128 units and return the sequences)</span></span><br><span class="line">    X = Dropout(<span class="number">0.8</span>)(X)                                 <span class="comment"># dropout (use 0.8)</span></span><br><span class="line">    X = BatchNormalization()(X)                                   <span class="comment"># Batch normalization</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Step 3: Second GRU Layer (≈4 lines)</span></span><br><span class="line">    X = GRU(units = <span class="number">128</span>, return_sequences=<span class="keyword">True</span>)(X)       <span class="comment"># GRU (use 128 units and return the sequences)</span></span><br><span class="line">    X = Dropout(<span class="number">0.8</span>)(X)                                  <span class="comment"># dropout (use 0.8)</span></span><br><span class="line">    X = BatchNormalization()(X)                          <span class="comment"># Batch normalization</span></span><br><span class="line">    X = Dropout(<span class="number">0.8</span>)(X)                                  <span class="comment"># dropout (use 0.8)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Step 4: Time-distributed dense layer (≈1 line)</span></span><br><span class="line">    X = TimeDistributed(Dense(<span class="number">1</span>, activation = <span class="string">"sigmoid"</span>))(X) <span class="comment"># time distributed  (sigmoid)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line"></span><br><span class="line">    model = Model(inputs = X_input, outputs = X)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> model</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model = model(input_shape = (Tx, n_freq))</span><br></pre></td></tr></table></figure>

Let's print the model summary to keep track of the shapes.


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model.summary()</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">_________________________________________________________________</span><br><span class="line">Layer (type)                 Output Shape              Param #   </span><br><span class="line">=================================================================</span><br><span class="line">input_3 (InputLayer)         (None, 5511, 101)         0         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv1d_3 (Conv1D)            (None, 1375, 196)         297136    </span><br><span class="line">_________________________________________________________________</span><br><span class="line">batch_normalization_2 (Batch (None, 1375, 196)         784       </span><br><span class="line">_________________________________________________________________</span><br><span class="line">activation_1 (Activation)    (None, 1375, 196)         0         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dropout_1 (Dropout)          (None, 1375, 196)         0         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">gru_1 (GRU)                  (None, 1375, 128)         124800    </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dropout_2 (Dropout)          (None, 1375, 128)         0         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">batch_normalization_3 (Batch (None, 1375, 128)         512       </span><br><span class="line">_________________________________________________________________</span><br><span class="line">gru_2 (GRU)                  (None, 1375, 128)         98688     </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dropout_3 (Dropout)          (None, 1375, 128)         0         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">batch_normalization_4 (Batch (None, 1375, 128)         512       </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dropout_4 (Dropout)          (None, 1375, 128)         0         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">time_distributed_1 (TimeDist (None, 1375, 1)           129       </span><br><span class="line">=================================================================</span><br><span class="line">Total params: 522,561</span><br><span class="line">Trainable params: 521,657</span><br><span class="line">Non-trainable params: 904</span><br><span class="line">_________________________________________________________________</span><br></pre></td></tr></table></figure>

**Expected Output**:

<table>
    <tr>
        <td>
            **Total params**
        </td>
        <td>
           522,561
        </td>
    </tr>
    <tr>
        <td>
            **Trainable params**
        </td>
        <td>
           521,657
        </td>
    </tr>
    <tr>
        <td>
            **Non-trainable params**
        </td>
        <td>
           904
        </td>
    </tr>
</table>

<p>The output of the network is of shape (None, 1375, 1) while the input is (None, 5511, 101). The Conv1D has reduced the number of steps from 5511 at spectrogram to 1375. </p>
<h2 id="2-2-Fit-the-model"><a href="#2-2-Fit-the-model" class="headerlink" title="2.2 - Fit the model"></a>2.2 - Fit the model</h2><p>Trigger word detection takes a long time to train. To save time, we’ve already trained a model for about 3 hours on a GPU using the architecture you built above, and a large training set of about 4000 examples. Let’s load the model. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model = load_model(<span class="string">'./models/tr_model.h5'</span>)</span><br></pre></td></tr></table></figure>
<p>You can train the model further, using the Adam optimizer and binary cross entropy loss, as follows. This will run quickly because we are training just for one epoch and with a small training set of 26 examples. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">opt = Adam(lr=<span class="number">0.0001</span>, beta_1=<span class="number">0.9</span>, beta_2=<span class="number">0.999</span>, decay=<span class="number">0.01</span>)</span><br><span class="line">model.compile(loss=<span class="string">'binary_crossentropy'</span>, optimizer=opt, metrics=[<span class="string">"accuracy"</span>])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model.fit(X, Y, batch_size = <span class="number">5</span>, epochs=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<pre><code>Epoch 1/1
26/26 [==============================] - 164s - loss: 0.0726 - acc: 0.9805   





&lt;keras.callbacks.History at 0x7f71052e7f60&gt;
</code></pre><h2 id="2-3-Test-the-model"><a href="#2-3-Test-the-model" class="headerlink" title="2.3 - Test the model"></a>2.3 - Test the model</h2><p>Finally, let’s see how your model performs on the dev set.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">loss, acc = model.evaluate(X_dev, Y_dev)</span><br><span class="line">print(<span class="string">"Dev set accuracy = "</span>, acc)</span><br></pre></td></tr></table></figure>
<pre><code>25/25 [==============================] - 18s
Dev set accuracy =  0.94565820694
</code></pre><p>This looks pretty good! However, accuracy isn’t a great metric for this task, since the labels are heavily skewed to 0’s, so a neural network that just outputs 0’s would get slightly over 90% accuracy. We could define more useful metrics such as F1 score or Precision/Recall. But let’s not bother with that here, and instead just empirically see how the model does. </p>
<h1 id="3-Making-Predictions"><a href="#3-Making-Predictions" class="headerlink" title="3 - Making Predictions"></a>3 - Making Predictions</h1><p>Now that you have built a working model for trigger word detection, let’s use it to make predictions. This code snippet runs audio (saved in a wav file) through the network. </p>
<!--
can use your model to make predictions on new audio clips.

You will first need to compute the predictions for an input audio clip.

**Exercise**: Implement predict_activates(). You will need to do the following:

1. Compute the spectrogram for the audio file
2. Use `np.swap` and `np.expand_dims` to reshape your input to size (1, Tx, n_freqs)
5. Use forward propagation on your model to compute the prediction at each output step
!-->
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detect_triggerword</span><span class="params">(filename)</span>:</span></span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    x = graph_spectrogram(filename)</span><br><span class="line">    <span class="comment"># the spectogram outputs (freqs, Tx) and we want (Tx, freqs) to input into the model</span></span><br><span class="line">    x  = x.swapaxes(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">    x = np.expand_dims(x, axis=<span class="number">0</span>)</span><br><span class="line">    predictions = model.predict(x)</span><br><span class="line">    </span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    plt.plot(predictions[<span class="number">0</span>,:,<span class="number">0</span>])</span><br><span class="line">    plt.ylabel(<span class="string">'probability'</span>)</span><br><span class="line">    plt.show()</span><br><span class="line">    <span class="keyword">return</span> predictions</span><br></pre></td></tr></table></figure>
<p>Once you’ve estimated the probability of having detected the word “activate” at each output step, you can trigger a “chiming” sound to play when the probability is above a certain threshold. Further, $y^{\langle t \rangle}$ might be near 1 for many values in a row after “activate” is said, yet we want to chime only once. So we will insert a chime sound at most once every 75 output steps. This will help prevent us from inserting two chimes for a single instance of “activate”. (This plays a role similar to non-max suppression from computer vision.) </p>
<!-- 
**Exercise**: Implement chime_on_activate(). You will need to do the following:

1. Loop over the predicted probabilities at each output step
2. When the prediction is larger than the threshold and more than 75 consecutive time steps have passed, insert a "chime" sound onto the original audio clip

Use this code to convert from the 1,375 step discretization to the 10,000 step discretization and insert a "chime" using pydub:

` audio_clip = audio_clip.overlay(chime, position = ((i / Ty) * audio.duration_seconds)*1000)
`
!--> 
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">chime_file = <span class="string">"audio_examples/chime.wav"</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chime_on_activate</span><span class="params">(filename, predictions, threshold)</span>:</span></span><br><span class="line">    audio_clip = AudioSegment.from_wav(filename)</span><br><span class="line">    chime = AudioSegment.from_wav(chime_file)</span><br><span class="line">    Ty = predictions.shape[<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># Step 1: Initialize the number of consecutive output steps to 0</span></span><br><span class="line">    consecutive_timesteps = <span class="number">0</span></span><br><span class="line">    <span class="comment"># Step 2: Loop over the output steps in the y</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(Ty):</span><br><span class="line">        <span class="comment"># Step 3: Increment consecutive output steps</span></span><br><span class="line">        consecutive_timesteps += <span class="number">1</span></span><br><span class="line">        <span class="comment"># Step 4: If prediction is higher than the threshold and more than 75 consecutive output steps have passed</span></span><br><span class="line">        <span class="keyword">if</span> predictions[<span class="number">0</span>,i,<span class="number">0</span>] &gt; threshold <span class="keyword">and</span> consecutive_timesteps &gt; <span class="number">75</span>:</span><br><span class="line">            <span class="comment"># Step 5: Superpose audio and background using pydub</span></span><br><span class="line">            audio_clip = audio_clip.overlay(chime, position = ((i / Ty) * audio_clip.duration_seconds)*<span class="number">1000</span>)</span><br><span class="line">            <span class="comment"># Step 6: Reset consecutive output steps to 0</span></span><br><span class="line">            consecutive_timesteps = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">    audio_clip.export(<span class="string">"chime_output.wav"</span>, format=<span class="string">'wav'</span>)</span><br></pre></td></tr></table></figure>
<h2 id="3-3-Test-on-dev-examples"><a href="#3-3-Test-on-dev-examples" class="headerlink" title="3.3 - Test on dev examples"></a>3.3 - Test on dev examples</h2><p>Let’s explore how our model performs on two unseen audio clips from the development set. Lets first listen to the two dev set clips. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">IPython.display.Audio(<span class="string">"./raw_data/dev/1.wav"</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">IPython.display.Audio(<span class="string">"./raw_data/dev/2.wav"</span>)</span><br></pre></td></tr></table></figure>
<p>Now lets run the model on these audio clips and see if it adds a chime after “activate”!</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename = <span class="string">"./raw_data/dev/1.wav"</span></span><br><span class="line">prediction = detect_triggerword(filename)</span><br><span class="line">chime_on_activate(filename, prediction, <span class="number">0.5</span>)</span><br><span class="line">IPython.display.Audio(<span class="string">"./chime_output.wav"</span>)</span><br></pre></td></tr></table></figure>
<p><img src="images/output_78_0.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename  = <span class="string">"./raw_data/dev/2.wav"</span></span><br><span class="line">prediction = detect_triggerword(filename)</span><br><span class="line">chime_on_activate(filename, prediction, <span class="number">0.5</span>)</span><br><span class="line">IPython.display.Audio(<span class="string">"./chime_output.wav"</span>)</span><br></pre></td></tr></table></figure>
<p><img src="images/output_79_0.png" alt="png"></p>
<h1 id="Congratulations"><a href="#Congratulations" class="headerlink" title="Congratulations"></a>Congratulations</h1><p>You’ve come to the end of this assignment! </p>
<p>Here’s what you should remember:</p>
<ul>
<li>Data synthesis is an effective way to create a large training set for speech problems, specifically trigger word detection. </li>
<li>Using a spectrogram and optionally a 1D conv layer is a common pre-processing step prior to passing audio data to an RNN, GRU or LSTM.</li>
<li>An end-to-end deep learning approach can be used to built a very effective trigger word detection system. </li>
</ul>
<p><em>Congratulations</em> on finishing the fimal assignment! </p>
<p>Thank you for sticking with us through the end and for all the hard work you’ve put into learning deep learning. We hope you have enjoyed the course! </p>
<h1 id="4-Try-your-own-example-OPTIONAL-UNGRADED"><a href="#4-Try-your-own-example-OPTIONAL-UNGRADED" class="headerlink" title="4 - Try your own example! (OPTIONAL/UNGRADED)"></a>4 - Try your own example! (OPTIONAL/UNGRADED)</h1><p>In this optional and ungraded portion of this notebook, you can try your model on your own audio clips! </p>
<p>Record a 10 second audio clip of you saying the word “activate” and other random words, and upload it to the Coursera hub as <code>myaudio.wav</code>. Be sure to upload the audio as a wav file. If your audio is recorded in a different format (such as mp3) there is free software that you can find online for converting it to wav. If your audio recording is not 10 seconds, the code below will either trim or pad it as needed to make it 10 seconds. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Preprocess the audio to the correct format</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preprocess_audio</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="comment"># Trim or pad audio segment to 10000ms</span></span><br><span class="line">    padding = AudioSegment.silent(duration=<span class="number">10000</span>)</span><br><span class="line">    segment = AudioSegment.from_wav(filename)[:<span class="number">10000</span>]</span><br><span class="line">    segment = padding.overlay(segment)</span><br><span class="line">    <span class="comment"># Set frame rate to 44100</span></span><br><span class="line">    segment = segment.set_frame_rate(<span class="number">44100</span>)</span><br><span class="line">    <span class="comment"># Export as wav</span></span><br><span class="line">    segment.export(filename, format=<span class="string">'wav'</span>)</span><br></pre></td></tr></table></figure>
<p>Once you’ve uploaded your audio file to Coursera, put the path to your file in the variable below.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">your_filename = <span class="string">"audio_examples/my_audio.wav"</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">preprocess_audio(your_filename)</span><br><span class="line">IPython.display.Audio(your_filename) <span class="comment"># listen to the audio you uploaded</span></span><br></pre></td></tr></table></figure>
<p>Finally, use the model to predict when you say activate in the 10 second audio clip, and trigger a chime. If beeps are not being added appropriately, try to adjust the chime_threshold.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">chime_threshold = <span class="number">0.5</span></span><br><span class="line">prediction = detect_triggerword(your_filename)</span><br><span class="line">chime_on_activate(your_filename, prediction, chime_threshold)</span><br><span class="line">IPython.display.Audio(<span class="string">"./chime_output.wav"</span>)</span><br></pre></td></tr></table></figure>
</matplotlib.lines.line2d>]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Project</tag>
        <tag>Sequence Models</tag>
      </tags>
  </entry>
  <entry>
    <title>Neural Machine Translation with Attention</title>
    <url>/Neural-Machine-Translation-with-Attention/2019/03/29/</url>
    <content><![CDATA[<h1 id="Neural-Machine-Translation"><a href="#Neural-Machine-Translation" class="headerlink" title="Neural Machine Translation"></a>Neural Machine Translation</h1><p>Welcome to your first programming assignment for this week! </p>
<p>You will build a Neural Machine Translation (NMT) model to translate human readable dates (“25th of June, 2009”) into machine readable dates (“2009-06-25”). You will do this using an attention model, one of the most sophisticated sequence to sequence models. </p>
<p>This notebook was produced together with NVIDIA’s Deep Learning Institute. </p>
<p>Let’s load all the packages you will need for this assignment.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Bidirectional, Concatenate, Permute, Dot, Input, LSTM, Multiply</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> RepeatVector, Dense, Activation, Lambda</span><br><span class="line"><span class="keyword">from</span> keras.optimizers <span class="keyword">import</span> Adam</span><br><span class="line"><span class="keyword">from</span> keras.utils <span class="keyword">import</span> to_categorical</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> load_model, Model</span><br><span class="line"><span class="keyword">import</span> keras.backend <span class="keyword">as</span> K</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> faker <span class="keyword">import</span> Faker</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> babel.dates <span class="keyword">import</span> format_date</span><br><span class="line"><span class="keyword">from</span> nmt_utils <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure>
<h2 id="1-Translating-human-readable-dates-into-machine-readable-dates"><a href="#1-Translating-human-readable-dates-into-machine-readable-dates" class="headerlink" title="1 - Translating human readable dates into machine readable dates"></a>1 - Translating human readable dates into machine readable dates</h2><p>The model you will build here could be used to translate from one language to another, such as translating from English to Hindi. However, language translation requires massive datasets and usually takes days of training on GPUs. To give you a place to experiment with these models even without using massive datasets, we will instead use a simpler “date translation” task. </p>
<p>The network will input a date written in a variety of possible formats (<em>e.g. “the 29th of August 1958”, “03/30/1968”, “24 JUNE 1987”</em>) and translate them into standardized, machine readable dates (<em>e.g. “1958-08-29”, “1968-03-30”, “1987-06-24”</em>). We will have the network learn to output dates in the common machine-readable format YYYY-MM-DD. </p>
<!-- 
Take a look at [nmt_utils.py](./nmt_utils.py) to see all the formatting. Count and figure out how the formats work, you will need this knowledge later. !--> 
<h3 id="1-1-Dataset"><a href="#1-1-Dataset" class="headerlink" title="1.1 - Dataset"></a>1.1 - Dataset</h3><p>We will train the model on a dataset of 10000 human readable dates and their equivalent, standardized, machine readable dates. Let’s run the following cells to load the dataset and print some examples. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = <span class="number">10000</span></span><br><span class="line">dataset, human_vocab, machine_vocab, inv_machine_vocab = load_dataset(m)</span><br></pre></td></tr></table></figure>
<p>You’ve loaded:</p>
<ul>
<li><code>dataset</code>: a list of tuples of (human readable date, machine readable date)</li>
<li><code>human_vocab</code>: a python dictionary mapping all characters used in the human readable dates to an integer-valued index </li>
<li><code>machine_vocab</code>: a python dictionary mapping all characters used in machine readable dates to an integer-valued index. These indices are not necessarily consistent with <code>human_vocab</code>. </li>
<li><code>inv_machine_vocab</code>: the inverse dictionary of <code>machine_vocab</code>, mapping from indices back to characters. </li>
</ul>
<p>Let’s preprocess the data and map the raw text data into the index values. We will also use Tx=30 (which we assume is the maximum length of the human readable date; if we get a longer input, we would have to truncate it) and Ty=10 (since “YYYY-MM-DD” is 10 characters long). </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Tx = <span class="number">30</span></span><br><span class="line">Ty = <span class="number">10</span></span><br><span class="line">X, Y, Xoh, Yoh = preprocess_data(dataset, human_vocab, machine_vocab, Tx, Ty)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"X.shape:"</span>, X.shape)</span><br><span class="line">print(<span class="string">"Y.shape:"</span>, Y.shape)</span><br><span class="line">print(<span class="string">"Xoh.shape:"</span>, Xoh.shape)</span><br><span class="line">print(<span class="string">"Yoh.shape:"</span>, Yoh.shape)</span><br></pre></td></tr></table></figure>
<pre><code>X.shape: (10000, 30)
Y.shape: (10000, 10)
Xoh.shape: (10000, 30, 37)
Yoh.shape: (10000, 10, 11)
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(X[<span class="number">1</span>])</span><br><span class="line">print(Y[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<pre><code>[33 17 16 25 17 29 16 13 34  0 22 31 23 34  0  4  4  0  5  3  4 11 36 36 36
 36 36 36 36 36]
[3 1 2 9 0 1 8 0 2 2]
</code></pre><p>You now have:</p>
<ul>
<li><code>X</code>: a processed version of the human readable dates in the training set, where each character is replaced by an index mapped to the character via <code>human_vocab</code>. Each date is further padded to $T_x$ values with a special character (&lt; pad &gt;). <code>X.shape = (m, Tx)</code></li>
<li><code>Y</code>: a processed version of the machine readable dates in the training set, where each character is replaced by the index it is mapped to in <code>machine_vocab</code>. You should have <code>Y.shape = (m, Ty)</code>. </li>
<li><code>Xoh</code>: one-hot version of <code>X</code>, the “1” entry’s index is mapped to the character thanks to <code>human_vocab</code>. <code>Xoh.shape = (m, Tx, len(human_vocab))</code></li>
<li><code>Yoh</code>: one-hot version of <code>Y</code>, the “1” entry’s index is mapped to the character thanks to <code>machine_vocab</code>. <code>Yoh.shape = (m, Tx, len(machine_vocab))</code>. Here, <code>len(machine_vocab) = 11</code> since there are 11 characters (‘-‘ as well as 0-9). </li>
</ul>
<p>Lets also look at some examples of preprocessed training examples. Feel free to play with <code>index</code> in the cell below to navigate the dataset and see how source/target dates are preprocessed. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">index = <span class="number">0</span></span><br><span class="line">print(<span class="string">"Source date:"</span>, dataset[index][<span class="number">0</span>])</span><br><span class="line">print(<span class="string">"Target date:"</span>, dataset[index][<span class="number">1</span>])</span><br><span class="line">print()</span><br><span class="line">print(<span class="string">"Source after preprocessing (indices):"</span>, X[index])</span><br><span class="line">print(<span class="string">"Target after preprocessing (indices):"</span>, Y[index])</span><br><span class="line">print()</span><br><span class="line">print(<span class="string">"Source after preprocessing (one-hot):"</span>, Xoh[index])</span><br><span class="line">print(<span class="string">"Target after preprocessing (one-hot):"</span>, Yoh[index])</span><br></pre></td></tr></table></figure>
<pre><code>Source date: 29 december 1988
Target date: 1988-12-29

Source after preprocessing (indices): [ 5 12  0 16 17 15 17 24 14 17 28  0  4 12 11 11 36 36 36 36 36 36 36 36 36
 36 36 36 36 36]
Target after preprocessing (indices): [ 2 10  9  9  0  2  3  0  3 10]

Source after preprocessing (one-hot): [[ 0.  0.  0. ...,  0.  0.  0.]
 [ 0.  0.  0. ...,  0.  0.  0.]
 [ 1.  0.  0. ...,  0.  0.  0.]
 ..., 
 [ 0.  0.  0. ...,  0.  0.  1.]
 [ 0.  0.  0. ...,  0.  0.  1.]
 [ 0.  0.  0. ...,  0.  0.  1.]]
Target after preprocessing (one-hot): [[ 0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.]
 [ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.]
 [ 0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.]
 [ 0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.]
 [ 1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]
 [ 0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.]
 [ 0.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.]
 [ 1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]
 [ 0.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.]
 [ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.]]
</code></pre><h2 id="2-Neural-machine-translation-with-attention"><a href="#2-Neural-machine-translation-with-attention" class="headerlink" title="2 - Neural machine translation with attention"></a>2 - Neural machine translation with attention</h2><p>If you had to translate a book’s paragraph from French to English, you would not read the whole paragraph, then close the book and translate. Even during the translation process, you would read/re-read and focus on the parts of the French paragraph corresponding to the parts of the English you are writing down. </p>
<p>The attention mechanism tells a Neural Machine Translation model where it should pay attention to at any step. </p>
<h3 id="2-1-Attention-mechanism"><a href="#2-1-Attention-mechanism" class="headerlink" title="2.1 - Attention mechanism"></a>2.1 - Attention mechanism</h3><p>In this part, you will implement the attention mechanism presented in the lecture videos. Here is a figure to remind you how the model works. The diagram on the left shows the attention model. The diagram on the right shows what one “Attention” step does to calculate the attention variables $\alpha^{\langle t, t’ \rangle}$, which are used to compute the context variable $context^{\langle t \rangle}$ for each timestep in the output ($t=1, \ldots, T_y$). </p>
<p><table></table></p>
<p><td> 
<img src="images/attn_model.png" style="width:500;height:500px;"> <br>
</td> </p>
<p><td> 
<img src="images/attn_mechanism.png" style="width:500;height:500px;"> <br>
</td><br>&lt;/table&gt;</p>
<caption><center> **Figure 1**: Neural machine translation with attention</center></caption>



<p>Here are some properties of the model that you may notice: </p>
<ul>
<li><p>There are two separate LSTMs in this model (see diagram on the left). Because the one at the bottom of the picture is a Bi-directional LSTM and comes <em>before</em> the attention mechanism, we will call it <em>pre-attention</em> Bi-LSTM. The LSTM at the top of the diagram comes <em>after</em> the attention mechanism, so we will call it the <em>post-attention</em> LSTM. The pre-attention Bi-LSTM goes through $T_x$ time steps; the post-attention LSTM goes through $T_y$ time steps. </p>
</li>
<li><p>The post-attention LSTM passes $s^{\langle t \rangle}, c^{\langle t \rangle}$ from one time step to the next. In the lecture videos, we were using only a basic RNN for the post-activation sequence model, so the state captured by the RNN output activations $s^{\langle t\rangle}$. But since we are using an LSTM here, the LSTM has both the output activation $s^{\langle t\rangle}$ and the hidden cell state $c^{\langle t\rangle}$. However, unlike previous text generation examples (such as Dinosaurus in week 1), in this model the post-activation LSTM at time $t$ does will not take the specific generated $y^{\langle t-1 \rangle}$ as input; it only takes $s^{\langle t\rangle}$ and $c^{\langle t\rangle}$ as input. We have designed the model this way, because (unlike language generation where adjacent characters are highly correlated) there isn’t as strong a dependency between the previous character and the next character in a YYYY-MM-DD date. </p>
</li>
<li><p>We use $a^{\langle t \rangle} = [\overrightarrow{a}^{\langle t \rangle}; \overleftarrow{a}^{\langle t \rangle}]$ to represent the concatenation of the activations of both the forward-direction and backward-directions of the pre-attention Bi-LSTM. </p>
</li>
<li><p>The diagram on the right uses a <code>RepeatVector</code> node to copy $s^{\langle t-1 \rangle}$’s value $T_x$ times, and then <code>Concatenation</code> to concatenate $s^{\langle t-1 \rangle}$ and $a^{\langle t \rangle}$ to compute $e^{\langle t, t’}$, which is then passed through a softmax to compute $\alpha^{\langle t, t’ \rangle}$. We’ll explain how to use <code>RepeatVector</code> and <code>Concatenation</code> in Keras below. </p>
</li>
</ul>
<p>Lets implement this model. You will start by implementing two functions: <code>one_step_attention()</code> and <code>model()</code>.</p>
<p><strong>1) <code>one_step_attention()</code></strong>: At step $t$, given all the hidden states of the Bi-LSTM ($[a^{<1>},a^{<2>}, …, a^{<t_x>}]$) and the previous hidden state of the second LSTM ($s^{<t-1>}$), <code>one_step_attention()</code> will compute the attention weights ($[\alpha^{<t,1>},\alpha^{<t,2>}, …, \alpha^{<t,t_x>}]$) and output the context vector (see Figure  1 (right) for details):</t,t_x></t,2></t,1></t-1></t_x></2></1></p>
<script type="math/tex; mode=display">context^{<t>} = \sum_{t' = 0}^{T_x} \alpha^{<t,t'>}a^{<t'>}\tag{1}</script><p>Note that we are denoting the attention in this notebook $context^{\langle t \rangle}$. In the lecture videos, the context was denoted $c^{\langle t \rangle}$, but here we are calling it $context^{\langle t \rangle}$ to avoid confusion with the (post-attention) LSTM’s internal memory cell variable, which is sometimes also denoted $c^{\langle t \rangle}$. </p>
<p><strong>2) <code>model()</code></strong>: Implements the entire model. It first runs the input through a Bi-LSTM to get back $[a^{<1>},a^{<2>}, …, a^{<t_x>}]$. Then, it calls <code>one_step_attention()</code> $T_y$ times (<code>for</code> loop). At each iteration of this loop, it gives the computed context vector $c^{<t>}$ to the second LSTM, and runs the output of the LSTM through a dense layer with softmax activation to generate a prediction $\hat{y}^{<t>}$. </t></t></t_x></2></1></p>
<p><strong>Exercise</strong>: Implement <code>one_step_attention()</code>. The function <code>model()</code> will call the layers in <code>one_step_attention()</code> $T_y$ using a for-loop, and it is important that all $T_y$ copies have the same weights. I.e., it should not re-initiaiize the weights every time. In other words, all $T_y$ steps should have shared weights. Here’s how you can implement layers with shareable weights in Keras:</p>
<ol>
<li>Define the layer objects (as global variables for examples).</li>
<li>Call these objects when propagating the input.</li>
</ol>
<p>We have defined the layers you need as global variables. Please run the following cells to create them. Please check the Keras documentation to make sure you understand what these layers are: <a href="https://keras.io/layers/core/#repeatvector" target="_blank" rel="noopener">RepeatVector()</a>, <a href="https://keras.io/layers/merge/#concatenate" target="_blank" rel="noopener">Concatenate()</a>, <a href="https://keras.io/layers/core/#dense" target="_blank" rel="noopener">Dense()</a>, <a href="https://keras.io/layers/core/#activation" target="_blank" rel="noopener">Activation()</a>, <a href="https://keras.io/layers/merge/#dot" target="_blank" rel="noopener">Dot()</a>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Defined shared layers as global variables</span></span><br><span class="line">repeator = RepeatVector(Tx)</span><br><span class="line">concatenator = Concatenate(axis=<span class="number">-1</span>)</span><br><span class="line">densor1 = Dense(<span class="number">10</span>, activation = <span class="string">"tanh"</span>)</span><br><span class="line">densor2 = Dense(<span class="number">1</span>, activation = <span class="string">"relu"</span>)</span><br><span class="line">activator = Activation(softmax, name=<span class="string">'attention_weights'</span>) <span class="comment"># We are using a custom softmax(axis = 1) loaded in this notebook</span></span><br><span class="line">dotor = Dot(axes = <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>Now you can use these layers to implement <code>one_step_attention()</code>. In order to propagate a Keras tensor object X through one of these layers, use <code>layer(X)</code> (or <code>layer([X,Y])</code> if it requires multiple inputs.), e.g. <code>densor(X)</code> will propagate X through the <code>Dense(1)</code> layer defined above.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: one_step_attention</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">one_step_attention</span><span class="params">(a, s_prev)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Performs one step of attention: Outputs a context vector computed as a dot product of the attention weights</span></span><br><span class="line"><span class="string">    "alphas" and the hidden states "a" of the Bi-LSTM.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    a -- hidden state output of the Bi-LSTM, numpy-array of shape (m, Tx, 2*n_a)</span></span><br><span class="line"><span class="string">    s_prev -- previous hidden state of the (post-attention) LSTM, numpy-array of shape (m, n_s)</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    context -- context vector, input of the next (post-attetion) LSTM cell</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    <span class="comment"># Use repeator to repeat s_prev to be of shape (m, Tx, n_s) so that you can concatenate it with all hidden states "a" (≈ 1 line)</span></span><br><span class="line">    s_prev = repeator(s_prev)</span><br><span class="line">    <span class="comment"># Use concatenator to concatenate a and s_prev on the last axis (≈ 1 line)</span></span><br><span class="line">    concat = concatenator([a,s_prev])</span><br><span class="line">    <span class="comment"># Use densor1 to propagate concat through a small fully-connected neural network to compute the "intermediate energies" variable e. (≈1 lines)</span></span><br><span class="line">    e = densor1(concat)</span><br><span class="line">    <span class="comment"># Use densor2 to propagate e through a small fully-connected neural network to compute the "energies" variable energies. (≈1 lines)</span></span><br><span class="line">    energies = densor2(e)</span><br><span class="line">    <span class="comment"># Use "activator" on "energies" to compute the attention weights "alphas" (≈ 1 line)</span></span><br><span class="line">    alphas = activator(energies)</span><br><span class="line">    <span class="comment"># Use dotor together with "alphas" and "a" to compute the context vector to be given to the next (post-attention) LSTM-cell (≈ 1 line)</span></span><br><span class="line">    context = dotor([alphas,a])</span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> context</span><br></pre></td></tr></table></figure>
<p>You will be able to check the expected output of <code>one_step_attention()</code> after you’ve coded the <code>model()</code> function.</p>
<p><strong>Exercise</strong>: Implement <code>model()</code> as explained in figure 2 and the text above. Again, we have defined global layers that will share weights to be used in <code>model()</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n_a = <span class="number">32</span></span><br><span class="line">n_s = <span class="number">64</span></span><br><span class="line">post_activation_LSTM_cell = LSTM(n_s, return_state = <span class="keyword">True</span>)</span><br><span class="line">output_layer = Dense(len(machine_vocab), activation=softmax)</span><br></pre></td></tr></table></figure>
<p>Now you can use these layers $T_y$ times in a <code>for</code> loop to generate the outputs, and their parameters will not be reinitialized. You will have to carry out the following steps: </p>
<ol>
<li>Propagate the input into a <a href="https://keras.io/layers/wrappers/#bidirectional" target="_blank" rel="noopener">Bidirectional</a> <a href="https://keras.io/layers/recurrent/#lstm" target="_blank" rel="noopener">LSTM</a></li>
<li><p>Iterate for $t = 0, \dots, T_y-1$: </p>
<ol>
<li>Call <code>one_step_attention()</code> on $[\alpha^{<t,1>},\alpha^{<t,2>}, …, \alpha^{<t,t_x>}]$ and $s^{<t-1>}$ to get the context vector $context^{<t>}$.</t></t-1></t,t_x></t,2></t,1></li>
<li>Give $context^{<t>}$ to the post-attention LSTM cell. Remember pass in the previous hidden-state $s^{\langle t-1\rangle}$ and cell-states $c^{\langle t-1\rangle}$ of this LSTM using <code>initial_state= [previous hidden state, previous cell state]</code>. Get back the new hidden state $s^{<t>}$ and the new cell state $c^{<t>}$.</t></t></t></li>
<li>Apply a softmax layer to $s^{<t>}$, get the output. </t></li>
<li>Save the output by adding it to the list of outputs.</li>
</ol>
</li>
<li><p>Create your Keras model instance, it should have three inputs (“inputs”, $s^{<0>}$ and $c^{<0>}$) and output the list of “outputs”.</0></0></p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: model</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">model</span><span class="params">(Tx, Ty, n_a, n_s, human_vocab_size, machine_vocab_size)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    Tx -- length of the input sequence</span></span><br><span class="line"><span class="string">    Ty -- length of the output sequence</span></span><br><span class="line"><span class="string">    n_a -- hidden state size of the Bi-LSTM</span></span><br><span class="line"><span class="string">    n_s -- hidden state size of the post-attention LSTM</span></span><br><span class="line"><span class="string">    human_vocab_size -- size of the python dictionary "human_vocab"</span></span><br><span class="line"><span class="string">    machine_vocab_size -- size of the python dictionary "machine_vocab"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    model -- Keras model instance</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Define the inputs of your model with a shape (Tx,)</span></span><br><span class="line">    <span class="comment"># Define s0 and c0, initial hidden state for the decoder LSTM of shape (n_s,)</span></span><br><span class="line">    X = Input(shape=(Tx, human_vocab_size))</span><br><span class="line">    s0 = Input(shape=(n_s,), name=<span class="string">'s0'</span>)</span><br><span class="line">    c0 = Input(shape=(n_s,), name=<span class="string">'c0'</span>)</span><br><span class="line">    s = s0</span><br><span class="line">    c = c0</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Initialize empty list of outputs</span></span><br><span class="line">    outputs = []</span><br><span class="line">    </span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Step 1: Define your pre-attention Bi-LSTM. Remember to use return_sequences=True. (≈ 1 line)</span></span><br><span class="line">    a = Bidirectional(LSTM(n_a, return_sequences=<span class="keyword">True</span>))(X)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Step 2: Iterate for Ty steps</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> range(Ty):</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># Step 2.A: Perform one step of the attention mechanism to get back the context vector at step t (≈ 1 line)</span></span><br><span class="line">        context = one_step_attention(a, s)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Step 2.B: Apply the post-attention LSTM cell to the "context" vector.</span></span><br><span class="line">        <span class="comment"># Don't forget to pass: initial_state = [hidden state, cell state] (≈ 1 line)</span></span><br><span class="line">        s, _, c = post_activation_LSTM_cell(context, initial_state=[s, c])</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Step 2.C: Apply Dense layer to the hidden state output of the post-attention LSTM (≈ 1 line)</span></span><br><span class="line">        out = output_layer(s)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Step 2.D: Append "out" to the "outputs" list (≈ 1 line)</span></span><br><span class="line">        outputs.append(out)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Step 3: Create model instance taking three inputs and returning the list of outputs. (≈ 1 line)</span></span><br><span class="line">    model = Model([X, s0, c0], outputs)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> model</span><br></pre></td></tr></table></figure>
<p>Run the following cell to create your model.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model = model(Tx, Ty, n_a, n_s, len(human_vocab), len(machine_vocab))</span><br></pre></td></tr></table></figure>
<p>Let’s get a summary of the model to check if it matches the expected output.</p>
<p>As usual, after creating your model in Keras, you need to compile it and define what loss, optimizer and metrics your are want to use. Compile your model using <code>categorical_crossentropy</code> loss, a custom <a href="https://keras.io/optimizers/#adam" target="_blank" rel="noopener">Adam</a> <a href="https://keras.io/optimizers/#usage-of-optimizers" target="_blank" rel="noopener">optimizer</a> (<code>learning rate = 0.005</code>, $\beta_1 = 0.9$, $\beta_2 = 0.999$, <code>decay = 0.01</code>)  and <code>[&#39;accuracy&#39;]</code> metrics:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### START CODE HERE ### (≈2 lines)</span></span><br><span class="line">opt = Adam(lr = <span class="number">0.005</span>, beta_1=<span class="number">0.9</span>, beta_2=<span class="number">0.999</span>, decay = <span class="number">0.01</span>)</span><br><span class="line">model.compile(loss=<span class="string">'categorical_crossentropy'</span>, optimizer=opt, metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line"><span class="comment">### END CODE HERE ###</span></span><br></pre></td></tr></table></figure>
<p>The last step is to define all your inputs and outputs to fit the model:</p>
<ul>
<li>You already have X of shape $(m = 10000, T_x = 30)$ containing the training examples.</li>
<li>You need to create <code>s0</code> and <code>c0</code> to initialize your <code>post_activation_LSTM_cell</code> with 0s.</li>
<li>Given the <code>model()</code> you coded, you need the “outputs” to be a list of 11 elements of shape (m, T_y). So that: <code>outputs[i][0], ..., outputs[i][Ty]</code> represent the true labels (characters) corresponding to the $i^{th}$ training example (<code>X[i]</code>). More generally, <code>outputs[i][j]</code> is the true label of the $j^{th}$ character in the $i^{th}$ training example.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s0 = np.zeros((m, n_s))</span><br><span class="line">c0 = np.zeros((m, n_s))</span><br><span class="line">outputs = list(Yoh.swapaxes(<span class="number">0</span>,<span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<p>Let’s now fit the model and run it for one epoch.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model.fit([Xoh, s0, c0], outputs, epochs=<span class="number">1</span>, batch_size=<span class="number">100</span>)</span><br></pre></td></tr></table></figure>
<pre><code>Epoch 1/1
10000/10000 [==============================] - 158s - loss: 16.3670 - dense_6_loss_1: 1.1703 - dense_6_loss_2: 0.9289 - dense_6_loss_3: 1.6998 - dense_6_loss_4: 2.6540 - dense_6_loss_5: 0.7749 - dense_6_loss_6: 1.2792 - dense_6_loss_7: 2.7100 - dense_6_loss_8: 0.9065 - dense_6_loss_9: 1.6950 - dense_6_loss_10: 2.5484 - dense_6_acc_1: 0.5611 - dense_6_acc_2: 0.7058 - dense_6_acc_3: 0.3274 - dense_6_acc_4: 0.0815 - dense_6_acc_5: 0.8946 - dense_6_acc_6: 0.3322 - dense_6_acc_7: 0.0551 - dense_6_acc_8: 0.9287 - dense_6_acc_9: 0.2578 - dense_6_acc_10: 0.1051   





&lt;keras.callbacks.History at 0x7f39010f7320&gt;
</code></pre><p>While training you can see the loss as well as the accuracy on each of the 10 positions of the output. The table below gives you an example of what the accuracies could be if the batch had 2 examples: </p>
<p><img src="images/table.png" style="width:700;height:200px;"> <br></p>
<caption><center>Thus, `dense_2_acc_8: 0.89` means that you are predicting the 7th character of the output correctly 89% of the time in the current batch of data. </center></caption>


<p>We have run this model for longer, and saved the weights. Run the next cell to load our weights. (By training a model for several minutes, you should be able to obtain a model of similar accuracy, but loading our model will save you time.) </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model.load_weights(<span class="string">'models/model.h5'</span>)</span><br></pre></td></tr></table></figure>
<p>You can now see the results on new examples.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">EXAMPLES = [<span class="string">'3 May 1979'</span>, <span class="string">'5 April 09'</span>, <span class="string">'21th of August 2016'</span>, <span class="string">'Tue 10 Jul 2007'</span>, <span class="string">'Saturday May 9 2018'</span>, <span class="string">'March 3 2001'</span>, <span class="string">'March 3rd 2001'</span>, <span class="string">'1 March 2001'</span>]</span><br><span class="line"><span class="keyword">for</span> example <span class="keyword">in</span> EXAMPLES:</span><br><span class="line">    </span><br><span class="line">    source = string_to_int(example, Tx, human_vocab)</span><br><span class="line">    source = np.array(list(map(<span class="keyword">lambda</span> x: to_categorical(x, num_classes=len(human_vocab)), source))).swapaxes(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">    prediction = model.predict([source, s0, c0])</span><br><span class="line">    prediction = np.argmax(prediction, axis = <span class="number">-1</span>)</span><br><span class="line">    output = [inv_machine_vocab[int(i)] <span class="keyword">for</span> i <span class="keyword">in</span> prediction]</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">"source:"</span>, example)</span><br><span class="line">    print(<span class="string">"output:"</span>, <span class="string">''</span>.join(output))</span><br></pre></td></tr></table></figure>
<pre><code>source: 3 May 1979
output: 1979-05-03
source: 5 April 09
output: 2009-05-05
source: 21th of August 2016
output: 2016-08-21
source: Tue 10 Jul 2007
output: 2007-07-10
source: Saturday May 9 2018
output: 2018-05-09
source: March 3 2001
output: 2001-03-03
source: March 3rd 2001
output: 2001-03-03
source: 1 March 2001
output: 2001-03-01
</code></pre><p>You can also change these examples to test with your own examples. The next part will give you a better sense on what the attention mechanism is doing—i.e., what part of the input the network is paying attention to when generating a particular output character. </p>
<h2 id="3-Visualizing-Attention-Optional-Ungraded"><a href="#3-Visualizing-Attention-Optional-Ungraded" class="headerlink" title="3 - Visualizing Attention (Optional / Ungraded)"></a>3 - Visualizing Attention (Optional / Ungraded)</h2><p>Since the problem has a fixed output length of 10, it is also possible to carry out this task using 10 different softmax units to generate the 10 characters of the output. But one advantage of the attention model is that each part of the output (say the month) knows it needs to depend only on a small part of the input (the characters in the input giving the month). We can  visualize what part of the output is looking at what part of the input.</p>
<p>Consider the task of translating “Saturday 9 May 2018” to “2018-05-09”. If we visualize the computed $\alpha^{\langle t, t’ \rangle}$ we get this: </p>
<p><img src="images/date_attention.png" style="width:600;height:300px;"> <br></p>
<caption><center> **Figure 8**: Full Attention Map</center></caption>

<p>Notice how the output ignores the “Saturday” portion of the input. None of the output timesteps are paying much attention to that portion of the input. We see also that 9 has been translated as 09 and May has been correctly translated into 05, with the output paying attention to the parts of the input it needs to to make the translation. The year mostly requires it to pay attention to the input’s “18” in order to generate “2018.” </p>
<h3 id="3-1-Getting-the-activations-from-the-network"><a href="#3-1-Getting-the-activations-from-the-network" class="headerlink" title="3.1 - Getting the activations from the network"></a>3.1 - Getting the activations from the network</h3><p>Lets now visualize the attention values in your network. We’ll propagate an example through the network, then visualize the values of $\alpha^{\langle t, t’ \rangle}$. </p>
<p>To figure out where the attention values are located, let’s start by printing a summary of the model .</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model.summary()</span><br></pre></td></tr></table></figure>
<p>Navigate through the output of <code>model.summary()</code> above. You can see that the layer named <code>attention_weights</code> outputs the <code>alphas</code> of shape (m, 30, 1) before <code>dot_2</code> computes the context vector for every time step $t = 0, \ldots, T_y-1$. Lets get the activations from this layer.</p>
<p>The function <code>attention_map()</code> pulls out the attention values from your model and plots them.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">attention_map = plot_attention_map(model, human_vocab, inv_machine_vocab, <span class="string">"Tuesday 09 Oct 1993"</span>, num = <span class="number">7</span>, n_s = <span class="number">64</span>)</span><br></pre></td></tr></table></figure>
<p>On the generated plot you can observe the values of the attention weights for each character of the predicted output. Examine this plot and check that where the network is paying attention makes sense to you.</p>
<p>In the date translation application, you will observe that most of the time attention helps predict the year, and hasn’t much impact on predicting the day/month.</p>
<h3 id="Congratulations"><a href="#Congratulations" class="headerlink" title="Congratulations!"></a>Congratulations!</h3><p>You have come to the end of this assignment </p>
<p><font color="blue"> <strong>Here’s what you should remember from this notebook</strong>:</font></p>
<ul>
<li>Machine translation models can be used to map from one sequence to another. They are useful not just for translating human languages (like French-&gt;English) but also for tasks like date format translation. </li>
<li>An attention mechanism allows a network to focus on the most relevant parts of the input when producing a specific part of the output. </li>
<li>A network using an attention mechanism can translate from inputs of length $T_x$ to outputs of length $T_y$, where $T_x$ and $T_y$ can be different. </li>
<li>You can visualize attention weights $\alpha^{\langle t,t’ \rangle}$ to see what the network is paying attention to while generating each output.</li>
</ul>
<p>Congratulations on finishing this assignment! You are now able to implement an attention model and use it to learn complex mappings from one sequence to another. </p>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Project</tag>
        <tag>NLP</tag>
        <tag>Sequence Models</tag>
      </tags>
  </entry>
  <entry>
    <title>Emojify</title>
    <url>/Emojify/2019/03/28/</url>
    <content><![CDATA[<h1 id="Emojify"><a href="#Emojify" class="headerlink" title="Emojify!"></a>Emojify!</h1><p>Welcome to the second assignment of Week 2. You are going to use word vector representations to build an Emojifier. </p>
<p>Have you ever wanted to make your text messages more expressive? Your emojifier app will help you do that. So rather than writing “Congratulations on the promotion! Lets get coffee and talk. Love you!” the emojifier can automatically turn this into “Congratulations on the promotion! 👍 Lets get coffee and talk. ☕️ Love you! ❤️”</p>
<p>You will implement a model which inputs a sentence (such as “Let’s go see the baseball game tonight!”) and finds the most appropriate emoji to be used with this sentence (⚾️). In many emoji interfaces, you need to remember that ❤️ is the “heart” symbol rather than the “love” symbol. But using word vectors, you’ll see that even if your training set explicitly relates only a few words to a particular emoji, your algorithm will be able to generalize and associate words in the test set to the same emoji even if those words don’t even appear in the training set. This allows you to build an accurate classifier mapping from sentences to emojis, even using a small training set. </p>
<p>In this exercise, you’ll start with a baseline model (Emojifier-V1) using word embeddings, then build a more sophisticated model (Emojifier-V2) that further incorporates an LSTM. </p>
<p>Lets get started! Run the following cell to load the package you are going to use. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> emo_utils <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> emoji</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure>
<h2 id="1-Baseline-model-Emojifier-V1"><a href="#1-Baseline-model-Emojifier-V1" class="headerlink" title="1 - Baseline model: Emojifier-V1"></a>1 - Baseline model: Emojifier-V1</h2><h3 id="1-1-Dataset-EMOJISET"><a href="#1-1-Dataset-EMOJISET" class="headerlink" title="1.1 - Dataset EMOJISET"></a>1.1 - Dataset EMOJISET</h3><p>Let’s start by building a simple baseline classifier. </p>
<p>You have a tiny dataset (X, Y) where:</p>
<ul>
<li>X contains 127 sentences (strings)</li>
<li>Y contains a integer label between 0 and 4 corresponding to an emoji for each sentence</li>
</ul>
<p><img src="images/data_set.png" style="width:700px;height:300px;"></p>
<caption><center> **Figure 1**: EMOJISET - a classification problem with 5 classes. A few examples of sentences are given here. </center></caption>

<p>Let’s load the dataset using the code below. We split the dataset between training (127 examples) and testing (56 examples).</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X_train, Y_train = read_csv(<span class="string">'data/train_emoji.csv'</span>)</span><br><span class="line">X_test, Y_test = read_csv(<span class="string">'data/tesss.csv'</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">maxLen = len(max(X_train, key=len).split())</span><br></pre></td></tr></table></figure>
<p>Run the following cell to print sentences from X_train and corresponding labels from Y_train. Change <code>index</code> to see different examples. Because of the font the iPython notebook uses, the heart emoji may be colored black rather than red.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">index = <span class="number">1</span></span><br><span class="line">print(X_train[index], label_to_emoji(Y_train[index]))</span><br></pre></td></tr></table></figure>
<pre><code>I am proud of your achievements 😄
</code></pre><h3 id="1-2-Overview-of-the-Emojifier-V1"><a href="#1-2-Overview-of-the-Emojifier-V1" class="headerlink" title="1.2 - Overview of the Emojifier-V1"></a>1.2 - Overview of the Emojifier-V1</h3><p>In this part, you are going to implement a baseline model called “Emojifier-v1”.  </p>
<center>
<img src="images/image_1.png" style="width:900px;height:300px;">
<caption><center> **Figure 2**: Baseline model (Emojifier-V1).</center></caption>
</center>

<p>The input of the model is a string corresponding to a sentence (e.g. “I love you). In the code, the output will be a probability vector of shape (1,5), that you then pass in an argmax layer to extract the index of the most likely emoji output.</p>
<p>To get our labels into a format suitable for training a softmax classifier, lets convert $Y$ from its current shape  current shape $(m, 1)$ into a “one-hot representation” $(m, 5)$, where each row is a one-hot vector giving the label of one example, You can do so using this next code snipper. Here, <code>Y_oh</code> stands for “Y-one-hot” in the variable names <code>Y_oh_train</code> and <code>Y_oh_test</code>: </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Y_oh_train = convert_to_one_hot(Y_train, C = <span class="number">5</span>)</span><br><span class="line">Y_oh_test = convert_to_one_hot(Y_test, C = <span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<p>Let’s see what <code>convert_to_one_hot()</code> did. Feel free to change <code>index</code> to print out different values. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">index = <span class="number">50</span></span><br><span class="line">print(Y_train[index], <span class="string">"is converted into one hot"</span>, Y_oh_train[index])</span><br></pre></td></tr></table></figure>
<pre><code>0 is converted into one hot [ 1.  0.  0.  0.  0.]
</code></pre><p>All the data is now ready to be fed into the Emojify-V1 model. Let’s implement the model!</p>
<h3 id="1-3-Implementing-Emojifier-V1"><a href="#1-3-Implementing-Emojifier-V1" class="headerlink" title="1.3 - Implementing Emojifier-V1"></a>1.3 - Implementing Emojifier-V1</h3><p>As shown in Figure (2), the first step is to convert an input sentence into the word vector representation, which then get averaged together. Similar to the previous exercise, we will use pretrained 50-dimensional GloVe embeddings. Run the following cell to load the <code>word_to_vec_map</code>, which contains all the vector representations.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">word_to_index, index_to_word, word_to_vec_map = read_glove_vecs(<span class="string">'../../readonly/glove.6B.50d.txt'</span>)</span><br></pre></td></tr></table></figure>
<p>You’ve loaded:</p>
<ul>
<li><code>word_to_index</code>: dictionary mapping from words to their indices in the vocabulary (400,001 words, with the valid indices ranging from 0 to 400,000)</li>
<li><code>index_to_word</code>: dictionary mapping from indices to their corresponding words in the vocabulary</li>
<li><code>word_to_vec_map</code>: dictionary mapping words to their GloVe vector representation.</li>
</ul>
<p>Run the following cell to check if it works.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">word = <span class="string">"cucumber"</span></span><br><span class="line">index = <span class="number">289846</span></span><br><span class="line">print(<span class="string">"the index of"</span>, word, <span class="string">"in the vocabulary is"</span>, word_to_index[word])</span><br><span class="line">print(<span class="string">"the"</span>, str(index) + <span class="string">"th word in the vocabulary is"</span>, index_to_word[index])</span><br></pre></td></tr></table></figure>
<pre><code>the index of cucumber in the vocabulary is 113317
the 289846th word in the vocabulary is potatos
</code></pre><p><strong>Exercise</strong>: Implement <code>sentence_to_avg()</code>. You will need to carry out two steps:</p>
<ol>
<li>Convert every sentence to lower-case, then split the sentence into a list of words. <code>X.lower()</code> and <code>X.split()</code> might be useful. </li>
<li>For each word in the sentence, access its GloVe representation. Then, average all these values.</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: sentence_to_avg</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sentence_to_avg</span><span class="params">(sentence, word_to_vec_map)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Converts a sentence (string) into a list of words (strings). Extracts the GloVe representation of each word</span></span><br><span class="line"><span class="string">    and averages its value into a single vector encoding the meaning of the sentence.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    sentence -- string, one training example from X</span></span><br><span class="line"><span class="string">    word_to_vec_map -- dictionary mapping every word in a vocabulary into its 50-dimensional vector representation</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    avg -- average vector encoding information about the sentence, numpy-array of shape (50,)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    <span class="comment"># Step 1: Split sentence into list of lower case words (≈ 1 line)</span></span><br><span class="line">    words = [word.strip().lower() <span class="keyword">for</span> word <span class="keyword">in</span> sentence.split()]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Initialize the average word vector, should have the same shape as your word vectors.</span></span><br><span class="line">    avg = np.zeros((<span class="number">50</span>,))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Step 2: average the word vectors. You can loop over the words in the list "words".</span></span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> words:</span><br><span class="line">        avg += word_to_vec_map[w]</span><br><span class="line">    avg = avg/len(words)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> avg</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">avg = sentence_to_avg(<span class="string">"Morrocan couscous is my favorite dish"</span>, word_to_vec_map)</span><br><span class="line">print(<span class="string">"avg = "</span>, avg)</span><br></pre></td></tr></table></figure>
<pre><code>avg =  [-0.008005    0.56370833 -0.50427333  0.258865    0.55131103  0.03104983
 -0.21013718  0.16893933 -0.09590267  0.141784   -0.15708967  0.18525867
  0.6495785   0.38371117  0.21102167  0.11301667  0.02613967  0.26037767
  0.05820667 -0.01578167 -0.12078833 -0.02471267  0.4128455   0.5152061
  0.38756167 -0.898661   -0.535145    0.33501167  0.68806933 -0.2156265
  1.797155    0.10476933 -0.36775333  0.750785    0.10282583  0.348925
 -0.27262833  0.66768    -0.10706167 -0.283635    0.59580117  0.28747333
 -0.3366635   0.23393817  0.34349183  0.178405    0.1166155  -0.076433
  0.1445417   0.09808667]
</code></pre><p><strong>Expected Output</strong>:</p>
<table>
    <tr>
        <td>
            **avg= **
        </td>
        <td>
           [-0.008005    0.56370833 -0.50427333  0.258865    0.55131103  0.03104983
 -0.21013718  0.16893933 -0.09590267  0.141784   -0.15708967  0.18525867
  0.6495785   0.38371117  0.21102167  0.11301667  0.02613967  0.26037767
  0.05820667 -0.01578167 -0.12078833 -0.02471267  0.4128455   0.5152061
  0.38756167 -0.898661   -0.535145    0.33501167  0.68806933 -0.2156265
  1.797155    0.10476933 -0.36775333  0.750785    0.10282583  0.348925
 -0.27262833  0.66768    -0.10706167 -0.283635    0.59580117  0.28747333
 -0.3366635   0.23393817  0.34349183  0.178405    0.1166155  -0.076433
  0.1445417   0.09808667]
        </td>
    </tr>
</table>

<h4 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h4><p>You now have all the pieces to finish implementing the <code>model()</code> function. After using <code>sentence_to_avg()</code> you need to pass the average through forward propagation, compute the cost, and then backpropagate to update the softmax’s parameters. </p>
<p><strong>Exercise</strong>: Implement the <code>model()</code> function described in Figure (2). Assuming here that $Yoh$ (“Y one hot”) is the one-hot encoding of the output labels, the equations you need to implement in the forward pass and to compute the cross-entropy cost are:</p>
<script type="math/tex; mode=display">z^{(i)} = W . avg^{(i)} + b</script><script type="math/tex; mode=display">a^{(i)} = softmax(z^{(i)})</script><script type="math/tex; mode=display">\mathcal{L}^{(i)} = - \sum_{k = 0}^{n_y - 1} Yoh^{(i)}_k * log(a^{(i)}_k)</script><p>It is possible to come up with a more efficient vectorized implementation. But since we are using a for-loop to convert the sentences one at a time into the avg^{(i)} representation anyway, let’s not bother this time. </p>
<p>We provided you a function <code>softmax()</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: model</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">model</span><span class="params">(X, Y, word_to_vec_map, learning_rate = <span class="number">0.01</span>, num_iterations = <span class="number">400</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Model to train word vector representations in numpy.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    X -- input data, numpy array of sentences as strings, of shape (m, 1)</span></span><br><span class="line"><span class="string">    Y -- labels, numpy array of integers between 0 and 7, numpy-array of shape (m, 1)</span></span><br><span class="line"><span class="string">    word_to_vec_map -- dictionary mapping every word in a vocabulary into its 50-dimensional vector representation</span></span><br><span class="line"><span class="string">    learning_rate -- learning_rate for the stochastic gradient descent algorithm</span></span><br><span class="line"><span class="string">    num_iterations -- number of iterations</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    pred -- vector of predictions, numpy-array of shape (m, 1)</span></span><br><span class="line"><span class="string">    W -- weight matrix of the softmax layer, of shape (n_y, n_h)</span></span><br><span class="line"><span class="string">    b -- bias of the softmax layer, of shape (n_y,)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    np.random.seed(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Define number of training examples</span></span><br><span class="line">    m = Y.shape[<span class="number">0</span>]                          <span class="comment"># number of training examples</span></span><br><span class="line">    n_y = <span class="number">5</span>                                 <span class="comment"># number of classes  </span></span><br><span class="line">    n_h = <span class="number">50</span>                                <span class="comment"># dimensions of the GloVe vectors </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Initialize parameters using Xavier initialization</span></span><br><span class="line">    W = np.random.randn(n_y, n_h) / np.sqrt(n_h)</span><br><span class="line">    b = np.zeros((n_y,))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Convert Y to Y_onehot with n_y classes</span></span><br><span class="line">    Y_oh = convert_to_one_hot(Y, C = n_y) </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Optimization loop</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> range(num_iterations):                       <span class="comment"># Loop over the number of iterations</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m):                                <span class="comment"># Loop over the training examples</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">### START CODE HERE ### (≈ 4 lines of code)</span></span><br><span class="line">            <span class="comment"># Average the word vectors of the words from the i'th training example</span></span><br><span class="line">            avg = sentence_to_avg(X[i], word_to_vec_map)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Forward propagate the avg through the softmax layer</span></span><br><span class="line">            z = np.dot(W,avg) + b</span><br><span class="line">            a = softmax(z)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Compute cost using the i'th training label's one hot representation and "A" (the output of the softmax)</span></span><br><span class="line">            cost = - np.sum(Y_oh[i] * np.log(a))</span><br><span class="line">            <span class="comment">### END CODE HERE ###</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># Compute gradients </span></span><br><span class="line">            dz = a - Y_oh[i]</span><br><span class="line">            dW = np.dot(dz.reshape(n_y,<span class="number">1</span>), avg.reshape(<span class="number">1</span>, n_h))</span><br><span class="line">            db = dz</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Update parameters with Stochastic Gradient Descent</span></span><br><span class="line">            W = W - learning_rate * dW</span><br><span class="line">            b = b - learning_rate * db</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> t % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">"Epoch: "</span> + str(t) + <span class="string">" --- cost = "</span> + str(cost))</span><br><span class="line">            pred = predict(X, Y, W, b, word_to_vec_map)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pred, W, b</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(X_train.shape)</span><br><span class="line">print(Y_train.shape)</span><br><span class="line">print(np.eye(<span class="number">5</span>)[Y_train.reshape(<span class="number">-1</span>)].shape)</span><br><span class="line">print(X_train[<span class="number">0</span>])</span><br><span class="line">print(type(X_train))</span><br><span class="line">Y = np.asarray([<span class="number">5</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">5</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>])</span><br><span class="line">print(Y.shape)</span><br><span class="line"></span><br><span class="line">X = np.asarray([<span class="string">'I am going to the bar tonight'</span>, <span class="string">'I love you'</span>, <span class="string">'miss you my dear'</span>,</span><br><span class="line"> <span class="string">'Lets go party and drinks'</span>,<span class="string">'Congrats on the new job'</span>,<span class="string">'Congratulations'</span>,</span><br><span class="line"> <span class="string">'I am so happy for you'</span>, <span class="string">'Why are you feeling bad'</span>, <span class="string">'What is wrong with you'</span>,</span><br><span class="line"> <span class="string">'You totally deserve this prize'</span>, <span class="string">'Let us go play football'</span>,</span><br><span class="line"> <span class="string">'Are you down for football this afternoon'</span>, <span class="string">'Work hard play harder'</span>,</span><br><span class="line"> <span class="string">'It is suprising how people can be dumb sometimes'</span>,</span><br><span class="line"> <span class="string">'I am very disappointed'</span>,<span class="string">'It is the best day in my life'</span>,</span><br><span class="line"> <span class="string">'I think I will end up alone'</span>,<span class="string">'My life is so boring'</span>,<span class="string">'Good job'</span>,</span><br><span class="line"> <span class="string">'Great so awesome'</span>])</span><br><span class="line"></span><br><span class="line">print(X.shape)</span><br><span class="line">print(np.eye(<span class="number">5</span>)[Y_train.reshape(<span class="number">-1</span>)].shape)</span><br><span class="line">print(type(X_train))</span><br></pre></td></tr></table></figure>
<pre><code>(132,)
(132,)
(132, 5)
never talk to me again
&lt;class &#39;numpy.ndarray&#39;&gt;
(20,)
(20,)
(132, 5)
&lt;class &#39;numpy.ndarray&#39;&gt;
</code></pre><p>Run the next cell to train your model and learn the softmax parameters (W,b). </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pred, W, b = model(X_train, Y_train, word_to_vec_map)</span><br><span class="line">print(pred)</span><br></pre></td></tr></table></figure>
<pre><code>Epoch: 0 --- cost = 1.95204988128
Accuracy: 0.348484848485
Epoch: 100 --- cost = 0.0797181872601
Accuracy: 0.931818181818
Epoch: 200 --- cost = 0.0445636924368
Accuracy: 0.954545454545
Epoch: 300 --- cost = 0.0343226737879
Accuracy: 0.969696969697
[[ 3.]
 [ 2.]
 [ 3.]
 [ 0.]
 [ 4.]
 [ 0.]
 [ 3.]
 [ 2.]
 [ 3.]
 [ 1.]
 [ 3.]
 [ 3.]
 [ 1.]
 [ 3.]
 [ 2.]
 [ 3.]
 [ 2.]
 [ 3.]
 [ 1.]
 [ 2.]
 [ 3.]
 [ 0.]
 [ 2.]
 [ 2.]
 [ 2.]
 [ 1.]
 [ 4.]
 [ 3.]
 [ 3.]
 [ 4.]
 [ 0.]
 [ 3.]
 [ 4.]
 [ 2.]
 [ 0.]
 [ 3.]
 [ 2.]
 [ 2.]
 [ 3.]
 [ 4.]
 [ 2.]
 [ 2.]
 [ 0.]
 [ 2.]
 [ 3.]
 [ 0.]
 [ 3.]
 [ 2.]
 [ 4.]
 [ 3.]
 [ 0.]
 [ 3.]
 [ 3.]
 [ 3.]
 [ 4.]
 [ 2.]
 [ 1.]
 [ 1.]
 [ 1.]
 [ 2.]
 [ 3.]
 [ 1.]
 [ 0.]
 [ 0.]
 [ 0.]
 [ 3.]
 [ 4.]
 [ 4.]
 [ 2.]
 [ 2.]
 [ 1.]
 [ 2.]
 [ 0.]
 [ 3.]
 [ 2.]
 [ 2.]
 [ 0.]
 [ 3.]
 [ 3.]
 [ 1.]
 [ 2.]
 [ 1.]
 [ 2.]
 [ 2.]
 [ 4.]
 [ 3.]
 [ 3.]
 [ 2.]
 [ 4.]
 [ 0.]
 [ 0.]
 [ 3.]
 [ 3.]
 [ 3.]
 [ 3.]
 [ 2.]
 [ 0.]
 [ 1.]
 [ 2.]
 [ 3.]
 [ 0.]
 [ 2.]
 [ 2.]
 [ 2.]
 [ 3.]
 [ 2.]
 [ 2.]
 [ 2.]
 [ 4.]
 [ 1.]
 [ 1.]
 [ 3.]
 [ 3.]
 [ 4.]
 [ 1.]
 [ 2.]
 [ 1.]
 [ 1.]
 [ 3.]
 [ 1.]
 [ 0.]
 [ 4.]
 [ 0.]
 [ 3.]
 [ 3.]
 [ 4.]
 [ 4.]
 [ 1.]
 [ 4.]
 [ 3.]
 [ 0.]
 [ 2.]]
</code></pre><p><strong>Expected Output</strong> (on a subset of iterations):</p>
<table>
    <tr>
        <td>
            **Epoch: 0**
        </td>
        <td>
           cost = 1.95204988128
        </td>
        <td>
           Accuracy: 0.348484848485
        </td>
    </tr>


<tr>
        <td>
            **Epoch: 100**
        </td>
        <td>
           cost = 0.0797181872601
        </td>
        <td>
           Accuracy: 0.931818181818
        </td>
    </tr>

<tr>
        <td>
            **Epoch: 200**
        </td>
        <td>
           cost = 0.0445636924368
        </td>
        <td>
           Accuracy: 0.954545454545
        </td>
    </tr>

    <tr>
        <td>
            **Epoch: 300**
        </td>
        <td>
           cost = 0.0343226737879
        </td>
        <td>
           Accuracy: 0.969696969697
        </td>
    </tr>
</table>

<p>Great! Your model has pretty high accuracy on the training set. Lets now see how it does on the test set. </p>
<h3 id="1-4-Examining-test-set-performance"><a href="#1-4-Examining-test-set-performance" class="headerlink" title="1.4 - Examining test set performance"></a>1.4 - Examining test set performance</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"Training set:"</span>)</span><br><span class="line">pred_train = predict(X_train, Y_train, W, b, word_to_vec_map)</span><br><span class="line">print(<span class="string">'Test set:'</span>)</span><br><span class="line">pred_test = predict(X_test, Y_test, W, b, word_to_vec_map)</span><br></pre></td></tr></table></figure>
<pre><code>Training set:
Accuracy: 0.977272727273
Test set:
Accuracy: 0.857142857143
</code></pre><p><strong>Expected Output</strong>:</p>
<table>
    <tr>
        <td>
            **Train set accuracy**
        </td>
        <td>
           97.7
        </td>
    </tr>
    <tr>
        <td>
            **Test set accuracy**
        </td>
        <td>
           85.7
        </td>
    </tr>
</table>

<p>Random guessing would have had 20% accuracy given that there are 5 classes. This is pretty good performance after training on only 127 examples. </p>
<p>In the training set, the algorithm saw the sentence “<em>I love you</em>“ with the label ❤️. You can check however that the word “adore” does not appear in the training set. Nonetheless, lets see what happens if you write “<em>I adore you</em>.”</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X_my_sentences = np.array([<span class="string">"i adore you"</span>, <span class="string">"i love you"</span>, <span class="string">"funny lol"</span>, <span class="string">"lets play with a ball"</span>, <span class="string">"food is ready"</span>, <span class="string">"not feeling happy"</span>])</span><br><span class="line">Y_my_labels = np.array([[<span class="number">0</span>], [<span class="number">0</span>], [<span class="number">2</span>], [<span class="number">1</span>], [<span class="number">4</span>],[<span class="number">3</span>]])</span><br><span class="line"></span><br><span class="line">pred = predict(X_my_sentences, Y_my_labels , W, b, word_to_vec_map)</span><br><span class="line">print_predictions(X_my_sentences, pred)</span><br></pre></td></tr></table></figure>
<pre><code>Accuracy: 0.833333333333

i adore you ❤️
i love you ❤️
funny lol 😄
lets play with a ball ⚾
food is ready 🍴
not feeling happy 😄
</code></pre><p>Amazing! Because <em>adore</em> has a similar embedding as <em>love</em>, the algorithm has generalized correctly even to a word it has never seen before. Words such as <em>heart</em>, <em>dear</em>, <em>beloved</em> or <em>adore</em> have embedding vectors similar to <em>love</em>, and so might work too—-feel free to modify the inputs above and try out a variety of input sentences. How well does it work?</p>
<p>Note though that it doesn’t get “not feeling happy” correct. This algorithm ignores word ordering, so is not good at understanding phrases like “not happy.” </p>
<p>Printing the confusion matrix can also help understand which classes are more difficult for your model. A confusion matrix shows how often an example whose label is one class (“actual” class) is mislabeled by the algorithm with a different class (“predicted” class). </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(Y_test.shape)</span><br><span class="line">print(<span class="string">'           '</span>+ label_to_emoji(<span class="number">0</span>)+ <span class="string">'    '</span> + label_to_emoji(<span class="number">1</span>) + <span class="string">'    '</span> +  label_to_emoji(<span class="number">2</span>)+ <span class="string">'    '</span> + label_to_emoji(<span class="number">3</span>)+<span class="string">'   '</span> + label_to_emoji(<span class="number">4</span>))</span><br><span class="line">print(pd.crosstab(Y_test, pred_test.reshape(<span class="number">56</span>,), rownames=[<span class="string">'Actual'</span>], colnames=[<span class="string">'Predicted'</span>], margins=<span class="keyword">True</span>))</span><br><span class="line">plot_confusion_matrix(Y_test, pred_test)</span><br></pre></td></tr></table></figure>
<pre><code>(56,)
           ❤️    ⚾    😄    😞   🍴
Predicted  0.0  1.0  2.0  3.0  4.0  All
Actual                                 
0            6    0    0    1    0    7
1            0    8    0    0    0    8
2            2    0   16    0    0   18
3            1    1    2   12    0   16
4            0    0    1    0    6    7
All          9    9   19   13    6   56
</code></pre><p><img src="output_34_1.png" alt="png"></p>
<p><font color="blue"><br><strong>What you should remember from this part</strong>:</font></p>
<ul>
<li>Even with a 127 training examples, you can get a reasonably good model for Emojifying. This is due to the generalization power word vectors gives you. </li>
<li>Emojify-V1 will perform poorly on sentences such as <em>“This movie is not good and not enjoyable”</em> because it doesn’t understand combinations of words—it just averages all the words’ embedding vectors together, without paying attention to the ordering of words. You will build a better algorithm in the next part. </li>
</ul>
<h2 id="2-Emojifier-V2-Using-LSTMs-in-Keras"><a href="#2-Emojifier-V2-Using-LSTMs-in-Keras" class="headerlink" title="2 - Emojifier-V2: Using LSTMs in Keras:"></a>2 - Emojifier-V2: Using LSTMs in Keras:</h2><p>Let’s build an LSTM model that takes as input word sequences. This model will be able to take word ordering into account. Emojifier-V2 will continue to use pre-trained word embeddings to represent words, but will feed them into an LSTM, whose job it is to predict the most appropriate emoji. </p>
<p>Run the following cell to load the Keras packages.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Model</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense, Input, Dropout, LSTM, Activation</span><br><span class="line"><span class="keyword">from</span> keras.layers.embeddings <span class="keyword">import</span> Embedding</span><br><span class="line"><span class="keyword">from</span> keras.preprocessing <span class="keyword">import</span> sequence</span><br><span class="line"><span class="keyword">from</span> keras.initializers <span class="keyword">import</span> glorot_uniform</span><br><span class="line">np.random.seed(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<pre><code>Using TensorFlow backend.
</code></pre><h3 id="2-1-Overview-of-the-model"><a href="#2-1-Overview-of-the-model" class="headerlink" title="2.1 - Overview of the model"></a>2.1 - Overview of the model</h3><p>Here is the Emojifier-v2 you will implement:</p>
<p><img src="images/emojifier-v2.png" style="width:700px;height:400px;"> <br></p>
<caption><center> **Figure 3**: Emojifier-V2. A 2-layer LSTM sequence classifier. </center></caption>



<h3 id="2-2-Keras-and-mini-batching"><a href="#2-2-Keras-and-mini-batching" class="headerlink" title="2.2 Keras and mini-batching"></a>2.2 Keras and mini-batching</h3><p>In this exercise, we want to train Keras using mini-batches. However, most deep learning frameworks require that all sequences in the same mini-batch have the same length. This is what allows vectorization to work: If you had a 3-word sentence and a 4-word sentence, then the computations needed for them are different (one takes 3 steps of an LSTM, one takes 4 steps) so it’s just not possible to do them both at the same time.</p>
<p>The common solution to this is to use padding. Specifically, set a maximum sequence length, and pad all sequences to the same length. For example, of the maximum sequence length is 20, we could pad every sentence with “0”s so that each input sentence is of length 20. Thus, a sentence “i love you” would be represented as $(e_{i}, e_{love}, e_{you}, \vec{0}, \vec{0}, \ldots, \vec{0})$. In this example, any sentences longer than 20 words would have to be truncated. One simple way to choose the maximum sequence length is to just pick the length of the longest sentence in the training set. </p>
<h3 id="2-3-The-Embedding-layer"><a href="#2-3-The-Embedding-layer" class="headerlink" title="2.3 - The Embedding layer"></a>2.3 - The Embedding layer</h3><p>In Keras, the embedding matrix is represented as a “layer”, and maps positive integers (indices corresponding to words) into dense vectors of fixed size (the embedding vectors). It can be trained or initialized with a pretrained embedding. In this part, you will learn how to create an <a href="https://keras.io/layers/embeddings/" target="_blank" rel="noopener">Embedding()</a> layer in Keras, initialize it with the GloVe 50-dimensional vectors loaded earlier in the notebook. Because our training set is quite small, we will not update the word embeddings but will instead leave their values fixed. But in the code below, we’ll show you how Keras allows you to either train or leave fixed this layer.  </p>
<p>The <code>Embedding()</code> layer takes an integer matrix of size (batch size, max input length) as input. This corresponds to sentences converted into lists of indices (integers), as shown in the figure below.</p>
<p><img src="images/embedding1.png" style="width:700px;height:250px;"></p>
<caption><center> **Figure 4**: Embedding layer. This example shows the propagation of two examples through the embedding layer. Both have been zero-padded to a length of `max_len=5`. The final dimension of the representation is  `(2,max_len,50)` because the word embeddings we are using are 50 dimensional. </center></caption>

<p>The largest integer (i.e. word index) in the input should be no larger than the vocabulary size. The layer outputs an array of shape (batch size, max input length, dimension of word vectors).</p>
<p>The first step is to convert all your training sentences into lists of indices, and then zero-pad all these lists so that their length is the length of the longest sentence. </p>
<p><strong>Exercise</strong>: Implement the function below to convert X (array of sentences as strings) into an array of indices corresponding to words in the sentences. The output shape should be such that it can be given to <code>Embedding()</code> (described in Figure 4). </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: sentences_to_indices</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sentences_to_indices</span><span class="params">(X, word_to_index, max_len)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Converts an array of sentences (strings) into an array of indices corresponding to words in the sentences.</span></span><br><span class="line"><span class="string">    The output shape should be such that it can be given to `Embedding()` (described in Figure 4). </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    X -- array of sentences (strings), of shape (m, 1)</span></span><br><span class="line"><span class="string">    word_to_index -- a dictionary containing the each word mapped to its index</span></span><br><span class="line"><span class="string">    max_len -- maximum number of words in a sentence. You can assume every sentence in X is no longer than this. </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    X_indices -- array of indices corresponding to words in the sentences from X, of shape (m, max_len)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    m = X.shape[<span class="number">0</span>]                                   <span class="comment"># number of training examples</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    <span class="comment"># Initialize X_indices as a numpy matrix of zeros and the correct shape (≈ 1 line)</span></span><br><span class="line">    X_indices = np.zeros((m,max_len))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(m):                               <span class="comment"># loop over training examples</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Convert the ith training sentence in lower case and split is into words. You should get a list of words.</span></span><br><span class="line">        sentence_words = list(word.strip().lower() <span class="keyword">for</span> word <span class="keyword">in</span> X[i].split())</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Initialize j to 0</span></span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Loop over the words of sentence_words</span></span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> sentence_words:</span><br><span class="line">            <span class="comment"># Set the (i,j)th entry of X_indices to the index of the correct word.</span></span><br><span class="line">            X_indices[i, j] = word_to_index[w]</span><br><span class="line">            <span class="comment"># Increment j to j + 1</span></span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> X_indices</span><br></pre></td></tr></table></figure>
<p>Run the following cell to check what <code>sentences_to_indices()</code> does, and check your results.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X1 = np.array([<span class="string">"funny lol"</span>, <span class="string">"lets play baseball"</span>, <span class="string">"food is ready for you"</span>])</span><br><span class="line">X1_indices = sentences_to_indices(X1,word_to_index, max_len = <span class="number">5</span>)</span><br><span class="line">print(<span class="string">"X1 ="</span>, X1)</span><br><span class="line">print(<span class="string">"X1_indices ="</span>, X1_indices)</span><br></pre></td></tr></table></figure>
<pre><code>X1 = [&#39;funny lol&#39; &#39;lets play baseball&#39; &#39;food is ready for you&#39;]
X1_indices = [[ 155345.  225122.       0.       0.       0.]
 [ 220930.  286375.   69714.       0.       0.]
 [ 151204.  192973.  302254.  151349.  394475.]]
</code></pre><p><strong>Expected Output</strong>:</p>
<table>
    <tr>
        <td>
            **X1 =**
        </td>
        <td>
           ['funny lol' 'lets play football' 'food is ready for you']
        </td>
    </tr>
    <tr>
        <td>
            **X1_indices =**
        </td>
        <td>
           [[ 155345.  225122.       0.       0.       0.] <br>
            [ 220930.  286375.  151266.       0.       0.] <br>
            [ 151204.  192973.  302254.  151349.  394475.]]
        </td>
    </tr>
</table>

<p>Let’s build the <code>Embedding()</code> layer in Keras, using pre-trained word vectors. After this layer is built, you will pass the output of <code>sentences_to_indices()</code> to it as an input, and the <code>Embedding()</code> layer will return the word embeddings for a sentence. </p>
<p><strong>Exercise</strong>: Implement <code>pretrained_embedding_layer()</code>. You will need to carry out the following steps:</p>
<ol>
<li>Initialize the embedding matrix as a numpy array of zeroes with the correct shape.</li>
<li>Fill in the embedding matrix with all the word embeddings extracted from <code>word_to_vec_map</code>.</li>
<li>Define Keras embedding layer. Use <a href="https://keras.io/layers/embeddings/" target="_blank" rel="noopener">Embedding()</a>. Be sure to make this layer non-trainable, by setting <code>trainable = False</code> when calling <code>Embedding()</code>. If you were to set <code>trainable = True</code>, then it will allow the optimization algorithm to modify the values of the word embeddings. </li>
<li>Set the embedding weights to be equal to the embedding matrix </li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: pretrained_embedding_layer</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pretrained_embedding_layer</span><span class="params">(word_to_vec_map, word_to_index)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Creates a Keras Embedding() layer and loads in pre-trained GloVe 50-dimensional vectors.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    word_to_vec_map -- dictionary mapping words to their GloVe vector representation.</span></span><br><span class="line"><span class="string">    word_to_index -- dictionary mapping from words to their indices in the vocabulary (400,001 words)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    embedding_layer -- pretrained layer Keras instance</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    vocab_len = len(word_to_index) + <span class="number">1</span>                  <span class="comment"># adding 1 to fit Keras embedding (requirement)</span></span><br><span class="line">    emb_dim = word_to_vec_map[<span class="string">"cucumber"</span>].shape[<span class="number">0</span>]      <span class="comment"># define dimensionality of your GloVe word vectors (= 50)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    <span class="comment"># Initialize the embedding matrix as a numpy array of zeros of shape (vocab_len, dimensions of word vectors = emb_dim)</span></span><br><span class="line">    emb_matrix = np.zeros((vocab_len,emb_dim))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Set each row "index" of the embedding matrix to be the word vector representation of the "index"th word of the vocabulary</span></span><br><span class="line">    <span class="keyword">for</span> word, index <span class="keyword">in</span> word_to_index.items():</span><br><span class="line">        emb_matrix[index, :] = word_to_vec_map[word]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Define Keras embedding layer with the correct output/input sizes, make it trainable. Use Embedding(...). Make sure to set trainable=False. </span></span><br><span class="line">    embedding_layer = Embedding(input_dim=vocab_len, output_dim=emb_dim, trainable = <span class="keyword">False</span>)</span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Build the embedding layer, it is required before setting the weights of the embedding layer. Do not modify the "None".</span></span><br><span class="line">    embedding_layer.build((<span class="keyword">None</span>,))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Set the weights of the embedding layer to the embedding matrix. Your layer is now pretrained.</span></span><br><span class="line">    embedding_layer.set_weights([emb_matrix])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> embedding_layer</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">embedding_layer = pretrained_embedding_layer(word_to_vec_map, word_to_index)</span><br><span class="line">print(<span class="string">"weights[0][1][3] ="</span>, embedding_layer.get_weights()[<span class="number">0</span>][<span class="number">1</span>][<span class="number">3</span>])</span><br></pre></td></tr></table></figure>
<pre><code>weights[0][1][3] = -0.3403
</code></pre><p><strong>Expected Output</strong>:</p>
<table>
    <tr>
        <td>
            **weights[0][1][3] =**
        </td>
        <td>
           -0.3403
        </td>
    </tr>
</table>

<h2 id="2-3-Building-the-Emojifier-V2"><a href="#2-3-Building-the-Emojifier-V2" class="headerlink" title="2.3 Building the Emojifier-V2"></a>2.3 Building the Emojifier-V2</h2><p>Lets now build the Emojifier-V2 model. You will do so using the embedding layer you have built, and feed its output to an LSTM network. </p>
<p><img src="images/emojifier-v2.png" style="width:700px;height:400px;"> <br></p>
<caption><center> **Figure 3**: Emojifier-v2. A 2-layer LSTM sequence classifier. </center></caption>


<p><strong>Exercise:</strong> Implement <code>Emojify_V2()</code>, which builds a Keras graph of the architecture shown in Figure 3. The model takes as input an array of sentences of shape (<code>m</code>, <code>max_len</code>, ) defined by <code>input_shape</code>. It should output a softmax probability vector of shape (<code>m</code>, <code>C = 5</code>). You may need <code>Input(shape = ..., dtype = &#39;...&#39;)</code>, <a href="https://keras.io/layers/recurrent/#lstm" target="_blank" rel="noopener">LSTM()</a>, <a href="https://keras.io/layers/core/#dropout" target="_blank" rel="noopener">Dropout()</a>, <a href="https://keras.io/layers/core/#dense" target="_blank" rel="noopener">Dense()</a>, and <a href="https://keras.io/activations/" target="_blank" rel="noopener">Activation()</a>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: Emojify_V2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Emojify_V2</span><span class="params">(input_shape, word_to_vec_map, word_to_index)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Function creating the Emojify-v2 model's graph.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    input_shape -- shape of the input, usually (max_len,)</span></span><br><span class="line"><span class="string">    word_to_vec_map -- dictionary mapping every word in a vocabulary into its 50-dimensional vector representation</span></span><br><span class="line"><span class="string">    word_to_index -- dictionary mapping from words to their indices in the vocabulary (400,001 words)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    model -- a model instance in Keras</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    <span class="comment"># Define sentence_indices as the input of the graph, it should be of shape input_shape and dtype 'int32' (as it contains indices).</span></span><br><span class="line">    sentence_indices = Input(shape=input_shape, dtype=np.int32)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Create the embedding layer pretrained with GloVe Vectors (≈1 line)</span></span><br><span class="line">    embedding_layer = pretrained_embedding_layer(word_to_vec_map, word_to_index)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Propagate sentence_indices through your embedding layer, you get back the embeddings</span></span><br><span class="line">    embeddings = embedding_layer(sentence_indices)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Propagate the embeddings through an LSTM layer with 128-dimensional hidden state</span></span><br><span class="line">    <span class="comment"># Be careful, the returned output should be a batch of sequences.</span></span><br><span class="line">    X = LSTM(<span class="number">128</span>, return_sequences=<span class="keyword">True</span>)(embeddings)</span><br><span class="line">    <span class="comment"># Add dropout with a probability of 0.5</span></span><br><span class="line">    X = Dropout(<span class="number">0.5</span>)(X)</span><br><span class="line">    <span class="comment"># Propagate X trough another LSTM layer with 128-dimensional hidden state</span></span><br><span class="line">    <span class="comment"># Be careful, the returned output should be a single hidden state, not a batch of sequences.</span></span><br><span class="line">    X = LSTM(<span class="number">128</span>)(X)</span><br><span class="line">    <span class="comment"># Add dropout with a probability of 0.5</span></span><br><span class="line">    X = Dropout(<span class="number">0.5</span>)(X)</span><br><span class="line">    <span class="comment"># Propagate X through a Dense layer with softmax activation to get back a batch of 5-dimensional vectors.</span></span><br><span class="line">    X = Dense(<span class="number">5</span>)(X)</span><br><span class="line">    <span class="comment"># Add a softmax activation</span></span><br><span class="line">    X = Activation(<span class="string">"softmax"</span>)(X)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Create Model instance which converts sentence_indices into X.</span></span><br><span class="line">    model = Model(sentence_indices, X)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> model</span><br></pre></td></tr></table></figure>
<p>Run the following cell to create your model and check its summary. Because all sentences in the dataset are less than 10 words, we chose <code>max_len = 10</code>.  You should see your architecture, it uses “20,223,927” parameters, of which 20,000,050 (the word embeddings) are non-trainable, and the remaining 223,877 are. Because our vocabulary size has 400,001 words (with valid indices from 0 to 400,000) there are 400,001*50 = 20,000,050 non-trainable parameters. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model = Emojify_V2((maxLen,), word_to_vec_map, word_to_index)</span><br><span class="line">model.summary()</span><br></pre></td></tr></table></figure>
<pre><code>_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
input_8 (InputLayer)         (None, 10)                0         
_________________________________________________________________
embedding_12 (Embedding)     (None, 10, 50)            20000050  
_________________________________________________________________
lstm_7 (LSTM)                (None, 10, 128)           91648     
_________________________________________________________________
dropout_7 (Dropout)          (None, 10, 128)           0         
_________________________________________________________________
lstm_8 (LSTM)                (None, 128)               131584    
_________________________________________________________________
dropout_8 (Dropout)          (None, 128)               0         
_________________________________________________________________
dense_4 (Dense)              (None, 5)                 645       
_________________________________________________________________
activation_2 (Activation)    (None, 5)                 0         
=================================================================
Total params: 20,223,927
Trainable params: 223,877
Non-trainable params: 20,000,050
_________________________________________________________________
</code></pre><p>As usual, after creating your model in Keras, you need to compile it and define what loss, optimizer and metrics your are want to use. Compile your model using <code>categorical_crossentropy</code> loss, <code>adam</code> optimizer and <code>[&#39;accuracy&#39;]</code> metrics:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model.compile(loss=<span class="string">'categorical_crossentropy'</span>, optimizer=<span class="string">'adam'</span>, metrics=[<span class="string">'accuracy'</span>])</span><br></pre></td></tr></table></figure>
<p>It’s time to train your model. Your Emojifier-V2 <code>model</code> takes as input an array of shape (<code>m</code>, <code>max_len</code>) and outputs probability vectors of shape (<code>m</code>, <code>number of classes</code>). We thus have to convert X_train (array of sentences as strings) to X_train_indices (array of sentences as list of word indices), and Y_train (labels as indices) to Y_train_oh (labels as one-hot vectors).</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X_train_indices = sentences_to_indices(X_train, word_to_index, maxLen)</span><br><span class="line">Y_train_oh = convert_to_one_hot(Y_train, C = <span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<p>Fit the Keras model on <code>X_train_indices</code> and <code>Y_train_oh</code>. We will use <code>epochs = 50</code> and <code>batch_size = 32</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model.fit(X_train_indices, Y_train_oh, epochs = <span class="number">50</span>, batch_size = <span class="number">32</span>, shuffle=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure>
<pre><code>Epoch 1/50
132/132 [==============================] - 2s - loss: 1.5849 - acc: 0.2803     
Epoch 2/50
132/132 [==============================] - 1s - loss: 1.5141 - acc: 0.3561     
Epoch 3/50
132/132 [==============================] - 1s - loss: 1.4491 - acc: 0.4015     
Epoch 4/50
132/132 [==============================] - 1s - loss: 1.3842 - acc: 0.4697     
Epoch 5/50
132/132 [==============================] - 1s - loss: 1.2707 - acc: 0.5682     
Epoch 6/50
132/132 [==============================] - 1s - loss: 1.1938 - acc: 0.6061     
Epoch 7/50
132/132 [==============================] - 1s - loss: 1.0537 - acc: 0.6288     
Epoch 8/50
132/132 [==============================] - 1s - loss: 0.8624 - acc: 0.7197     
Epoch 9/50
132/132 [==============================] - 1s - loss: 0.7310 - acc: 0.7652     
Epoch 10/50
132/132 [==============================] - 1s - loss: 0.7352 - acc: 0.7424     
Epoch 11/50
132/132 [==============================] - 1s - loss: 0.6254 - acc: 0.7727     
Epoch 12/50
132/132 [==============================] - 1s - loss: 0.6052 - acc: 0.7652     
Epoch 13/50
132/132 [==============================] - 1s - loss: 0.4912 - acc: 0.8182     
Epoch 14/50
132/132 [==============================] - 2s - loss: 0.5649 - acc: 0.7955     
Epoch 15/50
132/132 [==============================] - 1s - loss: 0.4459 - acc: 0.8106     
Epoch 16/50
132/132 [==============================] - 1s - loss: 0.4127 - acc: 0.8485     
Epoch 17/50
132/132 [==============================] - 1s - loss: 0.4326 - acc: 0.8409     
Epoch 18/50
132/132 [==============================] - 1s - loss: 0.3347 - acc: 0.8864     
Epoch 19/50
132/132 [==============================] - 1s - loss: 0.3094 - acc: 0.8788     
Epoch 20/50
132/132 [==============================] - 1s - loss: 0.3379 - acc: 0.8864     
Epoch 21/50
132/132 [==============================] - 1s - loss: 0.2688 - acc: 0.9091     
Epoch 22/50
132/132 [==============================] - 1s - loss: 0.2411 - acc: 0.8864     
Epoch 23/50
132/132 [==============================] - 1s - loss: 0.2875 - acc: 0.8939     
Epoch 24/50
132/132 [==============================] - 1s - loss: 0.2610 - acc: 0.9091     
Epoch 25/50
132/132 [==============================] - 1s - loss: 0.2013 - acc: 0.9242     
Epoch 26/50
132/132 [==============================] - 1s - loss: 0.2356 - acc: 0.9167     
Epoch 27/50
132/132 [==============================] - 1s - loss: 0.2242 - acc: 0.9318     
Epoch 28/50
132/132 [==============================] - 1s - loss: 0.2021 - acc: 0.9242     
Epoch 29/50
132/132 [==============================] - 1s - loss: 0.1653 - acc: 0.9394     
Epoch 30/50
132/132 [==============================] - 1s - loss: 0.1255 - acc: 0.9545     
Epoch 31/50
132/132 [==============================] - 1s - loss: 0.1019 - acc: 0.9697     
Epoch 32/50
132/132 [==============================] - 1s - loss: 0.0817 - acc: 0.9697     
Epoch 33/50
132/132 [==============================] - 1s - loss: 0.0716 - acc: 0.9773     
Epoch 34/50
132/132 [==============================] - 1s - loss: 0.0623 - acc: 0.9848     
Epoch 35/50
132/132 [==============================] - 1s - loss: 0.0860 - acc: 0.9697     
Epoch 36/50
132/132 [==============================] - 1s - loss: 0.0378 - acc: 0.9924     
Epoch 37/50
132/132 [==============================] - 1s - loss: 0.0587 - acc: 0.9848     
Epoch 38/50
132/132 [==============================] - 1s - loss: 0.0995 - acc: 0.9621     
Epoch 39/50
132/132 [==============================] - 1s - loss: 0.1803 - acc: 0.9394     
Epoch 40/50
132/132 [==============================] - 1s - loss: 0.1462 - acc: 0.9545     
Epoch 41/50
132/132 [==============================] - 1s - loss: 0.1343 - acc: 0.9773     
Epoch 42/50
132/132 [==============================] - 1s - loss: 0.1418 - acc: 0.9470     
Epoch 43/50
132/132 [==============================] - 1s - loss: 0.1431 - acc: 0.9621     
Epoch 44/50
132/132 [==============================] - 1s - loss: 0.2848 - acc: 0.8939     
Epoch 45/50
132/132 [==============================] - 1s - loss: 0.2080 - acc: 0.9318     
Epoch 46/50
132/132 [==============================] - 1s - loss: 0.1823 - acc: 0.9242     
Epoch 47/50
132/132 [==============================] - 1s - loss: 0.0987 - acc: 0.9773     
Epoch 48/50
132/132 [==============================] - 1s - loss: 0.1035 - acc: 0.9697     
Epoch 49/50
132/132 [==============================] - 1s - loss: 0.0678 - acc: 0.9924     
Epoch 50/50
132/132 [==============================] - 1s - loss: 0.0584 - acc: 1.0000     





&lt;keras.callbacks.History at 0x7fca9faba2e8&gt;
</code></pre><p>Your model should perform close to <strong>100% accuracy</strong> on the training set. The exact accuracy you get may be a little different. Run the following cell to evaluate your model on the test set. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X_test_indices = sentences_to_indices(X_test, word_to_index, max_len = maxLen)</span><br><span class="line">Y_test_oh = convert_to_one_hot(Y_test, C = <span class="number">5</span>)</span><br><span class="line">loss, acc = model.evaluate(X_test_indices, Y_test_oh)</span><br><span class="line">print()</span><br><span class="line">print(<span class="string">"Test accuracy = "</span>, acc)</span><br></pre></td></tr></table></figure>
<pre><code>56/56 [==============================] - 0s     

Test accuracy =  0.875
</code></pre><p>You should get a test accuracy between 80% and 95%. Run the cell below to see the mislabelled examples. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This code allows you to see the mislabelled examples</span></span><br><span class="line">C = <span class="number">5</span></span><br><span class="line">y_test_oh = np.eye(C)[Y_test.reshape(<span class="number">-1</span>)]</span><br><span class="line">X_test_indices = sentences_to_indices(X_test, word_to_index, maxLen)</span><br><span class="line">pred = model.predict(X_test_indices)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(X_test)):</span><br><span class="line">    x = X_test_indices</span><br><span class="line">    num = np.argmax(pred[i])</span><br><span class="line">    <span class="keyword">if</span>(num != Y_test[i]):</span><br><span class="line">        print(<span class="string">'Expected emoji:'</span>+ label_to_emoji(Y_test[i]) + <span class="string">' prediction: '</span>+ X_test[i] + label_to_emoji(num).strip())</span><br></pre></td></tr></table></figure>
<pre><code>Expected emoji:😞 prediction: This girl is messing with me   ❤️
Expected emoji:😞 prediction: work is horrible   😄
Expected emoji:❤️ prediction: I love taking breaks  😞
Expected emoji:😞 prediction: she is a bully 😄
Expected emoji:⚾ prediction: he can pitch really well   😄
Expected emoji:😞 prediction: go away    ⚾
Expected emoji:❤️ prediction: family is all I have  😞
</code></pre><p>Now you can try it on your own example. Write your own sentence below. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Change the sentence below to see your prediction. Make sure all the words are in the Glove embeddings.  </span></span><br><span class="line">x_test = np.array([<span class="string">'not feeling happy'</span>])</span><br><span class="line">X_test_indices = sentences_to_indices(x_test, word_to_index, maxLen)</span><br><span class="line">print(x_test[<span class="number">0</span>] +<span class="string">' '</span>+  label_to_emoji(np.argmax(model.predict(X_test_indices))))</span><br></pre></td></tr></table></figure>
<pre><code>not feeling happy 😞
</code></pre><p>Previously, Emojify-V1 model did not correctly label “not feeling happy,” but our implementation of Emojiy-V2 got it right. (Keras’ outputs are slightly random each time, so you may not have obtained the same result.) The current model still isn’t very robust at understanding negation (like “not happy”) because the training set is small and so doesn’t have a lot of examples of negation. But if the training set were larger, the LSTM model would be much better than the Emojify-V1 model at understanding such complex sentences. </p>
<h3 id="Congratulations"><a href="#Congratulations" class="headerlink" title="Congratulations!"></a>Congratulations!</h3><p>You have completed this notebook! ❤️❤️❤️</p>
<p><font color="blue"><br><strong>What you should remember</strong>:</font></p>
<ul>
<li>If you have an NLP task where the training set is small, using word embeddings can help your algorithm significantly. Word embeddings allow your model to work on words in the test set that may not even have appeared in your training set. </li>
<li>Training sequence models in Keras (and in most other deep learning frameworks) requires a few important details:<ul>
<li>To use mini-batches, the sequences need to be padded so that all the examples in a mini-batch have the same length. </li>
<li>An <code>Embedding()</code> layer can be initialized with pretrained values. These values can be either fixed or trained further on your dataset. If however your labeled dataset is small, it’s usually not worth trying to train a large pre-trained set of embeddings.   </li>
<li><code>LSTM()</code> has a flag called <code>return_sequences</code> to decide if you would like to return every hidden states or only the last one. </li>
<li>You can use <code>Dropout()</code> right after <code>LSTM()</code> to regularize your network. </li>
</ul>
</li>
</ul>
<p>Congratulations on finishing this assignment and building an Emojifier. We hope you’re happy with what you’ve accomplished in this notebook! </p>
<h1 id="😀😀😀😀😀😀"><a href="#😀😀😀😀😀😀" class="headerlink" title="😀😀😀😀😀😀"></a>😀😀😀😀😀😀</h1><h2 id="Acknowledgments"><a href="#Acknowledgments" class="headerlink" title="Acknowledgments"></a>Acknowledgments</h2><p>Thanks to Alison Darcy and the Woebot team for their advice on the creation of this assignment. Woebot is a chatbot friend that is ready to speak with you 24/7. As part of Woebot’s technology, it uses word embeddings to understand the emotions of what you say. You can play with it by going to <a href="http://woebot.io" target="_blank" rel="noopener">http://woebot.io</a></p>
<p><img src="images/woebot.png" style="width:600px;height:300px;"></p>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Project</tag>
        <tag>Sequence Models</tag>
      </tags>
  </entry>
  <entry>
    <title>Operations on word vectors - Debiasing</title>
    <url>/Operations-on-word-vectors-Debiasing/2019/03/28/</url>
    <content><![CDATA[<h1 id="Operations-on-word-vectors"><a href="#Operations-on-word-vectors" class="headerlink" title="Operations on word vectors"></a>Operations on word vectors</h1><p>Welcome to your first assignment of this week! </p>
<p>Because word embeddings are very computionally expensive to train, most ML practitioners will load a pre-trained set of embeddings. </p>
<p><strong>After this assignment you will be able to:</strong></p>
<ul>
<li>Load pre-trained word vectors, and measure similarity using cosine similarity</li>
<li>Use word embeddings to solve word analogy problems such as Man is to Woman as King is to <strong>__</strong>. </li>
<li>Modify word embeddings to reduce their gender bias </li>
</ul>
<p>Let’s get started! Run the following cell to load the packages you will need.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> w2v_utils <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure>
<pre><code>Using TensorFlow backend.
</code></pre><p>Next, lets load the word vectors. For this assignment, we will use 50-dimensional GloVe vectors to represent words. Run the following cell to load the <code>word_to_vec_map</code>. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">words, word_to_vec_map = read_glove_vecs(<span class="string">'../../readonly/glove.6B.50d.txt'</span>)</span><br></pre></td></tr></table></figure>
<p>You’ve loaded:</p>
<ul>
<li><code>words</code>: set of words in the vocabulary.</li>
<li><code>word_to_vec_map</code>: dictionary mapping words to their GloVe vector representation.</li>
</ul>
<p>You’ve seen that one-hot vectors do not do a good job cpaturing what words are similar. GloVe vectors provide much more useful information about the meaning of individual words. Lets now see how you can use GloVe vectors to decide how similar two words are. </p>
<h1 id="1-Cosine-similarity"><a href="#1-Cosine-similarity" class="headerlink" title="1 - Cosine similarity"></a>1 - Cosine similarity</h1><p>To measure how similar two words are, we need a way to measure the degree of similarity between two embedding vectors for the two words. Given two vectors $u$ and $v$, cosine similarity is defined as follows: </p>
<script type="math/tex; mode=display">\text{CosineSimilarity(u, v)} = \frac {u . v} {||u||_2 ||v||_2} = cos(\theta) \tag{1}</script><p>where $u.v$ is the dot product (or inner product) of two vectors, $||u||_2$ is the norm (or length) of the vector $u$, and $\theta$ is the angle between $u$ and $v$. This similarity depends on the angle between $u$ and $v$. If $u$ and $v$ are very similar, their cosine similarity will be close to 1; if they are dissimilar, the cosine similarity will take a smaller value. </p>
<p><img src="images/cosine_sim.png" style="width:800px;height:250px;"></p>
<caption><center> **Figure 1**: The cosine of the angle between two vectors is a measure of how similar they are</center></caption>

<p><strong>Exercise</strong>: Implement the function <code>cosine_similarity()</code> to evaluate similarity between word vectors.</p>
<p><strong>Reminder</strong>: The norm of $u$ is defined as $ ||u||_2 = \sqrt{\sum_{i=1}^{n} u_i^2}$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: cosine_similarity</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cosine_similarity</span><span class="params">(u, v)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Cosine similarity reflects the degree of similariy between u and v</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        u -- a word vector of shape (n,)          </span></span><br><span class="line"><span class="string">        v -- a word vector of shape (n,)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        cosine_similarity -- the cosine similarity between u and v defined by the formula above.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    distance = <span class="number">0.0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    <span class="comment"># Compute the dot product between u and v (≈1 line)</span></span><br><span class="line">    dot = np.dot(u,v)</span><br><span class="line">    <span class="comment"># Compute the L2 norm of u (≈1 line)</span></span><br><span class="line">    norm_u = np.sqrt(np.sum(u ** <span class="number">2</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Compute the L2 norm of v (≈1 line)</span></span><br><span class="line">    norm_v = np.linalg.norm(v)</span><br><span class="line">    <span class="comment"># Compute the cosine similarity defined by formula (1) (≈1 line)</span></span><br><span class="line">    cosine_similarity = dot / (norm_u * norm_v)</span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> cosine_similarity</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">father = word_to_vec_map[<span class="string">"father"</span>]</span><br><span class="line">mother = word_to_vec_map[<span class="string">"mother"</span>]</span><br><span class="line">ball = word_to_vec_map[<span class="string">"ball"</span>]</span><br><span class="line">crocodile = word_to_vec_map[<span class="string">"crocodile"</span>]</span><br><span class="line">france = word_to_vec_map[<span class="string">"france"</span>]</span><br><span class="line">italy = word_to_vec_map[<span class="string">"italy"</span>]</span><br><span class="line">paris = word_to_vec_map[<span class="string">"paris"</span>]</span><br><span class="line">rome = word_to_vec_map[<span class="string">"rome"</span>]</span><br><span class="line"></span><br><span class="line">print(<span class="string">"cosine_similarity(father, mother) = "</span>, cosine_similarity(father, mother))</span><br><span class="line">print(<span class="string">"cosine_similarity(ball, crocodile) = "</span>,cosine_similarity(ball, crocodile))</span><br><span class="line">print(<span class="string">"cosine_similarity(france - paris, rome - italy) = "</span>,cosine_similarity(france - paris, rome - italy))</span><br></pre></td></tr></table></figure>
<pre><code>cosine_similarity(father, mother) =  0.890903844289
cosine_similarity(ball, crocodile) =  0.274392462614
cosine_similarity(france - paris, rome - italy) =  -0.675147930817
</code></pre><p><strong>Expected Output</strong>:</p>
<table>
    <tr>
        <td>
            **cosine_similarity(father, mother)** =
        </td>
        <td>
         0.890903844289
        </td>
    </tr>
        <tr>
        <td>
            **cosine_similarity(ball, crocodile)** =
        </td>
        <td>
         0.274392462614
        </td>
    </tr>
        <tr>
        <td>
            **cosine_similarity(france - paris, rome - italy)** =
        </td>
        <td>
         -0.675147930817
        </td>
    </tr>
</table>

<p>After you get the correct expected output, please feel free to modify the inputs and measure the cosine similarity between other pairs of words! Playing around the cosine similarity of other inputs will give you a better sense of how word vectors behave. </p>
<h2 id="2-Word-analogy-task"><a href="#2-Word-analogy-task" class="headerlink" title="2 - Word analogy task"></a>2 - Word analogy task</h2><p>In the word analogy task, we complete the sentence <font color="brown">“<em>a</em> is to <em>b</em> as <em>c</em> is to <strong>____</strong>“</font>. An example is <font color="brown"> ‘<em>man</em> is to <em>woman</em> as <em>king</em> is to <em>queen</em>‘ </font>. In detail, we are trying to find a word <em>d</em>, such that the associated word vectors $e_a, e_b, e_c, e_d$ are related in the following manner: $e_b - e_a \approx e_d - e_c$. We will measure the similarity between $e_b - e_a$ and $e_d - e_c$ using cosine similarity. </p>
<p><strong>Exercise</strong>: Complete the code below to be able to perform word analogies!</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: complete_analogy</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">complete_analogy</span><span class="params">(word_a, word_b, word_c, word_to_vec_map)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Performs the word analogy task as explained above: a is to b as c is to ____. </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    word_a -- a word, string</span></span><br><span class="line"><span class="string">    word_b -- a word, string</span></span><br><span class="line"><span class="string">    word_c -- a word, string</span></span><br><span class="line"><span class="string">    word_to_vec_map -- dictionary that maps words to their corresponding vectors. </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    best_word --  the word such that v_b - v_a is close to v_best_word - v_c, as measured by cosine similarity</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># convert words to lower case</span></span><br><span class="line">    word_a, word_b, word_c = word_a.lower(), word_b.lower(), word_c.lower()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    <span class="comment"># Get the word embeddings v_a, v_b and v_c (≈1-3 lines)</span></span><br><span class="line">    e_a, e_b, e_c = word_to_vec_map[word_a],word_to_vec_map[word_b],word_to_vec_map[word_c]</span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    words = word_to_vec_map.keys()</span><br><span class="line">    max_cosine_sim = <span class="number">-100</span>              <span class="comment"># Initialize max_cosine_sim to a large negative number</span></span><br><span class="line">    best_word = <span class="keyword">None</span>                  <span class="comment"># Initialize best_word with None, it will help keep track of the word to output</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># loop over the whole word vector set</span></span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> words:        </span><br><span class="line">        <span class="comment"># to avoid best_word being one of the input words, pass on them.</span></span><br><span class="line">        <span class="keyword">if</span> w <span class="keyword">in</span> [word_a, word_b, word_c] :</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">### START CODE HERE ###</span></span><br><span class="line">        <span class="comment"># Compute cosine similarity between the vector (e_b - e_a) and the vector ((w's vector representation) - e_c)  (≈1 line)</span></span><br><span class="line">        cosine_sim = cosine_similarity(e_b - e_a, word_to_vec_map[w] - e_c)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># If the cosine_sim is more than the max_cosine_sim seen so far,</span></span><br><span class="line">            <span class="comment"># then: set the new max_cosine_sim to the current cosine_sim and the best_word to the current word (≈3 lines)</span></span><br><span class="line">        <span class="keyword">if</span> cosine_sim &gt; max_cosine_sim:</span><br><span class="line">            max_cosine_sim = cosine_sim</span><br><span class="line">            best_word = w</span><br><span class="line">        <span class="comment">### END CODE HERE ###</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> best_word</span><br></pre></td></tr></table></figure>
<p>Run the cell below to test your code, this may take 1-2 minutes.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">triads_to_try = [(<span class="string">'italy'</span>, <span class="string">'italian'</span>, <span class="string">'spain'</span>), (<span class="string">'india'</span>, <span class="string">'delhi'</span>, <span class="string">'japan'</span>), (<span class="string">'man'</span>, <span class="string">'woman'</span>, <span class="string">'boy'</span>), (<span class="string">'small'</span>, <span class="string">'smaller'</span>, <span class="string">'large'</span>)]</span><br><span class="line"><span class="keyword">for</span> triad <span class="keyword">in</span> triads_to_try:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'&#123;&#125; -&gt; &#123;&#125; :: &#123;&#125; -&gt; &#123;&#125;'</span>.format( *triad, complete_analogy(*triad,word_to_vec_map)))</span><br></pre></td></tr></table></figure>
<pre><code>italy -&gt; italian :: spain -&gt; spanish
india -&gt; delhi :: japan -&gt; tokyo
man -&gt; woman :: boy -&gt; girl
small -&gt; smaller :: large -&gt; larger
</code></pre><p><strong>Expected Output</strong>:</p>
<table>
    <tr>
        <td>
            **italy -> italian** ::
        </td>
        <td>
         spain -> spanish
        </td>
    </tr>
        <tr>
        <td>
            **india -> delhi** ::
        </td>
        <td>
         japan -> tokyo
        </td>
    </tr>
        <tr>
        <td>
            **man -> woman ** ::
        </td>
        <td>
         boy -> girl
        </td>
    </tr>
        <tr>
        <td>
            **small -> smaller ** ::
        </td>
        <td>
         large -> larger
        </td>
    </tr>
</table>

<p>Once you get the correct expected output, please feel free to modify the input cells above to test your own analogies. Try to find some other analogy pairs that do work, but also find some where the algorithm doesn’t give the right answer: For example, you can try small-&gt;smaller as big-&gt;?.  </p>
<h3 id="Congratulations"><a href="#Congratulations" class="headerlink" title="Congratulations!"></a>Congratulations!</h3><p>You’ve come to the end of this assignment. Here are the main points you should remember:</p>
<ul>
<li>Cosine similarity a good way to compare similarity between pairs of word vectors. (Though L2 distance works too.) </li>
<li>For NLP applications, using a pre-trained set of word vectors from the internet is often a good way to get started. </li>
</ul>
<p>Even though you have finished the graded portions, we recommend you take a look too at the rest of this notebook. </p>
<p>Congratulations on finishing the graded portions of this notebook! </p>
<h2 id="3-Debiasing-word-vectors-OPTIONAL-UNGRADED"><a href="#3-Debiasing-word-vectors-OPTIONAL-UNGRADED" class="headerlink" title="3 - Debiasing word vectors (OPTIONAL/UNGRADED)"></a>3 - Debiasing word vectors (OPTIONAL/UNGRADED)</h2><p>In the following exercise, you will examine gender biases that can be reflected in a word embedding, and explore algorithms for reducing the bias. In addition to learning about the topic of debiasing, this exercise will also help hone your intuition about what word vectors are doing. This section involves a bit of linear algebra, though you can probably complete it even without being expert in linear algebra, and we encourage you to give it a shot. This portion of the notebook is optional and is not graded. </p>
<p>Lets first see how the GloVe word embeddings relate to gender. You will first compute a vector $g = e_{woman}-e_{man}$, where $e_{woman}$ represents the word vector corresponding to the word <em>woman</em>, and $e_{man}$ corresponds to the word vector corresponding to the word <em>man</em>. The resulting vector $g$ roughly encodes the concept of “gender”. (You might get a more accurate representation if you compute $g_1 = e_{mother}-e_{father}$, $g_2 = e_{girl}-e_{boy}$, etc. and average over them. But just using $e_{woman}-e_{man}$ will give good enough results for now.) </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">g = word_to_vec_map[<span class="string">'woman'</span>] - word_to_vec_map[<span class="string">'man'</span>]</span><br><span class="line">print(g)</span><br></pre></td></tr></table></figure>
<pre><code>[-0.087144    0.2182     -0.40986    -0.03922    -0.1032      0.94165
 -0.06042     0.32988     0.46144    -0.35962     0.31102    -0.86824
  0.96006     0.01073     0.24337     0.08193    -1.02722    -0.21122
  0.695044   -0.00222     0.29106     0.5053     -0.099454    0.40445
  0.30181     0.1355     -0.0606     -0.07131    -0.19245    -0.06115
 -0.3204      0.07165    -0.13337    -0.25068714 -0.14293    -0.224957
 -0.149       0.048882    0.12191    -0.27362    -0.165476   -0.20426
  0.54376    -0.271425   -0.10245    -0.32108     0.2516     -0.33455
 -0.04371     0.01258   ]
</code></pre><p>Now, you will consider the cosine similarity of different words with $g$. Consider what a positive value of similarity means vs a negative cosine similarity. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">print</span> (<span class="string">'List of names and their similarities with constructed vector:'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># girls and boys name</span></span><br><span class="line">name_list = [<span class="string">'john'</span>, <span class="string">'marie'</span>, <span class="string">'sophie'</span>, <span class="string">'ronaldo'</span>, <span class="string">'priya'</span>, <span class="string">'rahul'</span>, <span class="string">'danielle'</span>, <span class="string">'reza'</span>, <span class="string">'katy'</span>, <span class="string">'yasmin'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> name_list:</span><br><span class="line">    <span class="keyword">print</span> (w, cosine_similarity(word_to_vec_map[w], g))</span><br></pre></td></tr></table></figure>
<pre><code>List of names and their similarities with constructed vector:
john -0.23163356146
marie 0.315597935396
sophie 0.318687898594
ronaldo -0.312447968503
priya 0.17632041839
rahul -0.169154710392
danielle 0.243932992163
reza -0.079304296722
katy 0.283106865957
yasmin 0.233138577679
</code></pre><p>As you can see, female first names tend to have a positive cosine similarity with our constructed vector $g$, while male first names tend to have a negative cosine similarity. This is not suprising, and the result seems acceptable. </p>
<p>But let’s try with some other words.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'Other words and their similarities:'</span>)</span><br><span class="line">word_list = [<span class="string">'lipstick'</span>, <span class="string">'guns'</span>, <span class="string">'science'</span>, <span class="string">'arts'</span>, <span class="string">'literature'</span>, <span class="string">'warrior'</span>,<span class="string">'doctor'</span>, <span class="string">'tree'</span>, <span class="string">'receptionist'</span>, </span><br><span class="line">             <span class="string">'technology'</span>,  <span class="string">'fashion'</span>, <span class="string">'teacher'</span>, <span class="string">'engineer'</span>, <span class="string">'pilot'</span>, <span class="string">'computer'</span>, <span class="string">'singer'</span>]</span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> word_list:</span><br><span class="line">    <span class="keyword">print</span> (w, cosine_similarity(word_to_vec_map[w], g))</span><br></pre></td></tr></table></figure>
<pre><code>Other words and their similarities:
lipstick 0.276919162564
guns -0.18884855679
science -0.0608290654093
arts 0.00818931238588
literature 0.0647250443346
warrior -0.209201646411
doctor 0.118952894109
tree -0.0708939917548
receptionist 0.330779417506
technology -0.131937324476
fashion 0.0356389462577
teacher 0.179209234318
engineer -0.0803928049452
pilot 0.00107644989919
computer -0.103303588739
singer 0.185005181365
</code></pre><p>Do you notice anything surprising? It is astonishing how these results reflect certain unhealthy gender stereotypes. For example, “computer” is closer to “man” while “literature” is closer to “woman”. Ouch! </p>
<p>We’ll see below how to reduce the bias of these vectors, using an algorithm due to <a href="https://arxiv.org/abs/1607.06520" target="_blank" rel="noopener">Boliukbasi et al., 2016</a>. Note that some word pairs such as “actor”/“actress” or “grandmother”/“grandfather” should remain gender specific, while other words such as “receptionist” or “technology” should be neutralized, i.e. not be gender-related. You will have to treat these two type of words differently when debiasing.</p>
<h3 id="3-1-Neutralize-bias-for-non-gender-specific-words"><a href="#3-1-Neutralize-bias-for-non-gender-specific-words" class="headerlink" title="3.1 - Neutralize bias for non-gender specific words"></a>3.1 - Neutralize bias for non-gender specific words</h3><p>The figure below should help you visualize what neutralizing does. If you’re using a 50-dimensional word embedding, the 50 dimensional space can be split into two parts: The bias-direction $g$, and the remaining 49 dimensions, which we’ll call $g_{\perp}$. In linear algebra, we say that the 49 dimensional $g_{\perp}$ is perpendicular (or “othogonal”) to $g$, meaning it is at 90 degrees to $g$. The neutralization step takes a vector such as $e_{receptionist}$ and zeros out the component in the direction of $g$, giving us $e_{receptionist}^{debiased}$. </p>
<p>Even though $g_{\perp}$ is 49 dimensional, given the limitations of what we can draw on a screen, we illustrate it using a 1 dimensional axis below. </p>
<p><img src="images/neutral.png" style="width:800px;height:300px;"></p>
<caption><center> **Figure 2**: The word vector for "receptionist" represented before and after applying the neutralize operation. </center></caption>

<p><strong>Exercise</strong>: Implement <code>neutralize()</code> to remove the bias of words such as “receptionist” or “scientist”. Given an input embedding $e$, you can use the following formulas to compute $e^{debiased}$: </p>
<script type="math/tex; mode=display">e^{bias\_component} = \frac{e \cdot g}{||g||_2^2} * g\tag{2}</script><script type="math/tex; mode=display">e^{debiased} = e - e^{bias\_component}\tag{3}</script><p>If you are an expert in linear algebra, you may recognize $e^{bias_component}$ as the projection of $e$ onto the direction $g$. If you’re not an expert in linear algebra, don’t worry about this.</p>
<!-- 
**Reminder**: a vector $u$ can be split into two parts: its projection over a vector-axis $v_B$ and its projection over the axis orthogonal to $v$:
$$u = u_B + u_{\perp}$$
where : $u_B = $ and $ u_{\perp} = u - u_B $
!--> 
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">neutralize</span><span class="params">(word, g, word_to_vec_map)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Removes the bias of "word" by projecting it on the space orthogonal to the bias axis. </span></span><br><span class="line"><span class="string">    This function ensures that gender neutral words are zero in the gender subspace.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        word -- string indicating the word to debias</span></span><br><span class="line"><span class="string">        g -- numpy-array of shape (50,), corresponding to the bias axis (such as gender)</span></span><br><span class="line"><span class="string">        word_to_vec_map -- dictionary mapping words to their corresponding vectors.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        e_debiased -- neutralized word vector representation of the input "word"</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    <span class="comment"># Select word vector representation of "word". Use word_to_vec_map. (≈ 1 line)</span></span><br><span class="line">    e = word_to_vec_map[word]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Compute e_biascomponent using the formula give above. (≈ 1 line)</span></span><br><span class="line">    e_biascomponent = np.dot(e, g) / np.linalg.norm(g) * g</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Neutralize e by substracting e_biascomponent from it </span></span><br><span class="line">    <span class="comment"># e_debiased should be equal to its orthogonal projection. (≈ 1 line)</span></span><br><span class="line">    e_debiased = e - e_biascomponent</span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> e_debiased</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e = <span class="string">"receptionist"</span></span><br><span class="line">print(<span class="string">"cosine similarity between "</span> + e + <span class="string">" and g, before neutralizing: "</span>, cosine_similarity(word_to_vec_map[<span class="string">"receptionist"</span>], g))</span><br><span class="line"></span><br><span class="line">e_debiased = neutralize(<span class="string">"receptionist"</span>, g, word_to_vec_map)</span><br><span class="line">print(<span class="string">"cosine similarity between "</span> + e + <span class="string">" and g, after neutralizing: "</span>, cosine_similarity(e_debiased, g))</span><br></pre></td></tr></table></figure>
<pre><code>cosine similarity between receptionist and g, before neutralizing:  0.330779417506
cosine similarity between receptionist and g, after neutralizing:  -0.48975521526
</code></pre><p><strong>Expected Output</strong>: The second result is essentially 0, up to numerical roundof (on the order of $10^{-17}$).</p>
<table>
    <tr>
        <td>
            **cosine similarity between receptionist and g, before neutralizing:** :
        </td>
        <td>
         0.330779417506
        </td>
    </tr>
        <tr>
        <td>
            **cosine similarity between receptionist and g, after neutralizing:** :
        </td>
        <td>
         -3.26732746085e-17
    </td></tr>
</table>

<h3 id="3-2-Equalization-algorithm-for-gender-specific-words"><a href="#3-2-Equalization-algorithm-for-gender-specific-words" class="headerlink" title="3.2 - Equalization algorithm for gender-specific words"></a>3.2 - Equalization algorithm for gender-specific words</h3><p>Next, lets see how debiasing can also be applied to word pairs such as “actress” and “actor.” Equalization is applied to pairs of words that you might want to have differ only through the gender property. As a concrete example, suppose that “actress” is closer to “babysit” than “actor.” By applying neutralizing to “babysit” we can reduce the gender-stereotype associated with babysitting. But this still does not guarantee that “actor” and “actress” are equidistant from “babysit.” The equalization algorithm takes care of this. </p>
<p>The key idea behind equalization is to make sure that a particular pair of words are equi-distant from the 49-dimensional $g_\perp$. The equalization step also ensures that the two equalized steps are now the same distance from $e_{receptionist}^{debiased}$, or from any other work that has been neutralized. In pictures, this is how equalization works: </p>
<p><img src="images/equalize10.png" style="width:800px;height:400px;"></p>
<p>The derivation of the linear algebra to do this is a bit more complex. (See Bolukbasi et al., 2016 for details.) But the key equations are: </p>
<script type="math/tex; mode=display">\mu = \frac{e_{w1} + e_{w2}}{2}\tag{4}</script><script type="math/tex; mode=display">\mu_{B} = \frac {\mu \cdot \text{bias_axis}}{||\text{bias_axis}||_2^2} *\text{bias_axis}
\tag{5}</script><script type="math/tex; mode=display">\mu_{\perp} = \mu - \mu_{B} \tag{6}</script><script type="math/tex; mode=display">e_{w1B} = \frac {e_{w1} \cdot \text{bias_axis}}{||\text{bias_axis}||_2^2} *\text{bias_axis}
\tag{7}</script><script type="math/tex; mode=display">e_{w2B} = \frac {e_{w2} \cdot \text{bias_axis}}{||\text{bias_axis}||_2^2} *\text{bias_axis}
\tag{8}</script><script type="math/tex; mode=display">e_{w1B}^{corrected} = \sqrt{ |{1 - ||\mu_{\perp} ||^2_2} |} * \frac{e_{\text{w1B}} - \mu_B} {|(e_{w1} - \mu_{\perp}) - \mu_B)|} \tag{9}</script><script type="math/tex; mode=display">e_{w2B}^{corrected} = \sqrt{ |{1 - ||\mu_{\perp} ||^2_2} |} * \frac{e_{\text{w2B}} - \mu_B} {|(e_{w2} - \mu_{\perp}) - \mu_B)|} \tag{10}</script><script type="math/tex; mode=display">e_1 = e_{w1B}^{corrected} + \mu_{\perp} \tag{11}</script><script type="math/tex; mode=display">e_2 = e_{w2B}^{corrected} + \mu_{\perp} \tag{12}</script><p><strong>Exercise</strong>: Implement the function below. Use the equations above to get the final equalized version of the pair of words. Good luck!</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">equalize</span><span class="params">(pair, bias_axis, word_to_vec_map)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Debias gender specific words by following the equalize method described in the figure above.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    pair -- pair of strings of gender specific words to debias, e.g. ("actress", "actor") </span></span><br><span class="line"><span class="string">    bias_axis -- numpy-array of shape (50,), vector corresponding to the bias axis, e.g. gender</span></span><br><span class="line"><span class="string">    word_to_vec_map -- dictionary mapping words to their corresponding vectors</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns</span></span><br><span class="line"><span class="string">    e_1 -- word vector corresponding to the first word</span></span><br><span class="line"><span class="string">    e_2 -- word vector corresponding to the second word</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    <span class="comment"># Step 1: Select word vector representation of "word". Use word_to_vec_map. (≈ 2 lines)</span></span><br><span class="line">    w1, w2 = <span class="keyword">None</span></span><br><span class="line">    e_w1, e_w2 = <span class="keyword">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Step 2: Compute the mean of e_w1 and e_w2 (≈ 1 line)</span></span><br><span class="line">    mu = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Step 3: Compute the projections of mu over the bias axis and the orthogonal axis (≈ 2 lines)</span></span><br><span class="line">    mu_B = <span class="keyword">None</span></span><br><span class="line">    mu_orth = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Step 4: Use equations (7) and (8) to compute e_w1B and e_w2B (≈2 lines)</span></span><br><span class="line">    e_w1B = <span class="keyword">None</span></span><br><span class="line">    e_w2B = <span class="keyword">None</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment"># Step 5: Adjust the Bias part of e_w1B and e_w2B using the formulas (9) and (10) given above (≈2 lines)</span></span><br><span class="line">    corrected_e_w1B = <span class="keyword">None</span></span><br><span class="line">    corrected_e_w2B = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Step 6: Debias by equalizing e1 and e2 to the sum of their corrected projections (≈2 lines)</span></span><br><span class="line">    e1 = <span class="keyword">None</span></span><br><span class="line">    e2 = <span class="keyword">None</span></span><br><span class="line">                                                                </span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> e1, e2</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"cosine similarities before equalizing:"</span>)</span><br><span class="line">print(<span class="string">"cosine_similarity(word_to_vec_map[\"man\"], gender) = "</span>, cosine_similarity(word_to_vec_map[<span class="string">"man"</span>], g))</span><br><span class="line">print(<span class="string">"cosine_similarity(word_to_vec_map[\"woman\"], gender) = "</span>, cosine_similarity(word_to_vec_map[<span class="string">"woman"</span>], g))</span><br><span class="line">print()</span><br><span class="line">e1, e2 = equalize((<span class="string">"man"</span>, <span class="string">"woman"</span>), g, word_to_vec_map)</span><br><span class="line">print(<span class="string">"cosine similarities after equalizing:"</span>)</span><br><span class="line">print(<span class="string">"cosine_similarity(e1, gender) = "</span>, cosine_similarity(e1, g))</span><br><span class="line">print(<span class="string">"cosine_similarity(e2, gender) = "</span>, cosine_similarity(e2, g))</span><br></pre></td></tr></table></figure>
<p><strong>Expected Output</strong>:</p>
<p>cosine similarities before equalizing:</p>
<table>
    <tr>
        <td>
            **cosine_similarity(word_to_vec_map["man"], gender)** =
        </td>
        <td>
         -0.117110957653
        </td>
    </tr>
        <tr>
        <td>
            **cosine_similarity(word_to_vec_map["woman"], gender)** =
        </td>
        <td>
         0.356666188463
        </td>
    </tr>
</table>

<p>cosine similarities after equalizing:</p>
<table>
    <tr>
        <td>
            **cosine_similarity(u1, gender)** =
        </td>
        <td>
         -0.700436428931
        </td>
    </tr>
        <tr>
        <td>
            **cosine_similarity(u2, gender)** =
        </td>
        <td>
         0.700436428931
        </td>
    </tr>
</table>

<p>Please feel free to play with the input words in the cell above, to apply equalization to other pairs of words. </p>
<p>These debiasing algorithms are very helpful for reducing bias, but are not perfect and do not eliminate all traces of bias. For example, one weakness of this implementation was that the bias direction $g$ was defined using only the pair of words _woman_ and _man_. As discussed earlier, if $g$ were defined by computing $g_1 = e_{woman} - e_{man}$; $g_2 = e_{mother} - e_{father}$; $g_3 = e_{girl} - e_{boy}$; and so on and averaging over them, you would obtain a better estimate of the “gender” dimension in the 50 dimensional word embedding space. Feel free to play with such variants as well.  </p>
<h3 id="Congratulations-1"><a href="#Congratulations-1" class="headerlink" title="Congratulations"></a>Congratulations</h3><p>You have come to the end of this notebook, and have seen a lot of the ways that word vectors can be used as well as  modified. </p>
<p>Congratulations on finishing this notebook! </p>
<p><strong>References</strong>:</p>
<ul>
<li>The debiasing algorithm is from Bolukbasi et al., 2016, <a href="https://papers.nips.cc/paper/6228-man-is-to-computer-programmer-as-woman-is-to-homemaker-debiasing-word-embeddings.pdf" target="_blank" rel="noopener">Man is to Computer Programmer as Woman is to<br>Homemaker? Debiasing Word Embeddings</a></li>
<li>The GloVe word embeddings were due to Jeffrey Pennington, Richard Socher, and Christopher D. Manning. (<a href="https://nlp.stanford.edu/projects/glove/" target="_blank" rel="noopener">https://nlp.stanford.edu/projects/glove/</a>)</li>
</ul>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Project</tag>
        <tag>NLP</tag>
        <tag>Sequence Models</tag>
      </tags>
  </entry>
  <entry>
    <title>Improvise a Jazz Solo with an LSTM Network</title>
    <url>/Improvise-a-Jazz-Solo-with-an-LSTM-Network/2019/03/28/</url>
    <content><![CDATA[<h1 id="Improvise-a-Jazz-Solo-with-an-LSTM-Network"><a href="#Improvise-a-Jazz-Solo-with-an-LSTM-Network" class="headerlink" title="Improvise a Jazz Solo with an LSTM Network"></a>Improvise a Jazz Solo with an LSTM Network</h1><p>Welcome to your final programming assignment of this week! In this notebook, you will implement a model that uses an LSTM to generate music. You will even be able to listen to your own music at the end of the assignment. </p>
<p><strong>You will learn to:</strong></p>
<ul>
<li>Apply an LSTM to music generation.</li>
<li>Generate your own jazz music with deep learning.</li>
</ul>
<p>Please run the following cell to load all the packages required in this assignment. This may take a few minutes. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> IPython</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> music21 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> grammar <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> qa <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> preprocess <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> music_utils <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> data_utils <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> load_model, Model</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense, Activation, Dropout, Input, LSTM, Reshape, Lambda, RepeatVector</span><br><span class="line"><span class="keyword">from</span> keras.initializers <span class="keyword">import</span> glorot_uniform</span><br><span class="line"><span class="keyword">from</span> keras.utils <span class="keyword">import</span> to_categorical</span><br><span class="line"><span class="keyword">from</span> keras.optimizers <span class="keyword">import</span> Adam</span><br><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> backend <span class="keyword">as</span> K</span><br></pre></td></tr></table></figure>
<h2 id="1-Problem-statement"><a href="#1-Problem-statement" class="headerlink" title="1 - Problem statement"></a>1 - Problem statement</h2><p>You would like to create a jazz music piece specially for a friend’s birthday. However, you don’t know any instruments or music composition. Fortunately, you know deep learning and will solve this problem using an LSTM netwok.  </p>
<p>You will train a network to generate novel jazz solos in a style representative of a body of performed work.</p>
<p><img src="images/jazz.jpg" style="width:450;height:300px;"></p>
<h3 id="1-1-Dataset"><a href="#1-1-Dataset" class="headerlink" title="1.1 - Dataset"></a>1.1 - Dataset</h3><p>You will train your algorithm on a corpus of Jazz music. Run the cell below to listen to a snippet of the audio from the training set:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">IPython.display.Audio(<span class="string">'./data/30s_seq.mp3'</span>)</span><br></pre></td></tr></table></figure>
<p>We have taken care of the preprocessing of the musical data to render it in terms of musical “values.” You can informally think of each “value” as a note, which comprises a pitch and a duration. For example, if you press down a specific piano key for 0.5 seconds, then you have just played a note. In music theory, a “value” is actually more complicated than this—specifically, it also captures the information needed to play multiple notes at the same time. For example, when playing a music piece, you might press down two piano keys at the same time (playng multiple notes at the same time generates what’s called a “chord”). But we don’t need to worry about the details of music theory for this assignment. For the purpose of this assignment, all you need to know is that we will obtain a dataset of values, and will learn an RNN model to generate sequences of values. </p>
<p>Our music generation system will use 78 unique values. Run the following code to load the raw music data and preprocess it into values. This might take a few minutes.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X, Y, n_values, indices_values = load_music_utils()</span><br><span class="line">print(<span class="string">'shape of X:'</span>, X.shape)</span><br><span class="line">print(<span class="string">'number of training examples:'</span>, X.shape[<span class="number">0</span>])</span><br><span class="line">print(<span class="string">'Tx (length of sequence):'</span>, X.shape[<span class="number">1</span>])</span><br><span class="line">print(<span class="string">'total # of unique values:'</span>, n_values)</span><br><span class="line">print(<span class="string">'Shape of Y:'</span>, Y.shape)</span><br></pre></td></tr></table></figure>
<pre><code>shape of X: (60, 30, 78)
number of training examples: 60
Tx (length of sequence): 30
total # of unique values: 78
Shape of Y: (30, 60, 78)
</code></pre><p>You have just loaded the following:</p>
<ul>
<li><p><code>X</code>: This is an (m, $T_x$, 78) dimensional array. We have m training examples, each of which is a snippet of $T_x =30$ musical values. At each time step, the input is one of 78 different possible values, represented as a one-hot vector. Thus for example, X[i,t,:] is a one-hot vector representating the value of the i-th example at time t. </p>
</li>
<li><p><code>Y</code>: This is essentially the same as <code>X</code>, but shifted one step to the left (to the past). Similar to the dinosaurus assignment, we’re interested in the network using the previous values to predict the next value, so our sequence model will try to predict $y^{\langle t \rangle}$ given $x^{\langle 1\rangle}, \ldots, x^{\langle t \rangle}$. However, the data in <code>Y</code> is reordered to be dimension $(T_y, m, 78)$, where $T_y = T_x$. This format makes it more convenient to feed to the LSTM later. </p>
</li>
<li><p><code>n_values</code>: The number of unique values in this dataset. This should be 78. </p>
</li>
<li><p><code>indices_values</code>: python dictionary mapping from 0-77 to musical values.</p>
</li>
</ul>
<h3 id="1-2-Overview-of-our-model"><a href="#1-2-Overview-of-our-model" class="headerlink" title="1.2 - Overview of our model"></a>1.2 - Overview of our model</h3><p>Here is the architecture of the model we will use. This is similar to the Dinosaurus model you had used in the previous notebook, except that in you will be implementing it in Keras. The architecture is as follows: </p>
<p><img src="images/music_generation.png" style="width:600;height:400px;"></p>
<!--
<img src="images/djmodel.png" style="width:600;height:400px;">
<br>
<caption><center> **Figure 1**: LSTM model. $X = (x^{\langle 1 \rangle}, x^{\langle 2 \rangle}, ..., x^{\langle T_x \rangle})$ is a window of size $T_x$ scanned over the musical corpus. Each $x^{\langle t \rangle}$ is an index corresponding to a value (ex: "A,0.250,< m2,P-4 >") while $\hat{y}$ is the prediction for the next value  </center></caption>
!--> 
<p>We will be training the model on random snippets of 30 values taken from a much longer piece of music. Thus, we won’t bother to set the first input $x^{\langle 1 \rangle} = \vec{0}$, which we had done previously to denote the start of a dinosaur name, since now most of these snippets of audio start somewhere in the middle of a piece of music. We are setting each of the snippts to have the same length $T_x = 30$ to make vectorization easier. </p>
<h2 id="2-Building-the-model"><a href="#2-Building-the-model" class="headerlink" title="2 - Building the model"></a>2 - Building the model</h2><p>In this part you will build and train a model that will learn musical patterns. To do so, you will need to build a model that takes in X of shape $(m, T_x, 78)$ and Y of shape $(T_y, m, 78)$. We will use an LSTM with 64 dimensional hidden states. Lets set <code>n_a = 64</code>. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n_a = <span class="number">64</span></span><br></pre></td></tr></table></figure>
<p>Here’s how you can create a Keras model with multiple inputs and outputs. If you’re building an RNN where even at test time entire input sequence $x^{\langle 1 \rangle}, x^{\langle 2 \rangle}, \ldots, x^{\langle T_x \rangle}$ were <em>given in advance</em>, for example if the inputs were words and the output was a label, then Keras has simple built-in functions to build the model. However, for sequence generation, at test time we don’t know all the values of $x^{\langle t\rangle}$ in advance; instead we generate them one at a time using $x^{\langle t\rangle} = y^{\langle t-1 \rangle}$. So the code will be a bit more complicated, and you’ll need to implement your own for-loop to iterate over the different time steps. </p>
<p>The function <code>djmodel()</code> will call the LSTM layer $T_x$ times using a for-loop, and it is important that all $T_x$ copies have the same weights. I.e., it should not re-initiaiize the weights every time—-the $T_x$ steps should have shared weights. The key steps for implementing layers with shareable weights in Keras are: </p>
<ol>
<li>Define the layer objects (we will use global variables for this).</li>
<li>Call these objects when propagating the input.</li>
</ol>
<p>We have defined the layers objects you need as global variables. Please run the next cell to create them. Please check the Keras documentation to make sure you understand what these layers are: <a href="https://keras.io/layers/core/#reshape" target="_blank" rel="noopener">Reshape()</a>, <a href="https://keras.io/layers/recurrent/#lstm" target="_blank" rel="noopener">LSTM()</a>, <a href="https://keras.io/layers/core/#dense" target="_blank" rel="noopener">Dense()</a>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">reshapor = Reshape((<span class="number">1</span>, <span class="number">78</span>))                        <span class="comment"># Used in Step 2.B of djmodel(), below</span></span><br><span class="line">LSTM_cell = LSTM(n_a, return_state = <span class="keyword">True</span>)         <span class="comment"># Used in Step 2.C</span></span><br><span class="line">densor = Dense(n_values, activation=<span class="string">'softmax'</span>)     <span class="comment"># Used in Step 2.D</span></span><br></pre></td></tr></table></figure>
<p>Each of <code>reshapor</code>, <code>LSTM_cell</code> and <code>densor</code> are now layer objects, and you can use them to implement <code>djmodel()</code>. In order to propagate a Keras tensor object X through one of these layers, use <code>layer_object(X)</code> (or <code>layer_object([X,Y])</code> if it requires multiple inputs.). For example, <code>reshapor(X)</code> will propagate X through the <code>Reshape((1,78))</code> layer defined above.</p>
<p><strong>Exercise</strong>: Implement <code>djmodel()</code>. You will need to carry out 2 steps:</p>
<ol>
<li>Create an empty list “outputs” to save the outputs of the LSTM Cell at every time step.</li>
<li><p>Loop for $t \in 1, \ldots, T_x$:</p>
<p> A. Select the “t”th time-step vector from X. The shape of this selection should be (78,). To do so, create a custom <a href="https://keras.io/layers/core/#lambda" target="_blank" rel="noopener">Lambda</a> layer in Keras by using this line of code:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">           x = Lambda(lambda x: X[:,t,:])(X)</span><br><span class="line">``` </span><br><span class="line">Look over the Keras documentation to figure out what this does. It is creating a &quot;temporary&quot; or &quot;unnamed&quot; function (that&apos;s what Lambda functions are) that extracts out the appropriate one-hot vector, and making this function a Keras `Layer` object to apply to `X`. </span><br><span class="line"></span><br><span class="line">    B. Reshape x to be (1,78). You may find the `reshapor()` layer (defined below) helpful.</span><br><span class="line"></span><br><span class="line">    C. Run x through one step of LSTM_cell. Remember to initialize the LSTM_cell with the previous step&apos;s hidden state $a$ and cell state $c$. Use the following formatting:</span><br><span class="line">```python</span><br><span class="line">a, _, c = LSTM_cell(input_x, initial_state=[previous hidden state, previous cell state])</span><br></pre></td></tr></table></figure>
<p> D. Propagate the LSTM’s output activation value through a dense+softmax layer using <code>densor</code>. </p>
<p> E. Append the predicted value to the list of “outputs”</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: djmodel</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">djmodel</span><span class="params">(Tx, n_a, n_values)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Implement the model</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    Tx -- length of the sequence in a corpus</span></span><br><span class="line"><span class="string">    n_a -- the number of activations used in our model</span></span><br><span class="line"><span class="string">    n_values -- number of unique values in the music data </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    model -- a keras model with the </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Define the input of your model with a shape </span></span><br><span class="line">    X = Input(shape=(Tx, n_values))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Define s0, initial hidden state for the decoder LSTM</span></span><br><span class="line">    a0 = Input(shape=(n_a,), name=<span class="string">'a0'</span>)</span><br><span class="line">    c0 = Input(shape=(n_a,), name=<span class="string">'c0'</span>)</span><br><span class="line">    a = a0</span><br><span class="line">    c = c0</span><br><span class="line">    </span><br><span class="line">    <span class="comment">### START CODE HERE ### </span></span><br><span class="line">    <span class="comment"># Step 1: Create empty list to append the outputs while you iterate (≈1 line)</span></span><br><span class="line">    outputs = []</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Step 2: Loop</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> range(Tx):</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Step 2.A: select the "t"th time step vector from X. </span></span><br><span class="line">        x = Lambda(<span class="keyword">lambda</span> x: X[:,t,:])(X)</span><br><span class="line">        <span class="comment"># Step 2.B: Use reshapor to reshape x to be (1, n_values) (≈1 line)</span></span><br><span class="line">        x = reshapor(x)</span><br><span class="line">        <span class="comment"># Step 2.C: Perform one step of the LSTM_cell</span></span><br><span class="line">        a, _, c = LSTM_cell(x, initial_state=[a, c])</span><br><span class="line">        <span class="comment"># Step 2.D: Apply densor to the hidden state output of LSTM_Cell</span></span><br><span class="line">        out = densor(a)</span><br><span class="line">        <span class="comment"># Step 2.E: add the output to "outputs"</span></span><br><span class="line">        outputs.append(out)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># Step 3: Create model instance</span></span><br><span class="line">    model = Model(inputs=[X, a0, c0], outputs=outputs)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> model</span><br></pre></td></tr></table></figure>
<p>Run the following cell to define your model. We will use <code>Tx=30</code>, <code>n_a=64</code> (the dimension of the LSTM activations), and <code>n_values=78</code>. This cell may take a few seconds to run. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model = djmodel(Tx = <span class="number">30</span> , n_a = <span class="number">64</span>, n_values = <span class="number">78</span>)</span><br></pre></td></tr></table></figure>
<p>You now need to compile your model to be trained. We will Adam and a categorical cross-entropy loss.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">opt = Adam(lr=<span class="number">0.01</span>, beta_1=<span class="number">0.9</span>, beta_2=<span class="number">0.999</span>, decay=<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line">model.compile(optimizer=opt, loss=<span class="string">'categorical_crossentropy'</span>, metrics=[<span class="string">'accuracy'</span>])</span><br></pre></td></tr></table></figure>
<p>Finally, lets initialize <code>a0</code> and <code>c0</code> for the LSTM’s initial state to be zero. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = <span class="number">60</span></span><br><span class="line">a0 = np.zeros((m, n_a))</span><br><span class="line">c0 = np.zeros((m, n_a))</span><br></pre></td></tr></table></figure>
<p>Lets now fit the model! We will turn <code>Y</code> to a list before doing so, since the cost function expects <code>Y</code> to be provided in this format (one list item per time-step). So <code>list(Y)</code> is a list with 30 items, where each of the list items is of shape (60,78). Lets train for 100 epochs. This will take a few minutes. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model.fit([X, a0, c0], list(Y), epochs=<span class="number">100</span>)</span><br></pre></td></tr></table></figure>
<p>You should see the model loss going down. Now that you have trained a model, lets go on the the final section to implement an inference algorithm, and generate some music! </p>
<h2 id="3-Generating-music"><a href="#3-Generating-music" class="headerlink" title="3 - Generating music"></a>3 - Generating music</h2><p>You now have a trained model which has learned the patterns of the jazz soloist. Lets now use this model to synthesize new music. </p>
<h4 id="3-1-Predicting-amp-Sampling"><a href="#3-1-Predicting-amp-Sampling" class="headerlink" title="3.1 - Predicting &amp; Sampling"></a>3.1 - Predicting &amp; Sampling</h4><p><img src="images/music_gen.png" style="width:600;height:400px;"></p>
<p>At each step of sampling, you will take as input the activation <code>a</code> and cell state <code>c</code> from the previous state of the LSTM, forward propagate by one step, and get a new output activation as well as cell state. The new activation <code>a</code> can then be used to generate the output, using <code>densor</code> as before. </p>
<p>To start off the model, we will initialize <code>x0</code> as well as the LSTM activation and and cell value <code>a0</code> and <code>c0</code> to be zeros. </p>
<!-- 
You are about to build a function that will do this inference for you. Your function takes in your previous model and the number of time steps `Ty` that you want to sample. It will return a keras model that would be able to generate sequences for you. Furthermore, the function takes in a dense layer of `78` units and the number of activations. 
!--> 
<p><strong>Exercise:</strong> Implement the function below to sample a sequence of musical values. Here are some of the key steps you’ll need to implement inside the for-loop that generates the $T_y$ output characters: </p>
<p>Step 2.A: Use <code>LSTM_Cell</code>, which inputs the previous step’s <code>c</code> and <code>a</code> to generate the current step’s <code>c</code> and <code>a</code>. </p>
<p>Step 2.B: Use <code>densor</code> (defined previously) to compute a softmax on <code>a</code> to get the output for the current step. </p>
<p>Step 2.C: Save the output you have just generated by appending it to <code>outputs</code>.</p>
<p>Step 2.D: Sample x to the be “out”‘s one-hot version (the prediction) so that you can pass it to the next LSTM’s step.  We have already provided this line of code, which uses a <a href="https://keras.io/layers/core/#lambda" target="_blank" rel="noopener">Lambda</a> function.<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = Lambda(one_hot)(out)</span><br></pre></td></tr></table></figure></p>
<p>[Minor technical note: Rather than sampling a value at random according to the probabilities in <code>out</code>, this line of code actually chooses the single most likely note at each step using an argmax.]</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: music_inference_model</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">music_inference_model</span><span class="params">(LSTM_cell, densor, n_values = <span class="number">78</span>, n_a = <span class="number">64</span>, Ty = <span class="number">100</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Uses the trained "LSTM_cell" and "densor" from model() to generate a sequence of values.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    LSTM_cell -- the trained "LSTM_cell" from model(), Keras layer object</span></span><br><span class="line"><span class="string">    densor -- the trained "densor" from model(), Keras layer object</span></span><br><span class="line"><span class="string">    n_values -- integer, umber of unique values</span></span><br><span class="line"><span class="string">    n_a -- number of units in the LSTM_cell</span></span><br><span class="line"><span class="string">    Ty -- integer, number of time steps to generate</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    inference_model -- Keras model instance</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Define the input of your model with a shape </span></span><br><span class="line">    x0 = Input(shape=(<span class="number">1</span>, n_values))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Define s0, initial hidden state for the decoder LSTM</span></span><br><span class="line">    a0 = Input(shape=(n_a,), name=<span class="string">'a0'</span>)</span><br><span class="line">    c0 = Input(shape=(n_a,), name=<span class="string">'c0'</span>)</span><br><span class="line">    a = a0</span><br><span class="line">    c = c0</span><br><span class="line">    x = x0</span><br><span class="line"></span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    <span class="comment"># Step 1: Create an empty list of "outputs" to later store your predicted values (≈1 line)</span></span><br><span class="line">    outputs = []</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Step 2: Loop over Ty and generate a value at every time step</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> range(Ty):</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Step 2.A: Perform one step of LSTM_cell (≈1 line)</span></span><br><span class="line">        a, _, c = LSTM_cell(x, initial_state=[a, c])</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Step 2.B: Apply Dense layer to the hidden state output of the LSTM_cell (≈1 line)</span></span><br><span class="line">        out = densor(a)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Step 2.C: Append the prediction "out" to "outputs". out.shape = (None, 78) (≈1 line)</span></span><br><span class="line">        outputs.append(out)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Step 2.D: Select the next value according to "out", and set "x" to be the one-hot representation of the</span></span><br><span class="line">        <span class="comment">#           selected value, which will be passed as the input to LSTM_cell on the next step. We have provided </span></span><br><span class="line">        <span class="comment">#           the line of code you need to do this. </span></span><br><span class="line">        x = Lambda(one_hot)(out)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># Step 3: Create model instance with the correct "inputs" and "outputs" (≈1 line)</span></span><br><span class="line">    inference_model = Model([x0, a0, c0], outputs)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> inference_model</span><br></pre></td></tr></table></figure>
<p>Run the cell below to define your inference model. This model is hard coded to generate 50 values.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">inference_model = music_inference_model(LSTM_cell, densor, n_values = <span class="number">78</span>, n_a = <span class="number">64</span>, Ty = <span class="number">50</span>)</span><br></pre></td></tr></table></figure>
<p>Finally, this creates the zero-valued vectors you will use to initialize <code>x</code> and the LSTM state variables <code>a</code> and <code>c</code>. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x_initializer = np.zeros((<span class="number">1</span>, <span class="number">1</span>, <span class="number">78</span>))</span><br><span class="line">a_initializer = np.zeros((<span class="number">1</span>, n_a))</span><br><span class="line">c_initializer = np.zeros((<span class="number">1</span>, n_a))</span><br></pre></td></tr></table></figure>
<p><strong>Exercise</strong>: Implement <code>predict_and_sample()</code>. This function takes many arguments including the inputs [x_initializer, a_initializer, c_initializer]. In order to predict the output corresponding to this input, you will need to carry-out 3 steps:</p>
<ol>
<li>Use your inference model to predict an output given your set of inputs. The output <code>pred</code> should be a list of length $T_y$ where each element is a numpy-array of shape (1, n_values).</li>
<li>Convert <code>pred</code> into a numpy array of $T_y$ indices. Each index corresponds is computed by taking the <code>argmax</code> of an element of the <code>pred</code> list. <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.argmax.html" target="_blank" rel="noopener">Hint</a>.</li>
<li>Convert the indices into their one-hot vector representations. <a href="https://keras.io/utils/#to_categorical" target="_blank" rel="noopener">Hint</a>.</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: predict_and_sample</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict_and_sample</span><span class="params">(inference_model, x_initializer = x_initializer, a_initializer = a_initializer, </span></span></span><br><span class="line"><span class="function"><span class="params">                       c_initializer = c_initializer)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Predicts the next value of values using the inference model.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    inference_model -- Keras model instance for inference time</span></span><br><span class="line"><span class="string">    x_initializer -- numpy array of shape (1, 1, 78), one-hot vector initializing the values generation</span></span><br><span class="line"><span class="string">    a_initializer -- numpy array of shape (1, n_a), initializing the hidden state of the LSTM_cell</span></span><br><span class="line"><span class="string">    c_initializer -- numpy array of shape (1, n_a), initializing the cell state of the LSTM_cel</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    results -- numpy-array of shape (Ty, 78), matrix of one-hot vectors representing the values generated</span></span><br><span class="line"><span class="string">    indices -- numpy-array of shape (Ty, 1), matrix of indices representing the values generated</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    <span class="comment"># Step 1: Use your inference model to predict an output sequence given x_initializer, a_initializer and c_initializer.</span></span><br><span class="line">    pred = inference_model.predict([x_initializer, a_initializer, c_initializer])</span><br><span class="line">    <span class="comment"># Step 2: Convert "pred" into an np.array() of indices with the maximum probabilities</span></span><br><span class="line">    <span class="comment">#indices = np.array([np.argmax(item) for item in pred])</span></span><br><span class="line">    indices = np.argmax(pred, <span class="number">2</span>)</span><br><span class="line">    <span class="comment"># Step 3: Convert indices to one-hot vectors, the shape of the results should be (1, )</span></span><br><span class="line">    results = to_categorical(indices,num_classes=<span class="keyword">None</span>)</span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> results, indices</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results, indices = predict_and_sample(inference_model, x_initializer, a_initializer, c_initializer)</span><br><span class="line">print(<span class="string">"np.argmax(results[12]) ="</span>, np.argmax(results[<span class="number">12</span>]))</span><br><span class="line">print(<span class="string">"np.argmax(results[17]) ="</span>, np.argmax(results[<span class="number">17</span>]))</span><br><span class="line">print(<span class="string">"list(indices[12:18]) ="</span>, list(indices[<span class="number">12</span>:<span class="number">18</span>]))</span><br></pre></td></tr></table></figure>
<pre><code>np.argmax(results[12]) = 40
np.argmax(results[17]) = 1
list(indices[12:18]) = [array([40]), array([1]), array([4]), array([5]), array([40]), array([1])]
</code></pre><p><strong>Expected Output</strong>: Your results may differ because Keras’ results are not completely predictable. However, if you have trained your LSTM_cell with model.fit() for exactly 100 epochs as described above, you should very likely observe a sequence of indices that are not all identical. Moreover, you should observe that: np.argmax(results[12]) is the first element of list(indices[12:18]) and np.argmax(results[17]) is the last element of list(indices[12:18]). </p>
<table>
    <tr>
        <td>
            **np.argmax(results[12])** =
        </td>
        <td>
        1
        </td>
    </tr>
    <tr>
        <td>
            **np.argmax(results[12])** =
        </td>
        <td>
        42
        </td>
    </tr>
    <tr>
        <td>
            **list(indices[12:18])** =
        </td>
        <td>
            [array([1]), array([42]), array([54]), array([17]), array([1]), array([42])]
        </td>
    </tr>
</table>

<h4 id="3-3-Generate-music"><a href="#3-3-Generate-music" class="headerlink" title="3.3 - Generate music"></a>3.3 - Generate music</h4><p>Finally, you are ready to generate music. Your RNN generates a sequence of values. The following code generates music by first calling your <code>predict_and_sample()</code> function. These values are then post-processed into musical chords (meaning that multiple values or notes can be played at the same time). </p>
<p>Most computational music algorithms use some post-processing because it is difficult to generate music that sounds good without such post-processing. The post-processing does things such as clean up the generated audio by making sure the same sound is not repeated too many times, that two successive notes are not too far from each other in pitch, and so on. One could argue that a lot of these post-processing steps are hacks; also, a lot the music generation literature has also focused on hand-crafting post-processors, and a lot of the output quality depends on the quality of the post-processing and not just the quality of the RNN. But this post-processing does make a huge difference, so lets use it in our implementation as well. </p>
<p>Lets make some music! </p>
<p>Run the following cell to generate music and record it into your <code>out_stream</code>. This can take a couple of minutes.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">out_stream = generate_music(inference_model)</span><br></pre></td></tr></table></figure>
<pre><code>Predicting new values for different set of chords.
Generated 51 sounds using the predicted values for the set of chords (&quot;1&quot;) and after pruning
Generated 51 sounds using the predicted values for the set of chords (&quot;2&quot;) and after pruning
Generated 51 sounds using the predicted values for the set of chords (&quot;3&quot;) and after pruning
Generated 51 sounds using the predicted values for the set of chords (&quot;4&quot;) and after pruning
Generated 51 sounds using the predicted values for the set of chords (&quot;5&quot;) and after pruning
Your generated music is saved in output/my_music.midi
</code></pre><p>To listen to your music, click File-&gt;Open… Then go to “output/“ and download “my_music.midi”. Either play it on your computer with an application that can read midi files if you have one, or use one of the free online “MIDI to mp3” conversion tools to convert this to mp3.  </p>
<p>As reference, here also is a 30sec audio clip we generated using this algorithm. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">IPython.display.Audio(<span class="string">'./data/30s_trained_model.mp3'</span>)</span><br></pre></td></tr></table></figure>
<h3 id="Congratulations"><a href="#Congratulations" class="headerlink" title="Congratulations!"></a>Congratulations!</h3><p>You have come to the end of the notebook. </p>
<p><font color="blue"><br>Here’s what you should remember:</font></p>
<ul>
<li>A sequence model can be used to generate musical values, which are then post-processed into midi music. </li>
<li>Fairly similar models can be used to generate dinosaur names or to generate music, with the major difference being the input fed to the model.  </li>
<li>In Keras, sequence generation involves defining layers with shared weights, which are then repeated for the different time steps $1, \ldots, T_x$. </li>
</ul>
<p>Congratulations on completing this assignment and generating a jazz solo! </p>
<p><strong>References</strong></p>
<p>The ideas presented in this notebook came primarily from three computational music papers cited below. The implementation here also took significant inspiration and used many components from Ji-Sung Kim’s github repository.</p>
<ul>
<li>Ji-Sung Kim, 2016, <a href="https://github.com/jisungk/deepjazz" target="_blank" rel="noopener">deepjazz</a></li>
<li>Jon Gillick, Kevin Tang and Robert Keller, 2009. <a href="http://ai.stanford.edu/~kdtang/papers/smc09-jazzgrammar.pdf" target="_blank" rel="noopener">Learning Jazz Grammars</a></li>
<li>Robert Keller and David Morrison, 2007, <a href="http://smc07.uoa.gr/SMC07%20Proceedings/SMC07%20Paper%2055.pdf" target="_blank" rel="noopener">A Grammatical Approach to Automatic Improvisation</a></li>
<li>François Pachet, 1999, <a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.5.7473&amp;rep=rep1&amp;type=pdf" target="_blank" rel="noopener">Surprising Harmonies</a></li>
</ul>
<p>We’re also grateful to François Germain for valuable feedback.</p>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Project</tag>
        <tag>NLP</tag>
        <tag>Sequence Models</tag>
      </tags>
  </entry>
  <entry>
    <title>Character-level language model</title>
    <url>/Character-level-language-model/2019/03/28/</url>
    <content><![CDATA[<h1 id="Character-level-language-model-Dinosaurus-land"><a href="#Character-level-language-model-Dinosaurus-land" class="headerlink" title="Character level language model - Dinosaurus land"></a>Character level language model - Dinosaurus land</h1><p>Welcome to Dinosaurus Island! 65 million years ago, dinosaurs existed, and in this assignment they are back. You are in charge of a special task. Leading biology researchers are creating new breeds of dinosaurs and bringing them to life on earth, and your job is to give names to these dinosaurs. If a dinosaur does not like its name, it might go beserk, so choose wisely! </p>
<table>
<td>
<img src="images/dino.jpg" style="width:250;height:300px;">

</td>

</table>

<p>Luckily you have learned some deep learning and you will use it to save the day. Your assistant has collected a list of all the dinosaur names they could find, and compiled them into this <a href="dinos.txt">dataset</a>. (Feel free to take a look by clicking the previous link.) To create new dinosaur names, you will build a character level language model to generate new names. Your algorithm will learn the different name patterns, and randomly generate new names. Hopefully this algorithm will keep you and your team safe from the dinosaurs’ wrath! </p>
<p>By completing this assignment you will learn:</p>
<ul>
<li>How to store text data for processing using an RNN </li>
<li>How to synthesize data, by sampling predictions at each time step and passing it to the next RNN-cell unit</li>
<li>How to build a character-level text generation recurrent neural network</li>
<li>Why clipping the gradients is important</li>
</ul>
<p>We will begin by loading in some functions that we have provided for you in <code>rnn_utils</code>. Specifically, you have access to functions such as <code>rnn_forward</code> and <code>rnn_backward</code> which are equivalent to those you’ve implemented in the previous assignment. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br></pre></td></tr></table></figure>
<h2 id="1-Problem-Statement"><a href="#1-Problem-Statement" class="headerlink" title="1 - Problem Statement"></a>1 - Problem Statement</h2><h3 id="1-1-Dataset-and-Preprocessing"><a href="#1-1-Dataset-and-Preprocessing" class="headerlink" title="1.1 - Dataset and Preprocessing"></a>1.1 - Dataset and Preprocessing</h3><p>Run the following cell to read the dataset of dinosaur names, create a list of unique characters (such as a-z), and compute the dataset and vocabulary size. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = open(<span class="string">'dinos.txt'</span>, <span class="string">'r'</span>).read()</span><br><span class="line">data= data.lower()</span><br><span class="line">chars = list(set(data))</span><br><span class="line">data_size, vocab_size = len(data), len(chars)</span><br><span class="line">print(<span class="string">'There are %d total characters and %d unique characters in your data.'</span> % (data_size, vocab_size))</span><br></pre></td></tr></table></figure>
<pre><code>There are 19909 total characters and 27 unique characters in your data.
</code></pre><p>The characters are a-z (26 characters) plus the “\n” (or newline character), which in this assignment plays a role similar to the <code>&lt;EOS&gt;</code> (or “End of sentence”) token we had discussed in lecture, only here it indicates the end of the dinosaur name rather than the end of a sentence. In the cell below, we create a python dictionary (i.e., a hash table) to map each character to an index from 0-26. We also create a second python dictionary that maps each index back to the corresponding character character. This will help you figure out what index corresponds to what character in the probability distribution output of the softmax layer. Below, <code>char_to_ix</code> and <code>ix_to_char</code> are the python dictionaries. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">char_to_ix = &#123; ch:i <span class="keyword">for</span> i,ch <span class="keyword">in</span> enumerate(sorted(chars)) &#125;</span><br><span class="line">ix_to_char = &#123; i:ch <span class="keyword">for</span> i,ch <span class="keyword">in</span> enumerate(sorted(chars)) &#125;</span><br><span class="line">print(ix_to_char)</span><br></pre></td></tr></table></figure>
<pre><code>{0: &#39;\n&#39;, 1: &#39;a&#39;, 2: &#39;b&#39;, 3: &#39;c&#39;, 4: &#39;d&#39;, 5: &#39;e&#39;, 6: &#39;f&#39;, 7: &#39;g&#39;, 8: &#39;h&#39;, 9: &#39;i&#39;, 10: &#39;j&#39;, 11: &#39;k&#39;, 12: &#39;l&#39;, 13: &#39;m&#39;, 14: &#39;n&#39;, 15: &#39;o&#39;, 16: &#39;p&#39;, 17: &#39;q&#39;, 18: &#39;r&#39;, 19: &#39;s&#39;, 20: &#39;t&#39;, 21: &#39;u&#39;, 22: &#39;v&#39;, 23: &#39;w&#39;, 24: &#39;x&#39;, 25: &#39;y&#39;, 26: &#39;z&#39;}
</code></pre><h3 id="1-2-Overview-of-the-model"><a href="#1-2-Overview-of-the-model" class="headerlink" title="1.2 - Overview of the model"></a>1.2 - Overview of the model</h3><p>Your model will have the following structure: </p>
<ul>
<li>Initialize parameters </li>
<li>Run the optimization loop<ul>
<li>Forward propagation to compute the loss function</li>
<li>Backward propagation to compute the gradients with respect to the loss function</li>
<li>Clip the gradients to avoid exploding gradients</li>
<li>Using the gradients, update your parameter with the gradient descent update rule.</li>
</ul>
</li>
<li>Return the learned parameters </li>
</ul>
<p><img src="images/rnn.png" style="width:450;height:300px;"></p>
<caption><center> **Figure 1**: Recurrent Neural Network, similar to what you had built in the previous notebook "Building a RNN - Step by Step".  </center></caption>

<p>At each time-step, the RNN tries to predict what is the next character given the previous characters. The dataset $X = (x^{\langle 1 \rangle}, x^{\langle 2 \rangle}, …, x^{\langle T_x \rangle})$ is a list of characters in the training set, while $Y = (y^{\langle 1 \rangle}, y^{\langle 2 \rangle}, …, y^{\langle T_x \rangle})$ is such that at every time-step $t$, we have $y^{\langle t \rangle} = x^{\langle t+1 \rangle}$. </p>
<h2 id="2-Building-blocks-of-the-model"><a href="#2-Building-blocks-of-the-model" class="headerlink" title="2 - Building blocks of the model"></a>2 - Building blocks of the model</h2><p>In this part, you will build two important blocks of the overall model:</p>
<ul>
<li>Gradient clipping: to avoid exploding gradients</li>
<li>Sampling: a technique used to generate characters</li>
</ul>
<p>You will then apply these two functions to build the model.</p>
<h3 id="2-1-Clipping-the-gradients-in-the-optimization-loop"><a href="#2-1-Clipping-the-gradients-in-the-optimization-loop" class="headerlink" title="2.1 - Clipping the gradients in the optimization loop"></a>2.1 - Clipping the gradients in the optimization loop</h3><p>In this section you will implement the <code>clip</code> function that you will call inside of your optimization loop. Recall that your overall loop structure usually consists of a forward pass, a cost computation, a backward pass, and a parameter update. Before updating the parameters, you will perform gradient clipping when needed to make sure that your gradients are not “exploding,” meaning taking on overly large values. </p>
<p>In the exercise below, you will implement a function <code>clip</code> that takes in a dictionary of gradients and returns a clipped version of gradients if needed. There are different ways to clip gradients; we will use a simple element-wise clipping procedure, in which every element of the gradient vector is clipped to lie between some range [-N, N]. More generally, you will provide a <code>maxValue</code> (say 10). In this example, if any component of the gradient vector is greater than 10, it would be set to 10; and if any component of the gradient vector is less than -10, it would be set to -10. If it is between -10 and 10, it is left alone. </p>
<p><img src="images/clip.png" style="width:400;height:150px;"></p>
<caption><center> **Figure 2**: Visualization of gradient descent with and without gradient clipping, in a case where the network is running into slight "exploding gradient" problems. </center></caption>

<p><strong>Exercise</strong>: Implement the function below to return the clipped gradients of your dictionary <code>gradients</code>. Your function takes in a maximum threshold and returns the clipped versions of your gradients. You can check out this <a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.clip.html" target="_blank" rel="noopener">hint</a> for examples of how to clip in numpy. You will need to use the argument <code>out = ...</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### GRADED FUNCTION: clip</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clip</span><span class="params">(gradients, maxValue)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    Clips the gradients' values between minimum and maximum.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    gradients -- a dictionary containing the gradients "dWaa", "dWax", "dWya", "db", "dby"</span></span><br><span class="line"><span class="string">    maxValue -- everything above this number is set to this number, and everything less than -maxValue is set to -maxValue</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns: </span></span><br><span class="line"><span class="string">    gradients -- a dictionary with the clipped gradients.</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    </span><br><span class="line">    dWaa, dWax, dWya, db, dby = gradients[<span class="string">'dWaa'</span>], gradients[<span class="string">'dWax'</span>], gradients[<span class="string">'dWya'</span>], gradients[<span class="string">'db'</span>], gradients[<span class="string">'dby'</span>]</span><br><span class="line">   </span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    <span class="comment"># clip to mitigate exploding gradients, loop over [dWax, dWaa, dWya, db, dby]. (≈2 lines)</span></span><br><span class="line">    <span class="keyword">for</span> gradient <span class="keyword">in</span> [dWax, dWaa, dWya, db, dby]:</span><br><span class="line">        np.clip(a = gradient, a_min = -maxValue, a_max = maxValue, out = gradient)</span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    gradients = &#123;<span class="string">"dWaa"</span>: dWaa, <span class="string">"dWax"</span>: dWax, <span class="string">"dWya"</span>: dWya, <span class="string">"db"</span>: db, <span class="string">"dby"</span>: dby&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> gradients</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.seed(<span class="number">3</span>)</span><br><span class="line">dWax = np.random.randn(<span class="number">5</span>,<span class="number">3</span>)*<span class="number">10</span></span><br><span class="line">dWaa = np.random.randn(<span class="number">5</span>,<span class="number">5</span>)*<span class="number">10</span></span><br><span class="line">dWya = np.random.randn(<span class="number">2</span>,<span class="number">5</span>)*<span class="number">10</span></span><br><span class="line">db = np.random.randn(<span class="number">5</span>,<span class="number">1</span>)*<span class="number">10</span></span><br><span class="line">dby = np.random.randn(<span class="number">2</span>,<span class="number">1</span>)*<span class="number">10</span></span><br><span class="line">gradients = &#123;<span class="string">"dWax"</span>: dWax, <span class="string">"dWaa"</span>: dWaa, <span class="string">"dWya"</span>: dWya, <span class="string">"db"</span>: db, <span class="string">"dby"</span>: dby&#125;</span><br><span class="line">gradients = clip(gradients, <span class="number">10</span>)</span><br><span class="line">print(<span class="string">"gradients[\"dWaa\"][1][2] ="</span>, gradients[<span class="string">"dWaa"</span>][<span class="number">1</span>][<span class="number">2</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dWax\"][3][1] ="</span>, gradients[<span class="string">"dWax"</span>][<span class="number">3</span>][<span class="number">1</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dWya\"][1][2] ="</span>, gradients[<span class="string">"dWya"</span>][<span class="number">1</span>][<span class="number">2</span>])</span><br><span class="line">print(<span class="string">"gradients[\"db\"][4] ="</span>, gradients[<span class="string">"db"</span>][<span class="number">4</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dby\"][1] ="</span>, gradients[<span class="string">"dby"</span>][<span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<pre><code>gradients[&quot;dWaa&quot;][1][2] = 10.0
gradients[&quot;dWax&quot;][3][1] = -10.0
gradients[&quot;dWya&quot;][1][2] = 0.29713815361
gradients[&quot;db&quot;][4] = [ 10.]
gradients[&quot;dby&quot;][1] = [ 8.45833407]
</code></pre><p><strong> Expected output:</strong></p>
<table>
<tr>
    <td> 
    **gradients["dWaa"][1][2] **
    </td>
    <td> 
    10.0
    </td>
</tr>

<tr>
    <td> 
    **gradients["dWax"][3][1]**
    </td>
    <td> 
    -10.0
    </td>
    
</tr>
<tr>
    <td> 
    **gradients["dWya"][1][2]**
    </td>
    <td> 
0.29713815361
    </td>
</tr>
<tr>
    <td> 
    **gradients["db"][4]**
    </td>
    <td> 
[ 10.]
    </td>
</tr>
<tr>
    <td> 
    **gradients["dby"][1]**
    </td>
    <td> 
[ 8.45833407]
    </td>
</tr>

</table>

<h3 id="2-2-Sampling"><a href="#2-2-Sampling" class="headerlink" title="2.2 - Sampling"></a>2.2 - Sampling</h3><p>Now assume that your model is trained. You would like to generate new text (characters). The process of generation is explained in the picture below:</p>
<p><img src="images/dinos3.png" style="width:500;height:300px;"></p>
<caption><center> **Figure 3**: In this picture, we assume the model is already trained. We pass in $x^{\langle 1\rangle} = \vec{0}$ at the first time step, and have the network then sample one character at a time. </center></caption>

<p><strong>Exercise</strong>: Implement the <code>sample</code> function below to sample characters. You need to carry out 4 steps:</p>
<ul>
<li><p><strong>Step 1</strong>: Pass the network the first “dummy” input $x^{\langle 1 \rangle} = \vec{0}$ (the vector of zeros). This is the default input before we’ve generated any characters. We also set $a^{\langle 0 \rangle} = \vec{0}$</p>
</li>
<li><p><strong>Step 2</strong>: Run one step of forward propagation to get $a^{\langle 1 \rangle}$ and $\hat{y}^{\langle 1 \rangle}$. Here are the equations:</p>
</li>
</ul>
<script type="math/tex; mode=display">a^{\langle t+1 \rangle} = \tanh(W_{ax}  x^{\langle t \rangle } + W_{aa} a^{\langle t \rangle } + b)\tag{1}</script><script type="math/tex; mode=display">z^{\langle t + 1 \rangle } = W_{ya}  a^{\langle t + 1 \rangle } + b_y \tag{2}</script><script type="math/tex; mode=display">\hat{y}^{\langle t+1 \rangle } = softmax(z^{\langle t + 1 \rangle })\tag{3}</script><p>Note that $\hat{y}^{\langle t+1 \rangle }$ is a (softmax) probability vector (its entries are between 0 and 1 and sum to 1). $\hat{y}^{\langle t+1 \rangle}_i$ represents the probability that the character indexed by “i” is the next character.  We have provided a <code>softmax()</code> function that you can use.</p>
<ul>
<li><strong>Step 3</strong>: Carry out sampling: Pick the next character’s index according to the probability distribution specified by $\hat{y}^{\langle t+1 \rangle }$. This means that if $\hat{y}^{\langle t+1 \rangle }_i = 0.16$, you will pick the index “i” with 16% probability. To implement it, you can use <a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.random.choice.html" target="_blank" rel="noopener"><code>np.random.choice</code></a>.</li>
</ul>
<p>Here is an example of how to use <code>np.random.choice()</code>:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">p = np.array([<span class="number">0.1</span>, <span class="number">0.0</span>, <span class="number">0.7</span>, <span class="number">0.2</span>])</span><br><span class="line">index = np.random.choice([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], p = p.ravel())</span><br></pre></td></tr></table></figure></p>
<p>This means that you will pick the <code>index</code> according to the distribution:<br>$P(index = 0) = 0.1, P(index = 1) = 0.0, P(index = 2) = 0.7, P(index = 3) = 0.2$.</p>
<ul>
<li><strong>Step 4</strong>: The last step to implement in <code>sample()</code> is to overwrite the variable <code>x</code>, which currently stores $x^{\langle t \rangle }$, with the value of $x^{\langle t + 1 \rangle }$. You will represent $x^{\langle t + 1 \rangle }$ by creating a one-hot vector corresponding to the character you’ve chosen as your prediction. You will then forward propagate $x^{\langle t + 1 \rangle }$ in Step 1 and keep repeating the process until you get a “\n” character, indicating you’ve reached the end of the dinosaur name. </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: sample</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sample</span><span class="params">(parameters, char_to_ix, seed)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Sample a sequence of characters according to a sequence of probability distributions output of the RNN</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    parameters -- python dictionary containing the parameters Waa, Wax, Wya, by, and b. </span></span><br><span class="line"><span class="string">    char_to_ix -- python dictionary mapping each character to an index.</span></span><br><span class="line"><span class="string">    seed -- used for grading purposes. Do not worry about it.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    indices -- a list of length n containing the indices of the sampled characters.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Retrieve parameters and relevant shapes from "parameters" dictionary</span></span><br><span class="line">    Waa, Wax, Wya, by, b = parameters[<span class="string">'Waa'</span>], parameters[<span class="string">'Wax'</span>], parameters[<span class="string">'Wya'</span>], parameters[<span class="string">'by'</span>], parameters[<span class="string">'b'</span>]</span><br><span class="line">    </span><br><span class="line"><span class="comment">#     print(Waa.shape)</span></span><br><span class="line"><span class="comment">#     print(Wax.shape)</span></span><br><span class="line"><span class="comment">#     print(Wya.shape)</span></span><br><span class="line"><span class="comment">#     print(by.shape)</span></span><br><span class="line">    </span><br><span class="line">    vocab_size = by.shape[<span class="number">0</span>]</span><br><span class="line">    n_a = Waa.shape[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    <span class="comment"># Step 1: Create the one-hot vector x for the first character (initializing the sequence generation). (≈1 line)</span></span><br><span class="line">    x = np.zeros((vocab_size,<span class="number">1</span>))</span><br><span class="line">    <span class="comment"># Step 1': Initialize a_prev as zeros (≈1 line)</span></span><br><span class="line">    a_prev = np.zeros((n_a,<span class="number">1</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Create an empty list of indices, this is the list which will contain the list of indices of the characters to generate (≈1 line)</span></span><br><span class="line">    indices = []</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Idx is a flag to detect a newline character, we initialize it to -1</span></span><br><span class="line">    idx = <span class="number">-1</span> </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Loop over time-steps t. At each time-step, sample a character from a probability distribution and append </span></span><br><span class="line">    <span class="comment"># its index to "indices". We'll stop if we reach 50 characters (which should be very unlikely with a well </span></span><br><span class="line">    <span class="comment"># trained model), which helps debugging and prevents entering an infinite loop. </span></span><br><span class="line">    counter = <span class="number">0</span></span><br><span class="line">    newline_character = char_to_ix[<span class="string">'\n'</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (idx != newline_character <span class="keyword">and</span> counter != <span class="number">50</span>):</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Step 2: Forward propagate x using the equations (1), (2) and (3)</span></span><br><span class="line">        a = np.tanh(np.dot(Wax,x) + np.dot(Waa,a_prev)+b)</span><br><span class="line">        z = np.dot(Wya,a) + by</span><br><span class="line">        y = softmax(z)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># for grading purposes</span></span><br><span class="line">        np.random.seed(counter+seed) </span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Step 3: Sample the index of a character within the vocabulary from the probability distribution y</span></span><br><span class="line">        idx = np.random.choice(list(range(y.shape[<span class="number">0</span>])), p = y.ravel())</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Append the index to "indices"</span></span><br><span class="line">        indices.append(idx)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Step 4: Overwrite the input character as the one corresponding to the sampled index.</span></span><br><span class="line">        x = np.zeros((vocab_size,<span class="number">1</span>))</span><br><span class="line">        x[idx] = <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Update "a_prev" to be "a"</span></span><br><span class="line">        a_prev = a</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># for grading purposes</span></span><br><span class="line">        seed += <span class="number">1</span></span><br><span class="line">        counter +=<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (counter == <span class="number">50</span>):</span><br><span class="line">        indices.append(char_to_ix[<span class="string">'\n'</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> indices</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.seed(<span class="number">2</span>)</span><br><span class="line">_, n_a = <span class="number">20</span>, <span class="number">100</span></span><br><span class="line">Wax, Waa, Wya = np.random.randn(n_a, vocab_size), np.random.randn(n_a, n_a), np.random.randn(vocab_size, n_a)</span><br><span class="line">b, by = np.random.randn(n_a, <span class="number">1</span>), np.random.randn(vocab_size, <span class="number">1</span>)</span><br><span class="line">parameters = &#123;<span class="string">"Wax"</span>: Wax, <span class="string">"Waa"</span>: Waa, <span class="string">"Wya"</span>: Wya, <span class="string">"b"</span>: b, <span class="string">"by"</span>: by&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">indices = sample(parameters, char_to_ix, <span class="number">0</span>)</span><br><span class="line">print(<span class="string">"Sampling:"</span>)</span><br><span class="line">print(<span class="string">"list of sampled indices:"</span>, indices)</span><br><span class="line">print(<span class="string">"list of sampled characters:"</span>, [ix_to_char[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices])</span><br></pre></td></tr></table></figure>
<pre><code>Sampling:
list of sampled indices: [12, 17, 24, 14, 13, 9, 10, 22, 24, 6, 13, 11, 12, 6, 21, 15, 21, 14, 3, 2, 1, 21, 18, 24, 7, 25, 6, 25, 18, 10, 16, 2, 3, 8, 15, 12, 11, 7, 1, 12, 10, 2, 7, 7, 11, 5, 6, 12, 25, 0, 0]
list of sampled characters: [&#39;l&#39;, &#39;q&#39;, &#39;x&#39;, &#39;n&#39;, &#39;m&#39;, &#39;i&#39;, &#39;j&#39;, &#39;v&#39;, &#39;x&#39;, &#39;f&#39;, &#39;m&#39;, &#39;k&#39;, &#39;l&#39;, &#39;f&#39;, &#39;u&#39;, &#39;o&#39;, &#39;u&#39;, &#39;n&#39;, &#39;c&#39;, &#39;b&#39;, &#39;a&#39;, &#39;u&#39;, &#39;r&#39;, &#39;x&#39;, &#39;g&#39;, &#39;y&#39;, &#39;f&#39;, &#39;y&#39;, &#39;r&#39;, &#39;j&#39;, &#39;p&#39;, &#39;b&#39;, &#39;c&#39;, &#39;h&#39;, &#39;o&#39;, &#39;l&#39;, &#39;k&#39;, &#39;g&#39;, &#39;a&#39;, &#39;l&#39;, &#39;j&#39;, &#39;b&#39;, &#39;g&#39;, &#39;g&#39;, &#39;k&#39;, &#39;e&#39;, &#39;f&#39;, &#39;l&#39;, &#39;y&#39;, &#39;\n&#39;, &#39;\n&#39;]
</code></pre><p><strong> Expected output:</strong></p>
<table>
<tr>
    <td> 
    **list of sampled indices:**
    </td>
    <td> 
    [12, 17, 24, 14, 13, 9, 10, 22, 24, 6, 13, 11, 12, 6, 21, 15, 21, 14, 3, 2, 1, 21, 18, 24, <br>
    7, 25, 6, 25, 18, 10, 16, 2, 3, 8, 15, 12, 11, 7, 1, 12, 10, 2, 7, 7, 11, 5, 6, 12, 25, 0, 0]
    </td>
    </tr><tr>
    <td> 
    **list of sampled characters:**
    </td>
    <td> 
    ['l', 'q', 'x', 'n', 'm', 'i', 'j', 'v', 'x', 'f', 'm', 'k', 'l', 'f', 'u', 'o', <br>
    'u', 'n', 'c', 'b', 'a', 'u', 'r', 'x', 'g', 'y', 'f', 'y', 'r', 'j', 'p', 'b', 'c', 'h', 'o', <br>
    'l', 'k', 'g', 'a', 'l', 'j', 'b', 'g', 'g', 'k', 'e', 'f', 'l', 'y', '\n', '\n']
    </td>



</tr>
</table>

<h2 id="3-Building-the-language-model"><a href="#3-Building-the-language-model" class="headerlink" title="3 - Building the language model"></a>3 - Building the language model</h2><p>It is time to build the character-level language model for text generation. </p>
<h3 id="3-1-Gradient-descent"><a href="#3-1-Gradient-descent" class="headerlink" title="3.1 - Gradient descent"></a>3.1 - Gradient descent</h3><p>In this section you will implement a function performing one step of stochastic gradient descent (with clipped gradients). You will go through the training examples one at a time, so the optimization algorithm will be stochastic gradient descent. As a reminder, here are the steps of a common optimization loop for an RNN:</p>
<ul>
<li>Forward propagate through the RNN to compute the loss</li>
<li>Backward propagate through time to compute the gradients of the loss with respect to the parameters</li>
<li>Clip the gradients if necessary </li>
<li>Update your parameters using gradient descent </li>
</ul>
<p><strong>Exercise</strong>: Implement this optimization process (one step of stochastic gradient descent). </p>
<p>We provide you with the following functions: </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rnn_forward</span><span class="params">(X, Y, a_prev, parameters)</span>:</span></span><br><span class="line">    <span class="string">""" Performs the forward propagation through the RNN and computes the cross-entropy loss.</span></span><br><span class="line"><span class="string">    It returns the loss' value as well as a "cache" storing values to be used in the backpropagation."""</span></span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">return</span> loss, cache</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rnn_backward</span><span class="params">(X, Y, parameters, cache)</span>:</span></span><br><span class="line">    <span class="string">""" Performs the backward propagation through time to compute the gradients of the loss with respect</span></span><br><span class="line"><span class="string">    to the parameters. It returns also all the hidden states."""</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> gradients, a</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_parameters</span><span class="params">(parameters, gradients, learning_rate)</span>:</span></span><br><span class="line">    <span class="string">""" Updates parameters using the Gradient Descent Update Rule."""</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> parameters</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: optimize</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">optimize</span><span class="params">(X, Y, a_prev, parameters, learning_rate = <span class="number">0.01</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Execute one step of the optimization to train the model.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    X -- list of integers, where each integer is a number that maps to a character in the vocabulary.</span></span><br><span class="line"><span class="string">    Y -- list of integers, exactly the same as X but shifted one index to the left.</span></span><br><span class="line"><span class="string">    a_prev -- previous hidden state.</span></span><br><span class="line"><span class="string">    parameters -- python dictionary containing:</span></span><br><span class="line"><span class="string">                        Wax -- Weight matrix multiplying the input, numpy array of shape (n_a, n_x)</span></span><br><span class="line"><span class="string">                        Waa -- Weight matrix multiplying the hidden state, numpy array of shape (n_a, n_a)</span></span><br><span class="line"><span class="string">                        Wya -- Weight matrix relating the hidden-state to the output, numpy array of shape (n_y, n_a)</span></span><br><span class="line"><span class="string">                        b --  Bias, numpy array of shape (n_a, 1)</span></span><br><span class="line"><span class="string">                        by -- Bias relating the hidden-state to the output, numpy array of shape (n_y, 1)</span></span><br><span class="line"><span class="string">    learning_rate -- learning rate for the model.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    loss -- value of the loss function (cross-entropy)</span></span><br><span class="line"><span class="string">    gradients -- python dictionary containing:</span></span><br><span class="line"><span class="string">                        dWax -- Gradients of input-to-hidden weights, of shape (n_a, n_x)</span></span><br><span class="line"><span class="string">                        dWaa -- Gradients of hidden-to-hidden weights, of shape (n_a, n_a)</span></span><br><span class="line"><span class="string">                        dWya -- Gradients of hidden-to-output weights, of shape (n_y, n_a)</span></span><br><span class="line"><span class="string">                        db -- Gradients of bias vector, of shape (n_a, 1)</span></span><br><span class="line"><span class="string">                        dby -- Gradients of output bias vector, of shape (n_y, 1)</span></span><br><span class="line"><span class="string">    a[len(X)-1] -- the last hidden state, of shape (n_a, 1)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Forward propagate through time (≈1 line)</span></span><br><span class="line">    loss, cache = rnn_forward(X, Y, a_prev, parameters)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Backpropagate through time (≈1 line)</span></span><br><span class="line">    gradients, a = rnn_backward(X, Y, parameters, cache)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Clip your gradients between -5 (min) and 5 (max) (≈1 line)</span></span><br><span class="line">    gradients = clip(gradients, <span class="number">5</span>)</span><br><span class="line">    <span class="comment"># Update parameters (≈1 line)</span></span><br><span class="line">    parameters = update_parameters(parameters, gradients, learning_rate)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> loss, gradients, a[len(X)<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.seed(<span class="number">1</span>)</span><br><span class="line">vocab_size, n_a = <span class="number">27</span>, <span class="number">100</span></span><br><span class="line">a_prev = np.random.randn(n_a, <span class="number">1</span>)</span><br><span class="line">Wax, Waa, Wya = np.random.randn(n_a, vocab_size), np.random.randn(n_a, n_a), np.random.randn(vocab_size, n_a)</span><br><span class="line">b, by = np.random.randn(n_a, <span class="number">1</span>), np.random.randn(vocab_size, <span class="number">1</span>)</span><br><span class="line">parameters = &#123;<span class="string">"Wax"</span>: Wax, <span class="string">"Waa"</span>: Waa, <span class="string">"Wya"</span>: Wya, <span class="string">"b"</span>: b, <span class="string">"by"</span>: by&#125;</span><br><span class="line">X = [<span class="number">12</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">22</span>,<span class="number">3</span>]</span><br><span class="line">Y = [<span class="number">4</span>,<span class="number">14</span>,<span class="number">11</span>,<span class="number">22</span>,<span class="number">25</span>, <span class="number">26</span>]</span><br><span class="line"></span><br><span class="line">loss, gradients, a_last = optimize(X, Y, a_prev, parameters, learning_rate = <span class="number">0.01</span>)</span><br><span class="line">print(<span class="string">"Loss ="</span>, loss)</span><br><span class="line">print(<span class="string">"gradients[\"dWaa\"][1][2] ="</span>, gradients[<span class="string">"dWaa"</span>][<span class="number">1</span>][<span class="number">2</span>])</span><br><span class="line">print(<span class="string">"np.argmax(gradients[\"dWax\"]) ="</span>, np.argmax(gradients[<span class="string">"dWax"</span>]))</span><br><span class="line">print(<span class="string">"gradients[\"dWya\"][1][2] ="</span>, gradients[<span class="string">"dWya"</span>][<span class="number">1</span>][<span class="number">2</span>])</span><br><span class="line">print(<span class="string">"gradients[\"db\"][4] ="</span>, gradients[<span class="string">"db"</span>][<span class="number">4</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dby\"][1] ="</span>, gradients[<span class="string">"dby"</span>][<span class="number">1</span>])</span><br><span class="line">print(<span class="string">"a_last[4] ="</span>, a_last[<span class="number">4</span>])</span><br></pre></td></tr></table></figure>
<pre><code>Loss = 126.503975722
gradients[&quot;dWaa&quot;][1][2] = 0.194709315347
np.argmax(gradients[&quot;dWax&quot;]) = 93
gradients[&quot;dWya&quot;][1][2] = -0.007773876032
gradients[&quot;db&quot;][4] = [-0.06809825]
gradients[&quot;dby&quot;][1] = [ 0.01538192]
a_last[4] = [-1.]
</code></pre><p><strong> Expected output:</strong></p>
<table>


<tr>
    <td> 
    **Loss **
    </td>
    <td> 
    126.503975722
    </td>
</tr>
<tr>
    <td> 
    **gradients["dWaa"][1][2]**
    </td>
    <td> 
    0.194709315347
    </td>
</tr><tr>
    <td> 
    **np.argmax(gradients["dWax"])**
    </td>
    <td> 93
    </td>
</tr>
<tr>
    <td> 
    **gradients["dWya"][1][2]**
    </td>
    <td> -0.007773876032
    </td>
</tr>
<tr>
    <td> 
    **gradients["db"][4]**
    </td>
    <td> [-0.06809825]
    </td>
</tr>
<tr>
    <td> 
    **gradients["dby"][1]**
    </td>
    <td>[ 0.01538192]
    </td>
</tr>
<tr>
    <td> 
    **a_last[4]**
    </td>
    <td> [-1.]
    </td>
</tr>

</table>

<h3 id="3-2-Training-the-model"><a href="#3-2-Training-the-model" class="headerlink" title="3.2 - Training the model"></a>3.2 - Training the model</h3><p>Given the dataset of dinosaur names, we use each line of the dataset (one name) as one training example. Every 100 steps of stochastic gradient descent, you will sample 10 randomly chosen names to see how the algorithm is doing. Remember to shuffle the dataset, so that stochastic gradient descent visits the examples in random order. </p>
<p><strong>Exercise</strong>: Follow the instructions and implement <code>model()</code>. When <code>examples[index]</code> contains one dinosaur name (string), to create an example (X, Y), you can use this:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">index = j % len(examples)</span><br><span class="line">X = [<span class="keyword">None</span>] + [char_to_ix[ch] <span class="keyword">for</span> ch <span class="keyword">in</span> examples[index]] </span><br><span class="line">Y = X[<span class="number">1</span>:] + [char_to_ix[<span class="string">"\n"</span>]]</span><br></pre></td></tr></table></figure></p>
<p>Note that we use: <code>index= j % len(examples)</code>, where <code>j = 1....num_iterations</code>, to make sure that <code>examples[index]</code> is always a valid statement (<code>index</code> is smaller than <code>len(examples)</code>).<br>The first entry of <code>X</code> being <code>None</code> will be interpreted by <code>rnn_forward()</code> as setting $x^{\langle 0 \rangle} = \vec{0}$. Further, this ensures that <code>Y</code> is equal to <code>X</code> but shifted one step to the left, and with an additional “\n” appended to signify the end of the dinosaur name. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: model</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">model</span><span class="params">(data, ix_to_char, char_to_ix, num_iterations = <span class="number">35000</span>, n_a = <span class="number">50</span>, dino_names = <span class="number">7</span>, vocab_size = <span class="number">27</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Trains the model and generates dinosaur names. </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    data -- text corpus</span></span><br><span class="line"><span class="string">    ix_to_char -- dictionary that maps the index to a character</span></span><br><span class="line"><span class="string">    char_to_ix -- dictionary that maps a character to an index</span></span><br><span class="line"><span class="string">    num_iterations -- number of iterations to train the model for</span></span><br><span class="line"><span class="string">    n_a -- number of units of the RNN cell</span></span><br><span class="line"><span class="string">    dino_names -- number of dinosaur names you want to sample at each iteration. </span></span><br><span class="line"><span class="string">    vocab_size -- number of unique characters found in the text, size of the vocabulary</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    parameters -- learned parameters</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Retrieve n_x and n_y from vocab_size</span></span><br><span class="line">    n_x, n_y = vocab_size, vocab_size</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Initialize parameters</span></span><br><span class="line">    parameters = initialize_parameters(n_a, n_x, n_y)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Initialize loss (this is required because we want to smooth our loss, don't worry about it)</span></span><br><span class="line">    loss = get_initial_loss(vocab_size, dino_names)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Build list of all dinosaur names (training examples).</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"dinos.txt"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        examples = f.readlines()</span><br><span class="line">    examples = [x.lower().strip() <span class="keyword">for</span> x <span class="keyword">in</span> examples]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Shuffle list of all dinosaur names</span></span><br><span class="line">    np.random.seed(<span class="number">0</span>)</span><br><span class="line">    np.random.shuffle(examples)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Initialize the hidden state of your LSTM</span></span><br><span class="line">    a_prev = np.zeros((n_a, <span class="number">1</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Optimization loop</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(num_iterations):</span><br><span class="line">        </span><br><span class="line">        <span class="comment">### START CODE HERE ###</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Use the hint above to define one training example (X,Y) (≈ 2 lines)</span></span><br><span class="line">        index = j % len(examples)</span><br><span class="line">        X = [<span class="keyword">None</span>] + [char_to_ix[ch] <span class="keyword">for</span> ch <span class="keyword">in</span> examples[index]]</span><br><span class="line">        Y = X[<span class="number">1</span>:] + [char_to_ix[<span class="string">"\n"</span>]]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Perform one optimization step: Forward-prop -&gt; Backward-prop -&gt; Clip -&gt; Update parameters</span></span><br><span class="line">        <span class="comment"># Choose a learning rate of 0.01</span></span><br><span class="line">        curr_loss, gradients, a_prev = optimize(X, Y, a_prev, parameters,learning_rate =  <span class="number">0.01</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">### END CODE HERE ###</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Use a latency trick to keep the loss smooth. It happens here to accelerate the training.</span></span><br><span class="line">        loss = smooth(loss, curr_loss)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Every 2000 Iteration, generate "n" characters thanks to sample() to check if the model is learning properly</span></span><br><span class="line">        <span class="keyword">if</span> j % <span class="number">2000</span> == <span class="number">0</span>:</span><br><span class="line">            </span><br><span class="line">            print(<span class="string">'Iteration: %d, Loss: %f'</span> % (j, loss) + <span class="string">'\n'</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># The number of dinosaur names to print</span></span><br><span class="line">            seed = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> name <span class="keyword">in</span> range(dino_names):</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># Sample indices and print them</span></span><br><span class="line">                sampled_indices = sample(parameters, char_to_ix, seed)</span><br><span class="line">                print_sample(sampled_indices, ix_to_char)</span><br><span class="line">                </span><br><span class="line">                seed += <span class="number">1</span>  <span class="comment"># To get the same result for grading purposed, increment the seed by one. </span></span><br><span class="line">      </span><br><span class="line">            print(<span class="string">'\n'</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> parameters</span><br></pre></td></tr></table></figure>
<p>Run the following cell, you should observe your model outputting random-looking characters at the first iteration. After a few thousand iterations, your model should learn to generate reasonable-looking names. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">parameters = model(data, ix_to_char, char_to_ix)</span><br></pre></td></tr></table></figure>
<pre><code>Iteration: 0, Loss: 23.087336

Nkzxwtdmfqoeyhsqwasjkjvu
Kneb
Kzxwtdmfqoeyhsqwasjkjvu
Neb
Zxwtdmfqoeyhsqwasjkjvu
Eb
Xwtdmfqoeyhsqwasjkjvu


Iteration: 2000, Loss: 27.884160

Liusskeomnolxeros
Hmdaairus
Hytroligoraurus
Lecalosapaus
Xusicikoraurus
Abalpsamantisaurus
Tpraneronxeros


Iteration: 4000, Loss: 25.901815

Mivrosaurus
Inee
Ivtroplisaurus
Mbaaisaurus
Wusichisaurus
Cabaselachus
Toraperlethosdarenitochusthiamamumamaon


Iteration: 6000, Loss: 24.608779

Onwusceomosaurus
Lieeaerosaurus
Lxussaurus
Oma
Xusteonosaurus
Eeahosaurus
Toreonosaurus


Iteration: 8000, Loss: 24.070350

Onxusichepriuon
Kilabersaurus
Lutrodon
Omaaerosaurus
Xutrcheps
Edaksoje
Trodiktonus


Iteration: 10000, Loss: 23.844446

Onyusaurus
Klecalosaurus
Lustodon
Ola
Xusodonia
Eeaeosaurus
Troceosaurus


Iteration: 12000, Loss: 23.291971

Onyxosaurus
Kica
Lustrepiosaurus
Olaagrraiansaurus
Yuspangosaurus
Eealosaurus
Trognesaurus


Iteration: 14000, Loss: 23.382339

Meutromodromurus
Inda
Iutroinatorsaurus
Maca
Yusteratoptititan
Ca
Troclosaurus


Iteration: 16000, Loss: 23.288447

Meuspsangosaurus
Ingaa
Iusosaurus
Macalosaurus
Yushanis
Daalosaurus
Trpandon


Iteration: 18000, Loss: 22.823526

Phytrolonhonyg
Mela
Mustrerasaurus
Peg
Ytronorosaurus
Ehalosaurus
Trolomeehus


Iteration: 20000, Loss: 23.041871

Nousmofonosaurus
Loma
Lytrognatiasaurus
Ngaa
Ytroenetiaudostarmilus
Eiafosaurus
Troenchulunosaurus


Iteration: 22000, Loss: 22.728849

Piutyrangosaurus
Midaa
Myroranisaurus
Pedadosaurus
Ytrodon
Eiadosaurus
Trodoniomusitocorces


Iteration: 24000, Loss: 22.683403

Meutromeisaurus
Indeceratlapsaurus
Jurosaurus
Ndaa
Yusicheropterus
Eiaeropectus
Trodonasaurus


Iteration: 26000, Loss: 22.554523

Phyusaurus
Liceceron
Lyusichenodylus
Pegahus
Yustenhtonthosaurus
Elagosaurus
Trodontonsaurus


Iteration: 28000, Loss: 22.484472

Onyutimaerihus
Koia
Lytusaurus
Ola
Ytroheltorus
Eiadosaurus
Trofiashates


Iteration: 30000, Loss: 22.774404

Phytys
Lica
Lysus
Pacalosaurus
Ytrochisaurus
Eiacosaurus
Trochesaurus


Iteration: 32000, Loss: 22.209473

Mawusaurus
Jica
Lustoia
Macaisaurus
Yusolenqtesaurus
Eeaeosaurus
Trnanatrax


Iteration: 34000, Loss: 22.396744

Mavptokekus
Ilabaisaurus
Itosaurus
Macaesaurus
Yrosaurus
Eiaeosaurus
Trodon
</code></pre><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>You can see that your algorithm has started to generate plausible dinosaur names towards the end of the training. At first, it was generating random characters, but towards the end you could see dinosaur names with cool endings. Feel free to run the algorithm even longer and play with hyperparameters to see if you can get even better results. Our implemetation generated some really cool names like <code>maconucon</code>, <code>marloralus</code> and <code>macingsersaurus</code>. Your model hopefully also learned that dinosaur names tend to end in <code>saurus</code>, <code>don</code>, <code>aura</code>, <code>tor</code>, etc.</p>
<p>If your model generates some non-cool names, don’t blame the model entirely—not all actual dinosaur names sound cool. (For example, <code>dromaeosauroides</code> is an actual dinosaur name and is in the training set.) But this model should give you a set of candidates from which you can pick the coolest! </p>
<p>This assignment had used a relatively small dataset, so that you could train an RNN quickly on a CPU. Training a model of the english language requires a much bigger dataset, and usually needs much more computation, and could run for many hours on GPUs. We ran our dinosaur name for quite some time, and so far our favoriate name is the great, undefeatable, and fierce: Mangosaurus!</p>
<p><img src="images/mangosaurus.jpeg" style="width:250;height:300px;"></p>
<h2 id="4-Writing-like-Shakespeare"><a href="#4-Writing-like-Shakespeare" class="headerlink" title="4 - Writing like Shakespeare"></a>4 - Writing like Shakespeare</h2><p>The rest of this notebook is optional and is not graded, but we hope you’ll do it anyway since it’s quite fun and informative. </p>
<p>A similar (but more complicated) task is to generate Shakespeare poems. Instead of learning from a dataset of Dinosaur names you can use a collection of Shakespearian poems. Using LSTM cells, you can learn longer term dependencies that span many characters in the text—e.g., where a character appearing somewhere a sequence can influence what should be a different character much much later in ths sequence. These long term dependencies were less important with dinosaur names, since the names were quite short. </p>
<p><img src="images/shakespeare.jpg" style="width:500;height:400px;"></p>
<caption><center> Let's become poets! </center></caption>

<p>We have implemented a Shakespeare poem generator with Keras. Run the following cell to load the required packages and models. This may take a few minutes. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> keras.callbacks <span class="keyword">import</span> LambdaCallback</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Model, load_model, Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense, Activation, Dropout, Input, Masking</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> LSTM</span><br><span class="line"><span class="keyword">from</span> keras.utils.data_utils <span class="keyword">import</span> get_file</span><br><span class="line"><span class="keyword">from</span> keras.preprocessing.sequence <span class="keyword">import</span> pad_sequences</span><br><span class="line"><span class="keyword">from</span> shakespeare_utils <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> io</span><br></pre></td></tr></table></figure>
<p>To save you some time, we have already trained a model for ~1000 epochs on a collection of Shakespearian poems called <a href="shakespeare.txt"><em>“The Sonnets”</em></a>. </p>
<p>Let’s train the model for one more epoch. When it finishes training for an epoch—-this will also take a few minutes—-you can run <code>generate_output</code>, which will prompt asking you for an input (<code>&lt;</code>40 characters). The poem will start with your sentence, and our RNN-Shakespeare will complete the rest of the poem for you! For example, try “Forsooth this maketh no sense “ (don’t enter the quotation marks). Depending on whether you include the space at the end, your results might also differ—try it both ways, and try other inputs as well. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print_callback = LambdaCallback(on_epoch_end=on_epoch_end)</span><br><span class="line"></span><br><span class="line">model.fit(x, y, batch_size=<span class="number">128</span>, epochs=<span class="number">1</span>, callbacks=[print_callback])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Run this cell to try with different inputs without having to re-train the model </span></span><br><span class="line">generate_output()</span><br></pre></td></tr></table></figure>
<p>The RNN-Shakespeare model is very similar to the one you have built for dinosaur names. The only major differences are:</p>
<ul>
<li>LSTMs instead of the basic RNN to capture longer-range dependencies</li>
<li>The model is a deeper, stacked LSTM model (2 layer)</li>
<li>Using Keras instead of python to simplify the code </li>
</ul>
<p>If you want to learn more, you can also check out the Keras Team’s text generation implementation on GitHub: <a href="https://github.com/keras-team/keras/blob/master/examples/lstm_text_generation.py" target="_blank" rel="noopener">https://github.com/keras-team/keras/blob/master/examples/lstm_text_generation.py</a>.</p>
<p>Congratulations on finishing this notebook! </p>
<p><strong>References</strong>:</p>
<ul>
<li>This exercise took inspiration from Andrej Karpathy’s implementation: <a href="https://gist.github.com/karpathy/d4dee566867f8291f086" target="_blank" rel="noopener">https://gist.github.com/karpathy/d4dee566867f8291f086</a>. To learn more about text generation, also check out Karpathy’s <a href="http://karpathy.github.io/2015/05/21/rnn-effectiveness/" target="_blank" rel="noopener">blog post</a>.</li>
<li>For the Shakespearian poem generator, our implementation was based on the implementation of an LSTM text generator by the Keras team: <a href="https://github.com/keras-team/keras/blob/master/examples/lstm_text_generation.py" target="_blank" rel="noopener">https://github.com/keras-team/keras/blob/master/examples/lstm_text_generation.py</a> </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Project</tag>
        <tag>NLP</tag>
        <tag>Sequence Models</tag>
      </tags>
  </entry>
  <entry>
    <title>RNN Implementation</title>
    <url>/RNN-Implementation/2019/03/28/</url>
    <content><![CDATA[<h1 id="Building-your-Recurrent-Neural-Network-Step-by-Step"><a href="#Building-your-Recurrent-Neural-Network-Step-by-Step" class="headerlink" title="Building your Recurrent Neural Network - Step by Step"></a>Building your Recurrent Neural Network - Step by Step</h1><p>Welcome to Course 5’s first assignment! In this assignment, you will implement your first Recurrent Neural Network in numpy.</p>
<p>Recurrent Neural Networks (RNN) are very effective for Natural Language Processing and other sequence tasks because they have “memory”. They can read inputs $x^{\langle t \rangle}$ (such as words) one at a time, and remember some information/context through the hidden layer activations that get passed from one time-step to the next. This allows a uni-directional RNN to take information from the past to process later inputs. A bidirection RNN can take context from both the past and the future. </p>
<p><strong>Notation</strong>:</p>
<ul>
<li><p>Superscript $[l]$ denotes an object associated with the $l^{th}$ layer. </p>
<ul>
<li>Example: $a^{[4]}$ is the $4^{th}$ layer activation. $W^{[5]}$ and $b^{[5]}$ are the $5^{th}$ layer parameters.</li>
</ul>
</li>
<li><p>Superscript $(i)$ denotes an object associated with the $i^{th}$ example. </p>
<ul>
<li>Example: $x^{(i)}$ is the $i^{th}$ training example input.</li>
</ul>
</li>
<li><p>Superscript $\langle t \rangle$ denotes an object at the $t^{th}$ time-step. </p>
<ul>
<li>Example: $x^{\langle t \rangle}$ is the input x at the $t^{th}$ time-step. $x^{(i)\langle t \rangle}$ is the input at the $t^{th}$ timestep of example $i$.</li>
</ul>
</li>
<li><p>Lowerscript $i$ denotes the $i^{th}$ entry of a vector.</p>
<ul>
<li>Example: $a^{[l]}_i$ denotes the $i^{th}$ entry of the activations in layer $l$.</li>
</ul>
</li>
</ul>
<p>We assume that you are already familiar with <code>numpy</code> and/or have completed the previous courses of the specialization. Let’s get started!</p>
<p>Let’s first import all the packages that you will need during this assignment.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> rnn_utils <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure>
<h2 id="1-Forward-propagation-for-the-basic-Recurrent-Neural-Network"><a href="#1-Forward-propagation-for-the-basic-Recurrent-Neural-Network" class="headerlink" title="1 - Forward propagation for the basic Recurrent Neural Network"></a>1 - Forward propagation for the basic Recurrent Neural Network</h2><p>Later this week, you will generate music using an RNN. The basic RNN that you will implement has the structure below. In this example, $T_x = T_y$. </p>
<p><img src="images/RNN.png" style="width:500;height:300px;"></p>
<caption><center> **Figure 1**: Basic RNN model </center></caption>

<p>Here’s how you can implement an RNN: </p>
<p><strong>Steps</strong>:</p>
<ol>
<li>Implement the calculations needed for one time-step of the RNN.</li>
<li>Implement a loop over $T_x$ time-steps in order to process all the inputs, one at a time. </li>
</ol>
<p>Let’s go!</p>
<h2 id="1-1-RNN-cell"><a href="#1-1-RNN-cell" class="headerlink" title="1.1 - RNN cell"></a>1.1 - RNN cell</h2><p>A Recurrent neural network can be seen as the repetition of a single cell. You are first going to implement the computations for a single time-step. The following figure describes the operations for a single time-step of an RNN cell. </p>
<p><img src="images/rnn_step_forward.png" style="width:700px;height:300px;"></p>
<caption><center> **Figure 2**: Basic RNN cell. Takes as input $x^{\langle t \rangle}$ (current input) and $a^{\langle t - 1\rangle}$ (previous hidden state containing information from the past), and outputs $a^{\langle t \rangle}$ which is given to the next RNN cell and also used to predict $y^{\langle t \rangle}$ </center></caption>

<p><strong>Exercise</strong>: Implement the RNN-cell described in Figure (2).</p>
<p><strong>Instructions</strong>:</p>
<ol>
<li>Compute the hidden state with tanh activation: $a^{\langle t \rangle} = \tanh(W_{aa} a^{\langle t-1 \rangle} + W_{ax} x^{\langle t \rangle} + b_a)$.</li>
<li>Using your new hidden state $a^{\langle t \rangle}$, compute the prediction $\hat{y}^{\langle t \rangle} = softmax(W_{ya} a^{\langle t \rangle} + b_y)$. We provided you a function: <code>softmax</code>.</li>
<li>Store $(a^{\langle t \rangle}, a^{\langle t-1 \rangle}, x^{\langle t \rangle}, parameters)$ in cache</li>
<li>Return $a^{\langle t \rangle}$ , $y^{\langle t \rangle}$ and cache</li>
</ol>
<p>We will vectorize over $m$ examples. Thus, $x^{\langle t \rangle}$ will have dimension $(n_x,m)$, and $a^{\langle t \rangle}$ will have dimension $(n_a,m)$. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: rnn_cell_forward</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rnn_cell_forward</span><span class="params">(xt, a_prev, parameters)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Implements a single forward step of the RNN-cell as described in Figure (2)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    xt -- your input data at timestep "t", numpy array of shape (n_x, m).</span></span><br><span class="line"><span class="string">    a_prev -- Hidden state at timestep "t-1", numpy array of shape (n_a, m)</span></span><br><span class="line"><span class="string">    parameters -- python dictionary containing:</span></span><br><span class="line"><span class="string">                        Wax -- Weight matrix multiplying the input, numpy array of shape (n_a, n_x)</span></span><br><span class="line"><span class="string">                        Waa -- Weight matrix multiplying the hidden state, numpy array of shape (n_a, n_a)</span></span><br><span class="line"><span class="string">                        Wya -- Weight matrix relating the hidden-state to the output, numpy array of shape (n_y, n_a)</span></span><br><span class="line"><span class="string">                        ba --  Bias, numpy array of shape (n_a, 1)</span></span><br><span class="line"><span class="string">                        by -- Bias relating the hidden-state to the output, numpy array of shape (n_y, 1)</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    a_next -- next hidden state, of shape (n_a, m)</span></span><br><span class="line"><span class="string">    yt_pred -- prediction at timestep "t", numpy array of shape (n_y, m)</span></span><br><span class="line"><span class="string">    cache -- tuple of values needed for the backward pass, contains (a_next, a_prev, xt, parameters)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Retrieve parameters from "parameters"</span></span><br><span class="line">    Wax = parameters[<span class="string">"Wax"</span>]</span><br><span class="line">    Waa = parameters[<span class="string">"Waa"</span>]</span><br><span class="line">    Wya = parameters[<span class="string">"Wya"</span>]</span><br><span class="line">    ba = parameters[<span class="string">"ba"</span>]</span><br><span class="line">    by = parameters[<span class="string">"by"</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment">### START CODE HERE ### (≈2 lines)</span></span><br><span class="line">    <span class="comment"># compute next activation state using the formula given above</span></span><br><span class="line">    a_next = np.tanh(np.dot(Wax,xt) + np.dot(Waa,a_prev) + ba)</span><br><span class="line">    <span class="comment"># compute output of the current cell using the formula given above</span></span><br><span class="line">    yt_pred = softmax(np.dot(Wya,a_next)+by)</span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># store values you need for backward propagation in cache</span></span><br><span class="line">    cache = (a_next, a_prev, xt, parameters)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> a_next, yt_pred, cache</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.seed(<span class="number">1</span>)</span><br><span class="line">xt = np.random.randn(<span class="number">3</span>,<span class="number">10</span>)</span><br><span class="line">a_prev = np.random.randn(<span class="number">5</span>,<span class="number">10</span>)</span><br><span class="line">Waa = np.random.randn(<span class="number">5</span>,<span class="number">5</span>)</span><br><span class="line">Wax = np.random.randn(<span class="number">5</span>,<span class="number">3</span>)</span><br><span class="line">Wya = np.random.randn(<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line">ba = np.random.randn(<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line">by = np.random.randn(<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">parameters = &#123;<span class="string">"Waa"</span>: Waa, <span class="string">"Wax"</span>: Wax, <span class="string">"Wya"</span>: Wya, <span class="string">"ba"</span>: ba, <span class="string">"by"</span>: by&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a_next, yt_pred, cache = rnn_cell_forward(xt, a_prev, parameters)</span><br><span class="line">print(<span class="string">"a_next[4] = "</span>, a_next[<span class="number">4</span>])</span><br><span class="line">print(<span class="string">"a_next.shape = "</span>, a_next.shape)</span><br><span class="line">print(<span class="string">"yt_pred[1] ="</span>, yt_pred[<span class="number">0</span>])</span><br><span class="line">print(<span class="string">"yt_pred.shape = "</span>, yt_pred.shape)</span><br></pre></td></tr></table></figure>
<pre><code>a_next[4] =  [ 0.59584544  0.18141802  0.61311866  0.99808218  0.85016201  0.99980978
 -0.18887155  0.99815551  0.6531151   0.82872037]
a_next.shape =  (5, 10)
yt_pred[1] = [ 0.0111839   0.98317979  0.78859101  0.63182533  0.01011613  0.11054788
  0.63079776  0.0033688   0.0017441   0.82253474]
yt_pred.shape =  (2, 10)
</code></pre><h2 id="1-2-RNN-forward-pass"><a href="#1-2-RNN-forward-pass" class="headerlink" title="1.2 - RNN forward pass"></a>1.2 - RNN forward pass</h2><p>You can see an RNN as the repetition of the cell you’ve just built. If your input sequence of data is carried over 10 time steps, then you will copy the RNN cell 10 times. Each cell takes as input the hidden state from the previous cell ($a^{\langle t-1 \rangle}$) and the current time-step’s input data ($x^{\langle t \rangle}$). It outputs a hidden state ($a^{\langle t \rangle}$) and a prediction ($y^{\langle t \rangle}$) for this time-step.</p>
<p><img src="images/rnn_1.png" style="width:800px;height:300px;"></p>
<caption><center> **Figure 3**: Basic RNN. The input sequence $x = (x^{\langle 1 \rangle}, x^{\langle 2 \rangle}, ..., x^{\langle T_x \rangle})$  is carried over $T_x$ time steps. The network outputs $y = (y^{\langle 1 \rangle}, y^{\langle 2 \rangle}, ..., y^{\langle T_x \rangle})$. </center></caption>



<p><strong>Exercise</strong>: Code the forward propagation of the RNN described in Figure (3).</p>
<p><strong>Instructions</strong>:</p>
<ol>
<li>Create a vector of zeros ($a$) that will store all the hidden states computed by the RNN.</li>
<li>Initialize the “next” hidden state as $a_0$ (initial hidden state).</li>
<li>Start looping over each time step, your incremental index is $t$ :<ul>
<li>Update the “next” hidden state and the cache by running <code>rnn_cell_forward</code></li>
<li>Store the “next” hidden state in $a$ ($t^{th}$ position) </li>
<li>Store the prediction in y</li>
<li>Add the cache to the list of caches</li>
</ul>
</li>
<li>Return $a$, $y$ and caches</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: rnn_forward</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rnn_forward</span><span class="params">(x, a0, parameters)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Implement the forward propagation of the recurrent neural network described in Figure (3).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    x -- Input data for every time-step, of shape (n_x, m, T_x).</span></span><br><span class="line"><span class="string">    a0 -- Initial hidden state, of shape (n_a, m)</span></span><br><span class="line"><span class="string">    parameters -- python dictionary containing:</span></span><br><span class="line"><span class="string">                        Waa -- Weight matrix multiplying the hidden state, numpy array of shape (n_a, n_a)</span></span><br><span class="line"><span class="string">                        Wax -- Weight matrix multiplying the input, numpy array of shape (n_a, n_x)</span></span><br><span class="line"><span class="string">                        Wya -- Weight matrix relating the hidden-state to the output, numpy array of shape (n_y, n_a)</span></span><br><span class="line"><span class="string">                        ba --  Bias numpy array of shape (n_a, 1)</span></span><br><span class="line"><span class="string">                        by -- Bias relating the hidden-state to the output, numpy array of shape (n_y, 1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    a -- Hidden states for every time-step, numpy array of shape (n_a, m, T_x)</span></span><br><span class="line"><span class="string">    y_pred -- Predictions for every time-step, numpy array of shape (n_y, m, T_x)</span></span><br><span class="line"><span class="string">    caches -- tuple of values needed for the backward pass, contains (list of caches, x)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Initialize "caches" which will contain the list of all caches</span></span><br><span class="line">    caches = []</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Retrieve dimensions from shapes of x and parameters["Wya"]</span></span><br><span class="line">    n_x, m, T_x = x.shape</span><br><span class="line">    n_y, n_a = parameters[<span class="string">"Wya"</span>].shape</span><br><span class="line">    </span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># initialize "a" and "y" with zeros (≈2 lines)</span></span><br><span class="line">    a = np.zeros((n_a,m,T_x))  <span class="comment"># x -&gt; (n_x, m)   waa -&gt; (n_a,n_x)   a -&gt; (na,m)</span></span><br><span class="line">    y_pred = np.zeros((n_y,m,T_x)) <span class="comment"># hidden layer n_a, output layer n_y    Wya -&gt; (n_y,n_a)   y_pred -&gt; (n_y,m) </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Initialize a_next (≈1 line)</span></span><br><span class="line">    a_next = a0</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># loop over all time-steps</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> range(x.shape[<span class="number">2</span>]):</span><br><span class="line">        <span class="comment"># Update next hidden state, compute the prediction, get the cache (≈1 line)</span></span><br><span class="line">        a_next, yt_pred, cache = rnn_cell_forward(x[:,:,t], a_next, parameters)</span><br><span class="line">        <span class="comment"># Save the value of the new "next" hidden state in a (≈1 line)</span></span><br><span class="line">        a[:,:,t] = a_next</span><br><span class="line">        <span class="comment"># Save the value of the prediction in y (≈1 line)</span></span><br><span class="line">        y_pred[:,:,t] = yt_pred</span><br><span class="line">        <span class="comment"># Append "cache" to "caches" (≈1 line)</span></span><br><span class="line">        caches.append(cache)</span><br><span class="line">        </span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># store values needed for backward propagation in cache</span></span><br><span class="line">    caches = (caches, x)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> a, y_pred, caches</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.seed(<span class="number">1</span>)</span><br><span class="line">x = np.random.randn(<span class="number">3</span>,<span class="number">10</span>,<span class="number">4</span>)</span><br><span class="line">a0 = np.random.randn(<span class="number">5</span>,<span class="number">10</span>)</span><br><span class="line">Waa = np.random.randn(<span class="number">5</span>,<span class="number">5</span>)</span><br><span class="line">Wax = np.random.randn(<span class="number">5</span>,<span class="number">3</span>)</span><br><span class="line">Wya = np.random.randn(<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line">ba = np.random.randn(<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line">by = np.random.randn(<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">parameters = &#123;<span class="string">"Waa"</span>: Waa, <span class="string">"Wax"</span>: Wax, <span class="string">"Wya"</span>: Wya, <span class="string">"ba"</span>: ba, <span class="string">"by"</span>: by&#125;</span><br><span class="line"></span><br><span class="line">a, y_pred, caches = rnn_forward(x, a0, parameters)</span><br><span class="line">print(<span class="string">"a[4][1] = "</span>, a[<span class="number">4</span>][<span class="number">1</span>])</span><br><span class="line">print(<span class="string">"a.shape = "</span>, a.shape)</span><br><span class="line">print(<span class="string">"y_pred[1][3] ="</span>, y_pred[<span class="number">1</span>][<span class="number">3</span>])</span><br><span class="line">print(<span class="string">"y_pred.shape = "</span>, y_pred.shape)</span><br><span class="line">print(<span class="string">"caches[1][1][3] ="</span>, caches[<span class="number">1</span>][<span class="number">1</span>][<span class="number">3</span>])</span><br><span class="line">print(<span class="string">"len(caches) = "</span>, len(caches))</span><br></pre></td></tr></table></figure>
<pre><code>a[4][1] =  [-0.99999375  0.77911235 -0.99861469 -0.99833267]
a.shape =  (5, 10, 4)
y_pred[1][3] = [ 0.79560373  0.86224861  0.11118257  0.81515947]
y_pred.shape =  (2, 10, 4)
caches[1][1][3] = [-1.1425182  -0.34934272 -0.20889423  0.58662319]
len(caches) =  2
</code></pre><p>Congratulations! You’ve successfully built the forward propagation of a recurrent neural network from scratch. This will work well enough for some applications, but it suffers from vanishing gradient problems. So it works best when each output $y^{\langle t \rangle}$ can be estimated using mainly “local” context (meaning information from inputs $x^{\langle t’ \rangle}$ where $t’$ is not too far from $t$). </p>
<p>In the next part, you will build a more complex LSTM model, which is better at addressing vanishing gradients. The LSTM will be better able to remember a piece of information and keep it saved for many timesteps. </p>
<h2 id="2-Long-Short-Term-Memory-LSTM-network"><a href="#2-Long-Short-Term-Memory-LSTM-network" class="headerlink" title="2 - Long Short-Term Memory (LSTM) network"></a>2 - Long Short-Term Memory (LSTM) network</h2><p>This following figure shows the operations of an LSTM-cell.</p>
<p><img src="images/LSTM.png" style="width:500;height:400px;"></p>
<caption><center> **Figure 4**: LSTM-cell. This tracks and updates a "cell state" or memory variable $c^{\langle t \rangle}$ at every time-step, which can be different from $a^{\langle t \rangle}$. </center></caption>

<p>Similar to the RNN example above, you will start by implementing the LSTM cell for a single time-step. Then you can iteratively call it from inside a for-loop to have it process an input with $T_x$ time-steps. </p>
<h3 id="About-the-gates"><a href="#About-the-gates" class="headerlink" title="About the gates"></a>About the gates</h3><h4 id="Forget-gate"><a href="#Forget-gate" class="headerlink" title="- Forget gate"></a>- Forget gate</h4><p>For the sake of this illustration, lets assume we are reading words in a piece of text, and want use an LSTM to keep track of grammatical structures, such as whether the subject is singular or plural. If the subject changes from a singular word to a plural word, we need to find a way to get rid of our previously stored memory value of the singular/plural state. In an LSTM, the forget gate lets us do this: </p>
<script type="math/tex; mode=display">\Gamma_f^{\langle t \rangle} = \sigma(W_f[a^{\langle t-1 \rangle}, x^{\langle t \rangle}] + b_f)\tag{1}</script><p>Here, $W_f$ are weights that govern the forget gate’s behavior. We concatenate $[a^{\langle t-1 \rangle}, x^{\langle t \rangle}]$ and multiply by $W_f$. The equation above results in a vector $\Gamma_f^{\langle t \rangle}$ with values between 0 and 1. This forget gate vector will be multiplied element-wise by the previous cell state $c^{\langle t-1 \rangle}$. So if one of the values of $\Gamma_f^{\langle t \rangle}$ is 0 (or close to 0) then it means that the LSTM should remove that piece of information (e.g. the singular subject) in the corresponding component of $c^{\langle t-1 \rangle}$. If one of the values is 1, then it will keep the information. </p>
<h4 id="Update-gate"><a href="#Update-gate" class="headerlink" title="- Update gate"></a>- Update gate</h4><p>Once we forget that the subject being discussed is singular, we need to find a way to update it to reflect that the new subject is now plural. Here is the formulat for the update gate: </p>
<script type="math/tex; mode=display">\Gamma_u^{\langle t \rangle} = \sigma(W_u[a^{\langle t-1 \rangle}, x^{\{t\}}] + b_u)\tag{2}</script><p>Similar to the forget gate, here $\Gamma_u^{\langle t \rangle}$ is again a vector of values between 0 and 1. This will be multiplied element-wise with $\tilde{c}^{\langle t \rangle}$, in order to compute $c^{\langle t \rangle}$.</p>
<h4 id="Updating-the-cell"><a href="#Updating-the-cell" class="headerlink" title="- Updating the cell"></a>- Updating the cell</h4><p>To update the new subject we need to create a new vector of numbers that we can add to our previous cell state. The equation we use is: </p>
<script type="math/tex; mode=display">\tilde{c}^{\langle t \rangle} = \tanh(W_c[a^{\langle t-1 \rangle}, x^{\langle t \rangle}] + b_c)\tag{3}</script><p>Finally, the new cell state is: </p>
<script type="math/tex; mode=display">c^{\langle t \rangle} = \Gamma_f^{\langle t \rangle}* c^{\langle t-1 \rangle} + \Gamma_u^{\langle t \rangle} *\tilde{c}^{\langle t \rangle} \tag{4}</script><h4 id="Output-gate"><a href="#Output-gate" class="headerlink" title="- Output gate"></a>- Output gate</h4><p>To decide which outputs we will use, we will use the following two formulas: </p>
<script type="math/tex; mode=display">\Gamma_o^{\langle t \rangle}=  \sigma(W_o[a^{\langle t-1 \rangle}, x^{\langle t \rangle}] + b_o)\tag{5}</script><script type="math/tex; mode=display">a^{\langle t \rangle} = \Gamma_o^{\langle t \rangle}* \tanh(c^{\langle t \rangle})\tag{6}</script><p>Where in equation 5 you decide what to output using a sigmoid function and in equation 6 you multiply that by the $\tanh$ of the previous state. </p>
<h3 id="2-1-LSTM-cell"><a href="#2-1-LSTM-cell" class="headerlink" title="2.1 - LSTM cell"></a>2.1 - LSTM cell</h3><p><strong>Exercise</strong>: Implement the LSTM cell described in the Figure (3).</p>
<p><strong>Instructions</strong>:</p>
<ol>
<li>Concatenate $a^{\langle t-1 \rangle}$ and $x^{\langle t \rangle}$ in a single matrix: $concat = \begin{bmatrix} a^{\langle t-1 \rangle} \\ x^{\langle t \rangle} \end{bmatrix}$</li>
<li>Compute all the formulas 1-6. You can use <code>sigmoid()</code> (provided) and <code>np.tanh()</code>.</li>
<li>Compute the prediction $y^{\langle t \rangle}$. You can use <code>softmax()</code> (provided).</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: lstm_cell_forward</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lstm_cell_forward</span><span class="params">(xt, a_prev, c_prev, parameters)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Implement a single forward step of the LSTM-cell as described in Figure (4)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    xt -- your input data at timestep "t", numpy array of shape (n_x, m).</span></span><br><span class="line"><span class="string">    a_prev -- Hidden state at timestep "t-1", numpy array of shape (n_a, m)</span></span><br><span class="line"><span class="string">    c_prev -- Memory state at timestep "t-1", numpy array of shape (n_a, m)</span></span><br><span class="line"><span class="string">    parameters -- python dictionary containing:</span></span><br><span class="line"><span class="string">                        Wf -- Weight matrix of the forget gate, numpy array of shape (n_a, n_a + n_x)</span></span><br><span class="line"><span class="string">                        bf -- Bias of the forget gate, numpy array of shape (n_a, 1)</span></span><br><span class="line"><span class="string">                        Wi -- Weight matrix of the update gate, numpy array of shape (n_a, n_a + n_x)</span></span><br><span class="line"><span class="string">                        bi -- Bias of the update gate, numpy array of shape (n_a, 1)</span></span><br><span class="line"><span class="string">                        Wc -- Weight matrix of the first "tanh", numpy array of shape (n_a, n_a + n_x)</span></span><br><span class="line"><span class="string">                        bc --  Bias of the first "tanh", numpy array of shape (n_a, 1)</span></span><br><span class="line"><span class="string">                        Wo -- Weight matrix of the output gate, numpy array of shape (n_a, n_a + n_x)</span></span><br><span class="line"><span class="string">                        bo --  Bias of the output gate, numpy array of shape (n_a, 1)</span></span><br><span class="line"><span class="string">                        Wy -- Weight matrix relating the hidden-state to the output, numpy array of shape (n_y, n_a)</span></span><br><span class="line"><span class="string">                        by -- Bias relating the hidden-state to the output, numpy array of shape (n_y, 1)</span></span><br><span class="line"><span class="string">                        </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    a_next -- next hidden state, of shape (n_a, m)</span></span><br><span class="line"><span class="string">    c_next -- next memory state, of shape (n_a, m)</span></span><br><span class="line"><span class="string">    yt_pred -- prediction at timestep "t", numpy array of shape (n_y, m)</span></span><br><span class="line"><span class="string">    cache -- tuple of values needed for the backward pass, contains (a_next, c_next, a_prev, c_prev, xt, parameters)</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Note: ft/it/ot stand for the forget/update/output gates, cct stands for the candidate value (c tilde),</span></span><br><span class="line"><span class="string">          c stands for the memory value</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Retrieve parameters from "parameters"</span></span><br><span class="line">    Wf = parameters[<span class="string">"Wf"</span>]</span><br><span class="line">    bf = parameters[<span class="string">"bf"</span>]</span><br><span class="line">    Wi = parameters[<span class="string">"Wi"</span>]</span><br><span class="line">    bi = parameters[<span class="string">"bi"</span>]</span><br><span class="line">    Wc = parameters[<span class="string">"Wc"</span>]</span><br><span class="line">    bc = parameters[<span class="string">"bc"</span>]</span><br><span class="line">    Wo = parameters[<span class="string">"Wo"</span>]</span><br><span class="line">    bo = parameters[<span class="string">"bo"</span>]</span><br><span class="line">    Wy = parameters[<span class="string">"Wy"</span>]</span><br><span class="line">    by = parameters[<span class="string">"by"</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Retrieve dimensions from shapes of xt and Wy</span></span><br><span class="line">    n_x, m = xt.shape</span><br><span class="line">    n_y, n_a = Wy.shape</span><br><span class="line"></span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    <span class="comment"># Concatenate a_prev and xt (≈3 lines)</span></span><br><span class="line">    concat = np.zeros((a_prev.shape[<span class="number">0</span>] + xt.shape[<span class="number">0</span>],xt.shape[<span class="number">1</span>]))</span><br><span class="line">    concat[: n_a, :] = a_prev</span><br><span class="line">    concat[n_a :, :] = xt</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Compute values for ft, it, cct, c_next, ot, a_next using the formulas given figure (4) (≈6 lines)</span></span><br><span class="line">    ft = sigmoid(np.dot(Wf,concat) + bf)</span><br><span class="line">    it = sigmoid(np.dot(Wi,concat) + bi)</span><br><span class="line">    cct = np.tanh(np.dot(Wc,concat) + bc)</span><br><span class="line">    c_next = ft * c_prev + it * cct</span><br><span class="line">    ot = sigmoid(np.dot(Wo,concat) + bo)</span><br><span class="line">    a_next = ot * np.tanh(c_next)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Compute prediction of the LSTM cell (≈1 line)</span></span><br><span class="line">    yt_pred = softmax(np.dot(Wy,a_next)+ by)</span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># store values needed for backward propagation in cache</span></span><br><span class="line">    cache = (a_next, c_next, a_prev, c_prev, ft, it, cct, ot, xt, parameters)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a_next, c_next, yt_pred, cache</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.seed(<span class="number">1</span>)</span><br><span class="line">xt = np.random.randn(<span class="number">3</span>,<span class="number">10</span>)</span><br><span class="line">a_prev = np.random.randn(<span class="number">5</span>,<span class="number">10</span>)</span><br><span class="line">c_prev = np.random.randn(<span class="number">5</span>,<span class="number">10</span>)</span><br><span class="line">Wf = np.random.randn(<span class="number">5</span>, <span class="number">5</span>+<span class="number">3</span>)</span><br><span class="line">bf = np.random.randn(<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line">Wi = np.random.randn(<span class="number">5</span>, <span class="number">5</span>+<span class="number">3</span>)</span><br><span class="line">bi = np.random.randn(<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line">Wo = np.random.randn(<span class="number">5</span>, <span class="number">5</span>+<span class="number">3</span>)</span><br><span class="line">bo = np.random.randn(<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line">Wc = np.random.randn(<span class="number">5</span>, <span class="number">5</span>+<span class="number">3</span>)</span><br><span class="line">bc = np.random.randn(<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line">Wy = np.random.randn(<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line">by = np.random.randn(<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">parameters = &#123;<span class="string">"Wf"</span>: Wf, <span class="string">"Wi"</span>: Wi, <span class="string">"Wo"</span>: Wo, <span class="string">"Wc"</span>: Wc, <span class="string">"Wy"</span>: Wy, <span class="string">"bf"</span>: bf, <span class="string">"bi"</span>: bi, <span class="string">"bo"</span>: bo, <span class="string">"bc"</span>: bc, <span class="string">"by"</span>: by&#125;</span><br><span class="line"></span><br><span class="line">a_next, c_next, yt, cache = lstm_cell_forward(xt, a_prev, c_prev, parameters)</span><br><span class="line">print(<span class="string">"a_next[4] = "</span>, a_next[<span class="number">4</span>])</span><br><span class="line">print(<span class="string">"a_next.shape = "</span>, c_next.shape)</span><br><span class="line">print(<span class="string">"c_next[2] = "</span>, c_next[<span class="number">2</span>])</span><br><span class="line">print(<span class="string">"c_next.shape = "</span>, c_next.shape)</span><br><span class="line">print(<span class="string">"yt[1] ="</span>, yt[<span class="number">1</span>])</span><br><span class="line">print(<span class="string">"yt.shape = "</span>, yt.shape)</span><br><span class="line">print(<span class="string">"cache[1][3] ="</span>, cache[<span class="number">1</span>][<span class="number">3</span>])</span><br><span class="line">print(<span class="string">"len(cache) = "</span>, len(cache))</span><br></pre></td></tr></table></figure>
<pre><code>a_next[4] =  [-0.66408471  0.0036921   0.02088357  0.22834167 -0.85575339  0.00138482
  0.76566531  0.34631421 -0.00215674  0.43827275]
a_next.shape =  (5, 10)
c_next[2] =  [ 0.63267805  1.00570849  0.35504474  0.20690913 -1.64566718  0.11832942
  0.76449811 -0.0981561  -0.74348425 -0.26810932]
c_next.shape =  (5, 10)
yt[1] = [ 0.79913913  0.15986619  0.22412122  0.15606108  0.97057211  0.31146381
  0.00943007  0.12666353  0.39380172  0.07828381]
yt.shape =  (2, 10)
cache[1][3] = [-0.16263996  1.03729328  0.72938082 -0.54101719  0.02752074 -0.30821874
  0.07651101 -1.03752894  1.41219977 -0.37647422]
len(cache) =  10
</code></pre><h3 id="2-2-Forward-pass-for-LSTM"><a href="#2-2-Forward-pass-for-LSTM" class="headerlink" title="2.2 - Forward pass for LSTM"></a>2.2 - Forward pass for LSTM</h3><p>Now that you have implemented one step of an LSTM, you can now iterate this over this using a for-loop to process a sequence of $T_x$ inputs. </p>
<p><img src="images/LSTM_rnn.png" style="width:500;height:300px;"></p>
<caption><center> **Figure 4**: LSTM over multiple time-steps. </center></caption>

<p><strong>Exercise:</strong> Implement <code>lstm_forward()</code> to run an LSTM over $T_x$ time-steps. </p>
<p><strong>Note</strong>: $c^{\langle 0 \rangle}$ is initialized with zeros.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># GRADED FUNCTION: lstm_forward</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lstm_forward</span><span class="params">(x, a0, parameters)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Implement the forward propagation of the recurrent neural network using an LSTM-cell described in Figure (3).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    x -- Input data for every time-step, of shape (n_x, m, T_x).</span></span><br><span class="line"><span class="string">    a0 -- Initial hidden state, of shape (n_a, m)</span></span><br><span class="line"><span class="string">    parameters -- python dictionary containing:</span></span><br><span class="line"><span class="string">                        Wf -- Weight matrix of the forget gate, numpy array of shape (n_a, n_a + n_x)</span></span><br><span class="line"><span class="string">                        bf -- Bias of the forget gate, numpy array of shape (n_a, 1)</span></span><br><span class="line"><span class="string">                        Wi -- Weight matrix of the update gate, numpy array of shape (n_a, n_a + n_x)</span></span><br><span class="line"><span class="string">                        bi -- Bias of the update gate, numpy array of shape (n_a, 1)</span></span><br><span class="line"><span class="string">                        Wc -- Weight matrix of the first "tanh", numpy array of shape (n_a, n_a + n_x)</span></span><br><span class="line"><span class="string">                        bc -- Bias of the first "tanh", numpy array of shape (n_a, 1)</span></span><br><span class="line"><span class="string">                        Wo -- Weight matrix of the output gate, numpy array of shape (n_a, n_a + n_x)</span></span><br><span class="line"><span class="string">                        bo -- Bias of the output gate, numpy array of shape (n_a, 1)</span></span><br><span class="line"><span class="string">                        Wy -- Weight matrix relating the hidden-state to the output, numpy array of shape (n_y, n_a)</span></span><br><span class="line"><span class="string">                        by -- Bias relating the hidden-state to the output, numpy array of shape (n_y, 1)</span></span><br><span class="line"><span class="string">                        </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    a -- Hidden states for every time-step, numpy array of shape (n_a, m, T_x)</span></span><br><span class="line"><span class="string">    y -- Predictions for every time-step, numpy array of shape (n_y, m, T_x)</span></span><br><span class="line"><span class="string">    caches -- tuple of values needed for the backward pass, contains (list of all the caches, x)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Initialize "caches", which will track the list of all the caches</span></span><br><span class="line">    caches = []</span><br><span class="line">    </span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    <span class="comment"># Retrieve dimensions from shapes of x and parameters['Wy'] (≈2 lines)</span></span><br><span class="line">    n_x, m, T_x = x.shape</span><br><span class="line">    n_y, n_a = parameters[<span class="string">'Wy'</span>].shape</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># initialize "a", "c" and "y" with zeros (≈3 lines)</span></span><br><span class="line">    a = np.zeros((n_a, m, T_x))</span><br><span class="line">    c = np.zeros((n_a, m, T_x))</span><br><span class="line">    y = np.zeros((n_y, m, T_x))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Initialize a_next and c_next (≈2 lines)</span></span><br><span class="line">    a_next = a0</span><br><span class="line">    c_next = np.zeros(a0.shape)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># loop over all time-steps</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> range(T_x):</span><br><span class="line">        <span class="comment"># Update next hidden state, next memory state, compute the prediction, get the cache (≈1 line)</span></span><br><span class="line">        a_next, c_next, yt, cache = lstm_cell_forward(x[:,:,t], a_next, c_next, parameters)</span><br><span class="line">        <span class="comment"># Save the value of the new "next" hidden state in a (≈1 line)</span></span><br><span class="line">        a[:,:,t] = a_next</span><br><span class="line">        <span class="comment"># Save the value of the prediction in y (≈1 line)</span></span><br><span class="line">        y[:,:,t] = yt</span><br><span class="line">        <span class="comment"># Save the value of the next cell state (≈1 line)</span></span><br><span class="line">        c[:,:,t]  = c_next</span><br><span class="line">        <span class="comment"># Append the cache into caches (≈1 line)</span></span><br><span class="line">        caches.append(cache)</span><br><span class="line">        </span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># store values needed for backward propagation in cache</span></span><br><span class="line">    caches = (caches, x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a, y, c, caches</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.seed(<span class="number">1</span>)</span><br><span class="line">x = np.random.randn(<span class="number">3</span>,<span class="number">10</span>,<span class="number">7</span>)</span><br><span class="line">a0 = np.random.randn(<span class="number">5</span>,<span class="number">10</span>)</span><br><span class="line">Wf = np.random.randn(<span class="number">5</span>, <span class="number">5</span>+<span class="number">3</span>)</span><br><span class="line">bf = np.random.randn(<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line">Wi = np.random.randn(<span class="number">5</span>, <span class="number">5</span>+<span class="number">3</span>)</span><br><span class="line">bi = np.random.randn(<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line">Wo = np.random.randn(<span class="number">5</span>, <span class="number">5</span>+<span class="number">3</span>)</span><br><span class="line">bo = np.random.randn(<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line">Wc = np.random.randn(<span class="number">5</span>, <span class="number">5</span>+<span class="number">3</span>)</span><br><span class="line">bc = np.random.randn(<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line">Wy = np.random.randn(<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line">by = np.random.randn(<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">parameters = &#123;<span class="string">"Wf"</span>: Wf, <span class="string">"Wi"</span>: Wi, <span class="string">"Wo"</span>: Wo, <span class="string">"Wc"</span>: Wc, <span class="string">"Wy"</span>: Wy, <span class="string">"bf"</span>: bf, <span class="string">"bi"</span>: bi, <span class="string">"bo"</span>: bo, <span class="string">"bc"</span>: bc, <span class="string">"by"</span>: by&#125;</span><br><span class="line"></span><br><span class="line">a, y, c, caches = lstm_forward(x, a0, parameters)</span><br><span class="line">print(<span class="string">"a[4][3][6] = "</span>, a[<span class="number">4</span>][<span class="number">3</span>][<span class="number">6</span>])</span><br><span class="line">print(<span class="string">"a.shape = "</span>, a.shape)</span><br><span class="line">print(<span class="string">"y[1][4][3] ="</span>, y[<span class="number">1</span>][<span class="number">4</span>][<span class="number">3</span>])</span><br><span class="line">print(<span class="string">"y.shape = "</span>, y.shape)</span><br><span class="line">print(<span class="string">"caches[1][1[1]] ="</span>, caches[<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>])</span><br><span class="line">print(<span class="string">"c[1][2][1]"</span>, c[<span class="number">1</span>][<span class="number">2</span>][<span class="number">1</span>])</span><br><span class="line">print(<span class="string">"len(caches) = "</span>, len(caches))</span><br></pre></td></tr></table></figure>
<pre><code>a[4][3][6] =  0.172117767533
a.shape =  (5, 10, 7)
y[1][4][3] = 0.95087346185
y.shape =  (2, 10, 7)
caches[1][1[1]] = [ 0.82797464  0.23009474  0.76201118 -0.22232814 -0.20075807  0.18656139
  0.41005165]
c[1][2][1] -0.855544916718
len(caches) =  2
</code></pre><p>Congratulations! You have now implemented the forward passes for the basic RNN and the LSTM. When using a deep learning framework, implementing the forward pass is sufficient to build systems that achieve great performance. </p>
<p>The rest of this notebook is optional, and will not be graded.</p>
<h2 id="3-Backpropagation-in-recurrent-neural-networks-OPTIONAL-UNGRADED"><a href="#3-Backpropagation-in-recurrent-neural-networks-OPTIONAL-UNGRADED" class="headerlink" title="3 - Backpropagation in recurrent neural networks (OPTIONAL / UNGRADED)"></a>3 - Backpropagation in recurrent neural networks (OPTIONAL / UNGRADED)</h2><p>In modern deep learning frameworks, you only have to implement the forward pass, and the framework takes care of the backward pass, so most deep learning engineers do not need to bother with the details of the backward pass. If however you are an expert in calculus and want to see the details of backprop in RNNs, you can work through this optional portion of the notebook. </p>
<p>When in an earlier course you implemented a simple (fully connected) neural network, you used backpropagation to compute the derivatives with respect to the cost to update the parameters. Similarly, in recurrent neural networks you can to calculate the derivatives with respect to the cost in order to update the parameters. The backprop equations are quite complicated and we did not derive them in lecture. However, we will briefly present them below. </p>
<h3 id="3-1-Basic-RNN-backward-pass"><a href="#3-1-Basic-RNN-backward-pass" class="headerlink" title="3.1 - Basic RNN  backward pass"></a>3.1 - Basic RNN  backward pass</h3><p>We will start by computing the backward pass for the basic RNN-cell.</p>
<p><img src="images/rnn_cell_backprop.png" style="width:500;height:300px;"> <br></p>
<caption><center> **Figure 5**: RNN-cell's backward pass. Just like in a fully-connected neural network, the derivative of the cost function $J$ backpropagates through the RNN by following the chain-rule from calculas. The chain-rule is also used to calculate $(\frac{\partial J}{\partial W_{ax}},\frac{\partial J}{\partial W_{aa}},\frac{\partial J}{\partial b})$ to update the parameters $(W_{ax}, W_{aa}, b_a)$. </center></caption>

<h4 id="Deriving-the-one-step-backward-functions"><a href="#Deriving-the-one-step-backward-functions" class="headerlink" title="Deriving the one step backward functions:"></a>Deriving the one step backward functions:</h4><p>To compute the <code>rnn_cell_backward</code> you need to compute the following equations. It is a good exercise to derive them by hand. </p>
<p>The derivative of $\tanh$ is $1-\tanh(x)^2$. You can find the complete proof <a href="https://www.wyzant.com/resources/lessons/math/calculus/derivative_proofs/tanx" target="_blank" rel="noopener">here</a>. Note that: $ \text{sech}(x)^2 = 1 - \tanh(x)^2$</p>
<p>Similarly for $\frac{ \partial a^{\langle t \rangle} } {\partial W_{ax}}, \frac{ \partial a^{\langle t \rangle} } {\partial W_{aa}},  \frac{ \partial a^{\langle t \rangle} } {\partial b}$, the derivative of  $\tanh(u)$ is $(1-\tanh(u)^2)du$. </p>
<p>The final two equations also follow same rule and are derived using the $\tanh$ derivative. Note that the arrangement is done in a way to get the same dimensions to match.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rnn_cell_backward</span><span class="params">(da_next, cache)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Implements the backward pass for the RNN-cell (single time-step).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    da_next -- Gradient of loss with respect to next hidden state</span></span><br><span class="line"><span class="string">    cache -- python dictionary containing useful values (output of rnn_cell_forward())</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    gradients -- python dictionary containing:</span></span><br><span class="line"><span class="string">                        dx -- Gradients of input data, of shape (n_x, m)</span></span><br><span class="line"><span class="string">                        da_prev -- Gradients of previous hidden state, of shape (n_a, m)</span></span><br><span class="line"><span class="string">                        dWax -- Gradients of input-to-hidden weights, of shape (n_a, n_x)</span></span><br><span class="line"><span class="string">                        dWaa -- Gradients of hidden-to-hidden weights, of shape (n_a, n_a)</span></span><br><span class="line"><span class="string">                        dba -- Gradients of bias vector, of shape (n_a, 1)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Retrieve values from cache</span></span><br><span class="line">    (a_next, a_prev, xt, parameters) = cache</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Retrieve values from parameters</span></span><br><span class="line">    Wax = parameters[<span class="string">"Wax"</span>]</span><br><span class="line">    Waa = parameters[<span class="string">"Waa"</span>]</span><br><span class="line">    Wya = parameters[<span class="string">"Wya"</span>]</span><br><span class="line">    ba = parameters[<span class="string">"ba"</span>]</span><br><span class="line">    by = parameters[<span class="string">"by"</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    <span class="comment"># compute the gradient of tanh with respect to a_next (≈1 line)</span></span><br><span class="line">    dtanh = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># compute the gradient of the loss with respect to Wax (≈2 lines)</span></span><br><span class="line">    dxt = <span class="keyword">None</span></span><br><span class="line">    dWax = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># compute the gradient with respect to Waa (≈2 lines)</span></span><br><span class="line">    da_prev = <span class="keyword">None</span></span><br><span class="line">    dWaa = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># compute the gradient with respect to b (≈1 line)</span></span><br><span class="line">    dba = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Store the gradients in a python dictionary</span></span><br><span class="line">    gradients = &#123;<span class="string">"dxt"</span>: dxt, <span class="string">"da_prev"</span>: da_prev, <span class="string">"dWax"</span>: dWax, <span class="string">"dWaa"</span>: dWaa, <span class="string">"dba"</span>: dba&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> gradients</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.seed(<span class="number">1</span>)</span><br><span class="line">xt = np.random.randn(<span class="number">3</span>,<span class="number">10</span>)</span><br><span class="line">a_prev = np.random.randn(<span class="number">5</span>,<span class="number">10</span>)</span><br><span class="line">Wax = np.random.randn(<span class="number">5</span>,<span class="number">3</span>)</span><br><span class="line">Waa = np.random.randn(<span class="number">5</span>,<span class="number">5</span>)</span><br><span class="line">Wya = np.random.randn(<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line">b = np.random.randn(<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line">by = np.random.randn(<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">parameters = &#123;<span class="string">"Wax"</span>: Wax, <span class="string">"Waa"</span>: Waa, <span class="string">"Wya"</span>: Wya, <span class="string">"ba"</span>: ba, <span class="string">"by"</span>: by&#125;</span><br><span class="line"></span><br><span class="line">a_next, yt, cache = rnn_cell_forward(xt, a_prev, parameters)</span><br><span class="line"></span><br><span class="line">da_next = np.random.randn(<span class="number">5</span>,<span class="number">10</span>)</span><br><span class="line">gradients = rnn_cell_backward(da_next, cache)</span><br><span class="line">print(<span class="string">"gradients[\"dxt\"][1][2] ="</span>, gradients[<span class="string">"dxt"</span>][<span class="number">1</span>][<span class="number">2</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dxt\"].shape ="</span>, gradients[<span class="string">"dxt"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"da_prev\"][2][3] ="</span>, gradients[<span class="string">"da_prev"</span>][<span class="number">2</span>][<span class="number">3</span>])</span><br><span class="line">print(<span class="string">"gradients[\"da_prev\"].shape ="</span>, gradients[<span class="string">"da_prev"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dWax\"][3][1] ="</span>, gradients[<span class="string">"dWax"</span>][<span class="number">3</span>][<span class="number">1</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dWax\"].shape ="</span>, gradients[<span class="string">"dWax"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dWaa\"][1][2] ="</span>, gradients[<span class="string">"dWaa"</span>][<span class="number">1</span>][<span class="number">2</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dWaa\"].shape ="</span>, gradients[<span class="string">"dWaa"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dba\"][4] ="</span>, gradients[<span class="string">"dba"</span>][<span class="number">4</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dba\"].shape ="</span>, gradients[<span class="string">"dba"</span>].shape)</span><br></pre></td></tr></table></figure>
<h4 id="Backward-pass-through-the-RNN"><a href="#Backward-pass-through-the-RNN" class="headerlink" title="Backward pass through the RNN"></a>Backward pass through the RNN</h4><p>Computing the gradients of the cost with respect to $a^{\langle t \rangle}$ at every time-step $t$ is useful because it is what helps the gradient backpropagate to the previous RNN-cell. To do so, you need to iterate through all the time steps starting at the end, and at each step, you increment the overall $db_a$, $dW_{aa}$, $dW_{ax}$ and you store $dx$.</p>
<p><strong>Instructions</strong>:</p>
<p>Implement the <code>rnn_backward</code> function. Initialize the return variables with zeros first and then loop through all the time steps while calling the <code>rnn_cell_backward</code> at each time timestep, update the other variables accordingly.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rnn_backward</span><span class="params">(da, caches)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Implement the backward pass for a RNN over an entire sequence of input data.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    da -- Upstream gradients of all hidden states, of shape (n_a, m, T_x)</span></span><br><span class="line"><span class="string">    caches -- tuple containing information from the forward pass (rnn_forward)</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    gradients -- python dictionary containing:</span></span><br><span class="line"><span class="string">                        dx -- Gradient w.r.t. the input data, numpy-array of shape (n_x, m, T_x)</span></span><br><span class="line"><span class="string">                        da0 -- Gradient w.r.t the initial hidden state, numpy-array of shape (n_a, m)</span></span><br><span class="line"><span class="string">                        dWax -- Gradient w.r.t the input's weight matrix, numpy-array of shape (n_a, n_x)</span></span><br><span class="line"><span class="string">                        dWaa -- Gradient w.r.t the hidden state's weight matrix, numpy-arrayof shape (n_a, n_a)</span></span><br><span class="line"><span class="string">                        dba -- Gradient w.r.t the bias, of shape (n_a, 1)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Retrieve values from the first cache (t=1) of caches (≈2 lines)</span></span><br><span class="line">    (caches, x) = <span class="keyword">None</span></span><br><span class="line">    (a1, a0, x1, parameters) = <span class="keyword">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Retrieve dimensions from da's and x1's shapes (≈2 lines)</span></span><br><span class="line">    n_a, m, T_x = <span class="keyword">None</span></span><br><span class="line">    n_x, m = <span class="keyword">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># initialize the gradients with the right sizes (≈6 lines)</span></span><br><span class="line">    dx = <span class="keyword">None</span></span><br><span class="line">    dWax = <span class="keyword">None</span></span><br><span class="line">    dWaa = <span class="keyword">None</span></span><br><span class="line">    dba = <span class="keyword">None</span></span><br><span class="line">    da0 = <span class="keyword">None</span></span><br><span class="line">    da_prevt = <span class="keyword">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Loop through all the time steps</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> reversed(range(<span class="keyword">None</span>)):</span><br><span class="line">        <span class="comment"># Compute gradients at time step t. Choose wisely the "da_next" and the "cache" to use in the backward propagation step. (≈1 line)</span></span><br><span class="line">        gradients = <span class="keyword">None</span></span><br><span class="line">        <span class="comment"># Retrieve derivatives from gradients (≈ 1 line)</span></span><br><span class="line">        dxt, da_prevt, dWaxt, dWaat, dbat = gradients[<span class="string">"dxt"</span>], gradients[<span class="string">"da_prev"</span>], gradients[<span class="string">"dWax"</span>], gradients[<span class="string">"dWaa"</span>], gradients[<span class="string">"dba"</span>]</span><br><span class="line">        <span class="comment"># Increment global derivatives w.r.t parameters by adding their derivative at time-step t (≈4 lines)</span></span><br><span class="line">        dx[:, :, t] = <span class="keyword">None</span></span><br><span class="line">        dWax += <span class="keyword">None</span></span><br><span class="line">        dWaa += <span class="keyword">None</span></span><br><span class="line">        dba += <span class="keyword">None</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment"># Set da0 to the gradient of a which has been backpropagated through all time-steps (≈1 line) </span></span><br><span class="line">    da0 = <span class="keyword">None</span></span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Store the gradients in a python dictionary</span></span><br><span class="line">    gradients = &#123;<span class="string">"dx"</span>: dx, <span class="string">"da0"</span>: da0, <span class="string">"dWax"</span>: dWax, <span class="string">"dWaa"</span>: dWaa,<span class="string">"dba"</span>: dba&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> gradients</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.seed(<span class="number">1</span>)</span><br><span class="line">x = np.random.randn(<span class="number">3</span>,<span class="number">10</span>,<span class="number">4</span>)</span><br><span class="line">a0 = np.random.randn(<span class="number">5</span>,<span class="number">10</span>)</span><br><span class="line">Wax = np.random.randn(<span class="number">5</span>,<span class="number">3</span>)</span><br><span class="line">Waa = np.random.randn(<span class="number">5</span>,<span class="number">5</span>)</span><br><span class="line">Wya = np.random.randn(<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line">ba = np.random.randn(<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line">by = np.random.randn(<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">parameters = &#123;<span class="string">"Wax"</span>: Wax, <span class="string">"Waa"</span>: Waa, <span class="string">"Wya"</span>: Wya, <span class="string">"ba"</span>: ba, <span class="string">"by"</span>: by&#125;</span><br><span class="line">a, y, caches = rnn_forward(x, a0, parameters)</span><br><span class="line">da = np.random.randn(<span class="number">5</span>, <span class="number">10</span>, <span class="number">4</span>)</span><br><span class="line">gradients = rnn_backward(da, caches)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"gradients[\"dx\"][1][2] ="</span>, gradients[<span class="string">"dx"</span>][<span class="number">1</span>][<span class="number">2</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dx\"].shape ="</span>, gradients[<span class="string">"dx"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"da0\"][2][3] ="</span>, gradients[<span class="string">"da0"</span>][<span class="number">2</span>][<span class="number">3</span>])</span><br><span class="line">print(<span class="string">"gradients[\"da0\"].shape ="</span>, gradients[<span class="string">"da0"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dWax\"][3][1] ="</span>, gradients[<span class="string">"dWax"</span>][<span class="number">3</span>][<span class="number">1</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dWax\"].shape ="</span>, gradients[<span class="string">"dWax"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dWaa\"][1][2] ="</span>, gradients[<span class="string">"dWaa"</span>][<span class="number">1</span>][<span class="number">2</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dWaa\"].shape ="</span>, gradients[<span class="string">"dWaa"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dba\"][4] ="</span>, gradients[<span class="string">"dba"</span>][<span class="number">4</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dba\"].shape ="</span>, gradients[<span class="string">"dba"</span>].shape)</span><br></pre></td></tr></table></figure>
<h2 id="3-2-LSTM-backward-pass"><a href="#3-2-LSTM-backward-pass" class="headerlink" title="3.2 - LSTM backward pass"></a>3.2 - LSTM backward pass</h2><h3 id="3-2-1-One-Step-backward"><a href="#3-2-1-One-Step-backward" class="headerlink" title="3.2.1 One Step backward"></a>3.2.1 One Step backward</h3><p>The LSTM backward pass is slighltly more complicated than the forward one. We have provided you with all the equations for the LSTM backward pass below. (If you enjoy calculus exercises feel free to try deriving these from scratch yourself.) </p>
<h3 id="3-2-2-gate-derivatives"><a href="#3-2-2-gate-derivatives" class="headerlink" title="3.2.2 gate derivatives"></a>3.2.2 gate derivatives</h3><script type="math/tex; mode=display">d \Gamma_o^{\langle t \rangle} = da_{next}*\tanh(c_{next}) * \Gamma_o^{\langle t \rangle}*(1-\Gamma_o^{\langle t \rangle})\tag{7}</script><script type="math/tex; mode=display">d\tilde c^{\langle t \rangle} = dc_{next}*\Gamma_u^{\langle t \rangle}+ \Gamma_o^{\langle t \rangle} (1-\tanh(c_{next})^2) * i_t * da_{next} * \tilde c^{\langle t \rangle} * (1-\tanh(\tilde c)^2) \tag{8}</script><script type="math/tex; mode=display">d\Gamma_u^{\langle t \rangle} = dc_{next}*\tilde c^{\langle t \rangle} + \Gamma_o^{\langle t \rangle} (1-\tanh(c_{next})^2) * \tilde c^{\langle t \rangle} * da_{next}*\Gamma_u^{\langle t \rangle}*(1-\Gamma_u^{\langle t \rangle})\tag{9}</script><script type="math/tex; mode=display">d\Gamma_f^{\langle t \rangle} = dc_{next}*\tilde c_{prev} + \Gamma_o^{\langle t \rangle} (1-\tanh(c_{next})^2) * c_{prev} * da_{next}*\Gamma_f^{\langle t \rangle}*(1-\Gamma_f^{\langle t \rangle})\tag{10}</script><h3 id="3-2-3-parameter-derivatives"><a href="#3-2-3-parameter-derivatives" class="headerlink" title="3.2.3 parameter derivatives"></a>3.2.3 parameter derivatives</h3><script type="math/tex; mode=display">dW_f = d\Gamma_f^{\langle t \rangle} * \begin{pmatrix} a_{prev} \\ x_t\end{pmatrix}^T \tag{11}</script><script type="math/tex; mode=display">dW_u = d\Gamma_u^{\langle t \rangle} * \begin{pmatrix} a_{prev} \\ x_t\end{pmatrix}^T \tag{12}</script><script type="math/tex; mode=display">dW_c = d\tilde c^{\langle t \rangle} * \begin{pmatrix} a_{prev} \\ x_t\end{pmatrix}^T \tag{13}</script><script type="math/tex; mode=display">dW_o = d\Gamma_o^{\langle t \rangle} * \begin{pmatrix} a_{prev} \\ x_t\end{pmatrix}^T \tag{14}</script><p>To calculate $db_f, db_u, db_c, db_o$ you just need to sum across the horizontal (axis= 1) axis on $d\Gamma_f^{\langle t \rangle}, d\Gamma_u^{\langle t \rangle}, d\tilde c^{\langle t \rangle}, d\Gamma_o^{\langle t \rangle}$ respectively. Note that you should have the <code>keep_dims = True</code> option.</p>
<p>Finally, you will compute the derivative with respect to the previous hidden state, previous memory state, and input.</p>
<script type="math/tex; mode=display">da_{prev} = W_f^T*d\Gamma_f^{\langle t \rangle} + W_u^T * d\Gamma_u^{\langle t \rangle}+ W_c^T * d\tilde c^{\langle t \rangle} + W_o^T * d\Gamma_o^{\langle t \rangle} \tag{15}</script><p>Here, the weights for equations 13 are the first n_a, (i.e. $W_f = W_f[:n_a,:]$ etc…)</p>
<script type="math/tex; mode=display">dc_{prev} = dc_{next}\Gamma_f^{\langle t \rangle} + \Gamma_o^{\langle t \rangle} * (1- \tanh(c_{next})^2)*\Gamma_f^{\langle t \rangle}*da_{next} \tag{16}</script><script type="math/tex; mode=display">dx^{\langle t \rangle} = W_f^T*d\Gamma_f^{\langle t \rangle} + W_u^T * d\Gamma_u^{\langle t \rangle}+ W_c^T * d\tilde c_t + W_o^T * d\Gamma_o^{\langle t \rangle}\tag{17}</script><p>where the weights for equation 15 are from n_a to the end, (i.e. $W_f = W_f[n_a:,:]$ etc…)</p>
<p><strong>Exercise:</strong> Implement <code>lstm_cell_backward</code> by implementing equations $7-17$ below. Good luck! :)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lstm_cell_backward</span><span class="params">(da_next, dc_next, cache)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Implement the backward pass for the LSTM-cell (single time-step).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    da_next -- Gradients of next hidden state, of shape (n_a, m)</span></span><br><span class="line"><span class="string">    dc_next -- Gradients of next cell state, of shape (n_a, m)</span></span><br><span class="line"><span class="string">    cache -- cache storing information from the forward pass</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    gradients -- python dictionary containing:</span></span><br><span class="line"><span class="string">                        dxt -- Gradient of input data at time-step t, of shape (n_x, m)</span></span><br><span class="line"><span class="string">                        da_prev -- Gradient w.r.t. the previous hidden state, numpy array of shape (n_a, m)</span></span><br><span class="line"><span class="string">                        dc_prev -- Gradient w.r.t. the previous memory state, of shape (n_a, m, T_x)</span></span><br><span class="line"><span class="string">                        dWf -- Gradient w.r.t. the weight matrix of the forget gate, numpy array of shape (n_a, n_a + n_x)</span></span><br><span class="line"><span class="string">                        dWi -- Gradient w.r.t. the weight matrix of the update gate, numpy array of shape (n_a, n_a + n_x)</span></span><br><span class="line"><span class="string">                        dWc -- Gradient w.r.t. the weight matrix of the memory gate, numpy array of shape (n_a, n_a + n_x)</span></span><br><span class="line"><span class="string">                        dWo -- Gradient w.r.t. the weight matrix of the output gate, numpy array of shape (n_a, n_a + n_x)</span></span><br><span class="line"><span class="string">                        dbf -- Gradient w.r.t. biases of the forget gate, of shape (n_a, 1)</span></span><br><span class="line"><span class="string">                        dbi -- Gradient w.r.t. biases of the update gate, of shape (n_a, 1)</span></span><br><span class="line"><span class="string">                        dbc -- Gradient w.r.t. biases of the memory gate, of shape (n_a, 1)</span></span><br><span class="line"><span class="string">                        dbo -- Gradient w.r.t. biases of the output gate, of shape (n_a, 1)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Retrieve information from "cache"</span></span><br><span class="line">    (a_next, c_next, a_prev, c_prev, ft, it, cct, ot, xt, parameters) = cache</span><br><span class="line">    </span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    <span class="comment"># Retrieve dimensions from xt's and a_next's shape (≈2 lines)</span></span><br><span class="line">    n_x, m = <span class="keyword">None</span></span><br><span class="line">    n_a, m = <span class="keyword">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Compute gates related derivatives, you can find their values can be found by looking carefully at equations (7) to (10) (≈4 lines)</span></span><br><span class="line">    dot = <span class="keyword">None</span></span><br><span class="line">    dcct = <span class="keyword">None</span></span><br><span class="line">    dit = <span class="keyword">None</span></span><br><span class="line">    dft = <span class="keyword">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Code equations (7) to (10) (≈4 lines)</span></span><br><span class="line">    dit = <span class="keyword">None</span></span><br><span class="line">    dft = <span class="keyword">None</span></span><br><span class="line">    dot = <span class="keyword">None</span></span><br><span class="line">    dcct = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Compute parameters related derivatives. Use equations (11)-(14) (≈8 lines)</span></span><br><span class="line">    dWf = <span class="keyword">None</span></span><br><span class="line">    dWi = <span class="keyword">None</span></span><br><span class="line">    dWc = <span class="keyword">None</span></span><br><span class="line">    dWo = <span class="keyword">None</span></span><br><span class="line">    dbf = <span class="keyword">None</span></span><br><span class="line">    dbi = <span class="keyword">None</span></span><br><span class="line">    dbc = <span class="keyword">None</span></span><br><span class="line">    dbo = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Compute derivatives w.r.t previous hidden state, previous memory state and input. Use equations (15)-(17). (≈3 lines)</span></span><br><span class="line">    da_prev = <span class="keyword">None</span></span><br><span class="line">    dc_prev = <span class="keyword">None</span></span><br><span class="line">    dxt = <span class="keyword">None</span></span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Save gradients in dictionary</span></span><br><span class="line">    gradients = &#123;<span class="string">"dxt"</span>: dxt, <span class="string">"da_prev"</span>: da_prev, <span class="string">"dc_prev"</span>: dc_prev, <span class="string">"dWf"</span>: dWf,<span class="string">"dbf"</span>: dbf, <span class="string">"dWi"</span>: dWi,<span class="string">"dbi"</span>: dbi,</span><br><span class="line">                <span class="string">"dWc"</span>: dWc,<span class="string">"dbc"</span>: dbc, <span class="string">"dWo"</span>: dWo,<span class="string">"dbo"</span>: dbo&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> gradients</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.seed(<span class="number">1</span>)</span><br><span class="line">xt = np.random.randn(<span class="number">3</span>,<span class="number">10</span>)</span><br><span class="line">a_prev = np.random.randn(<span class="number">5</span>,<span class="number">10</span>)</span><br><span class="line">c_prev = np.random.randn(<span class="number">5</span>,<span class="number">10</span>)</span><br><span class="line">Wf = np.random.randn(<span class="number">5</span>, <span class="number">5</span>+<span class="number">3</span>)</span><br><span class="line">bf = np.random.randn(<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line">Wi = np.random.randn(<span class="number">5</span>, <span class="number">5</span>+<span class="number">3</span>)</span><br><span class="line">bi = np.random.randn(<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line">Wo = np.random.randn(<span class="number">5</span>, <span class="number">5</span>+<span class="number">3</span>)</span><br><span class="line">bo = np.random.randn(<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line">Wc = np.random.randn(<span class="number">5</span>, <span class="number">5</span>+<span class="number">3</span>)</span><br><span class="line">bc = np.random.randn(<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line">Wy = np.random.randn(<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line">by = np.random.randn(<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">parameters = &#123;<span class="string">"Wf"</span>: Wf, <span class="string">"Wi"</span>: Wi, <span class="string">"Wo"</span>: Wo, <span class="string">"Wc"</span>: Wc, <span class="string">"Wy"</span>: Wy, <span class="string">"bf"</span>: bf, <span class="string">"bi"</span>: bi, <span class="string">"bo"</span>: bo, <span class="string">"bc"</span>: bc, <span class="string">"by"</span>: by&#125;</span><br><span class="line"></span><br><span class="line">a_next, c_next, yt, cache = lstm_cell_forward(xt, a_prev, c_prev, parameters)</span><br><span class="line"></span><br><span class="line">da_next = np.random.randn(<span class="number">5</span>,<span class="number">10</span>)</span><br><span class="line">dc_next = np.random.randn(<span class="number">5</span>,<span class="number">10</span>)</span><br><span class="line">gradients = lstm_cell_backward(da_next, dc_next, cache)</span><br><span class="line">print(<span class="string">"gradients[\"dxt\"][1][2] ="</span>, gradients[<span class="string">"dxt"</span>][<span class="number">1</span>][<span class="number">2</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dxt\"].shape ="</span>, gradients[<span class="string">"dxt"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"da_prev\"][2][3] ="</span>, gradients[<span class="string">"da_prev"</span>][<span class="number">2</span>][<span class="number">3</span>])</span><br><span class="line">print(<span class="string">"gradients[\"da_prev\"].shape ="</span>, gradients[<span class="string">"da_prev"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dc_prev\"][2][3] ="</span>, gradients[<span class="string">"dc_prev"</span>][<span class="number">2</span>][<span class="number">3</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dc_prev\"].shape ="</span>, gradients[<span class="string">"dc_prev"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dWf\"][3][1] ="</span>, gradients[<span class="string">"dWf"</span>][<span class="number">3</span>][<span class="number">1</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dWf\"].shape ="</span>, gradients[<span class="string">"dWf"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dWi\"][1][2] ="</span>, gradients[<span class="string">"dWi"</span>][<span class="number">1</span>][<span class="number">2</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dWi\"].shape ="</span>, gradients[<span class="string">"dWi"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dWc\"][3][1] ="</span>, gradients[<span class="string">"dWc"</span>][<span class="number">3</span>][<span class="number">1</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dWc\"].shape ="</span>, gradients[<span class="string">"dWc"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dWo\"][1][2] ="</span>, gradients[<span class="string">"dWo"</span>][<span class="number">1</span>][<span class="number">2</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dWo\"].shape ="</span>, gradients[<span class="string">"dWo"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dbf\"][4] ="</span>, gradients[<span class="string">"dbf"</span>][<span class="number">4</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dbf\"].shape ="</span>, gradients[<span class="string">"dbf"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dbi\"][4] ="</span>, gradients[<span class="string">"dbi"</span>][<span class="number">4</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dbi\"].shape ="</span>, gradients[<span class="string">"dbi"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dbc\"][4] ="</span>, gradients[<span class="string">"dbc"</span>][<span class="number">4</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dbc\"].shape ="</span>, gradients[<span class="string">"dbc"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dbo\"][4] ="</span>, gradients[<span class="string">"dbo"</span>][<span class="number">4</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dbo\"].shape ="</span>, gradients[<span class="string">"dbo"</span>].shape)</span><br></pre></td></tr></table></figure>
<h3 id="3-3-Backward-pass-through-the-LSTM-RNN"><a href="#3-3-Backward-pass-through-the-LSTM-RNN" class="headerlink" title="3.3 Backward pass through the LSTM RNN"></a>3.3 Backward pass through the LSTM RNN</h3><p>This part is very similar to the <code>rnn_backward</code> function you implemented above. You will first create variables of the same dimension as your return variables. You will then iterate over all the time steps starting from the end and call the one step function you implemented for LSTM at each iteration. You will then update the parameters by summing them individually. Finally return a dictionary with the new gradients. </p>
<p><strong>Instructions</strong>: Implement the <code>lstm_backward</code> function. Create a for loop starting from $T_x$ and going backward. For each step call <code>lstm_cell_backward</code> and update the your old gradients by adding the new gradients to them. Note that <code>dxt</code> is not updated but is stored.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lstm_backward</span><span class="params">(da, caches)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Implement the backward pass for the RNN with LSTM-cell (over a whole sequence).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">    da -- Gradients w.r.t the hidden states, numpy-array of shape (n_a, m, T_x)</span></span><br><span class="line"><span class="string">    dc -- Gradients w.r.t the memory states, numpy-array of shape (n_a, m, T_x)</span></span><br><span class="line"><span class="string">    caches -- cache storing information from the forward pass (lstm_forward)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    gradients -- python dictionary containing:</span></span><br><span class="line"><span class="string">                        dx -- Gradient of inputs, of shape (n_x, m, T_x)</span></span><br><span class="line"><span class="string">                        da0 -- Gradient w.r.t. the previous hidden state, numpy array of shape (n_a, m)</span></span><br><span class="line"><span class="string">                        dWf -- Gradient w.r.t. the weight matrix of the forget gate, numpy array of shape (n_a, n_a + n_x)</span></span><br><span class="line"><span class="string">                        dWi -- Gradient w.r.t. the weight matrix of the update gate, numpy array of shape (n_a, n_a + n_x)</span></span><br><span class="line"><span class="string">                        dWc -- Gradient w.r.t. the weight matrix of the memory gate, numpy array of shape (n_a, n_a + n_x)</span></span><br><span class="line"><span class="string">                        dWo -- Gradient w.r.t. the weight matrix of the save gate, numpy array of shape (n_a, n_a + n_x)</span></span><br><span class="line"><span class="string">                        dbf -- Gradient w.r.t. biases of the forget gate, of shape (n_a, 1)</span></span><br><span class="line"><span class="string">                        dbi -- Gradient w.r.t. biases of the update gate, of shape (n_a, 1)</span></span><br><span class="line"><span class="string">                        dbc -- Gradient w.r.t. biases of the memory gate, of shape (n_a, 1)</span></span><br><span class="line"><span class="string">                        dbo -- Gradient w.r.t. biases of the save gate, of shape (n_a, 1)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Retrieve values from the first cache (t=1) of caches.</span></span><br><span class="line">    (caches, x) = caches</span><br><span class="line">    (a1, c1, a0, c0, f1, i1, cc1, o1, x1, parameters) = caches[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    <span class="comment"># Retrieve dimensions from da's and x1's shapes (≈2 lines)</span></span><br><span class="line">    n_a, m, T_x = <span class="keyword">None</span></span><br><span class="line">    n_x, m = <span class="keyword">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># initialize the gradients with the right sizes (≈12 lines)</span></span><br><span class="line">    dx = <span class="keyword">None</span></span><br><span class="line">    da0 = <span class="keyword">None</span></span><br><span class="line">    da_prevt = <span class="keyword">None</span></span><br><span class="line">    dc_prevt = <span class="keyword">None</span></span><br><span class="line">    dWf = <span class="keyword">None</span></span><br><span class="line">    dWi = <span class="keyword">None</span></span><br><span class="line">    dWc = <span class="keyword">None</span></span><br><span class="line">    dWo = <span class="keyword">None</span></span><br><span class="line">    dbf = <span class="keyword">None</span></span><br><span class="line">    dbi = <span class="keyword">None</span></span><br><span class="line">    dbc = <span class="keyword">None</span></span><br><span class="line">    dbo = <span class="keyword">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># loop back over the whole sequence</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> reversed(range(<span class="keyword">None</span>)):</span><br><span class="line">        <span class="comment"># Compute all gradients using lstm_cell_backward</span></span><br><span class="line">        gradients = <span class="keyword">None</span></span><br><span class="line">        <span class="comment"># Store or add the gradient to the parameters' previous step's gradient</span></span><br><span class="line">        dx[:,:,t] = <span class="keyword">None</span></span><br><span class="line">        dWf = <span class="keyword">None</span></span><br><span class="line">        dWi = <span class="keyword">None</span></span><br><span class="line">        dWc = <span class="keyword">None</span></span><br><span class="line">        dWo = <span class="keyword">None</span></span><br><span class="line">        dbf = <span class="keyword">None</span></span><br><span class="line">        dbi = <span class="keyword">None</span></span><br><span class="line">        dbc = <span class="keyword">None</span></span><br><span class="line">        dbo = <span class="keyword">None</span></span><br><span class="line">    <span class="comment"># Set the first activation's gradient to the backpropagated gradient da_prev.</span></span><br><span class="line">    da0 = <span class="keyword">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Store the gradients in a python dictionary</span></span><br><span class="line">    gradients = &#123;<span class="string">"dx"</span>: dx, <span class="string">"da0"</span>: da0, <span class="string">"dWf"</span>: dWf,<span class="string">"dbf"</span>: dbf, <span class="string">"dWi"</span>: dWi,<span class="string">"dbi"</span>: dbi,</span><br><span class="line">                <span class="string">"dWc"</span>: dWc,<span class="string">"dbc"</span>: dbc, <span class="string">"dWo"</span>: dWo,<span class="string">"dbo"</span>: dbo&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> gradients</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.seed(<span class="number">1</span>)</span><br><span class="line">x = np.random.randn(<span class="number">3</span>,<span class="number">10</span>,<span class="number">7</span>)</span><br><span class="line">a0 = np.random.randn(<span class="number">5</span>,<span class="number">10</span>)</span><br><span class="line">Wf = np.random.randn(<span class="number">5</span>, <span class="number">5</span>+<span class="number">3</span>)</span><br><span class="line">bf = np.random.randn(<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line">Wi = np.random.randn(<span class="number">5</span>, <span class="number">5</span>+<span class="number">3</span>)</span><br><span class="line">bi = np.random.randn(<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line">Wo = np.random.randn(<span class="number">5</span>, <span class="number">5</span>+<span class="number">3</span>)</span><br><span class="line">bo = np.random.randn(<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line">Wc = np.random.randn(<span class="number">5</span>, <span class="number">5</span>+<span class="number">3</span>)</span><br><span class="line">bc = np.random.randn(<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">parameters = &#123;<span class="string">"Wf"</span>: Wf, <span class="string">"Wi"</span>: Wi, <span class="string">"Wo"</span>: Wo, <span class="string">"Wc"</span>: Wc, <span class="string">"Wy"</span>: Wy, <span class="string">"bf"</span>: bf, <span class="string">"bi"</span>: bi, <span class="string">"bo"</span>: bo, <span class="string">"bc"</span>: bc, <span class="string">"by"</span>: by&#125;</span><br><span class="line"></span><br><span class="line">a, y, c, caches = lstm_forward(x, a0, parameters)</span><br><span class="line"></span><br><span class="line">da = np.random.randn(<span class="number">5</span>, <span class="number">10</span>, <span class="number">4</span>)</span><br><span class="line">gradients = lstm_backward(da, caches)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"gradients[\"dx\"][1][2] ="</span>, gradients[<span class="string">"dx"</span>][<span class="number">1</span>][<span class="number">2</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dx\"].shape ="</span>, gradients[<span class="string">"dx"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"da0\"][2][3] ="</span>, gradients[<span class="string">"da0"</span>][<span class="number">2</span>][<span class="number">3</span>])</span><br><span class="line">print(<span class="string">"gradients[\"da0\"].shape ="</span>, gradients[<span class="string">"da0"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dWf\"][3][1] ="</span>, gradients[<span class="string">"dWf"</span>][<span class="number">3</span>][<span class="number">1</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dWf\"].shape ="</span>, gradients[<span class="string">"dWf"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dWi\"][1][2] ="</span>, gradients[<span class="string">"dWi"</span>][<span class="number">1</span>][<span class="number">2</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dWi\"].shape ="</span>, gradients[<span class="string">"dWi"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dWc\"][3][1] ="</span>, gradients[<span class="string">"dWc"</span>][<span class="number">3</span>][<span class="number">1</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dWc\"].shape ="</span>, gradients[<span class="string">"dWc"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dWo\"][1][2] ="</span>, gradients[<span class="string">"dWo"</span>][<span class="number">1</span>][<span class="number">2</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dWo\"].shape ="</span>, gradients[<span class="string">"dWo"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dbf\"][4] ="</span>, gradients[<span class="string">"dbf"</span>][<span class="number">4</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dbf\"].shape ="</span>, gradients[<span class="string">"dbf"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dbi\"][4] ="</span>, gradients[<span class="string">"dbi"</span>][<span class="number">4</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dbi\"].shape ="</span>, gradients[<span class="string">"dbi"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dbc\"][4] ="</span>, gradients[<span class="string">"dbc"</span>][<span class="number">4</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dbc\"].shape ="</span>, gradients[<span class="string">"dbc"</span>].shape)</span><br><span class="line">print(<span class="string">"gradients[\"dbo\"][4] ="</span>, gradients[<span class="string">"dbo"</span>][<span class="number">4</span>])</span><br><span class="line">print(<span class="string">"gradients[\"dbo\"].shape ="</span>, gradients[<span class="string">"dbo"</span>].shape)</span><br></pre></td></tr></table></figure>
<h3 id="Congratulations"><a href="#Congratulations" class="headerlink" title="Congratulations !"></a>Congratulations !</h3><p>Congratulations on completing this assignment. You now understand how recurrent neural networks work! </p>
<p>Lets go on to the next exercise, where you’ll use an RNN to build a character-level language model.</p>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Project</tag>
        <tag>Sequence Models</tag>
      </tags>
  </entry>
  <entry>
    <title>Convolutional Neural Networks</title>
    <url>/Convolutional-Neural-Networks/2019/03/27/</url>
    <content><![CDATA[<p><strong>Reference from lecture slides of Andrew Ng and github repo from <a href="https://github.com/mbadry1/DeepLearning.ai-Summary" target="_blank" rel="noopener">DeepLearning.ai-Summary</a></strong></p>
<h1 id="Convolutional-Neural-Networks"><a href="#Convolutional-Neural-Networks" class="headerlink" title="Convolutional Neural Networks"></a>Convolutional Neural Networks</h1><p>This is the forth course of the deep learning specialization at <a href="https://www.coursera.org/specializations/deep-learning" target="_blank" rel="noopener">Coursera</a> which is moderated by <a href="http://deeplearning.ai/" target="_blank" rel="noopener">DeepLearning.ai</a>. The course is taught by Andrew Ng.</p>
<h2 id="Table-of-contents"><a href="#Table-of-contents" class="headerlink" title="Table of contents"></a>Table of contents</h2><ul>
<li><a href="#convolutional-neural-networks">Convolutional Neural Networks</a><ul>
<li><a href="#table-of-contents">Table of contents</a></li>
<li><a href="#course-summary">Course summary</a></li>
<li><a href="#foundations-of-cnns">Foundations of CNNs</a><ul>
<li><a href="#computer-vision">Computer vision</a></li>
<li><a href="#edge-detection-example">Edge detection example</a></li>
<li><a href="#padding">Padding</a></li>
<li><a href="#strided-convolution">Strided convolution</a></li>
<li><a href="#convolutions-over-volumes">Convolutions over volumes</a></li>
<li><a href="#one-layer-of-a-convolutional-network">One Layer of a Convolutional Network</a></li>
<li><a href="#a-simple-convolution-network-example">A simple convolution network example</a></li>
<li><a href="#pooling-layers">Pooling layers</a></li>
<li><a href="#convolutional-neural-network-example">Convolutional neural network example</a></li>
<li><a href="#why-convolutions">Why convolutions?</a></li>
</ul>
</li>
<li><a href="#deep-convolutional-models-case-studies">Deep convolutional models: case studies</a><ul>
<li><a href="#why-look-at-case-studies">Why look at case studies?</a></li>
<li><a href="#classic-networks">Classic networks</a></li>
<li><a href="#residual-networks-resnets">Residual Networks (ResNets)</a></li>
<li><a href="#why-resnets-work">Why ResNets work</a></li>
<li><a href="#network-in-network-and-1-X-1-convolutions">Network in Network and 1×1 convolutions</a></li>
<li><a href="#inception-network-motivation">Inception network motivation</a></li>
<li><a href="#inception-network-googlenet">Inception network (GoogleNet)</a></li>
<li><a href="#using-open-source-implementation">Using Open-Source Implementation</a></li>
<li><a href="#transfer-learning">Transfer Learning</a></li>
<li><a href="#data-augmentation">Data Augmentation</a></li>
<li><a href="#state-of-computer-vision">State of Computer Vision</a></li>
</ul>
</li>
<li><a href="#object-detection">Object detection</a><ul>
<li><a href="#object-localization">Object Localization</a></li>
<li><a href="#landmark-detection">Landmark Detection</a></li>
<li><a href="#object-detection-1">Object Detection</a></li>
<li><a href="#convolutional-implementation-of-sliding-windows">Convolutional Implementation of Sliding Windows</a></li>
<li><a href="#bounding-box-predictions">Bounding Box Predictions</a></li>
<li><a href="#intersection-over-union">Intersection Over Union</a></li>
<li><a href="#non-max-suppression">Non-max Suppression</a></li>
<li><a href="#anchor-boxes">Anchor Boxes</a></li>
<li><a href="#yolo-algorithm">YOLO Algorithm</a></li>
<li><a href="#region-proposals-r-cnn">Region Proposals (R-CNN)</a></li>
</ul>
</li>
<li><a href="#special-applications-face-recognition--neural-style-transfer">Special applications: Face recognition &amp; Neural style transfer</a><ul>
<li><a href="#face-recognition">Face Recognition</a><ul>
<li><a href="#what-is-face-recognition">What is face recognition?</a></li>
<li><a href="#one-shot-learning">One Shot Learning</a></li>
<li><a href="#siamese-network">Siamese Network</a></li>
<li><a href="#triplet-loss">Triplet Loss</a></li>
<li><a href="#face-verification-and-binary-classification">Face Verification and Binary Classification</a></li>
</ul>
</li>
<li><a href="#neural-style-transfer">Neural Style Transfer</a><ul>
<li><a href="#what-is-neural-style-transfer">What is neural style transfer?</a></li>
<li><a href="#what-are-deep-convnets-learning">What are deep ConvNets learning?</a></li>
<li><a href="#cost-function">Cost Function</a></li>
<li><a href="#content-cost-function">Content Cost Function</a></li>
<li><a href="#style-cost-function">Style Cost Function</a></li>
<li><a href="#1d-and-3d-generalizations">1D and 3D Generalizations</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#extras">Extras</a><ul>
<li><a href="#keras">Keras</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Course-summary"><a href="#Course-summary" class="headerlink" title="Course summary"></a>Course summary</h2><p>Here is the course summary as given on the course <a href="https://www.coursera.org/learn/convolutional-neural-networks" target="_blank" rel="noopener">link</a>:</p>
<blockquote>
<p>This course will teach you how to build convolutional neural networks and apply it to image data. Thanks to deep learning, computer vision is working far better than just two years ago, and this is enabling numerous exciting applications ranging from safe autonomous driving, to accurate face recognition, to automatic reading of radiology images. </p>
<p>You will:</p>
<ul>
<li>Understand how to build a convolutional neural network, including recent variations such as residual networks.</li>
<li>Know how to apply convolutional networks to visual detection and recognition tasks.</li>
<li>Know to use neural style transfer to generate art.</li>
<li>Be able to apply these algorithms to a variety of image, video, and other 2D or 3D data.</li>
</ul>
<p>This is the fourth course of the Deep Learning Specialization.</p>
</blockquote>
<h2 id="Foundations-of-CNNs"><a href="#Foundations-of-CNNs" class="headerlink" title="Foundations of CNNs"></a>Foundations of CNNs</h2><blockquote>
<p>Learn to implement the foundational layers of CNNs (pooling, convolutions) and to stack them properly in a deep network to solve multi-class image classification problems.</p>
</blockquote>
<h3 id="Computer-vision"><a href="#Computer-vision" class="headerlink" title="Computer vision"></a>Computer vision</h3><ul>
<li>Computer vision is one of the applications that are rapidly active thanks to deep learning.</li>
<li>Some of the applications of computer vision that are using deep learning includes:<ul>
<li>Self driving cars.</li>
<li>Face recognition.</li>
</ul>
</li>
<li>Deep learning is also enabling new types of art to be created.</li>
<li>Rapid changes to computer vision are making new applications that weren’t possible a few years ago.</li>
<li>Computer vision deep leaning techniques are always evolving making a new architectures which can help us in other areas other than computer vision.<ul>
<li>For example, Andrew Ng took some ideas of computer vision and applied it in speech recognition.</li>
</ul>
</li>
<li>Examples of a computer vision problems includes:<ul>
<li>Image classification.</li>
<li>Object detection.<ul>
<li>Detect object and localize them.</li>
</ul>
</li>
<li>Neural style transfer<ul>
<li>Changes the style of an image using another image.</li>
</ul>
</li>
</ul>
</li>
<li>One of the challenges of computer vision problem that images can be so large and we want a fast and accurate algorithm to work with that.<ul>
<li>For example, a <code>1000x1000</code> image will represent 3 million feature/input to the full connected neural network. If the following hidden layer contains 1000, then we will want to learn weights of the shape <code>[1000, 3 million]</code> which is 3 billion parameter only in the first layer and thats so computationally expensive!</li>
</ul>
</li>
<li>One of the solutions is to build this using <strong>convolution layers</strong> instead of the <strong>fully connected layers</strong>.</li>
</ul>
<h3 id="Edge-detection-example"><a href="#Edge-detection-example" class="headerlink" title="Edge detection example"></a>Edge detection example</h3><ul>
<li>The convolution operation is one of the fundamentals blocks of a CNN. One of the examples about convolution is the image edge detection operation.</li>
<li>Early layers of CNN might detect edges then the middle layers will detect parts of objects and the later layers will put the these parts together to produce an output.</li>
<li>In an image we can detect vertical edges, horizontal edges, or full edge detector.</li>
<li>Vertical edge detection:<ul>
<li>An example of convolution operation to detect vertical edges:<ul>
<li><img src="01.png" alt></li>
</ul>
</li>
<li>In the last example a <code>6x6</code> matrix convolved with <code>3x3</code> filter/kernel gives us a <code>4x4</code> matrix.</li>
<li>If you make the convolution operation in TensorFlow you will find the function <code>tf.nn.conv2d</code>. In keras you will find <code>Conv2d</code> function.</li>
<li>The vertical edge detection filter will find a <code>3x3</code> place in an image where there are a bright region followed by a dark region.</li>
<li>If we applied this filter to a white region followed by a dark region, it should find the edges in between the two colors as a positive value. But if we applied the same filter to a dark region followed by a white region it will give us negative values. To solve this we can use the abs function to make it positive.</li>
</ul>
</li>
<li><p>Horizontal edge detection</p>
<ul>
<li><p>Filter would be like this</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1   1   1</span><br><span class="line">0   0   0</span><br><span class="line">-1  -1  -1</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>There are a lot of ways we can put number inside the horizontal or vertical edge detections. For example here are the vertical <strong>Sobel</strong> filter (The idea is taking care of the middle row):</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 0   -1</span><br><span class="line">2 0   -2</span><br><span class="line">1 0   -1</span><br></pre></td></tr></table></figure>
</li>
<li><p>Also something called <strong>Scharr</strong> filter (The idea is taking great care of the middle row):</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 0   -3</span><br><span class="line">10    0   -10</span><br><span class="line">3 0   -3</span><br></pre></td></tr></table></figure>
</li>
<li><p>What we learned in the deep learning is that we don’t need to hand craft these numbers, we can treat them as weights and then learn them. It can learn horizontal, vertical, angled, or any edge type automatically rather than getting them by hand.</p>
</li>
</ul>
<h3 id="Padding"><a href="#Padding" class="headerlink" title="Padding"></a>Padding</h3><ul>
<li>In order to to use deep neural networks we really need to use <strong>paddings</strong>.</li>
<li>In the last section we saw that a <code>6x6</code> matrix convolved with <code>3x3</code> filter/kernel gives us a <code>4x4</code> matrix.</li>
<li>To give it a general rule, if a matrix <code>nxn</code> is convolved with <code>fxf</code> filter/kernel give us <code>n-f+1,n-f+1</code> matrix. </li>
<li>The convolution operation shrinks the matrix if f&gt;1.</li>
<li>We want to apply convolution operation multiple times, but if the image shrinks we will lose a lot of data on this process. Also the edges pixels are used less than other pixels in an image.</li>
<li>So the problems with convolutions are:<ul>
<li>Shrinks output.</li>
<li>throwing away a lot of information that are in the edges.</li>
</ul>
</li>
<li>To solve these problems we can pad the input image before convolution by adding some rows and columns to it. We will call the padding amount <code>P</code> the number of row/columns that we will insert in top, bottom, left and right of the image.</li>
<li>In almost all the cases the padding values are zeros.</li>
<li>The general rule now,  if a matrix <code>nxn</code> is convolved with <code>fxf</code> filter/kernel and padding <code>p</code> give us <code>n+2p-f+1,n+2p-f+1</code> matrix. </li>
<li>If n = 6, f = 3, and p = 1 Then the output image will have <code>n+2p-f+1 = 6+2-3+1 = 6</code>. We maintain the size of the image.</li>
<li><p>Same convolutions is a convolution with a pad so that output size is the same as the input size. Its given by the equation:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">P = (f-1) / 2</span><br></pre></td></tr></table></figure>
</li>
<li><p>In computer vision f is usually odd. Some of the reasons is that its have a center value.</p>
</li>
</ul>
<h3 id="Strided-convolution"><a href="#Strided-convolution" class="headerlink" title="Strided convolution"></a>Strided convolution</h3><ul>
<li><p>Strided convolution is another piece that are used in CNNs.</p>
</li>
<li><p>We will call stride <code>S</code>.</p>
</li>
<li><p>When we are making the convolution operation we used <code>S</code> to tell us the number of pixels we will jump when we are convolving filter/kernel. The last examples we described S was 1.</p>
</li>
<li><p>Now the general rule are:</p>
<ul>
<li>if a matrix <code>nxn</code> is convolved with <code>fxf</code> filter/kernel and padding <code>p</code> and stride <code>s</code> it give us <code>(n+2p-f)/s + 1,(n+2p-f)/s + 1</code> matrix. </li>
</ul>
</li>
<li><p>In case <code>(n+2p-f)/s + 1</code> is fraction we can take <strong>floor</strong> of this value.</p>
</li>
<li><p>In math textbooks the conv operation is filpping the filter before using it. What we were doing is called cross-correlation operation but the state of art of deep learning is using this as conv operation.</p>
</li>
<li><p>Same convolutions is a convolution with a padding so that output size is the same as the input size. Its given by the equation:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p = (n*s - n + f - s) / 2</span><br><span class="line">When s = 1 ==&gt; P = (f-1) / 2</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Convolutions-over-volumes"><a href="#Convolutions-over-volumes" class="headerlink" title="Convolutions over volumes"></a>Convolutions over volumes</h3><ul>
<li>We see how convolution works with 2D images, now lets see if we want to convolve 3D images (RGB image)</li>
<li>We will convolve an image of height, width, # of channels with a filter of a height, width, same # of channels. Hint that the image number channels and the filter number of channels are the same.</li>
<li>We can call this as stacked filters for each channel!</li>
<li>Example:<ul>
<li>Input image: <code>6x6x3</code></li>
<li>Filter: <code>3x3x3</code></li>
<li>Result image: <code>4x4x1</code></li>
<li>In the last result p=0, s=1</li>
</ul>
</li>
<li>Hint the output here is only 2D.</li>
<li>We can use multiple filters to detect multiple features or edges. Example.<ul>
<li>Input image: <code>6x6x3</code></li>
<li>10 Filters: <code>3x3x3</code></li>
<li>Result image: <code>4x4x10</code></li>
<li>In the last result p=0, s=1</li>
</ul>
</li>
</ul>
<h3 id="One-Layer-of-a-Convolutional-Network"><a href="#One-Layer-of-a-Convolutional-Network" class="headerlink" title="One Layer of a Convolutional Network"></a>One Layer of a Convolutional Network</h3><ul>
<li>First we convolve some filters to a given input and then add a bias to each filter output and then get RELU of the result. Example:<ul>
<li>Input image: <code>6x6x3</code>         <code># a0</code></li>
<li>10 Filters: <code>3x3x3</code>         <code>#W1</code></li>
<li>Result image: <code>4x4x10</code>     <code>#W1a0</code></li>
<li>Add b (bias) with <code>10x1</code> will get us : <code>4x4x10</code> image      <code>#W1a0 + b</code></li>
<li>Apply RELU will get us: <code>4x4x10</code> image                <code>#A1 = RELU(W1a0 + b)</code></li>
<li>In the last result p=0, s=1</li>
<li>Hint number of parameters here are: <code>(3x3x3x10) + 10 = 280</code></li>
</ul>
</li>
<li>The last example forms a layer in the CNN.</li>
<li>Hint: no matter the size of the input, the number of the parameters is same if filter size is same. That makes it less prone to overfitting.</li>
<li><p>Here are some notations we will use. If layer l is a conv layer:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hyperparameters</span><br><span class="line">f[l] = filter size</span><br><span class="line">p[l] = padding    # Default is zero</span><br><span class="line">s[l] = stride</span><br><span class="line">nc[l] = number of filters</span><br><span class="line"></span><br><span class="line">Input:  n[l-1] x n[l-1] x nc[l-1] Or   nH[l-1] x nW[l-1] x nc[l-1]</span><br><span class="line">Output: n[l] x n[l] x nc[l]   Or   nH[l] x nW[l] x nc[l]</span><br><span class="line">Where n[l] = (n[l-1] + 2p[l] - f[l] / s[l]) + 1</span><br><span class="line"></span><br><span class="line">Each filter is: f[l] x f[l] x nc[l-1]</span><br><span class="line"></span><br><span class="line">Activations: a[l] is nH[l] x nW[l] x nc[l]</span><br><span class="line">           A[l] is m x nH[l] x nW[l] x nc[l]   # In batch or minbatch training</span><br><span class="line">           </span><br><span class="line">Weights: f[l] * f[l] * nc[l-1] * nc[l]</span><br><span class="line">bias:  (1, 1, 1, nc[l])</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="A-simple-convolution-network-example"><a href="#A-simple-convolution-network-example" class="headerlink" title="A simple convolution network example"></a>A simple convolution network example</h3><ul>
<li>Lets build a big example.<ul>
<li>Input Image are:   <code>a0 = 39x39x3</code><ul>
<li><code>n0 = 39</code> and <code>nc0 = 3</code></li>
</ul>
</li>
<li>First layer (Conv layer):<ul>
<li><code>f1 = 3</code>, <code>s1 = 1</code>, and <code>p1 = 0</code></li>
<li><code>number of filters = 10</code></li>
<li>Then output are <code>a1 = 37x37x10</code><ul>
<li><code>n1 = 37</code> and <code>nc1 = 10</code></li>
</ul>
</li>
</ul>
</li>
<li>Second layer (Conv layer):<ul>
<li><code>f2 = 5</code>, <code>s2 = 2</code>, <code>p2 = 0</code></li>
<li><code>number of filters = 20</code></li>
<li>The output are <code>a2 = 17x17x20</code><ul>
<li><code>n2 = 17</code>, <code>nc2 = 20</code></li>
</ul>
</li>
<li>Hint shrinking goes much faster because the stride is 2</li>
</ul>
</li>
<li>Third layer (Conv layer):<ul>
<li><code>f3 = 5</code>, <code>s3 = 2</code>, <code>p2 = 0</code></li>
<li><code>number of filters = 40</code></li>
<li>The output are <code>a3 = 7x7x40</code><ul>
<li><code>n3 = 7</code>, <code>nc3 = 40</code></li>
</ul>
</li>
</ul>
</li>
<li>Forth layer (Fully connected Softmax)<ul>
<li><code>a3 = 7x7x40 = 1960</code>  as a vector..</li>
</ul>
</li>
</ul>
</li>
<li>In the last example you seen that the image are getting smaller after each layer and thats the trend now.</li>
<li>Types of layer in a convolutional network:<ul>
<li>Convolution.        <code>#Conv</code></li>
<li>Pooling      <code>#Pool</code></li>
<li>Fully connected     <code>#FC</code></li>
</ul>
</li>
</ul>
<h3 id="Pooling-layers"><a href="#Pooling-layers" class="headerlink" title="Pooling layers"></a>Pooling layers</h3><ul>
<li>Other than the conv layers, CNNs often uses pooling layers to reduce the size of the inputs, speed up computation, and to make some of the features it detects more robust.</li>
<li>Max pooling example:<ul>
<li><img src="02.png" alt></li>
<li>This example has <code>f = 2</code>, <code>s = 2</code>, and <code>p = 0</code> hyperparameters</li>
</ul>
</li>
<li>The max pooling is saying, if the feature is detected anywhere in this filter then keep a high number. But the main reason why people are using pooling because its works well in practice and reduce computations.</li>
<li>Max pooling has no parameters to learn.</li>
<li>Example of Max pooling on 3D input:<ul>
<li>Input: <code>4x4x10</code></li>
<li><code>Max pooling size = 2</code> and <code>stride = 2</code></li>
<li>Output: <code>2x2x10</code></li>
</ul>
</li>
<li>Average pooling is taking the averages of the values instead of taking the max values.</li>
<li>Max pooling is used more often than average pooling in practice.</li>
<li>If stride of pooling equals the size, it will then apply the effect of shrinking.</li>
<li>Hyperparameters summary<ul>
<li>f : filter size.</li>
<li>s : stride.</li>
<li>Padding are rarely uses here.</li>
<li>Max or average pooling.</li>
</ul>
</li>
</ul>
<h3 id="Convolutional-neural-network-example"><a href="#Convolutional-neural-network-example" class="headerlink" title="Convolutional neural network example"></a>Convolutional neural network example</h3><ul>
<li>Now we will deal with a full CNN example. This example is something like the <strong><em>LeNet-5</em></strong> that was invented by Yann Lecun.<ul>
<li>Input Image are:   <code>a0 = 32x32x3</code><ul>
<li><code>n0 = 32</code> and <code>nc0 = 3</code></li>
</ul>
</li>
<li>First layer (Conv layer):        <code>#Conv1</code><ul>
<li><code>f1 = 5</code>, <code>s1 = 1</code>, and <code>p1 = 0</code></li>
<li><code>number of filters = 6</code></li>
<li>Then output are <code>a1 = 28x28x6</code><ul>
<li><code>n1 = 28</code> and <code>nc1 = 6</code></li>
</ul>
</li>
<li>Then apply (Max pooling):         <code>#Pool1</code><ul>
<li><code>f1p = 2</code>, and <code>s1p = 2</code></li>
<li>The output are <code>a1 = 14x14x6</code></li>
</ul>
</li>
</ul>
</li>
<li>Second layer (Conv layer):   <code>#Conv2</code><ul>
<li><code>f2 = 5</code>, <code>s2 = 1</code>, <code>p2 = 0</code></li>
<li><code>number of filters = 16</code></li>
<li>The output are <code>a2 = 10x10x16</code><ul>
<li><code>n2 = 10</code>, <code>nc2 = 16</code></li>
</ul>
</li>
<li>Then apply (Max pooling):         <code>#Pool2</code><ul>
<li><code>f1p = 2</code>, and <code>s1p = 2</code></li>
<li>The output are <code>a2 = 5x5x16</code></li>
</ul>
</li>
</ul>
</li>
<li>Third layer (Fully connected)   <code>#FC3</code><ul>
<li>Number of neurons are 120</li>
<li>The output <code>a3 = 120 x 1</code> . 400 came from <code>5x5x16</code></li>
</ul>
</li>
<li>Forth layer (Fully connected)  <code>#FC4</code><ul>
<li>Number of neurons are 84</li>
<li>The output <code>a4 = 84 x 1</code> .</li>
</ul>
</li>
<li>Fifth layer (Softmax)<ul>
<li>Number of neurons is 10 if we need to identify for example the 10 digits.</li>
</ul>
</li>
</ul>
</li>
<li>Hint a Conv1 and Pool1 is treated as one layer.</li>
<li>Some statistics about the last example:<ul>
<li><img src="03.png" alt></li>
</ul>
</li>
<li>Hyperparameters are a lot. For choosing the value of each you should follow the guideline that we will discuss later or check the literature and takes some ideas and numbers from it.</li>
<li>Usually the input size decreases over layers while the number of filters increases.</li>
<li>A CNN usually consists of one or more convolution (Not just one as the shown examples) followed by a pooling.</li>
<li>Fully connected layers has the most parameters in the network.</li>
<li>To consider using these blocks together you should look at other working examples firsts to get some intuitions.</li>
</ul>
<h3 id="Why-convolutions"><a href="#Why-convolutions" class="headerlink" title="Why convolutions?"></a>Why convolutions?</h3><ul>
<li>Two main advantages of Convs are:<ul>
<li>Parameter sharing.<ul>
<li>A feature detector (such as a vertical edge detector) that’s useful in one part of the image is probably useful in another part of the image.</li>
</ul>
</li>
<li>sparsity of connections.<ul>
<li>In each layer, each output value depends only on a small number of inputs which makes it translation invariance.</li>
</ul>
</li>
</ul>
</li>
<li>Putting it all together:<ul>
<li><img src="04.png" alt></li>
</ul>
</li>
</ul>
<h2 id="Deep-convolutional-models-case-studies"><a href="#Deep-convolutional-models-case-studies" class="headerlink" title="Deep convolutional models: case studies"></a>Deep convolutional models: case studies</h2><blockquote>
<p>Learn about the practical tricks and methods used in deep CNNs straight from the research papers.</p>
</blockquote>
<h3 id="Why-look-at-case-studies"><a href="#Why-look-at-case-studies" class="headerlink" title="Why look at case studies?"></a>Why look at case studies?</h3><ul>
<li>We learned about Conv layer, pooling layer, and fully connected layers. It turns out that computer vision researchers spent the past few years on how to put these layers together.</li>
<li>To get some intuitions you have to see the examples that has been made.</li>
<li>Some neural networks architecture that works well in some tasks can also work well in other tasks.</li>
<li>Here are some classical CNN networks:<ul>
<li><strong>LeNet-5</strong></li>
<li><strong>AlexNet</strong></li>
<li><strong>VGG</strong></li>
</ul>
</li>
<li>The best CNN architecture that won the last ImageNet competition is called <strong>ResNet</strong> and it has 152 layers!</li>
<li>There are also an architecture called <strong>Inception</strong> that was made by Google that are very useful to learn and apply to your tasks.</li>
<li>Reading and trying the mentioned models can boost you and give you a lot of ideas to solve your task.</li>
</ul>
<h3 id="Classic-networks"><a href="#Classic-networks" class="headerlink" title="Classic networks"></a>Classic networks</h3><ul>
<li><p>In this section we will talk about classic networks which are <strong>LeNet-5</strong>, <strong>AlexNet</strong>, and <strong>VGG</strong>.</p>
</li>
<li><p><strong>LeNet-5</strong></p>
<ul>
<li>The goal for this model was to identify handwritten digits in a <code>32x32x1</code> gray image. Here are the drawing of it:</li>
<li><img src="05.png" alt></li>
<li>This model was published in 1998. The last layer wasn’t using softmax back then.</li>
<li>It has 60k parameters.</li>
<li>The dimensions of the image decreases as the number of channels increases.</li>
<li><code>Conv ==&gt; Pool ==&gt; Conv ==&gt; Pool ==&gt; FC ==&gt; FC ==&gt; softmax</code> this type of arrangement is quite common.</li>
<li>The activation function used in the paper was Sigmoid and Tanh. Modern implementation uses RELU in most of the cases.</li>
<li><a href="http://ieeexplore.ieee.org/document/726791/?reload=true" target="_blank" rel="noopener">[LeCun et al., 1998. Gradient-based learning applied to document recognition]</a></li>
</ul>
</li>
<li><p><strong>AlexNet</strong></p>
<ul>
<li><p>Named after Alex Krizhevsky who was the first author of this paper. The other authors includes Jeoffery Hinton.</p>
</li>
<li><p>The goal for the model was the ImageNet challenge which classifies images into 1000 classes. Here are the drawing of the model:</p>
</li>
<li><p><img src="06.png" alt></p>
</li>
<li><p>Summary:</p>
<ul>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Conv =&gt; Max-pool =&gt; Conv =&gt; Max-pool =&gt; Conv =&gt; Conv =&gt; Conv =&gt; Max-pool ==&gt; Flatten ==&gt; FC ==&gt; FC ==&gt; Softmax</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Similar to LeNet-5 but bigger.</p>
</li>
<li><p>Has 60 Million parameter compared to 60k parameter of LeNet-5.</p>
</li>
<li><p>It used the RELU activation function.</p>
</li>
<li><p>The original paper contains Multiple GPUs and Local Response normalization (RN).</p>
<ul>
<li>Multiple GPUs were used because the GPUs were not so fast back then.</li>
<li>Researchers proved that Local Response normalization doesn’t help much so for now don’t bother yourself for understanding or implementing it. </li>
</ul>
</li>
<li><p>This paper convinced the computer vision researchers that deep learning is so important.</p>
</li>
<li><p><a href="https://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks.pdf" target="_blank" rel="noopener">[Krizhevsky et al., 2012. ImageNet classification with deep convolutional neural networks]</a></p>
</li>
</ul>
</li>
<li><p><strong>VGG-16</strong></p>
<ul>
<li>A modification for AlexNet.</li>
<li>Instead of having a lot of hyperparameters lets have some simpler network.</li>
<li>Focus on having only these blocks:<ul>
<li>CONV = 3 X 3 filter, s = 1, same  </li>
<li>MAX-POOL = 2 X 2 , s = 2</li>
</ul>
</li>
<li>Here are the architecture:<ul>
<li><img src="07.png" alt></li>
</ul>
</li>
<li>This network is large even by modern standards. It has around 138 million parameters.<ul>
<li>Most of the parameters are in the fully connected layers.</li>
</ul>
</li>
<li>It has a total memory of 96MB per image for only forward propagation!<ul>
<li>Most memory are in the earlier layers.</li>
</ul>
</li>
<li>Number of filters increases from 64 to 128 to 256 to 512. 512 was made twice.</li>
<li>Pooling was the only one who is responsible for shrinking the dimensions.</li>
<li>There are another version called <strong>VGG-19</strong> which is a bigger version. But most people uses the VGG-16 instead of the VGG-19 because it does the same.</li>
<li>VGG paper is attractive it tries to make some rules regarding using CNNs.</li>
<li><a href="https://arxiv.org/abs/1409.1556" target="_blank" rel="noopener">[Simonyan &amp; Zisserman 2015. Very deep convolutional networks for large-scale image recognition]</a></li>
</ul>
</li>
</ul>
<h3 id="Residual-Networks-ResNets"><a href="#Residual-Networks-ResNets" class="headerlink" title="Residual Networks (ResNets)"></a>Residual Networks (ResNets)</h3><ul>
<li>Very, very deep NNs are difficult to train because of vanishing and exploding gradients problems.</li>
<li>In this section we will learn about skip connection which makes you take the activation from one layer and suddenly feed it to another layer even much deeper in NN which allows you to train large NNs even with layers greater than 100.</li>
<li><strong>Residual block</strong><ul>
<li>ResNets are built out of some Residual blocks.</li>
<li><img src="08.png" alt></li>
<li>They add a shortcut/skip connection before the second activation.</li>
<li>The authors of this block find that you can train a deeper NNs using stacking this block.</li>
<li><a href="https://arxiv.org/abs/1512.03385" target="_blank" rel="noopener">[He et al., 2015. Deep residual networks for image recognition]</a></li>
</ul>
</li>
<li><strong>Residual Network</strong><ul>
<li>Are a NN that consists of some Residual blocks.</li>
<li><img src="09.png" alt></li>
<li>These networks can go deeper without hurting the performance. In the normal NN - Plain networks - the theory tell us that if we go deeper we will get a better solution to our problem, but because of the vanishing and exploding gradients problems the performance of the network suffers as it goes deeper. Thanks to Residual Network we can go deeper as we want now.</li>
<li><img src="10.png" alt></li>
<li>On the left is the normal NN and on the right are the ResNet. As you can see the performance of ResNet increases as the network goes deeper.</li>
<li>In some cases going deeper won’t effect the performance and that depends on the problem on your hand.</li>
<li>Some people are trying to train 1000 layer now which isn’t used in practice. </li>
<li>[He et al., 2015. Deep residual networks for image recognition]</li>
</ul>
</li>
</ul>
<h3 id="Why-ResNets-work"><a href="#Why-ResNets-work" class="headerlink" title="Why ResNets work"></a>Why ResNets work</h3><ul>
<li><p>Lets see some example that illustrates why resNet work.</p>
<ul>
<li><p>We have a big NN as the following:</p>
<ul>
<li><code>X --&gt; Big NN --&gt; a[l]</code></li>
</ul>
</li>
<li><p>Lets add two layers to this network as a residual block:</p>
<ul>
<li><code>X --&gt; Big NN --&gt; a[l] --&gt; Layer1 --&gt; Layer2 --&gt; a[l+2]</code></li>
<li>And a<code>[l]</code> has a direct connection to <code>a[l+2]</code></li>
</ul>
</li>
<li><p>Suppose we are using RELU activations.</p>
</li>
<li><p>Then:</p>
<ul>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a[l+2] = g( z[l+2] + a[l] )</span><br><span class="line">     = g( W[l+2] a[l+1] + b[l+2] + a[l] )</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Then if we are using L2 regularization for example, <code>W[l+2]</code> will be zero. Lets say that <code>b[l+2]</code> will be zero too.</p>
</li>
<li><p>Then <code>a[l+2] = g( a[l] ) = a[l]</code> with no negative values.</p>
</li>
<li><p>This show that identity function is easy for a residual block to learn. And that why it can train deeper NNs.</p>
</li>
<li><p>Also that the two layers we added doesn’t hurt the performance of big NN we made.</p>
</li>
<li><p>Hint: dimensions of z[l+2] and a[l] have to be the same in resNets. In case they have different dimensions what we put a matrix parameters (Which can be learned or fixed)</p>
<ul>
<li><code>a[l+2] = g( z[l+2] + ws * a[l] ) # The added Ws should make the dimentions equal</code></li>
<li>ws also can be a zero padding.</li>
</ul>
</li>
</ul>
</li>
<li><p>Using a skip-connection helps the gradient to backpropagate and thus helps you to train deeper networks</p>
</li>
<li><p>Lets take a look at ResNet on images.</p>
<ul>
<li>Here are the architecture of <strong>ResNet-34</strong>:</li>
<li><img src="resNet.jpg" alt></li>
<li>All the 3x3 Conv are same Convs.</li>
<li>Keep it simple in design of the network.</li>
<li>spatial size /2 =&gt; # filters x2</li>
<li>No FC layers, No dropout is used.</li>
<li>Two main types of blocks are used in a ResNet, depending mainly on whether the input/output dimensions are same or different. You are going to implement both of them.</li>
<li>The dotted lines is the case when the dimensions are different. To solve then they down-sample the input by 2 and then pad zeros to match the two dimensions. There’s another trick which is called bottleneck which we will explore later.</li>
</ul>
</li>
<li><p>Useful concept (<strong>Spectrum of Depth</strong>):</p>
<ul>
<li><img src="12.png" alt></li>
<li>Taken from <a href="icml.cc/2016/tutorials/icml2016_tutorial_deep_residual_networks_kaiminghe.pdf">icml.cc/2016/tutorials/icml2016_tutorial_deep_residual_networks_kaiminghe.pdf</a></li>
</ul>
</li>
<li><p>Residual blocks types:</p>
<ul>
<li>Identity block:<ul>
<li><img src="16.png" alt></li>
<li>Hint the conv is followed by a batch norm <code>BN</code> before <code>RELU</code>. Dimensions here are same.</li>
<li>This skip is over 2 layers. The skip connection can jump n connections where n&gt;2</li>
<li>This drawing represents <a href="https://keras.io/" target="_blank" rel="noopener">Keras</a> layers.</li>
</ul>
</li>
<li>The convolutional block:<ul>
<li><img src="17.png" alt></li>
<li>The conv can be bottleneck 1 x 1 conv</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Network-in-Network-and-1-X-1-convolutions"><a href="#Network-in-Network-and-1-X-1-convolutions" class="headerlink" title="Network in Network and 1 X 1 convolutions"></a>Network in Network and 1 X 1 convolutions</h3><ul>
<li><p>A 1 x 1 convolution  - We also call it Network in Network- is so useful in many CNN models.</p>
</li>
<li><p>What does a 1 X 1 convolution do? Isn’t it just multiplying by a number?</p>
<ul>
<li>Lets first consider an example:<ul>
<li>Input: <code>6x6x1</code></li>
<li>Conv: <code>1x1x1</code> one filter.        <code># The 1 x 1 Conv</code></li>
<li>Output: <code>6x6x1</code></li>
</ul>
</li>
<li>Another example:<ul>
<li>Input: <code>6x6x32</code></li>
<li>Conv: <code>1x1x32</code> 5 filters.     <code># The 1 x 1 Conv</code></li>
<li>Output: <code>6x6x5</code></li>
</ul>
</li>
</ul>
</li>
<li><p>The Network in Network is proposed in [Lin et al., 2013. Network in network]</p>
</li>
<li><p>It has been used in a lot of modern CNN implementations like ResNet and Inception models.</p>
</li>
<li><p>A 1 x 1 convolution is useful when:</p>
<ul>
<li>We want to shrink the number of channels. We also call this feature transformation.<ul>
<li>In the second discussed example above we have shrinked the input from 32 to 5 channels.</li>
</ul>
</li>
<li>We will later see that by shrinking it we can save a lot of computations.</li>
<li>If we have specified the number of 1 x 1 Conv filters to be the same as the input number of channels then the output will contain the same number of channels. Then the 1 x 1 Conv will act like a non linearity and will learn non linearity operator. </li>
</ul>
</li>
<li><p>Replace fully connected layers with 1 x 1 convolutions as Yann LeCun believes they are the same.</p>
<ul>
<li><blockquote>
<p>In Convolutional Nets, there is no such thing as “fully-connected layers”. There are only convolution layers with 1x1 convolution kernels and a full connection table. <a href="https://www.facebook.com/yann.lecun/posts/10152820758292143" target="_blank" rel="noopener">Yann LeCun</a> </p>
</blockquote>
</li>
</ul>
</li>
<li><p><a href="https://arxiv.org/abs/1312.4400" target="_blank" rel="noopener">[Lin et al., 2013. Network in network]</a></p>
</li>
</ul>
<h3 id="Inception-network-motivation"><a href="#Inception-network-motivation" class="headerlink" title="Inception network motivation"></a>Inception network motivation</h3><ul>
<li>When you design a CNN you have to decide all the layers yourself. Will you pick a 3 x 3 Conv or 5 x 5 Conv or maybe a max pooling layer. You have so many choices.</li>
<li>What <strong>inception</strong> tells us is, Why not use all of them at once?</li>
<li><strong>Inception module</strong>, naive version:<ul>
<li><img src="13.png" alt></li>
<li>Hint that max-pool are same here.</li>
<li>Input to the inception module are 28 x 28 x 192 and the output are 28 x 28 x 256</li>
<li>We have done all the Convs and pools we might want and will let the NN learn and decide which it want to use most.</li>
<li><a href="https://arxiv.org/abs/1409.4842" target="_blank" rel="noopener">[Szegedy et al. 2014. Going deeper with convolutions]</a></li>
</ul>
</li>
<li>The problem of computational cost in Inception model:<ul>
<li>If we have just focused on a 5 x 5 Conv that we have done in the last example.</li>
<li>There are 32 same filters of 5 x 5, and the input are 28 x 28 x 192.</li>
<li>Output should be 28 x 28 x 32</li>
<li>The total number of multiplications needed here are:<ul>
<li>Number of outputs <em> Filter size </em> Filter size * Input dimensions</li>
<li>Which equals: <code>28 * 28 * 32 * 5 * 5 * 192 = 120 Mil</code> </li>
<li>120 Mil multiply operation still a problem in the modern day computers.</li>
</ul>
</li>
<li>Using a 1 x 1 convolution we can reduce 120 mil to just 12 mil. Lets see how.</li>
</ul>
</li>
<li>Using 1 X 1 convolution to reduce computational cost:<ul>
<li>The new architecture are:<ul>
<li>X0 shape is (28, 28, 192)</li>
<li>We then apply 16 (1 x 1 Convolution)</li>
<li>That produces X1 of shape (28, 28, 16)<ul>
<li>Hint, we have reduced the dimensions here.</li>
</ul>
</li>
<li>Then apply 32  (5 x 5 Convolution)</li>
<li>That produces X2 of shape (28, 28, 32)</li>
</ul>
</li>
<li>Now lets calculate the number of multiplications:<ul>
<li>For the first Conv: <code>28 * 28 * 16 * 1 * 1 * 192 = 2.5 Mil</code></li>
<li>For the second Conv: <code>28 * 28 * 32 * 5 * 5 * 16 = 10 Mil</code></li>
<li>So the total number are 12.5 Mil approx. which is so good compared to 120 Mil</li>
</ul>
</li>
</ul>
</li>
<li>A 1 x 1 Conv here is called Bottleneck <code>BN</code>.</li>
<li>It turns out that the 1 x 1 Conv won’t hurt the performance.</li>
<li><strong>Inception module</strong>, dimensions reduction version:<ul>
<li><img src="14.png" alt></li>
</ul>
</li>
<li>Example of inception model in Keras:<ul>
<li><img src="inception_block1a.png" alt></li>
</ul>
</li>
</ul>
<h3 id="Inception-network-GoogleNet"><a href="#Inception-network-GoogleNet" class="headerlink" title="Inception network (GoogleNet)"></a>Inception network (GoogleNet)</h3><ul>
<li>The inception network consist of concatenated blocks of the Inception module.</li>
<li>The name inception was taken from a <em>meme</em> image which was taken from <strong>Inception movie</strong></li>
<li>Here are the full model:<ul>
<li><img src="15.png" alt></li>
</ul>
</li>
<li>Some times a Max-Pool block is used before the inception module to reduce the dimensions of the inputs.</li>
<li>There are a 3 Sofmax branches at different positions to push the network toward its goal. and helps to ensure that the intermediate features are good enough to the network to learn and it turns out that softmax0 and sofmax1 gives regularization effect.</li>
<li>Since the development of the Inception module, the authors and the others have built another versions of this network. Like inception v2, v3, and v4. Also there is a network that has used the inception module and the ResNet together.</li>
<li><a href="https://arxiv.org/abs/1409.4842" target="_blank" rel="noopener">[Szegedy et al., 2014, Going Deeper with Convolutions]</a></li>
</ul>
<h3 id="Using-Open-Source-Implementation"><a href="#Using-Open-Source-Implementation" class="headerlink" title="Using Open-Source Implementation"></a>Using Open-Source Implementation</h3><ul>
<li>We have learned a lot of NNs and ConvNets architectures.</li>
<li>It turns out that a lot of these NN are difficult to replicated. because there are some details that may not presented on its papers. There are some other reasons like:<ul>
<li>Learning decay.</li>
<li>Parameter tuning.</li>
</ul>
</li>
<li>A lot of deep learning researchers are opening sourcing their code into Internet on sites like <a href="Github.com">Github</a>.</li>
<li>If you see a research paper and you want to build over it, the first thing you should do is to look for an open source implementation for this paper.</li>
<li>Some advantage of doing this is that you might download the network implementation along with its parameters/weights. The author might have used multiple GPUs and spent some weeks to reach this result and its right in front of you after you download it.</li>
</ul>
<h3 id="Transfer-Learning"><a href="#Transfer-Learning" class="headerlink" title="Transfer Learning"></a>Transfer Learning</h3><ul>
<li>If you are using a specific NN architecture that has been trained before, you can use this pretrained parameters/weights instead of random initialization to solve your problem.</li>
<li>It can help you boost the performance of the NN.</li>
<li>The pretrained models might have trained on a large datasets like ImageNet, Ms COCO, or pascal and took a lot of time to learn those parameters/weights with optimized hyperparameters. This can save you a lot of time.</li>
<li>Lets see an example:<ul>
<li>Lets say you have a cat classification problem which contains 3 classes Tigger, Misty and neither.</li>
<li>You don’t have much a lot of data to train a NN on these images.</li>
<li>Andrew recommends to go online and download a good NN with its weights, remove the softmax activation layer and put your own one and make the network learn only the new layer while other layer weights are fixed/frozen.</li>
<li>Frameworks have options to make the parameters frozen in some layers using <code>trainable = 0</code> or <code>freeze = 0</code></li>
<li>One of the tricks that can speed up your training, is to run the pretrained NN without final softmax layer and get an intermediate representation of your images and save them to disk. And then use these representation to a shallow NN network. This can save you the time needed to run an image through all the layers.<ul>
<li>Its like converting your images into vectors.</li>
</ul>
</li>
</ul>
</li>
<li>Another example:<ul>
<li>What if in the last example you have a lot of pictures for your cats.</li>
<li>One thing you can do is to freeze few layers from the beginning of the pretrained network and learn the other weights in the network.</li>
<li>Some other idea is to throw away the layers that aren’t frozen and put your own layers there.</li>
</ul>
</li>
<li>Another example:<ul>
<li>If you have enough data, you can fine tune all the layers in your pretrained network but don’t random initialize the parameters, leave the learned parameters as it is and learn from there. </li>
</ul>
</li>
</ul>
<h3 id="Data-Augmentation"><a href="#Data-Augmentation" class="headerlink" title="Data Augmentation"></a>Data Augmentation</h3><ul>
<li>If data is increased, your deep NN will perform better. Data augmentation is one of the techniques that deep learning uses to increase the performance of deep NN.</li>
<li>The majority of computer vision applications needs more data right now.</li>
<li>Some data augmentation methods that are used for computer vision tasks includes:<ul>
<li>Mirroring.</li>
<li>Random cropping.<ul>
<li>The issue with this technique is that you might take a wrong crop.</li>
<li>The solution is to make your crops big enough.</li>
</ul>
</li>
<li>Rotation.</li>
<li>Shearing.</li>
<li>Local warping.</li>
<li>Color shifting.<ul>
<li>For example, we add to R, G, and B some distortions that will make the image identified as the same for the human but is different for the computer.</li>
<li>In practice the added value are pulled from some probability distribution and these shifts are some small.</li>
<li>Makes your algorithm more robust in changing colors in images. </li>
<li>There are an algorithm which is called <strong><em>PCA color augmentation</em></strong> that decides the shifts needed automatically.</li>
</ul>
</li>
</ul>
</li>
<li>Implementing distortions during training:<ul>
<li>You can use a different CPU thread to make you a distorted mini batches while you are training your NN.</li>
</ul>
</li>
<li>Data Augmentation has also some hyperparameters. A good place to start is to find an open source data augmentation implementation and then use it or fine tune these hyperparameters.</li>
</ul>
<h3 id="State-of-Computer-Vision"><a href="#State-of-Computer-Vision" class="headerlink" title="State of Computer Vision"></a>State of Computer Vision</h3><ul>
<li>For a specific problem we may have a little data for it or a lots of data.</li>
<li>Speech recognition problems for example has a big amount of data, while image recognition has a medium amount of data and the object detection has a small amount of data nowadays.</li>
<li>If your problem has a large amount of data, researchers are tend to use:<ul>
<li>Simpler algorithms.</li>
<li>Less hand engineering.</li>
</ul>
</li>
<li>If you don’t have that much data people tend to try more hand engineering for the problem “Hacks”. Like choosing a more complex NN architecture.</li>
<li>Because we haven’t got that much data in a lot of computer vision problems, it relies a lot on hand engineering.</li>
<li>We will see in the next chapter that because the object detection has less data, a more complex NN architectures will be presented.</li>
<li>Tips for doing well on benchmarks/winning competitions:<ul>
<li>Ensembling.<ul>
<li>Train several networks independently and average their outputs. Merging down some classifiers.</li>
<li>After you decide the best architecture for your problem, initialize some of that randomly and train them independently.</li>
<li>This can give you a push by 2%</li>
<li>But this will slow down your production by the number of the ensembles. Also it takes more memory as it saves all the models in the memory.</li>
<li>People use this in competitions but few uses this in a real production.</li>
</ul>
</li>
<li>Multi-crop at test time.<ul>
<li>Run classifier on multiple versions of test versions and average results.</li>
<li>There is a technique called 10 crops that uses this.</li>
<li>This can give you a better result in the production.</li>
</ul>
</li>
</ul>
</li>
<li>Use open source code<ul>
<li>Use architectures of networks published in the literature.</li>
<li>Use open source implementations if possible.</li>
<li>Use pretrained models and fine-tune on your dataset.</li>
</ul>
</li>
</ul>
<h2 id="Object-detection"><a href="#Object-detection" class="headerlink" title="Object detection"></a>Object detection</h2><blockquote>
<p>Learn how to apply your knowledge of CNNs to one of the toughest but hottest field of computer vision: Object detection.</p>
</blockquote>
<h3 id="Object-Localization"><a href="#Object-Localization" class="headerlink" title="Object Localization"></a>Object Localization</h3><ul>
<li><p>Object detection is one of the areas in which deep learning is doing great in the past two years.</p>
</li>
<li><p>What are localization and detection?</p>
<ul>
<li><strong>Image Classification</strong>: <ul>
<li>Classify an image to a specific class. The whole image represents one class. We don’t want to know exactly where are the object. Usually only one object is presented.</li>
<li><img src="Classification.jpg" alt></li>
</ul>
</li>
<li><strong>Classification with localization</strong>:<ul>
<li>Given an image we want to learn the class of the image and where are the class location in the image. We need to detect a class and a rectangle of where that object is. Usually only one object is presented.</li>
<li><img src="ClassificationLoc.jpg" alt></li>
</ul>
</li>
<li><strong>Object detection</strong>:<ul>
<li>Given an image we want to detect all the object in the image that belong to a specific classes and give their location. An image can contain more than one object with different classes.</li>
<li><img src="ObjectDetection.png" alt></li>
</ul>
</li>
<li><strong>Semantic Segmentation</strong>:<ul>
<li>We want to Label each pixel in the image with a category label. Semantic Segmentation Don’t differentiate instances, only care about pixels. It detects no objects just pixels.</li>
<li>If there are two objects of the same class is intersected, we won’t be able to separate them.</li>
<li><img src="SemanticSegmentation.png" alt></li>
</ul>
</li>
<li><strong>Instance Segmentation</strong><ul>
<li>This is like the full problem. Rather than we want to predict the bounding box, we want to know which pixel label but also distinguish them.</li>
<li><img src="InstanceSegmentation.png" alt></li>
</ul>
</li>
</ul>
</li>
<li><p>To make image classification we use a Conv Net with a Softmax attached to the end of it.</p>
</li>
<li><p>To make classification with localization we use a Conv Net with a softmax attached to the end of it and a four numbers <code>bx</code>, <code>by</code>, <code>bh</code>, and <code>bw</code> to tell you the location of the class in the image. The dataset should contain this four numbers with the class too.</p>
</li>
<li><p>Defining the target label Y in classification with localization problem: </p>
<ul>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Y = [</span><br><span class="line">        Pc              # Probability of an object is presented</span><br><span class="line">        bx              # Bounding box</span><br><span class="line">        by              # Bounding box</span><br><span class="line">        bh              # Bounding box</span><br><span class="line">        bw              # Bounding box</span><br><span class="line">        c1              # The classes</span><br><span class="line">        c2</span><br><span class="line">        ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><p>Example (Object is present):</p>
<ul>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Y = [</span><br><span class="line">          1       # Object is present</span><br><span class="line">          0</span><br><span class="line">          0</span><br><span class="line">          100</span><br><span class="line">          100</span><br><span class="line">          0</span><br><span class="line">          1</span><br><span class="line">          0</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Example (When object isn’t presented):</p>
<ul>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Y = [</span><br><span class="line">          0       # Object isn&apos;t presented</span><br><span class="line">          ?       # ? means we dont care with other values</span><br><span class="line">          ?</span><br><span class="line">          ?</span><br><span class="line">          ?</span><br><span class="line">          ?</span><br><span class="line">          ?</span><br><span class="line">          ?</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>The loss function for the Y we have created (Example of the square error):</p>
<ul>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">L(y&apos;,y) = &#123;</span><br><span class="line">            (y1&apos;-y1)^2 + (y2&apos;-y2)^2 + ...           if y1 = 1</span><br><span class="line">            (y1&apos;-y1)^2                      if y1 = 0</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>In practice we use logistic regression for <code>pc</code>, log likely hood loss for classes, and squared error for the bounding box.</p>
</li>
</ul>
</li>
</ul>
<h3 id="Landmark-Detection"><a href="#Landmark-Detection" class="headerlink" title="Landmark Detection"></a>Landmark Detection</h3><ul>
<li><p>In some of the computer vision problems you will need to output some points. That is called <strong>landmark detection</strong>.</p>
</li>
<li><p>For example, if you are working in a face recognition problem you might want some points on the face like corners of the eyes, corners of the mouth, and corners of the nose and so on. This can help in a lot of application like detecting the pose of the face.</p>
</li>
<li><p>Y shape for the face recognition problem that needs to output 64 landmarks:</p>
<ul>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Y = [</span><br><span class="line">        THereIsAface                # Probability of face is presented 0 or 1</span><br><span class="line">        l1x,</span><br><span class="line">        l1y,</span><br><span class="line">        ....,</span><br><span class="line">        l64x,</span><br><span class="line">        l64y</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Another application is when you need to get the skeleton of the person using different landmarks/points in the person which helps in some applications.</p>
</li>
<li><p>Hint, in your labeled data, if <code>l1x,l1y</code> is the left corner of left eye, all other <code>l1x,l1y</code> of the other examples has to be the same.</p>
</li>
</ul>
<h3 id="Object-Detection"><a href="#Object-Detection" class="headerlink" title="Object Detection"></a>Object Detection</h3><ul>
<li>We will use a Conv net to solve the object detection problem using a technique called the sliding windows detection algorithm.</li>
<li>For example lets say we are working on Car object detection.</li>
<li>The first thing, we will train a Conv net on cropped car images and non car images.<ul>
<li><img src="18.png" alt></li>
</ul>
</li>
<li>After we finish training of this Conv net we will then use it with the sliding windows technique.</li>
<li>Sliding windows detection algorithm:<ol>
<li>Decide a rectangle size.</li>
<li>Split your image into rectangles of the size you picked. Each region should be covered. You can use some strides.</li>
<li>For each rectangle feed the image into the Conv net and decide if its a car or not.</li>
<li>Pick larger/smaller rectangles and repeat the process from 2 to 3.</li>
<li>Store the rectangles that contains the cars.</li>
<li>If two or more rectangles intersects choose the rectangle with the best accuracy.</li>
</ol>
</li>
<li>Disadvantage of sliding window is the computation time.</li>
<li>In the era of machine learning before deep learning, people used a hand crafted linear classifiers that classifies the object and then use the sliding window technique. The linear classier make it a cheap computation. But in the deep learning era that is so  computational expensive due to the complexity of the deep learning model.</li>
<li>To solve this problem, we can implement the sliding windows with a <strong><em>Convolutional approach</em></strong>.</li>
<li>One other idea is to compress your deep learning model.</li>
</ul>
<h3 id="Convolutional-Implementation-of-Sliding-Windows"><a href="#Convolutional-Implementation-of-Sliding-Windows" class="headerlink" title="Convolutional Implementation of Sliding Windows"></a>Convolutional Implementation of Sliding Windows</h3><ul>
<li>Turning FC layer into convolutional layers (predict image class from four classes):<ul>
<li><img src="19.png" alt></li>
<li>As you can see in the above image, we turned the FC layer into a Conv layer using a convolution with the width and height of the filter is the same as the width and height of the input.</li>
</ul>
</li>
<li><strong>Convolution implementation of sliding windows</strong>:<ul>
<li>First lets consider that the Conv net you trained is like this (No FC all is conv layers):<ul>
<li><img src="20.png" alt></li>
</ul>
</li>
<li>Say now we have a 16 x 16 x 3 image that we need to apply the sliding windows in. By the normal implementation that have been mentioned in the section before this, we would run this Conv net four times each rectangle size will be 16 x 16.</li>
<li>The convolution implementation will be as follows:<ul>
<li><img src="21.png" alt></li>
</ul>
</li>
<li>Simply we have feed the image into the same Conv net we have trained.</li>
<li>The left cell of the result “The blue one” will represent the the first sliding window of the normal implementation. The other cells will represent the others.</li>
<li>Its more efficient because it now shares the computations of the four times needed.</li>
<li>Another example would be:<ul>
<li><img src="22.png" alt></li>
</ul>
</li>
<li>This example has a total of 16 sliding windows that shares the computation together.</li>
<li><a href="https://arxiv.org/abs/1312.6229" target="_blank" rel="noopener">[Sermanet et al., 2014, OverFeat: Integrated recognition, localization and detection using convolutional networks]</a></li>
</ul>
</li>
<li>The weakness of the algorithm is that the position of the rectangle wont be so accurate. Maybe none of the rectangles is exactly on the object you want to recognize.<ul>
<li><img src="23.png" alt></li>
<li>In red, the rectangle we want and in blue is the required car rectangle.</li>
</ul>
</li>
</ul>
<h3 id="Bounding-Box-Predictions"><a href="#Bounding-Box-Predictions" class="headerlink" title="Bounding Box Predictions"></a>Bounding Box Predictions</h3><ul>
<li><p>A better algorithm than the one described in the last section is the <a href="https://arxiv.org/abs/1506.02640" target="_blank" rel="noopener">YOLO algorithm</a>.</p>
</li>
<li><p>YOLO stands for <em>you only look once</em> and was developed back in 2015.</p>
</li>
<li><p>Yolo Algorithm:</p>
<ul>
<li><img src="24.png" alt></li>
</ul>
<ol>
<li>Lets say we have an image of 100 X 100</li>
<li>Place a  3 x 3 grid on the image. For more smother results you should use 19 x 19 for the 100 x 100</li>
<li>Apply the classification and localization algorithm we discussed in a previous section to each section of the grid. <code>bx</code> and <code>by</code> will represent the center point of the object in each grid and will be relative to the box so the range is between 0 and 1 while <code>bh</code> and <code>bw</code> will represent the height and width of the object which can be greater than 1.0 but still a floating point value.</li>
<li>Do everything at once with the convolution sliding window. If Y shape is 1 x 8 as we discussed before then the output of the 100 x 100 image should be 3 x 3 x 8 which corresponds to 9 cell results.</li>
<li>Merging the results using predicted localization mid point.</li>
</ol>
</li>
<li><p>We have a problem if we have found more than one object in one grid box.</p>
</li>
<li><p>One of the best advantages that makes the YOLO algorithm popular is that it has a great speed and a Conv net implementation.</p>
</li>
<li><p>How is YOLO different from other Object detectors?  YOLO uses a single CNN<br>network for both classification and localizing the object using bounding boxes.</p>
</li>
<li><p>In the next sections we will see some ideas that can make the YOLO algorithm better.</p>
</li>
</ul>
<h3 id="Intersection-Over-Union"><a href="#Intersection-Over-Union" class="headerlink" title="Intersection Over Union"></a>Intersection Over Union</h3><ul>
<li>Intersection Over Union is a function used to evaluate the object detection algorithm.</li>
<li>It computes size of intersection and divide it by the union. More generally, <em>IoU</em> <em>is a measure of the overlap between two bounding boxes</em>.</li>
<li>For example:<ul>
<li><img src="25.png" alt></li>
<li>The red is the labeled output and the purple is the predicted output.</li>
<li>To compute Intersection Over Union we first compute the union area of the two rectangles which is “the first rectangle + second rectangle” Then compute the intersection area between these two rectangles.</li>
<li>Finally <code>IOU = intersection area / Union area</code></li>
</ul>
</li>
<li>If <code>IOU &gt;=0.5</code> then its good. The best answer will be 1.</li>
<li>The higher the IOU the better is the accuracy.</li>
</ul>
<h3 id="Non-max-Suppression"><a href="#Non-max-Suppression" class="headerlink" title="Non-max Suppression"></a>Non-max Suppression</h3><ul>
<li>One of the problems we have addressed in YOLO is that it can detect an object multiple times.</li>
<li>Non-max Suppression is a way to make sure that YOLO detects the object just once.</li>
<li>For example:<ul>
<li><img src="26.png" alt></li>
<li>Each car has two or more detections with different probabilities. This came from some of the grids that thinks that this is the center point of the object.</li>
</ul>
</li>
<li>Non-max suppression algorithm:<ol>
<li>Lets assume that we are targeting one class as an output class.</li>
<li>Y shape should be <code>[Pc, bx, by, bh, hw]</code> Where Pc is the probability if that object occurs.</li>
<li>Discard all boxes with <code>Pc &lt; 0.6</code>  </li>
<li>While there are any remaining boxes:<ol>
<li>Pick the box with the largest Pc Output that as a prediction.</li>
<li>Discard any remaining box with <code>IoU &gt; 0.5</code> with that box output in the previous step i.e any box with high overlap(greater than overlap threshold of 0.5).</li>
</ol>
</li>
</ol>
</li>
<li>If there are multiple classes/object types <code>c</code> you want to detect, you should run the Non-max suppression <code>c</code> times, once for every output class.</li>
</ul>
<h3 id="Anchor-Boxes"><a href="#Anchor-Boxes" class="headerlink" title="Anchor Boxes"></a>Anchor Boxes</h3><ul>
<li>In YOLO, a grid only detects one object. What if a grid cell wants to detect multiple object?<ul>
<li><img src="27.png" alt></li>
<li>Car and person grid is same here.</li>
<li>In practice this happens rarely.</li>
</ul>
</li>
<li>The idea of Anchor boxes helps us solving this issue.</li>
<li>If Y = <code>[Pc, bx, by, bh, bw, c1, c2, c3]</code> Then to use two anchor boxes like this:<ul>
<li>Y = <code>[Pc, bx, by, bh, bw, c1, c2, c3, Pc, bx, by, bh, bw, c1, c2, c3]</code>  We simply have repeated  the one anchor Y.</li>
<li>The two anchor boxes you choose should be known as a shape:<ul>
<li><img src="28.png" alt></li>
</ul>
</li>
</ul>
</li>
<li>So Previously, each object in training image is assigned to grid cell that contains that object’s midpoint.</li>
<li>With two anchor boxes, Each object in training image is assigned to grid cell that contains object’s midpoint and anchor box for the grid cell with <u>highest IoU</u>. You have to check where your object should be based on its rectangle closest to which anchor box.</li>
<li>Example of data:<ul>
<li><img src="29.png" alt></li>
<li>Where the car was near the anchor 2 than anchor 1.</li>
</ul>
</li>
<li>You may have two or more anchor boxes but you should know their shapes.<ul>
<li>how do you choose the anchor boxes and people used to just choose them by hand. Maybe five or ten anchor box shapes that spans a variety  of shapes that cover the types of objects you seem to detect frequently.</li>
<li>You may also use a k-means algorithm on your dataset to specify that.</li>
</ul>
</li>
<li>Anchor boxes allows your algorithm to specialize, means in our case to easily detect wider images or taller ones.</li>
</ul>
<h3 id="YOLO-Algorithm"><a href="#YOLO-Algorithm" class="headerlink" title="YOLO Algorithm"></a>YOLO Algorithm</h3><ul>
<li><p>YOLO is a state-of-the-art object detection model that is fast and accurate</p>
</li>
<li><p>Lets sum up and introduce the whole YOLO algorithm given an example.</p>
</li>
<li><p>Suppose we need to do object detection for our autonomous driver system.It needs to identify three classes:</p>
<ol>
<li>Pedestrian (Walks on ground).</li>
<li>Car.</li>
<li>Motorcycle.</li>
</ol>
</li>
<li><p>We decided to choose two anchor boxes, a taller one and a wide one.</p>
<ul>
<li>Like we said in practice they use five or more anchor boxes hand made or generated using k-means.</li>
</ul>
</li>
<li><p>Our labeled Y shape will be <code>[Ny, HeightOfGrid, WidthOfGrid, 16]</code>, where Ny is number of instances and each row (of size 16) is as follows:</p>
<ul>
<li><code>[Pc, bx, by, bh, bw, c1, c2, c3, Pc, bx, by, bh, bw, c1, c2, c3]</code></li>
</ul>
</li>
<li><p>Your dataset could be an image with a multiple labels and a rectangle for each label, we should go to your dataset and make the shape and values of Y like we agreed.</p>
<ul>
<li>An example:<ul>
<li><img src="30.png" alt></li>
</ul>
</li>
<li>We first initialize all of them to zeros and ?, then for each label and rectangle choose its closest grid point then the shape to fill it and then the best anchor point based on the IOU. so that the shape of Y for one image should be <code>[HeightOfGrid, WidthOfGrid,16]</code></li>
</ul>
</li>
<li><p>Train the labeled images on a Conv net. you should receive an output of <code>[HeightOfGrid, WidthOfGrid,16]</code> for our case.</p>
</li>
<li><p>To make predictions, run the Conv net on an image and run Non-max suppression algorithm for each class you have in our case there are 3 classes.</p>
<ul>
<li>You could get something like that:<ul>
<li><img src="31.png" alt></li>
<li>Total number of generated boxes are grid_width <em> grid_height </em> no_of_anchors = 3 x 3 x 2</li>
</ul>
</li>
<li>By removing the low probability predictions you should have:<ul>
<li><img src="32.png" alt></li>
</ul>
</li>
<li>Then get the best probability followed by the IOU filtering:<ul>
<li><img src="33.png" alt></li>
</ul>
</li>
</ul>
</li>
<li><p>YOLO are not good at detecting smaller object.</p>
</li>
<li><p><a href="https://arxiv.org/abs/1612.08242" target="_blank" rel="noopener">YOLO9000 Better, faster, stronger</a></p>
<ul>
<li><p>Summary:</p>
</li>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">________________________________________________________________________________________</span><br><span class="line">Layer (type)                     Output Shape          Param #     Connected to                </span><br><span class="line">========================================================================================</span><br><span class="line">input_1 (InputLayer)             (None, 608, 608, 3)   0                                 </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">conv2d_1 (Conv2D)                (None, 608, 608, 32)  864         input_1[0][0]         </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">batch_normalization_1 (BatchNorm (None, 608, 608, 32)  128         conv2d_1[0][0]       </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">leaky_re_lu_1 (LeakyReLU)        (None, 608, 608, 32)  0     batch_normalization_1[0][0] </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">max_pooling2d_1 (MaxPooling2D)   (None, 304, 304, 32)  0           leaky_re_lu_1[0][0]   </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">conv2d_2 (Conv2D)                (None, 304, 304, 64)  18432       max_pooling2d_1[0][0] </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">batch_normalization_2 (BatchNorm (None, 304, 304, 64)  256         conv2d_2[0][0]       </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">leaky_re_lu_2 (LeakyReLU)        (None, 304, 304, 64)  0     batch_normalization_2[0][0] </span><br><span class="line">_______________________________________________________________________________________</span><br><span class="line">max_pooling2d_2 (MaxPooling2D)   (None, 152, 152, 64)  0           leaky_re_lu_2[0][0]   </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">conv2d_3 (Conv2D)                (None, 152, 152, 128) 73728       max_pooling2d_2[0][0] </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">batch_normalization_3 (BatchNorm (None, 152, 152, 128) 512         conv2d_3[0][0]       </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">leaky_re_lu_3 (LeakyReLU)        (None, 152, 152, 128) 0     batch_normalization_3[0][0] </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">conv2d_4 (Conv2D)                (None, 152, 152, 64)  8192        leaky_re_lu_3[0][0]   </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">batch_normalization_4 (BatchNorm (None, 152, 152, 64)  256         conv2d_4[0][0]       </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">leaky_re_lu_4 (LeakyReLU)        (None, 152, 152, 64)  0     batch_normalization_4[0][0] </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">conv2d_5 (Conv2D)                (None, 152, 152, 128) 73728       leaky_re_lu_4[0][0]   </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">batch_normalization_5 (BatchNorm (None, 152, 152, 128) 512         conv2d_5[0][0]       </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">leaky_re_lu_5 (LeakyReLU)        (None, 152, 152, 128) 0     batch_normalization_5[0][0] </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">max_pooling2d_3 (MaxPooling2D)   (None, 76, 76, 128)   0           leaky_re_lu_5[0][0]   </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">conv2d_6 (Conv2D)                (None, 76, 76, 256)   294912      max_pooling2d_3[0][0] </span><br><span class="line">_______________________________________________________________________________________</span><br><span class="line">batch_normalization_6 (BatchNorm (None, 76, 76, 256)   1024        conv2d_6[0][0]       </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">leaky_re_lu_6 (LeakyReLU)        (None, 76, 76, 256)   0     batch_normalization_6[0][0] </span><br><span class="line">_______________________________________________________________________________________</span><br><span class="line">conv2d_7 (Conv2D)                (None, 76, 76, 128)   32768       leaky_re_lu_6[0][0]   </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">batch_normalization_7 (BatchNorm (None, 76, 76, 128)   512         conv2d_7[0][0]       </span><br><span class="line">_______________________________________________________________________________________</span><br><span class="line">leaky_re_lu_7 (LeakyReLU)        (None, 76, 76, 128)   0     batch_normalization_7[0][0] </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">conv2d_8 (Conv2D)                (None, 76, 76, 256)   294912      leaky_re_lu_7[0][0]   </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">batch_normalization_8 (BatchNorm (None, 76, 76, 256)   1024        conv2d_8[0][0]       </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">leaky_re_lu_8 (LeakyReLU)        (None, 76, 76, 256)   0     batch_normalization_8[0][0] </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">max_pooling2d_4 (MaxPooling2D)   (None, 38, 38, 256)   0           leaky_re_lu_8[0][0]   </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">conv2d_9 (Conv2D)                (None, 38, 38, 512)   1179648     max_pooling2d_4[0][0] </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">batch_normalization_9 (BatchNorm (None, 38, 38, 512)   2048        conv2d_9[0][0]       </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">leaky_re_lu_9 (LeakyReLU)        (None, 38, 38, 512)   0     batch_normalization_9[0][0] </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">conv2d_10 (Conv2D)               (None, 38, 38, 256)   131072      leaky_re_lu_9[0][0]   </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">batch_normalization_10 (BatchNor (None, 38, 38, 256)   1024        conv2d_10[0][0]       </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">leaky_re_lu_10 (LeakyReLU)       (None, 38, 38, 256)   0    batch_normalization_10[0][0]</span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">conv2d_11 (Conv2D)               (None, 38, 38, 512)   1179648    leaky_re_lu_10[0][0]   </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">batch_normalization_11 (BatchNor (None, 38, 38, 512)   2048        conv2d_11[0][0]       </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">leaky_re_lu_11 (LeakyReLU)       (None, 38, 38, 512)   0    batch_normalization_11[0][0]</span><br><span class="line">_______________________________________________________________________________________</span><br><span class="line">conv2d_12 (Conv2D)               (None, 38, 38, 256)   131072      leaky_re_lu_11[0][0] </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">batch_normalization_12 (BatchNor (None, 38, 38, 256)   1024        conv2d_12[0][0]       </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">leaky_re_lu_12 (LeakyReLU)       (None, 38, 38, 256)   0   batch_normalization_12[0][0]</span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">conv2d_13 (Conv2D)               (None, 38, 38, 512)   1179648     leaky_re_lu_12[0][0] </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">batch_normalization_13 (BatchNor (None, 38, 38, 512)   2048        conv2d_13[0][0]       </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">leaky_re_lu_13 (LeakyReLU)       (None, 38, 38, 512)   0    batch_normalization_13[0][0]</span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">max_pooling2d_5 (MaxPooling2D)   (None, 19, 19, 512)   0           leaky_re_lu_13[0][0] </span><br><span class="line">_______________________________________________________________________________________</span><br><span class="line">conv2d_14 (Conv2D)               (None, 19, 19, 1024)  4718592     max_pooling2d_5[0][0] </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">batch_normalization_14 (BatchNor (None, 19, 19, 1024)  4096        conv2d_14[0][0]       </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">leaky_re_lu_14 (LeakyReLU)       (None, 19, 19, 1024)  0    batch_normalization_14[0][0]</span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">conv2d_15 (Conv2D)               (None, 19, 19, 512)   524288      leaky_re_lu_14[0][0] </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">batch_normalization_15 (BatchNor (None, 19, 19, 512)   2048        conv2d_15[0][0]       </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">leaky_re_lu_15 (LeakyReLU)       (None, 19, 19, 512)   0    batch_normalization_15[0][0]</span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">conv2d_16 (Conv2D)               (None, 19, 19, 1024)  4718592     leaky_re_lu_15[0][0] </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">batch_normalization_16 (BatchNor (None, 19, 19, 1024)  4096        conv2d_16[0][0]       </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">leaky_re_lu_16 (LeakyReLU)       (None, 19, 19, 1024)  0    batch_normalization_16[0][0]</span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">conv2d_17 (Conv2D)               (None, 19, 19, 512)   524288      leaky_re_lu_16[0][0] </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">batch_normalization_17 (BatchNor (None, 19, 19, 512)   2048        conv2d_17[0][0]       </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">leaky_re_lu_17 (LeakyReLU)       (None, 19, 19, 512)   0    batch_normalization_17[0][0]</span><br><span class="line">_______________________________________________________________________________________</span><br><span class="line">conv2d_18 (Conv2D)               (None, 19, 19, 1024)  4718592     leaky_re_lu_17[0][0] </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">batch_normalization_18 (BatchNor (None, 19, 19, 1024)  4096        conv2d_18[0][0]       </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">leaky_re_lu_18 (LeakyReLU)       (None, 19, 19, 1024)  0    batch_normalization_18[0][0]</span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">conv2d_19 (Conv2D)               (None, 19, 19, 1024)  9437184     leaky_re_lu_18[0][0] </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">batch_normalization_19 (BatchNor (None, 19, 19, 1024)  4096        conv2d_19[0][0]       </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">conv2d_21 (Conv2D)               (None, 38, 38, 64)    32768       leaky_re_lu_13[0][0]</span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">leaky_re_lu_19 (LeakyReLU)       (None, 19, 19, 1024)  0    batch_normalization_19[0][0]</span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">batch_normalization_21 (BatchNor (None, 38, 38, 64)    256         conv2d_21[0][0]       </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">conv2d_20 (Conv2D)               (None, 19, 19, 1024)  9437184     leaky_re_lu_19[0][0]</span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">leaky_re_lu_21 (LeakyReLU)       (None, 38, 38, 64)    0    batch_normalization_21[0][0]</span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">batch_normalization_20 (BatchNor (None, 19, 19, 1024)  4096        conv2d_20[0][0]       </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">space_to_depth_x2 (Lambda)       (None, 19, 19, 256)   0           leaky_re_lu_21[0][0] </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">leaky_re_lu_20 (LeakyReLU)       (None, 19, 19, 1024)  0    batch_normalization_20[0][0]</span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">concatenate_1 (Concatenate)      (None, 19, 19, 1280)  0         space_to_depth_x2[0][0] </span><br><span class="line">                                                                  leaky_re_lu_20[0][0] </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">conv2d_22 (Conv2D)               (None, 19, 19, 1024)  11796480    concatenate_1[0][0]   </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">batch_normalization_22 (BatchNor (None, 19, 19, 1024)  4096        conv2d_22[0][0]       </span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">leaky_re_lu_22 (LeakyReLU)       (None, 19, 19, 1024)  0    batch_normalization_22[0][0]</span><br><span class="line">________________________________________________________________________________________</span><br><span class="line">conv2d_23 (Conv2D)               (None, 19, 19, 425)   435625      leaky_re_lu_22[0][0] </span><br><span class="line">===============================================================================================</span><br><span class="line">Total params: 50,983,561</span><br><span class="line">Trainable params: 50,962,889</span><br><span class="line">Non-trainable params: 20,672</span><br><span class="line">_______________________________________________________________________________________________</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>You can find implementations for YOLO here:</p>
<ul>
<li><a href="https://github.com/allanzelener/YAD2K" target="_blank" rel="noopener">https://github.com/allanzelener/YAD2K</a></li>
<li><a href="https://github.com/thtrieu/darkflow" target="_blank" rel="noopener">https://github.com/thtrieu/darkflow</a></li>
<li><a href="https://pjreddie.com/darknet/yolo/" target="_blank" rel="noopener">https://pjreddie.com/darknet/yolo/</a></li>
</ul>
</li>
</ul>
<h3 id="Region-Proposals-R-CNN"><a href="#Region-Proposals-R-CNN" class="headerlink" title="Region Proposals (R-CNN)"></a>Region Proposals (R-CNN)</h3><ul>
<li><p>R-CNN is an algorithm that also makes an object detection.</p>
</li>
<li><p>Yolo tells that its faster:</p>
<ul>
<li><blockquote>
<p>Our model has several advantages over classifier-based systems. It looks at the whole image at test time so its predictions are informed by global context in the image. It also makes predictions with a single network evaluation unlike systems like R-CNN which require thousands for a single image. This makes it extremely fast, more than 1000x faster than R-CNN and 100x faster than Fast R-CNN. See our paper for more details on the full system.</p>
</blockquote>
</li>
</ul>
</li>
<li><p>But one of the downsides of YOLO that it process a lot of areas where no objects are present.</p>
</li>
<li><p><strong>R-CNN</strong> stands for regions with Conv Nets.</p>
</li>
<li><p>R-CNN tries to pick a few windows and run a Conv net (your confident classifier) on top of them.</p>
</li>
<li><p>The algorithm R-CNN uses to pick windows is called a segmentation algorithm. Outputs something like this:</p>
<ul>
<li><img src="34.png" alt></li>
</ul>
</li>
<li><p>If for example the segmentation algorithm produces 2000 blob then we should run our classifier/CNN on top of these blobs.</p>
</li>
<li><p>There has been a lot of work regarding R-CNN tries to make it faster:</p>
<ul>
<li>R-CNN:<ul>
<li>Propose regions. Classify proposed regions one at a time. Output label + bounding box.</li>
<li>Downside is that its slow.</li>
<li><a href="https://arxiv.org/abs/1311.2524" target="_blank" rel="noopener">[Girshik et. al, 2013. Rich feature hierarchies for accurate object detection and semantic segmentation]</a></li>
</ul>
</li>
<li>Fast R-CNN:<ul>
<li>Propose regions. Use convolution implementation of sliding windows to classify all the proposed regions.</li>
<li><a href="https://arxiv.org/abs/1504.08083" target="_blank" rel="noopener">[Girshik, 2015. Fast R-CNN]</a></li>
</ul>
</li>
<li>Faster R-CNN:<ul>
<li>Use convolutional network to propose regions.</li>
<li><a href="https://arxiv.org/abs/1506.01497" target="_blank" rel="noopener">[Ren et. al, 2016. Faster R-CNN: Towards real-time object detection with region proposal networks]</a></li>
</ul>
</li>
<li>Mask R-CNN:<ul>
<li><a href="https://arxiv.org/abs/1703.06870" target="_blank" rel="noopener">https://arxiv.org/abs/1703.06870</a></li>
</ul>
</li>
</ul>
</li>
<li><p>Most of the implementation of faster R-CNN are still slower than YOLO.</p>
</li>
<li><p>Andew Ng thinks that the idea behind YOLO is better than R-CNN because you are able to do all the things in just one time instead of two times.</p>
</li>
<li><p>Other algorithms that uses one shot to get the output includes <strong>SSD</strong> and <strong>MultiBox</strong>.</p>
<ul>
<li><a href="https://arxiv.org/abs/1512.02325" target="_blank" rel="noopener">[Wei Liu, et. al 2015 SSD: Single Shot MultiBox Detector]</a></li>
</ul>
</li>
<li><p><strong>R-FCN</strong> is similar to Faster R-CNN but more efficient.</p>
<ul>
<li><a href="https://arxiv.org/abs/1605.06409" target="_blank" rel="noopener">[Jifeng Dai, et. al 2016 R-FCN: Object Detection via Region-based Fully Convolutional Networks ]</a></li>
</ul>
</li>
</ul>
<h2 id="Special-applications-Face-recognition-amp-Neural-style-transfer"><a href="#Special-applications-Face-recognition-amp-Neural-style-transfer" class="headerlink" title="Special applications: Face recognition &amp; Neural style transfer"></a>Special applications: Face recognition &amp; Neural style transfer</h2><blockquote>
<p>Discover how CNNs can be applied to multiple fields, including art generation and face recognition. Implement your own algorithm to generate art and recognize faces!</p>
</blockquote>
<h3 id="Face-Recognition"><a href="#Face-Recognition" class="headerlink" title="Face Recognition"></a>Face Recognition</h3><h4 id="What-is-face-recognition"><a href="#What-is-face-recognition" class="headerlink" title="What is face recognition?"></a>What is face recognition?</h4><ul>
<li>Face recognition system identifies a person’s face. It can work on both images or videos.</li>
<li><strong><u>Liveness detection</u></strong> within a video face recognition system prevents the network from identifying a face in an image. It can be learned by supervised deep learning using a dataset for live human and in-live human and sequence learning.</li>
<li>Face verification vs. face recognition:<ul>
<li>Verification:<ul>
<li>Input: image, name/ID. (1 : 1)</li>
<li>Output: whether the input image is that of the claimed person.</li>
<li>“is this the claimed person?”</li>
</ul>
</li>
<li>Recognition:<ul>
<li>Has a database of K persons</li>
<li>Get an input image</li>
<li>Output ID if the image is any of the K persons (or not recognized)</li>
<li>“who is this person?”</li>
</ul>
</li>
</ul>
</li>
<li>We can use a face verification system to make a face recognition system. The accuracy of the verification system has to be high (around 99.9% or more) to be use accurately within a recognition system because the recognition system accuracy will be less than the verification system given K persons. </li>
</ul>
<h4 id="One-Shot-Learning"><a href="#One-Shot-Learning" class="headerlink" title="One Shot Learning"></a>One Shot Learning</h4><ul>
<li>One of the face recognition challenges is to solve one shot learning problem.</li>
<li>One Shot Learning: A recognition system is able to recognize a person, learning from one image.</li>
<li>Historically deep learning doesn’t work well with a small number of data.</li>
<li>Instead to make this work, we will learn a <strong>similarity function</strong>:<ul>
<li>d( <strong>img1</strong>, <strong>img2</strong> ) = degree of difference between images.</li>
<li>We want d result to be low in case of the same faces.</li>
<li>We use tau T as a threshold for d:<ul>
<li>If d( <strong>img1</strong>, <strong>img2</strong> ) &lt;= T    Then the faces are the same.</li>
</ul>
</li>
</ul>
</li>
<li>Similarity function helps us solving the one shot learning. Also its robust to new inputs.</li>
</ul>
<h4 id="Siamese-Network"><a href="#Siamese-Network" class="headerlink" title="Siamese Network"></a>Siamese Network</h4><ul>
<li>We will implement the similarity function using a type of NNs called Siamease Network in which we can pass multiple inputs to the two or more networks with the same architecture and parameters.</li>
<li>Siamese network architecture are as the following:<ul>
<li><img src="35.png" alt></li>
<li>We make 2 identical conv nets which encodes an input image into a vector. In the above image the vector shape is (128, )</li>
<li>The loss function will be <code>d(x1, x2) = || f(x1) - f(x2) ||^2</code></li>
<li>If <code>X1</code>, <code>X2</code> are the same person, we want d to be low. If they are different persons, we want d to be high.</li>
<li><a href="https://www.cv-foundation.org/openaccess/content_cvpr_2014/html/Taigman_DeepFace_Closing_the_2014_CVPR_paper.html" target="_blank" rel="noopener">[Taigman et. al., 2014. DeepFace closing the gap to human level performance]</a></li>
</ul>
</li>
</ul>
<h4 id="Triplet-Loss"><a href="#Triplet-Loss" class="headerlink" title="Triplet Loss"></a>Triplet Loss</h4><ul>
<li>Triplet Loss is one of the loss functions we can use to solve the similarity distance in a Siamese network.</li>
<li>Our learning objective in the triplet loss function is to get the distance between an <strong>Anchor</strong> image and a <strong>positive</strong> or a <strong>negative</strong> image.<ul>
<li>Positive means same person, while negative means different person.</li>
</ul>
</li>
<li>The triplet name came from that we are comparing an anchor A with a positive P and a negative N image.</li>
<li>Formally we want:<ul>
<li>Positive distance to be less than negative distance</li>
<li><code>||f(A) - f(P)||^2  &lt;= ||f(A) - f(N)||^2</code></li>
<li>Then</li>
<li><code>||f(A) - f(P)||^2  - ||f(A) - f(N)||^2 &lt;= 0</code></li>
<li>To make sure the NN won’t get an output of zeros easily:</li>
<li><code>||f(A) - f(P)||^2  - ||f(A) - f(N)||^2 &lt;= -alpha</code><ul>
<li>Alpha is a small number. Sometimes its called the margin.</li>
</ul>
</li>
<li>Then</li>
<li><code>||f(A) - f(P)||^2  - ||f(A) - f(N)||^2 + alpha &lt;= 0</code></li>
</ul>
</li>
<li>Final Loss function:<ul>
<li>Given 3 images (A, P, N)</li>
<li><code>L(A, P, N) = max (||f(A) - f(P)||^2  - ||f(A) - f(N)||^2 + alpha , 0)</code></li>
<li><code>J = Sum(L(A[i], P[i], N[i]) , i)</code> for all triplets of images.</li>
</ul>
</li>
<li>You need multiple images of the same person in your dataset. Then get some triplets out of your dataset. Dataset should be big enough.</li>
<li>Choosing the triplets A, P, N:<ul>
<li>During training if A, P, N are chosen randomly (Subjet to A and P are the same and A and N aren’t the same) then one of the problems this constrain is easily satisfied <ul>
<li><code>d(A, P) + alpha &lt;= d (A, N)</code> </li>
<li>So the NN wont learn much</li>
</ul>
</li>
<li>What we want to do is choose triplets that are <strong>hard</strong> to train on.<ul>
<li>So for all the triplets we want this to be satisfied:</li>
<li><code>d(A, P) + alpha &lt;= d (A, N)</code></li>
<li>This can be achieved by for example same poses!</li>
<li>Find more at the paper.</li>
</ul>
</li>
</ul>
</li>
<li>Details are in this paper <a href="https://arxiv.org/abs/1503.03832" target="_blank" rel="noopener">[Schroff et al.,2015, FaceNet: A unified embedding for face recognition and clustering]</a></li>
<li>Commercial recognition systems are trained on a large datasets like 10/100 million images.</li>
<li>There are a lot of pretrained models and parameters online for face recognition.</li>
</ul>
<h4 id="Face-Verification-and-Binary-Classification"><a href="#Face-Verification-and-Binary-Classification" class="headerlink" title="Face Verification and Binary Classification"></a>Face Verification and Binary Classification</h4><ul>
<li>Triplet loss is one way to learn the parameters of a conv net for face recognition there’s another way to learn these parameters as a straight binary classification problem.</li>
<li>Learning the similarity function another way:<ul>
<li><img src="36.png" alt></li>
<li>The final layer is a sigmoid layer.</li>
<li><code>Y&#39; = wi * Sigmoid ( f(x(i)) - f(x(j)) ) + b</code> where the subtraction is the Manhattan distance between f(x(i)) and f(x(j))</li>
<li>Some other similarities can be Euclidean and Ki square similarity.</li>
<li>The NN here is Siamese means the top and bottom convs has the same parameters.</li>
</ul>
</li>
<li>The paper for this work: <a href="https://www.cv-foundation.org/openaccess/content_cvpr_2014/html/Taigman_DeepFace_Closing_the_2014_CVPR_paper.html" target="_blank" rel="noopener">[Taigman et. al., 2014. DeepFace closing the gap to human level performance]</a></li>
<li>A good performance/deployment trick:<ul>
<li>Pre-compute all the images that you are using as a comparison to the vector f(x(j))</li>
<li>When a new image that needs to be compared, get its vector f(x(i)) then put it with all the pre computed vectors and pass it to the sigmoid function.</li>
</ul>
</li>
<li>This version works quite as well as the triplet loss function.</li>
<li>Available implementations for face recognition using deep learning includes:<ul>
<li><a href="https://cmusatyalab.github.io/openface/" target="_blank" rel="noopener">Openface</a></li>
<li><a href="https://github.com/davidsandberg/facenet" target="_blank" rel="noopener">FaceNet</a></li>
<li><a href="https://github.com/RiweiChen/DeepFace" target="_blank" rel="noopener">DeepFace</a></li>
</ul>
</li>
</ul>
<h3 id="Neural-Style-Transfer"><a href="#Neural-Style-Transfer" class="headerlink" title="Neural Style Transfer"></a>Neural Style Transfer</h3><h4 id="What-is-neural-style-transfer"><a href="#What-is-neural-style-transfer" class="headerlink" title="What is neural style transfer?"></a>What is neural style transfer?</h4><ul>
<li>Neural style transfer is one of the application of Conv nets.</li>
<li>Neural style transfer takes a content image <code>C</code> and a style image <code>S</code> and generates the content image <code>G</code> with the style of style image.</li>
<li><img src="37.png" alt></li>
<li>In order to implement this you need to look at the features extracted by the Conv net at the shallower and deeper layers.</li>
<li>It uses a previously trained convolutional network like VGG, and builds on top of that. The idea of using a network trained on a different task and applying it to a new task is called transfer learning.</li>
</ul>
<h4 id="What-are-deep-ConvNets-learning"><a href="#What-are-deep-ConvNets-learning" class="headerlink" title="What are deep ConvNets learning?"></a>What are deep ConvNets learning?</h4><ul>
<li>Visualizing what a deep network is learning:<ul>
<li>Given this AlexNet like Conv net:<ul>
<li><img src="38.png" alt></li>
</ul>
</li>
<li>Pick a unit in layer l. Find the nine image patches that maximize the unit’s activation. <ul>
<li>Notice that a hidden unit in layer one will see relatively small portion of NN, so if you plotted it it will match a small image in the shallower layers while it will get larger image in deeper layers.</li>
</ul>
</li>
<li>Repeat for other units and layers.</li>
<li>It turns out that layer 1 are learning the low level representations like colors and edges.</li>
</ul>
</li>
<li>You will find out that each layer are learning more complex representations.<ul>
<li><img src="39.png" alt></li>
</ul>
</li>
<li>The first layer was created using the weights of the first layer. Other images are generated using the receptive field in the image that triggered the neuron to be max.</li>
<li><a href="https://arxiv.org/abs/1311.2901" target="_blank" rel="noopener">[Zeiler and Fergus., 2013, Visualizing and understanding convolutional networks]</a></li>
<li>A good explanation on how to get <strong>receptive field</strong> given a layer:<ul>
<li><img src="receptiveField.png" alt></li>
<li>From <a href="https://medium.com/@nikasa1889/a-guide-to-receptive-field-arithmetic-for-convolutional-neural-networks-e0f514068807" target="_blank" rel="noopener">A guide to receptive field arithmetic for Convolutional Neural Networks</a></li>
</ul>
</li>
</ul>
<h4 id="Cost-Function"><a href="#Cost-Function" class="headerlink" title="Cost Function"></a>Cost Function</h4><ul>
<li>We will define a cost function for the generated image that measures how good it is.</li>
<li>Give a content image C, a style image S, and a generated image G:<ul>
<li><code>J(G) = alpha * J(C,G) + beta * J(S,G)</code></li>
<li><code>J(C, G)</code> measures how similar is the generated image to the Content image.</li>
<li><code>J(S, G)</code> measures how similar is the generated image to the Style image.</li>
<li>alpha and beta are relative weighting to the similarity and these are hyperparameters.</li>
</ul>
</li>
<li>Find the generated image G:<ol>
<li>Initiate G randomly<ul>
<li>For example G: 100 X 100 X 3</li>
</ul>
</li>
<li>Use gradient descent to minimize <code>J(G)</code><ul>
<li><code>G = G - dG</code>  We compute the gradient image and use gradient decent to minimize the cost function.</li>
</ul>
</li>
</ol>
</li>
<li>The iterations might be as following image:<ul>
<li>To Generate this:<ul>
<li><img src="40.png" alt></li>
</ul>
</li>
<li>You will go through this:<ul>
<li><img src="41.png" alt></li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Content-Cost-Function"><a href="#Content-Cost-Function" class="headerlink" title="Content Cost Function"></a>Content Cost Function</h4><ul>
<li>In the previous section we showed that we need a cost function for the content image and the style image to measure how similar is them to each other.</li>
<li>Say you use hidden layer <code>l</code> to compute content cost. <ul>
<li>If we choose <code>l</code> to be small (like layer 1), we will force the network to get similar output to the original content image.</li>
<li>In practice <code>l</code> is not too shallow and not too deep but in the middle.</li>
</ul>
</li>
<li>Use pre-trained ConvNet. (E.g., VGG network)</li>
<li>Let <code>a(c)[l]</code> and <code>a(G)[l]</code> be the activation of layer <code>l</code> on the images.</li>
<li>If <code>a(c)[l]</code> and <code>a(G)[l]</code> are similar then they will have the same content<ul>
<li><code>J(C, G) at a layer l = 1/2 || a(c)[l] - a(G)[l] ||^2</code></li>
</ul>
</li>
</ul>
<h4 id="Style-Cost-Function"><a href="#Style-Cost-Function" class="headerlink" title="Style Cost Function"></a>Style Cost Function</h4><ul>
<li>Meaning of the <strong><em>style</em></strong> of an image:<ul>
<li>Say you are using layer l’s activation to measure <strong><em>style</em></strong>.</li>
<li>Define style as correlation between <strong>activations</strong> across <strong>channels</strong>. <ul>
<li>That means given an activation like this:<ul>
<li><img src="42.png" alt></li>
</ul>
</li>
<li>How correlate is the orange channel with the yellow channel?</li>
<li>Correlated means if a value appeared in a specific channel a specific value will appear too (Depends on each other).</li>
<li>Uncorrelated means if a value appeared in a specific channel doesn’t mean that another value will appear (Not depend on each other)</li>
</ul>
</li>
<li>The correlation tells you how a components might occur or not occur together in the same image.</li>
</ul>
</li>
<li>The correlation of style image channels should appear in the generated image channels.</li>
<li>Style matrix (Gram matrix):<ul>
<li>Let <code>a(l)[i, j, k]</code> be the activation at l with <code>(i=H, j=W, k=C)</code></li>
<li>Also <code>G(l)(s)</code> is matrix of shape <code>nc(l) x nc(l)</code><ul>
<li>We call this matrix style matrix or Gram matrix.</li>
<li>In this matrix each cell will tell us how correlated is a channel to another channel.</li>
</ul>
</li>
<li>To populate the matrix we use these equations to compute style matrix of the style image and the generated image.<ul>
<li><img src="43.png" alt></li>
<li>As it appears its the sum of the multiplication of each member in the matrix.</li>
</ul>
</li>
</ul>
</li>
<li>To compute gram matrix efficiently:<ul>
<li>Reshape activation from H X W X C to HW X C</li>
<li>Name the reshaped activation F.</li>
<li><code>G[l] = F * F.T</code></li>
</ul>
</li>
<li>Finally the cost function will be as following:<ul>
<li><code>J(S, G) at layer l = (1/ 2 * H * W * C) || G(l)(s) - G(l)(G) ||</code></li>
</ul>
</li>
<li>And if you have used it from some layers<ul>
<li><code>J(S, G) = Sum (lamda[l]*J(S, G)[l], for all layers)</code></li>
</ul>
</li>
<li>Steps to be made if you want to create a tensorflow model for neural style transfer:<ol>
<li>Create an Interactive Session.</li>
<li>Load the content image.</li>
<li>Load the style image</li>
<li>Randomly initialize the image to be generated</li>
<li>Load the VGG16 model</li>
<li>Build the TensorFlow graph:<ul>
<li>Run the content image through the VGG16 model and compute the content cost</li>
<li>Run the style image through the VGG16 model and compute the style cost</li>
<li>Compute the total cost</li>
<li>Define the optimizer and the learning rate</li>
</ul>
</li>
<li>Initialize the TensorFlow graph and run it for a large number of iterations, updating the generated image at every step.</li>
</ol>
</li>
</ul>
<h4 id="1D-and-3D-Generalizations"><a href="#1D-and-3D-Generalizations" class="headerlink" title="1D and 3D Generalizations"></a>1D and 3D Generalizations</h4><ul>
<li>So far we have used the Conv nets for images which are 2D.</li>
<li>Conv nets can work with 1D and 3D data as well.</li>
<li>An example of 1D convolution:<ul>
<li>Input shape (14, 1)</li>
<li>Applying 16 filters with F = 5 , S = 1</li>
<li>Output shape will be 10 X 16</li>
<li>Applying 32 filters with F = 5, S = 1</li>
<li>Output shape will be 6 X 32</li>
</ul>
</li>
<li>The general equation <code>(N - F)/S + 1</code> can be applied here but here it gives a vector rather than a 2D matrix.</li>
<li>1D data comes from a lot of resources such as waves, sounds, heartbeat signals. </li>
<li>In most of the applications that uses 1D data we use Recurrent Neural Network RNN.</li>
<li>3D data also are available in some applications like CT scan:<ul>
<li><img src="44.png" alt></li>
</ul>
</li>
<li>Example of 3D convolution:<ul>
<li>Input shape (14, 14,14, 1)</li>
<li>Applying 16 filters with F = 5 , S = 1</li>
<li>Output shape (10, 10, 10, 16)</li>
<li>Applying 32 filters with F = 5, S = 1</li>
<li>Output shape will be (6, 6, 6, 32)</li>
</ul>
</li>
</ul>
<h2 id="Extras"><a href="#Extras" class="headerlink" title="Extras"></a>Extras</h2><h3 id="Keras"><a href="#Keras" class="headerlink" title="Keras"></a>Keras</h3><ul>
<li>Keras is a high-level neural networks API (programming framework), written in Python and capable of running on top of several lower-level frameworks including TensorFlow, Theano, and CNTK.</li>
<li>Keras was developed to enable deep learning engineers to build and experiment with different models very quickly.</li>
<li>Just as TensorFlow is a higher-level framework than Python, Keras is an even higher-level framework and provides additional abstractions.</li>
<li>Keras will work fine for many common models.</li>
<li>Layers in Keras:<ul>
<li>Dense (Fully connected layers).<ul>
<li>A linear function followed by a non linear function.</li>
</ul>
</li>
<li>Convolutional layer.</li>
<li>Pooling layer.</li>
<li>Normalisation layer.<ul>
<li>A batch normalization layer.</li>
</ul>
</li>
<li>Flatten layer<ul>
<li>Flatten a matrix into vector.</li>
</ul>
</li>
<li>Activation layer<ul>
<li>Different activations include: relu, tanh, sigmoid, and softmax.</li>
</ul>
</li>
</ul>
</li>
<li>To train and test a model in Keras there are four steps:<ol>
<li>Create the model.</li>
<li>Compile the model by calling <code>model.compile(optimizer = &quot;...&quot;, loss = &quot;...&quot;, metrics = [&quot;accuracy&quot;])</code></li>
<li>Train the model on train data by calling <code>model.fit(x = ..., y = ..., epochs = ..., batch_size = ...)</code><ul>
<li>You can add a validation set while training too.</li>
</ul>
</li>
<li>Test the model on test data by calling <code>model.evaluate(x = ..., y = ...)</code></li>
</ol>
</li>
<li>Summarize of step in Keras: Create-&gt;Compile-&gt;Fit/Train-&gt;Evaluate/Test</li>
<li><code>Model.summary()</code> gives a lot of useful informations regarding your model including each layers inputs, outputs, and number of parameters at each layer.</li>
<li>To choose the Keras backend you should go to <code>$HOME/.keras/keras.json</code> and change the file to the desired backend like Theano or Tensorflow or whatever backend you want.</li>
<li>After you create the model you can run it in a tensorflow session without compiling, training, and testing capabilities.</li>
<li>You can save your model with <code>model_save</code> and load your model using <code>model_load</code> This will save your whole trained model to disk with the trained weights.</li>
</ul>
<p><br><br><br><br><br><br>These Notes were made by <a href="mailto:mma18@fayoum.edu.eg" target="_blank" rel="noopener">Mahmoud Badry</a> @2017</p>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Convolutional Neural Networks</tag>
      </tags>
  </entry>
  <entry>
    <title>Sequence Models</title>
    <url>/Sequence-Models/2019/03/27/</url>
    <content><![CDATA[<p><strong>Reference from lecture slides of Andrew Ng and github repo from <a href="https://github.com/mbadry1/DeepLearning.ai-Summary" target="_blank" rel="noopener">DeepLearning.ai-Summary</a></strong></p>
<h1 id="Sequence-Models"><a href="#Sequence-Models" class="headerlink" title="Sequence Models"></a>Sequence Models</h1><p>This is the fifth and final course of the deep learning specialization at <a href="https://www.coursera.org/specializations/deep-learning" target="_blank" rel="noopener">Coursera</a> which is moderated by <a href="http://deeplearning.ai/" target="_blank" rel="noopener">deeplearning.ai</a>. The course is taught by Andrew Ng.</p>
<h2 id="Table-of-contents"><a href="#Table-of-contents" class="headerlink" title="Table of contents"></a>Table of contents</h2><ul>
<li><a href="#sequence-models">Sequence Models</a><ul>
<li><a href="#table-of-contents">Table of contents</a></li>
<li><a href="#course-summary">Course summary</a></li>
<li><a href="#recurrent-neural-networks">Recurrent Neural Networks</a><ul>
<li><a href="#why-sequence-models">Why sequence models</a></li>
<li><a href="#notation">Notation</a></li>
<li><a href="#recurrent-neural-network-model">Recurrent Neural Network Model</a></li>
<li><a href="#backpropagation-through-time">Backpropagation through time</a></li>
<li><a href="#different-types-of-rnns">Different types of RNNs</a></li>
<li><a href="#language-model-and-sequence-generation">Language model and sequence generation</a></li>
<li><a href="#sampling-novel-sequences">Sampling novel sequences</a></li>
<li><a href="#vanishing-gradients-with-rnns">Vanishing gradients with RNNs</a></li>
<li><a href="#gated-recurrent-unit-gru">Gated Recurrent Unit (GRU)</a></li>
<li><a href="#long-short-term-memory-lstm">Long Short Term Memory (LSTM)</a></li>
<li><a href="#bidirectional-rnn">Bidirectional RNN</a></li>
<li><a href="#deep-rnns">Deep RNNs</a></li>
<li><a href="#back-propagation-with-rnns">Back propagation with RNNs</a></li>
</ul>
</li>
<li><a href="#natural-language-processing--word-embeddings">Natural Language Processing &amp; Word Embeddings</a><ul>
<li><a href="#introduction-to-word-embeddings">Introduction to Word Embeddings</a><ul>
<li><a href="#word-representation">Word Representation</a></li>
<li><a href="#using-word-embeddings">Using word embeddings</a></li>
<li><a href="#properties-of-word-embeddings">Properties of word embeddings</a></li>
<li><a href="#embedding-matrix">Embedding matrix</a></li>
</ul>
</li>
<li><a href="#learning-word-embeddings-word2vec--glove">Learning Word Embeddings: Word2vec &amp; GloVe</a><ul>
<li><a href="#learning-word-embeddings">Learning word embeddings</a></li>
<li><a href="#word2vec">Word2Vec</a></li>
<li><a href="#negative-sampling">Negative Sampling</a></li>
<li><a href="#glove-word-vectors">GloVe word vectors</a></li>
</ul>
</li>
<li><a href="#applications-using-word-embeddings">Applications using Word Embeddings</a><ul>
<li><a href="#sentiment-classification">Sentiment Classification</a></li>
<li><a href="#debiasing-word-embeddings">Debiasing word embeddings</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#sequence-models--attention-mechanism">Sequence models &amp; Attention mechanism</a><ul>
<li><a href="#various-sequence-to-sequence-architectures">Various sequence to sequence architectures</a><ul>
<li><a href="#basic-models">Basic Models</a></li>
<li><a href="#picking-the-most-likely-sentence">Picking the most likely sentence</a></li>
<li><a href="#beam-search">Beam Search</a></li>
<li><a href="#refinements-to-beam-search">Refinements to Beam Search</a></li>
<li><a href="#error-analysis-in-beam-search">Error analysis in beam search</a></li>
<li><a href="#bleu-score">BLEU Score</a></li>
<li><a href="#attention-model-intuition">Attention Model Intuition</a></li>
<li><a href="#attention-model">Attention Model</a></li>
</ul>
</li>
<li><a href="#speech-recognition---audio-data">Speech recognition - Audio data</a><ul>
<li><a href="#speech-recognition">Speech recognition</a></li>
<li><a href="#trigger-word-detection">Trigger Word Detection</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#extras">Extras</a><ul>
<li><a href="#machine-translation-attention-model-from-notebooks">Machine translation attention model (From notebooks)</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Course-summary"><a href="#Course-summary" class="headerlink" title="Course summary"></a>Course summary</h2><p>Here are the course summary as its given on the course <a href="https://www.coursera.org/learn/nlp-sequence-models" target="_blank" rel="noopener">link</a>:</p>
<blockquote>
<p>This course will teach you how to build models for natural language, audio, and other sequence data. Thanks to deep learning, sequence algorithms are working far better than just two years ago, and this is enabling numerous exciting applications in speech recognition, music synthesis, chatbots, machine translation, natural language understanding, and many others. </p>
<p>You will:</p>
<ul>
<li>Understand how to build and train Recurrent Neural Networks (RNNs), and commonly-used variants such as GRUs and LSTMs.</li>
<li>Be able to apply sequence models to natural language problems, including text synthesis. </li>
<li>Be able to apply sequence models to audio applications, including speech recognition and music synthesis.</li>
</ul>
<p>This is the fifth and final course of the Deep Learning Specialization.</p>
</blockquote>
<h2 id="Recurrent-Neural-Networks"><a href="#Recurrent-Neural-Networks" class="headerlink" title="Recurrent Neural Networks"></a>Recurrent Neural Networks</h2><blockquote>
<p>Learn about recurrent neural networks. This type of model has been proven to perform extremely well on temporal data. It has several variants including LSTMs, GRUs and Bidirectional RNNs, which you are going to learn about in this section.</p>
</blockquote>
<h3 id="Why-sequence-models"><a href="#Why-sequence-models" class="headerlink" title="Why sequence models"></a>Why sequence models</h3><ul>
<li>Sequence Models like RNN and LSTMs have greatly transformed learning on sequences in the past few years.</li>
<li>Examples of sequence data in applications:<ul>
<li>Speech recognition (<strong>Sequence to sequence</strong>):<ul>
<li>X:           Wave sequence</li>
<li>Y:           Text sequence</li>
</ul>
</li>
<li>Music generation (<strong>one to sequence</strong>):<ul>
<li>X:           (Can be nothing or an integer)</li>
<li>Y:           Wave sequence</li>
</ul>
</li>
<li>Sentiment classification (<strong>sequence to one</strong>):<ul>
<li>X:          Text sequence</li>
<li>Y:           Integer rating from one to five</li>
</ul>
</li>
<li>DNA sequence analysis (<strong>sequence to sequence</strong>):<ul>
<li>X:           DNA sequence</li>
<li>Y:            DNA Labels</li>
</ul>
</li>
<li>Machine translation (<strong>sequence to sequence</strong>):<ul>
<li>X:            Text sequence (In a language)</li>
<li>Y:            Text sequence (In other language)</li>
</ul>
</li>
<li>Video activity recognition (<strong>Sequence to one</strong>):<ul>
<li>X:            Video frames</li>
<li>Y:             Label (Activity)</li>
</ul>
</li>
<li>Name entity recognition  (<strong>Sequence to sequence</strong>):<ul>
<li>X:            Text sequence</li>
<li>Y:             Label sequence</li>
<li>Can be used by seach engines to index different type of words inside a text.</li>
</ul>
</li>
</ul>
</li>
<li>As you can see there are different data with different input and outputs - sequence or one - that can be learned by supervised learning models.</li>
<li>There are different ways and models to tackle different sequence problem.</li>
</ul>
<h3 id="Notation"><a href="#Notation" class="headerlink" title="Notation"></a>Notation</h3><ul>
<li>In this section we will discuss the notations that we will use through the course.</li>
<li><strong>Motivating example</strong>:<ul>
<li>In the content of name entity recognition application let:<ul>
<li>X: “Harry Potter and Hermoine Granger invented a new spell.”</li>
<li>Y:   1   1   0   1   1   0   0   0   0</li>
<li>Both elements has a shape of 9. 1 means its a name, while 0 means its not a name.</li>
</ul>
</li>
</ul>
</li>
<li>We will index the first element of X by X<sup><1></1></sup>, the second X<sup><2></2></sup> and so on.<ul>
<li>X<sup><1></1></sup> = Harry</li>
<li>X<sup><2></2></sup> = Potter</li>
</ul>
</li>
<li>Similarly, we will index the first element of Y by Y<sup><1></1></sup>, the second Y<sup><2></2></sup> and so on.<ul>
<li>Y<sup><1></1></sup> = 1</li>
<li>Y<sup><2></2></sup> = 1</li>
</ul>
</li>
<li>X<sup>\<t></t></sup> gets an element by index t.</li>
<li>T<sub>x</sub> is the size of the input sequence and T<sub>y</sub> is the size of the output sequence.<ul>
<li>T<sub>x</sub> = T<sub>y</sub> = 9 in the last example although they can be different in other problems than name entity one.</li>
</ul>
</li>
<li>X<sub>(i)</sub><sup>\<t></t></sup> is the element t of the sequence i in the training. Similarly for Y</li>
<li>T<sub>x</sub> <sup>(i)</sup> is the size of the input sequence i.  It can be different across the sets. Similarly for Y</li>
<li><strong>Representing words</strong>:<ul>
<li>We will now work in this course with <strong>NLP</strong> which stands for nature language processing. One of the challenges of NLP is how can we represent a word?</li>
<li><u>The first thing</u> we need a <strong>vocabulary</strong> list that contains all the words in our target sets.<ul>
<li>Example:<ul>
<li>[a … And   … Harry … Potter … Zulu ]</li>
<li>Each word will have a unique index that it can be represented with.</li>
<li>The sorting here is by alphabetic order.</li>
</ul>
</li>
</ul>
</li>
<li>Vocabulary sizes in modern applications are from 30,000 to 50,000. 100,000 is not uncommon. Some of the bigger companies uses a million.</li>
<li>To build vocabulary list, you can read all the text you have and get m words with the most occurrence, or search online for m most occurrence words.</li>
<li><u>The next step</u> is to create a one <strong>hot encoding sequence</strong> for each word in your dataset given the vocabulary you have created.</li>
<li>While converting, what if you meet a word thats not in your dictionary?<ul>
<li>Well you can add a token in the vocabulary <code>&lt;UNK&gt;</code> which stands for unknown text and use its index in filling your one hot vector.</li>
</ul>
</li>
<li>Full example can be found here:<ul>
<li><img src="01.png" alt></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Recurrent-Neural-Network-Model"><a href="#Recurrent-Neural-Network-Model" class="headerlink" title="Recurrent Neural Network Model"></a>Recurrent Neural Network Model</h3><ul>
<li>Why not a standard network for sequence problems? There are two problems:<ul>
<li>Inputs, outputs can be different lengths in different examples!<ul>
<li>This can be solved in normal NNs by paddings with the maximum lengths but its not a good solution.</li>
</ul>
</li>
<li>Doesn’t share features learned across different positions of text/sequence.<ul>
<li>Using a feature sharing like in CNNs can significantly reduce the number of parameters in your model. Thats what we will do in RNNs.</li>
</ul>
</li>
</ul>
</li>
<li>Recurrent neural networks doesn’t have the two mentioned problems.</li>
<li>Lets build a RNN that solves <strong>name entity recognition</strong> task:<ul>
<li><img src="02.png" alt></li>
<li>In this problem T<sub>x</sub> = T<sub>y</sub>. In other problems where they aren’t equal, the RNN architecture may be different.</li>
<li>a<sup><0></0></sup> is usually initialized with zeros, but some others may initialize it randomly in some cases.</li>
<li>There are three weight matrices here: W<sub>ax</sub>, W<sub>aa</sub>, and W<sub>ya</sub> with shapes:<ul>
<li>W<sub>ax</sub>: (NoOfHiddenNeurons, n<sub>x</sub>)</li>
<li>W<sub>aa</sub>: (NoOfHiddenNeurons, NoOfHiddenNeurons)</li>
<li>W<sub>ya</sub>: (n<sub>y</sub>, NoOfHiddenNeurons)</li>
</ul>
</li>
</ul>
</li>
<li>The weight matrix W<sub>aa</sub> is the memory the RNN is trying to maintain from the previous layers.</li>
<li>A lot of papers and books write the same architecture this way:<ul>
<li><img src="03.png" alt></li>
<li>Its harder to interpreter. Its easier to roll this drawings to the unrolled version we have descried.</li>
</ul>
</li>
<li>In the discussed RNN architecture,  the current output y<sup>^\<t></t></sup> depends on the previous inputs and activations.</li>
<li>Lets have this example ‘ He Said, “Teddy Roosevelt was a great president”  ‘. In this example Teddy is a person name but we know that from the word <strong>President</strong> that came after Teddy not from <strong>He</strong> and <strong>said</strong> that is before it.</li>
<li>So limitation of the discussed architecture is that it can not learn from behind. To address this problem we will later discuss <strong>Bidirectional</strong> RNNs  (BRNNs).</li>
<li>Now lets discuss the forward propagation equations on the discussed architecture:<ul>
<li><img src="04.png" alt></li>
<li>The activation function of a is usually tanh or RELU and for y depends on your task choosing some activation functions like sigmoid and softmax. In name entity recognition task we are solving, we will use Sigmoid because we only have two classes.</li>
</ul>
</li>
<li>In order to help us develop complex RNN architectures, the last equations needs to be simplified a bit.</li>
<li><strong>Simplified RNN notation</strong>:<ul>
<li><img src="05.png" alt></li>
<li>w<sub>a</sub> shape: (NoOfHiddenNeurons, NoOfHiddenNeurons + n<sub>x</sub>)</li>
<li>[a<sup><t-1></t-1></sup>, x<sup>t</sup>] shape: (NoOfHiddenNeurons + n<sub>x</sub>, 1)<h3 id="Backpropagation-through-time"><a href="#Backpropagation-through-time" class="headerlink" title="Backpropagation through time"></a>Backpropagation through time</h3></li>
</ul>
</li>
<li>Lets see how backpropagation works with the RNN architecture we have developed.</li>
<li>Often, Deep learning frameworks do backpropagation automatically for you. But its useful to know how it works especially in RNNs.</li>
<li>Here is the graph:<ul>
<li><img src="06.png" alt></li>
<li>Where w<sup>a</sup>, b<sup>a</sup>, w<sup>y</sup>, and b<sup>y</sup> are shared across each element in a sequence.</li>
</ul>
</li>
<li>We will use the cross entropy loss function:<ul>
<li><img src="07.png" alt></li>
<li>Where the first equation is the loss for one element and the loss for the whole sequence is given by the summation over all the calculated values.</li>
</ul>
</li>
<li>Graph with losses:<ul>
<li><img src="08.png" alt></li>
</ul>
</li>
<li>The backpropagation here is called <strong>backpropagation through time</strong> because of the passed activation <code>a</code> from one sequence element to another.<h3 id="Different-types-of-RNNs"><a href="#Different-types-of-RNNs" class="headerlink" title="Different types of RNNs"></a>Different types of RNNs</h3></li>
<li>So far we have seen only one RNN architecture in which T<sub>x</sub> equals T<sub>Y</sub> always. In some other problems, they may not equal so we need different architectures.</li>
<li>The ideas in this section was inspired by Andrej Karpathy <a href="http://karpathy.github.io/2015/05/21/rnn-effectiveness/" target="_blank" rel="noopener">blog</a>. Mainly this image has all types:<ul>
<li><img src="09.jpg" alt></li>
</ul>
</li>
<li>The architecture we have descried before is called <strong>Many to Many</strong>.</li>
<li>In sentiment analysis problem, X is a text while Y is an integer that rangers from 1 to 5. The RNN architecture for that is <strong>Many to One</strong> as in Andrej Karpathy image.<ul>
<li><img src="10.png" alt></li>
</ul>
</li>
<li>A <strong>One to Many</strong> architecture application would be music generation.<ul>
<li><img src="11.png" alt></li>
<li>Note that starting the second layer we are feeding the generated output back to the network.</li>
</ul>
</li>
<li>There are another interesting architecture in <strong>Many To Many</strong>. Applications like machine translation inputs and outputs sequences have different lengths in most of the cases. So an alternative Many To Many architecture that fits the translation would be as follows:<ul>
<li><img src="12.png" alt></li>
<li>There are an encoder and a decoder in the architecture. The encoder encodes the input sequence into one matrix and feed it to the decoder to generate the outputs. Encoder and decoder have different weight matrices.</li>
</ul>
</li>
<li>There are another architecture which is the <strong>attention</strong> architecture which we will talk about in chapter 3.<h3 id="Language-model-and-sequence-generation"><a href="#Language-model-and-sequence-generation" class="headerlink" title="Language model and sequence generation"></a>Language model and sequence generation</h3></li>
<li>RNNs do very well in language model problems. In this section we will build a language model using RNNs.</li>
<li><strong>What is a language model</strong><ul>
<li>Lets say we are solving a speech recognition problem and some one says a sentence that can be interpreted into to two sentences:<ul>
<li>The apple and <strong>pair</strong> salad</li>
<li>The apple and <strong>pear</strong> salad</li>
</ul>
</li>
<li><strong>Pair</strong> and <strong>pear</strong> sounds exactly the same, so how would a speech recognition application choose from the two.</li>
<li>Thats where the language models comes. It gives a probability for the two sentences and the application decides the best based on this probability.</li>
</ul>
</li>
<li>The job of a language model is giving a probability of any given sentence .Also the probability of the next sentence.</li>
<li><strong>How to build language modeling with RNNs?</strong><ul>
<li>The first thing is to get a <strong>training set</strong>: Large corpus of target language text.</li>
<li>Then tokenize this training set by getting the vocabulary and then one-hot each word.</li>
<li>Put an end of sentence token <code>&lt;EOS&gt;</code> with the vocabulary and include it with each converted sentence. Also like we have mentioned before use the token <code>&lt;UNK&gt;</code> for the unknown words.</li>
</ul>
</li>
<li>Given the sentence “Cats average 15 hours of sleep a day. <code>&lt;EOS&gt;</code>“<ul>
<li>In training time we will use this:<ul>
<li><img src="13.png" alt></li>
<li>We pass to 0 vector - One hot -  to the first layer.</li>
</ul>
</li>
<li>The loss function is defined by cross entropy loss:<ul>
<li><img src="14.png" alt></li>
<li><code>i</code>  is for all elements in the training set.</li>
</ul>
</li>
</ul>
</li>
<li>To use this model:<ol>
<li>For predicting the chance of <strong>next word</strong>, we feed the sentence to the RNN and then get the final y<sup>^\<t></t></sup> hot vector and sort it by maximum probability.</li>
<li>For taking the <strong>probability of a sentence</strong>, we compute this:<ul>
<li>p(y<sup><1></1></sup>, y<sup><2></2></sup>, y<sup><3></3></sup>) = p(y<sup><1></1></sup>) <em> p(y<sup><2></2></sup> | y<sup><1></1></sup>) </em> p(y<sup><3></3></sup> | y<sup><1></1></sup>, y<sup><2></2></sup>)</li>
<li>This is simply feeding the sentence to the RNN and multiply the probability for the given word in all the output hot encoded.<h3 id="Sampling-novel-sequences"><a href="#Sampling-novel-sequences" class="headerlink" title="Sampling novel sequences"></a>Sampling novel sequences</h3></li>
</ul>
</li>
</ol>
</li>
<li>After a sequence model is trained on a language model, to check what the model has learned you can apply it on a sample novel sequence.</li>
<li>Lets see the steps of how we can sample a novel sequence from a trained sequence language model:<ol>
<li>Given this model:<ul>
<li><img src="15.png" alt></li>
</ul>
</li>
<li>We first pass a<sup><0></0></sup> = zeros vector, and x<sup><1></1></sup> = zeros vector.</li>
<li>Then we choose a prediction from y<sup>^<1></1></sup> using random distribution. For example it could be “The”.<ul>
<li>In Numpy this can be made using: <code>numpy.random.choice</code></li>
<li>This is the line where you get a random sentences each time you run a novel sequence.</li>
</ul>
</li>
<li>We pass the last predicted word with the calculated  a<sup><1></1></sup></li>
<li>We keep doing 3 &amp; 4 steps for a fixed length or until we get the <code>&lt;EOS&gt;</code> token.</li>
<li>You can reject any <code>&lt;UNK&gt;</code> token if you mind finding it in you output.</li>
</ol>
</li>
<li>So far we have build a word level language model. A <strong>character</strong> level language model also can be made.</li>
<li>In the character level language model the vocabulary will contain <code>[a-zA-Z0-9]</code>, space, and some special characters.</li>
<li>Cons of character level language model compared to the word level language model:<ul>
<li>There will be no <code>&lt;UNK&gt;</code> token.</li>
<li>It can deal with any word.</li>
</ul>
</li>
<li>But main disadvantage you will have a larger sequences! and also more computationally expensive and harder to train.<h3 id="Vanishing-gradients-with-RNNs"><a href="#Vanishing-gradients-with-RNNs" class="headerlink" title="Vanishing gradients with RNNs"></a>Vanishing gradients with RNNs</h3></li>
<li><p>One of the problems with naive RNNs that it runs into <strong>vanishing gradient</strong> problems.</p>
</li>
<li><p>An RNN that process a sequence data with the size of 10,000 time sets, has 10,000 deep layers which is so hard to optimize.</p>
</li>
<li><p>To address the problem lets take an example. Suppose we are working with language modeling problem and there are two sequences that it tries to learn:</p>
<ul>
<li>“The <strong>cat</strong>, which already ate ……………………, <strong>was</strong> full”</li>
<li>“The <strong>cats</strong>, which already ate ……………………, <strong>were</strong> full”</li>
<li>The dots represents many words</li>
</ul>
</li>
<li><p>What we need to learn here that “was” came with “cat” and that “were” came with “cats”. The naive RNN will find it hard to get this relation.</p>
</li>
<li><p>As we have discussed in Deep neural networks, deeper networks are luckily to get into the vanishing gradient problem. In deep nets to compute the weights of the earlier layers you have to compute all the weights after these weights which causes the gradient to vanish. That also happens with RNNs with a long sequence size.</p>
<ul>
<li><img src="16.png" alt></li>
<li>For computing the word “Was”, we need to compute the gradient for everything behind. Multiplying by  fractions tends to vanish the gradient, while multiplication of large number tends to explode it.</li>
<li>Therefore half of your weights may not be updated properly!</li>
</ul>
</li>
<li><p>In the problem we descried it means that its hard for the network to memorize “was” word all over back to “cat”. So in this case, the network won’t be identify the singular/plural words so that it give it the right grammar word.</p>
</li>
<li><p>The conclusion is that RNNs aren’t good in <strong>long term dependencies</strong>.</p>
</li>
<li><blockquote>
<p>In theory, RNNs are absolutely capable of handling such “long-term dependencies.” A human could carefully pick parameters for them to solve toy problems of this form. Sadly, in practice, RNNs don’t seem to be able to learn them. <a href="http://colah.github.io/posts/2015-08-Understanding-LSTMs/" target="_blank" rel="noopener">http://colah.github.io/posts/2015-08-Understanding-LSTMs/</a></p>
</blockquote>
</li>
<li><p>Vanishing gradients is tends to be the bigger problems with RNNs than the Exploding gradients problem. We will discuss how to solve it in the next sections.</p>
</li>
<li><p>Exploding gradients can be easily seen when your weight values become <code>NAN</code> . So one of the ways solve exploding gradient is to apply <strong>gradient clipping</strong> means if your gradient is more than a threshold deal with the gradient as a fixed value. </p>
<ul>
<li><img src="26.png" alt></li>
</ul>
</li>
<li><p><strong>Extra</strong>:</p>
<ul>
<li>Solution for the Exploding gradient problem:<ul>
<li>Truncated back propagation.<ul>
<li>Not to update all the weights in the way back.</li>
<li>Not optimal. You won’t update all the weights.</li>
</ul>
</li>
<li>Gradient clipping.</li>
</ul>
</li>
<li>Solution for the Vanishing gradient problem:<ul>
<li>Weight initialization.<ul>
<li>Like he initialization.</li>
</ul>
</li>
<li>Echo state networks.</li>
<li>Use LSTM/GRU networks.<ul>
<li>Most popular.</li>
<li>We will discuss it next.<h3 id="Gated-Recurrent-Unit-GRU"><a href="#Gated-Recurrent-Unit-GRU" class="headerlink" title="Gated Recurrent Unit (GRU)"></a>Gated Recurrent Unit (GRU)</h3></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>GRU is an RNN type that can help solve the vanishing gradient problem and can remember the long term dependencies.</p>
</li>
<li><p>The basic RNN unit can be visualized to be like this:</p>
<ul>
<li><img src="17.png" alt></li>
</ul>
</li>
<li><p>We will represent the GRU with a similar drawings.</p>
</li>
<li><p>Each layer in <strong>GRUs</strong>  has a new variable <code>C</code> which is the memory cell. It can tell to wether memorize a something or not.</p>
</li>
<li><p>In GRUs, C<sup>\<t></t></sup> = a<sup>\<t></t></sup></p>
</li>
<li><p>Equations of the GRUs:</p>
<ul>
<li><img src="18.png" alt></li>
<li>The update gate is between 0 and 1<ul>
<li>To understand GRUs imagine that the update gate is either 0 or 1 most of the time.</li>
</ul>
</li>
<li>So we update the memory cell based on the update cell and the previous cell.</li>
</ul>
</li>
<li><p>Lets take the cat sentence example and apply it to understand this equations:</p>
<ul>
<li><p>Sentence: “The <strong>cat</strong>, which already ate ……………………, <strong>was</strong> full”</p>
</li>
<li><p>We will suppose that U is 0 or 1 and is a bit that tells us if a singular word needs to be memorized.</p>
</li>
<li><p>Splitting the words and get values of C and U at each place:</p>
<ul>
<li>| Word    | Update gate(U)             | Cell memory (C) |<br>| ———- | ————————————— | ———————- |<br>| The     | 0                          | val             |<br>| cat     | 1                          | newVal          |<br>| which   | 0                          | newVal          |<br>| already | 0                          | newVal          |<br>| …     | 0                          | newVal          |<br>| was     | 1 (I dont need it anymore) | newerVal        |<br>| full    | ..                         | ..              |</li>
</ul>
</li>
</ul>
</li>
<li>Drawing for the GRUs<ul>
<li><img src="19.png" alt></li>
<li>Drawings like in <a href="http://colah.github.io/posts/2015-08-Understanding-LSTMs/" target="_blank" rel="noopener">http://colah.github.io/posts/2015-08-Understanding-LSTMs/</a> is so popular and makes it easier to understand GRUs and LSTMs. But Andrew Ng finds its better to look at the equations.</li>
</ul>
</li>
<li>Because the update gate U is usually a small number like 0.00001, GRUs doesn’t suffer the vanishing gradient problem.<ul>
<li>In the equation this makes C<sup>\<t></t></sup> = C<sup>\<t-1></t-1></sup> in a lot of cases.</li>
</ul>
</li>
<li>Shapes:<ul>
<li>a<sup>\<t></t></sup> shape is (NoOfHiddenNeurons, 1)</li>
<li>c<sup>\<t></t></sup> is the same as a<sup>\<t></t></sup></li>
<li>c<sup>~\<t></t></sup> is the same as a<sup>\<t></t></sup></li>
<li>u<sup>\<t></t></sup> is also the same dimensions of a<sup>\<t></t></sup></li>
</ul>
</li>
<li>The multiplication in the equations are element wise multiplication.</li>
<li>What has been descried so var is the Simplified GRU unit. Lets now describe the full one:<ul>
<li>The full GRU contains a new gate that is used with to calculate the candidate C. The gate tells you how relevance is C<sup>\<t-1></t-1></sup> to C<sup>\<t></t></sup></li>
<li>Equations:<ul>
<li><img src="20.png" alt></li>
</ul>
</li>
<li>Shapes are the same</li>
</ul>
</li>
<li>So why we use these architectures, why don’t we change them, how we know they will work, why not add another gate, why not use the simpler GRU instead of the full GRU; well researchers has experimented over years all the various types of these architectures with many many different versions and also addressing the vanishing gradient problem. They have found that full GRUs are one of the best RNN architectures  to be used for many different problems. You can make your design but put in mind that GRUs and LSTMs are standards.</li>
</ul>
<h3 id="Long-Short-Term-Memory-LSTM"><a href="#Long-Short-Term-Memory-LSTM" class="headerlink" title="Long Short Term Memory (LSTM)"></a>Long Short Term Memory (LSTM)</h3><ul>
<li>Other unit that can make you do long term dependences is an LSTM unit and its more powerful and general than GRUs.</li>
<li>In LSTMs , C<sup>\<t></t></sup> != a<sup>\<t></t></sup></li>
<li>Here are the equations of an LSTM unit:<ul>
<li><img src="21.png" alt></li>
</ul>
</li>
<li>In GRUs we have an update gate <code>U</code>, a relevance gate <code>r</code>, and a candidate cell variables C<sup>~\<t></t></sup> while in LSTMs we have an update gate <code>U</code> - Sometimes its called Input gate I -, a forget gate <code>F</code>, an output gate <code>O</code>, and a candidate cell variables C<sup>~\<t></t></sup></li>
<li>Drawings - which is inspired from <a href="http://colah.github.io/posts/2015-08-Understanding-LSTMs/" target="_blank" rel="noopener">http://colah.github.io/posts/2015-08-Understanding-LSTMs/</a> -: <ul>
<li><img src="22.png" alt></li>
</ul>
</li>
<li>Some Variants on LSTMs includes:<ul>
<li>LSTM with <strong>peephole connections</strong>.<ul>
<li>The normal LSTM with C<sup>\<t-1></t-1></sup> included with every gate.</li>
</ul>
</li>
</ul>
</li>
<li>There isn’t a universal superior in choosing between LSTMs and its variants. Some win and some problems and some don’t. One of the advantages of GRUs is that its simpler and can be used to build much bigger network but the LSTM is more powerful and general as we said.<h3 id="Bidirectional-RNN"><a href="#Bidirectional-RNN" class="headerlink" title="Bidirectional RNN"></a>Bidirectional RNN</h3></li>
<li>There are still some ideas to make a powerful sequence model. One of them is bidirectional RNNs and another is Deep RNNs.</li>
<li>As we saw before, here are an example on Name entity recognition:<ul>
<li><img src="23.png" alt></li>
</ul>
</li>
<li>The name Teddy cannot be learned from <strong>He</strong> and <strong>said</strong>, but can be learned from <strong>bears</strong>.</li>
<li>BRNNs fixes this issue.</li>
<li>Here are BRNNs architecture:<ul>
<li><img src="24.png" alt></li>
</ul>
</li>
<li>Hint that BRNNs are <strong>acyclic graph</strong>!</li>
<li>The forward propagation goes from left to right, and from right to left. It learns from both sides.</li>
<li>To make predictions we use y<sup>^\<t></t></sup> by using the two activations that comes from left and right.</li>
<li>The blocks here can be any RNN block including the basic RNNs, LSTMs, or GRUs.</li>
<li>For a lot of NLP or text processing problems, a BRNN with LSTM appears to be commonly used.</li>
<li><p>The disadvantage of BRNNs that you need the entire sequence before you can process it. For example in live speech recognition if you used BRNNs you will need to wait for the person who speaks to stop to take the entire sequence and then make your predictions.</p>
<h3 id="Deep-RNNs"><a href="#Deep-RNNs" class="headerlink" title="Deep RNNs"></a>Deep RNNs</h3></li>
<li><p>In a lot of cases the standard one layer RNNs will solve your problem. But in some problems its useful to stack some RNN layers to make a deeper network.</p>
</li>
<li>For example, a deep RNN with 3 layers would look like this:<ul>
<li><img src="25.png" alt></li>
</ul>
</li>
<li>In feed forward deep nets we can have till 100 or 200 layer and this would be a so big network. In deep RNNs stacking 3 layers is considered deep and already expensive.</li>
<li>In some cases you might see a deep network that are connected after recurrent cell.</li>
</ul>
<h3 id="Back-propagation-with-RNNs"><a href="#Back-propagation-with-RNNs" class="headerlink" title="Back propagation with RNNs"></a>Back propagation with RNNs</h3><ul>
<li><blockquote>
<p>In modern deep learning frameworks, you only have to implement the forward pass, and the framework takes care of the backward pass, so most deep learning engineers do not need to bother with the details of the backward pass. If however you are an expert in calculus and want to see the details of backprop in RNNs, you can work through this optional portion of the notebook.</p>
</blockquote>
</li>
<li><p>The quote is taken from this <a href="https://www.coursera.org/learn/nlp-sequence-models/notebook/X20PE/building-a-recurrent-neural-network-step-by-step" target="_blank" rel="noopener">notebook</a>. If you want the details of the back propagation with programming notes look at the linked notebook.</p>
</li>
</ul>
<h2 id="Natural-Language-Processing-amp-Word-Embeddings"><a href="#Natural-Language-Processing-amp-Word-Embeddings" class="headerlink" title="Natural Language Processing &amp; Word Embeddings"></a>Natural Language Processing &amp; Word Embeddings</h2><blockquote>
<p>Natural language processing with deep learning is an important combination. Using word vector representations and embedding layers you can train recurrent neural networks with outstanding performances in a wide variety of industries. Examples of applications are sentiment analysis, named entity recognition and machine translation.</p>
</blockquote>
<h3 id="Introduction-to-Word-Embeddings"><a href="#Introduction-to-Word-Embeddings" class="headerlink" title="Introduction to Word Embeddings"></a>Introduction to Word Embeddings</h3><h4 id="Word-Representation"><a href="#Word-Representation" class="headerlink" title="Word Representation"></a>Word Representation</h4><ul>
<li>NLP has been revolutionized by deep learning and especially be RNNs and deep RNNs.</li>
<li>Word embeddings is a way of representing words. It lets your algorithm automatically understand the analogies between words like “king” and “queen”.</li>
<li>So far we have defined our language by a vocabulary. Then represented our words with one hot vector that represent the word in the vocabulary.<ul>
<li>An image example would be:<ul>
<li><img src="27.png" alt></li>
</ul>
</li>
<li>We will use the annotation <strong>O</strong> <sub>idx</sub> for any word that is represented with one hot like in the image.</li>
<li>One of  the weaknesses of this representation is that it treats a word as a thing that itself and it doesn’t allow an algorithm to generalize across words.<ul>
<li>For example: “I want a glass of <strong>orange</strong> <strong>__</strong>“ , a model should predict the next word as <strong>Juice</strong>.</li>
<li>A similar example “I want a glass of <strong>apple</strong> <strong>__</strong>“ , a model won’t easily predict <strong>juice</strong> here if it doesn’t trained on it. And if so the two examples aren’t related although orange and apple are similar.</li>
</ul>
</li>
<li>Inner product between any hot encoding word is zero. Also the distances between them are the same.</li>
</ul>
</li>
<li>So, instead of a one-hot presentation, won’t it be nice if we can learn a featurized representation with each of these words: Man, Woman, King, Queen, Apple, and orange?<ul>
<li><img src="28.png" alt></li>
<li>Each word will have a 300 features with type of float point number for example.</li>
<li>Each word column will be 300 dimensional vector which will be the representation.</li>
<li>We will use the notation <strong>e</strong><sub>5391</sub> to describe Man word features vector.</li>
<li>Now if we went to the examples we descried again:<ul>
<li>“I want a glass of <strong>orange</strong> <strong>__</strong>“ </li>
<li>I want a glass of <strong>apple</strong> <strong>__</strong></li>
</ul>
</li>
<li>Orange and apple now shares a lot of similar features which makes it easier for an algorithm to generalize between them.</li>
<li>We call this representation <strong>Word embeddings</strong>.</li>
</ul>
</li>
<li>To visualize word embeddings we use t-SNE algorithm to reduce the features to 2 dimensions which makes it easy to visualize. <ul>
<li><img src="29.png" alt></li>
<li>You will get a sense that more related words distance are smaller than other distances.</li>
</ul>
</li>
<li>The <strong>word embeddings</strong> came from that we need to embed a unique vector inside an n dimensions.</li>
</ul>
<h4 id="Using-word-embeddings"><a href="#Using-word-embeddings" class="headerlink" title="Using word embeddings"></a>Using word embeddings</h4><ul>
<li>Lets see how we can take the feature representation we have extracted from each word and apply it in Name entity recognition problem.</li>
<li>Given this example - From named entity recognition - :<ul>
<li><img src="30.png" alt></li>
</ul>
</li>
<li><strong>Sally Johnson</strong> is a persons name.</li>
<li>After training on this sentence the model should find out that the sentence “<strong>Robert Lin</strong> is an <em>apple</em> farmer” contains Robert Lin as a name, as apple and orange has near representations.</li>
<li>Now if you have tested your model with this sentence “<strong>Mahmoud Badry</strong> is a <em>durian</em> cultivator” the network should learn the name even if it hasn’t seen the word <em>durian</em> before. Thats the power of word representations.</li>
<li>The algorithms that are used to learn <strong>word embeddings</strong> can exterminate billions of unlabeled text - for example 100 billion- words and learn the representation from them.</li>
<li>Transfer learning and word embeddings:<ol>
<li>Learn word embeddings from large text corpus. say 100 billion word<ul>
<li>Or download pre-trained embedding online.</li>
</ul>
</li>
<li>Transfer embeddings to new task with smaller training set. say 100k word.</li>
<li>Optimal: Continue to finetune the word embeddings with new data.<ul>
<li>This can be done if your smaller training set are big enough.</li>
</ul>
</li>
</ol>
</li>
<li>Also one of the advantages of using word embeddings is that it reduces the size of the input!<ul>
<li>10,000 one hot compared to 300 features vector.</li>
</ul>
</li>
<li>Word embeddings has an interesting relationship to the face recognition task:<ul>
<li><img src="31.png" alt></li>
<li>In this problem we encode each face into a vector and then check how similar is these vectors.</li>
<li>The word <strong>encode</strong> and <strong>embeddings</strong> has a similar meaning here.</li>
<li>In the word embeddings task, we are getting a vector say from e<sub>1</sub> to e<sub>300</sub> for each word in our vocabulary. We will discuss the algorithm in the next sections.</li>
</ul>
</li>
</ul>
<h4 id="Properties-of-word-embeddings"><a href="#Properties-of-word-embeddings" class="headerlink" title="Properties of word embeddings"></a>Properties of word embeddings</h4><ul>
<li>One of the most fascinating properties of word embeddings is that they can also help with analogy reasoning. Analogy reasoning is one of the most important applications of NLP.</li>
<li>Analogies example:<ul>
<li>Given this word embeddings table:<ul>
<li><img src="32.png" alt></li>
</ul>
</li>
<li>Can we conclude this relation:<ul>
<li>Man ==&gt; Woman</li>
<li>King ==&gt; ??</li>
</ul>
</li>
<li>Lets subtract e<sub>Man</sub> from e<sub>Woman</sub>. This will equal the vector <code>[-2  0  0  0]</code></li>
<li>Similar e<sub>King</sub> - e<sub>Queen</sub> = <code>[-2  0  0  0]</code></li>
<li>So the difference is about the gender in both.<ul>
<li><img src="33.png" alt></li>
<li>This vector represents the gender.</li>
<li>This drawing is 2D visualization of the 4D vector that has been extracted by t-SNE algorithm. It was drawing for just clarification! Don’t rely on t-SNE algorithm in finding parallels.</li>
</ul>
</li>
<li>So we can reformulate the problem to find:<ul>
<li>e<sub>Man</sub> - e<sub>Woman</sub> ≈ e<sub>King</sub> - e<sub>??</sub></li>
</ul>
</li>
<li>It can also represented mathematically by:<ul>
<li><img src="34.png" alt></li>
</ul>
</li>
<li>It turns out that e<sub>Queen</sub> is the best solution here that gets the the similar vector.</li>
</ul>
</li>
<li>Cosine similarity:<ul>
<li>Equation:<ul>
<li><img src="35.png" alt></li>
<li><script type="math/tex; mode=display">\text{CosineSimilarity(u, v)} = \frac {u . v} {||u||_2 ||v||_2} = cos(\theta)</script></li>
<li>The top part represents the inner product of <code>u</code> and <code>v</code> vectors. That will be large if the vectors are so similar.</li>
</ul>
</li>
<li>We can use this equation to calculate the similarities between word embeddings and on the analogy problem where <code>u</code> = e<sub>w</sub> and <code>v</code> = e<sub>king</sub> - e<sub>man</sub> + e<sub>woman</sub></li>
</ul>
</li>
</ul>
<h4 id="Embedding-matrix"><a href="#Embedding-matrix" class="headerlink" title="Embedding matrix"></a>Embedding matrix</h4><ul>
<li>When you implement an algorithm to learn a word embedding, what you end up learning is an <strong><u>embedding matrix</u></strong>.</li>
<li>Lets take an example:<ul>
<li>Suppose we are using 10,000 words as our vocabulary.</li>
<li>The algorithm should extract a matrix <code>E</code> of the shape (300, 10,000) in case we are extracting 300 features. (300, 10,001) if we have <code>&lt;UNK&gt;</code> token.<ul>
<li><img src="36.png" alt></li>
</ul>
</li>
<li>If O<sub>6257</sub> is the one hot encoding of the word <strong>orange</strong>, then <code>E</code>. O<sub>6257</sub> equals e<sub>6257</sub> which shape is (300, 1)</li>
<li>Generally <code>E</code>. O<sub>j</sub>  = e<sub>j</sub></li>
</ul>
</li>
<li>In the next sections you will see that we first initialize <code>E</code> randomly and then try to learn all the parameters of this matrix.</li>
<li>In practice its not efficient to use a dot multiplication when you are trying to extract the embeddings of a specific word, instead we will use slicing to slice a specific column. In keras there are a embedding layer that extracts this column with no multiplications!</li>
</ul>
<h3 id="Learning-Word-Embeddings-Word2vec-amp-GloVe"><a href="#Learning-Word-Embeddings-Word2vec-amp-GloVe" class="headerlink" title="Learning Word Embeddings: Word2vec &amp; GloVe"></a>Learning Word Embeddings: Word2vec &amp; GloVe</h3><h4 id="Learning-word-embeddings"><a href="#Learning-word-embeddings" class="headerlink" title="Learning word embeddings"></a>Learning word embeddings</h4><ul>
<li>Lets start learning some algorithms that learns the word embeddings.</li>
<li>At start, word embeddings algorithms - with deep learning - were complex but then it started to be simpler and simpler.</li>
<li>We will start by learning the complex examples to make more sense.</li>
<li><strong><u>Neural language model</u></strong>:<ul>
<li>Lets start by example:<ul>
<li><img src="37.png" alt></li>
</ul>
</li>
<li>We want to build a language model so that we can predict the next word.</li>
<li>So we use this neural network to learn the language model<ul>
<li><img src="38.png" alt></li>
<li>We get e<sub>j</sub> by <code>E</code>. o<sub>j</sub></li>
<li>NN layer has parameters <code>W1</code> and <code>b1</code> while softmax layer has parameters <code>W2</code> and <code>b2</code></li>
<li>Input dimension is (300*6, 1) if we the window size is 6.</li>
<li>Here we are optimizing <code>E</code> matrix and layers parameters. We need to maximize the likelihood in our training set.</li>
</ul>
</li>
<li>This model was build on 2003 and tends to work very well to get the embeddings.</li>
</ul>
</li>
<li>In the last example we took a window of 6 words that fall behind the word that we want to predict. There are other choices when we are trying to learn word embeddings.<ul>
<li>Suppose we have the example: “I want a glass of orange <strong>juice</strong> to go along with my cereal”</li>
<li>To learn juice, Choices of <strong>Context</strong> are:<ol>
<li>Last 4 words.<ul>
<li>We use a window of last 4 words - 4 is the best -, “<u>a glass of orange</u>“ and try to predict the next word from it.</li>
</ul>
</li>
<li>4 words on the left and on the right.<ul>
<li>“<u>a glass of orange</u>“ and “<u>to go along with</u>“</li>
</ul>
</li>
<li>Last 1 word.<ul>
<li>“<u>orange</u>“</li>
</ul>
</li>
<li>Nearby 1 word.<ul>
<li>“<u>glass</u>“ word is near juice</li>
<li>The idea of <strong>skip grams</strong> model. </li>
<li>The idea is so simpler and works remarkably well.</li>
<li>We will talk about this in the next section.</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ul>
<h4 id="Word2Vec"><a href="#Word2Vec" class="headerlink" title="Word2Vec"></a>Word2Vec</h4><ul>
<li><p>Before presenting Word2Vec, lets talk about <strong>Skip-grams</strong>:</p>
<ul>
<li><p>For example if we have the sentence: “I want a glass of orange juice to go along with my cereal”</p>
</li>
<li><p>We will choose Context and target.</p>
</li>
<li><p>The target is chosen randomly basing on a window with a specific size.</p>
</li>
<li><p>| Context | Target | How far |<br>| ———- | ——— | ———- |<br>| orange  | juice  | +1      |<br>| orange  | glass  | -2      |<br>| orange  | my     | +6      |</p>
<p>We have converted the problem into a supervised problem.</p>
</li>
<li><p>This is not an easy learning problem because within -10/+10 words for example is hard.</p>
</li>
<li><p>We want to learn this to get our word embeddings model.</p>
</li>
</ul>
</li>
<li><p>Word2Vec model:</p>
<ul>
<li>Vocabulary size = 10,000 word</li>
<li>Lets say that the context word are <code>c</code> and the target word are <code>t</code></li>
<li>We want to learn <code>c</code> to <code>t</code></li>
<li>we get e<sub>c</sub> by <code>E</code>. o<sub>c</sub></li>
<li>We then use a softmax layer to get <code>P(t|c)</code> which is y<sup>^</sup></li>
<li>Also we will use the cross-entropy loss function.</li>
<li>This model is called skip-grams model.</li>
</ul>
</li>
<li><p>The last model has a problem with the softmax classifier:</p>
<ul>
<li><img src="39.png" alt></li>
<li>Here we are summing 10,000 numbers which corresponds to the number of words in our vocabulary.</li>
<li>If this number is larger say 1 million, the computation will become so slow.</li>
</ul>
</li>
<li><p>The solution for the past problem is to use “<strong>Hierarchical softmax classifier</strong>“ which works as a tree classifier.</p>
<ul>
<li><img src="40.png" alt></li>
</ul>
</li>
<li><p>In practice the hierarchical softmax classifier doesn’t use a balanced tree like the drawn one. Common words are in the top and less common are in the bottom.</p>
</li>
<li><p>How to sample the context c?</p>
<ul>
<li>One way is to choose the context by random from your corpus.</li>
<li>If you have done it that way, there will be frequent words like “the, of, a, and, to, ..” that can dominate other words like “orange, apple, Mahmoud,…”</li>
<li>So in practice, we don’t take the context uniformly random, instead there are some heuristics to balance the common words and the non-common words.</li>
</ul>
</li>
</ul>
<h4 id="Negative-Sampling"><a href="#Negative-Sampling" class="headerlink" title="Negative Sampling"></a>Negative Sampling</h4><ul>
<li><p>Negative sampling allows you to do something similar to the Skip-Gram model, but with a much more efficient learning algorithm. We will create a different learning problem</p>
</li>
<li><p>Given this example:</p>
<ul>
<li>“I want a glass of orange juice to go along with my cereal”</li>
</ul>
</li>
<li><p>The sampling will look like this:</p>
</li>
<li><p>| Context | Word  | target |<br>| ———- | ——- | ——— |<br>| orange  | juice | 1      |<br>| orange  | king  | 0      |<br>| orange  | book  | 0      |<br>| orange  | the   | 0      |<br>| orange  | of    | 0      |</p>
<p>We get positive example by using the same skip-grams technique, a fixed window that goes around.</p>
</li>
<li><p>To generate a negative example, we pick a word randomly from the vocabulary.</p>
</li>
<li><p>Notice that we got “of” although it was appeared in the same sentence.</p>
</li>
<li><p>So the steps to generate the samples are:</p>
<ol>
<li>Pick a positive context</li>
<li>Pick a k negative contexts from the dictionary.</li>
</ol>
</li>
<li><p>K is recommended to be from 5 to 20 in small datasets. For larger ones 2 to 5.</p>
</li>
<li><p>We will have a k negative examples to 1 positive ones in the data we are collecting.</p>
</li>
<li><p>Now lets define the model that will learn this supervised learning problem:</p>
<ul>
<li>Lets say that the context word are <code>c</code> and the word are <code>t</code> and <code>y</code> is the target.</li>
<li>We will apply the simple logistic regression model.</li>
<li><img src="41.png" alt></li>
<li>The logistic regression model can be drawn like this:</li>
<li><img src="42.png" alt></li>
<li>So we are like having 10,000 binary classification problem, and we only train k+1 classifier of them in each iteration.</li>
</ul>
</li>
<li><p>Now how to select negative samples:</p>
<ul>
<li>We can sample according to empirical frequencies in words corpus which means according to how often different words appears. But the problem with that is that we will have more frequent words like the, of, and..</li>
<li>The best is to sample with this equation - According to authors - :<ul>
<li><img src="43.png" alt></li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="GloVe-word-vectors"><a href="#GloVe-word-vectors" class="headerlink" title="GloVe word vectors"></a>GloVe word vectors</h4><ul>
<li>GloVe is another algorithm for learning the word embeddings, Its the simplest of them.</li>
<li>This is not used much as word2vec or gram models, but it has some enthusiasts because of its simplicity.</li>
<li>GloVe stands for Global vectors for word presentation.</li>
<li>Given this example:<ul>
<li>“I want a glass of orange juice to go along with my cereal”</li>
</ul>
</li>
<li>We will choose a context and a target from the choices we have mentioned in the previous sections.</li>
<li>Then we will calculate this for every pair, X<sub>ct</sub> = # times <code>t</code> appears in context of <code>c</code></li>
<li>X<sub>ct</sub> = X<sub>tc</sub> if we choose a window pair, but they will not equal if we choose the previous words for example. In GloVe they use a window which means they are equal</li>
<li>The model is defined like this:<ul>
<li><img src="44.png" alt></li>
</ul>
</li>
<li>f(x) -the weighting term- is used for many reasons which includes:<ul>
<li>The <code>log(0)</code> problem, which might occur if there are no pairs for the given target and context values.</li>
<li>Giving low weights for stop words like “is”, “the”, and “this” because they occurs a lot.</li>
<li>Giving low weights for words that doesn’t occur so much.</li>
</ul>
</li>
<li>ceta and e are symmetric which helps getting the final word embedding. </li>
<li>Conclusion on word embeddings:<ul>
<li>If this is your first try, you should try to download a pretrained model that has been made and actually works best.</li>
<li>If you have enough data, you can try to implement one of the available algorithms.</li>
<li>Because word embeddings are very computationally expensive to train, most ML practitioners will load a pre-trained set of embeddings.</li>
<li>A final note that you can’t guarantee that the axis used to represent the features will be well-aligned with what might be easily humanly interpretable axis like gender, and royal, and age.</li>
</ul>
</li>
</ul>
<h3 id="Applications-using-Word-Embeddings"><a href="#Applications-using-Word-Embeddings" class="headerlink" title="Applications using Word Embeddings"></a>Applications using Word Embeddings</h3><h4 id="Sentiment-Classification"><a href="#Sentiment-Classification" class="headerlink" title="Sentiment Classification"></a>Sentiment Classification</h4><ul>
<li>As we have discussed before, Sentiment classification is the process of finding if a text has a positive or a negative review. Its so useful in NLP and is used in so many applications. An example would be:<ul>
<li><img src="45.png" alt></li>
</ul>
</li>
<li>One of the challenges with it, is that you might haven’t a huge labeled training data for it, but using word embeddings can help getting rid of this.</li>
<li>The common dataset sizes varies from 10,000 to 100,000 words.</li>
<li>A simple sentiment classification model would be like this:<ul>
<li><img src="46.png" alt></li>
<li>The embedding matrix may have been trained on say 100 billion words.</li>
<li>Number of features given a word is 300.</li>
<li>We can use <strong>sum</strong> or <strong>average</strong> given all the words then pass it to a softmax classifier. That makes this classifier works for short or long sentences.</li>
</ul>
</li>
<li>One of the problems with this simple model is that it ignores words order! for example “Completely lacking in <strong>good</strong> taste, <strong>good</strong> service, and <strong>good</strong> ambience” has the word good 3 times but its a negative review!</li>
<li>A better model uses an RNN for solving this problem:<ul>
<li><img src="47.png" alt></li>
<li>And so if you train this algorithm, you end up with a pretty decent sentiment classification algorithm.</li>
<li>Also it will generalize even if words aren’t in your dataset, for example the sentencte “Completely <strong><u>absent of</u></strong> good taste, good service, and good ambience” will be the same as the trained word!</li>
</ul>
</li>
</ul>
<h4 id="Debiasing-word-embeddings"><a href="#Debiasing-word-embeddings" class="headerlink" title="Debiasing word embeddings"></a>Debiasing word embeddings</h4><ul>
<li>We want to make sure that our word embeddings free from undesirable forms of bias, such as gender bias, ethnicity bias and so on.</li>
<li>A horrifying result on a trained word embeddings in the context of Analogies:<ul>
<li>Man : Computer_programmer as Woman : <strong>Homemaker</strong></li>
<li>Father : Doctor as Mother : <strong>Nurse</strong></li>
</ul>
</li>
<li>Word embeddings can reflect gender, ethnicity, age, sexual orientation, and other biases of text used to train the model.</li>
<li>Learning algorithms by general is making an important decision and it mustn’t be biased.</li>
<li>Andrew thinks we actually have better ideas for quickly reducing the bias in AI than for quickly reducing the bias in the human race, although it still needs a lot of work to be done.</li>
<li>Addressing bias in word embeddings steps:<ul>
<li>Idea is by paper: <a href="https://arxiv.org/abs/1607.06520" target="_blank" rel="noopener">https://arxiv.org/abs/1607.06520</a></li>
<li>Given this learned embeddings: <ul>
<li><img src="48.png" alt></li>
</ul>
</li>
<li>We need to solve the <strong>gender bias</strong> here. The steps we will discuss can help solve any bias problem but we are focusing here on gender bias.</li>
<li>Here are the steps:<ol>
<li>Identify the direction:<ul>
<li>Calculate the difference between:<ul>
<li>e<sub>he</sub> - e<sub>she</sub></li>
<li>e<sub>male</sub> - e<sub>female</sub></li>
<li>….</li>
</ul>
</li>
<li>Choose some k differences and average them.</li>
<li>This will help you find this:<ul>
<li><img src="49.png" alt></li>
</ul>
</li>
<li>By that we have found the bias direction which is 1D vector and the non-bias vector which is 299D vector.</li>
</ul>
</li>
<li>Neutralize: For every word that is not definitional, project to get rid of bias.<ul>
<li>Babysitter and doctor needs to be neutral so we project them on nonbias with the direction of the bias:<ul>
<li><img src="50.png" alt></li>
<li>After that they will be equal in the term of gender.</li>
<li>To do this the authors of the paper trained a classifier to tell the words that they need to be  neutralized or not.</li>
</ul>
</li>
</ul>
</li>
<li>Equalize pairs<ul>
<li>We want each pair to have difference only in gender. Like:<ul>
<li>Grandfather - Grandmother</li>
<li>He - She</li>
<li>Boy - Girl</li>
</ul>
</li>
<li>We want to do this because the distance between grandfather and babysitter is bigger than babysitter and grandmother:<ul>
<li><img src="51.png" alt></li>
</ul>
</li>
<li>To do that, we move grandfather and grandmother to a point where they will be in the middle of the non-bias axis.</li>
<li>There are some words you need to do this for in your steps. The size of these words are relatively small.</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="Sequence-models-amp-Attention-mechanism"><a href="#Sequence-models-amp-Attention-mechanism" class="headerlink" title="Sequence models &amp; Attention mechanism"></a>Sequence models &amp; Attention mechanism</h2><blockquote>
<p>Sequence models can be augmented using an attention mechanism. This algorithm will help your model understand where it should focus its attention given a sequence of inputs. This week, you will also learn about speech recognition and how to deal with audio data.</p>
</blockquote>
<h3 id="Various-sequence-to-sequence-architectures"><a href="#Various-sequence-to-sequence-architectures" class="headerlink" title="Various sequence to sequence architectures"></a>Various sequence to sequence architectures</h3><h4 id="Basic-Models"><a href="#Basic-Models" class="headerlink" title="Basic Models"></a>Basic Models</h4><ul>
<li>In this section we will learn about sequence to sequence - Many to Many -  models which are useful in various applications including machine translation and speech recognition.</li>
<li>Lets start by the basic model:<ul>
<li>Given this machine translation problem in which X is a French sequence and Y is an English sequence.<ul>
<li><img src="52.png" alt></li>
</ul>
</li>
<li>Our architecture will include <strong>encoder</strong> and <strong>decoder</strong>.</li>
<li>The encoder is built with RNNs - LSTM or GRU are included - and takes the input sequence and then outputs a vector that should represent the whole input.</li>
<li>After that the decoder network, are also built with RNNs and outputs the output sequence using the vector that has been built by the encoder.</li>
<li><img src="53.png" alt></li>
<li>These ideas are from these papers:<ul>
<li>[<a href="https://arxiv.org/abs/1409.3215" target="_blank" rel="noopener">Sutskever</a> et al., 2014. Sequence to sequence learning with neural networks]</li>
<li>[<a href="https://arxiv.org/abs/1406.1078" target="_blank" rel="noopener">Cho et</a> al., 2014. Learning phrase representations using RNN encoder-decoder for statistical machine translation]</li>
</ul>
</li>
</ul>
</li>
<li>With an architecture similar to the one previously mentioned works for image captioning problem:<ul>
<li>In this problem X is an image, while Y is a sentence.</li>
<li>The model architecture image:<ul>
<li><img src="54.png" alt></li>
</ul>
</li>
<li>The architecture uses a CNN pretrained AlexNet as an encoder for the image, and the decoder is an RNN.</li>
<li>The ideas are from these papers (They share similar ideas):<ul>
<li>[<a href="https://arxiv.org/abs/1412.6632" target="_blank" rel="noopener">Maoet</a>. al., 2014. Deep captioning with multimodal recurrent neural networks]</li>
<li>[<a href="https://arxiv.org/abs/1411.4555" target="_blank" rel="noopener">Vinyalset</a>. al., 2014. Show and tell: Neural image caption generator]</li>
<li>[<a href="https://cs.stanford.edu/people/karpathy/cvpr2015.pdf" target="_blank" rel="noopener">Karpathy</a> and Li, 2015. Deep visual-semantic alignments for generating imagedescriptions]</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Picking-the-most-likely-sentence"><a href="#Picking-the-most-likely-sentence" class="headerlink" title="Picking the most likely sentence"></a>Picking the most likely sentence</h4><ul>
<li>There are some similarities between the language model we have learned previously, and the machine translation model we have just discussed, but there are some differences as well.</li>
<li>The language model we have learned as so similar to the decoder of the machined translation model, except for a<sup>0</sup><ul>
<li><img src="55.png" alt></li>
</ul>
</li>
<li>The problems formations also are different:<ul>
<li>In language model: P(y<sup>\<1></1></sup>, ….y<sup>\<ty></ty></sup>)</li>
<li>In machine translation: P(y<sup>\<1></1></sup>, ….y<sup>\<ty></ty></sup> | x<sup>\<1></1></sup>, ….x<sup>\<tx></tx></sup>)</li>
</ul>
</li>
<li>What we don’t want in machine translation model, is not to sample the output at random. This may provide some choices as an output. Sometimes you may sample a bad output.<ul>
<li>Example: <ul>
<li>X = “Jane visite l’Afrique en septembre.”</li>
<li>Y may be:<ul>
<li>Jane is visiting Africa in September.</li>
<li>Jane is going to be visiting Africa in September.</li>
<li>In September, Jane will visit Africa.</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>So we need to get the best output, this can be take by the equation:<ul>
<li><img src="56.png" alt></li>
</ul>
</li>
<li>The most common algorithm is the beam search, which we will explain in the next section.</li>
<li>Why not use greedy search? Why not get the best choices each time?<ul>
<li>It turns out that this approach doesn’t really work!</li>
<li>Lets explain it with an example:<ul>
<li>The best output for the example we talked about is “Jane is visiting Africa in September.”</li>
<li>Suppose that you when you are choosing with greedy approach, the first two words were “Jane is”, the word that may come after that will be “going” as “going” is the most common word that comes after “Noun is” so the result may look like this: “Jane is going to be visiting Africa in September.” and that isn’t the best/optimal solution.</li>
</ul>
</li>
</ul>
</li>
<li>So what is better than greedy approach, is trying to get an approximate solution, that will try to maximize the output.</li>
</ul>
<h4 id="Beam-Search"><a href="#Beam-Search" class="headerlink" title="Beam Search"></a>Beam Search</h4><ul>
<li>Beam search is the most widely used algorithm to get the best output sequence. Its a heuristic search algorithm.</li>
<li>To illustrate the algorithm we will be stick with the example from the previous section. We need Y = “Jane is visiting Africa in September.”</li>
<li>The algorithm has a parameter <code>B</code>  which is the beam width. Lets take <code>B = 3</code> which means the algorithm will get 3 outputs at a time.</li>
<li>For the first step you will get [“in”, “jane”, “september”] words that are the best candidates.</li>
<li>Then for each word in the first output, get B words from the 3 where the best are the result of multiplying both probabilities. Se we will have then [“In September”, “jane is”, “jane visit”]. Notice that we automatically ignored September.</li>
<li>Repeat the same process and get the best B words for [“September”, “is”, “visit”]  and so so.</li>
<li>In this algorithm, keep only B instances of your network.</li>
<li>If <code>B = 1</code> this will become the greedy search.</li>
</ul>
<h4 id="Refinements-to-Beam-Search"><a href="#Refinements-to-Beam-Search" class="headerlink" title="Refinements to Beam Search"></a>Refinements to Beam Search</h4><ul>
<li>In the previous section we have discussed the basic beam search. In this section we will try to do some refinements to it to work even better.</li>
<li>The first thing is <strong>Length optimization</strong><ul>
<li>In beam search we are trying to optimize:<ul>
<li><img src="56.png" alt></li>
</ul>
</li>
<li>And to do that we multiply:<ul>
<li>P(y<sup>\<1></1></sup> | x) <em> P(y<sup>\<2></2></sup> | x, y<sup>\<1></1></sup>) </em> ….. P(y<sup>\<t></t></sup> | x, y<sup>\<y(t-1)></y(t-1)></sup>)</li>
</ul>
</li>
<li>Each probability is a fraction. Also maybe a small fraction.</li>
<li>Multiplying small fractions will cause a <strong>numerical overflow</strong>! Meaning that it’s too small for the floating part representation in your computer to store accurately.</li>
<li>So in practice we use <strong>summing</strong> <strong>logs</strong> instead of multiplying directly.<ul>
<li><img src="57.png" alt></li>
</ul>
</li>
<li>But theres another problem. The two optimization functions we have mentions tends to find small sequences! Because multiplying a lot of fractions gives a smaller value.</li>
<li>So theres another change , by dividing by the number of elements in the sequence.<ul>
<li><img src="58.png" alt></li>
<li>alpha is a hyper parameter to tune.</li>
<li>If alpha = 0, Then its like we do nothing.</li>
<li>If alpha = 1, Then its like we are using full sequence length.</li>
<li>In practice alpha = 0.7 is a good thing. </li>
</ul>
</li>
</ul>
</li>
<li>The second thing is who can we choose best <code>B</code>?<ul>
<li>The larger B, the larger possibilities, the better are the results. But it will be more computationally expensive.</li>
<li>In practice, you might see a in the production sentence <code>B=10</code></li>
<li><code>B=100</code>, <code>B=1000</code> are uncommon.</li>
<li>Unlike exact search algorithms like BFS (Breadth First Search) or  DFS (Depth First Search), Beam Search runs faster but is not guaranteed to find exact solution.</li>
</ul>
</li>
</ul>
<h4 id="Error-analysis-in-beam-search"><a href="#Error-analysis-in-beam-search" class="headerlink" title="Error analysis in beam search"></a>Error analysis in beam search</h4><ul>
<li>We have talked before on <strong>Error analysis</strong> in <u>Structuring Machine Learning Projects</u> chapter. We will apply these concepts to improve our beam search algorithm.</li>
<li>We will use error analysis to figure out if the <code>B</code> hyperparameter of the beam search is the problem - because it doesn’t get an optimal solution  - or to in other hyperparameters like the RNN parameters.</li>
<li>Lets take an example:<ul>
<li>Our examples information:<ul>
<li>x = “Jane visite l’Afrique en septembre.”</li>
<li>y<sup>*</sup> = “Jane visits Africa in September.”</li>
<li>y<sup>^</sup> = “Jane visited Africa last September.”</li>
</ul>
</li>
<li>Our model that has produced a sentence that are different in meaning because of the word “last”</li>
<li>We now want to know who to blame, the RNN or the beam search.</li>
<li>To do that, we calculate P(y<sup>*</sup> | X) and P(y<sup>^</sup> | X). There are two cases:<ul>
<li>Case 1 (P(y<sup>*</sup> | X)  &gt; P(y<sup>^</sup> | X)): <ul>
<li>Conclusion: Beam search is at fault.</li>
</ul>
</li>
<li>Case 2 (P(y<sup>*</sup> | X)  &lt;= P(y<sup>^</sup> | X)): <ul>
<li>Conclusion: RNN model is at fault.</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>The error analysis process is as following:<ul>
<li>You choose N error examples and make the following table:<ul>
<li><img src="59.png" alt></li>
</ul>
</li>
<li><code>B</code>  for beam search, <code>R</code> is for the RNN.</li>
<li>Get counts and decide.</li>
</ul>
</li>
</ul>
<h4 id="BLEU-Score"><a href="#BLEU-Score" class="headerlink" title="BLEU Score"></a>BLEU Score</h4><ul>
<li>One of the challenges of machine translation, is that given a sentence in a language there are one or more possible good translation in another language. So how do we evaluate our results?</li>
<li>The way we do this is by using <strong>BLEU score</strong>. BLEU stands for bilingual evaluation understudy.</li>
<li>The intuition is so long as the machine generated translation is pretty close to any of the references provided by humans, then it will get a high BLEU score.</li>
</ul>
<ul>
<li><p>Lets take an example:</p>
<ul>
<li>X = “Le chat est sur le tapis.”</li>
<li>Y1 = “The cat is on the mat.”</li>
<li>Y2 = “There is a cat on the mat.”</li>
<li>Suppose that the machine outputs: “<u>the the the the the the the.</u>“</li>
<li>One way to evaluate the machine output is to look at each word in the output and check it in the references. This is called precision:<ul>
<li>precision = 7/7  because the appeared in Y1 or Y2</li>
</ul>
</li>
<li>This is not a useful measure!</li>
<li>We can use a modified precision in which we are looking for the reference with the maximum number of a particular word and set the maximum appearing of this word to this number. So:<ul>
<li>modified precision = 2/7 because the max is 2 in Y1</li>
<li>We clipped the 7 times by the max which is 2.</li>
</ul>
</li>
<li>The problem here is that we are looking at one word at a time, we may need to look at pairs</li>
</ul>
</li>
<li><p>Another example (BLEU score on bigrams)</p>
<ul>
<li><p>The n-<strong>grams</strong> typically are collected from a text or speech corpus. When the items are words, n-<strong>grams</strong> may also be called shingles. An n-<strong>gram</strong> of size 1 is referred to as a “unigram”; size 2 is a “bigram” (or, less commonly, a “digram”); size 3 is a “trigram”.</p>
</li>
<li><p>X = “Le chat est sur le tapis.”</p>
</li>
<li><p>Y1 = “The cat is on the mat.”</p>
</li>
<li><p>Y2 = “There is a cat on the mat.”</p>
</li>
<li><p>Suppose that the machine outputs: “<u>The cat the cat on the mat.</u>“</p>
</li>
<li><p>The bigrams in the machine output:</p>
</li>
<li><p>| Pairs      | Count | Count clip |<br>| ————— | ——- | ————— |<br>| the cat    | 2     | 1 (Y1)     |<br>| cat the    | 1     | 0          |<br>| cat on     | 1     | 1 (Y2)     |<br>| on the     | 1     | 1 (Y1)     |<br>| the mat    | 1     | 1 (Y1)     |<br>| <strong>Totals</strong> | 6     | 4          |</p>
<p>Score = Count clip / Count = 4/6</p>
</li>
</ul>
</li>
<li><p>So here are the equations for the n-grams:</p>
<ul>
<li><img src="60.png" alt></li>
</ul>
</li>
<li><p>Lets put this together to formalize the BLEU score:</p>
<ul>
<li><strong>P<sub>n</sub></strong> = Bleu score on n-grams only</li>
<li><strong>Combined Bleu score</strong> equation:<ul>
<li><img src="61.png" alt></li>
<li>For example if we want Bleu for 4, we compute P<sub>1</sub>, P<sub>2</sub>, P<sub>3</sub>, P<sub>4</sub> and then average them and take the exp.</li>
</ul>
</li>
<li>Another equation is <strong>BP penalty</strong> which stands for brevity penalty. It turns out that if a machine outputs a small number of words it will get a better score so we need to handle that.<ul>
<li><img src="62.png" alt></li>
</ul>
</li>
</ul>
</li>
<li><p>Blue score is has several open source implementations and used in variety of systems like machine translation and image captioning.</p>
</li>
</ul>
<h4 id="Attention-Model-Intuition"><a href="#Attention-Model-Intuition" class="headerlink" title="Attention Model Intuition"></a>Attention Model Intuition</h4><ul>
<li>So far we are using sequence to sequence models with an encoder and decoders. There are a technique called attention which makes these models even better.</li>
<li>The attention algorithm, the attention idea has been one of the most influential ideas in deep learning. </li>
<li>The problem of long sequences:<ul>
<li>Given this model, inputs, and outputs.<ul>
<li><img src="63.png" alt></li>
</ul>
</li>
<li>The encoder should memorize this long sequence into one vector, and the decoder has to process this vector to generate the translation.</li>
<li>If a human would translate this sentence, he wouldn’t read the whole sentence and memorize it then try to translate it. He translates a part at a time.</li>
<li>The performance of this model decreases if a sentence is so long.</li>
<li>We will discuss the attention model that works like a human that looks at parts at a time. That will significantly increase the accuracy even with bigger sequence:<ul>
<li><img src="64.png" alt></li>
<li>Blue is the normal model, while green is the model with attention mechanism.</li>
</ul>
</li>
</ul>
</li>
<li>In this section we will give just some intuitions about the attention model and in the next section we will discuss its details.</li>
<li>At first the attention model was developed for machine translation but then other applications used it like computer vision and new architectures like Neural Turing machine.</li>
<li>The attention model was descried in this paper:<ul>
<li>[<a href="https://arxiv.org/abs/1409.0473" target="_blank" rel="noopener">Bahdanau</a> et. al., 2014. Neural machine translation by jointly learning to align and translate]</li>
</ul>
</li>
<li>Now for the intuition:<ul>
<li>Suppose that our decoder is a bidirectional RNN:<ul>
<li><img src="65.png" alt></li>
</ul>
</li>
<li>We gave the French sentence to the encoder and it should generate a vector that represents the inputs.</li>
<li>Now to generate the first word in English which is “Jane” we will make another RNN which is the decoder.</li>
<li>attention weights are used to specify which words are needed when to generate a word. So to generate “jane” we will look at “jane”, “visite”, “l’Afrique”<ul>
<li><img src="66.png" alt></li>
</ul>
</li>
<li>alpha<sup>1,1</sup>, alpha<sup>1,2</sup>, and alpha<sup>1,3</sup> are the attention weights used.</li>
<li>And so to generate any word there will be a set of attention weights that controls which words we are looking at right now.<ul>
<li><img src="67.png" alt></li>
</ul>
</li>
<li>​</li>
</ul>
</li>
</ul>
<h4 id="Attention-Model"><a href="#Attention-Model" class="headerlink" title="Attention Model"></a>Attention Model</h4><ul>
<li>Lets formalize the intuition from the last section into the exact details on how this can be implemented.</li>
<li>First we will have an bidirectional RNN - most common is LSTMs - that encodes French language:<ul>
<li><img src="68.png" alt></li>
</ul>
</li>
<li>For learning purposes, lets assume that a<sup>\<t></t></sup> will include the both directions.</li>
<li>We will have an RNN to extract the output using a context <code>c</code> which is computer using the attention weights. This denotes how much information do it needs to look in a<sup>\<t></t></sup><ul>
<li><img src="69.png" alt></li>
</ul>
</li>
<li>Sum of the attention weights for each element in the sequence should be 1:<ul>
<li><img src="70.png" alt></li>
</ul>
</li>
<li>Also the context <code>c</code> are calculated using this equation:<ul>
<li><img src="71.png" alt></li>
</ul>
</li>
<li>Lets see how can we compute the attention weights:<ul>
<li>So alpha<sup>\&lt;t, t’&gt;</sup> = amount of attention y<sup>\<t></t></sup> should pay to a<sup>\&lt;t’&gt;</sup><ul>
<li>Like for example we payed attention to the first three words through alpha<sup>\<1,1></1,1></sup>, alpha<sup>\<1,2></1,2></sup>, alpha<sup>\<1,3></1,3></sup></li>
</ul>
</li>
<li>We are going to softmax the attention weights so that their sum is 1:<ul>
<li><img src="72.png" alt></li>
</ul>
</li>
<li>Now we need to know how to calculate e<sup>\&lt;t, t’&gt;</sup>. We will compute e using a small neural network:<ul>
<li><img src="73.png" alt></li>
<li>s<sup>\<t-1></t-1></sup> is the hidden state of the RNN s, and a<sup>\&lt;t’&gt;</sup> is the activation of the other bidirectional RNN. </li>
</ul>
</li>
</ul>
</li>
<li>One of the disadvantages of this algorithm is that it takes quadratic time or quadratic cost to run.</li>
<li>One fun way to see how attention works is by visualizing the attention weights:<ul>
<li><img src="74.png" alt></li>
</ul>
</li>
</ul>
<h3 id="Speech-recognition-Audio-data"><a href="#Speech-recognition-Audio-data" class="headerlink" title="Speech recognition - Audio data"></a>Speech recognition - Audio data</h3><h4 id="Speech-recognition"><a href="#Speech-recognition" class="headerlink" title="Speech recognition"></a>Speech recognition</h4><ul>
<li>The rise of accurate speech recognition was the most exciting work done in sequence to sequence deep learning models.</li>
<li>Lets define the speech recognition problem:<ul>
<li>X: audio clip</li>
<li>Y: transcript</li>
<li>If you plot an audio clip it should look like this:<ul>
<li><img src="75.png" alt></li>
<li>The horizontal axis is time while the vertical is changes in air pressure.</li>
</ul>
</li>
<li>What really is an audio recording? A microphone records little variations in air pressure over time, and it is these little variations in air pressure that your ear also perceives as sound. You can think of an audio recording is a long list of numbers measuring the little air pressure changes detected by the microphone. We will use audio sampled at 44100 Hz (or 44100 Hertz). This means the microphone gives us 44100 numbers per second. Thus, a 10 second audio clip is represented by 441000 numbers (= $10 \times 44100$).</li>
<li>It is quite difficult to work with “raw” representation of audio.</li>
<li>Because even human ear doesn’t process raw wave forms, the human ear can process different frequencies.</li>
<li>There’s a common preprocessing step for an audio to generate a spectrogram which works similarly to human ears.<ul>
<li><img src="76.png" alt></li>
<li>The horizontal axis is time while the vertical is frequencies. Intensity of different colors shows the amount of energy.</li>
</ul>
</li>
<li>A spectrogram is computed by sliding a window over the raw audio signal, and calculates the most active frequencies in each window using a Fourier transform.</li>
<li>In the past days, speech recognition systems was built with phonemes that are a hand engineered basic units of sound. Linguists use to hypothesize any writing down audio in terms of phonemes which they thought would be the best way to do speech recognition.</li>
<li>End to end deep learning found that phonemes was no longer needed. One of the things that made this possible is the large audio datasets.</li>
<li>Research papers has 300 - 3000 hours while the best commercial systems are now trained on over 100,000 hours of audio.</li>
</ul>
</li>
<li>You can build an accurate speech recognition system using the attention model that we have descried in the previous section:<ul>
<li><img src="77.png" alt></li>
</ul>
</li>
<li>One of the methods that seem to work well is CTC cost which stands for “Connectionist temporal classification” <ul>
<li>To explain this lets say that Y = “<u>the quick brown fox</u>“</li>
<li>We are going to use an RNN with input, output structure:<ul>
<li><img src="78.png" alt></li>
</ul>
</li>
<li>Hint: this is a bidirectional RNN, but it practice a bidirectional RNN are used.</li>
<li>Notice that the number of inputs and number of outputs are the same here, but in speech recognition problem X tends to be a lot larger than Y.<ul>
<li>10 seconds of audio gives us X with shape (1000, ). This 10 seconds can’t have 1000 character!</li>
</ul>
</li>
<li>The CTC cost function allows the RNN to output something like this:<ul>
<li><code>ttt_h_eee\&lt;SPC&gt;___\&lt;SPC&gt;qqq___</code></li>
<li>This covers from “The quick”.</li>
<li>The _ is a special character called blank and <code>&lt;SPC&gt;</code> is for space character.</li>
</ul>
</li>
<li>So the 19 character in our Y can be generated into 1000 character output using CTC and its special blanks.</li>
<li>The ideas were taken from this paper:<ul>
<li>[<a href="https://dl.acm.org/citation.cfm?id=1143891" target="_blank" rel="noopener">Graves</a> et al., 2006. Connectionist Temporal Classification: Labeling unsegmented sequence data with recurrent neural networks]</li>
<li>This paper also are used by baidue deep speech.</li>
</ul>
</li>
</ul>
</li>
<li>Both options attention models and CTC cost can give you an accurate speech recognition system.</li>
</ul>
<h4 id="Trigger-Word-Detection"><a href="#Trigger-Word-Detection" class="headerlink" title="Trigger Word Detection"></a>Trigger Word Detection</h4><ul>
<li>With the rise of deep learning speech recognition, there are a lot of devices that can be waked up by saying some words with your voice. These systems are called trigger word systems.</li>
<li>For example, Alexa - a smart device made by amazon - can answer your call “Alexa, What time is it” and then Alexa will reply you.</li>
<li>Trigger word detection system includes:<ul>
<li><img src="79.png" alt></li>
</ul>
</li>
<li>Now the trigger word detection literature is still evolving so there actually isn’t a single universally agreed on algorithm for trigger word detection yet. But lets discuss an algorithm that can be used.</li>
<li>Lets now build a model that can solve this problem:<ul>
<li>X: audio clip</li>
<li>X has been preprocessed and spectrogram features has been returned of X<ul>
<li>X<sup>\<1></1></sup>, X<sup>\<2></2></sup>, … , X<sup>\<t></t></sup></li>
</ul>
</li>
<li>Y will be labels 0 or 1. 0 represents the non trigger word, while 1 is that trigger word that we need to detect.</li>
<li>The model architecture can be like this:<ul>
<li><img src="80.png" alt></li>
<li>The vertical lines in the audio clip represents the trigger words. The corresponding to this will be 1.</li>
</ul>
</li>
<li>One disadvantage of this is the imbalanced dataset outputs. There will be a lot of zeros and little ones.</li>
<li>A hack to solve this is to make an output a few ones for several times or for a fixed period of time before reverting back to zero.<ul>
<li><img src="81.png" alt></li>
<li><img src="85.png" alt></li>
</ul>
</li>
<li>​</li>
</ul>
</li>
</ul>
<h2 id="Extras"><a href="#Extras" class="headerlink" title="Extras"></a>Extras</h2><h3 id="Machine-translation-attention-model-From-notebooks"><a href="#Machine-translation-attention-model-From-notebooks" class="headerlink" title="Machine translation attention model (From notebooks)"></a>Machine translation attention model (From notebooks)</h3><ul>
<li>The model is built with keras layers.</li>
<li>The attention model.<ul>
<li><img src="83.png" alt></li>
<li>There are two separate LSTMs in this model. Because the one at the bottom of the picture is a Bi-directional LSTM and comes <em>before</em> the attention mechanism, we will call it <em>pre-attention</em> Bi-LSTM. The LSTM at the top of the diagram comes <em>after</em> the attention mechanism, so we will call it the <em>post-attention</em> LSTM. The pre-attention Bi-LSTM goes through $T_x$ time steps; the post-attention LSTM goes through $T_y$ time steps. </li>
<li>The post-attention LSTM passes $s^{\langle t \rangle}, c^{\langle t \rangle}$ from one time step to the next. In the lecture videos, we were using only a basic RNN for the post-activation sequence model, so the state captured by the RNN output activations $s^{\langle t\rangle}$. But since we are using an LSTM here, the LSTM has both the output activation $s^{\langle t\rangle}$ and the hidden cell state $c^{\langle t\rangle}$. However, unlike previous text generation examples (such as Dinosaurus in week 1), in this model the post-activation LSTM at time $t$ does will not take the specific generated $y^{\langle t-1 \rangle}$ as input; it only takes $s^{\langle t\rangle}$ and $c^{\langle t\rangle}$ as input. We have designed the model this way, because (unlike language generation where adjacent characters are highly correlated) there isn’t as strong a dependency between the previous character and the next character in a YYYY-MM-DD date. </li>
</ul>
</li>
<li>What one “Attention” step does to calculate the attention variables $\alpha^{\langle t, t’ \rangle}$, which are used to compute the context variable $context^{\langle t \rangle}$ for each timestep in the output ($t=1, \ldots, T_y$). <ul>
<li><img src="84.png" alt></li>
<li>The diagram uses a <code>RepeatVector</code> node to copy $s^{\langle t-1 \rangle}$’s value $T_x$ times, and then <code>Concatenation</code> to concatenate $s^{\langle t-1 \rangle}$ and $a^{\langle t \rangle}$ to compute $e^{\langle t, t’}$, which is then passed through a softmax to compute $\alpha^{\langle t, t’ \rangle}$. </li>
</ul>
</li>
</ul>
<p><br><br><br><br><br><br>These Notes were made by <a href="mailto:mma18@fayoum.edu.eg" target="_blank" rel="noopener">Mahmoud Badry</a> @2018</p>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Course Note</tag>
        <tag>Sequence Models</tag>
      </tags>
  </entry>
  <entry>
    <title>Machine Learning Yarning(part two)</title>
    <url>/Machine-Learning-Yarning-part-two/2019/03/20/</url>
    <content><![CDATA[<h2 id="Bias-and-Variance"><a href="#Bias-and-Variance" class="headerlink" title="Bias and Variance"></a>Bias and Variance</h2><h3 id="Techniques-for-reducing-avoidable-bias"><a href="#Techniques-for-reducing-avoidable-bias" class="headerlink" title="Techniques for reducing avoidable bias"></a>Techniques for reducing avoidable bias</h3><p>If your learning algorithm suffers from high avoidable bias, you might try the following techniques:</p>
<ul>
<li><p><strong>Increase the model size</strong> ​(such as number of neurons/layers): This technique reduces bias, since it should allow you to fit the training set better. If you find that this increases variance, then use regularization, which will usually eliminate the increase in variance.</p>
</li>
<li><p><strong>Modify input features based on insights from error analysis​</strong>: Say your error analysis inspires you to create additional features that help the algorithm eliminate a particular category of errors. (We discuss this further in the next chapter.) These new features could help with both bias and variance. In theory, adding more features could increase the variance; but if you find this to be the case, then use regularization, which will usually eliminate the increase in variance.</p>
</li>
<li><p><strong>Reduce or eliminate regularization​</strong> (L2 regularization, L1 regularization, dropout): This will reduce avoidable bias, but increase variance.</p>
</li>
<li><p><strong>Modify model architecture</strong>​ (such as neural network architecture) so that it is more suitable for your problem: This technique can affect both bias and variance.<br>One method that is not helpful:</p>
</li>
<li><p><strong>Add more training data​</strong>: This technique helps with variance problems, but it usually has no significant effect on bias.</p>
</li>
<li><p>In addition to the techniques described earlier to address high bias, I sometimes also carry out an error analysis on the ​training data,​ following a protocol similar to error analysis on the <strong>Eyeball dev set</strong>. This can be useful if your algorithm has high bias—i.e., if it is not fitting the training set well.</p>
</li>
</ul>
<h3 id="Techniques-for-reducing-variance"><a href="#Techniques-for-reducing-variance" class="headerlink" title="Techniques for reducing variance"></a>Techniques for reducing variance</h3><p>If your learning algorithm suffers from high variance, you might try the following techniques:</p>
<ul>
<li><p><strong>Add more training data​</strong>: This is the simplest and most reliable way to address variance, so long as you have access to significantly more data and enough computational power to process the data.</p>
</li>
<li><p><strong>Add regularization​</strong> (L2 regularization, L1 regularization, dropout): This technique reduces variance but increases bias.</p>
</li>
<li><p><strong>Add early stopping​</strong> (i.e., stop gradient descent early, based on dev set error): This technique reduces variance but increases bias. Early stopping behaves a lot like regularization methods, and some authors call it a regularization technique.</p>
</li>
<li><p><strong>Feature selection to decrease number/type of input features</strong>:​ This technique might help with variance problems, but it might also increase bias. Reducing the number of features slightly (say going from 1,000 features to 900) is unlikely to have a huge effect on bias. Reducing it significantly (say going from 1,000 features to 100—a 10x reduction) is more likely to have a significant effect, so long as you are not excluding too many useful features. In modern deep learning, when data is plentiful, there has been a shift away from feature selection, and we are now more likely to give all the features we have to the algorithm and let the algorithm sort out which ones to use based on the data. But when your training set is small, feature selection can be very useful.</p>
</li>
<li><p><strong>Decrease the model size ​(such as number of neurons/layers)</strong>: ​Use with caution.​ This technique could decrease variance, while possibly increasing bias. However, I don’t recommend this technique for addressing variance. Adding regularization usually gives better classification performance. The advantage of reducing the model size is reducing your computational cost and thus speeding up how quickly you can train models. If speeding up model training is useful, then by all means consider decreasing the model size. But if your goal is to reduce variance, and you are not concerned about the computational cost, consider adding regularization instead.<br>Here are two additional tactics, repeated from the previous chapter on addressing bias:</p>
</li>
<li><p><strong>Modify input features based on insights from error analysis​</strong>: Say your error analysis inspires you to create additional features that help the algorithm to eliminate a particular category of errors. These new features could help with both bias and variance. In<br>Page 53 Machine Learning Yearning-Draft Andrew Ng<br>theory, adding more features could increase the variance; but if you find this to be the case, then use regularization, which will usually eliminate the increase in variance.</p>
</li>
<li><p><strong>Modify model architecture​</strong> (such as neural network architecture) so that it is more suitable for your problem: This technique can affect both bias and variance.</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Book Note</tag>
      </tags>
  </entry>
  <entry>
    <title>Machine Learning Yarning(part one)</title>
    <url>/Machine-Learning-Yarning-part-one/2019/03/19/</url>
    <content><![CDATA[<p><strong>Reference from <em>Machine Learning Yarning</em> by Andrew Ng</strong></p>
<h2 id="Setting-up-development-and-test-sets"><a href="#Setting-up-development-and-test-sets" class="headerlink" title="Setting up development and test sets"></a>Setting up development and test sets</h2><ul>
<li>Choose dev and test sets from a distribution that reflects what data you expect to get in the future and want to do well on. This may not be the same as your training data’s distribution.</li>
<li>Choose dev and test sets from the same distribution if possible.</li>
<li>Choose a single-number evaluation metric for your team to optimize. If there are multiple goals that you care about, consider combining them into a single formula (such as averaging multiple error metrics) or defining satisficing and optimizing metrics.</li>
<li>Machine learning is a highly iterative process: You may try many dozens of ideas before finding one that you’re satisfied with.</li>
<li>Having dev/test sets and a single-number evaluation metric helps you quickly evaluate algorithms, and therefore iterate faster.</li>
<li>When starting out on a brand new application, try to establish dev/test sets and a metric quickly, say in less than a week. It might be okay to take longer on mature applications.</li>
<li>The old heuristic of a 70%/30% train/test split does not apply for problems where you have a lot of data; the dev and test sets can be much less than 30% of the data.</li>
<li>Your dev set should be large enough to detect meaningful changes in the accuracy of your algorithm, but not necessarily much larger. Your test set should be big enough to give you a confident estimate of the final performance of your system.</li>
<li>If your dev set and metric are no longer pointing your team in the right direction, quickly change them: <ul>
<li>If you had overfit the dev set, get more dev set data. </li>
<li>If the actual distribution you care about is different from the dev/test set distribution, get new dev/test set data.</li>
<li>If your metric is no longer measuring what is most important to you, change the metric.</li>
</ul>
</li>
</ul>
<h2 id="Basic-Error-Analysis"><a href="#Basic-Error-Analysis" class="headerlink" title="Basic Error Analysis"></a>Basic Error Analysis</h2><ul>
<li>When you start a new project, especially if it is in an area in which you are not an expert, it is hard to correctly guess the most promising directions.</li>
<li>So don’t start off trying to design and build the perfect system. Instead build and train a basic system as quickly as possible—perhaps in a few days. Then use error analysis to help you identify the most promising directions and iteratively improve your algorithm from there.</li>
<li>Carry out error analysis by manually examining ~100 dev set examples the algorithm misclassifies and counting the major categories of errors. Use this information to prioritize what types of errors to work on fixing.</li>
<li>Consider splitting the dev set into an Eyeball dev set, which you will manually examine, and a Blackbox dev set, which you will not manually examine. If performance on the Eyeball dev set is much better than the Blackbox dev set, you have overfit the Eyeball dev set and should consider acquiring more data for it.<ul>
<li>Why do we explicitly separate the dev set into Eyeball and Blackbox dev sets? Since you will gain intuition about the examples in the Eyeball dev set, you will start to overfit the Eyeball dev set faster. If you see the performance on the Eyeball dev set improving much more rapidly than the performance on the Blackbox dev set, you have overfit the Eyeball dev set. In this case, you might need to discard it and find a new Eyeball dev set by moving more examples from the Blackbox dev set into the Eyeball dev set or by acquiring new labeled data.</li>
<li>If you are working on a task that even humans cannot do well, then the exercise of examining an Eyeball dev set will not be as helpful because it is harder to figure out why the algorithm didn’t classify an example correctly</li>
</ul>
</li>
<li>The Eyeball dev set should be big enough so that your algorithm misclassifies enough examples for you to analyze. A Blackbox dev set of 1,000-10,000 examples is sufficient for many applications.</li>
<li>If your dev set is not big enough to split this way, just use the entire dev set as an Eyeball dev set for manual error analysis, model selection, and hyperparameter tuning.</li>
</ul>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Book Note</tag>
      </tags>
  </entry>
  <entry>
    <title>Matrix Algebra for Engineers (part two)</title>
    <url>/Matrix-Algebra-for-Engineers-part-two/2019/03/17/</url>
    <content><![CDATA[<p><strong>reference from <em>Matrix Algebra for Engineers</em> by Jeffrey R. Chasnov</strong></p>
<h2 id="Vector-spaces"><a href="#Vector-spaces" class="headerlink" title="Vector spaces"></a>Vector spaces</h2><ul>
<li>A vector space consists of a set of vectors and a set of scalars.</li>
<li>For the set of vectors and scalars to form a vector space, the set of vectors must be <strong>closed</strong> under vector addition and scalar multiplication. That is, when you multiply any two vectors in the set by real numbers and add them, the resulting vector must still be in the set.</li>
</ul>
<p>As an example:</p>
<script type="math/tex; mode=display">
\begin{pmatrix}
\mu_{1} \\
\mu_{2} \\
\mu_{3} \\
\end{pmatrix},
\begin{pmatrix}
\nu_{1} \\
\nu_{2} \\
\nu_{3} \\
\end{pmatrix}</script><p>then</p>
<script type="math/tex; mode=display">
w = a\mu + b\nu = 
\begin{pmatrix}
a\mu_{1} + b\nu_{1} \\ 
a\mu_{2} + b\nu_{2} \\ 
a\mu_{3} + b\nu_{3} \\ 
\end{pmatrix}</script><p>so that the set of all three-by-one matrices (together with the set of real numbers) is a vector space. This space is usually called \mathbb{R^{3}}.</p>
<h2 id="Linear-independence"><a href="#Linear-independence" class="headerlink" title="Linear independence"></a>Linear independence</h2><p>The set of vectors, ${u_{1}, u_{2}, . . . , u_{n}}$, are linearly independent if for any scalars $c_{1}, c_{2}, . . . , c_{n}$, the equation</p>
<script type="math/tex; mode=display">c_{1}u_{1}+c_{2}u_{2}+···+c_{n}u_{n} = 0</script><p>has only the solution $c_{1} = c_{2} = ··· = c_{n} = 0$</p>
<h2 id="Span-basis-and-dimension"><a href="#Span-basis-and-dimension" class="headerlink" title="Span, basis and dimension"></a>Span, basis and dimension</h2><h3 id="Span"><a href="#Span" class="headerlink" title="Span"></a>Span</h3><p>Given a set of vectors, one can generate a vector space by forming all linear combinations of that set of vectors. The span of the set of vectors ${v_{1}, v_{2}, . . . , v_{n}}$ is the vector space consisting of all linear combinations of $v_{1}, v_{2}, . . . , v_{n}$. We say that a set of vectors spans a vector space.</p>
<h3 id="basis"><a href="#basis" class="headerlink" title="basis"></a>basis</h3><p>The <strong>smallest</strong> set of vectors needed to span a vector space forms a <strong>basis</strong> for that vector space</p>
<h3 id="dimension"><a href="#dimension" class="headerlink" title="dimension"></a>dimension</h3><p><strong>The number</strong> of vectors in a basis gives the dimension of the vector space </p>
<h2 id="Gram-Schmidt-process"><a href="#Gram-Schmidt-process" class="headerlink" title="Gram-Schmidt process"></a>Gram-Schmidt process</h2><p>Given any basis for a vector space, we can use an algorithm called the Gram-Schmidt process to construct an <strong>orthonormal basis</strong> for that space</p>
<p>Let the vectors $v_{1}, v_{2}, . . . , v_{n}$ be a basis for some n- dimensional vector space. We will assume here that these vectors are column matrices, but this process also applies more generally. We will construct an orthogonal basis $u_{1}, u_{2}, . . . , u_{n}$, and then normalize each vector to obtain an orthonormal basis.</p>
<p>First, define $u_{1} = v_{1}$, To find the next orthogonal basis vector, define</p>
<script type="math/tex; mode=display">
u_{2} = v_{2} - \frac{(u_{1}^{T}v_{2})u_{1}}{u_{1}^{T}u_{1}}</script><p>The next orthogonal vector in the new basis can be found from</p>
<script type="math/tex; mode=display">
u_{3} = v_{3} - \frac{(u_{1}^{T}v_{3})u_{1}}{u_{1}^{T}u_{1}} - \frac{(u_{2}^{T}v_{3})u_{2}}{u_{2}^{T}u_{2}}</script><p>We can continue in this fashion to construct n orthogonal basis vectors. These vectors can then be normalized via</p>
<script type="math/tex; mode=display">
\hat{u_{1}} = \frac{u_{1}}{(u_{1}^{T}u_{1})^{\frac{1}{2}}}</script><h2 id="Null-space"><a href="#Null-space" class="headerlink" title="Null space"></a>Null space</h2><p>The null space of a matrix A, which we denote as Null(A), is the vector space spanned by all column vectors x that satisfy the matrix equation</p>
<script type="math/tex; mode=display">Ax = 0</script><p>To find a basis for the null space of a noninvertible matrix, we bring A to reduced row echelon form.</p>
<script type="math/tex; mode=display">
A = \begin{pmatrix}
-3 & 6 & -1 & 1 & -1 \\
1 & -2 & 2 & 3 & -1 \\
2 & -4 & 5 & 8 & -4 \\
\end{pmatrix} \rightarrow
A = \begin{pmatrix}
1 & -2 & 0 & -1 & 3 \\
0 & 0 & 1 & 2 & -2 \\
0 & 0 & 0 & 0 & 0 \\
\end{pmatrix}</script><p>We call the variables associated with the pivot columns, x1 and x3, <strong>basic variables</strong>, and the variables associated with the non-pivot columns, x2, x4 and x5, <strong>free variables</strong>. Writing the basic variables on the left-hand side of the $Ax = 0$ equations, we have from the first and second rows</p>
<script type="math/tex; mode=display">
\begin{align*}
x_{1} = 2x_{2} + x_{4} - 3x_{5}, \\
x_{3} = -2x_{4} + 2x_{5}, \\
\end{align*}</script><p>Eliminating x1 and x3, we can write the general solution for vectors in Null(A) as</p>
<script type="math/tex; mode=display">
\begin{pmatrix}
2x_{2} + x_{4} - 3x_{5} \\
x_{2} \\
-2x_{4} + 2x_{5} \\
x_{4} \\ 
x_{5} \\
\end{pmatrix} = x_{2}
\begin{pmatrix}
2 \\
1 \\
0 \\
0 \\
0 \\
\end{pmatrix} + x_{4}
\begin{pmatrix}
1 \\
0 \\
-2 \\
1 \\
0 \\
\end{pmatrix} + x_{5}
\begin{pmatrix}
-3 \\
0 \\
2 \\
0 \\
1 \\
\end{pmatrix}</script><p>where the free variables $x_{2}$, $x_{4}$, and $x_{5}$ can take any values. By writing the null space in this form, a basis for Null(A) is made evident, and is given by</p>
<script type="math/tex; mode=display">
\left\{
\begin{pmatrix}
2 \\
1 \\
0 \\
0 \\
0 \\
\end{pmatrix},
\begin{pmatrix}
1 \\
0 \\
-2 \\
1 \\
0 \\
\end{pmatrix},
\begin{pmatrix}
-3 \\
0 \\
2 \\
0 \\
1 \\
\end{pmatrix}
\right\}</script><h2 id="Application-of-the-null-space"><a href="#Application-of-the-null-space" class="headerlink" title="Application of the null space"></a>Application of the null space</h2><p>An underdetermined system of linear equations $Ax = b$ with more unknowns than equations may not have a unique solution</p>
<p>If u is the general form of a vector in the null space of A, and v is any vector that satisfies $Av = b$, then $x = u+v$ satisfies $Ax = A(u+v) = Au+Av = 0+b = b$. The general solution of $Ax = b$ can therefore be written as the sum of a general vector in Null(A) and a particular vector that satisfies the underdetermined system.</p>
<p>As an example,</p>
<script type="math/tex; mode=display">
\begin{align*}
2x_{1} + 2x_{2} + x_{3} = 0, \\
2x_{1} − 2x_{2} − x_{3} = 1, \\
\end{align*}</script><p>We first bring the augmented matrix to reduced row echelon form:</p>
<script type="math/tex; mode=display">
\begin{pmatrix}
2 & 2 & 1 & 0 \\
2 & -2 & -1 & 1 \\
\end{pmatrix} \rightarrow
\begin{pmatrix}
1 & 0 & 0 & \frac{1}{4} \\
0 & 1 & \frac{1}{2} & -\frac{1}{4} \\
\end{pmatrix}</script><p>The null space is determined from $x_{1} = 0$ and $x_{2} = −\frac{x_{3}}{2}$, and we can write</p>
<script type="math/tex; mode=display">
Null(A) = span \left\{ \begin{pmatrix} 0 \\ -1 \\ 2 \end{pmatrix}\right\}</script><p>The general solution to the original underdetermined linear system is <strong>the sum of the null space and the particular solution</strong> and is given by</p>
<script type="math/tex; mode=display">
\begin{pmatrix}
x_{1} \\
x_{2} \\
x_{3} \\
\end{pmatrix} = a 
\begin{pmatrix}
0 \\
-1 \\
2 \\
\end{pmatrix} + \frac{1}{4} 
\begin{pmatrix}
1 \\
-1 \\
0 \\
\end{pmatrix}</script><h2 id="Column-space"><a href="#Column-space" class="headerlink" title="Column space"></a>Column space</h2><p>The column space of a matrix is the vector space spanned by the columns of the matrix. <strong>When a matrix is multiplied by a column vector, the resulting vector is in the column space of the matrix</strong>, as<br>can be seen from</p>
<script type="math/tex; mode=display">
\begin{pmatrix}
a & b \\
c & d \\
\end{pmatrix} 
\begin{pmatrix}
x \\
y \\
\end{pmatrix} = 
\begin{pmatrix}
ax + by \\
cx + dy \\
\end{pmatrix} = x
\begin{pmatrix}
a \\
c \\
\end{pmatrix} + y
\begin{pmatrix}
b \\
d \\
\end{pmatrix}</script><p>Recall that the dimension of the null space is the number of non-pivot columns—equal to the number of free variables—so that the sum of the dimensions of the null space and the column space is equal to the total number of columns—equal</p>
<script type="math/tex; mode=display">dim(Col(A)) + dim(Null(A)) = n.</script><h2 id="Row-space-left-null-space-and-rank"><a href="#Row-space-left-null-space-and-rank" class="headerlink" title="Row space, left null space and rank"></a>Row space, left null space and rank</h2><p>In addition to the column space and the null space, a matrix A has two more vector spaces associated with it, namely the <strong>column space</strong> and <strong>null space</strong> of $A^{T}$, which are called the <strong>row space</strong> and the <strong>left null space</strong>.</p>
<p>Furthermore, the dimension of the column space of A is also equal to the number of pivot columns,<br>so that the dimensions of the column space and the row space of a matrix are equal. We have </p>
<script type="math/tex; mode=display">dim(Col(A)) = dim(Row(A)).</script><p><strong>We call this dimension the rank of the matrix A</strong></p>
<h2 id="Orthogonal-projections"><a href="#Orthogonal-projections" class="headerlink" title="Orthogonal projections"></a>Orthogonal projections</h2><p>Suppose that V is an n-dimensional vector space and W is a p-dimensional subspace of V.  In general, the orthogonal projection of v onto W is given by</p>
<script type="math/tex; mode=display">
v_{proj_{W}} = (v^{T}s_{1})s_{1} + (v^{T}s_{2})s_{2} + · · · + (v^{T}s_{p})s_{p};</script><p>and we can write</p>
<script type="math/tex; mode=display">v=v_{proj_{W}} +(v−v_{proj_{W}})</script><p>$v_{proj_{W}}$ is closer to v than any other vector in W</p>
<h2 id="The-least-squares-problem"><a href="#The-least-squares-problem" class="headerlink" title="The least-squares problem"></a>The least-squares problem</h2><p><img src="linear.png" alt="linear.png"></p>
<p>These equations constitute a system of n equations in the two unknowns $\beta_{0}$ and $\beta_{1}$. The corresponding<br>matrix equation is given by:</p>
<script type="math/tex; mode=display">
\begin{pmatrix}
1 & x_{1} \\
1 & x_{2} \\
\vdots \\
1 & x_{n} \\
\end{pmatrix}
\begin{pmatrix}
\beta{0} \\
\beta{1} \\
\end{pmatrix} = 
\begin{pmatrix}
y_{1} \\
y_{2} \\
\vdots \\
y_{n}
\end{pmatrix}</script><p>This is an overdetermined system of equations with no solution. The problem of least squares is to find the best solution.</p>
<p>We can generalize this problem as follows. Suppose we are given a matrix equation, $Ax = b$, that has no solution because b is not in the column space of A. So instead we solve $Ax = b_{projCol(A)}$ , where $b_{projCol(A)}$ is the projection of b onto the column space of A. The solution is then called the least-squares solution for x.</p>
<script type="math/tex; mode=display">b_{projCol(A)} = A(A^{T}A)^{−1}A^{T}b.</script><h2 id="Laplace-expansion"><a href="#Laplace-expansion" class="headerlink" title="Laplace expansion"></a>Laplace expansion</h2><script type="math/tex; mode=display">
\begin{vmatrix}
a & b & c \\
d & e & f \\
g & h & i \\
\end{vmatrix} = aei+bfg+cdh−ceg−bdi−afh = a(ei− fh)−b(di− fg)+c(dh−eg) \\</script><p>which can be written suggestively as</p>
<script type="math/tex; mode=display">
\begin{vmatrix}
a & b & c \\
d & e & f \\
g & h & i \\
\end{vmatrix} = 
a \begin{vmatrix}
e & f \\
h & i \\
\end{vmatrix} - b \begin{vmatrix}
d & f \\
g & i \\
\end{vmatrix} + c \begin{vmatrix}
d & e \\
g & h \\
\end{vmatrix}</script><h2 id="Properties-of-a-determinant"><a href="#Properties-of-a-determinant" class="headerlink" title="Properties of a determinant"></a>Properties of a determinant</h2><ul>
<li>Property 1: The determinant of the identity matrix is one;</li>
<li>Property 2: The determinant changes sign under row interchange;</li>
<li>Property 3: The determinant is a linear function of the first row, holding all other rows fixed.</li>
</ul>
<h2 id="The-eigenvalue-problem"><a href="#The-eigenvalue-problem" class="headerlink" title="The eigenvalue problem"></a>The eigenvalue problem</h2><p>Let A be a square matrix, x a column vector, and λ a scalar. The eigenvalue problem for A solves</p>
<script type="math/tex; mode=display">Ax = \lambda x</script><p>for eigenvalues $\lambda_{i}$ with corresponding eigenvectors $x_{i}$. Making use of the identity matrix I, the eigenvalue problem can be rewritten as</p>
<script type="math/tex; mode=display">(A−\lambda I)x = 0</script><p>For there to be nonzero eigenvectors, the matrix $(A − \lambda I)$ must be singular, that is,</p>
<script type="math/tex; mode=display">det(A−\lambda I) = 0.</script><h2 id="Matrix-diagonalization"><a href="#Matrix-diagonalization" class="headerlink" title="Matrix diagonalization"></a>Matrix diagonalization</h2><p>For concreteness, consider a two-by-two matrix A with eigenvalues and eigenvectors given by</p>
<script type="math/tex; mode=display">
\lambda_{1}, x_{1} = \begin{pmatrix}
x_{11}\\
x_{21}\\
\end{pmatrix} ;
\lambda_{2}, x_{2} = \begin{pmatrix}
x_{12}\\
x_{22}\\
\end{pmatrix}</script><p>And consider the matrix product and factorization given by</p>
<script type="math/tex; mode=display">
A \begin{pmatrix}
x_{11} & x_{12} \\
x_{21} & x_{22} \\
\end{pmatrix} = \begin{pmatrix}
\lambda_{1}x_{11} & \lambda_{2}x_{12} \\
\lambda_{1}x_{21} & \lambda_{2}x_{22} \\
\end{pmatrix} = \begin{pmatrix}
x_{11} & x_{12} \\
x_{21} & x_{22} \\
\end{pmatrix} \begin{pmatrix}
\lambda_{1} & 0 \\
0 & \lambda_{2} \\
\end{pmatrix}</script><p>Generalizing, we define S to be the matrix whose columns are the eigenvectors of A, and Λ to be the diagonal matrix with eigenvalues down the diagonal. Then for any n-by-n matrix with n linearly independent eigenvectors, we have</p>
<script type="math/tex; mode=display">AS = SΛ</script><p>where S is an invertible matrix. Multiplying both sides on the right or the left by $S^{−1}$, we derive the<br>relations</p>
<script type="math/tex; mode=display">A = SΛS^{−1} \quad or \quad Λ = S^{−1}AS.</script><h2 id="Powers-of-a-matrix"><a href="#Powers-of-a-matrix" class="headerlink" title="Powers of a matrix"></a>Powers of a matrix</h2><p>Suppose that A is diagonalizable, and consider</p>
<script type="math/tex; mode=display">A^{p} = (SΛS^{−1})(SΛS^{−1}) = SΛ^{p}S^{−1}</script><script type="math/tex; mode=display">
\begin{pmatrix}
\lambda_{1} & 0 \\
0 & \lambda_{2} \\
\end{pmatrix}
\begin{pmatrix}
\lambda_{1} & 0 \\
0 & \lambda_{2} \\
\end{pmatrix} = 
\begin{pmatrix}
\lambda_{1}^{2} & 0 \\
0 & \lambda_{2}^{2} \\
\end{pmatrix}</script>]]></content>
      <categories>
        <category>Math</category>
        <category>Linear Algebra</category>
      </categories>
  </entry>
  <entry>
    <title>Matrix Algebra for Engineers (part one)</title>
    <url>/Matrix-Algebra-for-Engineers-part-one/2019/03/17/</url>
    <content><![CDATA[<p><strong>reference from <em>Matrix Algebra for Engineers</em> by Jeffrey R. Chasnov</strong></p>
<h2 id="Inner-and-outer-products"><a href="#Inner-and-outer-products" class="headerlink" title="Inner and outer products"></a>Inner and outer products</h2><p>The <strong>inner product</strong> (or dot product or scalar product) between two vectors is obtained from the ma- trix product of a row vector times a column vector</p>
<script type="math/tex; mode=display">
\mu^{T}\nu = ( \mu_{1} \quad \mu_{2} \quad \mu_{3} ) \begin{pmatrix} \nu_{1} \\ \nu_{2} \\ \nu_{3} \end{pmatrix} = \mu_{1}\nu_{1} + \mu_{2}\nu_{2} + \mu_{3}\nu_{3}.</script><p>If the inner product between two vectors is zero, we say that the vectors are <strong>orthogonal</strong>. </p>
<p>The <strong>norm</strong> of a vector is defined by</p>
<script type="math/tex; mode=display">
\lVert \mu \rVert = (\mu^{T}\mu) =  ( \mu_{1}^{2} + \mu_{2}^{2} + \mu_{3}^{2} )^{\frac{1}{2}}</script><p>If the norm of a vector is equal to one, we say that the vector is <strong>normalized.</strong> If a set of vectors are mutually orthogonal and normalized, we say that these vectors are <strong>orthonormal.</strong></p>
<p>An <strong>outer product</strong> is also defined, and is used in some applications. The outer product between u and v is given by</p>
<script type="math/tex; mode=display">
\mu\nu^{T} = \begin{pmatrix} \mu_{1} \\ \mu_{2} \\ \mu_{3} \end{pmatrix} ( \nu_{1} \quad \nu_{2} \quad \nu_{3} ) = 
\begin{pmatrix} 
\mu_{1}\nu_{1} & \mu_{1}\nu_{2} & \mu_{1}\nu_{3} \\
\mu_{2}\nu_{1} & \mu_{2}\nu_{2} & \mu_{2}\nu_{3} \\
\mu_{3}\nu_{1} & \mu_{3}\nu_{2} & \mu_{3}\nu_{3} \\
\end{pmatrix}</script><h2 id="Inverse-matrix"><a href="#Inverse-matrix" class="headerlink" title="Inverse matrix"></a>Inverse matrix</h2><p>Square matrices may have inverses. When a matrix A has an inverse, we say it is invertible and denote its inverse by $A^{−1}$. The inverse matrix satisfies</p>
<script type="math/tex; mode=display">AA^{−1} = A^{−1}A = I.</script><script type="math/tex; mode=display">A^{-1} = \frac{1}{ad-bc}
\begin{pmatrix}
d & -b \\
-c & a \\
\end{pmatrix}</script><script type="math/tex; mode=display">
det \ A = 
\begin{vmatrix}
a & b \\
c & d \\
\end{vmatrix}
= ad - bc</script><p>The determinant of a two-by-two matrix is the product of the diagonals minus the product of the off-diagonals. Evidently, A is invertible only if $det \quad A \neq 0.$ Notice that the inverse of a two-by-two matrix, in words, is found by switching the diagonal elements of the matrix, negating the off-diagonal elements, and dividing by the determinant.<br>Later, we will show that an n-by-n matrix is invertible <strong>if and only if its determinant is nonzero.</strong> This will require a more general definition of determinant.</p>
<h2 id="Orthogonal-matrices"><a href="#Orthogonal-matrices" class="headerlink" title="Orthogonal matrices"></a>Orthogonal matrices</h2><p>A square matrix Q with real entries that satisfies</p>
<script type="math/tex; mode=display">Q^{−1} = Q^{T}</script><p>is called an <strong>orthogonal matrix</strong>.</p>
<p>Since the columns of $Q^{T}$ are just the rows of Q, and $QQ^{T}$ = I, the row vectors that form Q must<br>be <strong>orthonormal</strong>. Similarly, since the rows of $Q^{T}$ are just the columns of Q, and $Q^{T}Q$ = I, the column vectors that form Q must also be <strong>orthonormal</strong>.</p>
<h2 id="Rotation-matrices"><a href="#Rotation-matrices" class="headerlink" title="Rotation matrices"></a>Rotation matrices</h2><p><img src="Rotating.png" alt="Rotating.png"></p>
<p>Writing the equations for  $x’$ and $y’$ in matrix form, we have</p>
<script type="math/tex; mode=display">
\begin{pmatrix} 
x' \\
y' \\
\end{pmatrix}  = \begin{pmatrix} 
cos\theta & -sin\theta \\
sin\theta & cos\theta \\
\end{pmatrix} = \begin{pmatrix} 
x \\
y \\
\end{pmatrix}</script><p>The above two-by-two matrix is a rotation matrix and we will denote it by $R_{θ}$. Observe that the rows and columns of $R_{θ}$ are <strong>orthonormal</strong> and that the inverse of $R_{θ}$ is just its transpose. The inverse of $R_{θ}$ rotates a vector by −θ.</p>
<h2 id="Permutation-matrices"><a href="#Permutation-matrices" class="headerlink" title="Permutation matrices"></a>Permutation matrices</h2><p>Another type of <strong>orthogonal matrix</strong> is a permutation matrix. An n-by-n permutation matrix, when <strong>multiplying on the left permutes the rows of a matrix</strong>, and when <strong>multiplying on the right permutes the columns</strong>. Clearly, permuting the rows of a column vector will not change its norm.</p>
<script type="math/tex; mode=display">
\begin{pmatrix}
0 & 1 \\
1 & 0 \\
\end{pmatrix}
\begin{pmatrix}
a & b \\
c & d \\
\end{pmatrix} =
\begin{pmatrix}
c & d \\
a & b \\
\end{pmatrix}</script><script type="math/tex; mode=display">
\begin{pmatrix}
a & b \\
c & d \\
\end{pmatrix}
\begin{pmatrix}
0 & 1 \\
1 & 0 \\
\end{pmatrix} =
\begin{pmatrix}
b & a \\
d & c \\
\end{pmatrix}</script><h2 id="Gaussian-elimination"><a href="#Gaussian-elimination" class="headerlink" title="Gaussian elimination"></a>Gaussian elimination</h2><script type="math/tex; mode=display">
\begin{align*}
−3x_{1} + 2x_{2} − x_{3} = −1 \\ 
6x_{1} − 6x_{2} + 7x_{3} = −7,  \\
3x_{1} − 4x_{2} + 4x_{3} = −6, \\
\end{align*}</script><p>which can be written in matrix form as</p>
<script type="math/tex; mode=display">
\begin{pmatrix}
-3 & 2 & -1 & -1 \\
6 & -6 & 7 & -7 \\
3 & -4 & 4 & -6 \\
\end{pmatrix}</script><p>Row reduction is then performed on this augmented matrix. Allowed operations are (1) interchange the order of any rows, (2) multiply any row by a constant, (3) add a multiple of one row to another row. These three operations do not change the solution of the original equations. The goal here is to <strong>convert the matrix A into upper-triangular form</strong>, and then use this form to quickly solve for the unknowns x.</p>
<p>We first form what is called an <strong>augmented matrix</strong> by combining the matrix A with the<br>column vector b</p>
<script type="math/tex; mode=display">
\begin{pmatrix}
-3 & 2 & -1 & -1 \\
0 & -2 & 5 & -9 \\
0 & -2 & 3 & -7 \\
\end{pmatrix}</script><p>These equations can be solved by back substitution, starting from the last equation and working<br>backwards. We have</p>
<script type="math/tex; mode=display">
\begin{align*}
& x_{3} = −1, \\
& x_{2} = −\frac{1}{2}(−9−5x_{3})=2, \\
& x_{1} = −\frac{1}{3}(−1+x_{3}−2x_{2})=2
\end{align*}</script><p>We have thus found the solution</p>
<script type="math/tex; mode=display">
\begin{pmatrix}
x_{1} \\
x_{2} \\
x_{3} \\
\end{pmatrix} = 
\begin{pmatrix}
2 \\
2 \\
-1 \\
\end{pmatrix}</script><p>When performing Gaussian elimination, the diagonal element that is used during the elimination procedure is called the <strong>pivot</strong></p>
<h2 id="Reduced-row-echelon-form"><a href="#Reduced-row-echelon-form" class="headerlink" title="Reduced row echelon form"></a>Reduced row echelon form</h2><p>If we continue the row elimination procedure so that all the pivots are one, and all the entries above and below the pivots are eliminated, then we say that the resulting matrix is in <strong>reduced row echelon form</strong></p>
<script type="math/tex; mode=display">
\begin{pmatrix}
1 & 2 & 3 & 4 \\
4 & 5 & 6 & 7 \\
6 & 7 & 8 & 9 \\
\end{pmatrix} \\</script><script type="math/tex; mode=display">
rref(A) = \begin{pmatrix}
1 & 0 & -1 & -2 \\
0 & 1 & 2 & 3 \\
0 & 0 & 0 & 0 \\
\end{pmatrix}</script><h2 id="Computing-inverses"><a href="#Computing-inverses" class="headerlink" title="Computing inverses"></a>Computing inverses</h2><script type="math/tex; mode=display">(A | E) \rightarrow (E | A^{-1})</script><p>Because:<br>\begin{align}<br>&amp; p_{1}p_{2}p_{3}p_{4}…p_{n}A \rightarrow E \\<br>&amp; p_{1}p_{2}p_{3}p_{4}…p_{n} = A^{-1} \\<br>&amp; p_{1}p_{2}p_{3}p_{4}…p_{n}E \rightarrow A^{-1}<br>\end{align}</p>
<script type="math/tex; mode=display">
\begin{pmatrix}
-3 & -2 & -1 & 1 & 0 & 0 \\
6  & -6 & 7  & 0 & 1 & 0\\
3  & -4 & 4  & 0 & 0 & 1 \\
\end{pmatrix}\rightarrow
\begin{pmatrix}
1 & 0 & 0 & -\frac{1}{3} & \frac{1}{3}  & -\frac{2}{3}  \\
0 & 1 & 0 & \frac{1}{4} & \frac{3}{4} & -\frac{5}{4} \\
0 & 0 & 1 & \frac{1}{2} & \frac{1}{2} & -\frac{1}{2}  \\
\end{pmatrix}</script><h2 id="LU-decomposition"><a href="#LU-decomposition" class="headerlink" title="LU decomposition"></a>LU decomposition</h2><p>row reduction of a matrix A can be written as</p>
<script type="math/tex; mode=display">M_{3}M_{2}M_{1}A = U</script><p>where U is upper triangular. Upon inverting the elementary matrices, we have</p>
<script type="math/tex; mode=display">A = M_{3}^{-1}M_{2}^{-1}M_{1}^{-1}U</script><p>Therefore,</p>
<script type="math/tex; mode=display">L = M_{3}^{-1}M_{2}^{-1}M_{1}^{-1}</script><p>Our LU decomposition of A is therefore:</p>
<script type="math/tex; mode=display">
\begin{pmatrix}
-3 & -2 & -1\\
6 & -6 & 7\\
3 & -4 & 4\\
\end{pmatrix} = 
\begin{pmatrix}
1 & 0 & 0\\
-2 & 1 & 0\\
-1 & 1 & 1\\
\end{pmatrix}
\begin{pmatrix}
-3 & 2 & -1\\
0 & -2 & 5\\
0 & 0 & -2\\
\end{pmatrix}</script><h2 id="Solving-LU-x-b"><a href="#Solving-LU-x-b" class="headerlink" title="Solving (LU)x = b"></a>Solving (LU)x = b</h2><p>The LU decomposition is useful when one needs to solve <strong>Ax = b</strong> for many right-hand-sides. With the LU decomposition in hand, one writes</p>
<script type="math/tex; mode=display">(LU)x = L(Ux) = b</script>]]></content>
      <categories>
        <category>Math</category>
        <category>Linear Algebra</category>
      </categories>
      <tags>
        <tag>Course Note</tag>
      </tags>
  </entry>
  <entry>
    <title>Fluent Python</title>
    <url>/Fluent-Python/2019/03/05/</url>
    <content><![CDATA[<h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><h2 id="泛映射类型"><a href="#泛映射类型" class="headerlink" title="泛映射类型"></a>泛映射类型</h2><p>Mapping 和 MutableMapping 这两个抽象基类，提供形式化接口<br><img src="DBAF8F19D803E115AEC422F6D4E4F04B.png" alt="Screen Shot 2018-09-29 at 10.44.50.png"></p>
<h3 id="什么是可散列数据？"><a href="#什么是可散列数据？" class="headerlink" title="什么是可散列数据？"></a>什么是可散列数据？</h3><ul>
<li>原子不可变数据类型（str，bytes 和 number）</li>
<li>在生命周期类，散列值不变的类型。需要有__hash__ 和 __qe__ 方法</li>
<li><p>元组类型需要元组里每一个值都是可散列类型   </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = (<span class="string">"a"</span>,<span class="string">"b"</span>,(<span class="string">"c"</span>,<span class="string">"d"</span>))  <span class="comment">#-&gt;hashable</span></span><br><span class="line">a = (<span class="string">"a"</span>,<span class="string">"b"</span>,[<span class="string">"c"</span>,<span class="string">"d"</span>])  <span class="comment">#-&gt; not hashable</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>用户自定义的对象都是可散列的，因为散列值就是id()函数的值。如果自定义对象实现了__eq__方法，并且这个用到了这个对象的内部状态的话，内部状态必须不可变。</p>
</li>
</ul>
<h2 id="字典推导"><a href="#字典推导" class="headerlink" title="字典推导"></a>字典推导</h2><p>可以从任何键值对作为作为元素的可迭代对象中推导<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = [(<span class="string">"zhang"</span>,<span class="number">23</span>),[<span class="string">"li"</span>,<span class="number">23</span>],[<span class="string">"ding"</span>,<span class="number">24</span>],&#123;<span class="string">"huang"</span>,<span class="number">24</span>&#125;]</span><br><span class="line">data_dict = &#123;name:age <span class="keyword">for</span> name,age <span class="keyword">in</span> data&#125;</span><br><span class="line">print(data_dict)   <span class="comment">#-&gt; &#123;'zhang': 23, 'li': 23, 'ding': 24, 24: 'huang'&#125;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="常用的映射方法"><a href="#常用的映射方法" class="headerlink" title="常用的映射方法"></a>常用的映射方法</h2><ul>
<li>d.clear()</li>
<li>d.</li>
<li>__contains__(k)</li>
<li>d.copy()  #潜赋值</li>
<li>d.__delitem__(k)</li>
<li>d.get(k, default)</li>
<li>d.items()</li>
<li>d.__iter__()</li>
<li>d.keys()</li>
<li>d.__len__()</li>
<li>d.pop(k)</li>
<li>d.popitem()</li>
<li>d.__reversed__() #仅针对 OrdereDidic</li>
<li>d.setdefault(k,[default]) #如果存在键k,将对应的值设置为default,然后返回.如果没有，d[k] = default.</li>
<li>d.__setitem__(k,v)</li>
<li>d.values()</li>
</ul>
<h3 id="setdefault-用法"><a href="#setdefault-用法" class="headerlink" title="setdefault 用法"></a>setdefault 用法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_dict.setdefault(key,[]).append(value)  <span class="comment">#效率更高</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ket <span class="keyword">not</span> <span class="keyword">in</span> my_dict:</span><br><span class="line">    my_dict[key] = []</span><br><span class="line">my_dict[key].append(new_value)</span><br></pre></td></tr></table></figure>
<h2 id="映射的弹性查询"><a href="#映射的弹性查询" class="headerlink" title="映射的弹性查询"></a>映射的弹性查询</h2><h3 id="defaultdict"><a href="#defaultdict" class="headerlink" title="defaultdict"></a>defaultdict</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line">a = defaultdict(list)</span><br></pre></td></tr></table></figure>
<p>list可调用对象存储在default_factory中，当a[k]，k不存在时，a.__getitem__ 会调用 __miss__ 方法（只会在__getitem__里调用），然后利用default_factory生成返回值。</p>
<h3 id="自己创建继承-dict-类型，然后充血-miss-方法"><a href="#自己创建继承-dict-类型，然后充血-miss-方法" class="headerlink" title="自己创建继承 dict 类型，然后充血__miss__方法"></a>自己创建继承 dict 类型，然后充血__miss__方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrDict</span><span class="params">(dict)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__missing__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(key, str):</span><br><span class="line">            <span class="keyword">return</span> KeyError(key)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self[str(key)]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key, default=None)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self[key]</span><br><span class="line">        <span class="keyword">except</span> keyError:</span><br><span class="line">            <span class="keyword">return</span> default</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__contains__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> key <span class="keyword">in</span> self.keys() <span class="keyword">or</span> str(key) <span class="keyword">in</span> self.keys()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    a = StrDict(&#123;<span class="string">"1"</span>: <span class="number">2</span>&#125;)</span><br><span class="line">    print(a[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<p>k in my_dict.keys() (.items(), .values())这种操作很快，因为返回的是视图，类似集合。</p>
<h2 id="字典的变种"><a href="#字典的变种" class="headerlink" title="字典的变种"></a>字典的变种</h2><ul>
<li>collections.OrderedDict 添加元素时会保持顺序，popitem默认返回最后一个元素，popitem(last=False)默认返回第一个元素</li>
<li>collections.ChainMap 容纳多个不同的映射对象，在键查找时，会当做整体查找。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> builtins</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> ChainMap</span><br><span class="line">pylookup = ChainMap(locals(),globals(),vars(builtins))</span><br><span class="line">print(pylookup)</span><br></pre></td></tr></table></figure>
<ul>
<li>collections.Counter 给每个键会准备一个计数器<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line">a = Counter(<span class="string">"aabbccdd"</span>)</span><br><span class="line">print(a)</span><br><span class="line">a.update(<span class="string">"aacc"</span>)</span><br><span class="line">print(a)</span><br><span class="line">print(a.most_common(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#output</span></span><br><span class="line"><span class="comment">#Counter(&#123;'a': 2, 'b': 2, 'c': 2, 'd': 2&#125;)</span></span><br><span class="line"><span class="comment">#Counter(&#123;'a': 4, 'c': 4, 'b': 2, 'd': 2&#125;)</span></span><br><span class="line"><span class="comment">#[('a', 4)]</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="子类化-UserDict"><a href="#子类化-UserDict" class="headerlink" title="子类化 UserDict"></a>子类化 UserDict</h2><p>含有data属性，是dict实例，是存储数据的地方.<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrDict</span><span class="params">(dict)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__missing__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(key, str):</span><br><span class="line">            <span class="keyword">return</span> KeyError(key)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self[str(key)]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key, default=None)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self[key]</span><br><span class="line">        <span class="keyword">except</span> keyError:</span><br><span class="line">            <span class="keyword">return</span> default</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, key,item)</span>:</span></span><br><span class="line">        self.data[str(key)] = item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__contains__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> str(key) <span class="keyword">in</span> self.data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    a = StrDict(&#123;<span class="string">"1"</span>: <span class="number">2</span>&#125;)</span><br><span class="line">    print(a[<span class="number">1</span>])</span><br></pre></td></tr></table></figure></p>
<h2 id="不可变的映射类型"><a href="#不可变的映射类型" class="headerlink" title="不可变的映射类型"></a>不可变的映射类型</h2><p>MappingProxyType 返回动态内存视图，不能靠视图改变原对象，但是原对象的更改可以由视图表现出来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> types <span class="keyword">import</span> MappingProxyType</span><br><span class="line">d = &#123;<span class="number">1</span>:<span class="string">'A'</span>&#125;</span><br><span class="line">d_proxy = MappingProxyType(d)</span><br><span class="line">print(d_proxy[<span class="number">1</span>])</span><br><span class="line"><span class="comment">#d_proxy[2] = 'B'  #-&gt;error</span></span><br><span class="line">d[<span class="number">2</span>] = <span class="string">'B'</span></span><br><span class="line">print(d_proxy)</span><br></pre></td></tr></table></figure>
<h2 id="集合论"><a href="#集合论" class="headerlink" title="集合论"></a>集合论</h2><ul>
<li>set 对象中的元素必须是可散列的，但是 set 对象本身是不可散列的，frozenset是可散列的对象。</li>
<li>| 合集</li>
<li>- 差集</li>
<li>&amp; 交集</li>
<li>创建空集合要用set(), 如果用{}则是创建空字典</li>
<li>集合推导<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;char(i) <span class="keyword">for</span> i range(<span class="number">100</span>)&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="集合的运算"><a href="#集合的运算" class="headerlink" title="集合的运算"></a>集合的运算</h3><p><img src="C3428851CF36CA77881134A4708D4841.png" alt="Screen Shot 2018-09-29 at 14.33.28.png"><br><img src="8415F855AA68BCF9DCA14B17E1921973.png" alt="Screen Shot 2018-09-29 at 14.33.39.png"></p>
<h3 id="集合的比较运算"><a href="#集合的比较运算" class="headerlink" title="集合的比较运算"></a>集合的比较运算</h3><p><img src="799D1125CE215336FD672BD8D6FE818A.png" alt="Screen Shot 2018-09-29 at 14.33.04.png"><br><img src="C2D3E9BDE8560C1FAA57CFADA8BEF174.png" alt="Screen Shot 2018-09-29 at 14.31.57.png"></p>
<h2 id="dict-set-list效率比较"><a href="#dict-set-list效率比较" class="headerlink" title="dict set list效率比较"></a>dict set list效率比较</h2><p><strong>查找元素，dict 和 set 有强大的散列表做支撑，速度非常快</strong></p>
<h2 id="散列表原理"><a href="#散列表原理" class="headerlink" title="散列表原理"></a>散列表原理</h2><p>my_dict[key], 现根据 hash(key)， 根据最低几位去散列表里查找表元。如为空，返回 error；若有表元，则表元中存在 foundkey:foundvalue. 若 foundkey == key, 返回 foundvalue。若不等，取 hash(key)的高几位再去找。循环。<br><img src="D8F57ABE26A5E48D0E4D5D33C5FFB90D.png" alt="Screen Shot 2018-09-29 at 15.02.31.png"></p>
<h2 id="dict-conclusion"><a href="#dict-conclusion" class="headerlink" title="dict conclusion"></a>dict conclusion</h2><ul>
<li>键必须是可散列的<br>一个可散列的对象必须满足<ul>
<li>__hash__()方法返回的值不变</li>
<li>__eq__()可做相等判断</li>
<li>a == b， 则 hash(a) == hash(b)</li>
</ul>
</li>
<li>字典内存开销巨大<br>  字典使用散列表，散列表是稀疏的。</li>
<li>键查询很快<br>  空间换时间</li>
<li>添加新键可能会改变已有的顺序</li>
</ul>
<h2 id="set-conclusion"><a href="#set-conclusion" class="headerlink" title="set conclusion"></a>set conclusion</h2><ul>
<li>集合元素必须是可散列的<br>一个可散列的对象必须满足<ul>
<li>__hash__()方法返回的值不变</li>
<li>__eq__()可做相等判断</li>
<li>a == b， 则 hash(a) == hash(b)</li>
</ul>
</li>
<li>集合内存开销巨大<br>  字典使用散列表，散列表是稀疏的。</li>
<li>高效判断是否包含<br>  空间换时间</li>
<li>添加新元素可能会改变已有的顺序</li>
</ul>
<h1 id="序列模型"><a href="#序列模型" class="headerlink" title="序列模型"></a>序列模型</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul>
<li>容器序列<br>  list, tuple, collections.deque 等，存放对象的引用</li>
<li>扁平序列<br>  str, bytes, bytearray, memoryview, array.array 实际是一段连续的内存空间</li>
</ul>
<p>或者</p>
<ul>
<li>可变序列<br>  list, bytearray, array.array, collection.deque, memeoryview</li>
<li>不可变序列<br>  tuple, str, bytes.</li>
</ul>
<p><img src="B73DD07CE3B22BF761AD94BD0A5B829E.png" alt="Screen Shot 2018-09-28 at 11.39.07.png"></p>
<h2 id="列表推倒与生成器"><a href="#列表推倒与生成器" class="headerlink" title="列表推倒与生成器"></a>列表推倒与生成器</h2><h3 id="列表推倒"><a href="#列表推倒" class="headerlink" title="列表推倒"></a>列表推倒</h3><ul>
<li>不存在变量泄露的问题</li>
<li>可对元素过滤和加工 类似 map/filter 的功能</li>
<li>可计算笛卡尔积<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">'a'</span></span><br><span class="line">symbols = <span class="string">"abcde"</span></span><br><span class="line">beyond_ascii = [ord(s) <span class="keyword">for</span> s <span class="keyword">in</span> symbols <span class="keyword">if</span> ord(s) &gt; <span class="number">10</span>]</span><br><span class="line">print(s) <span class="comment"># s = 'a'</span></span><br><span class="line"></span><br><span class="line">colors = [<span class="string">'b'</span>,<span class="string">'w'</span>]</span><br><span class="line">sizes = [<span class="string">'S'</span>,<span class="string">'M'</span>,<span class="string">'L'</span>]</span><br><span class="line">tshirts = [(color,size) <span class="keyword">for</span> color <span class="keyword">in</span> colors <span class="keyword">for</span> size <span class="keyword">in</span> sizes]</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="生成器表达式"><a href="#生成器表达式" class="headerlink" title="生成器表达式"></a>生成器表达式</h3><ul>
<li>跟列表推倒差不多，把方括号换成圆括号</li>
<li>生成器表达式遵守迭代器协议，可以逐个产出元素，节省内存<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">colors = [<span class="string">'b'</span>,<span class="string">'w'</span>]</span><br><span class="line">sizes = [<span class="string">'S'</span>,<span class="string">'M'</span>,<span class="string">'L'</span>]</span><br><span class="line"><span class="keyword">for</span> tshirt <span class="keyword">in</span> ((color,size) <span class="keyword">for</span> color <span class="keyword">in</span> colors <span class="keyword">for</span> size <span class="keyword">in</span> sizes):</span><br><span class="line">    print(tshirt)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>生成器表达式逐个产出元素，内存中不会一次性产出6个 tshirt 的列表</strong></p>
<h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><h3 id="元组与记录"><a href="#元组与记录" class="headerlink" title="元组与记录"></a>元组与记录</h3><p>元组其实是没有字段名的记录，元组中的每个元素都存放了记录中一个字段的数据<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">city,year,pop,cha,area = (<span class="string">'Tokyo'</span>,<span class="number">2003</span>,<span class="number">32450</span>,<span class="number">0.66</span>,<span class="number">8014</span>)</span><br></pre></td></tr></table></figure></p>
<h3 id="元组拆包"><a href="#元组拆包" class="headerlink" title="元组拆包"></a>元组拆包</h3><ul>
<li>元组拆包可以运用到任何可迭代的对象上，唯一的要求是可迭代对象的元素数量必须与接收这些元素的变量数量一致。</li>
<li>可用*来表示忽略多余的元组</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a,b,*rest = range(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>*运算可以把可迭代对象拆开作为函数的参数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">divmod(<span class="number">20</span>,<span class="number">8</span>) <span class="comment">#-&gt;(2,4)</span></span><br><span class="line">t = (<span class="number">20</span>,<span class="number">8</span>)</span><br><span class="line">divmod(*t) <span class="comment">#-&gt;(2,4)</span></span><br></pre></td></tr></table></figure>
<h3 id="嵌套拆包"><a href="#嵌套拆包" class="headerlink" title="嵌套拆包"></a>嵌套拆包</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">metro_areas = [(<span class="string">'Tokyo'</span>,<span class="string">'JP'</span>,<span class="number">36.933</span>,(<span class="number">35.689</span>,<span class="number">139.691</span>)),(<span class="string">'Beijing'</span>,<span class="string">'CH'</span>,<span class="number">36.933</span>,(<span class="number">35.689</span>,<span class="number">139.691</span>))]</span><br><span class="line"><span class="keyword">for</span> name,cc,pop,(lat,long) <span class="keyword">in</span> metro_areas:</span><br><span class="line">    print(name)</span><br></pre></td></tr></table></figure>
<h3 id="具名元组"><a href="#具名元组" class="headerlink" title="具名元组"></a>具名元组</h3><p>collections.namedtuple 是一个工厂函数,可以用来创建一个带字段名的元组和一个有名字的类,该类的实例所消耗的内存和元组是一样的,因为字段名都被存在对应的类里面。<strong>比普通的类消耗的内存要小.</strong></p>
<ul>
<li>具名元组具有专有的属性和方法，如_fields类属性，类方法_make(iterable),实例方法_asdict().<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line">Person = namedtuple(<span class="string">'P'</span>,[<span class="string">'name'</span>,<span class="string">'sex'</span>])</span><br><span class="line">print(Person._fields)</span><br><span class="line">iterable = (<span class="string">"zhangruochi"</span>,<span class="string">"male"</span>)</span><br><span class="line">me =  Person._make(iterable)</span><br><span class="line">print(me._asdict())</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="作为不可变列表的元组"><a href="#作为不可变列表的元组" class="headerlink" title="作为不可变列表的元组"></a>作为不可变列表的元组</h3><p>元组除了没有列表元素的增减方法，支持列表的其他所有方法<br><img src="2FDBB65442D6C9ED48937F7F914DBD25.png" alt="Screen Shot 2018-09-28 at 13.22.43.png"><br><img src="63647744ACC5D7C2680D50D4DAEBD9A7.png" alt="Screen Shot 2018-09-28 at 13.23.08.png"></p>
<h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>切片忽略最后一个元素的好处</p>
<ul>
<li>最后一个元素时, 只有通过最后一个元素直接看出切片区间里有几个元素</li>
<li>起始和结束元素都可见时， stop - start 快速计算出区间元素的个数</li>
<li>通过一个元素直接把列表分成两段a[:x],a[x:]</li>
</ul>
<h3 id="对象切片"><a href="#对象切片" class="headerlink" title="对象切片"></a>对象切片</h3><p>seq[start:stop:step] -&gt; seq.__getitem__(slice(start,stop,end))<br>因此可以自定义切片对象:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_slice = slice(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">seq = range(<span class="number">10</span>)</span><br><span class="line">sub_seq = seq[my_slice]</span><br></pre></td></tr></table></figure></p>
<h3 id="多维切片"><a href="#多维切片" class="headerlink" title="多维切片"></a>多维切片</h3><p>内置的序列类型只支持一维的索引，外部库 numpy 之类的可以支持二维索引<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a[i,j]</span><br><span class="line">a[:,i:j]</span><br></pre></td></tr></table></figure></p>
<h3 id="切片赋值"><a href="#切片赋值" class="headerlink" title="切片赋值"></a>切片赋值</h3><p>把切片放在负值语句的左边，就可以对切片进行操作<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = list(range(<span class="number">10</span>))</span><br><span class="line">l[<span class="number">2</span>:<span class="number">5</span>] = [<span class="number">20</span>,<span class="number">30</span>]</span><br><span class="line"><span class="keyword">del</span> l[<span class="number">5</span>:<span class="number">7</span>]</span><br></pre></td></tr></table></figure></p>
<h2 id="对序列对象使用-和"><a href="#对序列对象使用-和" class="headerlink" title="对序列对象使用+和*"></a>对序列对象使用+和*</h2><p><strong>+和*都遵守不修改原对象，而构建新对象的规律</strong><br>注意：</p>
<p>用[[]]*3来初始化由列表组成的列表，但是列表里其实包含的是3个对同意对象的引用<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [[<span class="string">"_"</span>]*<span class="number">3</span>]*<span class="number">3</span></span><br><span class="line">a[<span class="number">1</span>][<span class="number">2</span>] = <span class="string">"x"</span></span><br><span class="line">print(a) <span class="comment">#-&gt; [['_', '_', 'x'], ['_', '_', 'x'], ['_', '_', 'x']]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#正确写法</span></span><br><span class="line">a = [[<span class="string">"_"</span>]*<span class="number">3</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>)]</span><br><span class="line">a[<span class="number">1</span>][<span class="number">2</span>] = <span class="string">"x"</span></span><br><span class="line">print(a) <span class="comment">#-&gt; [['_', '_', '_'], ['_', '_', 'x'], ['_', '_', '_']]</span></span><br></pre></td></tr></table></figure></p>
<h3 id="序列的增量赋值"><a href="#序列的增量赋值" class="headerlink" title="序列的增量赋值"></a>序列的增量赋值</h3><p>+= 背后的特殊方法是__iadd__(就地加发)， 但是如果这个类没有实现__iadd__时，Python解释器会退而使用__add__</p>
<ul>
<li>对于可变序列a, a+=b 等同于 a.extend(b)</li>
<li>对于不可变序列a, a+=b 等同于 a = a+b</li>
</ul>
<p><strong>对不可变对象进行重复拼接操作会导致效率低下，因为每次都有新对象生成，还要复制元素到新对象</strong></p>
<p>一个 += 的谜题<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">t = (&quot;a&quot;,&quot;b&quot;,[&quot;c&quot;])</span><br><span class="line">t[2] += [&quot;d&quot;]</span><br></pre></td></tr></table></figure></p>
<p>既抛出异常又修改了t<br><img src="0CA907EFC52DDB8A7774BFD87DF0E77A.png" alt="Screen Shot 2018-09-28 at 14.12.41.png"><br><img src="12BFE0DB402CD77D626966735C85ABDB.png" alt="Screen Shot 2018-09-28 at 14.12.47.png"><br>教训：</p>
<ul>
<li>不要把可变对象放在不可变对象里面</li>
<li>增量赋值不是原子操作</li>
</ul>
<h2 id="序列对象的排序"><a href="#序列对象的排序" class="headerlink" title="序列对象的排序"></a>序列对象的排序</h2><h3 id="就地排序和负值排序"><a href="#就地排序和负值排序" class="headerlink" title="就地排序和负值排序"></a>就地排序和负值排序</h3><ul>
<li>list.sort()就地排序</li>
<li>sorted(list) 会赋值一份新的序列对像</li>
<li>Python排序算法Timsort的时间复杂度为nlog(n)</li>
</ul>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul>
<li>reverse, 如设定为True, 被排序的对象会以降序输出</li>
<li>key, 以函数为参数，这个函数会应用在每个元素上<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sorted(list,key = len, reverse = <span class="keyword">True</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="利用bisect-管理已排序的序列"><a href="#利用bisect-管理已排序的序列" class="headerlink" title="利用bisect 管理已排序的序列"></a>利用bisect 管理已排序的序列</h2><ul>
<li>bisect 利用二分查找插入元素的位置</li>
<li>insort 利用 bisect 查找位置然后插入元素</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span>  bisect <span class="keyword">import</span> *</span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#bisect = bisect_left</span></span><br><span class="line">index_left = bisect_left(a,<span class="number">3</span>)</span><br><span class="line">index_right = bisect_right(a,<span class="number">3.0</span>)</span><br><span class="line">print(index_left,index_right)  <span class="comment">#-&gt; 2 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#insort = insort_left</span></span><br><span class="line">insort_left(a,<span class="number">3</span>)</span><br><span class="line">insort_right(a,<span class="number">3.0</span>)</span><br><span class="line">print(a)  <span class="comment">#-&gt;[1, 2, 3, 3, 3.0, 4, 5, 6, 7]</span></span><br></pre></td></tr></table></figure>
<h2 id="list的可替换对象"><a href="#list的可替换对象" class="headerlink" title="list的可替换对象"></a>list的可替换对象</h2><h3 id="array-array"><a href="#array-array" class="headerlink" title="array.array"></a>array.array</h3><p>Python数组跟 C 语言数组一样精简, 如果我们需要一个只包含数字的列表,用 array.array会比list 效率更高，且array支持所有可变序列的操作.</p>
<ul>
<li>array.array需要类型码作为参数来表示底层的 C 语言需要存放怎样的数据. 如’b’表示有符号的字符.</li>
<li><p>数组还提供更多的读取文件和存入文件的方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> array <span class="keyword">import</span> array</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> random</span><br><span class="line">floats = array(<span class="string">'d'</span>,(random() <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>**<span class="number">7</span>)))</span><br><span class="line">print(floats[<span class="number">-1</span>])</span><br><span class="line">floats.tofile(<span class="string">"floats.bin"</span>,<span class="string">"wb"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>pickle.dump 也可以快速序列化数字类型，速度与 array.tofile()几乎一样快, pickle 还支持其他的数据类型</p>
</li>
<li>但是从Python3.4开始, 数组不再支持就地排序, 如果排序需要新建数组 a = array(a.typecode,sorted(array))</li>
</ul>
<h2 id="内存视图"><a href="#内存视图" class="headerlink" title="内存视图"></a>内存视图</h2><p>memoryview 能够让你在不复制内存的条件下,在数据结构之间共享内存<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> (<span class="number">100000</span>, <span class="number">200000</span>, <span class="number">300000</span>, <span class="number">400000</span>):</span><br><span class="line">    data = <span class="string">'x'</span>*n</span><br><span class="line">    start = time.time()</span><br><span class="line">    b = data</span><br><span class="line">    <span class="keyword">while</span> b:</span><br><span class="line">        b = b[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'bytes'</span>, n, time.time()-start</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> (<span class="number">100000</span>, <span class="number">200000</span>, <span class="number">300000</span>, <span class="number">400000</span>):</span><br><span class="line">    data = <span class="string">'x'</span>*n</span><br><span class="line">    start = time.time()</span><br><span class="line">    b = memoryview(data)</span><br><span class="line">    <span class="keyword">while</span> b:</span><br><span class="line">        b = b[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'memoryview'</span>, n, time.time()-start</span><br><span class="line">    </span><br><span class="line"><span class="string">"""output</span></span><br><span class="line"><span class="string">bytes 100000 0.240149021149</span></span><br><span class="line"><span class="string">bytes 200000 1.04921603203</span></span><br><span class="line"><span class="string">bytes 300000 2.66688489914</span></span><br><span class="line"><span class="string">bytes 400000 4.83206987381</span></span><br><span class="line"><span class="string">memoryview 100000 0.011647939682</span></span><br><span class="line"><span class="string">memoryview 200000 0.0258820056915</span></span><br><span class="line"><span class="string">memoryview 300000 0.0385529994965</span></span><br><span class="line"><span class="string">memoryview 400000 0.0550448894501</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure></p>
<h3 id="memoryview-cast-可以利用不同的方式读写同一块内存"><a href="#memoryview-cast-可以利用不同的方式读写同一块内存" class="headerlink" title="memoryview.cast 可以利用不同的方式读写同一块内存"></a>memoryview.cast 可以利用不同的方式读写同一块内存</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> array</span><br><span class="line">numbers = array.array(<span class="string">"h"</span>,[<span class="number">-2</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">memv = memoryview(numbers)</span><br><span class="line">print(memv[<span class="number">0</span>])  <span class="comment">#-&gt; -2</span></span><br><span class="line">memv_oct = memv.cast(<span class="string">'B'</span>)</span><br><span class="line">print(memv_oct.tolist()) <span class="comment">#-&gt; [254, 255, 255, 255, 0, 0, 1, 0, 2, 0</span></span><br><span class="line">memv_oct[<span class="number">4</span>] = <span class="number">1</span></span><br><span class="line">print(numbers)   <span class="comment">#-&gt; array('h', [-2, -1, 1, 1, 2])</span></span><br><span class="line"></span><br><span class="line">print(array.array(<span class="string">'H'</span>, [<span class="number">1</span>]).tostring())  <span class="comment">#-&gt; b'\x01\x00' python使用大端法，取高字节数据存放在低地址</span></span><br></pre></td></tr></table></figure>
<p>计算机存储的大端法和小端法</p>
<blockquote>
<p>  在计算机内存中，通常是以字节（Byte），也就是 8 个位（Bit）为基本存储单元（也有以 16 位为基本存储单元的）。对于跨越多个字节的数据类型（比如 int 长 4 个字节），如何在内存中对这些字节进行排序有两种常见的方法：大端法（Big-endian）和小端法（Little-endian）。</p>
</blockquote>
<p>不管是大端法还是小端法存储，计算机在内存中存放数据的顺序都是从低地址到高地址，所不同的是首先取低字节的数据存放在低地址还是取高字节数据存放在低地址。</p>
<ul>
<li>若首先取高字节的数据存放在低地址，则是大端法；</li>
<li>若首先取低字节的数据存放在低地址，则是小端法。</li>
</ul>
<h2 id="双向队列和其他形式的队列"><a href="#双向队列和其他形式的队列" class="headerlink" title="双向队列和其他形式的队列"></a>双向队列和其他形式的队列</h2><h3 id="collections-deque"><a href="#collections-deque" class="headerlink" title="collections.deque"></a>collections.deque</h3><p>利用 append 和 pop(0) 的方法, 我们可以把 list 当做 stack 来使用. <strong>但是 pop(0) 的时间复杂度为n，效率低下.</strong></p>
<blockquote>
<p>collections.deque类是一个线程安全，可以快速从两段添加或者删除元素的数据类型.</p>
</blockquote>
<p>对stackd的模拟<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line">array = deque(range(<span class="number">10</span>),maxlen = <span class="number">10</span>)</span><br><span class="line">array.rotate(<span class="number">3</span>)</span><br><span class="line">print(array)  <span class="comment">#-&gt; deque([7, 8, 9, 0, 1, 2, 3, 4, 5, 6], maxlen=10)</span></span><br><span class="line">array.append(<span class="number">-1</span>)  <span class="comment">#-&gt; deque([8, 9, 0, 1, 2, 3, 4, 5, 6, -1], maxlen=10)</span></span><br><span class="line">print(array)</span><br><span class="line">array.popleft() <span class="comment">#-&gt; deque([9, 0, 1, 2, 3, 4, 5, 6, -1], maxlen=10)</span></span><br><span class="line">print(array)</span><br></pre></td></tr></table></figure></p>
<h3 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h3><p>提供了同步(线程安全)类 Queue, LifoQueue 和 PriorityQueue, 不同线程可以利用这些数据来交换信息。具有 maxsize参数，超出容量时queue会被锁住.</p>
<h3 id="heapq"><a href="#heapq" class="headerlink" title="heapq"></a>heapq</h3><p>让用户可以把可变序列当做堆队列或者优先队列使用.</p>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="一等对象"><a href="#一等对象" class="headerlink" title="一等对象"></a>一等对象</h2><p>编程语言里一等对象的定义:</p>
<ol>
<li>运行时创建</li>
<li>能赋值给变量或数据结构中的元素</li>
<li>能作为参数传递</li>
<li>能作为函数返回值</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">'''return n!'''</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> n&lt;<span class="number">2</span> <span class="keyword">else</span> n * factorial(n<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(factorial.__doc__) <span class="comment"># -&gt; return n!</span></span><br><span class="line">print(type(factorial))  <span class="comment"># -&gt; &lt;class 'function'&gt;</span></span><br><span class="line"></span><br><span class="line">fact = factorial</span><br><span class="line">print(fact(<span class="number">5</span>))   <span class="comment">#-&gt; 120</span></span><br><span class="line"></span><br><span class="line">print(list(map(fact,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]))) <span class="comment">#-&gt; [1, 2, 6]</span></span><br></pre></td></tr></table></figure>
<h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><p>介绍函数为参数，或者把函数作为返回结果的函数就是高阶函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fruits = [<span class="string">"apple"</span>,<span class="string">"pear"</span>,<span class="string">"cherry"</span>,<span class="string">"fig"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 长度排序</span></span><br><span class="line">print(sorted(fruits,key = len))  <span class="comment">#-&gt; ['fig', 'pear', 'apple', 'cherry']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 逆序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(word)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> word[::<span class="number">-1</span>]</span><br><span class="line">print(sorted(fruits,key = reverse))    <span class="comment">#-&gt; ['apple', 'fig', 'pear', 'cherry']</span></span><br></pre></td></tr></table></figure>
<h3 id="map-filter-reduce-极其替代品"><a href="#map-filter-reduce-极其替代品" class="headerlink" title="map,filter,reduce 极其替代品"></a>map,filter,reduce 极其替代品</h3><ul>
<li><p>列表推导式比map与filter连用更清晰易懂</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(list(map(fact,filter(<span class="keyword">lambda</span> x : x%<span class="number">2</span>, range(<span class="number">6</span>))))) <span class="comment"># -&gt; [1, 6, 120]</span></span><br><span class="line">print([fact(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>) <span class="keyword">if</span> i % <span class="number">2</span>])   <span class="comment"># -&gt; [1, 6, 120]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>sum 比 reduce(add,[]) 更易懂</p>
</li>
<li><p>any,all也是内置的规约函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(all([<span class="keyword">True</span>,<span class="keyword">True</span>,<span class="keyword">False</span>]))   <span class="comment"># -&gt; False</span></span><br><span class="line">print(any([<span class="keyword">True</span>,<span class="keyword">False</span>,<span class="keyword">True</span>]))   <span class="comment"># -&gt; True</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="lambda-表达式"><a href="#lambda-表达式" class="headerlink" title="lambda 表达式"></a>lambda 表达式</h3><p>在 Python内创建匿名函数<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fruits = [<span class="string">"apple"</span>,<span class="string">"pear"</span>,<span class="string">"cherry"</span>,<span class="string">"fig"</span>]</span><br><span class="line">print(sorted(fruits,key = <span class="keyword">lambda</span> word: word[::<span class="number">-1</span>]))</span><br></pre></td></tr></table></figure></p>
<h3 id="七种可调用对象"><a href="#七种可调用对象" class="headerlink" title="七种可调用对象"></a>七种可调用对象</h3><p><img src="5EF76B560B5DB1316B558712DEFEA398.png" alt="Screen Shot 2018-10-12 at 19.35.09.png"><br><img src="86DFFE0BE2BDE94ACDEE9957B1377E07.png" alt="Screen Shot 2018-10-12 at 19.35.29.png"></p>
<h3 id="自定义可调用对象"><a href="#自定义可调用对象" class="headerlink" title="自定义可调用对象"></a>自定义可调用对象</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CallableTest</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,items)</span>:</span></span><br><span class="line">        self.items = list(items)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pick</span><span class="params">(self,n)</span>:</span></span><br><span class="line">        random.shuffle(self.items)</span><br><span class="line">        <span class="keyword">return</span> self.items[<span class="number">0</span>:n]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self,n)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.pick(n)</span><br><span class="line"></span><br><span class="line">test = CallableTest([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">print(test(<span class="number">2</span>))        <span class="comment"># -&gt; [1,3]</span></span><br></pre></td></tr></table></figure>
<h2 id="函数内省"><a href="#函数内省" class="headerlink" title="函数内省"></a>函数内省</h2><h3 id="函数有而自定义对象没有的属性"><a href="#函数有而自定义对象没有的属性" class="headerlink" title="函数有而自定义对象没有的属性"></a>函数有而自定义对象没有的属性</h3><p>[‘<strong>annotations</strong>‘, ‘<strong>call</strong>‘, ‘<strong>closure</strong>‘, ‘<strong>code</strong>‘, ‘<strong>defaults</strong>‘, ‘<strong>get</strong>‘, ‘<strong>globals</strong>‘, ‘<strong>kwdefaults</strong>‘, ‘<strong>name</strong>‘, ‘<strong>qualname</strong>‘]</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">obj = C()    </span><br><span class="line"></span><br><span class="line">print(sorted(set(dir(fact)) - set(dir(obj))))</span><br></pre></td></tr></table></figure>
<p><img src="0372A461E78029DED0A7D7121A49EAF1.png" alt="Screen Shot 2018-10-12 at 19.54.16.png"><br><img src="44DAA05E00DF81F67E96530C9FD4F62D.png" alt="Screen Shot 2018-10-12 at 19.54.25 1.png"></p>
<h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parameters</span><span class="params">(name,*content, cls = <span class="string">"first_name"</span>, **attr)</span>:</span></span><br><span class="line">    print(name)  <span class="comment"># -&gt; 1</span></span><br><span class="line">    print(content) <span class="comment"># -&gt; (2, 3, 4)</span></span><br><span class="line">    print(cls) <span class="comment"># -&gt; zhang</span></span><br><span class="line">    print(attr) <span class="comment"># -&gt; &#123;'face': 'handsome', 'built': 'awesome'&#125;</span></span><br><span class="line"></span><br><span class="line">parameters(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,cls = <span class="string">"zhang"</span>, face = <span class="string">"handsome"</span>,built = <span class="string">"awesome"</span>)  </span><br><span class="line">print(parameters.__defaults__) <span class="comment"># -&gt; None</span></span><br><span class="line">print(parameters.__kwdefaults__) <span class="comment"># -&gt; &#123;'cls': 'first_name'&#125;</span></span><br><span class="line">print(parameters.__annotations__) <span class="comment"># -&gt; &#123;'return': 'test parameters'&#125;</span></span><br><span class="line">print(parameters.__doc__) <span class="comment"># -&gt; just for testing parameters</span></span><br></pre></td></tr></table></figure>
<h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><ul>
<li><p>operator 模块 和 functools 模块</p>
<ul>
<li>reduce</li>
<li>itemgetter 从序列或者对象中读取元素或者属性</li>
<li><p>methodcaller 自行函数，然后再调用对象上使用参数指定的方法(可以冻结参数)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> methodcaller</span><br><span class="line">split_and_replace = methodcaller(<span class="string">'replace'</span>,<span class="string">' '</span>,<span class="string">'_'</span>)</span><br><span class="line">name = <span class="string">"ZHAN RUO CHI"</span></span><br><span class="line">print(split_and_replace(name))  <span class="comment"># -&gt; ZHAN_RUO_CHI</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>partial  创建一个新的可调用对象，冻结原有对象的某些参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> mul</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line">triple = partial(mul,<span class="number">3</span>)</span><br><span class="line">print(triple(<span class="number">7</span>))  <span class="comment">#-&gt; 21</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h1 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h1><p>python 解释器在碰到特殊的句法时，会使用特殊方法去激活一些基本的对象操作。例如 len(x) 在调用时，如果 x 是内置对象，速度回非常快，因为 CPthon 会直接从一个 C 结构体里读取对象的长度。如果 x 不是内置对象，len(x) 会读取对象内部的<strong>len</strong>方法。这种处理方法在保持内置类型的效率和语言一致性之间找到平衡点。</p>
<blockquote>
<p>不能让特例特殊到开始破快既定规则   —zon of python</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line">Card = collections.namedtuple(<span class="string">"Card"</span>,[<span class="string">"rank"</span>,<span class="string">"suit"</span>])</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FrenchDeck</span>:</span></span><br><span class="line">    ranks = [str(n) <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">11</span>)] + list(<span class="string">"JQKA"</span>)</span><br><span class="line">    suits = <span class="string">"spades diamonds clubs hearts"</span>.split()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__cards = [Card(rank,suit) <span class="keyword">for</span> suit <span class="keyword">in</span> FrenchDeck.suits <span class="keyword">for</span> rank <span class="keyword">in</span> FrenchDeck.ranks]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(self.__cards)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self,index)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__cards[index]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    deck = FrenchDeck()    </span><br><span class="line">    <span class="comment"># 可以使用 len() 函数查看一共多少张纸牌</span></span><br><span class="line">    print(len(deck))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 可以使用索引和切片</span></span><br><span class="line">    print(deck[<span class="number">-1</span>])</span><br><span class="line">    print(deck[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 可以随机抽取纸牌</span></span><br><span class="line">    <span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line">    print(choice(deck))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 支持迭代</span></span><br><span class="line">    <span class="keyword">for</span> card <span class="keyword">in</span> deck:</span><br><span class="line">        print(card)</span><br></pre></td></tr></table></figure>
<p>两个好处</p>
<ul>
<li>类的用户不用再去记标准操作的名称</li>
<li>更加方便的利用 python 标准库</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> hypot</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vector</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,x,y)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Vector(&#123;&#125;,&#123;&#125;)'</span>.format(self.x,self.y)    </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__abs__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> hypot(self.x,self.y)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__bool__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> bool(abs(self))</span><br><span class="line">        <span class="comment">#return bool(self.x or self.y)</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self,other)</span>:</span></span><br><span class="line">        x = self.x + other.x</span><br><span class="line">        y = self.y + other.y</span><br><span class="line">        <span class="keyword">return</span> Vector(x,y)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__mul__</span><span class="params">(self,scalar)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Vector(self.x*scalar, self.y*scalar)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(Vector(<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">    print(abs(Vector(<span class="number">3</span>,<span class="number">4</span>)))</span><br></pre></td></tr></table></figure>
<ul>
<li>__reper__ 反对对象的字符串表示，__str__只有在调用 str()或者print()时才会调用，__repr__ 是更好的选择，因为如果一个对象没有__str__函数，python 又需要调用它时，解释器会调用 __repr__ 作为替代.</li>
</ul>
<ul>
<li>任何对象都可以用于需要布尔值的上下文中，为了判定一个值 x 的真假，Python 会调用bool(x), 其背后是调用 x.__bool__()的结果;如果不存在该方法，那么 bool(x)会尝试调用 x.__len__()。 若返回0，则 bool 会返回 False，否则返回 True。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>([])   <span class="comment">#False</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>)    <span class="comment">#false</span></span><br></pre></td></tr></table></figure>
<h1 id="文本和字节序列"><a href="#文本和字节序列" class="headerlink" title="文本和字节序列"></a>文本和字节序列</h1><h2 id="字符的问题"><a href="#字符的问题" class="headerlink" title="字符的问题"></a>字符的问题</h2><p>Python3中，str 对象中获取的元素是 unicode 字符<br>unicode 标准把字符做了如下区分</p>
<ul>
<li>字符的标识，在 unicode 标准中以4~6个十六进制的数字，然后加前缀 U+. 如A的码位是U+0041</li>
<li>字符的具体表述取决于所用的编码.</li>
<li>编码是在码位与字节序列之间的转换. 如 A 在 UTF8中编码成单个字节\x41</li>
</ul>
<h2 id="二进制序列类型"><a href="#二进制序列类型" class="headerlink" title="二进制序列类型"></a>二进制序列类型</h2><p>分为不可变 bytes 类型和 bytearray 类型</p>
<ul>
<li><p>bytes对象可以从str 对象使用给定的编码构建</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cafe = bytes(<span class="string">'cafe'</span>,encoding=<span class="string">"utf8"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>字节序列的切片还是字节序列</p>
<ul>
<li>my_bytes[0] 是整数</li>
<li>my_bytes[:1] 是字节序列</li>
</ul>
</li>
<li>二进制序列其实是整数序列，但是它们各个字节的值可能会用如下三种表示法<ul>
<li>可打印 ASCII 范围内的字节使用ASCII字符本身</li>
<li>制表符,换行符,回车符和\使用转义序列\t….</li>
<li>其他字节的值，使用使用十六进制转义序列<br>如 b’caf\xc3\xa9’ 前三个字节b’caf’在可打印的 ASCII 范围内，后两个字节则不然.</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> array</span><br><span class="line">numbers = array.array(<span class="string">'h'</span>,[<span class="number">-2</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">octets = bytes(numbers)</span><br><span class="line">print(octets)</span><br></pre></td></tr></table></figure>
<h2 id="编码中遇到的问题"><a href="#编码中遇到的问题" class="headerlink" title="编码中遇到的问题"></a>编码中遇到的问题</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_str = <span class="string">"Português"</span></span><br><span class="line">print(my_str.encode(<span class="string">"utf8"</span>))</span><br><span class="line"><span class="comment"># print(my_str.encode("ascii"))  #-&gt; 报错</span></span><br><span class="line">print(my_str.encode(<span class="string">"ascii"</span>,errors=<span class="string">'ignore'</span>))  <span class="comment">#-&gt; b'Portugus'</span></span><br><span class="line">print(my_str.encode(<span class="string">"ascii"</span>,errors=<span class="string">'replace'</span>)) <span class="comment">#-&gt; b'Portugu?s'</span></span><br></pre></td></tr></table></figure>
<h2 id="处理文本文件"><a href="#处理文本文件" class="headerlink" title="处理文本文件"></a>处理文本文件</h2><h3 id="最佳方式，unicode-三明治"><a href="#最佳方式，unicode-三明治" class="headerlink" title="最佳方式，unicode 三明治"></a>最佳方式，unicode 三明治</h3><ul>
<li>尽早把输入(比如读取文件时)的字节序列转化为字符串</li>
<li>只操作字符串</li>
<li>尽量晚地把字符串转化为字节序列<br><img src="F078127CF59F53B4C8F7F39C6BF45A1C.png" alt="Screen Shot 2018-09-30 at 11.32.45.png"></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_str = <span class="string">"Português"</span></span><br><span class="line">open(<span class="string">"cafe.txt"</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf8'</span>).write(my_str)</span><br><span class="line">print(open(<span class="string">"cafe.txt"</span>).read())  <span class="comment">#-&gt;报错</span></span><br><span class="line">print(open(<span class="string">"cafe.txt"</span>,encoding = <span class="string">"utf8"</span>).read()) <span class="comment">#-&gt; 正确</span></span><br><span class="line">print(open(<span class="string">"cafe.txt"</span>,<span class="string">'rb'</span>).read()) <span class="comment">#-&gt; b'Portugu\xc3\xaas', 以二进制方式读取文件，没有问题</span></span><br></pre></td></tr></table></figure>
<h2 id="为了正确比较而规范化字符串"><a href="#为了正确比较而规范化字符串" class="headerlink" title="为了正确比较而规范化字符串"></a>为了正确比较而规范化字符串</h2><p>unicode有组合字符(变音符号和附加到前一个字符上的记号，打印时作为一个整体),所以字符串比较起来很复杂。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#已解决该问题？</span></span><br><span class="line">my_str1 = <span class="string">"Portugués"</span></span><br><span class="line">my_str2 = <span class="string">"Portugue\u0301s"</span></span><br><span class="line">print(my_str1)</span><br><span class="line">print(my_str2)</span><br><span class="line">print(my_str1 == my_str2)  <span class="comment">#-&gt; True</span></span><br><span class="line">print(len(my_str1) == len(my_str2)) <span class="comment">#-&gt; True</span></span><br></pre></td></tr></table></figure></p>
<p>去掉所有重音符号</p>
<ul>
<li>NFD 拆解组合字符为基字符和单独的组合字符</li>
<li>NFC 使用最小的码位构成组合字符串<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from unicodedata import normalize</span><br><span class="line">from unicodedata import combining</span><br><span class="line">my_str = &quot;Portugués&quot;</span><br><span class="line">new_str =  &quot;&quot;.join(c for c in normalize(&quot;NFD&quot;,my_str) if not combining(c))</span><br><span class="line">print(new_str)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="生成器与迭代器"><a href="#生成器与迭代器" class="headerlink" title="生成器与迭代器"></a>生成器与迭代器</h1><h2 id="可迭代的原因"><a href="#可迭代的原因" class="headerlink" title="可迭代的原因"></a>可迭代的原因</h2><ul>
<li>实现了__iter__函数</li>
<li>内置的 iter 函数有以下作用<ul>
<li>检查对象是否实现__iter__函数，如果实现，返回迭代器</li>
<li>没有实现可迭代对象，如果现实__getitem__方法，python 返回一个迭代器，尝试从索引0开始迭代</li>
<li>尝试失败，跑出 TypeError 异常<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">"zhangruochi"</span></span><br><span class="line"><span class="keyword">for</span> chr <span class="keyword">in</span> s:</span><br><span class="line">    print(chr)</span><br><span class="line">    </span><br><span class="line">print(<span class="string">"-------"</span>)</span><br><span class="line"></span><br><span class="line">it = iter(s)</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(next(it))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">del</span> it</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="迭代器与可迭代对象之间的关系"><a href="#迭代器与可迭代对象之间的关系" class="headerlink" title="迭代器与可迭代对象之间的关系"></a>迭代器与可迭代对象之间的关系</h2><ul>
<li>可迭代对象实现__iter__方法，返回一个迭代器实例</li>
<li>迭代器实现__iter__ 方法，返回自己，为了通过 issubclass(iterator,abc.Iterator) 测试</li>
<li>迭代器还要实现__next__方法，每次返回一个元素</li>
<li>可迭代对象一定不能是自身的迭代器，也就是不能包含__next__ 方法<br><img src="8FE3ACE51E02FD7F405BE86E1B8346EE.png" alt="Screen Shot 2018-10-15 at 22.47.57.png"><br><img src="DA4E95C453BEEAF371768C77B884032F.png" alt="Screen Shot 2018-10-15 at 22.48.05.png"></li>
</ul>
<h2 id="生成器函数"><a href="#生成器函数" class="headerlink" title="生成器函数"></a>生成器函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">RE_WORD = re.compile(<span class="string">"\w+"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sentence</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, text)</span>:</span></span><br><span class="line">        self.text = text</span><br><span class="line">        self.words = RE_WORD.findall(text)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> self.words:</span><br><span class="line">            <span class="keyword">yield</span> word</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = <span class="string">"zhang ruo chi"</span></span><br><span class="line"></span><br><span class="line">sentence = Sentence(s)</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> sentence:</span><br><span class="line">    print(word)</span><br></pre></td></tr></table></figure>
<ul>
<li>生成器对象也是迭代器，利用iter方法返回一个生成器对象，可以不用再单独定义迭代器</li>
<li>包含yield关键词的函数是生成器函数，调用生成器函数时，会返回一个生成器对象，也就是说，生成器函数是生成器工厂</li>
<li>把生成器传递给 next()函数时，生成器会向前运行，遇到 yield 关键词会停止并返回产出的值</li>
</ul>
<h1 id="静态类和静态方法"><a href="#静态类和静态方法" class="headerlink" title="静态类和静态方法"></a>静态类和静态方法</h1><h2 id="example"><a href="#example" class="headerlink" title="example"></a>example</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Date</span><span class="params">(object)</span>:</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, day=<span class="number">0</span>, month=<span class="number">0</span>, year=<span class="number">0</span>)</span>:</span></span><br><span class="line">        self.day = day</span><br><span class="line">        self.month = month</span><br><span class="line">        self.year = year</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_string</span><span class="params">(cls, date_as_string)</span>:</span></span><br><span class="line">        day, month, year = map(int, date_as_string.split(<span class="string">'-'</span>))</span><br><span class="line">        date1 = cls(day, month, year)</span><br><span class="line">        <span class="keyword">return</span> date1 </span><br><span class="line">    </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_date_valid</span><span class="params">(date_as_string)</span>:</span></span><br><span class="line">        day, month, year = map(int, date_as_string.split(<span class="string">'-'</span>))</span><br><span class="line">        <span class="keyword">return</span> day &lt;= <span class="number">31</span> <span class="keyword">and</span> month &lt;= <span class="number">12</span> <span class="keyword">and</span> year &lt;= <span class="number">3999</span>  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'main'</span>:</span><br><span class="line">    date2 = Date.from_string(<span class="string">'11-09-2012'</span>)</span><br><span class="line">    is_date = Date.is_date_valid(<span class="string">'11-09-2012'</span>)</span><br></pre></td></tr></table></figure>
<h3 id="class-method"><a href="#class-method" class="headerlink" title="class method"></a>class method</h3><p>我们在一个方法中实现了功能，因此它是可重用的。 这里的封装处理的不错（如果你发现还可以在代码的任意地方添加一个不属于 Date 的函数来实现类似的功能，那很显然上面的办法更符合 OOP 规范）。 cls 是一个保存了 class 的对象（所有的一切都是对象）。 更妙的是， Date 类的衍生类都会具有 from_string 这个有用的方法。</p>
<h3 id="static-method"><a href="#static-method" class="headerlink" title="static method"></a>static method</h3><p>从静态方法的使用中可以看出，我们不会访问到 class 本身 – 它基本上只是一个函数，在语法上就像一个方法一样，但是没有访问对象和它的内部（字段和其他方法），相反 classmethod 会访问 cls， instancemethod 会访问 self。</p>
]]></content>
      <categories>
        <category>Programming Language</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Book Note</tag>
      </tags>
  </entry>
  <entry>
    <title>Bigtable: A Distributed Storage System for Structured Data</title>
    <url>/Bigtable-A-Distributed-Storage-System-for-Structured-Data/2019/02/28/</url>
    <content><![CDATA[<h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><ul>
<li>Bigtable is a distributed storage system for managing structured data that is designed to scale to a very large size</li>
</ul>
<h2 id="Data-Model"><a href="#Data-Model" class="headerlink" title="Data Model"></a>Data Model</h2><p>A Bigtable is a sparse, distributed, persistent multi- dimensional sorted map. The map is indexed by a row key, column key, and a timestamp; each value in the map is an uninterpreted array of bytes.</p>
<blockquote>
<p>(row:string, column:string, time:int64) → string</p>
</blockquote>
<h3 id="Rows"><a href="#Rows" class="headerlink" title="Rows"></a>Rows</h3><ul>
<li>The row keys in a table are arbitrary strings </li>
<li>Every read or write of data under a single row key is atomic</li>
<li>makes it easier for concurrent updates to the same row.</li>
<li>The row range for a table is dynamically partitioned. Each row range is called a <strong>tablet</strong>, which is the unit of dis- tribution and load balancing</li>
</ul>
<h3 id="Column-Families"><a href="#Column-Families" class="headerlink" title="Column Families"></a>Column Families</h3><ul>
<li>Column keys are grouped into sets called column fami- lies, which form the basic unit of access control</li>
<li>All data stored in a column family is usually of the same type</li>
<li>A column family must be created before data can be stored under any column key in that family; after a family has been created, any column key within the family can be used</li>
</ul>
<h3 id="Timestamps"><a href="#Timestamps" class="headerlink" title="Timestamps"></a>Timestamps</h3><ul>
<li>Each cell in a Bigtable can contain multiple versions of the same data; these versions are indexed by timestamp</li>
</ul>
<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><ul>
<li>The Bigtable API provides functions for creating and deleting tables and column families. It also provides functions for changing cluster, table, and column family metadata, such as access control rights.</li>
<li>Bigtable can be used with MapReduce, a framework for running large-scale parallel computations de- veloped at Google. We have written a set of wrappers that allow a Bigtable to be used both as an input source and as an output target for MapReduce jobs.</li>
</ul>
<h2 id="Building-Blocks"><a href="#Building-Blocks" class="headerlink" title="Building Blocks"></a>Building Blocks</h2><ul>
<li>Bigtable is built on several other pieces of Google infrastructure. Bigtable uses the distributed Google File System (GFS) to store log and data files. A Bigtable cluster typically operates in a shared pool of machines that run a wide variety of other distributed applications, and Bigtable processes often share the same machines with processes from other applications. Bigtable de- pends on a cluster management system for scheduling jobs, managing resources on shared machines, dealing with machine failures, and monitoring machine status.</li>
<li>The Google SSTable file format is used internally to store Bigtable data</li>
<li>Bigtable relies on a highly-available and persistent distributed lock service called <strong>Chubby</strong></li>
</ul>
<h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><p>The Bigtable implementation has three major compo- nents: </p>
<ul>
<li>a library that is linked into every client</li>
<li>one master server</li>
<li>many tablet servers</li>
</ul>
<p>A Bigtable cluster stores a number of tables. Each table consists of a set of tablets, and each tablet contains all data associated with a row range. Initially, each table consists of just one tablet. As a table grows, it is auto- matically split into multiple tablets, each approximately 100-200 MB in size by default.</p>
<h3 id="Tablet-Location"><a href="#Tablet-Location" class="headerlink" title="Tablet Location"></a>Tablet Location</h3><ul>
<li>We use a three-level hierarchy analogous to that of a B+- tree to store tablet location information<br><img src="1.png" alt="1.png"></li>
</ul>
<h3 id="Tablet-Assignment"><a href="#Tablet-Assignment" class="headerlink" title="Tablet Assignment"></a>Tablet Assignment</h3><p>Each tablet is assigned to one tablet server at a time</p>
<pre><code>- The master keeps track of the set of live tablet servers
- Bigtable uses Chubby to keep track of tablet servers
- The master is responsible for detecting when a tablet server is no longer serving its tablets, and for reassigning those tablets as soon as possible
- When a master is started by the cluster management system, it needs to discover the current tablet assign- ments before it can change them
</code></pre><h3 id="Tablet-Serving"><a href="#Tablet-Serving" class="headerlink" title="Tablet Serving"></a>Tablet Serving</h3><ul>
<li>Updates are committed to a commit log that stores redo records</li>
<li>the recently committed ones are stored in memory in a sorted buffer called a memtable</li>
<li>the older updates are stored in a sequence of SSTables</li>
<li>To recover a tablet, a tablet server reads its metadata from the METADATA table. This meta- data contains the list of SSTables that comprise a tablet and a set of a redo points, which are pointers into any commit logs that may contain data for the tablet<br><img src="2.png" alt="2.png"></li>
</ul>
<h2 id="Refinements"><a href="#Refinements" class="headerlink" title="Refinements"></a>Refinements</h2><ol>
<li>Locality groups<ul>
<li>Clients can group multiple column families together into a locality group</li>
</ul>
</li>
<li>Compression<ul>
<li>Clients can control whether or not the SSTables for a locality group are compressed, and if so, which compression format is used</li>
</ul>
</li>
<li>Caching for read performance<ul>
<li>To improve read performance, tablet servers use two levels of caching. The <strong>Scan Cache</strong> is a higher-level cache that caches the key-value pairs returned by the SSTable interface to the tablet server code. The <strong>Block Cache</strong> is a lower-level cache that caches SSTables blocks that were read from GFS</li>
</ul>
</li>
<li>Bloom filters<ul>
<li>a read operation has to read from all SSTables that make up the state of a tablet</li>
</ul>
</li>
<li>Commit-log implementation<ul>
<li>we append mutations to a single commit log per tablet server, co-mingling mutations for different tablets in the same physical log file</li>
</ul>
</li>
<li>Speeding up tablet recovery<ul>
<li>If the master moves a tablet from one tablet server to another, the source tablet server first does a minor compaction on that tablet</li>
</ul>
</li>
<li>Exploiting immutability<ul>
<li>Besides the SSTable caches, various other parts of the Bigtable system have been simplified by the fact that all of the SSTables that we generate are immutable</li>
</ul>
</li>
</ol>
<h2 id="Lesson"><a href="#Lesson" class="headerlink" title="Lesson"></a>Lesson</h2><ol>
<li>large distributed sys- tems are vulnerable to many types of failures, not just the standard network partitions and fail-stop failures as- sumed in many distributed protocols</li>
<li>it is important to delay adding new features until it is clear how the new features will be used</li>
<li>the importance of proper system-level monitoring</li>
<li>The most important lesson we learned is the value of simple designs</li>
</ol>
]]></content>
      <categories>
        <category>Big Data Architecture</category>
        <category>Paper Note</category>
        <category>Distributed &amp; Cloud Computing</category>
      </categories>
  </entry>
  <entry>
    <title>AI for Everyone</title>
    <url>/AI-for-Everyone/2019/02/28/</url>
    <content><![CDATA[<p>Thanks Andrew Ng for providing the amazing course.</p>
<p><strong>Reference From <a href="https://www.coursera.org/learn/ai-for-everyone" target="_blank" rel="noopener">Ai for Everyone</a></strong></p>
<p>Here is my course certificate:<br><img src="ai_for_everyone.png" alt></p>
<p><img src="1.png" alt><br><img src="2.png" alt><br><img src="3.png" alt><br><img src="4.png" alt><br><img src="5.png" alt><br><img src="6.png" alt><br><img src="7.png" alt><br><img src="8.png" alt><br><img src="9.png" alt><br><img src="10.png" alt><br><img src="11.png" alt><br><img src="12.png" alt><br><img src="13.png" alt><br><img src="14.png" alt><br><img src="15.png" alt><br><img src="16.png" alt><br><img src="17.png" alt><br><img src="18.png" alt></p>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
      </categories>
      <tags>
        <tag>Course Note</tag>
      </tags>
  </entry>
  <entry>
    <title>What is P-Value?</title>
    <url>/What-is-P-Value/2019/02/24/</url>
    <content><![CDATA[<h2 id="Why-it-is-so-successful-in-science"><a href="#Why-it-is-so-successful-in-science" class="headerlink" title="Why it is so successful in science?"></a>Why it is so successful in science?</h2><blockquote>
<p>In some sense it offers a first line of defense against being fooled by randomness, separating signal from noise.</p>
</blockquote>
<h2 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h2><ul>
<li>p-values tell you how surprising the data is, assuming there is no effect.</li>
<li>formal definition:  <blockquote class="blockquote-center">A p-value is the probability of getting the observed or more extreme data, assuming the null hypothesis is true.</blockquote>

</li>
</ul>
<p><strong>在假设原假设（H0）正确时，出现观察到的现状或更差的情况的概率</strong></p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p> <strong>Does driving while calling increase the risk of a car accident?</strong><br> 设计实验，一组司机开车打电话，一组司机开车不打电话，然后对比发生事故的概率。</p>
<ul>
<li>The difference is never exactly zero. A difference of e.g., 0.11 means:<ol>
<li>Probably just random noise.</li>
<li>Probably a real difference</li>
</ol>
</li>
</ul>
<h2 id="Null-hypthesis"><a href="#Null-hypthesis" class="headerlink" title="Null hypthesis"></a>Null hypthesis</h2><blockquote>
<p>假设零假设为真，即符合中心为0的正态分布。</p>
</blockquote>
<ul>
<li>Assuming null hypthesis is true， means most of the data will fall between these two critical values.<br><img src="5A77C161EAB415973599154275FFF24D.png" alt="Screen Shot 2018-09-21 at 14.06.49.png"><br><img src="0F5799A340B2ED51C1AF44365C76CBD9.png" alt="Screen Shot 2018-09-21 at 14.09.17.png"></li>
</ul>
<h2 id="Important-notes"><a href="#Important-notes" class="headerlink" title="Important notes"></a>Important notes</h2><ol>
<li>A p-value is the probability of the data, not the probability of a theory.</li>
<li>You can’t get the probability the null hypothesis is true, given the data, from a p-value. <script type="math/tex; mode=display">P(D*|H) ≠ P(H|D)</script></li>
<li>A single p-value is not enough to declare a scientific discovery; only when we can repeatedly observe something, we can consider it a reliable observation.</li>
</ol>
<h2 id="How-to-use-pValue-correctly"><a href="#How-to-use-pValue-correctly" class="headerlink" title="How to use pValue correctly?"></a>How to use pValue correctly?</h2><ol>
<li>Use p-values as a rule to guide behavior in the long run.</li>
<li>不能说，因为$p &lt; x$,所以理论正确。应该说，因为$p &lt; x$,所以结果符合预期。</li>
</ol>
<h2 id="Hwo-to-calculate-pValue"><a href="#Hwo-to-calculate-pValue" class="headerlink" title="Hwo to calculate pValue?"></a>Hwo to calculate pValue?</h2><p>以抛硬币实验为例完成假设检验</p>
<ul>
<li>假设：硬币是公平的</li>
<li>检验：认为假设是成立的，然后扔十次，看结果与假设是否相符</li>
</ul>
<p>反复扔硬币符合二项分布），也就是：</p>
<script type="math/tex; mode=display">X\sim B(n,\mu)</script><p>其中， n代表扔硬币的次数，$\mu$代表“花”朝上的概率。</p>
<p>在我们认为硬币是公平的前提下，扔1000次硬币应该符合以下分布：</p>
<script type="math/tex; mode=display">X\sim B(1000, 0.5)</script><p><img src="1299D5FFC8ACDF02B18F0CDD6BAF9EE6.png" alt="Screen Shot 2018-09-23 at 14.19.13.png"></p>
<p>若1000次抛硬币实验结果为正面朝上530次，则pVlue取530以及更极端的点组成组成区间。<br><img src="F79D182822786A87CFF2A4476D496CC4.png" alt="Screen Shot 2018-09-23 at 14.23.13.png"></p>
<h2 id="什么是显著水平-alpha"><a href="#什么是显著水平-alpha" class="headerlink" title="什么是显著水平$\alpha$?"></a>什么是显著水平$\alpha$?</h2><p>抛一千次硬币，我们认为出现530次正面之后，硬币是不公平的，还是出现580次正面之后，硬币是不公平的，这是一个主观标准。</p>
<p>我们一般认为:</p>
<script type="math/tex; mode=display">\text {p-value}\leq 0.05</script><p>就可以认为假设是不正确的。</p>
<p>表示出来如下图所示:<br><img src="DFF65458A10B923E71CB9B68AF5FFB11.png" alt="Screen Shot 2018-09-23 at 14.27.03.png"><br><strong>我们可以认为刚开始的假设错的很“显著”，也就是“硬币是不公平的”。</strong></p>
]]></content>
      <categories>
        <category>Math</category>
        <category>Statistics</category>
      </categories>
      <tags>
        <tag>Concept</tag>
      </tags>
  </entry>
  <entry>
    <title>Understanding Logistic Regression</title>
    <url>/Understanding-Logistic-Regression/2019/02/24/</url>
    <content><![CDATA[<h2 id="逻辑回归的输出是什么？"><a href="#逻辑回归的输出是什么？" class="headerlink" title="逻辑回归的输出是什么？"></a>逻辑回归的输出是什么？</h2><script type="math/tex; mode=display">h_{\theta} = P(y = 1| x;\theta)</script><p><strong>也就是给定x和在参数theta下，y=1(default)的概率</strong></p>
<h2 id="逻辑回归的输入是什么？"><a href="#逻辑回归的输入是什么？" class="headerlink" title="逻辑回归的输入是什么？"></a>逻辑回归的输入是什么？</h2><script type="math/tex; mode=display">y_{\theta} = \beta_{0} + \beta_{1}x_{1} + \beta_{2}x_{2} ....</script><p><strong>也就是线性回归</strong></p>
<ul>
<li>所以Logistic Regression的决策边界是线性回归</li>
<li>逻辑回归的本质还是<strong>线性回归</strong>，也会看到有一些文章说在特征到结果的映射中多加了一层<strong>函数映射</strong></li>
</ul>
<h2 id="我们用什么把输入与输出联系起来？"><a href="#我们用什么把输入与输出联系起来？" class="headerlink" title="我们用什么把输入与输出联系起来？"></a>我们用什么把输入与输出联系起来？</h2><p>Logit function:</p>
<script type="math/tex; mode=display">Logit(p) =  ln(odds) = ln(\frac{p}{1-p})</script><p><img src="logit.png" alt="logit"></p>
<ul>
<li>定义域为[0,1], 值域为R.</li>
<li><p>将上述方程取反函数，得到sigmoid函数，定义域为R, y为P, 值域为[0,1].</p>
<script type="math/tex; mode=display">Sigmoid(\alpha) = logit^{-1}(\alpha) = \frac{1}{1+e^{-\alpha}}</script></li>
</ul>
<p><img src="sigmoid.png" alt="sigmoid"></p>
<h2 id="Maximum-likelihood-estimation-来估计参数theta的值"><a href="#Maximum-likelihood-estimation-来估计参数theta的值" class="headerlink" title="Maximum likelihood estimation 来估计参数theta的值"></a>Maximum likelihood estimation 来估计参数theta的值</h2><script type="math/tex; mode=display">L(\theta) = \prod_{i:y_{i}=1}p(x_{i})\prod_{i^{\prime}:y_{i^{\prime}}=0}(1-p(x_{i^{\prime}}))</script><ul>
<li>Get coefficients that maximizes the likelihood, then use them for predictions</li>
<li>Maximizing the likelihood function is equivalent to minimizing the cost function $J(\theta)$</li>
</ul>
<script type="math/tex; mode=display">J(\theta) = - \sum_{i=1}^{n}[y_{i}log(P(y_{i} = 1 | x)) + (1 - y_{i})log(1 - P(y_{i}=1|x))]</script>]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Machine Learning Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>INFSCI 2595:Machine Learning(part one)</title>
    <url>/INFSCI-2595-Machine-Learning-part-one/2019/02/23/</url>
    <content><![CDATA[<p><strong>Reference from some lecture slides of INFSCI 2595 lectured by Dr. Mai Abdelhakim</strong></p>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><h3 id="What-is-Machine-Learning"><a href="#What-is-Machine-Learning" class="headerlink" title="What is Machine Learning?"></a>What is Machine Learning?</h3><ul>
<li>Subfield of artificial intelligence</li>
<li>Field of study that gives computers the ability to learn without being explicitly programmed</li>
</ul>
<h3 id="How-can-we-build-computer-system-that-learn-and-improve-with-experience"><a href="#How-can-we-build-computer-system-that-learn-and-improve-with-experience" class="headerlink" title="How can we build computer system that learn and improve with experience?"></a>How can we build computer system that learn and improve with experience?</h3><ul>
<li>Statistics make conclusions from data, and estimate reliability of conclusions</li>
<li>Optimization and computing power to solve problems</li>
</ul>
<blockquote class="blockquote-center">Machine learns with respect to a particular **task T**, **performance metric P** and **experience E**, if the performance P on task T improves with **experience E**.
</blockquote>


<h3 id="Why-Machine-Learning-is-Important"><a href="#Why-Machine-Learning-is-Important" class="headerlink" title="Why Machine Learning is Important"></a>Why Machine Learning is Important</h3><ul>
<li>Provide solution to complex problems that cannot be easily programmed</li>
<li>Can adapt to new data</li>
<li>Helps us to understand complicated phenomena</li>
<li>Can outperform human performance</li>
</ul>
<h3 id="Machine-Learning-Algorithms"><a href="#Machine-Learning-Algorithms" class="headerlink" title="Machine Learning Algorithms"></a>Machine Learning Algorithms</h3><h4 id="Supervised-Learning"><a href="#Supervised-Learning" class="headerlink" title="Supervised Learning"></a>Supervised Learning</h4><ol>
<li>Learn using labeled data (correct answers are given in learning phase)</li>
<li>make predictions of previously unseen data</li>
<li>Two types of problems<ul>
<li><strong>Regression</strong>: Target values (Y) are continuous/quantitative</li>
<li><strong>Classification</strong>: Target values (Y) are discrete/finite/qualitative</li>
</ul>
</li>
</ol>
<h4 id="Unsupervised-Learning"><a href="#Unsupervised-Learning" class="headerlink" title="Unsupervised Learning"></a>Unsupervised Learning</h4><ol>
<li>Clustering analysis</li>
<li>Finding groups of similar users</li>
<li>Detecting abnormal patterns</li>
</ol>
<h2 id="Machine-Learning-Models-and-Trade-offs"><a href="#Machine-Learning-Models-and-Trade-offs" class="headerlink" title="Machine Learning Models and Trade-offs"></a>Machine Learning Models and Trade-offs</h2><h3 id="Why-do-we-need-a-model-Why-estimate-f"><a href="#Why-do-we-need-a-model-Why-estimate-f" class="headerlink" title="Why do we need a model? Why estimate f?"></a>Why do we need a model? Why estimate f?</h3><ul>
<li><strong>Predictions</strong>: Make predictions for new inputs/features</li>
<li><strong>Inference</strong>: understand the way Y is affected by each features<ul>
<li>Which feature has stronger impact on the response?</li>
<li>Is relation positive or negative</li>
<li>Is the relationship linear or more complicated</li>
</ul>
</li>
</ul>
<h3 id="How-to-estimate-f"><a href="#How-to-estimate-f" class="headerlink" title="How to estimate f?"></a>How to estimate f?</h3><ol>
<li>Parametric Approach<ul>
<li>First,assume function form </li>
<li>Second, use training to fit the model</li>
</ul>
</li>
<li>Non-Parametric Approach<ul>
<li>No explicit form of function f is assumed</li>
<li>Seek to estimate f as close as possible to the data points</li>
</ul>
</li>
</ol>
<h3 id="Trade-off-Model-Flexibility-vs-Model-Interpretability"><a href="#Trade-off-Model-Flexibility-vs-Model-Interpretability" class="headerlink" title="Trade-off: Model Flexibility vs Model Interpretability"></a>Trade-off: Model Flexibility vs Model Interpretability</h3><p><a href="interpretability.png">interpretability</a></p>
<h3 id="Model-Accuracy"><a href="#Model-Accuracy" class="headerlink" title="Model Accuracy"></a>Model Accuracy</h3><ol>
<li>In regression setting, a common measure is mean squared error(MSE)</li>
</ol>
<script type="math/tex; mode=display">MSE = \frac{1}{n}\sum_{i=1}^{n}(y_{i} - \hat{f(x_{i})})^{2}</script><h4 id="Overfitting-and-Underfitting"><a href="#Overfitting-and-Underfitting" class="headerlink" title="Overfitting and Underfitting"></a>Overfitting and Underfitting</h4><p>Two thing we need to avoid:</p>
<ul>
<li>Overfitting: Building a model that is too complex, fits training data very well, but fail to generalize to new data (e.g. large test MSE)</li>
<li><p>Underfitting: build simple model that is unable to capture variability in data</p>
</li>
<li><p>Simple models may not capture the variability in the data</p>
</li>
<li>Complex models may not generalize</li>
</ul>
<h4 id="Bias-Variance-Tradeoff"><a href="#Bias-Variance-Tradeoff" class="headerlink" title="Bias-Variance Tradeoff"></a>Bias-Variance Tradeoff</h4><script type="math/tex; mode=display">E(y_{0} - \hat{f(x_{0})})^2 = Var(\hat{f(x_{0})}) + [Bias(\hat{f(x_{0})})]^{2} + Var(\epsilon)</script><ul>
<li>Variance: amount by which $\hat{f}$ changes if we made the estimation by different training set</li>
<li>Bias: Errors from approximating real-life problems by a simpler model</li>
</ul>
<ol>
<li>Classification Setting</li>
</ol>
<ul>
<li>$\hat{y_{0}} = \hat{f(x_{0})}$ is the predicted output class</li>
<li>Test error rate:<script type="math/tex; mode=display">Average(I(y_{0} \neq \hat{y_{0}}))</script></li>
</ul>
<h4 id="Bayes-classifier"><a href="#Bayes-classifier" class="headerlink" title="Bayes classifier"></a>Bayes classifier</h4><ul>
<li>Bayes classifier assigns each observation to the most likely class given the feature values.</li>
<li>Assign $x_{0}$ to class ! that has largest $Pr(Y= j|X = x_{0})$</li>
</ul>
<h4 id="K-Nearest-Neighbors"><a href="#K-Nearest-Neighbors" class="headerlink" title="K-Nearest Neighbors"></a>K-Nearest Neighbors</h4><ul>
<li>Define a positive integer K</li>
<li>For each test observation $x_{0}$ , identify K points in the training data that are closest to $x_{0}$ referred to as $N_{0}$</li>
<li>Estimate the conditional probability for class j as fraction of points in $N_{0}$ whose response values equal to j<script type="math/tex; mode=display">Pr(Y = j | X = x_{0}) = \frac{1}{k}\sum_{i \in N_{0}}I(y_{i} == j)</script></li>
</ul>
<p><a href="knn.png">knn</a></p>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Course Note</tag>
      </tags>
  </entry>
  <entry>
    <title>An overview of gradient descent optimization algorithms</title>
    <url>/An-overview-of-gradient-descent-optimization-algorithms/2019/02/23/</url>
    <content><![CDATA[<p><strong>Reference from <a href="https://arxiv.org/abs/1609.04747" target="_blank" rel="noopener">An overview of gradient descent optimization algorithms</a></strong></p>
<h2 id="Batch-gradient-descent"><a href="#Batch-gradient-descent" class="headerlink" title="Batch gradient descent"></a>Batch gradient descent</h2><script type="math/tex; mode=display">\theta = \theta - \eta * \triangledown_{\theta}J(\theta)</script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(nb_epochs):</span><br><span class="line">  params_grad = evaluate_gradient(loss_function, data, params)</span><br><span class="line">  params = params - learning_rate * params_grad</span><br></pre></td></tr></table></figure>
<ul>
<li>Batch gradient descent is guaranteed to converge to the global minimum for convex error surfaces and to a local minimum for non-convex surfaces.</li>
</ul>
<h2 id="Stochastic-gradient-descent"><a href="#Stochastic-gradient-descent" class="headerlink" title="Stochastic gradient descent"></a>Stochastic gradient descent</h2><script type="math/tex; mode=display">\theta = \theta - \eta * \triangledown_{\theta}J(\theta; x^{i};y^{i})</script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(nb_epochs):</span><br><span class="line">  np.random.shuffle(data)</span><br><span class="line">  <span class="keyword">for</span> example <span class="keyword">in</span> data:</span><br><span class="line">    params_grad = evaluate_gradient(loss_function, example, params)</span><br><span class="line">    params = params - learning_rate * params_grad</span><br></pre></td></tr></table></figure>
<ul>
<li>SGD performs frequent updates with a high variance that cause the objective function to fluctuate heavily as in Image 1.</li>
<li><img src="image1.png" alt="image1.png"></li>
<li>SGD shows the same convergence behaviour as batch gradient descent, almost certainly converging to a local or the global minimum for non-convex and convex optimization respectively.</li>
</ul>
<h2 id="Mini-batch-gradient-descent"><a href="#Mini-batch-gradient-descent" class="headerlink" title="Mini-batch gradient descent"></a>Mini-batch gradient descent</h2><script type="math/tex; mode=display">\theta = \theta - \eta * \triangledown_{\theta}J(\theta; x^{i:i+n};y^{i:i+n})</script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(nb_epochs):</span><br><span class="line">  np.random.shuffle(data)</span><br><span class="line">  <span class="keyword">for</span> batch <span class="keyword">in</span> get_batches(data, batch_size=<span class="number">50</span>):</span><br><span class="line">    params_grad = evaluate_gradient(loss_function, batch, params)</span><br><span class="line">    params = params - learning_rate * params_grad</span><br></pre></td></tr></table></figure>
<ul>
<li>Common mini-batch sizes range between 50 and 256, but can vary for different applications</li>
<li>Mini-batch gradient descent is typically the algorithm of choice when training a neural network and the term SGD usually is employed also when mini-batches are used</li>
</ul>
<h2 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h2><ul>
<li>Choosing a proper learning rate can be difficult</li>
<li>the same learning rate applies to all parameter updates</li>
<li>Learning rate schedules<ul>
<li>ry to adjust the learning rate during training by e.g. annealing</li>
<li>reducing the learning rate according to a pre-defined schedule or when the change in objective between epochs falls below a threshold</li>
</ul>
</li>
<li>Another key challenge of minimizing highly non-convex error functions common for neural networks is avoiding getting trapped in their numerous suboptimal local minima</li>
</ul>
<h2 id="Momentum"><a href="#Momentum" class="headerlink" title="Momentum"></a>Momentum</h2><p>Momentum is a method that helps accelerate SGD in the relevant direction and dampens oscillations as can be seen in Image 3. It does this by adding a fraction of the update vector of the past time step to the current update vector:</p>
<p>\begin{align<em>}<br>&amp; v_{t} = \gamma v_{t-1} +  \eta </em> \triangledown_{\theta}J(\theta) \\<br>&amp; \theta = \theta - v_{t}\\<br>\end{align*}</p>
<ul>
<li>The momentum term $\gamma$ is usually set to 0.9 or a similar value.</li>
<li>The ball accumulates momentum as it rolls downhill, becoming faster and faster on the way</li>
</ul>
<h2 id="Nesterov-accelerated-gradient"><a href="#Nesterov-accelerated-gradient" class="headerlink" title="Nesterov accelerated gradient"></a>Nesterov accelerated gradient</h2><p>\begin{align<em>}<br>&amp; v_{t} = \gamma v_{t-1} +  \eta </em> \triangledown_{\theta}J(\theta - \gamma <em> m) \\<br>&amp; \theta = \theta - v_{t}\\<br>\end{align</em>}</p>
<ul>
<li>既然参数要沿着 $\theta - \gamma * m$更新，那就先先计算未来位置的梯度</li>
<li>This anticipatory update prevents us from going too fast and results in increased responsiveness, which has significantly increased the performance of RNNs on a number of tasks</li>
</ul>
<h2 id="Adagrad"><a href="#Adagrad" class="headerlink" title="Adagrad"></a>Adagrad</h2><p>\begin{align<em>}<br>&amp; s = s + \triangledown J(\theta) \bigodot \triangledown J(\theta) \\<br>&amp; \theta = \theta - \frac{\eta}{\sqrt{s + \epsilon}} \bigodot \triangledown J(\theta) \\<br>\end{align</em>}</p>
<ul>
<li>One of Adagrad’s main benefits is that it eliminates the need to manually tune the learning rate</li>
<li>Adagrad modifies the general learning rate $\gamma$ at each time step t for every parameter $\theta_{i}$ based on the past gradients that have been computed for $\theta_{i}$</li>
</ul>
<h2 id="RMSprop"><a href="#RMSprop" class="headerlink" title="RMSprop"></a>RMSprop</h2><p>\begin{align<em>}<br>&amp; v_{t} = \gamma v_{t-1} + (1-\gamma) </em> \triangledown J(\theta) \bigodot \triangledown J(\theta) \\<br>&amp; \theta = \theta - v_{t} \\<br>\end{align*}</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tf.train.RMSPropOptimizer(learning_rate=learning_rate, momentum=<span class="number">0.9</span>, decay=<span class="number">0.9</span>, epsilon=<span class="number">1e-10</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>加入Momentum，主要是解决学习速率过快衰减的问题</li>
<li>RMSprop as well divides the learning rate by an exponentially decaying average of squared gradients. Hinton suggests $\gamma$ to be set to 0.9, while a good default value for the learning rate $\eta$ is 0.001.</li>
</ul>
<h2 id="Adaptive-moment-estimation-Adam"><a href="#Adaptive-moment-estimation-Adam" class="headerlink" title="Adaptive moment estimation (Adam)"></a>Adaptive moment estimation (Adam)</h2><p>\begin{align<em>}<br>&amp; m = \beta_{1} </em> m + (1-\beta_{1}) <em> \triangledown J(\theta) \\<br>&amp; s = \beta_{2} </em> s + (1-\beta_{2}) <em> \triangledown J(\theta) \bigodot \triangledown J(\theta) \\<br>&amp; m = \frac{m}{1-\beta^{t}_{1}} \\<br>&amp; s = \frac{s}{1-\beta^{t}_{2}} \\<br>&amp; \theta = \theta - \frac{\eta}{\sqrt{s + \epsilon}} \bigodot m<br>\end{align</em>}</p>
<ul>
<li>其结合了Momentum和RMSprop算法的思想。相比Momentum算法，其学习速率是自适应的，而相比RMSprop，其增加了冲量项, 第三和第四项主要是为了放大它们</li>
<li>The authors propose default values of 0.9 for $\beta1$, 0.9999 for $\beta2$ and $10^{-8}$ for $\epsilon$</li>
</ul>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Machine Learning</category>
        <category>Paper Note</category>
      </categories>
      <tags>
        <tag>Machine Learning Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Linear models, Optimization</title>
    <url>/Linear-models-Optimization/2019/02/22/</url>
    <content><![CDATA[<h1 id="Programming-assignment-Linear-models-Optimization"><a href="#Programming-assignment-Linear-models-Optimization" class="headerlink" title="Programming assignment (Linear models, Optimization)"></a>Programming assignment (Linear models, Optimization)</h1><p>In this programming assignment you will implement a linear classifier and train it using stochastic gradient descent modifications and numpy.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">".."</span>)</span><br><span class="line"><span class="keyword">import</span> grading</span><br><span class="line">grader = grading.Grader(assignment_key=<span class="string">"UaHtvpEFEee0XQ6wjK-hZg"</span>, </span><br><span class="line">                      all_parts=[<span class="string">"xU7U4"</span>, <span class="string">"HyTF6"</span>, <span class="string">"uNidL"</span>, <span class="string">"ToK7N"</span>, <span class="string">"GBdgZ"</span>, <span class="string">"dLdHG"</span>])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># token expires every 30 min</span></span><br><span class="line">COURSERA_TOKEN = <span class="string">"TmANlFkR4a4doLvg"</span></span><br><span class="line">COURSERA_EMAIL = <span class="string">"lvduzhen@gmail.com"</span></span><br></pre></td></tr></table></figure>
<h2 id="Two-dimensional-classification"><a href="#Two-dimensional-classification" class="headerlink" title="Two-dimensional classification"></a>Two-dimensional classification</h2><p>To make things more intuitive, let’s solve a 2D classification problem with synthetic data.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'train.npy'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> fin:</span><br><span class="line">    X = np.load(fin)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'target.npy'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> fin:</span><br><span class="line">    y = np.load(fin)</span><br><span class="line"></span><br><span class="line">plt.scatter(X[:, <span class="number">0</span>], X[:, <span class="number">1</span>], c=y, cmap=plt.cm.Paired, s=<span class="number">20</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="output_5_0.png" alt="png"></p>
<h1 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h1><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><p>As you can notice the data above isn’t linearly separable. Since that we should add features (or use non-linear model). Note that decision line between two classes have form of circle, since that we can add quadratic features to make the problem linearly separable. The idea under this displayed on image below:</p>
<p><img src="kernel.png" alt></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(X)</span><br></pre></td></tr></table></figure>
<pre><code>[[ 1.20798057  0.0844994 ]
 [ 0.76121787  0.72510869]
 [ 0.55256189  0.51937292]
 ..., 
 [-1.22224754  0.45743421]
 [ 0.43973452 -1.47275142]
 [ 1.4928118   1.15683375]]
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">expand</span><span class="params">(X)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Adds quadratic features. </span></span><br><span class="line"><span class="string">    This expansion allows your linear model to make non-linear separation.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    For each sample (row in matrix), compute an expanded row:</span></span><br><span class="line"><span class="string">    [feature0, feature1, feature0^2, feature1^2, feature0*feature1, 1]</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    :param X: matrix of features, shape [n_samples,2]</span></span><br><span class="line"><span class="string">    :returns: expanded features of shape [n_samples,6]</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    X_expanded = np.zeros((X.shape[<span class="number">0</span>], <span class="number">6</span>))</span><br><span class="line">    X_expanded[:,<span class="number">0</span>] = X[:,<span class="number">0</span>]</span><br><span class="line">    X_expanded[:,<span class="number">1</span>] = X[:,<span class="number">1</span>]</span><br><span class="line">    X_expanded[:,<span class="number">2</span>] = np.square(X[:,<span class="number">0</span>])</span><br><span class="line">    X_expanded[:,<span class="number">3</span>] = np.square(X[:,<span class="number">1</span>])</span><br><span class="line">    X_expanded[:,<span class="number">4</span>] = X[:,<span class="number">0</span>] * X[:,<span class="number">1</span>]</span><br><span class="line">    X_expanded[:,<span class="number">5</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> X_expanded</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span>&lt;your code here&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X_expanded = expand(X)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X_expanded</span><br></pre></td></tr></table></figure>
<pre><code>array([[ 1.20798057,  0.0844994 ,  1.45921706,  0.00714015,  0.10207364,
         1.        ],
       [ 0.76121787,  0.72510869,  0.57945265,  0.52578261,  0.5519657 ,
         1.        ],
       [ 0.55256189,  0.51937292,  0.30532464,  0.26974823,  0.28698568,
         1.        ],
       ..., 
       [-1.22224754,  0.45743421,  1.49388906,  0.20924606, -0.55909785,
         1.        ],
       [ 0.43973452, -1.47275142,  0.19336645,  2.16899674, -0.64761963,
         1.        ],
       [ 1.4928118 ,  1.15683375,  2.22848708,  1.33826433,  1.72693508,
         1.        ]])
</code></pre><p>Here are some tests for your implementation of <code>expand</code> function.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># simple test on random numbers</span></span><br><span class="line"></span><br><span class="line">dummy_X = np.array([</span><br><span class="line">        [<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">        [<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">        [<span class="number">2.61</span>,<span class="number">-1.28</span>],</span><br><span class="line">        [<span class="number">-0.59</span>,<span class="number">2.1</span>]</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line"><span class="comment"># call your expand function</span></span><br><span class="line">dummy_expanded = expand(dummy_X)</span><br><span class="line"></span><br><span class="line"><span class="comment"># what it should have returned:   x0       x1       x0^2     x1^2     x0*x1    1</span></span><br><span class="line">dummy_expanded_ans = np.array([[ <span class="number">0.</span>    ,  <span class="number">0.</span>    ,  <span class="number">0.</span>    ,  <span class="number">0.</span>    ,  <span class="number">0.</span>    ,  <span class="number">1.</span>    ],</span><br><span class="line">                               [ <span class="number">1.</span>    ,  <span class="number">0.</span>    ,  <span class="number">1.</span>    ,  <span class="number">0.</span>    ,  <span class="number">0.</span>    ,  <span class="number">1.</span>    ],</span><br><span class="line">                               [ <span class="number">2.61</span>  , <span class="number">-1.28</span>  ,  <span class="number">6.8121</span>,  <span class="number">1.6384</span>, <span class="number">-3.3408</span>,  <span class="number">1.</span>    ],</span><br><span class="line">                               [<span class="number">-0.59</span>  ,  <span class="number">2.1</span>   ,  <span class="number">0.3481</span>,  <span class="number">4.41</span>  , <span class="number">-1.239</span> ,  <span class="number">1.</span>    ]])</span><br><span class="line"></span><br><span class="line"><span class="comment">#tests</span></span><br><span class="line"><span class="keyword">assert</span> isinstance(dummy_expanded,np.ndarray), <span class="string">"please make sure you return numpy array"</span></span><br><span class="line"><span class="keyword">assert</span> dummy_expanded.shape == dummy_expanded_ans.shape, <span class="string">"please make sure your shape is correct"</span></span><br><span class="line"><span class="keyword">assert</span> np.allclose(dummy_expanded,dummy_expanded_ans,<span class="number">1e-3</span>), <span class="string">"Something's out of order with features"</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"Seems legit!"</span>)</span><br></pre></td></tr></table></figure>
<pre><code>Seems legit!
</code></pre><h2 id="Logistic-regression"><a href="#Logistic-regression" class="headerlink" title="Logistic regression"></a>Logistic regression</h2><p>To classify objects we will obtain probability of object belongs to class ‘1’. To predict probability we will use output of linear model and logistic function:</p>
<script type="math/tex; mode=display">a(x; w) = \langle w, x \rangle</script><script type="math/tex; mode=display">P( y=1 \; \big| \; x, \, w) = \dfrac{1}{1 + \exp(- \langle w, x \rangle)} = \sigma(\langle w, x \rangle)</script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">probability</span><span class="params">(X, w)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Given input features and weights</span></span><br><span class="line"><span class="string">    return predicted probabilities of y==1 given x, P(y=1|x), see description above</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    Don't forget to use expand(X) function (where necessary) in this and subsequent functions.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    :param X: feature matrix X of shape [n_samples,6] (expanded)</span></span><br><span class="line"><span class="string">    :param w: weight vector w of shape [6] for each of the expanded features</span></span><br><span class="line"><span class="string">    :returns: an array of predicted probabilities in [0,1] interval.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    w = w.reshape((w.shape[<span class="number">0</span>],<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span>  <span class="number">1</span>/(<span class="number">1</span> + np.exp(-np.dot(X,w)))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span>&lt;your code here&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dummy_weights = np.linspace(<span class="number">-1</span>, <span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">ans_part1 = probability(X_expanded[:<span class="number">1</span>, :], dummy_weights)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## GRADED PART, DO NOT CHANGE!</span></span><br><span class="line">grader.set_answer(<span class="string">"xU7U4"</span>, ans_part1)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># you can make submission with answers so far to check yourself at this stage</span></span><br><span class="line">grader.submit(COURSERA_EMAIL, COURSERA_TOKEN)</span><br></pre></td></tr></table></figure>
<pre><code>Submitted to Coursera platform. See results on assignment page!
</code></pre><p>In logistic regression the optimal parameters $w$ are found by cross-entropy minimization:</p>
<p>Loss for one sample: <script type="math/tex">l(x_i, y_i, w) = - \left[ {y_i \cdot log P(y_i = 1 \, | \, x_i,w) + (1-y_i) \cdot log (1-P(y_i = 1\, | \, x_i,w))}\right]</script></p>
<p>Loss for many samples: <script type="math/tex">L(X, \vec{y}, w) =  {1 \over \ell} \sum_{i=1}^\ell l(x_i, y_i, w)</script></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_loss</span><span class="params">(X, y, w)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Given feature matrix X [n_samples,6], target vector [n_samples] of 1/0,</span></span><br><span class="line"><span class="string">    and weight vector w [6], compute scalar loss function L using formula above.</span></span><br><span class="line"><span class="string">    Keep in mind that our loss is averaged over all samples (rows) in X.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    y = y.reshape((y.shape[<span class="number">0</span>],<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> -np.mean(y*np.log(probability(X,w)) + (<span class="number">1</span>-y)*np.log(<span class="number">1</span>-probability(X,w)))</span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span>&lt;your code here&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># use output of this cell to fill answer field </span></span><br><span class="line">ans_part2 = compute_loss(X_expanded, y, dummy_weights)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## GRADED PART, DO NOT CHANGE!</span></span><br><span class="line">grader.set_answer(<span class="string">"HyTF6"</span>, ans_part2)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># you can make submission with answers so far to check yourself at this stage</span></span><br><span class="line">grader.submit(COURSERA_EMAIL, COURSERA_TOKEN)</span><br></pre></td></tr></table></figure>
<pre><code>Submitted to Coursera platform. See results on assignment page!
</code></pre><p>Since we train our model with gradient descent, we should compute gradients.</p>
<p>To be specific, we need a derivative of loss function over each weight [6 of them].</p>
<script type="math/tex; mode=display">\nabla_w L = {1 \over \ell} \sum_{i=1}^\ell \nabla_w l(x_i, y_i, w)</script><p>We won’t be giving you the exact formula this time — instead, try figuring out a derivative with pen and paper. </p>
<p>As usual, we’ve made a small test for you, but if you need more, feel free to check your math against finite differences (estimate how $L$ changes if you shift $w$ by $10^{-5}$ or so).</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_grad</span><span class="params">(X, y, w)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Given feature matrix X [n_samples,6], target vector [n_samples] of 1/0,</span></span><br><span class="line"><span class="string">    and weight vector w [6], compute vector [6] of derivatives of L over each weights.</span></span><br><span class="line"><span class="string">    Keep in mind that our loss is averaged over all samples (rows) in X.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    y = y.reshape((y.shape[<span class="number">0</span>],<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> np.mean(X*(probability(X,w) - y),axis = <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># use output of this cell to fill answer field </span></span><br><span class="line">ans_part3 = np.linalg.norm(compute_grad(X_expanded, y, dummy_weights))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## GRADED PART, DO NOT CHANGE!</span></span><br><span class="line">grader.set_answer(<span class="string">"uNidL"</span>, ans_part3)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># you can make submission with answers so far to check yourself at this stage</span></span><br><span class="line">grader.submit(COURSERA_EMAIL, COURSERA_TOKEN)</span><br></pre></td></tr></table></figure>
<pre><code>Submitted to Coursera platform. See results on assignment page!
</code></pre><p>Here’s an auxiliary function that visualizes the predictions:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> IPython <span class="keyword">import</span> display</span><br><span class="line"></span><br><span class="line">h = <span class="number">0.01</span></span><br><span class="line">x_min, x_max = X[:, <span class="number">0</span>].min() - <span class="number">1</span>, X[:, <span class="number">0</span>].max() + <span class="number">1</span></span><br><span class="line">y_min, y_max = X[:, <span class="number">1</span>].min() - <span class="number">1</span>, X[:, <span class="number">1</span>].max() + <span class="number">1</span></span><br><span class="line">xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visualize</span><span class="params">(X, y, w, history)</span>:</span></span><br><span class="line">    <span class="string">"""draws classifier prediction with matplotlib magic"""</span></span><br><span class="line">    Z = probability(expand(np.c_[xx.ravel(), yy.ravel()]), w)</span><br><span class="line">    Z = Z.reshape(xx.shape)</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">    plt.contourf(xx, yy, Z, alpha=<span class="number">0.8</span>)</span><br><span class="line">    plt.scatter(X[:, <span class="number">0</span>], X[:, <span class="number">1</span>], c=y, cmap=plt.cm.Paired)</span><br><span class="line">    plt.xlim(xx.min(), xx.max())</span><br><span class="line">    plt.ylim(yy.min(), yy.max())</span><br><span class="line">    </span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">    plt.plot(history)</span><br><span class="line">    plt.grid()</span><br><span class="line">    ymin, ymax = plt.ylim()</span><br><span class="line">    plt.ylim(<span class="number">0</span>, ymax)</span><br><span class="line">    display.clear_output(wait=<span class="keyword">True</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">visualize(X, y, dummy_weights, [<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.25</span>])</span><br></pre></td></tr></table></figure>
<p><img src="output_30_0.png" alt="png"></p>
<h2 id="Training"><a href="#Training" class="headerlink" title="Training"></a>Training</h2><p>In this section we’ll use the functions you wrote to train our classifier using stochastic gradient descent.</p>
<p>You can try change hyperparameters like batch size, learning rate and so on to find the best one, but use our hyperparameters when fill answers.</p>
<h2 id="Mini-batch-SGD"><a href="#Mini-batch-SGD" class="headerlink" title="Mini-batch SGD"></a>Mini-batch SGD</h2><p>Stochastic gradient descent just takes a random batch of $m$ samples on each iteration, calculates a gradient of the loss on it and makes a step:</p>
<script type="math/tex; mode=display">w_t = w_{t-1} - \eta \dfrac{1}{m} \sum_{j=1}^m \nabla_w l(x_{i_j}, y_{i_j}, w_t)</script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># please use np.random.seed(42), eta=0.1, n_iter=100 and batch_size=4 for deterministic results</span></span><br><span class="line"></span><br><span class="line">np.random.seed(<span class="number">42</span>)</span><br><span class="line">w = np.array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">eta= <span class="number">0.1</span> <span class="comment"># learning rate</span></span><br><span class="line"></span><br><span class="line">n_iter = <span class="number">100</span></span><br><span class="line">batch_size = <span class="number">4</span></span><br><span class="line">loss = np.zeros(n_iter)</span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n_iter):</span><br><span class="line">    ind = np.random.choice(X_expanded.shape[<span class="number">0</span>], batch_size)</span><br><span class="line">    loss[i] = compute_loss(X_expanded, y, w)</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">        visualize(X_expanded[ind, :], y[ind], w, loss)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Keep in mind that compute_grad already does averaging over batch for you!</span></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span>&lt;your code here&gt;</span></span><br><span class="line">    random_index = np.random.randint(<span class="number">0</span>,X_expanded.shape[<span class="number">0</span>],batch_size)</span><br><span class="line">    w = w - eta * compute_grad(X_expanded[random_index,:],y[random_index],w)</span><br><span class="line"></span><br><span class="line">visualize(X, y, w, loss)</span><br><span class="line">plt.clf()</span><br></pre></td></tr></table></figure>
<p><img src="output_33_0.png" alt="png"></p>
<pre><code>&lt;matplotlib.figure.Figure at 0x7fdbbfafb908&gt;
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># use output of this cell to fill answer field </span></span><br><span class="line">ans_part4 = compute_loss(X_expanded, y, w)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## GRADED PART, DO NOT CHANGE!</span></span><br><span class="line">grader.set_answer(<span class="string">"ToK7N"</span>, ans_part4)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># you can make submission with answers so far to check yourself at this stage</span></span><br><span class="line">grader.submit(COURSERA_EMAIL, COURSERA_TOKEN)</span><br></pre></td></tr></table></figure>
<pre><code>Submitted to Coursera platform. See results on assignment page!
</code></pre><h2 id="SGD-with-momentum"><a href="#SGD-with-momentum" class="headerlink" title="SGD with momentum"></a>SGD with momentum</h2><p>Momentum is a method that helps accelerate SGD in the relevant direction and dampens oscillations as can be seen in image below. It does this by adding a fraction $\alpha$ of the update vector of the past time step to the current update vector.<br><br><br><br></p>
<script type="math/tex; mode=display">\nu_t = \alpha \nu_{t-1} + \eta\dfrac{1}{m} \sum_{j=1}^m \nabla_w l(x_{i_j}, y_{i_j}, w_t)</script><script type="math/tex; mode=display">w_t = w_{t-1} - \nu_t</script><p><br></p>
<p><img src="sgd.png" alt></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># please use np.random.seed(42), eta=0.05, alpha=0.9, n_iter=100 and batch_size=4 for deterministic results</span></span><br><span class="line">np.random.seed(<span class="number">42</span>)</span><br><span class="line">w = np.array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">eta = <span class="number">0.05</span> <span class="comment"># learning rate</span></span><br><span class="line">alpha = <span class="number">0.9</span> <span class="comment"># momentum</span></span><br><span class="line">nu = np.zeros_like(w)</span><br><span class="line"></span><br><span class="line">n_iter = <span class="number">100</span></span><br><span class="line">batch_size = <span class="number">4</span></span><br><span class="line">loss = np.zeros(n_iter)</span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n_iter):</span><br><span class="line">    ind = np.random.choice(X_expanded.shape[<span class="number">0</span>], batch_size)</span><br><span class="line">    loss[i] = compute_loss(X_expanded, y, w)</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">        visualize(X_expanded[ind, :], y[ind], w, loss)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span>&lt;your code here&gt;</span></span><br><span class="line">    random_index = np.random.randint(<span class="number">0</span>,X_expanded.shape[<span class="number">0</span>],batch_size)</span><br><span class="line">    nu = alpha*nu + eta * compute_grad(X_expanded[random_index,:],y[random_index],w)</span><br><span class="line">    w = w - nu</span><br><span class="line"></span><br><span class="line">visualize(X, y, w, loss)</span><br><span class="line">plt.clf()</span><br></pre></td></tr></table></figure>
<p><img src="output_38_0.png" alt="png"></p>
<pre><code>&lt;matplotlib.figure.Figure at 0x7fdbba216e10&gt;
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># use output of this cell to fill answer field </span></span><br><span class="line"></span><br><span class="line">ans_part5 = compute_loss(X_expanded, y, w)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## GRADED PART, DO NOT CHANGE!</span></span><br><span class="line">grader.set_answer(<span class="string">"GBdgZ"</span>, ans_part5)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># you can make submission with answers so far to check yourself at this stage</span></span><br><span class="line">grader.submit(COURSERA_EMAIL, COURSERA_TOKEN)</span><br></pre></td></tr></table></figure>
<pre><code>Submitted to Coursera platform. See results on assignment page!
</code></pre><h2 id="RMSprop"><a href="#RMSprop" class="headerlink" title="RMSprop"></a>RMSprop</h2><p>Implement RMSPROP algorithm, which use squared gradients to adjust learning rate:</p>
<script type="math/tex; mode=display">G_j^t = \alpha G_j^{t-1} + (1 - \alpha) g_{tj}^2</script><script type="math/tex; mode=display">w_j^t = w_j^{t-1} - \dfrac{\eta}{\sqrt{G_j^t + \varepsilon}} g_{tj}</script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># please use np.random.seed(42), eta=0.1, alpha=0.9, n_iter=100 and batch_size=4 for deterministic results</span></span><br><span class="line">np.random.seed(<span class="number">42</span>)</span><br><span class="line"></span><br><span class="line">w = np.array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1.</span>])</span><br><span class="line"></span><br><span class="line">eta = <span class="number">0.1</span> <span class="comment"># learning rate</span></span><br><span class="line">alpha = <span class="number">0.9</span> <span class="comment"># moving average of gradient norm squared</span></span><br><span class="line">g2 = <span class="keyword">None</span> <span class="comment"># we start with None so that you can update this value correctly on the first iteration</span></span><br><span class="line">eps = <span class="number">1e-8</span></span><br><span class="line">G = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">n_iter = <span class="number">100</span></span><br><span class="line">batch_size = <span class="number">4</span></span><br><span class="line">loss = np.zeros(n_iter)</span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>,<span class="number">5</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n_iter):</span><br><span class="line">    ind = np.random.choice(X_expanded.shape[<span class="number">0</span>], batch_size)</span><br><span class="line">    loss[i] = compute_loss(X_expanded, y, w)</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">        visualize(X_expanded[ind, :], y[ind], w, loss)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span>&lt;your code here&gt;</span></span><br><span class="line">    random_index = np.random.randint(<span class="number">0</span>,X_expanded.shape[<span class="number">0</span>],batch_size)</span><br><span class="line">    g2 = np.square(compute_grad(X_expanded[random_index,:],y[random_index],w))</span><br><span class="line">    G = alpha*G + (<span class="number">1</span>-alpha) * g2</span><br><span class="line">    w = w - eta/np.sqrt(G + eps) * g2</span><br><span class="line">    </span><br><span class="line">visualize(X, y, w, loss)</span><br><span class="line">plt.clf()</span><br></pre></td></tr></table></figure>
<p><img src="output_43_0.png" alt="png"></p>
<pre><code>&lt;matplotlib.figure.Figure at 0x7fdbba944f98&gt;
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># use output of this cell to fill answer field </span></span><br><span class="line">ans_part6 = compute_loss(X_expanded, y, w)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## GRADED PART, DO NOT CHANGE!</span></span><br><span class="line">grader.set_answer(<span class="string">"dLdHG"</span>, ans_part6)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">grader.submit(COURSERA_EMAIL, COURSERA_TOKEN)</span><br></pre></td></tr></table></figure>
<pre><code>Submitted to Coursera platform. See results on assignment page!
</code></pre>]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Project</tag>
      </tags>
  </entry>
  <entry>
    <title>INFSCI 2160 DATA MINING(PART ONE)</title>
    <url>/INFSCI-2160-DATA-MINING-PART-ONE/2019/02/18/</url>
    <content><![CDATA[<p><strong>Reference from some lecture slides of INFSCI 2160 DATA MINING lectured by Matt Berezo</strong></p>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><ol>
<li>What is Artificial Intelligence?<br><img src="29AF0C1A006683910109C1BA949541C4.png" alt="Screen Shot 2019-02-18 at 13.13.28.png"><br>The goal of machine learning/AI/data mining is to develop an algorithm that performs well on new, <strong>unseen inputs</strong>. The ability to perform well on previously unobserved inputs is called <strong>generalization</strong></li>
</ol>
<ol>
<li>Data Mining process<br><img src="83DD4C0B5649752C8A1EAE6A78058344.png" alt="Screen Shot 2019-02-18 at 13.15.58.png"></li>
</ol>
<ul>
<li><strong>Business undertanding</strong> is important</li>
<li><strong>Data understranding</strong> is important</li>
</ul>
<h2 id="Regression"><a href="#Regression" class="headerlink" title="Regression"></a>Regression</h2><ul>
<li>Simple linear regression involves 2 variables:<ul>
<li>A predictor variable, x</li>
<li>A response variable, y</li>
</ul>
</li>
</ul>
<script type="math/tex; mode=display">\hat{y_{i}} = \hat{\alpha} + \hat{\beta_{i}}X_{i}</script><ul>
<li>$\hat{y_{i}}$ = Estimated prediction of y</li>
<li>$\hat{\alpha}$ = Intercept</li>
<li>$\hat{\beta_{i}}$ = coefficient/parameter</li>
</ul>
<p><strong>Goal</strong>: Obtain coefficient estimates that the linear model fits the available data well, and will also perform well (generalize) on unseen data</p>
<h3 id="The-least-square-approach"><a href="#The-least-square-approach" class="headerlink" title="The least square approach"></a>The least square approach</h3><script type="math/tex; mode=display">\begin{align*}
& \hat{\beta_{1}} = \frac{\sum_{i=1}^{n}{(x_{i}-\bar{x})(y_{i}-\bar{y})}}{\sum_{i=1}^{n}{(x_{i} - \bar{x})^{2}}}\\
& \hat{\beta_{0}} = \bar{y} - \hat{\beta_{1}}\bar{x}
\end{align*}</script><h3 id="Coefficient-Accuracy"><a href="#Coefficient-Accuracy" class="headerlink" title="Coefficient Accuracy"></a>Coefficient Accuracy</h3><p>We can compute the standard error of our coefficients</p>
<h4 id="what-is-SE-standaed-error"><a href="#what-is-SE-standaed-error" class="headerlink" title="what is SE (standaed error)?"></a>what is SE (standaed error)?</h4><blockquote>
<p>If the purpose is <strong>Descriptive</strong>, use standard Deviation; if the purpose is <strong>Estimation</strong>, use standard Error.</p>
</blockquote>
<p>很容易混淆,我们拿到一个样本,对样本观察值离散程度的量化是$SD:sd(x)$; 而我们可以从很多个样本中得到很多个均值，这些均值的离散度用SE来量化,也就是$SE=sd(\bar{x})$</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">## generate 1000 sample with sample size 100</span></span><br><span class="line">a = sapply(rep(<span class="number">100</span>, <span class="number">1000</span>), rnorm)</span><br><span class="line">a.mean = colMeans(a)</span><br><span class="line"><span class="comment">## estimate SEM by simulation</span></span><br><span class="line">sd(a.mean)</span><br><span class="line"></span><br><span class="line"><span class="comment">## estimate SEM by sigma/sqrt(n), sigma = 1</span></span><br><span class="line"><span class="number">1</span>/sqrt(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## estimate SEM by sample 1</span></span><br><span class="line">sd(a[, <span class="number">1</span>])/sqrt(<span class="number">100</span>)</span><br></pre></td></tr></table></figure>
<p><strong>We have established that the average of $\hat{\mu}$ over many data sets will be very close to $\mu$, but that a single estimate $\hat{\mu}$ may be a substantial underestimate or overestimate of $\mu$. How far off will that single estimate of $\hat{\mu}$ be?</strong></p>
<script type="math/tex; mode=display">\begin{align*}
& SE(\hat{\beta_{0}})^{2} = \sigma^{2}\lbrack\frac{1}{n} + \frac{\bar{x}^{2}}{\sum_{i=1}^{n}{(x_{i} - \bar{x})^{2}}}\rbrack\\
& SE(\hat{\beta_{1}})^{2} = \frac{\sigma^{2}}{\sum_{i=1}^{n}{(x_{i} - \bar{x})^{2}}}\\
\end{align*}</script><p>When we get the SE of parameters, we can calculate the 95% confidence interval </p>
<script type="math/tex; mode=display">\hat{B_{i}} = +/- 2 * SE(\hat{B_{i}})</script><p>Standard errors can also be used to perform <strong>hypothesis tests</strong> on the coefficients. The most common hypothesis test involves testing the null hypothesis</p>
<ul>
<li><strong>Null hypothesis(H0)</strong>: there is <strong>no</strong> relationship between x and y</li>
<li><strong>Alternative hypothesis(Ha)</strong>: there is a relationship between x and y</li>
</ul>
<p>Mathematically, this corresponds to testing</p>
<script type="math/tex; mode=display">\begin{align*}
H_{0}: \beta_{1} = 0 \\
H_{a}: \beta_{1} \ne 0 \\
\end{align*}</script><p>To test the null hypothesis, we need to determine whether $\hat{β_{1}}$, our estimate for $\hat{β_{1}}$ , is sufficiently far from zero that we can be confident that $\hat{β_{1}}$ is non-zero</p>
<script type="math/tex; mode=display">t = \frac{\hat{β_{1}} - 0}{SE(\hat{\beta_{1}})}</script><h3 id="Model-Accuracy"><a href="#Model-Accuracy" class="headerlink" title="Model Accuracy"></a>Model Accuracy</h3><ul>
<li><p>RSS: Residual Sum of Squares</p>
<script type="math/tex; mode=display">e_{1}^{2} + e_{2}^{2} + e_{3}^{2} + .....</script></li>
<li><p>RSE: Residual standard error</p>
<script type="math/tex; mode=display">\sqrt\frac{RSS}{(N-2)}</script></li>
<li>R squared<br>How much better does your model do than simply using the mean, in terms of<br>SSE?<script type="math/tex; mode=display">R^{2} = 1 - (\frac{\sum{(y_{i} - \hat{y}_{i})^{2}}}{\sum{(y_{i} - \overline{y}_{i})^{2}}})</script><ul>
<li>R-square takes form of a proportion and gives a value between 0 and 1 (1 = perfect model)</li>
</ul>
</li>
</ul>
<h3 id="Multiple-Linear-Regression"><a href="#Multiple-Linear-Regression" class="headerlink" title="Multiple Linear Regression"></a>Multiple Linear Regression</h3><ul>
<li>F-stat<br>If the F-stat is larger than 1 and the p-value is &lt;= 0.05, we can determine that our predictors and model have a relationship with the response variable</li>
</ul>
<script type="math/tex; mode=display">\frac{TSS - RSS}{p} / \frac{RSS}{n-p-1}</script><pre><code>- Where p = our number of predictors
- N = number of observations
</code></pre><p><img src="9784E656D9E9D2613CF3D07CA064D3AA.jpg" alt="IMG_0310.jpg"></p>
<ul>
<li>R-squared<script type="math/tex; mode=display">R^{2} = 1 - \frac{\sum{(y_{i} - \hat{y}_{i})^{2}} / (n-d-1)}{\sum{(y_{i} - \overline{y}_{i})^{2}}/(n-d)}</script></li>
</ul>
<h3 id="Feature-Selection"><a href="#Feature-Selection" class="headerlink" title="Feature Selection"></a>Feature Selection</h3><h4 id="Stepwise-Procedures"><a href="#Stepwise-Procedures" class="headerlink" title="Stepwise Procedures"></a>Stepwise Procedures</h4><ul>
<li><p>Backward Elimination<br>  This is the simplest of all variable selection procedures and can be easily implemented without special software. In situations where there is a complex hierarchy, backward elimination can be run manually while taking account of what variables are eligible for removal.</p>
<ol>
<li>Start with all the predictors in the model</li>
<li>Remove the predictor with highest p-value greater than $\alpha$</li>
<li>Refit the model and goto 2</li>
<li>Stop when all p-values are less than $\alpha$</li>
</ol>
</li>
<li><p>Forward Selection<br>  This just reverses the backward method.</p>
<ol>
<li>Start with no variables in the model.</li>
<li>For all predictors not in the model, check their p-value if they are added to the model. Choose the one with lowest p-value less than αcrit .</li>
<li>Continue until no new predictors can be added.</li>
</ol>
</li>
</ul>
<h4 id="Ridge-regression-i-e-L2-norm-regulizar"><a href="#Ridge-regression-i-e-L2-norm-regulizar" class="headerlink" title="Ridge regression (i.e., L2 norm regulizar)"></a>Ridge regression (i.e., L2 norm regulizar)</h4><p>Ridge looks to minimize:</p>
<script type="math/tex; mode=display">RSS + \lambda\sum_{j=1}^{p}{\beta_{j}^{2}}</script><ul>
<li>$\lambda$ is a tuning parameter</li>
</ul>
<h3 id="Bias-vs-Variance-Trade-off"><a href="#Bias-vs-Variance-Trade-off" class="headerlink" title="Bias vs. Variance Trade-off"></a>Bias vs. Variance Trade-off</h3><p>Ideally, we want to derive a model that has low bias, low variance, and low MSE on test data<br><img src="CA80BF1FC8D3AA010CDDFE5A646489BF.png" alt="Screen Shot 2019-02-18 at 20.01.09.png"></p>
<h3 id="Local-Polynomial-Regression"><a href="#Local-Polynomial-Regression" class="headerlink" title="Local Polynomial Regression"></a>Local Polynomial Regression</h3><ul>
<li>The fitted value changes with x in a nonparametric manner</li>
<li>Define a weight function so that only values within a smoothing window [𝑥0 - h(𝑥0 ), 𝑥0 + h(𝑥0 )] will be considered in the estimate of $\hat{y}$</li>
</ul>
<h3 id="Model-Performance"><a href="#Model-Performance" class="headerlink" title="Model Performance"></a>Model Performance</h3><h3 id="Cross-validation"><a href="#Cross-validation" class="headerlink" title="Cross-validation"></a>Cross-validation</h3><p>The goal of cross-validation is to test the model’s ability to predict new data that was not used in estimating it, in order to flag problems like overfitting or selection bias[6] and to give an insight on how the model will generalize to an independent dataset (i.e., an unknown dataset, for instance from a real problem).</p>
<h4 id="Advantages-of-LOOCV"><a href="#Advantages-of-LOOCV" class="headerlink" title="Advantages of LOOCV"></a>Advantages of LOOCV</h4><p>Advantages of LOOCV:</p>
<ul>
<li>Works well on small datasets</li>
<li>Meticulously tests the data</li>
</ul>
<p>Disadvantages of LOOCV:</p>
<ul>
<li>Computationally expensive on “big data” sets</li>
<li>Can result in high variability since model is only tested on one observation</li>
</ul>
<h4 id="Overfitting"><a href="#Overfitting" class="headerlink" title="Overfitting"></a>Overfitting</h4><ul>
<li>Use cross-validation</li>
<li>Ensemble/combine models together</li>
<li>Use regularization techniques to penalize models that are too complex</li>
</ul>
<h3 id="Non-parametric-Methods"><a href="#Non-parametric-Methods" class="headerlink" title="Non-parametric Methods"></a>Non-parametric Methods</h3><p>Advantages of Non-parametric Methods:</p>
<ul>
<li>Do not assume an explicit form of f(x), so the model is more “flexible”</li>
</ul>
<p>Disadvantages of Non-Parametric Methods:</p>
<ul>
<li>Often are more complex and thus more difficult to interpret</li>
</ul>
<h4 id="K-Nearest-Neighbors"><a href="#K-Nearest-Neighbors" class="headerlink" title="K Nearest-Neighbors"></a>K Nearest-Neighbors</h4><ul>
<li>KNN is a <strong>non-parametric method</strong>, vs. linear and logistic regression which are parametric approaches since they assume a linear functional form for f(x)<br><img src="BFE33EA434D8355137098AEF9241AEEC.png" alt="Screen Shot 2019-02-18 at 22.26.44.png"></li>
</ul>
<h3 id="Accuracy-and-Error-Rate"><a href="#Accuracy-and-Error-Rate" class="headerlink" title="Accuracy and Error Rate"></a>Accuracy and Error Rate</h3><p><img src="3FB3E0B341C2DD82395CB962430B6E34.png" alt="Screen Shot 2019-02-19 at 00.26.12.png"><br><img src="youden.png" alt="youden.png"><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics</span><br><span class="line">y = np.array([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>])</span><br><span class="line">scores = np.array([<span class="number">0.1</span>, <span class="number">0.4</span>, <span class="number">0.35</span>, <span class="number">0.8</span>])</span><br><span class="line">fpr, tpr, thresholds = metrics.roc_curve(y, scores, pos_label=<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fpr</span><br><span class="line">array([<span class="number">0.</span> , <span class="number">0.</span> , <span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">1.</span> ])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tpr</span><br><span class="line">array([<span class="number">0.</span> , <span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">1.</span> , <span class="number">1.</span> ])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>thresholds</span><br><span class="line">array([<span class="number">1.8</span> , <span class="number">0.8</span> , <span class="number">0.4</span> , <span class="number">0.35</span>, <span class="number">0.1</span> ])</span><br></pre></td></tr></table></figure></p>
<h3 id="Classification"><a href="#Classification" class="headerlink" title="Classification"></a>Classification</h3><h4 id="Naive-Bayes"><a href="#Naive-Bayes" class="headerlink" title="Naïve Bayes"></a>Naïve Bayes</h4><ul>
<li>a Naïve Bayes classifier assumes independence between features</li>
<li>Naïve Bayes assumes that the continuous variables are normally distributed</li>
<li>For continuous random variables, probabilities are areas under the curve<br><img src="IMG_77C6064B4F18.png" alt="IMG_77C6064B4F18.png"></li>
</ul>
<h4 id="Decision-Trees"><a href="#Decision-Trees" class="headerlink" title="Decision Trees"></a>Decision Trees</h4><p>Constructing Decision Trees for Regression</p>
<ol>
<li>First, we divide the predictor space into distinct and non-overlapping regions (𝑅1, 𝑅2,𝑅3 … 𝑅𝑛)</li>
<li>To make a prediction, we typically use the mean of the training data in the region to which it belongs</li>
</ol>
<p><strong>How do we construct R1 and R2?</strong><br>The goal is to find regions that minimize the residual sum of squares (RSS)</p>
<p>Decision trees can get too complex, memorize the training data, and overfit on test data</p>
<ul>
<li>It is advised to first build a very large tree and then <strong>prune</strong> it back to obtain a subtree<ul>
<li>Given a subtree, we can estimate the test error rate using cross-validation</li>
</ul>
</li>
<li><strong>Cost complexity pruning</strong> i.e., <strong>weakest link pruning</strong> gives us the most efficient way to choose our subset of trees</li>
</ul>
<h4 id="Decision-Trees-Advantages-and-Disadvantages"><a href="#Decision-Trees-Advantages-and-Disadvantages" class="headerlink" title="Decision Trees Advantages and Disadvantages"></a>Decision Trees Advantages and Disadvantages</h4><p>Advantages:</p>
<ul>
<li>Trees are easy to explain and are intuitive</li>
<li>Trees can be displayed graphically and are easy to interpret</li>
<li>Trees can handle qualitative predictors without dummy variables</li>
</ul>
<p>Disadvantages:</p>
<ul>
<li>Trees to not usually have the same level of predictive accuracy as other regression and classification methods</li>
<li>Trees can be non-robust, i.e., a small change in the data can cause a large change in the tree</li>
</ul>
<h4 id="Bagging-and-Random-Forests"><a href="#Bagging-and-Random-Forests" class="headerlink" title="Bagging and Random Forests"></a>Bagging and Random Forests</h4><p><strong>Bootstrap aggregation</strong>, also known as <strong>bagging</strong>, is a procedure of reducing the variance of a statistical learning method</p>
<ul>
<li>This is a good way to reduce variance→by taking many training sets from the population and build<br>separate learning methods using each set</li>
<li>We can then calculate f1,f2,f3… and average them in order to obtain a low-variance<br>statistical model</li>
<li>We can do this by bootstrapping, or taking repeated random samples from the training set</li>
</ul>
<p><strong>Ensemble learning</strong> is a machine learning paradigm where multiple learners are trained to solve the same problem</p>
<p><strong>Random forests</strong> provide an improvement over bagged trees by decorrelating them</p>
<ul>
<li>Like bagging, decision trees are made on bootstrapped training samples</li>
<li>Random forests are an <strong>ensemble</strong> method for decision trees</li>
<li>The difference is, each time a split in the tree is considered, a random sample of predictors is chosen as split candidates from the full set of predictors. So, at each split of the tree, the algorithm can’t even consider a majority of the predictors</li>
</ul>
<h3 id="Support-Vector-Machines"><a href="#Support-Vector-Machines" class="headerlink" title="Support Vector Machines"></a>Support Vector Machines</h3><ul>
<li>SVM’s use a classifying tool called <strong>maximum margin classifier</strong></li>
<li>maximum margin classifiers can’t be applied to most datasets because they require the classes to be <strong>separated by a linear boundary</strong></li>
<li>Support vector classifiers are an extension of maximum margin classifiers that can be applied to a broader range of datasets</li>
</ul>
<h4 id="hyperplane"><a href="#hyperplane" class="headerlink" title="hyperplane"></a>hyperplane</h4><p>A hyperplane is a flat subspace in p-dimensional space with p – 1 dimensions<br><img src="BEC28A552A36163DACC7817A18999E6B.png" alt="Screen Shot 2019-02-19 at 02.46.26.png"></p>
<h4 id="parameters"><a href="#parameters" class="headerlink" title="parameters"></a>parameters</h4><ul>
<li>C = a nonnegative tuning parameter<ul>
<li>C can be thought of as a budget for the amount the margin can be violated by n observations. If C = 0, there is no budget for violations to the margin</li>
<li>large C, Overfitting</li>
<li>small C, underfitting</li>
</ul>
</li>
</ul>
<h4 id="What-if-the-decision-boundary-for-the-two-classes-is-not-linear"><a href="#What-if-the-decision-boundary-for-the-two-classes-is-not-linear" class="headerlink" title="What if the decision boundary for the two classes is not linear?"></a>What if the decision boundary for the two classes is not linear?</h4><ul>
<li>enlarging the feature space with kernels</li>
<li>A kernel is a function that quantifies the similarity between two observations</li>
</ul>
<h3 id="Multinomial-Logistic-Regression"><a href="#Multinomial-Logistic-Regression" class="headerlink" title="Multinomial Logistic Regression"></a>Multinomial Logistic Regression</h3><ul>
<li>Similar to binary logistic regression, all probabilities in the output will sum to 1</li>
<li>This is just an extension of the same math from logistic regression</li>
</ul>
<h4 id="Drawbacks"><a href="#Drawbacks" class="headerlink" title="Drawbacks"></a>Drawbacks</h4><ul>
<li>Models involve many parameters, which makes their interpretation tedious</li>
<li>Maximum-likelihood estimation can encounter numerical problems if the data is separable and if the predicted probabilities are close to either 0 or 1</li>
</ul>
<h3 id="XGBoost"><a href="#XGBoost" class="headerlink" title="XGBoost"></a>XGBoost</h3><h4 id="overview"><a href="#overview" class="headerlink" title="overview"></a>overview</h4><p>Advantages of XGBoost:</p>
<ul>
<li>Scalability: XGBoost system runs 10x faster than existing popular solutions on a single machine</li>
<li>XGBoost accepts null values: users don’t have to impute missing values, drop records, etc.</li>
<li>Less time spent on feature selection and more time spent on hyperparametric tuning</li>
</ul>
<p>Typically, one tree is not as strong as an ensemble/combination of other trees. XGBoost uses an ensemble method to gather information from other trees.</p>
<h4 id="Objective-Function-and-Regularization"><a href="#Objective-Function-and-Regularization" class="headerlink" title="Objective Function and Regularization"></a>Objective Function and Regularization</h4><p>The additive function fixes what we have already learned, and adds one new tree at a time<br><img src="8227ABDFF7CF20D89F91BFAAE7C2C7F8.png" alt="Screen Shot 2019-02-19 at 04.46.06.png"></p>
<p>But how do we choose which tree we want at each step?</p>
<blockquote>
<p>We pick the one that optimizes our objective function! This is known as an <strong>additive function</strong></p>
</blockquote>
<h4 id="Objective-Functions"><a href="#Objective-Functions" class="headerlink" title="Objective Functions"></a>Objective Functions</h4><ul>
<li>Linear: Continuous numeric prediction</li>
<li>Binary: logistic,binary classification</li>
<li>Multi:softmax: multiclassification</li>
</ul>
<h4 id="Tree-Boosting-Parameters"><a href="#Tree-Boosting-Parameters" class="headerlink" title="Tree Boosting Parameters"></a>Tree Boosting Parameters</h4><p><strong>Reference from <a href="https://www.cnblogs.com/sarahp/p/6900572.html" target="_blank" rel="noopener">https://www.cnblogs.com/sarahp/p/6900572.html</a></strong></p>
<ul>
<li><strong>Eta</strong> (i.e., learning rate): Step shrinkage use in update to prevent overfitting. After each boosting step, we can get<br>the weights of new features. Eta shrinks the weights to make the boosting process more conservative</li>
<li>Gamma: Minimum loss reduction required to make a further partition on a leaf node of a tree. Larger gamma = more conservative model (这个指定了一个结点被分割时，所需要的最小损失函数减小的大小)</li>
<li>Max depth: Maximum depth of a tree. Increasing this value will make the model more complex (树的最大深度，值越大，树越复杂)</li>
<li>Minimum child weight: Minimum sum of instance weight needed in a child. If the tree partition step results in a leaf node with the sum of instance weight less than this set parameter, the building process will stop partitioning. Larger weight = more conservative model (定义了一个子集的所有观察值的最小权重和)</li>
<li>Subsample: A subsample ratio of the training instances. Setting to 0.5 would make XGBoost randomly sample half<br>of the training data prior to growing trees and will help prevent overfitting (样本的采样率，如果设置成0.5，那么Xgboost会随机选择一般的样本作为训练集)</li>
<li>Column sample by tree: Subsample ratio of columns when constructing a tree</li>
<li>Column sample by level: Subsample ratio of columns for each level of the tree</li>
<li>Column sample by node: Subsample ratio of columns for each node (split)</li>
<li>Lambda: L2 regularization </li>
<li>Alpha: L1 regularization</li>
<li>Scale positive weight: Control the balance of positive and negative weights</li>
</ul>
<h3 id="REVIEW"><a href="#REVIEW" class="headerlink" title="REVIEW"></a>REVIEW</h3><h4 id="What-is-the-difference-between-boost-ensemble-bootstrap-and-bagging"><a href="#What-is-the-difference-between-boost-ensemble-bootstrap-and-bagging" class="headerlink" title="What is the difference between boost, ensemble, bootstrap and bagging?"></a>What is the difference between boost, ensemble, bootstrap and bagging?</h4><p><strong>Reference from <a href="https://www.quora.com/What-is-the-difference-between-boost-ensemble-bootstrap-and-bagging" target="_blank" rel="noopener">https://www.quora.com/What-is-the-difference-between-boost-ensemble-bootstrap-and-bagging</a></strong></p>
<ul>
<li>Boosting is the idea of training iteratively the same “weak” classifier, so that at each iteration, the i-th classifier is supposed to correct the mistakes made by the previous classifier (i-1). It is done by weighting more the misclassified observations.</li>
<li>The final classifier is calculated by a weighted mean of all the “weak” classifiers, the weights being close to the accuracies calculated for each classifier.</li>
<li>Ensembling is quite general and encompasses simple methods like Averaging, and more complicated ones like Boosting, Bagging, Stacking, etc.</li>
<li>Bootstrapping means taking a sample of a population by drawing with replacement. It is one of the main ideas behind Bagging (which stands for Bootstrap AGGregatING).</li>
<li>Bagging means training the same classifier on different subsets (that may be overlapping) of one dataset. You do so with bootstrap.</li>
</ul>
<h4 id="RF-vs-XGBoost"><a href="#RF-vs-XGBoost" class="headerlink" title="RF vs XGBoost"></a>RF vs XGBoost</h4><p><strong>Reference from <a href="https://www.cnblogs.com/sarahp/p/6900572.html" target="_blank" rel="noopener">https://www.cnblogs.com/sarahp/p/6900572.html</a></strong></p>
<ul>
<li><p>RF use bagging:</p>
<ul>
<li>种集成学习算法，基于bootstrap sampling 自助采样法，重复性有放回的随机采用部分样本进行训练最后再将结果 voting 或者 averaging</li>
<li>它是并行式算法，因为不同基学习器是独立</li>
<li>训练一个bagging集成学习器时间复杂度与基学习器同阶（n倍，n为基学习器个数）。</li>
<li>bagging可以用于二分类／多分类／回归</li>
<li>每个基学习器的未用作训练样本可用来做包外估计，评价泛化性能。</li>
<li>bagging主要关注降低<strong>方差</strong></li>
<li>两个步骤 1. 抽样训练（采样样本，采样特征） 2 融合 </li>
</ul>
</li>
<li><p>XGBoost use boosting(Gradient Boosting Decision Tree):</p>
<ul>
<li>gbdt的基本原理是boost 里面的 boosting tree（提升树），并使用 gradient boost。</li>
<li>Gradient Boosting是一种Boosting的方法，其与传统的Boosting的区别是，每一次的计算是为了减少上一次的残差(residual)，而为了消除残差，可以在残差减少的梯度(Gradient)方向上建立一个新的模型。所以说，在Gradient Boosting中，每个新的模型的建立是为了使得之前模型的残差往梯度方向减少，与传统Boosting对正确、错误样本进行加权有着很大的区别。这个梯度代表上一轮学习器损失函数对预测值求导。</li>
<li>与Boosting Tree的区别：Boosting Tree的适合于损失函数为平方损失或者指数损失。而Gradient Boosting适合各类损失函数（损失函数为：平方损失则相当于Boosting Tree拟合残差、损失函数为：使用指数损失则可以近似于Adaboost，但树是回归树）</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Data Mining</category>
      </categories>
      <tags>
        <tag>Course Note</tag>
      </tags>
  </entry>
  <entry>
    <title>Machine Learning (Andrew Ng)</title>
    <url>/Machine-Learning-Andraw-Ng/2019/02/15/</url>
    <content><![CDATA[<p><strong>Reference From Coursera Course <a href="https://www.coursera.org/learn/machine-learning" target="_blank" rel="noopener">Machine Learning</a>. I am also really sorry that I did not write down some sources when I cite from the web. I was too young and did not get any academic training when I wrote these notes.</strong></p>
<p><strong>Let me thank Ng first. This course Changed me. I still remember that afternoon when I was just a sophomore. I discovered the Machine Learning course lectured by Andrew Ng on Coursera and was fascinated by the underlying algorithms. It was amazing to see that a simple yet elegant mathematical model could make predictions on new data after being trained with large amounts of training sets for analysis and fitting. I spent several days on the assignments and developed a classifier to filter spam emails and an Optical Character Recognition program. Never expecting that I could program the machine to gain the cognitive ability, I was so thrilled and resolved to advance my knowledge in this area. About two years later, I took this course again and reviewed some important concepts to prapare the interviews. I wrote down notes and paid for the course this time</strong></p>
<font color="red">This is my course certificate. I really want all of guys who want to dive into the area of machine learning to take this course on Coursera.</font>

<p><img src="certificate.png" alt="certificate"></p>
<h2 id="What-is-Machine-Learning"><a href="#What-is-Machine-Learning" class="headerlink" title="What is Machine Learning?"></a>What is Machine Learning?</h2><p>Two definitions of Machine Learning are offered. </p>
<ul>
<li><p>Arthur Samuel described it as: “<em>the field of study that gives computers the ability to learn without being explicitly programmed.</em>“ This is an older, informal definition.</p>
</li>
<li><p>Tom Mitchell provides a more modern definition: “A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P, if its performance at tasks in T, as measured by P, improves with experience E.”</p>
<p> Example: playing checkers.</p>
<ul>
<li>E = the experience of playing many games of checkers</li>
<li>T = the task of playing checkers.</li>
<li>P = the probability that the program will win the next game.</li>
</ul>
</li>
</ul>
<p>In general, any machine learning problem can be assigned to one of two broad classifications:</p>
<blockquote>
<p><strong>Supervised learning</strong> and <strong>Unsupervised learning</strong>.</p>
</blockquote>
<h3 id="Supervised-Learning"><a href="#Supervised-Learning" class="headerlink" title="Supervised Learning"></a>Supervised Learning</h3><p>In supervised learning, we are given a data set and already know what our correct output should look like, having the idea that there is a relationship between the input and the output.</p>
<p>Supervised learning problems are categorized into “<strong>regression</strong>“ and “<strong>classification</strong>“ problems. In a regression problem, we are trying to predict results within a continuous output, meaning that we are trying to map input variables to some continuous function. In a classification problem, we are instead trying to predict results in a discrete output. In other words, we are trying to map input variables into discrete categories.</p>
<ul>
<li><p>Example 1:</p>
<ul>
<li><p>Given data about the size of houses on the real estate market, try to predict their price. Price as a function of size is a continuous output, so this is a regression problem.</p>
</li>
<li><p><img src="063C817FFFB3B0B3B413A901EB57B1CD.png" alt="Screen Shot 2018-03-02 at 15.22.36.png"></p>
</li>
<li><p>We could turn this example into a classification problem by instead making our output about whether the house “sells for more or less than the asking price.” Here we are classifying the houses based on price into two discrete categories.</p>
</li>
</ul>
</li>
<li><p>Example 2:</p>
<ul>
<li><p>Regression - Given a picture of a person, we have to predict their age on the basis of the given picture</p>
</li>
<li><p>Classification - Given a patient with a tumor, we have to predict whether the tumor is malignant or benign.</p>
</li>
<li><p><img src="E2B0C7D6576344A88AD23372DD308854.png" alt="Screen Shot 2018-03-02 at 15.22.51.png"></p>
</li>
</ul>
</li>
</ul>
<h3 id="Unsupervised-Learning"><a href="#Unsupervised-Learning" class="headerlink" title="Unsupervised Learning"></a>Unsupervised Learning</h3><p>Unsupervised learning allows us to approach problems with little or no idea what our results should look like. We can derive structure from data where we don’t necessarily know the effect of the variables.</p>
<p>We can derive this structure by clustering the data based on relationships among the variables in the data.</p>
<p>With unsupervised learning there is no feedback based on the prediction results.</p>
<p><img src="3CAA5D79351470DE1A2A5F1D06FD6D6D.png" alt="Screen Shot 2018-03-02 at 15.26.13.png"></p>
<p>Example:</p>
<p>Clustering: Take a collection of 1,000,000 different genes, and find a way to automatically group these genes into groups that are somehow similar or related by different variables, such as lifespan, location, roles, and so on.</p>
<h3 id="Model-Representation"><a href="#Model-Representation" class="headerlink" title="Model Representation"></a>Model Representation</h3><p>To establish notation for future use, we’ll use x(i) to denote the “input” variables (living area in this example), also called input features, and y(i) to denote the “output” or target variable that we are trying to predict (price). A pair (x<sup>(i)</sup>,y<sup>(i)</sup>) is called a training example, and the dataset that we’ll be using to learn—a list of m training examples (x<sup>(i)</sup>,y<sup>(i)</sup>);i=1,…,m—is called a training set. Note that the superscript “<sup>(i)</sup>” in the notation is simply an index into the training set, and has nothing to do with exponentiation. We will also use X to denote the space of input values, and Y to denote the space of output values. In this example, X = Y = ℝ.</p>
<p>To describe the supervised learning problem slightly more formally, our goal is, given a training set, to learn a function h : X → Y so that h(x) is a “good” predictor for the corresponding value of y. For historical reasons, this function h is called a hypothesis. Seen pictorially, the process is therefore like this:</p>
<p><img src="9FCAA69BB208841EE1008EB337EFA43F.png" alt="Screen Shot 2018-03-02 at 16.13.42.png"></p>
<p>When the target variable that we’re trying to predict is continuous, such as in our housing example, we call the learning problem a regression problem. When y can take on only a small number of discrete values (such as if, given the living area, we wanted to predict if a dwelling is a house or an apartment, say), we call it a classification problem.</p>
<h2 id="Linear-Regression-with-Multiple-Variables"><a href="#Linear-Regression-with-Multiple-Variables" class="headerlink" title="Linear Regression with Multiple Variables"></a>Linear Regression with Multiple Variables</h2><h3 id="Cost-Function"><a href="#Cost-Function" class="headerlink" title="Cost Function"></a>Cost Function</h3><p>We can measure the accuracy of our hypothesis function by using a cost function. This takes an average difference (actually a fancier version of an average) of all the results of the hypothesis with inputs from x’s and the actual output y’s.</p>
<script type="math/tex; mode=display">J(θ_0,θ_1)=\frac{1}{2m}\sum_{i=1}^m(\hat{y}_i−y_i)^2=\frac{1}{2m}\sum_{i=1}^m(h_θ(x_i)−y_i)^2</script><p>To break it apart, it is $\frac{1}{2}\bar{x}$ where $\bar{x}$ is the mean of the squares of $h_θ(x_i)−y_i$ , or the difference between the predicted value and the actual value.</p>
<p>This function is otherwise called the “Squared error function”, or “Mean squared error”. The mean is halved ($\frac{1}{2}$) as a convenience for the computation of the gradient descent, as the derivative term of the square function will cancel out the $\frac{1}{2}$ term. The following image summarizes what the cost function does:</p>
<h4 id="Cost-Function-Intuition-I"><a href="#Cost-Function-Intuition-I" class="headerlink" title="Cost Function - Intuition I"></a>Cost Function - Intuition I</h4><p>If we try to think of it in visual terms, our training data set is scattered on the x-y plane. We are trying to make a straight line (defined by $h_θ(x)$) which passes through these scattered data points.</p>
<p>Our objective is to get the best possible line. The best possible line will be such so that the average squared vertical distances of the scattered points from the line will be the least. Ideally, the line should pass through all the points of our training data set. In such a case, the value of $J(θ_0,θ_1)$ will be 0. The following example shows the ideal situation where we have a cost function of 0.</p>
<p><img src="A19DDA728EC3F0FF86BAC1817BCF3D8E.png" alt="Screen Shot 2018-03-02 at 17.18.45.png"></p>
<p>When $θ_1=1$, we get a slope of 1 which goes through every single data point in our model. Conversely, when θ1=0.5, we see the vertical distance from our fit to the data points increase.</p>
<p><img src="286352EB8728B8B444FF18AC497883FD.png" alt="Screen Shot 2018-03-02 at 17.19.16.png"></p>
<p>This increases our cost function to 0.58. Plotting several other points yields to the following graph:</p>
<p><img src="137435EB4C560E4149608420936EC396.png" alt="Screen Shot 2018-03-02 at 17.19.50.png"></p>
<p>Thus as a goal, we should try to minimize the cost function. In this case, $θ_1=1$ is our global minimum.</p>
<h4 id="Cost-Function-Intuition-II"><a href="#Cost-Function-Intuition-II" class="headerlink" title="Cost Function - Intuition II"></a>Cost Function - Intuition II</h4><p>A contour plot is a graph that contains many contour lines. A contour line of a two variable function has a constant value at all points of the same line. An example of such a graph is the one to the right below.<img src="FF1822723CAD042DA71898E4920AB5AB.png" alt="Screen Shot 2018-03-02 at 17.39.24.png"></p>
<p>Taking any color and going along the ‘circle’, one would expect to get the same value of the cost function. For example, the three green points found on the green line above have the same value for $J(θ_0,θ_1)$ and as a result, they are found along the same line. The circled x displays the value of the cost function for the graph on the left when $θ_0 = 800$ and $θ_1= -0.15$. Taking another h(x) and plotting its contour plot, one gets the following graphs:<br><img src="76A0D0F9217AABFB6A7D3440262E2C54.png" alt="Screen Shot 2018-03-02 at 17.41.34.png"></p>
<p>When $θ_0 = 360$ and $θ_1 = 0$, the value of $J(θ_0,θ_1)$ in the contour plot gets closer to the center thus reducing the cost function error. Now giving our hypothesis function a slightly positive slope results in a better fit of the data.</p>
<p><img src="CBDB08F38835A0A76D7C137DAD1DFA64.png" alt="Screen Shot 2018-03-02 at 17.42.31.png"></p>
<p>The graph above minimizes the cost function as much as possible and consequently, the result of $θ_1$ and $θ_0$ tend to be around 0.12 and 250 respectively. Plotting those values on our graph to the right seems to put our point in the center of the inner most ‘circle’.</p>
<h3 id="Gradient-Descent"><a href="#Gradient-Descent" class="headerlink" title="Gradient Descent"></a>Gradient Descent</h3><p>So we have our hypothesis function and we have a way of measuring how well it fits into the data. Now we need to estimate the parameters in the hypothesis function. That’s where gradient descent comes in.</p>
<p>Imagine that we graph our hypothesis function based on its fields $θ_0$ and $θ_1$ (actually we are graphing the cost function as a function of the parameter estimates). We are not graphing x and y itself, but the parameter range of our hypothesis function and the cost resulting from selecting a particular set of parameters.</p>
<p>We put $θ_0$ on the x axis and $θ_1$ on the y axis, with the cost function on the vertical z axis. The points on our graph will be the result of the cost function using our hypothesis with those specific theta parameters. The graph below depicts such a setup.</p>
<p><img src="81462B5B2B256050E7993F7FFE4F8F51.png" alt="Screen Shot 2018-03-02 at 17.46.49.png"></p>
<p>We will know that we have succeeded when our cost function is at the very bottom of the pits in our graph, i.e. when its value is the minimum. The red arrows show the minimum points in the graph.</p>
<p>The way we do this is by taking the derivative (the tangential line to a function) of our cost function. The slope of the tangent is the derivative at that point and it will give us a direction to move towards. We make steps down the cost function in the direction with the steepest descent. The size of each step is determined by the parameter α, which is called the learning rate.</p>
<p>For example, the distance between each ‘star’ in the graph above represents a step determined by our parameter α. A smaller α would result in a smaller step and a larger α results in a larger step. The direction in which the step is taken is determined by the partial derivative of $J(θ_0,θ_1)$. Depending on where one starts on the graph, one could end up at different points. The image above shows us two different starting points that end up in two different places.</p>
<p>The gradient descent algorithm is:</p>
<p>repeat until convergence:</p>
<script type="math/tex; mode=display">
θ_j:=θ_j−α\frac{∂}{∂θj}J(θ_0,θ_1)</script><p>where<br>j=0,1 represents the feature index number.<br>At each iteration j, one should simultaneously update the parameters $θ_1$,$θ_2$,…,$θ_n$. Updating a specific parameter prior to calculating another one on the $j^{(th)}$ iteration would yield to a wrong implementation.</p>
<p><img src="AA97E2C240AD85D258CC2F21C4797C34.png" alt="Screen Shot 2018-03-03 at 00.47.36.png"></p>
<h4 id="Gradient-Descent-Intuition"><a href="#Gradient-Descent-Intuition" class="headerlink" title="Gradient Descent Intuition"></a>Gradient Descent Intuition</h4><p>In this video we explored the scenario where we used one parameter $θ_s1$ and plotted its cost function to implement a gradient descent. Our sformula for a single parameter was:</p>
<p>Repeat until convergence:</p>
<script type="math/tex; mode=display">θ_1 := θ_1 − α\frac{d}{dθ_1}J(θ_1)</script><p>Regardless of the slope’s sign for \frac{d}{dθ_1}J(θ_1), $θ_1$ eventually converges to its minimum value. The following graph shows that when the slope is negative, the value of $θ_1$ increases and when it is positive, the value of θ1 decreases.</p>
<p><img src="7BC4362E24C17B9EBE3DE8CCACAEAF8D.png" alt="Screen Shot 2018-03-03 at 00.54.26.png"></p>
<p>On a side note, we should adjust our parameter α to ensure that the gradient descent algorithm converges in a reasonable time. Failure to converge or too much time to obtain the minimum value imply that our step size is wrong.</p>
<p><img src="A5C5678803CD4D84FE7090C7AFB7EECB.png" alt="Screen Shot 2018-03-03 at 00.55.16.png"></p>
<p>How does gradient descent converge with a fixed step size α?</p>
<p>The intuition behind the convergence is that $\frac{d}{dθ_1}J(θ_1)$ approaches 0 as we approach the bottom of our convex function. At the minimum, the derivative will always be 0 and thus we get:</p>
<script type="math/tex; mode=display">θ_1 := θ_1 − α∗0</script><p><img src="58AEE7338D406DE791E8988219FDF2B1.png" alt="Screen Shot 2018-03-03 at 01.01.10.png"></p>
<h4 id="Gradient-Descent-For-Linear-Regression"><a href="#Gradient-Descent-For-Linear-Regression" class="headerlink" title="Gradient Descent For Linear Regression"></a>Gradient Descent For Linear Regression</h4><p>When specifically applied to the case of linear regression, a new form of the gradient descent equation can be derived. We can substitute our actual cost function and our actual hypothesis function and modify the equation to :</p>
<p><img src="CE6A744E834E867DE89D0EA6548C3E66.jpg" alt="IMG_0190.jpg"></p>
<p>repeat until convergence:{</p>
<script type="math/tex; mode=display">
\begin{align*}
& θ_0:=θ_0−α\frac{1}{m}\sum_{i=1}^m(h_θ(x_i)−y_i) \\
& θ_1:=θ_1−α\frac{1}{m}\sum_{i=1}^m((h_θ(x_i)−y_i)x_i)
\end{align*}</script><p>}</p>
<p>where m is the size of the training set, $θ_0$ a constant that will be changing simultaneously with θ1 and xi,yiare values of the given training set (data).</p>
<p>Note that we have separated out the two cases for $θ_j$ into separate equations for $θ_0$ and $θ_1$; and that for $θ_1$ we are multiplying $x_i$ at the end due to the derivative. The following is a derivation of $\frac{∂}{∂θ_j}J(θ)$ for a single example :</p>
<p><img src="0AED35D9138656BDC56EE48C6C54D3EB.png" alt="Screen Shot 2018-03-03 at 09.20.14.png"></p>
<p>The point of all this is that if we start with a guess for our hypothesis and then repeatedly apply these gradient descent equations, our hypothesis will become more and more accurate.</p>
<p>So, this is simply gradient descent on the original cost function J. This method looks at every example in the entire training set on every step, and is called batch gradient descent. <strong>Note that, while gradient descent can be susceptible to local minima in general, the optimization problem we have posed here for linear regression has only one global, and no other local, optima</strong>; thus gradient descent always converges (assuming the learning rate α is not too large) to the global minimum. Indeed, J is a convex quadratic function. Here is an example of gradient descent as it is run to minimize a quadratic function.</p>
<p><img src="2F314BD45E00D357E83159E93263B7A7.png" alt="Screen Shot 2018-03-03 at 09.35.27.png"></p>
<p>The ellipses shown above are the contours of a quadratic function. Also shown is the trajectory taken by gradient descent, which was initialized at (48,30). The x’s in the figure (joined by straight lines) mark the successive values of θ that gradient descent went through as it converged to its minimum.</p>
<h3 id="Matrices-and-Vectors"><a href="#Matrices-and-Vectors" class="headerlink" title="Matrices and Vectors"></a>Matrices and Vectors</h3><p>Matrices are 2-dimensional arrays:</p>
<script type="math/tex; mode=display">
\begin{pmatrix}
a & b & c \\
d & e & f \\
g & h & i \\
j & k & l \\
\end{pmatrix}</script><p>The above matrix has four rows and three columns, so it is a 4 x 3 matrix.</p>
<p>A vector is a matrix with one column and many rows:</p>
<script type="math/tex; mode=display">
\begin{bmatrix}
a \\
b \\
c \\
d \\
e \\
\end{bmatrix}</script><p>So vectors are a subset of matrices. The above vector is a 4 x 1 matrix.</p>
<p>Notation and terms:</p>
<ul>
<li>$A_{ij}$ refers to the element in the ith row and jth column of matrix A.</li>
<li>A vector with ‘n’ rows is referred to as an ‘n’-dimensional vector.</li>
<li>$v_i$ refers to the element in the ith row of the vector.<br>In general, all our vectors and matrices will be 1-indexed. Note that for some programming languages, the arrays are 0-indexed.</li>
<li>Matrices are usually denoted by uppercase names while vectors are lowercase.</li>
<li>“Scalar” means that an object is a single value, not a vector or matrix.</li>
<li>ℝ refers to the set of scalar real numbers.</li>
<li>ℝ𝕟 refers to the set of n-dimensional vectors of real numbers.</li>
</ul>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% The ; denotes we are going back to a new row.</span></span><br><span class="line">A = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>; <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>; <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>; <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">% Initialize a vector </span></span><br><span class="line">v = [<span class="number">1</span>;<span class="number">2</span>;<span class="number">3</span>] </span><br><span class="line"></span><br><span class="line"><span class="comment">% Get the dimension of the matrix A where m = rows and n = columns</span></span><br><span class="line">[m,n] = <span class="built_in">size</span>(A)</span><br><span class="line"></span><br><span class="line"><span class="comment">% You could also store it this way</span></span><br><span class="line">dim_A = <span class="built_in">size</span>(A)</span><br><span class="line"></span><br><span class="line"><span class="comment">% Get the dimension of the vector v </span></span><br><span class="line">dim_v = <span class="built_in">size</span>(v)</span><br><span class="line"></span><br><span class="line"><span class="comment">% Now let's index into the 2nd row 3rd column of matrix A</span></span><br><span class="line">A_23 = A(<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<h4 id="Addition-and-Scalar-Multiplication"><a href="#Addition-and-Scalar-Multiplication" class="headerlink" title="Addition and Scalar Multiplication"></a>Addition and Scalar Multiplication</h4><p>Addition and subtraction are element-wise, so you simply add or subtract each corresponding element:</p>
<script type="math/tex; mode=display">
\begin{equation}
\begin{bmatrix}
a & b  \\
c & d  \\
\end{bmatrix} + \begin{bmatrix}
w & x  \\
y & z  \\
\end{bmatrix} = \begin{bmatrix}
a+w & b+x  \\
c+y & d+z  \\
\end{bmatrix} 
\end{equation}</script><p>Subtracting Matrices:</p>
<script type="math/tex; mode=display">
\begin{equation}
\begin{bmatrix}
a & b  \\
c & d  \\
\end{bmatrix} - \begin{bmatrix}
w & x  \\
y & z  \\
\end{bmatrix} = \begin{bmatrix}
a-w & b-x  \\
c-y & d-z  \\
\end{bmatrix} 
\end{equation}</script><p>To add or subtract two matrices, their dimensions must be the same.</p>
<p>In scalar multiplication, we simply multiply every element by the scalar value:</p>
<script type="math/tex; mode=display">
\begin{equation}
\begin{bmatrix}
a & b  \\
c & d  \\
\end{bmatrix} * x = \begin{bmatrix}
a*x & b*x  \\
c*x & d*x  \\
\end{bmatrix} 
\end{equation}</script><p>In scalar division, we simply divide every element by the scalar value:</p>
<script type="math/tex; mode=display">
\begin{equation}
\begin{bmatrix}
a & b  \\
c & d  \\
\end{bmatrix} / x = \begin{bmatrix}
a/x & b/x  \\
c/x & d/x  \\
\end{bmatrix} 
\end{equation}</script><p>Experiment below with the Octave/Matlab commands for matrix addition and scalar multiplication. Feel free to try out different commands. Try to write out your answers for each command before running the cell below.</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% Initialize matrix A and B </span></span><br><span class="line">A = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>; <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line">B = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">% Initialize constant s </span></span><br><span class="line">s = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% See how element-wise addition works</span></span><br><span class="line">add_AB = A + B </span><br><span class="line"></span><br><span class="line"><span class="comment">% See how element-wise subtraction works</span></span><br><span class="line">sub_AB = A - B</span><br><span class="line"></span><br><span class="line"><span class="comment">% See how scalar multiplication works</span></span><br><span class="line">mult_As = A * s</span><br><span class="line"></span><br><span class="line"><span class="comment">% Divide A by s</span></span><br><span class="line">div_As = A / s</span><br><span class="line"></span><br><span class="line"><span class="comment">% What happens if we have a Matrix + scalar?</span></span><br><span class="line">add_As = A + s</span><br></pre></td></tr></table></figure>
<h4 id="Matrix-Vector-Multiplication"><a href="#Matrix-Vector-Multiplication" class="headerlink" title="Matrix-Vector Multiplication"></a>Matrix-Vector Multiplication</h4><script type="math/tex; mode=display">
\begin{equation}
\begin{bmatrix}
a & b\\
c & d\\
e & f\\
\end{bmatrix} *\begin{bmatrix}
x \\
y \\
\end{bmatrix} = \begin{bmatrix}
a*x & b*y\\
c*x & d*y\\
e*x & f*y\\
\end{bmatrix}
\end{equation}</script><p>Below is an example of a matrix-vector multiplication. Make sure you understand how the multiplication works. Feel free to try different matrix-vector multiplications.</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% Initialize matrix A </span></span><br><span class="line">A = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>; <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>] </span><br><span class="line"></span><br><span class="line"><span class="comment">% Initialize vector v </span></span><br><span class="line">v = [<span class="number">1</span>; <span class="number">1</span>; <span class="number">1</span>] </span><br><span class="line"></span><br><span class="line"><span class="comment">% Multiply A * v</span></span><br><span class="line">Av = A * v</span><br></pre></td></tr></table></figure>
<h4 id="Matrix-Matrix-Multiplication"><a href="#Matrix-Matrix-Multiplication" class="headerlink" title="Matrix-Matrix Multiplication"></a>Matrix-Matrix Multiplication</h4><p>We multiply two matrices by breaking it into several vector multiplications and concatenating the result.</p>
<script type="math/tex; mode=display">
\begin{equation}
\begin{bmatrix}
a & b\\
c & d\\
e & f\\
\end{bmatrix} *\begin{bmatrix}
w & x \\
y & z \\
\end{bmatrix} = \begin{bmatrix}
a∗w+b∗y & a∗x+b∗z \\
c∗w+d∗y & c∗x+d∗z \\
e∗w+f∗y & e∗x+f∗z \\
\end{bmatrix}
\end{equation}</script><p>An m x n matrix multiplied by an n x o matrix results in an m x o matrix. In the above example, a 3 x 2 matrix times a 2 x 2 matrix resulted in a 3 x 2 matrix.</p>
<p>To multiply two matrices, the number of columns of the first matrix must equal the number of rows of the second matrix.</p>
<p>For example:<br><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% Initialize a 3 by 2 matrix </span></span><br><span class="line">A = [<span class="number">1</span>, <span class="number">2</span>; <span class="number">3</span>, <span class="number">4</span>;<span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">% Initialize a 2 by 1 matrix </span></span><br><span class="line">B = [<span class="number">1</span>; <span class="number">2</span>] </span><br><span class="line"></span><br><span class="line"><span class="comment">% We expect a resulting matrix of (3 by 2)*(2 by 1) = (3 by 1) </span></span><br><span class="line">mult_AB = A*B</span><br><span class="line"></span><br><span class="line"><span class="comment">% Make sure you understand why we got that result</span></span><br></pre></td></tr></table></figure></p>
<h4 id="Matrix-Multiplication-Properties"><a href="#Matrix-Multiplication-Properties" class="headerlink" title="Matrix Multiplication Properties"></a>Matrix Multiplication Properties</h4><ul>
<li>Matrices are not commutative: A∗B≠B∗A</li>
<li>Matrices are associative: (A∗B)∗C=A∗(B∗C)</li>
</ul>
<p>The identity matrix, when multiplied by any matrix of the same dimensions, results in the original matrix. It’s just like multiplying numbers by 1. The identity matrix simply has 1’s on the diagonal (upper left to lower right diagonal) and 0’s elsewhere.</p>
<script type="math/tex; mode=display">
\begin{bmatrix}
1 & 0 & 0 \\
0 & 1 & 0 \\
0 & 0 & 1 \\
\end{bmatrix}</script><p>When multiplying the identity matrix after some matrix (A∗I), the square identity matrix’s dimension should match the other matrix’s columns. When multiplying the identity matrix before some other matrix (I∗A), the square identity matrix’s dimension should match the other matrix’s rows.</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% Initialize random matrices A and B </span></span><br><span class="line">A = [<span class="number">1</span>,<span class="number">2</span>;<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">B = [<span class="number">1</span>,<span class="number">1</span>;<span class="number">0</span>,<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">% Initialize a 2 by 2 identity matrix</span></span><br><span class="line">I = <span class="built_in">eye</span>(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">% The above notation is the same as I = [1,0;0,1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% What happens when we multiply I*A ? </span></span><br><span class="line">IA = I*A </span><br><span class="line"></span><br><span class="line"><span class="comment">% How about A*I ? </span></span><br><span class="line">AI = A*I </span><br><span class="line"></span><br><span class="line"><span class="comment">% Compute A*B </span></span><br><span class="line">AB = A*B </span><br><span class="line"></span><br><span class="line"><span class="comment">% Is it equal to B*A? </span></span><br><span class="line">BA = B*A </span><br><span class="line"></span><br><span class="line"><span class="comment">% Note that IA = AI but AB != BA</span></span><br></pre></td></tr></table></figure>
<h4 id="Inverse-and-Transpose"><a href="#Inverse-and-Transpose" class="headerlink" title="Inverse and Transpose"></a>Inverse and Transpose</h4><script type="math/tex; mode=display">
\begin{equation}
A = \begin{bmatrix}
a & b\\
c & d\\
e & f\\
\end{bmatrix}
\end{equation}</script><p>In other words:</p>
<script type="math/tex; mode=display">A_{ij}=A^T_{ji}</script><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% Initialize matrix A </span></span><br><span class="line">A = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>;<span class="number">0</span>,<span class="number">5</span>,<span class="number">6</span>;<span class="number">7</span>,<span class="number">0</span>,<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">% Transpose A </span></span><br><span class="line">A_trans = A' </span><br><span class="line"></span><br><span class="line"><span class="comment">% Take the inverse of A </span></span><br><span class="line">A_inv = inv(A)</span><br><span class="line"></span><br><span class="line"><span class="comment">% What is A^(-1)*A? </span></span><br><span class="line">A_invA = inv(A)*A</span><br></pre></td></tr></table></figure>
<h3 id="multivariate-Linear-Analytically"><a href="#multivariate-Linear-Analytically" class="headerlink" title="multivariate Linear Analytically"></a>multivariate Linear Analytically</h3><h4 id="Multiple-Features"><a href="#Multiple-Features" class="headerlink" title="Multiple Features"></a>Multiple Features</h4><p>Linear regression with multiple variables is also known as “multivariate linear regression”.</p>
<p>We now introduce notation for equations where we can have any number of input variables.</p>
<ul>
<li>$x^{(i)}_j$ = value of feature j in the $i^{th}$ training example</li>
<li>$x^{(i)}$ =the input (features) of the $i^{th}$ training example</li>
<li>m = the number of training examples</li>
<li>n = the number of features</li>
</ul>
<p>The multivariable form of the hypothesis function accommodating these multiple features is as follows:</p>
<script type="math/tex; mode=display">h_θ(x)=θ_0+θ_1x1+θ_2x_2+θ_3x_3+\cdots+θ_nx_n</script><p>In order to develop intuition about this function, we can think about θ0 as the basic price of a house, θ1 as the price per square meter, θ2 as the price per floor, etc. x1 will be the number of square meters in the house, x2 the number of floors, etc.</p>
<p>Using the definition of matrix multiplication, our multivariable hypothesis function can be concisely represented as:</p>
<script type="math/tex; mode=display">
\begin{equation}
h_θ(x) = \left[ \begin{array}{ccc} 
θ_0 & θ_1 & \cdots & θ_n
\end{array} \right] \left[ \begin{array}{ccc} 
θ_0 \\ θ_1 \\ \vdots \\ θ_n
\end{array} \right] = θ^Tx
\end{equation}</script><p>This is a vectorization of our hypothesis function for one training example; see the lessons on vectorization to learn more.</p>
<p>Remark: Note that for convenience reasons in this course we assume $x^{(i)}_0=1$ for (i∈1,…,m). This allows us to do matrix operations with theta and x. Hence making the two vectors ‘θ’ and $x^{(i)}$ match each other element-wise (that is, have the same number of elements: n+1).]</p>
<h3 id="Gradient-Descent-For-Multiple-Variables"><a href="#Gradient-Descent-For-Multiple-Variables" class="headerlink" title="Gradient Descent For Multiple Variables"></a>Gradient Descent For Multiple Variables</h3><p>The gradient descent equation itself is generally the same form; we just have to repeat it for our ‘n’ features:</p>
<p>repeat until convergence:{</p>
<script type="math/tex; mode=display">
\begin{align*}
& θ_0:=θ_0−α\frac{1}{m}\sum_{i=1}^m(h_θ(x^{(i)})−y^{(i)})
\cdot{x^{(i)}_0}\\
& θ_1:=θ_1−α\frac{1}{m}\sum_{i=1}^m(h_θ(x^{(i)})−y^{(i)})
\cdot{x^{(i)}_1}\\
& θ_2:=θ_2−α\frac{1}{m}\sum_{i=1}^m(h_θ(x^{(i)})−y^{(i)})
\cdot{x^{(i)}_2}\\
& \cdots
\end{align*}</script><p>}</p>
<p>In other words:</p>
<p>repeat until convergence: {</p>
<script type="math/tex; mode=display">
θ_j:=θ_0−α\frac{1}{m}\sum_{i=1}^m(h_θ(x^{(i)})−y^{(i)})
\cdot{x^{(i)}_j}  \qquad for\ j := 0\cdots n</script><p>}</p>
<p>The following image compares gradient descent with one variable to gradient descent with multiple variables:</p>
<p><img src="967C382ACA6C581216B78D3670F812B6.png" alt="Screen Shot 2018-03-04 at 18.10.50.png"></p>
<h4 id="Gradient-Descent-in-Practice-I-Feature-Scaling"><a href="#Gradient-Descent-in-Practice-I-Feature-Scaling" class="headerlink" title="Gradient Descent in Practice I - Feature Scaling"></a>Gradient Descent in Practice I - Feature Scaling</h4><p>We can <strong>speed up</strong> gradient descent by having each of our input values in roughly the same range. This is because θ will descend quickly on small ranges and slowly on large ranges, and so will oscillate inefficiently down to the optimum when the variables are very uneven.</p>
<p>The way to prevent this is to modify the ranges of our input variables so that they are all roughly the same. Ideally:</p>
<script type="math/tex; mode=display">−1 ≤ x_{(i)} ≤ 1</script><p>or</p>
<script type="math/tex; mode=display">−0.5 ≤ x_{(i)} ≤ 0.5</script><p>These aren’t exact requirements; we are only trying to speed things up. The goal is to get all input variables into roughly one of these ranges, give or take a few.</p>
<p>Two techniques to help with this are feature scaling and mean normalization. Feature scaling involves dividing the input values by the range (i.e. the maximum value minus the minimum value) of the input variable, resulting in a new range of just 1. Mean normalization involves subtracting the average value for an input variable from the values for that input variable resulting in a new average value for the input variable of just zero. To implement both of these techniques, adjust your input values as shown in this formula:</p>
<script type="math/tex; mode=display">x_i:=\frac{x_i−μ_i}{si}</script><p>Where μi is the average of all the values for feature (i) and si is the range of values (max - min), or si is the standard deviation.</p>
<p>For example, if xi represents housing prices with a range of 100 to 2000 and a mean value of 1000, then, $x_i:=\frac{price−1000}{1900}$.</p>
<h4 id="Gradient-Descent-in-Practice-II-Learning-Rate"><a href="#Gradient-Descent-in-Practice-II-Learning-Rate" class="headerlink" title="Gradient Descent in Practice II - Learning Rate"></a>Gradient Descent in Practice II - Learning Rate</h4><p><strong>Debugging gradient descent.</strong> Make a plot with number of iterations on the x-axis. Now plot the cost function, $J_{(θ)}$ over the number of iterations of gradient descent. If $J_{(θ)}$ ever increases, then you probably need to decrease α.</p>
<p><strong>Automatic convergence test.</strong> Declare convergence if $J_{(θ)}$ decreases by less than E in one iteration, where E is some small value such as 10−3. However in practice it’s difficult to choose this threshold value.</p>
<p><img src="4EE8460134CEE8A6DB707B15130E319D.png" alt="Screen Shot 2018-03-04 at 18.28.02.png"></p>
<p>It has been proven that if learning rate α is sufficiently small, then $J_{(θ)}$ will decrease on every iteration.</p>
<p><img src="5535482800A11123D2C86C38B1B51A95.png" alt="Screen Shot 2018-03-04 at 18.28.12.png"></p>
<p>To summarize:</p>
<ul>
<li>If α is too small: slow convergence.</li>
<li>If α is too large: may not decrease on every iteration and thus may not converge.</li>
</ul>
<h3 id="Features-and-Polynomial-Regression"><a href="#Features-and-Polynomial-Regression" class="headerlink" title="Features and Polynomial Regression"></a>Features and Polynomial Regression</h3><p>We can improve our features and the form of our hypothesis function in a couple different ways.</p>
<p>We can combine multiple features into one. For example, we can combine $x_1$ and $x_2$ into a new feature x3 by taking $x_1⋅x_2$.</p>
<p>Polynomial Regression</p>
<p>Our hypothesis function need not be linear (a straight line) if that does not fit the data well.</p>
<p>We can change the behavior or curve of our hypothesis function by making it a quadratic, cubic or square root function (or any other form).</p>
<p>For example, if our hypothesis function is $h_θ(x)=θ_0+θ_1x_1$ then we can create additional features based on x1, to get the quadratic function $h_θ(x)=θ_0+θ_1x_1+θ_2x^2_1$ or the cubic function $hθ(x)=θ_0+θ_1x_1+θ_2x^2_1+θ_3x^3_1$<br>In the cubic version, we have created new features $x_2$ and $x_3$ where $x_2=x^2_1$ and $x_3=x^3_1$.</p>
<p>To make it a square root function, we could do: $h_θ(x)=θ_0+θ_1x_1+θ_2\sqrt{x_1}$<br>One important thing to keep in mind is, if you choose your features this way then feature scaling becomes very important.</p>
<p>eg. if $x_1$ has range 1 - 1000 then range of $x^2_1$ becomes 1 - 1000000 and that of $x^3_1$ becomes 1 - 1000000000</p>
<h3 id="Normal-Equation"><a href="#Normal-Equation" class="headerlink" title="Normal Equation"></a>Normal Equation</h3><p>Gradient descent gives one way of minimizing J. Let’s discuss a second way of doing so, this time performing the minimization explicitly and without resorting to an iterative algorithm. In the “Normal Equation” method, we will minimize J by explicitly taking its derivatives with respect to the θj ’s, and setting them to zero. This allows us to find the optimum theta without iteration. The normal equation formula is given below: </p>
<script type="math/tex; mode=display">θ=(X^TX)^{−1}X^Ty</script><p><img src="F151CAAF5D1B34778F47215044582101.png" alt="Screen Shot 2018-03-04 at 18.43.29.png"></p>
<p>There is <strong>no need</strong> to do feature scaling with the normal equation.</p>
<p>The following is a comparison of gradient descent and the normal equation:<br>|Gradient Descent|Normal Equation|<br>|:—-|:—-|<br>|Need to choose alpha| No need to choose alpha|<br>|Needs many iterations| No need to iterate|<br>|$O(kn^2)$|$O(n^3)$ | need to calculate inverse of $X^TX$|<br>|Works well when n is large|Slow if n is very large|</p>
<p>With the normal equation, computing the inversion has complexity $O(n^3)$. So if we have a very large number of features, the normal equation will be slow. In practice, when n exceeds 10,000 it might be a good time to go from a normal solution to an iterative process.</p>
<h4 id="Normal-Equation-Noninvertibility"><a href="#Normal-Equation-Noninvertibility" class="headerlink" title="Normal Equation Noninvertibility"></a>Normal Equation Noninvertibility</h4><p>When implementing the normal equation in octave we want to use the ‘pinv’ function rather than ‘inv.’ The ‘pinv’ function will give you a value of θ even if $X^TX$ is not invertible.</p>
<p>If $X^TX$ is noninvertible, the common causes might be having :</p>
<ul>
<li>Redundant features, where two features are very closely related (i.e. they are linearly dependent)</li>
<li>Too many features (e.g. m ≤ n). In this case, delete some features or use “regularization” (to be explained in a later lesson).</li>
</ul>
<p>Solutions to the above problems include deleting a feature that is linearly dependent with another or deleting one or more features when there are too many features.</p>
<h2 id="Logistic-Regression"><a href="#Logistic-Regression" class="headerlink" title="Logistic Regression"></a>Logistic Regression</h2><h3 id="Classification"><a href="#Classification" class="headerlink" title="Classification"></a>Classification</h3><p>To attempt classification, one method is to use linear regression and map all predictions greater than 0.5 as a 1 and all less than 0.5 as a 0. However, this method doesn’t work well because classification is not actually a linear function.</p>
<p>The classification problem is just like the regression problem, except that the values we now want to predict take on only a small number of discrete values. For now, we will focus on the binary classification problem in which y can take on only two values, 0 and 1. (Most of what we say here will also generalize to the multiple-class case.) For instance, if we are trying to build a spam classifier for email, then $x^{(i)}$ may be some features of a piece of email, and y may be 1 if it is a piece of spam mail, and 0 otherwise. Hence, y∈{0,1}. 0 is also called the negative class, and 1 the positive class, and they are sometimes also denoted by the symbols “-” and “+.” Given $x^{(i)}$, the corresponding $y^{(i)}$ is also called the label for the training example.</p>
<h3 id="Hypothesis-Representation"><a href="#Hypothesis-Representation" class="headerlink" title="Hypothesis Representation"></a>Hypothesis Representation</h3><p>We could approach the classification problem ignoring the fact that y is discrete-valued, and use our old linear regression algorithm to try to predict y given x. However, it is easy to construct examples where this method performs very poorly. Intuitively, it also doesn’t make sense for hθ(x) to take values larger than 1 or smaller than 0 when we know that y ∈ {0, 1}. To fix this, let’s change the form for our hypotheses $h_θ(x)$ to satisfy $0≤h_θ(x)≤1$. This is accomplished by plugging $θ^Tx$ into the Logistic Function.</p>
<p>Our new form uses the “Sigmoid Function,” also called the “Logistic Function”:</p>
<script type="math/tex; mode=display">
\begin{align*}
& h_θ(x)=g(θ^Tx) \\
& z=θ^Tx \\
& g(z)=\frac{1}{1+e^{−z}} \\
\end{align*}</script><p>The following image shows us what the sigmoid function looks like:</p>
<p><img src="2FDA75AB6E8B1CBDC483FA3E6EF1A733.png" alt="Screen Shot 2018-03-04 at 21.58.35.png"></p>
<p>The function g(z), shown here, maps any real number to the (0, 1) interval, making it useful for transforming an arbitrary-valued function into a function better suited for classification.</p>
<p>hθ(x) will give us the probability that our output is 1. For example, $h_θ(x)=0.7$ gives us a probability of 70% that our output is 1. Our probability that our prediction is 0 is just the complement of our probability that it is 1 (e.g. if probability that it is 1 is 70%, then the probability that it is 0 is 30%).</p>
<script type="math/tex; mode=display">
\begin{align*}
& h_θ(x)=P(y=1|x;θ)=1−P(y=0|x;θ)\\
& P(y=0|x;θ)+P(y=1|x;θ)=1
\end{align*}</script><h3 id="Decision-Boundary"><a href="#Decision-Boundary" class="headerlink" title="Decision Boundary"></a>Decision Boundary</h3><p>In order to get our discrete 0 or 1 classification, we can translate the output of the hypothesis function as follows:</p>
<script type="math/tex; mode=display">
\begin{align*}
& hθ(x)≥0.5 \rightarrow y=1 \\
& hθ(x)<0.5 \rightarrow y=0
\end{align*}</script><p>The way our logistic function g behaves is that when its input is greater than or equal to zero, its output is greater than or equal to 0.5:</p>
<script type="math/tex; mode=display">
\begin{align*}
& g(z) \ge 0.5 \\
& when \ z \ge 0 \\
\end{align*}</script><p>Remember.</p>
<script type="math/tex; mode=display">
\begin{align*}
& z=0,e^0=1 \Rightarrow g(z) = \frac{1}{2} \\
& z \rightarrow \infty,e^{−\infty}→0 \Rightarrow g(z)=1 \\
& z \rightarrow −\infty,e^{\infty} \rightarrow \infty \Rightarrow g(z)=0 \\
\end{align*}</script><p>Again, the input to the sigmoid function g(z) (e.g. θTX) <strong>doesn’t need to be linear</strong>, and could be a function that describes a circle (e.g. $z=θ_0+θ_1x_2^1+θ_2x_2^2$) or any shape to fit our data.</p>
<h3 id="Cost-Function-1"><a href="#Cost-Function-1" class="headerlink" title="Cost Function"></a>Cost Function</h3><p>We cannot use the same cost function that we use for linear regression because the Logistic Function will cause the output to be wavy, causing many local optima. In other words, it will not be a convex function.</p>
<p>Instead, our cost function for logistic regression looks like:</p>
<script type="math/tex; mode=display">
\begin{align*}
& J(\theta) = \frac{1}{m}\sum_{i=1}^{m}Cost(h_\theta(x^{(i)}),y^{(i)}) \\
& Cost(hθ(x),y)=−log(h_θ(x)) & \qquad if\ y = 1 \\
& Cost(hθ(x),y)=−log(1−h_θ(x)) & \qquad if\ y = 0 \\
\end{align*}</script><p>When y = 1, we get the following plot for $J(θ)$ vs $h_θ(x)$:</p>
<p><img src="646B1BAA40FE5FDF8DCE1C19C7FAD0D9.png" alt="Screen Shot 2018-03-05 at 16.30.57.png"></p>
<p>Similarly, when y = 0, we get the following plot for $J(θ)$ vs $h_θ(x)$:</p>
<p><img src="FB72818E064A195140A5412097BB5B83.png" alt="Screen Shot 2018-03-05 at 16.31.25.png"></p>
<p>If our correct answer ‘y’ is 0, then the cost function will be 0 if our hypothesis function also outputs 0. If our hypothesis approaches 1, then the cost function will approach infinity.</p>
<p>If our correct answer ‘y’ is 1, then the cost function will be 0 if our hypothesis function outputs 1. If our hypothesis approaches 0, then the cost function will approach infinity.</p>
<p><img src="7C227E67AE2C20B141CD3F4B9D3A7A77.png" alt="Screen Shot 2018-03-05 at 16.38.30.png"></p>
<p><strong>Note that writing the cost function in this way guarantees that J(θ) is convex for logistic regression.</strong></p>
<h3 id="Simplified-Cost-Function-and-Gradient-Descent"><a href="#Simplified-Cost-Function-and-Gradient-Descent" class="headerlink" title="Simplified Cost Function and Gradient Descent"></a>Simplified Cost Function and Gradient Descent</h3><p>We can compress our cost function’s two conditional cases into one case:</p>
<script type="math/tex; mode=display">Cost(h_θ(x),y)=−ylog(h_θ(x))−(1−y)log(1−h_θ(x))</script><p>Notice that when y is equal to 1, then the second term $(1−y)log(1−h_θ(x))$ will be zero and will not affect the result. If y is equal to 0, then the first term $−ylog(h_θ(x))$ will be zero and will not affect the result.</p>
<p>We can fully write out our entire cost function as follows:</p>
<script type="math/tex; mode=display">J(θ)=−\frac{1}{m}\sum_{i=1}^{m}[y^{(i)}log(h_θ(x^{(i)}))+(1−y^{(i)})log(1−h_θ(x^{(i)}))]</script><h4 id="Gradient-Descent-1"><a href="#Gradient-Descent-1" class="headerlink" title="Gradient Descent"></a>Gradient Descent</h4><p>Remember that the general form of gradient descent is:</p>
<script type="math/tex; mode=display">Repeat \left\{
\theta_i := \theta_j - \alpha\frac{\partial}{\partial\theta_j}J(\theta)\right\}</script><p>We can work out the derivative part using calculus to get:</p>
<script type="math/tex; mode=display">Repeat \left\{
\theta_i := \theta_j - \frac{\alpha}{m}\sum^m_{i=1}(h_\theta(x^{(i)})-y^{(i)})x_j^{(i)}
\right\}</script><h3 id="Multiclass-Classification-One-vs-all"><a href="#Multiclass-Classification-One-vs-all" class="headerlink" title="Multiclass Classification: One-vs-all"></a>Multiclass Classification: One-vs-all</h3><p>Now we will approach the classification of data when we have more than two categories. Instead of y = {0,1} we will expand our definition so that y = {0,1…n}.</p>
<p>Since y = {0,1…n}, we divide our problem into n+1 (+1 because the index starts at 0) binary classification problems; in each one, we predict the probability that ‘y’ is a member of one of our classes.</p>
<script type="math/tex; mode=display">
\begin{align*}
&y \in \left\{0,1...n\right\} \\
&h^{(0)}_θ(x)=P(y=0|x;θ) \\
& h^{(1)}_θ(x)=P(y=1|x;θ) \\
& \cdots \\
& h^{(n)}_θ(x)=P(y=n|x;θ) \\
& prediction = \max\limits_{i}(h^{(i)}_θ(x))
\end{align*}</script><p>We are basically choosing one class and then lumping all the others into a single second class. We do this repeatedly, applying binary logistic regression to each case, and then use the hypothesis that returned the highest value as our prediction.</p>
<p>The following image shows how one could classify 3 classes:</p>
<p><img src="BBF9A94F6DBB2A31F5ED6998975550F4.png" alt="Screen Shot 2018-03-05 at 16.59.52.png"></p>
<p>To summarize:<br>Train a logistic regression classifier $h_θ(x)$ for each class to predict the probability that y = i, To make a prediction on a new x, pick the class that maximizes $h_θ(x)$.</p>
<h3 id="Solving-the-problem-of-Overfitting"><a href="#Solving-the-problem-of-Overfitting" class="headerlink" title="Solving the problem of Overfitting"></a>Solving the problem of Overfitting</h3><h4 id="The-Problem-of-Overfitting"><a href="#The-Problem-of-Overfitting" class="headerlink" title="The Problem of Overfitting"></a>The Problem of Overfitting</h4><p>Consider the problem of predicting y from $x \in R$. The leftmost figure below shows the result of fitting a $y = θ_0+θ_1x$ to a dataset. We see that the data doesn’t really lie on straight line, and so the fit is not very good.</p>
<p><img src="C88419E9C1B6C95CDBB8BBCF11D141CD.png" alt="Screen Shot 2018-03-05 at 17.05.11.png"></p>
<p>Instead, if we had added an extra feature $x_2$ , and fit $y=θ_0+θ_1x+θ_2x_2$ , then we obtain a slightly better fit to the data (See middle figure). Naively, it might seem that the more features we add, the better. However, there is also a danger in adding too many features: The rightmost figure is the result of fitting a 5th order polynomial $y=\sum^5_{j=0}θ_jx_j$. We see that even though the fitted curve passes through the data perfectly, we would not expect this to be a very good predictor of, say, housing prices (y) for different living areas (x). Without formally defining what these terms mean, we’ll say the figure on the left shows an instance of underfitting—in which the data clearly shows structure not captured by the model—and the figure on the right is an example of overfitting.</p>
<ul>
<li><strong>Underfitting</strong>, or <strong>high bias</strong>, is when the form of our hypothesis function h maps poorly to the trend of the data. It is usually caused by a function that is too simple or uses too few features. </li>
<li><strong>Overfitting</strong>, or <strong>high variance</strong>, is caused by a hypothesis function that fits the available data but does not generalize well to predict new data. It is usually caused by a complicated function that creates a lot of unnecessary curves and angles unrelated to the data.</li>
</ul>
<p>This terminology is applied to both linear and logistic regression. There are two main options to <strong>address the issue of overfitting</strong>:</p>
<ul>
<li>Reduce the number of features:<ul>
<li>Manually select which features to keep.</li>
<li>Use a model selection algorithm (studied later in the course).</li>
</ul>
</li>
<li>Regularization<ul>
<li>Keep all the features, but reduce the magnitude of parameters $θ_j$.</li>
<li><strong>Regularization works well when we have a lot of slightly useful features.</strong></li>
</ul>
</li>
</ul>
<h4 id="Cost-Function-2"><a href="#Cost-Function-2" class="headerlink" title="Cost Function"></a>Cost Function</h4><p>If we have overfitting from our hypothesis function, we can reduce the weight that some of the terms in our function carry by increasing their cost.</p>
<p>Say we wanted to make the following function more quadratic:</p>
<script type="math/tex; mode=display">θ_0+θ_1x+θ_2x_2+θ_3x_3+θ_4x_4</script><p>We’ll want to eliminate the influence of $θ_3x_3$ and $θ_4x_4$ . Without actually getting rid of these features or changing the form of our hypothesis, we can instead modify our <strong>cost function</strong>:</p>
<script type="math/tex; mode=display">min_θ\frac{1}{2m}\sum^m_{i=1}(h_θ(x^{(i)})−y^{(i)})^2+1000\cdotθ^2_3+1000\cdotθ^2_4</script><p>We’ve added two extra terms at the end to inflate the cost of $θ_3$ and $θ_4$. Now, in order for the cost function to get close to zero, we will have to reduce the values of $θ_3$ and $θ_4$ to near zero. This will in turn greatly reduce the values of $θ_3x^3$ and $θ_4x^4$ in our hypothesis function. As a result, we see that the new hypothesis (depicted by the pink curve) looks like a quadratic function but fits the data better due to the extra small terms $θ_3x^3$ and $θ_4x^4$.</p>
<p><img src="20175FD6A28276C76BE10BFB5E984336.png" alt="Screen Shot 2018-03-05 at 17.50.15.png"></p>
<p>We could also regularize all of our theta parameters in a single summation as:</p>
<script type="math/tex; mode=display">min_θ\frac{1}{2m}\left[\sum^m_{i=1}(h_θ(x^{(i)})−y^{(i)})^2+\lambda\sum_{j=1}^{n}\theta_j^2\right]</script><p>The λ, or lambda, is the <strong>regularization parameter</strong>. It determines how much the costs of our theta parameters are inflated.</p>
<p>Using the above cost function with the extra summation, we can smooth the output of our hypothesis function to reduce overfitting. If lambda is chosen to be too large, it may smooth out the function too much and cause underfitting. Hence, what would happen if λ=0 or is too small ?</p>
<h4 id="Regularized-Linear-Regression"><a href="#Regularized-Linear-Regression" class="headerlink" title="Regularized Linear Regression"></a>Regularized Linear Regression</h4><p>We can apply regularization to both linear regression and logistic regression. We will approach linear regression first.</p>
<h5 id="Gradient-Descent-2"><a href="#Gradient-Descent-2" class="headerlink" title="Gradient Descent"></a>Gradient Descent</h5><p>We will modify our gradient descent function to separate out $θ_0$ from the rest of the parameters because we do not want to penalize $θ_0$.</p>
<p>repeat until convergence:{</p>
<script type="math/tex; mode=display">
\begin{align*}
& θ_0:=θ_0−α\frac{1}{m}\sum_{i=1}^m(h_θ(x^{(i)})−y^{(i)})x_0^{(i)} \\
& θ_j:=θ_j−α\left[\left(\frac{1}{m}\sum_{i=1}^m(h_θ(x^{(i)})−y^{(i)})x_j^{(i)}\right) + \frac{\lambda}{m}\theta_j\right]   \qquad j \in \left\{1,2...n\right\}
\end{align*}</script><p>}</p>
<p>The term $\frac{λ}{m}θ_j$ performs our regularization. With some manipulation our update rule can also be represented as:</p>
<script type="math/tex; mode=display">θ_j:=θ_j(1−α\frac{λ}{m})−α\frac{1}{m}\sum^m_{i=1}(h_θ(x^{(i)})−y^{(i)})x^{(i)}_j</script><p>The first term in the above equation,$1−α\frac{λ}{m}$ will always be less than 1. Intuitively you can see it as reducing the value of $θ_j$ by some amount on every update. Notice that the second term is now exactly the same as it was before.</p>
<h4 id="Normal-Equation-1"><a href="#Normal-Equation-1" class="headerlink" title="Normal Equation"></a>Normal Equation</h4><p>Now let’s approach regularization using the alternate method of the non-iterative normal equation.</p>
<p>To add in regularization, the equation is the same as our original, except that we add another term inside the parentheses:</p>
<script type="math/tex; mode=display">
\begin{align*}
& \theta = \left( X^TX + \lambda \cdot L\right)^{(-1)}X^Ty \\
& where \ L = 
\begin{bmatrix} 
0 & \\
  & 1 \\
  & & 1 \\
  & & & \ddots \\
  & & & & 1 \\
\end{bmatrix}
\end{align*}</script><p>L is a matrix with 0 at the top left and 1’s down the diagonal, with 0’s everywhere else. It should have dimension (n+1)×(n+1). Intuitively, this is the identity matrix (though we are not including $x_0$), multiplied with a single real number \lambda.</p>
<p>Recall that if m &lt; n, then $X^TX$ is non-invertible. However, when we add the term $\lambda \cdot l$, then $X^TX + \lambda⋅L$ becomes invertible.</p>
<h4 id="Regularized-Logistic-Regression"><a href="#Regularized-Logistic-Regression" class="headerlink" title="Regularized Logistic Regression"></a>Regularized Logistic Regression</h4><p>We can regularize logistic regression in a similar way that we regularize linear regression. As a result, we can avoid overfitting. The following image shows how the regularized function, displayed by the pink line, is less likely to overfit than the non-regularized function represented by the blue line:</p>
<p><img src="C47865D828E5712B8CF0169AF2AF3CF8.png" alt="Screen Shot 2018-03-05 at 20.01.22.png"></p>
<p>Cost Function</p>
<p>Recall that our cost function for logistic regression was:</p>
<script type="math/tex; mode=display">J(θ)=−\frac{1}{m}\sum_{i=1}^{m}[y^{(i)}log(h_θ(x^{(i)}))+(1−y^{(i)})log(1−h_θ(x^{(i)}))]</script><p>We can regularize this equation by adding a term to the end:</p>
<script type="math/tex; mode=display">J(θ)=−\frac{1}{m}\sum_{i=1}^{m}[y^{(i)}log(h_θ(x^{(i)}))+(1−y^{(i)})log(1−h_θ(x^{(i)}))] + \frac{\lambda}{2m}\sum_{j=1}^{n}\theta_j^2</script><p>he second sum,$\sum^n_{j=1}θ^2_j$ means to explicitly exclude the bias term, $θ_0$. I.e. the θ vector is indexed from 0 to n (holding n+1 values, $θ_0$ through $θ_n$), and this sum explicitly skips $θ_0$, by running from 1 to n, skipping 0. Thus, when computing the equation, we should continuously update the two following equations:</p>
<p><img src="55D75D0935FA2755B526906B7C7469E3.png" alt="Screen Shot 2018-03-05 at 22.47.16.png"></p>
<h2 id="Neural-Networks"><a href="#Neural-Networks" class="headerlink" title="Neural Networks"></a>Neural Networks</h2><h3 id="Model-Representation-1"><a href="#Model-Representation-1" class="headerlink" title="Model Representation"></a>Model Representation</h3><h4 id="Model-Representation-I"><a href="#Model-Representation-I" class="headerlink" title="Model Representation I"></a>Model Representation I</h4><p>Let’s examine how we will represent a hypothesis function using neural networks. At a very simple level, neurons are basically computational units that take inputs (<strong>dendrites</strong>) as electrical inputs (called “spikes”) that are channeled to outputs (<strong>axons</strong>). In our model, our dendrites are like the input features $x_1 \dots x_n$, and the output is the result of our hypothesis function. In this model our $x_0$ input node is sometimes called the “bias unit.” It is always equal to 1. In neural networks, we use the same logistic function as in classification, $\frac{1}{1+e^{−θ^Tx}}$, yet we sometimes call it a sigmoid (logistic) <strong>activation</strong> function. In this situation, our “theta” parameters are sometimes called “<strong>weights</strong>“.</p>
<p>Visually, a simplistic representation looks like:</p>
<script type="math/tex; mode=display">
\begin{equation}
\begin{bmatrix}
x_0\\
x_1\\
x_2\\
x_3\\
\end{bmatrix} \rightarrow\begin{bmatrix}
a_1^{(2)}\\
a_2^{(2)}\\
a_3^{(2)}\\ 
\end{bmatrix}\rightarrow h_\theta(x)
\end{equation}</script><p>The values for each of the “activation” nodes is obtained as follows:</p>
<script type="math/tex; mode=display">
\begin{align*}
& a^{(2)}_1=g(Θ^{(1)}_{10}x_0+Θ^{(1)}_{11}x_1+Θ^{(1)}_{12}x_2+Θ^{(1)}_{13}x_3) \\
& a^{(2)}_2=g(Θ^{(1)}_{20}x_0+Θ^{(1)}_{21}x_1+Θ^{(1)}_{22}x_2+Θ^{(1)}_{23}x_3) \\
& a^{(2)}_3=g(Θ^{(1)}_{30}x_0+Θ^{(1)}_{31}x_1+Θ^{(1)}_{32}x_2+Θ^{(1)}_{33}x_3) \\
& h_Θ(x)=a^{(3)}_1=g(Θ^{(2)}_{10}a^{(2)}_0+Θ^{(2)}_{11}a^{(2)}_1+Θ^{(2)}_{12}a^{(2)}_2+Θ^{(2)}_{13}a^{(2)}_3)
\end{align*}</script><p>This is saying that we compute our activation nodes by using a 3×4 matrix of parameters. We apply each row of the parameters to our inputs to obtain the value for one activation node. Our hypothesis output is the logistic function applied to the sum of the values of our activation nodes, which have been multiplied by yet another parameter matrix $Θ^{(2)}$ containing the weights for our second layer of nodes.</p>
<p>Each layer gets its own matrix of weights, $Θ^{(j)}$.</p>
<p>The dimensions of these matrices of weights is determined as follows:</p>
<p>If network has $s_j$ units in layer j and $s_{j+1}$ units in layer j+1, then $Θ^{(j)}$ will be of dimension $s_{j+1}×(s_j+1)$.</p>
<p>The +1 comes from the addition in $Θ^{(j)}$ of the “bias nodes,” $x_0$ and $Θ^{(j)}_0$. In other words the output nodes will not include the bias nodes while the inputs will. The following image summarizes our model representation:</p>
<p><img src="E393ACC2A3014435290235CA61D6B235.png" alt="Screen Shot 2018-03-05 at 23.27.21.png"></p>
<p>Example: If layer 1 has 2 input nodes and layer 2 has 4 activation nodes. Dimension of $Θ^{(1)}$ is going to be 4×3 where $s_j=2$ and $s_{j+1}=4$, so $s_{j+1}×(s_j+1)=4×3$.</p>
<h4 id="Examples-and-Intuitions-I"><a href="#Examples-and-Intuitions-I" class="headerlink" title="Examples and Intuitions I"></a>Examples and Intuitions I</h4><p>A simple example of applying neural networks is by predicting x1 AND x2, which is the logical ‘and’ operator and is only true if both x1 and x2 are 1.</p>
<p>The graph of our functions will look like:</p>
<script type="math/tex; mode=display">
\begin{equation}
\begin{bmatrix}
x_0\\
x_1\\
x_2\\
x_3\\
\end{bmatrix} \rightarrow\begin{bmatrix}
g(z^{(2)})\\
\end{bmatrix}\rightarrow h_\theta(x)
\end{equation}</script><p>Remember that x0 is our bias variable and is always 1.</p>
<p>Let’s set our first theta matrix as:</p>
<script type="math/tex; mode=display">\theta^{(1)} = \left[ -30 \quad 20 \quad 20 \right]</script><p>This will cause the output of our hypothesis to only be positive if both $x_1$ and $x_2$ are 1. In other words:</p>
<script type="math/tex; mode=display">
\begin{align*}
& hΘ(x)=g(−30+20x1+20x2)\\
& x1=0 \ and \  x2=0 \ then \ g(−30) \approx 0 \\
& x1=0 \ and \  x2=1 \ then \ g(−10) \approx 0 \\
& x1=1 \ and \  x2=0 \ then \ g(−10) \approx 0 \\
& x1=1 \ and \ x2=1 \ then \ g(10)  \approx 1 \\
\end{align*}</script><p>So we have constructed one of the fundamental operations in computers by using a small neural network rather than using an actual AND gate. Neural networks can also be used to simulate all the other logical gates. The following is an example of the logical operator ‘OR’, meaning either $x_1$ is true or $x_2$ is true, or both:</p>
<p><img src="7AE116A7537F70690A8F58ACB6F54D76.png" alt="Screen Shot 2018-03-06 at 00.16.18.png"></p>
<p><img src="E22905CF7C49F8BF1CBE158BD291C7AB.png" alt="Screen Shot 2018-03-06 at 00.16.24.png"></p>
<h4 id="Examples-and-Intuitions-II"><a href="#Examples-and-Intuitions-II" class="headerlink" title="Examples and Intuitions II"></a>Examples and Intuitions II</h4><p>The $Θ^{(1)}$ matrices for AND, NOR, and OR are:</p>
<script type="math/tex; mode=display">
\begin{align*}
& AND: & \theta^{(1)} = \left[ -30 \quad 20 \quad 20 \right] \\
& NOR: &\theta^{(1)} = \left[ 10 \quad -20 \quad -20 \right] \\
& OR:  & \theta^{(1)} = \left[ -10 \quad 20 \quad 20 \right] \\
\end{align*}</script><p>We can combine these to get the XNOR logical operator (which gives 1 if x1 and x2 are both 0 or both 1).</p>
<script type="math/tex; mode=display">
\begin{equation}
\begin{bmatrix}
x_0\\
x_1\\
x_2\\
\end{bmatrix} \rightarrow\begin{bmatrix}
a_1^{(2)}\\
a_2^{(2)}\\
\end{bmatrix}\rightarrow\begin{bmatrix}
a^{(3)}\\
\end{bmatrix} \rightarrow h_\theta(x)
\end{equation}</script><p>For the transition between the first and second layer, we’ll use a $Θ^(1)$ matrix that combines the values for AND and NOR:</p>
<script type="math/tex; mode=display">
\begin{equation}
\theta^{(1)} = \begin{bmatrix}
& -30 & 20 & 20\\
& 10 & -20 & -20\\
\end{bmatrix}
\end{equation}</script><p>For the transition between the second and third layer, we’ll use a $Θ^(2)$ matrix that uses the value for OR:</p>
<script type="math/tex; mode=display">
\begin{equation}
\theta^{(1)} = \begin{bmatrix}
& -10 & 20 & 20\\
\end{bmatrix}
\end{equation}</script><p>Let’s write out the values for all our nodes:</p>
<script type="math/tex; mode=display">
\begin{align*}
& a^{(2)}=g(Θ^{(1)}\cdot x) \\ 
& a^{(3)}=g(Θ(2)\cdot a^{(2)}) \\ 
& h_Θ^{(x)}=a^{(3)}
\end{align*}</script><p>And there we have the XNOR operator using a hidden layer with two nodes! The following summarizes the above algorithm:<br><img src="6B60EFC19A998BFE77E456054B18E0E5.png" alt="Screen Shot 2018-03-06 at 00.34.59.png"></p>
<h3 id="Multiclass-Classification"><a href="#Multiclass-Classification" class="headerlink" title="Multiclass Classification"></a>Multiclass Classification</h3><p>To classify data into multiple classes, we let our hypothesis function return a vector of values. Say we wanted to classify our data into one of four categories. We will use the following example to see how this classification is done. This algorithm takes as input an image and classifies it accordingly:</p>
<p><img src="9F39EFDDAD68E6ED5C70BDBB41DCA3D8.png" alt="Screen Shot 2018-03-06 at 00.36.26.png"></p>
<p>We can define our set of resulting classes as y:<br><img src="5D6DBDB924FFE09866BA87069886BD34.png" alt="Screen Shot 2018-03-06 at 00.36.39.png"></p>
<p>Each $y^{(i)}$ represents a different image corresponding to either a car, pedestrian, truck, or motorcycle. The inner layers, each provide us with some new information which leads to our final hypothesis function. The setup looks like:</p>
<p><img src="5D6DBDB924FFE09866BA87069886BD34.png" alt="Screen Shot 2018-03-06 at 00.36.39.png"></p>
<p>Our resulting hypothesis for one set of inputs may look like:<br><img src="0F0B96816583D5C4B1A3FBEC2960985B.png" alt="Screen Shot 2018-03-06 at 00.37.58.png"></p>
<p>In which case our resulting class is the third one down, or $h_Θ(x)_3$, which represents the motorcycle.</p>
<h3 id="Cost-Function-3"><a href="#Cost-Function-3" class="headerlink" title="Cost Function"></a>Cost Function</h3><p>Let’s first define a few variables that we will need to use:</p>
<ul>
<li>L = total number of layers in the network</li>
<li>$s_l$ = number of units (not counting bias unit) in layer l</li>
<li>K = number of output units/classes</li>
</ul>
<p>Recall that in neural networks, we may have many output nodes. We denote $h_Θ(x)_k$ as being a hypothesis that results in the kth output. Our cost function for neural networks is going to be a generalization of the one we used for logistic regression. Recall that the cost function for regularized logistic regression was:</p>
<script type="math/tex; mode=display">J(θ)=−\frac{1}{m}\sum_{i=1}^{m}[y^{(i)}log(h_θ(x^{(i)}))+(1−y^{(i)})log(1−h_θ(x^{(i)}))] + \frac{\lambda}{2m}\sum_{j=1}^{n}\theta_j^2</script><p>For neural networks, it is going to be slightly more complicated:</p>
<script type="math/tex; mode=display">J(θ)=−\frac{1}{m}\sum_{i=1}^{m}\sum_{k=1}^{k}\left[y^{(i)}log(h_θ(x^{(i)}))+(1−y^{(i)})log(1−h_θ(x^{(i)}))\right] + \frac{\lambda}{2m}\sum_{j=1}^{L-1}\sum_{i=1}^{s_j}\sum_{j=1}^{s_j+1}\left(\Theta_{j,i}^{(l)} \right)</script><p>We have added a few nested summations to account for our multiple output nodes. In the first part of the equation, before the square brackets, we have an additional nested summation that loops through the number of output nodes.</p>
<p>In the regularization part, after the square brackets, we must account for multiple theta matrices. The number of columns in our current theta matrix is equal to the number of nodes in our current layer (including the bias unit). The number of rows in our current theta matrix is equal to the number of nodes in the next layer (excluding the bias unit). As before with logistic regression, we square every term.</p>
<p>Note:</p>
<ul>
<li>the double sum simply adds up the logistic regression costs calculated for each cell in the output layer</li>
<li>the triple sum simply adds up the squares of all the individual Θs in the entire network.</li>
<li>the i in the triple sum does not refer to training example i</li>
</ul>
<h3 id="反向传播算法"><a href="#反向传播算法" class="headerlink" title="反向传播算法"></a>反向传播算法</h3><p><img src="1E7910385ADB22286535DD9C10A96CA9.png" alt="Screen Shot 2018-03-06 at 22.50.33.png"><br><img src="8DC2206F7BE4D57DE26287856593AD79.png" alt="Screen Shot 2018-03-06 at 22.53.11.png"><br><img src="3E0683886E25BF1BC633840010E6B5C9.png" alt="Screen Shot 2018-03-06 at 22.54.57.png"><br><img src="7C3B34351E78311B962400E061A79423.png" alt="Screen Shot 2018-03-06 at 22.55.30.png"><br><img src="A1B582245F39EB4BA99621D425CA909F.png" alt="Screen Shot 2018-03-06 at 23.39.45.png"><br><img src="FFC79FACBBA1492A02D9E45F3C29C439.png" alt="Screen Shot 2018-03-06 at 23.40.03.png"></p>
<h4 id="引入delta"><a href="#引入delta" class="headerlink" title="引入delta"></a>引入delta</h4><p>利用链式法则来更新权重你会发现其实这个方法简单，但过于冗长。由于更新的过程可以看做是从网络的输入层到输出层从前往后更新，每次更新的时候都需要重新计算节点的误差，因此会存在一些不必要的重复计算。其实对于已经计算完毕的节点我们完全可以直接拿来用，因此我们可以重新看待这个问题，从后往前更新。先更新后边的权重，之后再在此基础上利用更新后边的权重产生的中间值来更新较靠前的参数。这个中间变量就是下文要介绍的delta变量，一来简化公式，二来减少计算量，有点动态规划的赶脚。</p>
<p>接下来用事实说话，大家仔细观察一下在第四部分链式求导部分误差对于输出层的w11以及隐藏层的w11求偏导以及偏置的求偏导的过程，你会发现，三个公式存在相同的部分，同时隐藏层参数求偏导的过程会用到输出层参数求偏导的部分公式，这正是引入了中间变量delta的原因（其实红框的公式就是delta的定义）。<br><img src="3B0BF315DF80121DB27897BBF9A37884.png" alt="Screen Shot 2018-03-07 at 01.04.21.png"></p>
<p>大家看一下经典书籍《神经网络与深度学习》中对于delta的描述为在第l层第j个神经元上的误差，<strong>定义为误差对于当前带权输入求偏导</strong>，数学公式如下：<br><img src="238D7D4D26EE242A61DA6EB1A8B29D2D.png" alt="Screen Shot 2018-03-07 at 01.04.39.png"></p>
<p><img src="86C740FF01C6F3D1BBE6E70DDFB1D8BD.png" alt="Screen Shot 2018-03-07 at 01.05.03.png"><br><img src="55BF97D8CF559C742CF654469D576603.png" alt="Screen Shot 2018-03-07 at 01.05.50.png"></p>
<p><img src="B090D5D856292D3898C1D4E0937B58B2.png" alt="Screen Shot 2018-03-07 at 01.06.05.png"></p>
<h2 id="Advice-for-Applying-Machine-Learning"><a href="#Advice-for-Applying-Machine-Learning" class="headerlink" title="Advice for Applying Machine Learning"></a>Advice for Applying Machine Learning</h2><h3 id="Evaluating-a-Hypothesis"><a href="#Evaluating-a-Hypothesis" class="headerlink" title="Evaluating a Hypothesis"></a>Evaluating a Hypothesis</h3><p>Once we have done some trouble shooting for errors in our predictions by:</p>
<ul>
<li>Getting more training examples</li>
<li>Trying smaller sets of features</li>
<li>Trying additional features</li>
<li>Trying polynomial features</li>
<li>Increasing or decreasing λ</li>
</ul>
<p>We can move on to evaluate our new hypothesis.</p>
<p>A hypothesis may have a low error for the training examples but still be inaccurate (because of overfitting). Thus, to evaluate a hypothesis, given a dataset of training examples, we can split up the data into two sets: a <strong>training set</strong> and a <strong>test set</strong>. Typically, the training set consists of 70% of your data and the test set is the remaining 30%.</p>
<p>The new procedure using these two sets is then:</p>
<p>Learn Θ and minimize $J_{train}(Θ)$ using the training set<br>Compute the test set error $J_{test}(Θ)$</p>
<h3 id="The-test-set-error"><a href="#The-test-set-error" class="headerlink" title="The test set error"></a>The test set error</h3><ol>
<li>For linear regression: <script type="math/tex">J_{test}(Θ)=\frac{1}{2m_{test}}\sum^{m_{test}}_{i=1}(h_Θ(x^{(i)}_{test})−y^{(i)}_{test})^2</script><br>For classification ~ Misclassification error (aka 0/1 misclassification error):<script type="math/tex; mode=display">
\begin{equation}
err(h_Θ(x),y)= \left\{
\begin{aligned}
\overset{.} 1 & \quad if \ h_Θ(x)≥0.5 \ and \ y=0 \ or \ h_Θ(x)<0.5 \ and \ y=1 \\ 
0 & \quad otherwise \end{aligned}
\right.
\end{equation}</script></li>
</ol>
<p>This gives us a binary 0 or 1 error result based on a misclassification. The average test error for the test set is:</p>
<script type="math/tex; mode=display">Test Error)=\frac{1}{m_{test}}\sum^{m_{test}}_{i=1}err(h_Θ(x^{(i)}_{test}),y^{(i)}_{test})^2</script><p>This gives us the proportion of the test data that was misclassified.</p>
<h3 id="Model-Selection-and-Train-Validation-Test-Sets"><a href="#Model-Selection-and-Train-Validation-Test-Sets" class="headerlink" title="Model Selection and Train/Validation/Test Sets"></a>Model Selection and Train/Validation/Test Sets</h3><p>Just because a learning algorithm fits a training set well, that does not mean it is a good hypothesis. It could <strong>over fit</strong> and as a result your predictions on the test set would be poor. The error of your hypothesis as measured on the data set with which you trained the parameters will be lower than the error on any other data set.</p>
<p>Given many models with different polynomial degrees, we can use a systematic approach to identify the ‘best’ function. In order to choose the model of your hypothesis, you can test each degree of polynomial and look at the error result.</p>
<p>One way to break down our dataset into the three sets is:</p>
<ul>
<li>Training set: 60%</li>
<li>Cross validation set: 20%</li>
<li>Test set: 20%</li>
</ul>
<p>We can now calculate three separate error values for the three different sets using the following method:</p>
<ol>
<li>Optimize the parameters in Θ using the training set for each polynomial degree.</li>
<li>Find the polynomial degree d with the least error using the cross validation set.</li>
<li>Estimate the generalization error using the test set with $J_{test}(Θ^{(d)})$, (d = theta from polynomial with lower error);</li>
</ol>
<p>This way, the degree of the polynomial d has not been trained using the test set.</p>
<h3 id="Diagnosing-Bias-vs-Variance"><a href="#Diagnosing-Bias-vs-Variance" class="headerlink" title="Diagnosing Bias vs. Variance"></a>Diagnosing Bias vs. Variance</h3><p>In this section we examine the relationship between the degree of the polynomial d and the underfitting or overfitting of our hypothesis.</p>
<ul>
<li>We need to distinguish whether bias or variance is the problem contributing to bad predictions.</li>
<li><strong>High bias</strong> is underfitting and <strong>high variance</strong> is overfitting. Ideally, we need to find a golden mean between these two.</li>
</ul>
<p>The training error will tend to <strong>decrease</strong> as we increase the degree d of the polynomial.</p>
<p>At the same time, the cross validation error will tend to <strong>decrease</strong> as we increase d up to a point, and then it will <strong>increase</strong> as d is increased, forming a convex curve.</p>
<ul>
<li>High bias (underfitting): both $J_{train}(Θ)$ and $J_{CV}(Θ)$ will be high. Also, $J_{CV}(Θ) \approx J_{train}(Θ)$.</li>
<li>High variance (overfitting): $J_{train}(Θ)$ will be low and $J_{CV}(Θ)$ will be much greater than $J_{train}(Θ)$.</li>
</ul>
<p>The is summarized in the figure below:<br><img src="781A117D7463E287879157F7CAE8C804.png" alt="Screen Shot 2018-03-07 at 02.32.42.png"></p>
<h3 id="Regularization-and-Bias-Variance"><a href="#Regularization-and-Bias-Variance" class="headerlink" title="Regularization and Bias/Variance"></a>Regularization and Bias/Variance</h3><p><img src="515C8236E4F14AA312CAB97EBE4D2A4B.png" alt="Screen Shot 2018-03-07 at 02.34.37.png"><br>In the figure above, we see that as λ increases, our fit becomes more rigid. On the other hand, as λ approaches 0, we tend to over overfit the data. So how do we choose our parameter λ to get it ‘just right’ ? In order to choose the model and the regularization term λ, we need to:</p>
<ol>
<li>Create a list of lambdas (i.e. $λ \in \left\{0,0.01,0.02,0.04,0.08,0.16,0.32,0.64,1.28,2.56,5.12,10.24\right\}$);</li>
<li>Create a set of models with different degrees or any other variants.</li>
<li>Iterate through the λs and for each λ go through all the models to learn some Θ.</li>
<li>Compute the cross validation error using the learned Θ (computed with λ) on the $J_{CV}(Θ)$ <strong>without</strong> regularization or <strong>λ = 0</strong>.</li>
<li>Select the best combo that produces the lowest error on the cross validation set.</li>
<li>Using the best combo Θ and λ, apply it on $J_{test}(Θ)$ to see if it has a good generalization of the problem.</li>
</ol>
<h3 id="Learning-Curves"><a href="#Learning-Curves" class="headerlink" title="Learning Curves"></a>Learning Curves</h3><p>Training an algorithm on a very few number of data points (such as 1, 2 or 3) will easily have 0 errors because we can always find a quadratic curve that touches exactly those number of points. Hence:</p>
<ul>
<li>As the training set gets larger, the error for a quadratic function increases.</li>
<li>The error value will plateau out after a certain m, or training set size.</li>
</ul>
<h4 id="Experiencing-high-bias"><a href="#Experiencing-high-bias" class="headerlink" title="Experiencing high bias:"></a>Experiencing high bias:</h4><ul>
<li><p><strong>Low training set size</strong>: causes $J_{train}(Θ)$ to be low and $J_{CV}(Θ)$ to be high.</p>
</li>
<li><p><strong>Large training set size</strong>: causes both $J_{train}(Θ)$ and $J_CV(Θ)$ to be high with $J_{train}(Θ) \approx J_{CV}(Θ)$.</p>
</li>
</ul>
<blockquote>
<p>If a learning algorithm is suffering from high bias, getting more training data will not (by itself) help much.</p>
</blockquote>
<p><img src="3DF331A0CEECDA3ACF1DA4FC358DFF4A.png" alt="Screen Shot 2018-03-07 at 02.48.32.png"></p>
<h4 id="Experiencing-high-variance"><a href="#Experiencing-high-variance" class="headerlink" title="Experiencing high variance:"></a>Experiencing high variance:</h4><ul>
<li><p><strong>Low training set size</strong>: causes $J_{train}(Θ)$ to be low and $J_{CV}(Θ)$ to be high.</p>
</li>
<li><p><strong>Large training set size</strong>: $J_{train}(Θ)$ increases with training set size and $J_{CV}(Θ)$ continues to decrease without leveling off. Also, $J_{train}(Θ) &lt; J_{CV}(Θ)$ but the difference between them remains significant.</p>
</li>
</ul>
<blockquote>
<p>If a learning algorithm is suffering from high variance, getting more training data is likely to help.<br><img src="EFB83955B407BC411E541A711E96A0E8.png" alt="Screen Shot 2018-03-07 at 02.53.23.png"></p>
</blockquote>
<h3 id="Deciding-What-to-Do-Next-Revisited"><a href="#Deciding-What-to-Do-Next-Revisited" class="headerlink" title="Deciding What to Do Next Revisited"></a>Deciding What to Do Next Revisited</h3><p>Our decision process can be broken down as follows:</p>
<ul>
<li><strong>Getting more training examples</strong>: Fixes high variance</li>
<li><strong>Trying smaller sets of features</strong>: Fixes high variance</li>
<li><strong>Adding features</strong>: Fixes high bias</li>
<li><strong>Adding polynomial features</strong>: Fixes high bias</li>
<li><strong>Decreasing λ</strong>: Fixes high bias</li>
<li><strong>Increasing λ</strong>: Fixes high variance.</li>
</ul>
<h4 id="Diagnosing-Neural-Networks"><a href="#Diagnosing-Neural-Networks" class="headerlink" title="Diagnosing Neural Networks"></a>Diagnosing Neural Networks</h4><ul>
<li>A neural network with fewer parameters is prone to underfitting. It is also computationally cheaper.</li>
<li>A large neural network with more parameters is prone to overfitting. It is also computationally expensive. In this case you can use regularization (increase λ) to address the overfitting.</li>
</ul>
<p>Using a single hidden layer is a good starting default. You can train your neural network on a number of hidden layers using your cross validation set. You can then select the one that performs best.</p>
<h2 id="Support-Vector-Machines"><a href="#Support-Vector-Machines" class="headerlink" title="Support Vector Machines"></a>Support Vector Machines</h2><h3 id="from-logistic-to-SVM"><a href="#from-logistic-to-SVM" class="headerlink" title="from logistic to SVM"></a>from logistic to SVM</h3><p><img src="285DCB47AC53B59E2DB6E011D59EC77A.png" alt="Screen Shot 2018-03-07 at 11.30.56.png"></p>
<h3 id="Cost-Function-4"><a href="#Cost-Function-4" class="headerlink" title="Cost Function"></a>Cost Function</h3><p><img src="C3B175C3D872808F82A095C1D6B8925A.png" alt="Screen Shot 2018-03-07 at 11.31.49.png"></p>
<p>recall the cost function of logistic Regression:</p>
<script type="math/tex; mode=display">\min_{\theta}−\frac{1}{m}\sum_{i=1}^{m}[y^{(i)}log(h_θ(x^{(i)}))+(1−y^{(i)})log(1−h_θ(x^{(i)}))] + \frac{\lambda}{2m}\sum_{j=1}^{n}\theta_j^2</script><p>We replace some terms with new terms and delete some terms which will not influence the results:</p>
<script type="math/tex; mode=display">\min_{\theta}C\sum_{i=1}^{m}[y^{(i)}cost_1(\theta^Tx^{(i)}))+(1−y^{(i)})cost_0(\theta^Tx^{(i)})] + \frac{1}{2}\sum_{i=1}^{n}\theta_j^2</script><h3 id="Hypothesis"><a href="#Hypothesis" class="headerlink" title="Hypothesis"></a>Hypothesis</h3><script type="math/tex; mode=display">
\begin{equation}
h_{\theta} = \left\{
\begin{aligned}
& 0 \quad if \ \theta^TX > 0 \\
& 1 \quad otherwise
\end{aligned}
\right.
\end{equation}</script><h3 id="Large-Margin-Intuion"><a href="#Large-Margin-Intuion" class="headerlink" title="Large Margin Intuion"></a>Large Margin Intuion</h3><p><img src="4687A5DC15D8F11DA8072AECBFE0602F.png" alt="Screen Shot 2018-03-07 at 13.40.48.png"><br><img src="A704546B2253B03AC14795A34EE3DF05.png" alt="Screen Shot 2018-03-07 at 13.41.16.png"><br><img src="8D7D46605872CB4F3E400CB6A9431488.png" alt="Screen Shot 2018-03-07 at 13.41.29.png"></p>
<h3 id="Vector-inner-product"><a href="#Vector-inner-product" class="headerlink" title="Vector inner product"></a>Vector inner product</h3><p><img src="330C85F2779A7B587222EBCA9A43C8D2.png" alt="Screen Shot 2018-03-07 at 14.10.00.png"><br><img src="AB6577A14C75D19C65CBFFD1E33A8D30.png" alt="Screen Shot 2018-03-08 at 14.46.10.png"><br><img src="8B0B485DE902B7EF3E7A6490D12C2648.png" alt="Screen Shot 2018-03-07 at 14.15.46.png"></p>
<h3 id="kernel"><a href="#kernel" class="headerlink" title="kernel"></a>kernel</h3><p><img src="448E12BA8322FB7F9A543F878CA4DE18.png" alt="Screen Shot 2018-03-07 at 15.17.22.png"><br><img src="AFFBD72AF70902A69A0D88CC1D43CE1E.png" alt="Screen Shot 2018-03-07 at 15.17.43.png"><br><img src="396AB89981F0202AB84789EC4618734D.png" alt="Screen Shot 2018-03-07 at 15.19.15.png"><br><img src="E18FC2346F7204E03DBF11B94D74B394.png" alt="Screen Shot 2018-03-07 at 15.19.30.png"><br><img src="19D617B04FEC28135163B0F5C694EBEC.png" alt="Screen Shot 2018-03-07 at 15.20.04.png"><br><img src="7597B35AA6CBE0DE414F5CC36DACF6B2.png" alt="Screen Shot 2018-03-07 at 15.20.24.png"><br><img src="2EB3A7D5D4AFA680E6106F22975A9911.png" alt="Screen Shot 2018-03-07 at 15.20.43.png"></p>
<h4 id="低维线性不可分到高维线性可分的简单例子"><a href="#低维线性不可分到高维线性可分的简单例子" class="headerlink" title="低维线性不可分到高维线性可分的简单例子"></a>低维线性不可分到高维线性可分的简单例子</h4><p><img src="AAB7D8B8F27F9125ED34BDE4F647DC9C.png" alt="Screen Shot 2018-03-07 at 15.39.51.png"></p>
<p> <strong>一个核函数把低维空间映射到高维空间的例子</strong></p>
<p>下面这张图位于第一、二象限内。我们关注红色的门，以及“北京四合院”这几个字下面的紫色的字母。我们把红色的门上的点看成是“+”数据，紫色字母上的点看成是“-”数据，它们的横、纵坐标是两个特征。显然，在这个二维空间内，“+”“-”两类数据不是线性可分的。<br><img src="kernel1.png" alt></p>
<p>我们现在考虑核函数，即“内积平方”。这里面是二维空间中的两个点。这个核函数对应着一个二维空间到三维空间的映射，它的表达式是：可以验证，在P这个映射下，原来二维空间中的图在三维空间中的像是这个样子：<br><img src="kernel2.png" alt="kernel2.png"></p>
<p>(前后轴为x轴，左右轴为y轴，上下轴为z轴）注意到绿色的平面可以完美地分割红色和紫色，也就是说，两类数据在三维空间中变成线性可分的了。而三维中的这个判决边界，再映射回二维空间中是这样的：<br><img src="kernel3.png" alt="kernel3.png"></p>
<p>这是一条双曲线，它不是线性的。</p>
<p><strong>核函数的作用就是隐含着一个从低维空间到高维空间的映射，而这个映射可以把低维空间中线性不可分的两类点变成线性可分的</strong>。当然，我举的这个具体例子强烈地依赖于数据在原始空间中的位置。事实中使用的核函数往往比这个例子复杂得多。它们对应的映射并不一定能够显式地表达出来；它们映射到的高维空间的维数也比我举的例子（三维）高得多，甚至是无穷维的。这样，就可以期待原来并不线性可分的两类点变成线性可分的了。</p>
<h3 id="SVM-or-Logistic-Regression"><a href="#SVM-or-Logistic-Regression" class="headerlink" title="SVM or Logistic Regression"></a>SVM or Logistic Regression</h3><p><img src="5A07E8FF157593A05A55A2DC50EA8682.png" alt="Screen Shot 2018-03-07 at 15.42.11.png"></p>
<ul>
<li>如果特征维数很高，往往线性可分（SVM解决非线性分类问题的思路就是将样本映射到更高维的特征空间中），可以采用LR或者线性核的SVM；</li>
<li>如果样本数量很多，由于求解最优化问题的时候，目标函数涉及两两样本计算内积，使用高斯核明显计算量会大于线性核，所以手动添加一些特征，使得线性可分，然后可以用LR或者线性核的SVM；</li>
<li>如果不满足上述两点，即特征维数少，样本数量正常，可以使用高斯核的SVM。</li>
</ul>
<h2 id="Clustering"><a href="#Clustering" class="headerlink" title="Clustering"></a>Clustering</h2><h3 id="K-means-algorithm"><a href="#K-means-algorithm" class="headerlink" title="K-means algorithm"></a>K-means algorithm</h3><p>K-means算是一个很简单的聚类算法，而聚类与决策树、SVM等不同，是一种无监督的学习，所谓无监督学习（Unsupervised learning）是和监督学习相对应的，不同于监督学习，无监督学习所给的训练集是不包含标签的，所有数据集都只包括特征xi<br>而没有标签yi<br>。<br>聚类的主要目的就是将这些没有标签的数据分为N个簇(cluster)，其主要的应用有市场划分、社交网络分析、天文学中的数据分析等等。</p>
<h4 id="K-Means的描述如下："><a href="#K-Means的描述如下：" class="headerlink" title="K-Means的描述如下："></a>K-Means的描述如下：</h4><p><img src="2913E850736A05A1A23A00CA88B16858.png" alt="Screen Shot 2018-03-07 at 15.58.11.png"><br>先对参数进行说明：</p>
<ul>
<li>$x^{(i)}$为第i个数据点；</li>
<li>$c^{(i)}$ 为x^{(i)}的簇；</li>
<li>$u_j$为第j个簇的质心点；</li>
</ul>
<p>在对算法进行说明：</p>
<ol>
<li>首先需要初始化质心点，在K-Means中，通常采用随机的方法对质心点进行初始化。更好的办法是：随机选择m(m&gt;k)个数据，再从中选择k个数据点作为质心点；</li>
<li>第一个for循环主要用于给数据点$x^{(i)}$赋值$c^{(i)}$，称为 cluster assignment steps，对每一个数据点，都会计算她与所有质心点的距离，而后将数据点分配到与它距离最近的簇；</li>
<li>第二个for循环主要用于更新质心点的位置，称为move centroid steps，而$u_j$这里的计算公式所代表的意思就是，分母：统计所有$c_i=j$的点的个数；分子是所有$c_i=j$的点的坐标和。那整体的意思就很明确了，就是求这些点的平均值，作为新的质心点的位置。</li>
</ol>
<p>当c和u收敛之后，就可以结束整个迭代过程。下面看一个实例：<br><img src="D4109680581A6961A99333E7F1D2A3CA.png" alt="Screen Shot 2018-03-07 at 16.01.51.png"></p>
<h4 id="优化目标"><a href="#优化目标" class="headerlink" title="优化目标"></a>优化目标</h4><p>在上一部分中，我们说最终的目的是要达到一个收敛，那我们就用一个失真函数（distortion function）来衡量。<br><img src="C24A569CCC459360C8AEEDA750934B83.png" alt="Screen Shot 2018-03-07 at 16.03.03.png"><br>J(c,u)实际上是一个单调递减的函数，且是一个非凸函数，只要我们能找到拐点，那我们就已经达到了收敛，又称这种方法为elbow function。偶尔也有可能陷入局部最优情况，或出现震荡情况，这样一定是有问题了。</p>
<p><img src="E10F16584B1406033AE772380CFA7B0D.png" alt="Screen Shot 2018-03-07 at 16.23.13.png"></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>K-Means虽然简单，容易实现，但是也会收敛到局部最小值，这种情况下可以采用K-Means的改进算法：二分K-均值算法。算法的思想就是：首先将所有点做为一个簇，然后将该簇一分为二。之后选择其中一个簇进行继续划分，选择哪一个簇进行划分则取决于对其划分是否可以最大程度降低SSE的值，不断划分直到达到用户所指定的K值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*-coding:utf8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadDataSet</span><span class="params">(fileName)</span>:</span></span><br><span class="line">    dataMat = []</span><br><span class="line">    fr = open(fileName)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> fr.readlines():</span><br><span class="line">        curLine = line.strip().split(<span class="string">'/t'</span>)</span><br><span class="line">        fltLine = map(float, curLine)</span><br><span class="line">        dataMat.append(fltLine)</span><br><span class="line">    <span class="keyword">return</span> dataMat</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">distEclud</span><span class="params">(vecA, vecB)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> sqrt(sum(power(vecA - vecB), <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">randCent</span><span class="params">(dataSet, k)</span>:</span></span><br><span class="line">    n = shape(dataSet)[<span class="number">1</span>]</span><br><span class="line">    centroids = mat(zeros(k,n))</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">        minJ = min(dataSet[:, j])</span><br><span class="line">        rangeJ = float(max(dataSet[:, j]) - minJ)</span><br><span class="line">        centroids[:, j] = minJ + rangeJ*random.rand(k, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> centroids</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kMeans</span><span class="params">(dataSet, k, distMeas = distEclud, createCent = randCent)</span>:</span></span><br><span class="line">    <span class="comment"># 确定数据集的大小</span></span><br><span class="line">    m = shape(dataSet)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 建立矩阵来存储c(i)和x(i)距离u(c(i))的值</span></span><br><span class="line">    clusterAssment = mat(zeros(m,<span class="number">2</span>))</span><br><span class="line">    <span class="comment">#随机初始化质心</span></span><br><span class="line">    centroids= createCent(dataSet, k)</span><br><span class="line">    <span class="comment"># 设置标志位</span></span><br><span class="line">    clusterChanged = <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">while</span> clusterChanged:</span><br><span class="line">        clusterChanged = <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">            minDist = inf; minIndex = <span class="number">-1</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(k):</span><br><span class="line">                distJI = distMeas(centroids[k, :], dataSet[i, :])</span><br><span class="line">                <span class="keyword">if</span> distJI &lt; minDist :</span><br><span class="line">                    minDist = distJI; minIndex = j</span><br><span class="line">                <span class="keyword">if</span> clusterAssment[i, <span class="number">0</span>] != minIndex:</span><br><span class="line">                    clusterChanged = <span class="keyword">True</span></span><br><span class="line">                clusterAssment[i, :] = minIndex,minDist**<span class="number">2</span></span><br><span class="line">            <span class="keyword">print</span> centroids</span><br><span class="line">        <span class="keyword">for</span> cent <span class="keyword">in</span> range(k):</span><br><span class="line">            ptsInClust = dataSet[nonzero(clusterAssment[:, <span class="number">0</span>].A == cent)[<span class="number">0</span>]]</span><br><span class="line">            centroids[cent, :] = mean(ptsInClust, axis=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> centroids, clusterAssment</span><br></pre></td></tr></table></figure>
<h2 id="Dimensionality-Reducion"><a href="#Dimensionality-Reducion" class="headerlink" title="Dimensionality Reducion"></a>Dimensionality Reducion</h2><p>why we need to do Dimensionality Reducion?</p>
<ul>
<li>data compression</li>
<li>visually</li>
</ul>
<h3 id="PCA实例"><a href="#PCA实例" class="headerlink" title="PCA实例"></a>PCA实例</h3><p>现在假设有一组数据如下：<br><img src="97F9AAF567C76B2E110902B387CB675D.png" alt="Screen Shot 2018-03-07 at 17.41.36.png"></p>
<p>行代表了样例，列代表特征，这里有10个样例，每个样例两个特征。可以这样认为，有10篇文档，x是10篇文档中“learn”出现的TF-IDF，y是10篇文档中“study”出现的TF-IDF。</p>
<ol>
<li><p>分别求x和y的平均值，然后对于所有的样例，都减去对应的均值。这里x的均值是1.81，y的均值是1.91，那么一个样例减去均值后即为（0.69,0.49），得到<br><img src="445B9E9346DC3951CBCC4E00AFF8233F.png" alt="Screen Shot 2018-03-07 at 17.42.04.png"></p>
</li>
<li><p>求特征协方差矩阵，如果数据是3维，那么协方差矩阵是：<br><img src="8B366D6943C32510584BC5CC2688F0A3.png" alt="Screen Shot 2018-03-07 at 17.42.30.png"><br>这里只有x和y，求解得<br><img src="16A0681193BE719B967C2944C43DAB35.png" alt="Screen Shot 2018-03-07 at 17.42.51.png"></p>
<p> 对角线上分别是x和y的方差，非对角线上是协方差。协方差是衡量两个变量同时变化的变化程度。协方差大于0表示x和y若一个增，另一个也增；小于0表示一个增，一个减。如果ｘ和ｙ是统计独立的，那么二者之间的协方差就是０；但是协方差是０，并不能说明ｘ和ｙ是独立的。协方差绝对值越大，两者对彼此的影响越大，反之越小。协方差是没有单位的量，因此，如果同样的两个变量所采用的量纲发生变化，它们的协方差也会产生树枝上的变化。</p>
</li>
<li><p>求协方差的特征值和特征向量，得到：<br> <img src="25BE90ADDD485AA80B3EE7ED0CE6A05F.png" alt="Screen Shot 2018-03-07 at 17.43.19.png"><br>上面是两个特征值，下面是对应的特征向量，特征值0.0490833989对应特征向量为，这里的特征向量都归一化为单位向量。</p>
</li>
<li><p>将特征值按照从大到小的顺序排序，选择其中最大的k个，然后将其对应的k个特征向量分别作为列向量组成特征向量矩阵。这里特征值只有两个，我们选择其中最大的那个，这里是1.28402771，对应的特征向量是(-0.677873399, -0.735178656)T。</p>
</li>
<li><p>第五步，将样本点投影到选取的特征向量上。假设样例数为m，特征数为n，减去均值后的样本矩阵为DataAdjust(m<em>n)，协方差矩阵是n</em>n，选取的k个特征向量组成的矩阵为EigenVectors(n*k)。那么投影后的数据FinalData为</p>
<p> FinalData(10<em>1) = DataAdjust(10</em>2矩阵) x 特征向量(-0.677873399, -0.735178656)T</p>
<p> 得到的结果是：<br> <img src="6EC9504E29B572035ADE77A253E7AF30.png" alt="Screen Shot 2018-03-07 at 17.45.19.png"></p>
</li>
</ol>
<p>这样，就将原始样例的n维特征变成了k维，这k维就是原始特征在k维上的投影。</p>
<p>上面的数据可以认为是learn和study特征融合为一个新的特征叫做LS特征，该特征基本上代表了这两个特征。上述过程如下图2描述：<br><img src="B76585DA48BB4AB940B6E528599E8D6A.png" alt="Screen Shot 2018-03-07 at 17.47.17.png"><br>正号表示预处理后的样本点，斜着的两条线就分别是正交的特征向量（由于协方差矩阵是对称的，因此其特征向量正交），最后一步的矩阵乘法就是将原始样本点分别往特征向量对应的轴上做投影。</p>
<h3 id="pca的理解"><a href="#pca的理解" class="headerlink" title="pca的理解"></a>pca的理解</h3><p><img src="06A21B1B72F1F5DDE6AA5AB859B5338A.png" alt="Screen Shot 2018-03-07 at 17.48.06.png"></p>
<p>在第一部分中，我们举了一个学生成绩的例子，里面的数据点是六维的，即每个观测值是6维空间中的一个点。我们希望将6维空间用低维空间表示。</p>
<p>先假定只有二维，即只有两个变量，它们由横坐标和纵坐标所代表；因此每个观测值都有相应于这两个坐标轴的两个坐标值；如果这些数据形成一个椭圆形状的点阵，那么这个椭圆有一个长轴和一个短轴。在短轴方向上，数据变化很少；在极端的情况，短轴如果退化成一点，那只有在长轴的方向才能够解释这些点的变化了；这样，由二维到一维的降维就自然完成了。</p>
<p>上图中，u1就是主成分方向，然后在二维空间中取和u1方向正交的方向，就是u2的方向。则n个数据在u1轴的离散程度最大（方差最大），数据在u1上的投影代表了原始数据的绝大部分信息，即使不考虑u2，信息损失也不多。而且，u1、u2不相关。只考虑u1时，二维降为一维。</p>
<p>椭圆的长短轴相差得越大，降维也越有道理。</p>
<h3 id="PCA-算法的应用"><a href="#PCA-算法的应用" class="headerlink" title="PCA 算法的应用"></a>PCA 算法的应用</h3><p><img src="FBEE1DE8219469657D328A73B990F4B1.png" alt="Screen Shot 2018-03-07 at 17.39.44.png"></p>
<p><img src="30CEB1BA6281642217A66686AA779309.png" alt="Screen Shot 2018-03-07 at 17.39.40.png"></p>
<h2 id="Anomaly-detection"><a href="#Anomaly-detection" class="headerlink" title="Anomaly detection"></a>Anomaly detection</h2><h3 id="Gaussian-Normal-distribution"><a href="#Gaussian-Normal-distribution" class="headerlink" title="Gaussian (Normal) distribution"></a>Gaussian (Normal) distribution</h3><p><img src="89DB33558EA5D8DB9CE9A8F920302AC7.png" alt="Screen Shot 2018-03-08 at 10.44.47.png"><br><img src="7F69F46B0710530FAF17D7B072F30FE2.png" alt="Screen Shot 2018-03-08 at 10.44.54.png"></p>
<h3 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h3><p><img src="326C2D7DB0ABAA31F3B066743DA4E952.png" alt="Screen Shot 2018-03-08 at 10.45.44.png"><br><img src="4B3407492A9AD4A2691D065EE8A45B90.png" alt="Screen Shot 2018-03-08 at 10.45.54.png"></p>
<h3 id="Algorithm-evaluation"><a href="#Algorithm-evaluation" class="headerlink" title="Algorithm evaluation"></a>Algorithm evaluation</h3><p><img src="19C817E85A9773D8C78C389B093F4018.png" alt="Screen Shot 2018-03-08 at 10.46.44.png"></p>
<h3 id="Anomaly-detection-VS-Supervised-learning"><a href="#Anomaly-detection-VS-Supervised-learning" class="headerlink" title="Anomaly detection VS. Supervised learning"></a>Anomaly detection VS. Supervised learning</h3><p><img src="CB0F77E450FF10CF8B792FE18E9E27A8.png" alt="Screen Shot 2018-03-08 at 10.47.57.png"><br><img src="DAA73F0D52ACA6D13385285D9B86F4A7.png" alt="Screen Shot 2018-03-08 at 10.48.08.png"></p>
<h3 id="Choosing-what-features-to-use"><a href="#Choosing-what-features-to-use" class="headerlink" title="Choosing what features to use"></a>Choosing what features to use</h3><p>主要思路是将非高斯分布的特征经过变换转换成高斯分布的特征</p>
<script type="math/tex; mode=display">eg.   x \rightarrow log(x)</script><p><img src="B2F2DD96F9BC84ED6888B219BB0EFD86.png" alt="Screen Shot 2018-03-08 at 10.54.55.png"></p>
<h3 id="Error-analysis-for-anomaly-detection"><a href="#Error-analysis-for-anomaly-detection" class="headerlink" title="Error analysis for anomaly detection"></a>Error analysis for anomaly detection</h3><p>利用误差分析寻找新特征<br><img src="9FB8C2DD8395B6420B19480D7218B016.png" alt="Screen Shot 2018-03-08 at 10.56.00.png"><br><img src="7EE7A79016CC4E0E21CCC10881209FFB.png" alt="Screen Shot 2018-03-08 at 10.56.23.png"></p>
<h2 id="Recommender-Systems"><a href="#Recommender-Systems" class="headerlink" title="Recommender Systems"></a>Recommender Systems</h2><p><img src="B41983012DA9997F008BC750AA151407.png" alt="Screen Shot 2018-03-08 at 15.24.01.png"></p>
<p>已知电影的特征$x_1,x_2$，对每一个用户拟合线性回归模型$\theta^TX$, 此时每个电影是一个样本，优化目标是电影的评分。<br><img src="6FC3D54070FBC8962D939985A8E906FD.png" alt="Screen Shot 2018-03-08 at 15.24.54.png"><br><img src="F11F7F90C3482A32FF53C62E748945B3.png" alt="Screen Shot 2018-03-08 at 15.28.31.png"><br><img src="1476CE936D4E50E4C4EF1BF2AB51B61C.png" alt="Screen Shot 2018-03-08 at 15.28.38.png"></p>
<p>已知用户对电影类型的喜好 $\theta$, 对每一个用户，拟合线性回归模型 $\theta^TX$, 优化目标是用户对电影的评分，因此可以求得X,即电影的特征<br><img src="AE870871B8D0F2B6168071767FB6313E.png" alt="Screen Shot 2018-03-08 at 15.30.03.png"><br><img src="1C0BABBAA61E385A9D4C7C01935B08AD.png" alt="Screen Shot 2018-03-08 at 15.37.35.png"></p>
<h3 id="Collaborative-filtering-algorithm"><a href="#Collaborative-filtering-algorithm" class="headerlink" title="Collaborative filtering algorithm"></a>Collaborative filtering algorithm</h3><p>根据用户之间的相似度来推荐<br><img src="7AAE33EDC45707F48780A5727E04F00A.png" alt="Screen Shot 2018-03-08 at 15.38.45.png"><br><img src="F22E68EC45F61BCEF3FD3FAFE27F5FEE.png" alt="Screen Shot 2018-03-08 at 15.38.53.png"><br><img src="1DE2721BA2D9BC55B44A678E819FC2DD.png" alt="Screen Shot 2018-03-08 at 15.43.17.png"></p>
<h2 id="Large-scale-machine-learning"><a href="#Large-scale-machine-learning" class="headerlink" title="Large scale machine learning"></a>Large scale machine learning</h2><h3 id="Stochastic-gradient-descent"><a href="#Stochastic-gradient-descent" class="headerlink" title="Stochastic gradient descent"></a>Stochastic gradient descent</h3><p>每次只用一个样本来计算梯度<br><img src="2DFBA34DED1CA9B1FCA8A121758440ED.png" alt="Screen Shot 2018-03-08 at 17.36.09.png"><br><img src="900CF832B967330E295A9E1DFD0F6401.png" alt="Screen Shot 2018-03-08 at 17.36.23.png"><br>o</p>
<h3 id="Mini-batch-gradient-descent"><a href="#Mini-batch-gradient-descent" class="headerlink" title="Mini-batch gradient descent"></a>Mini-batch gradient descent</h3><p>每次利用 n 个样本来计算梯度<br><img src="F910850F48DB2C6C0264A7C9F034DD7C.png" alt="Screen Shot 2018-03-08 at 17.36.58.png"></p>
<h3 id="Online-learning"><a href="#Online-learning" class="headerlink" title="Online learning"></a>Online learning</h3><p>抛弃固有数据集的概念，每次用新来的样本来更新梯度，然后抛弃这个样本。<br><img src="895F1FBF5458B0E13DF2BB46F6923CD3.png" alt="Screen Shot 2018-03-08 at 17.38.35.png"></p>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Course Note</tag>
      </tags>
  </entry>
  <entry>
    <title>Feasibility of Learning</title>
    <url>/Feasibility-of-Learning/2019/02/15/</url>
    <content><![CDATA[<h2 id="Feasibility-of-Learning"><a href="#Feasibility-of-Learning" class="headerlink" title="Feasibility of Learning"></a>Feasibility of Learning</h2><p>我们希望找到无限逼近实际函数f的假设函数g</p>
<h2 id="The-Controversial-of-Learning"><a href="#The-Controversial-of-Learning" class="headerlink" title="The Controversial of Learning"></a>The Controversial of Learning</h2><p><img src="feasibility01.png" alt></p>
<p>在上述例子中:</p>
<p>$g(\text{ hypothesis }) \approx f(\text{real function})$ 在 已知数据里面是可行的；但是对不可见的数据，想要实现 $g(\text hypothesis) \approx f(\text {real function} )$，其实是未知的。</p>
<h2 id="Hoeffding’s-Inequality"><a href="#Hoeffding’s-Inequality" class="headerlink" title="Hoeffding’s Inequality"></a>Hoeffding’s Inequality</h2><p><img src="feasibility02.png" alt></p>
<script type="math/tex; mode=display">P(| \nu-\mu| > \epsilon)  \leqslant 2e^{-2\epsilon^{2}N}</script><ul>
<li>valid for all N and $\epsilon$</li>
<li>does not depend on $\mu$, no need to know $\mu$</li>
<li>larger sample size N or looser gap $\epsilon$ =&gt; higher probability for $\nu \approx \mu$</li>
</ul>
<h2 id="Connection-to-Learning"><a href="#Connection-to-Learning" class="headerlink" title="Connection to Learning"></a>Connection to Learning</h2><ul>
<li>if large N, can probably infer unknow $| h(x) \neq f(x) |$ by know $| h(x_{n} \neq y_n)|$</li>
<li>$E_{in}(h)$: 在已知的样本里，假设函数与实际函数不相等的概率。$E_{out}(h)$: 在所有样本里，上述二者不相等的概率。</li>
<li><script type="math/tex; mode=display">[|E_{in}(h) - E_{out}(h)| > \epsilon] \leqslant 2e^{-2\epsilon^{2}N}</script></li>
<li>$E_{in}(h)$ small is a good choice, but $E_{in}(h)$ is not always small.</li>
</ul>
<h2 id="multiple-h"><a href="#multiple-h" class="headerlink" title="multiple h"></a>multiple h</h2><p>掷硬币，求出现反面的概率。</p>
<h3 id="bad-sample"><a href="#bad-sample" class="headerlink" title="bad sample"></a>bad sample</h3><ul>
<li>掷骰子150次，每次掷5下，有超过99%的概率会出现连续5次都是正面。</li>
<li>这就是一个bad sample，因为其使得$E_{in}(h)$ far away $E_{out}(h)$<ul>
<li>$E_{in}(h)$ = 0</li>
<li>$E_{out}(h)$ =  $1/2$</li>
</ul>
</li>
</ul>
<p>对于M个假设函数，出现 bad sample 的概率:<br><img src="feasibility03.png" alt="feasibility03"></p>
<ul>
<li>所有假设函数都是安全的</li>
<li>最优P为lowest $E_{in}(h_{m})$</li>
</ul>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Course Note</tag>
      </tags>
  </entry>
  <entry>
    <title>Types of Learning</title>
    <url>/Types-of-Learning/2019/02/15/</url>
    <content><![CDATA[<h2 id="Learning-with-Different-Output-Space-gamma"><a href="#Learning-with-Different-Output-Space-gamma" class="headerlink" title="Learning with Different Output Space $\gamma$"></a>Learning with Different Output Space $\gamma$</h2><h3 id="Binary-classification"><a href="#Binary-classification" class="headerlink" title="Binary classification"></a>Binary classification</h3><ul>
<li><p>Y = {−1, +1}</p>
</li>
<li><p><img src="binary.png" alt="binary classification"></p>
</li>
</ul>
<h3 id="Multiclass-Classification"><a href="#Multiclass-Classification" class="headerlink" title="Multiclass Classification"></a>Multiclass Classification</h3><ul>
<li>classify US coins (1c, 5c, 10c, 25c) by (size, mass)</li>
<li>$\gamma = {1c,5c,10c,25c}$,or $\gamma = {1,2,··· ,K}$ (abstractly)</li>
<li>binary classification: special case with K =2</li>
<li><img src="multiclass.png" alt="multiclass.png"></li>
</ul>
<h3 id="Regression"><a href="#Regression" class="headerlink" title="Regression"></a>Regression</h3><ul>
<li>$\gamma = \mathbb{R}$ or $\gamma = [lower, upper] \subset \mathbb{R}$ (bounded regression)</li>
</ul>
<h3 id="Structured-Learning-Sequence-Tagging-Problem"><a href="#Structured-Learning-Sequence-Tagging-Problem" class="headerlink" title="Structured Learning: Sequence Tagging Problem"></a>Structured Learning: Sequence Tagging Problem</h3><ul>
<li>a fancy but complicated learning problem</li>
<li>sentence -&gt; structure (class of each word)</li>
<li>$\gamma = \{PVN,PVP,NVN,PV,···\}$, not including VVVVV</li>
<li>huge multiclass classification problem ($structure \equiv hyperclass$) without <strong>explicit</strong> class definition</li>
</ul>
<h2 id="Learning-with-Different-Data-Label-y-n"><a href="#Learning-with-Different-Data-Label-y-n" class="headerlink" title="Learning with Different Data Label $y_n$"></a>Learning with Different Data Label $y_n$</h2><h3 id="Supervised-learning"><a href="#Supervised-learning" class="headerlink" title="Supervised learning"></a>Supervised learning</h3><ul>
<li>every $x_n$ comes with corresponding $y_n$</li>
</ul>
<h3 id="Unsupervised-learning"><a href="#Unsupervised-learning" class="headerlink" title="Unsupervised learning"></a>Unsupervised learning</h3><ul>
<li>clustering<ul>
<li>articles -&gt; topics</li>
<li>consumer profiles -&gt; consumer groups</li>
</ul>
</li>
<li>density estimation: {xn} -&gt; density(x)<ul>
<li>i.e. traffic reports with location -&gt; dangerous areas</li>
</ul>
</li>
<li>outlier detection: {xn} -&gt; unusual(x)<ul>
<li>i.e. Internet logs -&gt; intrusion alert</li>
</ul>
</li>
</ul>
<h3 id="Semi-supervised-learning"><a href="#Semi-supervised-learning" class="headerlink" title="Semi-supervised learning"></a>Semi-supervised learning</h3><ul>
<li>leverage unlabeled data to avoid <strong>expensive</strong> labeling</li>
<li><img src="semi.png" alt></li>
</ul>
<h3 id="Reinforcement-Learning"><a href="#Reinforcement-Learning" class="headerlink" title="Reinforcement Learning"></a>Reinforcement Learning</h3><ul>
<li>Teach Your Dog: Say <strong>Sit Down</strong><ul>
<li>cannot easily show the dog that $y_n$ = sit when $x_n$ = sit down</li>
<li>but can <strong>punish</strong> to say $\hat{y_n}$ = pee is wrong</li>
<li>but can <font color="red">reward</font> to say $\hat{y_n}$ = sit is good</li>
</ul>
</li>
<li>learn with <font color="red">partial/implicit</font> information (often sequentially)</li>
</ul>
<h2 id="Learning-with-different-Protocol-f-rightarrow-x-n-y-n"><a href="#Learning-with-different-Protocol-f-rightarrow-x-n-y-n" class="headerlink" title="Learning with different Protocol $f \rightarrow (x_n,y_n)$"></a>Learning with different Protocol $f \rightarrow (x_n,y_n)$</h2><h3 id="Batch-Learning"><a href="#Batch-Learning" class="headerlink" title="Batch Learning"></a>Batch Learning</h3><ul>
<li>batch supervised multiclass classification: learn from all known data</li>
</ul>
<h3 id="Online-Learning"><a href="#Online-Learning" class="headerlink" title="Online Learning:"></a>Online Learning:</h3><ul>
<li>hypothesis <strong>improves</strong> through receiving data instances <font color="red">sequentially</font></li>
</ul>
<h3 id="Active-Learning-Learning-by-‘Asking’"><a href="#Active-Learning-Learning-by-‘Asking’" class="headerlink" title="Active Learning: Learning by ‘Asking’"></a>Active Learning: Learning by ‘Asking’</h3><ul>
<li>improve hypothesis with fewer labels (hopefully) by asking questions <font color="red">strategically</font></li>
</ul>
<h2 id="Learning-with-different-Input-Space-chi"><a href="#Learning-with-different-Input-Space-chi" class="headerlink" title="Learning with different Input Space $\chi$"></a>Learning with different Input Space $\chi$</h2><ul>
<li><font color="red">concrete features</font>: each dimension of $\chi \in \mathbb{R}$ represents <strong>sophisticated physical meaning</strong></li>
<li><font color="red">Raw Features</font><ul>
<li>simple physical meaning; thus more difficult for ML than concrete features</li>
<li>often need human or machines to convert to concrete ones</li>
</ul>
</li>
<li><font color="red">Abstract Features</font>: again need <strong>feature conversion/extraction/construction</strong></li>
</ul>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Course Note</tag>
      </tags>
  </entry>
  <entry>
    <title>Learning to answer Yes or No</title>
    <url>/Learning-to-answer-Yes-or-No/2019/02/15/</url>
    <content><![CDATA[<h2 id="What-hypothesis-set-can-we-use"><a href="#What-hypothesis-set-can-we-use" class="headerlink" title="What hypothesis set can we use?"></a>What hypothesis set can we use?</h2><p><img src="question.png" alt="question.png"></p>
<h2 id="A-Simple-Hypothesis-Set-the-“Perceptron”"><a href="#A-Simple-Hypothesis-Set-the-“Perceptron”" class="headerlink" title="A Simple Hypothesis Set: the “Perceptron”"></a>A Simple Hypothesis Set: the “Perceptron”</h2><ul>
<li>Perceptron in $\mathbb{R}^2$</li>
</ul>
<script type="math/tex; mode=display">h(x) = sign(w_0 + w_1x_1 + w_2x_2)</script><p><img src="perceptron.png" alt="perceptron"></p>
<ul>
<li>features x: points on the plane (or points in $\mathbb{R}^d$ )</li>
<li>labels y: (+1), × (-1)</li>
<li>hypothesis h: lines (or hyperplanes in $\mathbb{R}^d$ ),positive on one side of a line, negative on the other side</li>
<li>different line classifies simples differently</li>
</ul>
<blockquote class="blockquote-center">perceptrons <=> linear (binary) classifiers</=></blockquote>


<h2 id="Select-g-from-mathscr-H"><a href="#Select-g-from-mathscr-H" class="headerlink" title="Select g from $\mathscr{H}$"></a>Select g from $\mathscr{H}$</h2><ul>
<li>want: $g \approx f$ (hard when f unknown)</li>
<li>almost necessary: $g \approx f$ on D, ideally $g(x_n) = f(x_n) = y_n$</li>
<li>difficult: H is of infinite size</li>
<li>idea: start from some $g_0$, and <font color="red">correct</font> its mistakes on $D$</li>
</ul>
<h2 id="Perceptron-Learning-Algorithm"><a href="#Perceptron-Learning-Algorithm" class="headerlink" title="Perceptron Learning Algorithm"></a>Perceptron Learning Algorithm</h2><p><img src="algo.png" alt="Perceptron Learning Algorithm"><br><img src="PLA01.png" alt="PLA01.png"><br><img src="PLA02.png" alt="PLA02.png"></p>
<ul>
<li>if PLA halts (i.e. no more mistakes),<br>(necessary condition) $D$ allows some w to make no mistake</li>
<li>call such $D$ linear separable<ul>
<li><img src="seperate.png" alt></li>
</ul>
</li>
<li>as long as linear separable and correct by mistake<ul>
<li>inner product of $w_f$ and $w_t$ grows fast; length of wt grows slowly</li>
<li>PLA ‘lines’ are more and more aligned with $w_f \rightarrow halts$</li>
</ul>
</li>
</ul>
<h2 id="Line-with-Noise-Tolerance"><a href="#Line-with-Noise-Tolerance" class="headerlink" title="Line with Noise Tolerance"></a>Line with Noise Tolerance</h2><p>$D$ is not linear separable?</p>
<p><img src="np.png" alt="not linear separable"></p>
<h2 id="Pocket-Algorithm"><a href="#Pocket-Algorithm" class="headerlink" title="Pocket Algorithm"></a>Pocket Algorithm</h2><p><strong>Find the best weights in pocket until enough iterations</strong></p>
<p><img src="pocket.png" alt="pocket algorithm"></p>
<h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><blockquote>
<p> Since we do not know whether D is linear separable in advance, we may decide to just go with pocket instead of PLA. If D is actually linear separable, what’s the difference between the two?<br>1 pocket on D is slower than PLA<br>2 pocket on D is faster than PLA<br>3 pocket on D returns a better g in approximating f than PLA<br>4 pocket on D returns a worse g in approximating f than PLA</p>
<p>answer: Because pocket need to check whether $w_{t+1}$ is better than $\hat{w}$ in each iteration, it is slower than PLA. On linear separable D, $w_{POCKET}$ is the same as $w_{PLA}$, both making no mistakes.</p>
</blockquote>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Course Note</tag>
      </tags>
  </entry>
  <entry>
    <title>The Learning Problems</title>
    <url>/The%20Learning%20Problems/2019/02/14/</url>
    <content><![CDATA[<h3 id="The-Learning-Problems"><a href="#The-Learning-Problems" class="headerlink" title="The Learning Problems"></a>The Learning Problems</h3><ul>
<li>When Can Machines Learn? (illustrative + technical)</li>
<li>Why Can Machines Learn? (theoretical + illustrative)</li>
<li>How Can Machines Learn? (technical + practical)</li>
<li>How Can Machines Learn Better? (practical + theoretical)</li>
</ul>
<h3 id="When-Can-Machines-Learn"><a href="#When-Can-Machines-Learn" class="headerlink" title="When Can Machines Learn?"></a>When Can Machines Learn?</h3><h4 id="Some-definitions"><a href="#Some-definitions" class="headerlink" title="Some definitions"></a>Some definitions</h4><p><strong>Learning</strong>: acquiring skill with experience accumulated from <strong>observations</strong></p>
<p><strong>Machine learning</strong>: acquiring skill with experience accumulated/computed from data</p>
<blockquote>
<p>data ——-&gt; ML ———&gt; sklill</p>
</blockquote>
<p><strong>Skill</strong>: improve some <strong>performance measure</strong> (e.g. prediction accuracy)</p>
<blockquote>
<p>data ——-&gt; ML ———&gt; improved performance measure</p>
</blockquote>
<h4 id="The-Machine-Learning-Route"><a href="#The-Machine-Learning-Route" class="headerlink" title="The Machine Learning Route"></a>The Machine Learning Route</h4><p>ML: an <font color="red">alternative route</font> to build complicated systems</p>
<blockquote>
<p>Give a computer a fish, you feed it for a day; teach it how to fish, you feed it for a lifetime</p>
</blockquote>
<h4 id="Key-Essence-of-Machine-Learning"><a href="#Key-Essence-of-Machine-Learning" class="headerlink" title="Key Essence of Machine Learning"></a>Key Essence of Machine Learning</h4><p><strong>Improving some performance measure with experience computed from data</strong></p>
<ul>
<li>exists some <font color="red">underlying pattern</font> to be learned</li>
<li>but no programmable (easy) definition</li>
<li>somehow there is data about the pattern</li>
</ul>
<h4 id="Formalize-the-Learning-Problem"><a href="#Formalize-the-Learning-Problem" class="headerlink" title="Formalize the Learning Problem"></a>Formalize the Learning Problem</h4><ul>
<li>inputs: $x \in \chi$</li>
<li><p>outputs:$y\in \gamma$</p>
</li>
<li><p>unknown pattern to be learned &lt;=&gt; target function</p>
</li>
</ul>
<script type="math/tex; mode=display">f: \chi \rightarrow \gamma</script><ul>
<li><p>data &lt;=&gt; training examples</p>
<script type="math/tex; mode=display">D = \{(x_1,y_1),(x_2,y_2),......(x_N,y_N)\}</script></li>
<li><p>hypothesis &lt;=&gt; skill with hopefully good performance</p>
</li>
</ul>
<script type="math/tex; mode=display">g: \chi \rightarrow \gamma</script><h3 id="Learning-Flow"><a href="#Learning-Flow" class="headerlink" title="Learning Flow"></a>Learning Flow</h3><p><img src="Learning_Model.png" alt="Learning Model.png"></p>
<h3 id="Learning-Model"><a href="#Learning-Model" class="headerlink" title="Learning Model"></a>Learning Model</h3><p><img src="Learning_Flow.png" alt="Learning Flow.png"></p>
<h3 id="Practical-Definition-of-Machine-Learning"><a href="#Practical-Definition-of-Machine-Learning" class="headerlink" title="Practical Definition of Machine Learning"></a>Practical Definition of Machine Learning</h3><blockquote class="blockquote-center">Machine Learning: use data to compute <font color="red">hypothesis g</font> that approximates <font color="red">target f</font>
 </blockquote>


<h4 id="Relationships-between-Machine-Learnig-Data-Mining-Artifical-Intelligence-and-Statics"><a href="#Relationships-between-Machine-Learnig-Data-Mining-Artifical-Intelligence-and-Statics" class="headerlink" title="Relationships between Machine Learnig, Data Mining, Artifical Intelligence and Statics"></a>Relationships between Machine Learnig, Data Mining, Artifical Intelligence and Statics</h4><ul>
<li>Machine Learning</li>
</ul>
<p>use data to compute hypothesis g that approximates target f. ML can realize AI, among other routes($g \approx f$ is something that shows intelligent behavior)</p>
<ul>
<li>Data Mining</li>
</ul>
<p>use (huge) data to find property that is interesting.</p>
<ul>
<li>Artifical Intelligence</li>
</ul>
<p>compute something that shows intelligent behavior.</p>
<ul>
<li>Statics</li>
</ul>
<p>use data to make inference about an unknown process, statistics is a useful tool for ML.</p>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Course Note</tag>
      </tags>
  </entry>
  <entry>
    <title>Introduction to Cloud Computing</title>
    <url>/Introduction-to-Cloud-Computing/2019/02/14/</url>
    <content><![CDATA[<h1 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h1><ul>
<li><a href="#overview">Overview</a><ul>
<li><a href="#goals-and-objectives">Goals and Objectives</a></li>
<li><a href="#key-phrasesconcepts">Key Phrases/Concepts</a></li>
<li><a href="#guiding-questions">Guiding Questions</a></li>
</ul>
</li>
<li><a href="#introduction">Introduction</a><ul>
<li><a href="#two-categories-of-cloud">Two categories of cloud</a></li>
</ul>
</li>
<li><a href="#what-is-a-cloud">What is a cloud?</a><ul>
<li><a href="#four-major-characteristics">Four major characteristics</a></li>
</ul>
</li>
<li><a href="#a-cloud-is-a-distribyted-system">A cloud is a distribyted system</a></li>
<li><a href="#economics-of-clouds">Economics of clouds</a></li>
<li><a href="#what-is-a-distributed-system">What is a distributed system</a><ul>
<li><a href="#our-interest-in-distributed-systems-involves">Our interest in distributed systems involves</a></li>
</ul>
</li>
<li><a href="#mapreduce-paradigm">MapReduce paradigm</a><ul>
<li><a href="#map">Map</a></li>
<li><a href="#reduce">Reduce</a></li>
</ul>
</li>
<li><a href="#mapreduce-scheduling">MapReduce Scheduling</a><ul>
<li><a href="#the-yarn-scheduler">The YARN SCHEDULER</a></li>
<li><a href="#mapreduce-example">MapReduce Example</a></li>
</ul>
</li>
<li><a href="#fault-tolerance">Fault tolerance</a><ul>
<li><a href="#stragglers">stragglers</a></li>
<li><a href="#locality">Locality</a></li>
</ul>
</li>
</ul>
<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>This week you will see what cloud computing is, a bit about its history and economics, and why cloud computing is all about distributed systems topics (which the course focuses on).</p>
<h3 id="Goals-and-Objectives"><a href="#Goals-and-Objectives" class="headerlink" title="Goals and Objectives"></a>Goals and Objectives</h3><p>After you actively engage in the learning experiences in this module, you should be able to:</p>
<ul>
<li>Know the key differences between cloud computing and previous generations of distributed systems.</li>
<li>Design MapReduce programs for a variety of problems.</li>
<li>Know how Hadoop schedules jobs.</li>
</ul>
<h3 id="Key-Phrases-Concepts"><a href="#Key-Phrases-Concepts" class="headerlink" title="Key Phrases/Concepts"></a>Key Phrases/Concepts</h3><p>Keep your eyes open for the following key terms or phrases as you complete the readings and interact with the lectures. These topics will help you better understand the content in this module.</p>
<ul>
<li>Clouds</li>
<li>MapReduce paradigm</li>
<li>Hadoop YARN</li>
</ul>
<h3 id="Guiding-Questions"><a href="#Guiding-Questions" class="headerlink" title="Guiding Questions"></a>Guiding Questions</h3><p>Develop your answers to the following guiding questions while completing the readings and working on assignments throughout the week.</p>
<ul>
<li>Why is cloud computing popular today?</li>
<li>What is different in cloud computing compared to previous generations of distributed systems?</li>
<li>How does one program in MapReduce?</li>
<li>How does the MapReduce system schedule jobs?</li>
</ul>
<h2 id="Overview-1"><a href="#Overview-1" class="headerlink" title="Overview"></a>Overview</h2><ul>
<li>Why this course is about distributed system comcepts in cloud?<ul>
<li>clouds are distributed system</li>
</ul>
</li>
<li>Cloud examples<ul>
<li>MapReduce and Hadoops</li>
</ul>
</li>
</ul>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><ul>
<li>Customers save money and time</li>
</ul>
<h3 id="Two-categories-of-cloud"><a href="#Two-categories-of-cloud" class="headerlink" title="Two categories of cloud"></a>Two categories of cloud</h3><ol>
<li>public<ul>
<li>provide service to any paying customer</li>
</ul>
</li>
<li>private<ul>
<li>accessbile only to company employees</li>
</ul>
</li>
</ol>
<h2 id="What-is-a-cloud"><a href="#What-is-a-cloud" class="headerlink" title="What is a cloud?"></a>What is a cloud?</h2><ol>
<li><p>Informal definition</p>
<blockquote>
<p>lots of storage + compute circle nearby</p>
</blockquote>
</li>
<li><p>Components</p>
<ol>
<li>a single-site cloud<ul>
<li>Compute nodes (grouped into racks) (servers)</li>
<li>Switches, connecting the racks</li>
<li>A network topology, e.g. hierarchical</li>
<li>Storage(backend) nodes, connecting to the network</li>
<li>Front-end for submiting jobs and receiveing client requests</li>
<li>Software services</li>
</ul>
</li>
<li>a geographically distributed cloud<ul>
<li>Mutiple such sites</li>
<li>Each site perhaps with different structures and services</li>
</ul>
</li>
</ol>
</li>
</ol>
<p><img src="01.png" alt></p>
<h3 id="Four-major-characteristics"><a href="#Four-major-characteristics" class="headerlink" title="Four major characteristics"></a>Four major characteristics</h3><p>Distinguish today’s clouds from previous generations of distributed computing systems and problems</p>
<ol>
<li><strong>Massive scale</strong><br> Massive-scale essentially means that data centers are very large. They contain tens of thousands, sometimes hundreds of thousands of servers and you could run your computation across as many servers as you want and as many servers as your application will scale</li>
<li><strong>On-demand access</strong><br> Pay-as-you-go, no upfront commitment. Anyone can access it<ul>
<li>HaaS: Hardware as a Service</li>
<li>IaaS: Infrastructure as a Service(Ex: Amazon Web Services (AWS: EC2 and S3))</li>
<li>PaaS: Platform as a Service(You get access to flexible computing and storage infrastructure, coupled with a software platform (often tightly), Ex: Google’s AppEngine (Python, Java, Go))</li>
<li>SaaS: Software as a Service(You get access to software services, when you need them. Often said to subsume SOA (Service Oriented Architectures), Ex: Google docs, MS Office on demand)</li>
</ul>
</li>
<li><strong>Data-intensive Nature</strong><ul>
<li>Typically store data at datacenters</li>
<li>Use compute nodes nearby</li>
<li>Compute nodes run computation services</li>
<li>In data-intensive computing, <strong>the focus shifts from computation to the data</strong>: CPU utilization no longer the most important resource metric, instead I/O is (disk and/or network)</li>
</ul>
</li>
<li><strong>New Cloud Programming Paradigms</strong><ul>
<li>MapReduce/Hadoop, NoSQL/Cassandra/MongoDB and many others.</li>
<li>Easy to write and run highly parallel programs in new cloud programming paradigms:</li>
</ul>
</li>
</ol>
<h2 id="A-cloud-is-a-distribyted-system"><a href="#A-cloud-is-a-distribyted-system" class="headerlink" title="A cloud is a distribyted system"></a>A cloud is a distribyted system</h2><ol>
<li>A cloud consists of<ul>
<li>Hundreds to thousands of machines in a datacenter (server side)</li>
<li>Thousands to millions of machines accessing these services (client side)</li>
</ul>
</li>
<li>Servers communicate amongst one another<ul>
<li>Distributed System</li>
<li>Essentially a cluster!</li>
</ul>
</li>
<li>Clients communicate with servers<ul>
<li>Also a distributed system!</li>
</ul>
</li>
<li>Clients also communicate with each other<ul>
<li>Also a distributed system!</li>
<li><img src="02.png" alt></li>
</ul>
</li>
<li><strong>Four Features of Clouds = All Distributed Systems Features</strong></li>
<li><strong>Cloud = A Fancy Word for a Distributed System</strong></li>
</ol>
<h2 id="Economics-of-clouds"><a href="#Economics-of-clouds" class="headerlink" title="Economics of clouds"></a>Economics of clouds</h2><p><img src="03.png" alt></p>
<h2 id="What-is-a-distributed-system"><a href="#What-is-a-distributed-system" class="headerlink" title="What is a distributed system"></a>What is a distributed system</h2><ul>
<li>A distributed system is a collection of independent computers that appear to the users of the system as a single computer.[Andrew Tanenbaum]</li>
<li>A distributed system is several computers doing something together. Thus, a distributed system has three primary characteristics: multiple computers, interconnections, and shared state. [Michael Schroeder]</li>
<li>A distributed system is a collection of entities, each of which is <strong>autonomous</strong>, <strong>programmable</strong>, <strong>asynchronous</strong> and failure- prone, and which communicate through an unreliable communication medium.<ul>
<li><strong>programmable</strong>,Eliminates “Humans Interacting with each other”</li>
<li><strong>asynchronous</strong>, Distinguishes distributed systems from parallel systems (e.g., multiprocessor systems)</li>
</ul>
</li>
</ul>
<h3 id="Our-interest-in-distributed-systems-involves"><a href="#Our-interest-in-distributed-systems-involves" class="headerlink" title="Our interest in distributed systems involves"></a>Our interest in distributed systems involves</h3><ul>
<li>algorithmics</li>
<li>design and implementation</li>
<li>maintenance, </li>
<li>study</li>
</ul>
<h2 id="MapReduce-paradigm"><a href="#MapReduce-paradigm" class="headerlink" title="MapReduce paradigm"></a>MapReduce paradigm</h2><ul>
<li><p>(map square (1,2,3,4))</p>
<ul>
<li>output: (1,4,9,16)<br>process each record sequentially and independently</li>
</ul>
</li>
<li><p>(reduce + (1,4,9,16))</p>
<ul>
<li>(+16 (+9 (+4)))</li>
<li>output: 30<br>process set of all records in batches </li>
</ul>
</li>
</ul>
<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><ul>
<li>Map task processes each record <strong>sequentially and independently</strong></li>
<li><strong>Parallelly</strong> process different map tasks<br>  <img src="04.png" alt></li>
</ul>
<h3 id="Reduce"><a href="#Reduce" class="headerlink" title="Reduce"></a>Reduce</h3><ul>
<li>Reduce process set of all records in batches</li>
<li>Parallelly process by partitioning records<br>  <img src="05.png" alt></li>
</ul>
<h2 id="MapReduce-Scheduling"><a href="#MapReduce-Scheduling" class="headerlink" title="MapReduce Scheduling"></a>MapReduce Scheduling</h2><p>1.Externally, for the user:</p>
<pre><code>1. write map program, write reduce program
2. submit job; wait for result
3. need to know nothing about parallel programming
</code></pre><ol>
<li>Internally, for the paradigm and scheduler<ol>
<li>Parallelize Map<ul>
<li>each Map task is independent</li>
<li>all Map output records with teh same key should assign to the same Reducer</li>
</ul>
</li>
<li>Transfer data from Map to Reduce</li>
<li>Parallelize Reduce<ul>
<li>each Reduce task is independent </li>
<li>use partition function</li>
</ul>
</li>
<li>Implement Storage for Map input, Map output, Reduce input, Reduce output<ul>
<li>Map input: DFS</li>
<li>Map output: local disk</li>
<li>Reduce input: remote disk</li>
<li>Reduce output: DFS</li>
</ul>
</li>
</ol>
</li>
</ol>
<p><img src="06.png" alt></p>
<h3 id="The-YARN-SCHEDULER"><a href="#The-YARN-SCHEDULER" class="headerlink" title="The YARN SCHEDULER"></a>The YARN SCHEDULER</h3><ul>
<li>Used in Hadoop 2.x +</li>
<li>YARN = Yet Another Resource Negotiator</li>
<li>Treats each server as a collection of containers<ul>
<li>Container = some CPU + some memory</li>
</ul>
</li>
<li>Has 3 main components<ul>
<li>Global Resource Manager (RM)<ul>
<li>scheduling</li>
</ul>
</li>
<li>Per-server Node Manager (NM)<ul>
<li>Daemon and server-specific functions</li>
</ul>
</li>
<li>Per-application (job) Application Master (AM)<ul>
<li>Container negotiation with RM and NMs</li>
<li>Detecting task failures of that job</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="07.png" alt></p>
<h3 id="MapReduce-Example"><a href="#MapReduce-Example" class="headerlink" title="MapReduce Example"></a>MapReduce Example</h3><p><img src="08.png" alt></p>
<h2 id="Fault-tolerance"><a href="#Fault-tolerance" class="headerlink" title="Fault tolerance"></a>Fault tolerance</h2><ul>
<li>Server failure<ul>
<li>NM,AM heartbeats to RM</li>
<li>NM keep track of each task running at its server</li>
</ul>
</li>
<li>RM failure<ul>
<li>use old checkpoints and bring up secondary RM</li>
</ul>
</li>
</ul>
<h3 id="stragglers"><a href="#stragglers" class="headerlink" title="stragglers"></a>stragglers</h3><ul>
<li>the slowest machine slows the entire job</li>
<li><strong>speculative exection</strong>: backup execction of straggler task</li>
</ul>
<h3 id="Locality"><a href="#Locality" class="headerlink" title="Locality"></a>Locality</h3><p><img src="09.png" alt></p>
<p><strong>Reference from some slides from Coursera course <a href="https://www.coursera.org/learn/cloud-computing" target="_blank" rel="noopener">Cloud Computing</a></strong></p>
]]></content>
      <categories>
        <category>Big Data Architecture</category>
        <category>Distributed &amp; Cloud Computing</category>
      </categories>
      <tags>
        <tag>Course Note</tag>
      </tags>
  </entry>
  <entry>
    <title>Gossip,Member,Grid</title>
    <url>/Gossip-Member-Grid/2019/02/14/</url>
    <content><![CDATA[<h1 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h1><ul>
<li><a href="#overview">Overview</a><ul>
<li><a href="#goals-and-objectives">Goals and Objectives</a></li>
<li><a href="#key-phrasesconcepts">Key Phrases/Concepts</a></li>
<li><a href="#guiding-questions">Guiding Questions</a></li>
</ul>
</li>
<li><a href="#gossip">Gossip</a><ul>
<li><a href="#what-is-multicast">what is multicast?</a></li>
<li><a href="#what-are-the-requirements-for-multicast-protocol">What are the requirements for multicast protocol?</a></li>
<li><a href="#centralized-multicast-protocol">Centralized Multicast Protocol</a></li>
<li><a href="#tree-based-multicast-protocol">Tree-Based Multicast Protocol</a></li>
<li><a href="#epidemic-multicast">Epidemic Multicast</a></li>
<li><a href="#topology-aware-gossip">Topology-Aware Gossip</a></li>
<li><a href="#gossip-summary">Gossip Summary</a></li>
</ul>
</li>
<li><a href="#member">Member</a><ul>
<li><a href="#two-sub-protocals">Two sub-protocals</a></li>
<li><a href="#failure-detection">Failure Detection</a><ul>
<li><a href="#gossip-style-failure-detection">Gossip Style Failure Detection</a></li>
<li><a href="#swim-failure-detection">Swim Failure Detection</a></li>
</ul>
</li>
<li><a href="#dissemination">Dissemination</a></li>
<li><a href="#suspicion-mechanism">Suspicion Mechanism</a></li>
<li><a href="#member-summary">Member Summary</a></li>
</ul>
</li>
<li><a href="#grid">Grid</a></li>
</ul>
<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>This week’s video lectures cover the topics of Grids, Membership, and Gossip. With this, you have all the concepts you need to complete the Programming Assignment in this course.</p>
<h3 id="Goals-and-Objectives"><a href="#Goals-and-Objectives" class="headerlink" title="Goals and Objectives"></a>Goals and Objectives</h3><p>After you actively engage in the learning experiences in this module, you should be able to:</p>
<ul>
<li>Analyze various gossip/epidemic protocols.</li>
<li>Design and analyze various distributed membership protocols.</li>
<li>Know what grid computing is.</li>
</ul>
<h3 id="Key-Phrases-Concepts"><a href="#Key-Phrases-Concepts" class="headerlink" title="Key Phrases/Concepts"></a>Key Phrases/Concepts</h3><p>Keep your eyes open for the following key terms or phrases as you interact with the lectures. These topics will help you better understand the content in this module.</p>
<ul>
<li>Failure detectors</li>
<li>Membership protocols</li>
<li>Gossip/epidemic protocols</li>
<li>Grid computing</li>
</ul>
<h3 id="Guiding-Questions"><a href="#Guiding-Questions" class="headerlink" title="Guiding Questions"></a>Guiding Questions</h3><p>Develop your answers to the following guiding questions while completing the activities throughout the week.</p>
<ul>
<li>Why are gossip and epidemic protocols fast and reliable?</li>
<li>What is the most efficient way for cloud computing systems to detect failures of servers?</li>
<li>How is grid computing related to cloud computing?</li>
</ul>
<h2 id="Gossip"><a href="#Gossip" class="headerlink" title="Gossip"></a>Gossip</h2><h3 id="what-is-multicast"><a href="#what-is-multicast" class="headerlink" title="what is multicast?"></a>what is multicast?</h3><p>Suppose you have a group of processes or a group of nodes. Each of these processes or each of these nodes is potentially a process at some host on the Internet or connected to the network. And essentially, all we need is that these processes or nodes need to be able to talk with each other by being able to <strong>send</strong> and <strong>receive</strong> messages.</p>
<h3 id="What-are-the-requirements-for-multicast-protocol"><a href="#What-are-the-requirements-for-multicast-protocol" class="headerlink" title="What are the requirements for multicast protocol?"></a>What are the requirements for multicast protocol?</h3><ul>
<li>fault tolerance</li>
<li>scalability</li>
</ul>
<h3 id="Centralized-Multicast-Protocol"><a href="#Centralized-Multicast-Protocol" class="headerlink" title="Centralized Multicast Protocol"></a>Centralized Multicast Protocol</h3><p><img src="10.png" alt></p>
<ul>
<li>If the sender fails, no one can received the multicast.</li>
<li>the overhead on the sender is very high.  O(n)</li>
</ul>
<h3 id="Tree-Based-Multicast-Protocol"><a href="#Tree-Based-Multicast-Protocol" class="headerlink" title="Tree-Based Multicast Protocol"></a>Tree-Based Multicast Protocol</h3><ul>
<li>Build a spanning tree among the processes of the multicast group</li>
<li>Use spanning tree to disseminate multicasts</li>
<li>Use either acknowledgments (ACKs) or negative acknowledgements (NAKs) to repair multicasts not received</li>
<li><strong>SRM</strong> (Scalable Reliable Multicast)<ul>
<li>Uses NAKs</li>
<li>But adds random delays, and uses exponential backoff to avoid NAK storms</li>
</ul>
</li>
<li><strong>RMTP</strong> (Reliable Multicast Transport Protocol)<ul>
<li>Uses ACKs</li>
<li>But ACKs only sent to designated receivers, which then re-transmit missing multicasts</li>
</ul>
</li>
<li>These protocols still cause an O(N) ACK/NAK overhead</li>
<li><img src="gossip_member_grid01.png" alt="gossip_member_grid01.png"></li>
</ul>
<h3 id="Epidemic-Multicast"><a href="#Epidemic-Multicast" class="headerlink" title="Epidemic Multicast"></a>Epidemic Multicast</h3><p><img src="gossip_member_grid02.png" alt></p>
<p>the sender periodically picks b nodes as gossip targets and sends them copies of the multicast message using what is known as a gossip message. When b turns from uninfected into infected they starts periodically sending out gossip message.  </p>
<ul>
<li><strong>Push</strong> gossip<ul>
<li>Once you have a multicast message, you start gossiping about it</li>
<li>Multiple messages? Gossip a random subset of them, or recently-received ones, or higher priority ones</li>
</ul>
</li>
<li><strong>Pull</strong> gossip<ul>
<li>Periodically poll a few randomly selected processes for new multicast messages that you haven’t received</li>
<li>Get those messages</li>
</ul>
</li>
<li><strong>Hybrid variant</strong>: Push-Pull<ul>
<li>As the name suggests</li>
</ul>
</li>
</ul>
<h3 id="Topology-Aware-Gossip"><a href="#Topology-Aware-Gossip" class="headerlink" title="Topology-Aware Gossip"></a>Topology-Aware Gossip</h3><p><img src="gossip_member_grid03.png" alt></p>
<ul>
<li>Network topology is hierachical</li>
<li>Random gossip target selection =&gt; core routers face O(N) load</li>
<li>In subnet i, which contains $n_i$ nodes, pick gossip target in your subnet with probability $\frac{1}{n_i}$</li>
<li>Router $load=O(1)$</li>
<li>Dissemination $time=O(log(N))$</li>
</ul>
<h3 id="Gossip-Summary"><a href="#Gossip-Summary" class="headerlink" title="Gossip Summary"></a>Gossip Summary</h3><ul>
<li>Multicast is an important problem</li>
<li>Tree-bases multicast protocols</li>
<li>When concerns the scalability and fault tolerance, the gossip protocol is a good choice</li>
<li>Also known as epidemic</li>
<li>Fast, reliable, Fault-tolerant, scalability, topology-aware</li>
</ul>
<h2 id="Member"><a href="#Member" class="headerlink" title="Member"></a>Member</h2><p>The membership list Which maintains the list of most or all of the other processes that are currently in your system and that have not yet failed. That means non-faulty processes. This membership list is accessed by a variety of applications, for instance the application might be a distributed hash table.</p>
<p><img src="11.png" alt></p>
<h3 id="Two-sub-protocals"><a href="#Two-sub-protocals" class="headerlink" title="Two sub-protocals"></a>Two sub-protocals</h3><ul>
<li>Failure Detection</li>
<li>Dissemination</li>
</ul>
<p><img src="gossip_member_grid04.png" alt></p>
<h3 id="Failure-Detection"><a href="#Failure-Detection" class="headerlink" title="Failure Detection"></a>Failure Detection</h3><p>some process find out the failure process quickly</p>
<ul>
<li>Desirable propertities<ul>
<li>Completeness (most important)</li>
<li>Accuracy</li>
<li>Speed</li>
<li>Scale</li>
</ul>
</li>
</ul>
<h4 id="Gossip-Style-Failure-Detection"><a href="#Gossip-Style-Failure-Detection" class="headerlink" title="Gossip Style Failure Detection"></a>Gossip Style Failure Detection</h4><p><img src="gossip_member_grid05.png" alt><br><img src="gossip_member_grid06.png" alt></p>
<ol>
<li>If the heartbeat has not increased for more than $T_{tail}$ seconds, the member is considered fail.</li>
<li>After $T_{cleanup}$ seconds, it will delete the member from the list.</li>
<li>N heartbeats take:<ul>
<li>O(log(n)) time to propagate if bandwith allowed per node is O(n)</li>
<li>O(Nlog(n)) time to propagate if bandwith allowed per node is O(1)</li>
</ul>
</li>
<li>Multi-level Gossip<ul>
<li><img src="12.png" alt></li>
</ul>
</li>
<li>All-to-all and gossip-based heartbeating are in fact suboptimal because they have in fact they are O(Nlog(N)) for the gossip-based heartbeating. The key here is to realize that these two protocols mix up the <strong>failure detection</strong> and the <strong>dissemination components</strong>. Essentially they are trying to have all the processes in the system detect the failure by themselves and not really using dissemination component separately.</li>
</ol>
<h4 id="Swim-Failure-Detection"><a href="#Swim-Failure-Detection" class="headerlink" title="Swim Failure Detection"></a>Swim Failure Detection</h4><ul>
<li>Two choice for the $P_j$(failure process)</li>
<li>Directed ping to $P_j$ and indirected ping to $P_j$ (Randomly select another process and then send ping to $P_j$)</li>
<li>Constant time =&gt; $O(1)$</li>
<li><img src="gossip_member_grid07.png" alt></li>
</ul>
<h3 id="Dissemination"><a href="#Dissemination" class="headerlink" title="Dissemination"></a>Dissemination</h3><ul>
<li>Multicast Dissemination(Hardware/IP)<ul>
<li>unreliable</li>
</ul>
</li>
<li>Point-to-Point <ul>
<li>expensive</li>
</ul>
</li>
<li>Infection style Dissemination</li>
</ul>
<h3 id="Suspicion-Mechanism"><a href="#Suspicion-Mechanism" class="headerlink" title="Suspicion Mechanism"></a>Suspicion Mechanism</h3><p>Suspect a process before <strong>declaring</strong> it as failed in the group</p>
<p><img src="gossip_member_grid08.png" alt></p>
<h3 id="Member-Summary"><a href="#Member-Summary" class="headerlink" title="Member Summary"></a>Member Summary</h3><ul>
<li>在数据中心中，出错是常态，并不是意外</li>
<li>每一个分布式系统都会使用错误检测器</li>
<li>很多分布式系统使用了成员关系服务</li>
<li>使用环形错误检测的有<br>  – IBM SP2和很多其他相似的集群/机器</li>
<li>使用流言式的错误检测的有<br>  – 亚马逊Amazon EC2/S3</li>
</ul>
<h2 id="Grid"><a href="#Grid" class="headerlink" title="Grid"></a>Grid</h2><blockquote>
<p>src: <a href="https://www.zhihu.com/question/20773707/answer/16583447" target="_blank" rel="noopener">https://www.zhihu.com/question/20773707/answer/16583447</a><br>网格计算的设计目标是解决对于任何单一的超级计算机来说仍然大得难以解决的问题，并同时保持解决多个较小的问题的灵活性。这样，网格计算就提供了一个多用户环境。它的第二个目标就是：更好的利用可用计算力，迎合大型的计算练习的断断续续的需求。有了网格计算技术，您可以将服务器、存储系统和网络联合在一起，组成一个大的系统，从而为用户提供功能强大的多系统资源来处理特定的任务。对于最终用户或应用程序来说，数据文件、应用程序和系统看起来就像是一个巨大的虚拟计算系统。网格计算与其他所有的分布式计算范例都有所区别：网格计算的本质在于以有效且优化的方式来利用组织中各种异构松耦合资源，来实现复杂的工作负载管理和信息虚拟化功能。</p>
</blockquote>
<p><img src="gossip_member_grid09.png" alt="gossip_member_grid09.png"></p>
<p>two level scheduling infrastructure</p>
<ul>
<li>Inter-site protol</li>
<li>Globus</li>
<li>No single entity controls the entire infrastructure(federate)</li>
</ul>
<p>网格通常使用两级调度基础架构，每个站点都运行一个站内协议，然后不同站点之间有一个协议。有时候，站内和站间协议可以是一种通用的协议。协议会进行任务的分发，决定哪个任务工作在哪个机器上面。计算资源空闲的时候，会运行协议的守护进程，去访问协议的中央服务器，寻求任务，此时协议将会分发一个任务给该计算资源。如果任务完成过程中，计算资源被本地用户使用，此时意味着计算资源不是闲置的了。那么它会停止手头得到的子任务，要么直接杀死子任务的进程，要么将中间结果整理之后返回中央服务器，以便后续的计算资源接手其任务继续运算。但是通常而言，协议的策略都是直接杀死子任务，不再返回中间结果了，因为这样的实现方法要简单一些。</p>
<p><strong>Reference from some slides from Coursera course <a href="https://www.coursera.org/learn/cloud-computing" target="_blank" rel="noopener">Cloud Computing</a></strong></p>
]]></content>
      <categories>
        <category>Big Data Architecture</category>
        <category>Distributed &amp; Cloud Computing</category>
      </categories>
      <tags>
        <tag>Course Note</tag>
      </tags>
  </entry>
  <entry>
    <title>P2P System</title>
    <url>/P2P-System/2019/02/14/</url>
    <content><![CDATA[<h1 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h1><ul>
<li><a href="#overview">Overview</a><ul>
<li><a href="#goals-and-objectives">Goals and Objectives</a></li>
<li><a href="#key-phrasesconcepts">Key Phrases/Concepts</a></li>
<li><a href="#guiding-questions">Guiding Questions</a></li>
</ul>
</li>
<li><a href="#why-study-peer-to-peer-systems">Why Study Peer-to-Peer Systems?</a></li>
<li><a href="#napster">Napster</a><ul>
<li><a href="#napster-structure">Napster Structure</a></li>
<li><a href="#client">Client</a></li>
<li><a href="#joining-a-p2p-system">Joining a P2P system</a></li>
<li><a href="#problems-for-napster">Problems for Napster</a></li>
</ul>
</li>
<li><a href="#gnutella">Gnutella</a><ul>
<li><a href="#gnutella-structure">Gnutella Structure</a></li>
<li><a href="#how-do-i-search-for-my-beatles-file">How do I search for my Beatles file?</a><ul>
<li><a href="#payload-format-in-gnutella-query-message">Payload Format in Gnutella Query Message</a></li>
<li><a href="#payload-format-in-gnutella-queryhit-message">Payload Format in Gnutella QueryHit Message</a></li>
</ul>
</li>
<li><a href="#avoiding-excessive-traffic">Avoiding excessive traffic</a></li>
<li><a href="#after-receiving-queryhit-messages">After receiving QueryHit messages</a></li>
<li><a href="#dealing-with-firewalls">Dealing with Firewalls</a></li>
<li><a href="#ping-pong">Ping-Pong</a></li>
<li><a href="#gnutella-summary">Gnutella Summary</a></li>
</ul>
</li>
<li><a href="#fasttrack">FastTrack</a><ul>
<li><a href="#fasttrack-structure">FastTrack Structure</a></li>
</ul>
</li>
<li><a href="#bittorrent">BitTorrent</a><ul>
<li><a href="#bittorrent-structure">BitTorrent Structure</a></li>
<li><a href="#bittorrent-原理简述">BitTorrent 原理简述</a></li>
</ul>
</li>
<li><a href="#chord">Chord</a><ul>
<li><a href="#comparative-performance">Comparative Performance</a></li>
<li><a href="#chord-structure">Chord Structure</a><ul>
<li><a href="#successors">successors</a></li>
<li><a href="#finger-tables">finger tables</a></li>
</ul>
</li>
<li><a href="#files">Files</a></li>
<li><a href="#search">Search</a></li>
<li><a href="#dynamic-changes">Dynamic changes</a></li>
<li><a href="#virtual-nodes">Virtual Nodes</a></li>
</ul>
</li>
<li><a href="#pastry">Pastry</a><ul>
<li><a href="#pastry-locality">Pastry Locality</a></li>
<li><a href="#kelips">Kelips</a></li>
<li><a href="#kelips-structure">Kelips Structure</a></li>
</ul>
</li>
</ul>
<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>This week we will focus on Peer-to-Peer Systems. This area is important because it is a precursor to today’s cloud computing. The topic is thus a good segue for us to discuss Key-value Stores next week (Week 4).</p>
<h3 id="Goals-and-Objectives"><a href="#Goals-and-Objectives" class="headerlink" title="Goals and Objectives"></a>Goals and Objectives</h3><p>After you actively engage in the learning experiences in this module, you should be able to:</p>
<ul>
<li>Know how Napster, Gnutella, FastTrack, and BitTorrent work.</li>
<li>Know and analyze how distributed hash tables work (Chord, Pastry, and Kelips).</li>
</ul>
<h3 id="Key-Phrases-Concepts"><a href="#Key-Phrases-Concepts" class="headerlink" title="Key Phrases/Concepts"></a>Key Phrases/Concepts</h3><p>Keep your eyes open for the following key terms or phrases as you interact with the lectures. These topics will help you better understand the content in this module.</p>
<ul>
<li>Peer-to-peer systems</li>
<li>Industrial P2P systems: Napster, Gnutella, FastTrack, BitTorrent</li>
<li>Distributed hash tables: Chord, Pastry, Kelips</li>
</ul>
<h3 id="Guiding-Questions"><a href="#Guiding-Questions" class="headerlink" title="Guiding Questions"></a>Guiding Questions</h3><p>Develop your answers to the following guiding questions while completing the readings and working on assignments throughout the week.</p>
<ul>
<li>What is the difference between how Napster clients and Gnutella clients search for files?</li>
<li>What is the difference between Gnutella and FastTrack?</li>
<li>What is BitTorrent’s tit for tat mechanism?</li>
<li>What is consistent hashing?</li>
<li>Why are DHTs efficient in searching?</li>
<li>How does Chord route queries?</li>
<li>How does Pastry route queries?</li>
<li>How does Kelips route queries?</li>
<li>What is churn in P2P systems?</li>
<li>How does Chord maintain correct neighbors in spite of failures and churn?</li>
</ul>
<h2 id="Why-Study-Peer-to-Peer-Systems"><a href="#Why-Study-Peer-to-Peer-Systems" class="headerlink" title="Why Study Peer-to-Peer Systems?"></a>Why Study Peer-to-Peer Systems?</h2><ul>
<li>First distributed systems that seriously focused on <strong>scalability</strong> with respect to number of nodes</li>
<li>P2P techniques abound in cloud computing systems</li>
</ul>
<h2 id="Napster"><a href="#Napster" class="headerlink" title="Napster"></a>Napster</h2><p>(创始人Sean Parker, 看Social Network时有讲到，哈哈)</p>
<h3 id="Napster-Structure"><a href="#Napster-Structure" class="headerlink" title="Napster Structure"></a>Napster Structure</h3><p><img src="p2p01.png" alt="p2p01.png"></p>
<h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3><ul>
<li>Connect to a Napster server<ul>
<li>Upload list of music files that you want to share</li>
<li>Server maintains list of {filename, ip_address, port_num} tuples. </li>
<li><strong>Server stores no files</strong>.</li>
</ul>
</li>
<li>Search<ul>
<li>Send server keywords to search with</li>
<li>Server searches its list with the keywords</li>
<li>Server returns a list of hosts – {ip_address, portnum} tuples – to client</li>
<li>Client pings each host in the list to find transfer rates</li>
<li>Client fetches file from best host</li>
</ul>
</li>
<li>All communication uses TCP (Transmission Control Protocol)<ul>
<li>Reliable and ordered networking protocol</li>
<li><img src="p2p02.png" alt="p2p02.png"></li>
</ul>
</li>
</ul>
<h3 id="Joining-a-P2P-system"><a href="#Joining-a-P2P-system" class="headerlink" title="Joining a P2P system"></a>Joining a P2P system</h3><ul>
<li>Send an http request to well-known url for that P2P service - <a href="http://www.myp2pservice.com" target="_blank" rel="noopener">http://www.myp2pservice.com</a></li>
<li>Message routed (after lookup in DNS) to introducer, a well known server that keeps track of some recently joined nodes in p2p system</li>
<li>Introducer initializes new peers’ neighbor table</li>
</ul>
<h3 id="Problems-for-Napster"><a href="#Problems-for-Napster" class="headerlink" title="Problems for Napster"></a>Problems for Napster</h3><ul>
<li>Centralized server a source of congestion</li>
<li>Centralized server single point of failure</li>
<li>No security: plaintext messages and passwds</li>
<li>Napster.com declared to be responsible for users’ copyright violation<ul>
<li>“Indirect infringement”</li>
</ul>
</li>
</ul>
<h2 id="Gnutella"><a href="#Gnutella" class="headerlink" title="Gnutella"></a>Gnutella</h2><ul>
<li>Eliminate the servers</li>
<li>Client machines search and retrieve amongst themselves</li>
<li>Clients act as servers too, called <strong>servents</strong></li>
<li>Gnutella protocol has 5 main message types<ul>
<li>Query (search)</li>
<li>QueryHit (response to query)</li>
<li>Ping (to probe network for other peers)</li>
<li>Pong (reply to ping, contains address of another peer)</li>
<li>Push (used to initiate file transfer)</li>
</ul>
</li>
</ul>
<h3 id="Gnutella-Structure"><a href="#Gnutella-Structure" class="headerlink" title="Gnutella Structure"></a>Gnutella Structure</h3><p><img src="p2p03.png" alt="p2p03.png"></p>
<ul>
<li>Connected in an <strong>overlay graph</strong></li>
</ul>
<h3 id="How-do-I-search-for-my-Beatles-file"><a href="#How-do-I-search-for-my-Beatles-file" class="headerlink" title="How do I search for my Beatles file?"></a>How do I search for my Beatles file?</h3><p><img src="p2p04.png" alt="p2p04.png"></p>
<h4 id="Payload-Format-in-Gnutella-Query-Message"><a href="#Payload-Format-in-Gnutella-Query-Message" class="headerlink" title="Payload Format in Gnutella Query Message"></a>Payload Format in Gnutella Query Message</h4><p><img src="p2p05.png" alt="p2p05.png"></p>
<h4 id="Payload-Format-in-Gnutella-QueryHit-Message"><a href="#Payload-Format-in-Gnutella-QueryHit-Message" class="headerlink" title="Payload Format in Gnutella QueryHit Message"></a>Payload Format in Gnutella QueryHit Message</h4><p><img src="p2p06.png" alt="p2p06.png"></p>
<h3 id="Avoiding-excessive-traffic"><a href="#Avoiding-excessive-traffic" class="headerlink" title="Avoiding excessive traffic"></a>Avoiding excessive traffic</h3><ul>
<li>To avoid duplicate transmissions, each peer maintains a list of recently received messages</li>
<li>Query forwarded to all neighbors except peer from which received</li>
<li>Each Query (identified by DescriptorID) forwarded only once</li>
<li>QueryHit routed back only to peer from which Query received with same DescriptorID</li>
<li>Duplicates with same DescriptorID and Payload descriptor (msg type) are dropped</li>
<li>QueryHit with DescriptorID for which Query not seen is dropped</li>
</ul>
<h3 id="After-receiving-QueryHit-messages"><a href="#After-receiving-QueryHit-messages" class="headerlink" title="After receiving QueryHit messages"></a>After receiving QueryHit messages</h3><ul>
<li><p>Requestor chooses “best” QueryHit responder</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">GET /get/<span class="tag">&lt;<span class="name">File</span> <span class="attr">Index</span>&gt;</span>/<span class="tag">&lt;<span class="name">File</span> <span class="attr">Name</span>&gt;</span>/HTTP/1.0\r\n</span><br><span class="line">Connection: Keep-Alive\r\n </span><br><span class="line">Range: bytes=0-\r\n </span><br><span class="line">User-Agent: Gnutella\r\n \r\n</span><br></pre></td></tr></table></figure>
</li>
<li><p>Responder then replies with file packets after this message:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">HTTP 200 OK\r\n</span><br><span class="line">Server: Gnutella\r\n </span><br><span class="line">Content-type:application/binary\r\n </span><br><span class="line">Content-length: 1024 \r\n</span><br><span class="line">\r\n</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Dealing-with-Firewalls"><a href="#Dealing-with-Firewalls" class="headerlink" title="Dealing with Firewalls"></a>Dealing with Firewalls</h3><ul>
<li>Requestor sends Push to responder asking for file transfer</li>
<li><img src="p2p07.png" alt="p2p07.png"></li>
<li>Responder establishes a TCP connection at ip_address, port specified. </li>
<li>Requestor then sends GET to responder (as before) and file is transferred as explained earlier</li>
</ul>
<h3 id="Ping-Pong"><a href="#Ping-Pong" class="headerlink" title="Ping-Pong"></a>Ping-Pong</h3><ul>
<li>Peers initiate Ping’s periodically</li>
<li>Ping’s flooded out like Query’s, Pong’s routed along reverse path like QueryHit’s</li>
<li>Pong replies used to update set of neighboring peers<ul>
<li>To keep neighbor lists fresh in spite of peers joining, leaving and failing</li>
</ul>
</li>
</ul>
<h3 id="Gnutella-Summary"><a href="#Gnutella-Summary" class="headerlink" title="Gnutella Summary"></a>Gnutella Summary</h3><ul>
<li>No servers</li>
<li>Peers/servents maintain “neighbors,” this forms an overlay graph</li>
<li>Peers store their own files</li>
<li>Queries flooded out, ttl restricted</li>
<li>QueryHit (replies) reverse path routed</li>
<li>Supports file transfer through firewalls</li>
<li>Periodic ping-pong to continuously refresh neighbor lists</li>
</ul>
<h2 id="FastTrack"><a href="#FastTrack" class="headerlink" title="FastTrack"></a>FastTrack</h2><ul>
<li>Hybrid between Gnutella and Napster</li>
</ul>
<h3 id="FastTrack-Structure"><a href="#FastTrack-Structure" class="headerlink" title="FastTrack Structure"></a>FastTrack Structure</h3><p><img src="p2p08.png" alt="p2p08.png"></p>
<ul>
<li>A supernode stores a directory listing a subset of nearby (filename,peer pointer), similar to Napster servers</li>
<li>Supernode membership changes over time</li>
<li>Any peer can become (and stay) a supernode, provided it has earned enough reputation</li>
<li>A peer searches by contacting a nearby supernode</li>
</ul>
<h2 id="BitTorrent"><a href="#BitTorrent" class="headerlink" title="BitTorrent"></a>BitTorrent</h2><h3 id="BitTorrent-Structure"><a href="#BitTorrent-Structure" class="headerlink" title="BitTorrent Structure"></a>BitTorrent Structure</h3><p><img src="p2p09.png" alt="p2p09.png"></p>
<ul>
<li>File split into blocks (32 KB – 256 KB)</li>
<li>Download Local Rarest First block policy: prefer early download of blocks that are least replicated among neighbors</li>
<li>Tit for tat bandwidth usage: Provide blocks to neighbors that provided it the best download rates</li>
<li>Choking: Limit number of neighbors to which concurrent uploads &lt;= a number (5), i.e., the “best” neighbors</li>
</ul>
<h3 id="BitTorrent-原理简述"><a href="#BitTorrent-原理简述" class="headerlink" title="BitTorrent 原理简述"></a>BitTorrent 原理简述</h3><p><strong>Reference from</strong> <a href="https://jaminzhang.github.io/p2p/BitTorrent-Principle-Introduction/" target="_blank" rel="noopener">https://jaminzhang.github.io/p2p/BitTorrent-Principle-Introduction/</a></p>
<p>与传统客户端/服务器网络通信模式不同，对等方到对等方（P2P）通信模式在近年来越来越流行起来。<br>在 P2P 模式中，服务和资源分布化，资源不集中存储在某些设备上，而是分散存储在运行 P2P 程序的设备上，<br>每一个对等方都可以为其他对等方提供服务。<br>BitTorrent（中文全称比特流，简称 BT）是一个网络文件传输协议，是能够实现点对点文件分享的技术。<br>在大多数人感觉中与 P2P 成了对等的一组概念，而它也将 P2P 技术发展到了近乎完美的地步。<br>研究 BitTorrent 协议对我们深入把握 P2P 技术，了解 Interent 网络发展的未来走向有很大的意义。</p>
<p>BitTorrent 协议是架构于 TCP/IP 协议之上的一个 P2P 文件传输协议，处于 TCP/IP 结构的应用层。<br>BitTorrent 协议本身也包含了很多具体的内容协议和扩展协议，并在不断扩充中。<br>如果有多个下载者并发的下载同一个文件，则每个下载者也同时为其它下载者上传文件，<br>这样，文件源可以支持大量的用户进行下载，而只带来适当的负载的增长。</p>
<p>BitTorrent 协议把提供下载的文件虚拟分成大小相等的块，块大小必须为 2k 的整数次方<br>（由于是虚拟分块，硬盘上并不产生各个块文件），并把每个块的索引信息和 Hash 验证码<br>写入 .torrent 文件（即种子文件，也简称为“种子”）中，作为被下载文件的“索引”。<br>下载者要下载文件内容，需要先得到相应的 .torrent 文件，然后使用 BT 客户端软件进行下载。 </p>
<p>下载时，BT 客户端首先解析 .torrent 文件得到 Tracker 地址，然后连接 Tracker 服务器。<br>Tracker 服务器回应下载者的请求，提供下载者其他下载者（包括发布者）的 IP。<br>或者，BT客户端也可解析 .torrent 文件得到 nodes 路由表，然后连接路由表中的有效节点，<br>由网络节点提供下载者其他下载者的 IP。</p>
<p>下载者再连接其他下载者，根据 .torrent 文件，两者分别对方告知自己已经有的块，<br>然后交换对方没有的数据。此时不需要其他服务器参或者其他网络节点的参与，<br>分散了单个线路上的数据流量，因此减轻了服务器负担。<br>下载者每得到一个块，需要算出下载块的 Hash 验证码与 .torrent 文件中的对比，<br>如果一样则说明块正确，不一样则需要重新下载这个块。</p>
<p>因此，下载的人越多，提供的带宽也越多，种子也会越来越多，下载速度就越快。</p>
<p>从 BT 客户端角度考虑，下载原理分为以下几步：</p>
<p>一．根据 BitTorrent 协议，文件发布者会根据要发布的文件生成提供一个 .torrent 文件。<br>客户端可从 Web 服务器上下载种子文件，并从中得到 Tracker 服务器 URL 和 DHT 网络 nodes 等信息。</p>
<p>二．根据 Tracker URL 与 Tracker 服务器建立连接，并从服务器上得到 Peers 信息。<br>或者根据 nodes 与 DHT 网络中节点通信，并从节点上得到 Peers 信息。</p>
<p>三．根据 Peers 信息与一个 Peer 建立连接，依据 Peer wire 协议完成握手，<br>并从 Peer 端下载数据文件。同时监听 Peer 的连接，并给 Peer 上传数据文件。</p>
<p>依据得到 Peers 信息的途径的不同，可分为使用 Tracker 服务器和使用 Trackerless DHT 网络两种方式。</p>
<p>基于 HTTP 的 Tracker 协议，<br>基于 UDP 的 Trackerless 协议，<br>基于 TCP 的 Peer wire 协议。</p>
<h2 id="Chord"><a href="#Chord" class="headerlink" title="Chord"></a>Chord</h2><p>Uses Consistent Hashing on node’s (peer’s) address</p>
<ul>
<li>SHA-1(ip_address,port) -&gt; 160 bit string</li>
<li>Truncated to m bits</li>
<li>Called peer id (number between 0 and 2m −1 )</li>
<li>Not unique but id conflicts very unlikely</li>
<li>Can then map peers to one of 2m logical points on a circle</li>
</ul>
<h3 id="Comparative-Performance"><a href="#Comparative-Performance" class="headerlink" title="Comparative Performance"></a>Comparative Performance</h3><p><img src="p2p10.png" alt="p2p10.png"></p>
<h3 id="Chord-Structure"><a href="#Chord-Structure" class="headerlink" title="Chord Structure"></a>Chord Structure</h3><p>Tow pointers</p>
<h4 id="successors"><a href="#successors" class="headerlink" title="successors"></a>successors</h4><p><img src="p2p11.png" alt="p2p11.png"></p>
<p>Uses Consistent Hashing on node’s (peer’s) address  </p>
<ul>
<li>SHA-1(ip_address,port) -&gt; 160 bit string</li>
<li>Truncated to m bits</li>
<li>Called peer id (number between 0 and $2^m-1$)</li>
<li>Not unique but id conflicts very unlikely</li>
<li>Can then map peers to one of $2^m$ logical points on a circle</li>
</ul>
<h4 id="finger-tables"><a href="#finger-tables" class="headerlink" title="finger tables"></a>finger tables</h4><p><img src="p2p12.png" alt="p2p12.png"></p>
<h3 id="Files"><a href="#Files" class="headerlink" title="Files"></a>Files</h3><p>Filenames also mapped using same consistent hash function</p>
<ul>
<li>SHA-1(filename)-&gt;160 bit string (key)</li>
<li>File is stored at <strong>first peer with id greater than its key(mod 2^m)</strong></li>
<li>Consistent Hashing =&gt; with K keys and N peers, each peer stores O(K/N) keys</li>
</ul>
<h3 id="Search"><a href="#Search" class="headerlink" title="Search"></a>Search</h3><ul>
<li>At node n, send query for key k to largest successor/finger entry &lt;= k if none exist, send query to successor(n) </li>
<li><img src="p2p13.png" alt="p2p13.png"></li>
<li>Search takes O(log(N)) time</li>
<li>O(log(N)) search time holds for file insertions too (in general for routing to any key)</li>
<li>Failure in Chord<ul>
<li>maintain r multiple successor entries</li>
<li>replicate file/key at r successors and predecessors</li>
</ul>
</li>
</ul>
<h3 id="Dynamic-changes"><a href="#Dynamic-changes" class="headerlink" title="Dynamic changes"></a>Dynamic changes</h3><ul>
<li><p>New peers joining </p>
<ul>
<li>Introducer directs N40 to N45 (and N32)</li>
<li>N32 updates successor to N40</li>
<li>N40 initializes successor to N45, and inits fingers from it N40 periodically talks to neighbors to update finger table</li>
<li>N40 may need to copy some files/keys from N45 (files with fileid between 32 and 40)</li>
<li>A new peer affects O(log(N)) other finger entries in the system, on average</li>
</ul>
</li>
<li><p>Stabilization Protocol<br><strong>Concurrent peer joins, leaves, failures might cause loopiness of pointers and failure of lookups</strong></p>
<ul>
<li>Chord peers periodically run a stabilization algorithm that checks and updates pointers and keys</li>
</ul>
</li>
</ul>
<h3 id="Virtual-Nodes"><a href="#Virtual-Nodes" class="headerlink" title="Virtual Nodes"></a>Virtual Nodes</h3><p><strong>Hash can get non-uniform -&gt; Bad load balancing</strong></p>
<ul>
<li>Treat each node as multiple virtual nodes<br>behaving independently</li>
<li>Each joins the system</li>
<li>Reduces variance of load imbalance</li>
</ul>
<h2 id="Pastry"><a href="#Pastry" class="headerlink" title="Pastry"></a>Pastry</h2><ul>
<li>Assigns ids to nodes, just like Chord (using a virtual ring)</li>
<li><strong>Leaf Set</strong> – Each node knows its successor(s) and predecessor(s)</li>
<li>Routing tables based prefix matching(Routing is thus based on prefix matching and is thus log(N))</li>
</ul>
<h3 id="Pastry-Locality"><a href="#Pastry-Locality" class="headerlink" title="Pastry Locality"></a>Pastry Locality</h3><ul>
<li>For each prefix, say 011, among all potential neighbors with a matching prefix, the neighbor with the shortest round-trip time is selected</li>
<li>Since shorter prefixes have many more candidates (spread out throughout the Internet), the neighbors for shorter prefixes are likely to be closer than the neighbors for longer prefixes</li>
<li>Thus, in the prefix routing, early hops are short and later hops are longer</li>
</ul>
<h3 id="Kelips"><a href="#Kelips" class="headerlink" title="Kelips"></a>Kelips</h3><p><strong>A 1 hop Lookup DHT</strong></p>
<h3 id="Kelips-Structure"><a href="#Kelips-Structure" class="headerlink" title="Kelips Structure"></a>Kelips Structure</h3><p><img src="p2p14.png" alt="p2p014.png"></p>
<ul>
<li>k “affinity groups” k ~ sqrt(N)</li>
<li>Each node hashed to a group (hash mod k)</li>
<li>Node’s neighbors<ul>
<li>(Almost) all other nodes in its own affinity group</li>
<li>One contact node per foreign affinity group</li>
</ul>
</li>
<li>File can be stored at any (few) node(s)</li>
<li>Decouple file replication/location (outside Kelips) from file querying (in Kelips)</li>
<li>Each filename hashed to a group</li>
<li>All nodes in the group replicate pointer information, i.e., <filename, file location></filename,></li>
<li>Affinity group does not store files</li>
<li>Lookup<ul>
<li>Find file affinity group</li>
<li>Go to your contact for the file affinity group</li>
<li>Failing that try another of your neighbors to find a contact</li>
</ul>
</li>
</ul>
<p><strong>Reference from some slides from Coursera course <a href="https://www.coursera.org/learn/cloud-computing" target="_blank" rel="noopener">Cloud Computing</a></strong></p>
]]></content>
      <categories>
        <category>Big Data Architecture</category>
        <category>Distributed &amp; Cloud Computing</category>
      </categories>
      <tags>
        <tag>Course Note</tag>
      </tags>
  </entry>
  <entry>
    <title>Dive into blog</title>
    <url>/Dive-into-blog/2019/02/13/</url>
    <content><![CDATA[<p>前天为了搭建 hadoop 集群，被网络上语言含糊不清的教程搞得精疲力尽，于是萌发了自己写技术博客的想法。</p>
<h4 id="开始搭建了"><a href="#开始搭建了" class="headerlink" title="开始搭建了"></a>开始搭建了</h4><ul>
<li>Hexo做博客框架不错，就它了。于是我纠结了两个小时选什么主题。Next肯定是第一个排除的，因为用的人太多了，我要不一样。Daily也不错，简洁大方，符合我的气质，就它吧。我去，Daily连个打赏系统都没集成啊，这不妨碍我赚钱吗。算了，还是Next吧。嗯，真香。</li>
<li>部署就选Github Page，没必要额外买服务器。</li>
<li><a href="https://zhangruochi.github.io" target="_blank" rel="noopener">zhangruochi.github.io</a>的域名不行，看上去不高端，散发着程序猿气质。于是我去买了<a href="https://zhangruochi.com">zhangruochi.com</a>，Godaddy上买的，二十多刀，很便宜。</li>
<li>第一个要做的功能必须是打赏系统，比较顺利，Next已经集成了。</li>
<li>评论系统纠结了很久, 后来发现没什么好纠结的。基本上要么被墙要么停止服务。什么，你说gitment？ 那也不考虑，我的博客怎么能局限于程序猿圈呢。就来必力吧，你看名字多可爱。</li>
<li>分享系统用自带的BaiduShare，虽然丑了点。</li>
</ul>
<h4 id="差不多可以上线了"><a href="#差不多可以上线了" class="headerlink" title="差不多可以上线了"></a>差不多可以上线了</h4><ul>
<li>因为Github不会将站点信息提交给搜索引擎，<a href="https://zhangruochi.github.io" target="_blank" rel="noopener">Dore’s blog</a>作为一个技术博客，baidu, google什么的都搜索不到，这不行，这么有价值的博文不是写给我自己看的。于是开始做seo优化。首先是验证站点，google和baidu两者都验证通不过，不管是文件验证 还是html标签验证。折腾了几个小时，发现文件验证不通过的原因是Hexo生成网站时会修改google和baidu提供的验证文件。这好办，在验证文件开头加上 <code>layout: false</code>。</li>
<li>生成sitemap, 提交sitemap，测试robots.txt，比较顺利。</li>
</ul>
<h4 id="终于能搜索到了"><a href="#终于能搜索到了" class="headerlink" title="终于能搜索到了"></a>终于能搜索到了</h4><ul>
<li>不对啊，打开网站经常会显示website coming soon页面，但是多刷新几次又没问题，这是什么磨人的小bug。而且现在网站是http协议，不是https, Chorme总是显示Not Secure。去Github Page页面修改强行使用https，然而选择不了。折腾一圈发现是在 Godaddy上添加了一个多余的DNS解析，删除之后可以选择强制https了。</li>
<li>我去，强制https之后safari和chorme都显示网站不被信任, 进不去了。又找了一圈方案，说要购买ssl证书,然而Github Page不支持上传证书。后来找到解决方案，使用<strong>DNSPod</strong>解析DNS, 修改DNSPod为default nameserver. </li>
</ul>
<h4 id="终于能正常登陆了"><a href="#终于能正常登陆了" class="headerlink" title="终于能正常登陆了"></a>终于能正常登陆了</h4><ul>
<li>然而，分享系统又不能用了，原来是因为BaiduShare不支持https. 我为什么要用百度家的产品? 想起小恶魔的台词，“Next time I have an idea like that, just punch me in the face.” </li>
<li>于是使用ShareSDK, 本地测试没问题，但是联网会出错。发现是https限制http的外链接。好的，修改一下src tag，可以了。但是ShareSDK长得丑啊，于是又来了一顿操作，添加新的css和js。</li>
</ul>
<h4 id="基本满意了"><a href="#基本满意了" class="headerlink" title="基本满意了"></a>基本满意了</h4><p>我更加精疲力尽，写什么博客，<strong>Next time I have an idea like that, just punch me in the face</strong>。</p>
]]></content>
      <categories>
        <category>Debris</category>
      </categories>
  </entry>
  <entry>
    <title>值得期待的一块零一分 --鹿麒序</title>
    <url>/Hello-Blog/2019/02/12/</url>
    <content><![CDATA[<blockquote>
<p><strong>那天一句玩笑说建好博客让鹿总给我写个序，今天终于看到了。挺不好意思的。别人一夸我，我就扭捏，总担心别人夸得还不够😝。以下是序的正文。</strong></p>
</blockquote>
<p>狄更斯说，这是最好的时代，这是最坏的时代；有人直上天堂，有人直下地狱。所以当下的这个时代给予我们的到底是什么，我觉得这是一个很难回答的问题。</p>
<p>应该是从大三开始，在即将面临社会的时候我产生了更多的自我怀疑，经常问自己“你到底想做什么，你以后会做什么呢”。那个时候我很羡慕两种人。一种是从来不会认真思考这个问题，随遇而安的人，另一种是有着明确的目标，并为之不断努力的人。老实说，其实这是两种极端，前一种人说得难听的可以是“不思进取”，但是往往他们也容易满足，能在自己的世界里过得很幸福。后一种人可以说是“野心太大”，但是这样的人也容易充实自己。反观我，就是那种不尴不尬，不上不下的一类。不满足于现在的生活可是也没有明确的目标。</p>
<p>也是在这种情况下，我选择出国留学，觉得对我来说这也是逃避社会逃避现实的好的方式。圈子广了，接触的人多了，但是大部分人也还是可以按照上面说的道理分成三种。张若驰（以下称为张老师，叫他全名实在有点不习惯）就是我说的目标明确并且不断努力的人。</p>
<p>其实张老师让我写序，我也不知道写点啥，于是打算讲讲我对他的看法。</p>
<p>张老师是这样一种人：他从来不避讳自己取得的一些成绩，也从来不会夸大自己的成就。也可能是他真的太厉害，所以不管他在生活里还是朋友圈里怎么讲自己，我的第一反应总是“牛逼，不愧是张老师”。其实，跟他相处的时候只要你好好留意，就会发现他是个很有目标性的人。比如说，他吃饭的时候很快，往往我吃了一半还不到，他已经差不多了。他等你的这个时候，大部分时间里他都是一个人在沉思或者跟你讲讲他对自己未来有什么规划。因为和国内的时差，他也经常性会在半夜开会。为了自己项目里的问题或者刷题，在图书馆熬夜，通宵也是常有的事。打开他的linkedin，上面也写满了他发的论文和上过的有分量的课。可能也是为什么我发现他的眼眶下面是青黑的原因吧。</p>
<p>说实话，这样的生活如果安在我身上，那我多半受不了。但是我也没有问过他累不累，因为每次这种时候我都会想到之前问我发小“一直这么努力不会觉得很辛苦吗”，她当时回答我“习惯了就不觉得了”。</p>
<p>张老师跟许多程序员不一样的是，通过跟他的接触，你会发现他是一个读过很多书，对这个社会很有想法的文化人。同时，张老师跟许多人不一样的是，大家都知道自己是被生活推着走，但是他在被推着走的时候，也在思考怎样最大化发挥自己的价值去影响这个世界。</p>
<p>写到这儿我顿悟了。一开始他自己写这个blog我只觉得这是文化人和处女座对于一些完美事物的执着，但是现在我明白了，这个blog或许也是他的一种知识输出，是一种他用来影响别人的方式。而我，作为一个被用来测试网站的小白羊，对张老师的blog充满了自信。刚起步的时候，张老师的知识分享也都是比较浅显的东西，但这几天我每天睡醒都会看到他半夜给我发的告诉我他又做了哪方面的改进。虽然现在我只花了一块零一分，但这样我也算是入股了吧，等到以后这个blog真的开始发挥它的价值的时候，我觉得我的一块零一分的价值也会乘十乘百乘千乘万乘亿地增长。<br>和它一起的，我相信也一定是张老师之于这个社会，这个时代的价值。</p>
<p>所以，只要够主动够幸运够优秀，这个时代给予我们的东西，总有一天是能通过自己的身体力行去感知的。<br>最后，我想代表我们大家对张老师说一句：“苟富贵，勿相忘。”</p>
]]></content>
      <categories>
        <category>Private</category>
      </categories>
  </entry>
</search>
