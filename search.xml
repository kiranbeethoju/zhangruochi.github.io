<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Matrix Algebra for Engineers (part two)]]></title>
    <url>%2FMatrix-Algebra-for-Engineers-part-two%2F2019%2F03%2F17%2F</url>
    <content type="text"><![CDATA[reference from _Matrix Algebra for Engineers_ by Jeffrey R. Chasnov Vector spaces A vector space consists of a set of vectors and a set of scalars. For the set of vectors and scalars to form a vector space, the set of vectors must be closed under vector addition and scalar multiplication. That is, when you multiply any two vectors in the set by real numbers and add them, the resulting vector must still be in the set. As an example: \begin{pmatrix} \mu_{1} \\ \mu_{2} \\ \mu_{3} \\ \end{pmatrix}, \begin{pmatrix} \nu_{1} \\ \nu_{2} \\ \nu_{3} \\ \end{pmatrix}then w = a\mu + b\nu = \begin{pmatrix} a\mu_{1} + b\nu_{1} \\ a\mu_{2} + b\nu_{2} \\ a\mu_{3} + b\nu_{3} \\ \end{pmatrix}so that the set of all three-by-one matrices (together with the set of real numbers) is a vector space. This space is usually called \mathbb{R^{3}}. Linear independenceThe set of vectors, ${u_{1}, u_{2}, . . . , u_{n}}$, are linearly independent if for any scalars $c_{1}, c_{2}, . . . , c_{n}$, the equation c_{1}u_{1}+c_{2}u_{2}+···+c_{n}u_{n} = 0has only the solution $c_{1} = c_{2} = ··· = c_{n} = 0$ Span, basis and dimensionSpanGiven a set of vectors, one can generate a vector space by forming all linear combinations of that set of vectors. The span of the set of vectors ${v_{1}, v_{2}, . . . , v_{n}}$ is the vector space consisting of all linear combinations of $v_{1}, v_{2}, . . . , v_{n}$. We say that a set of vectors spans a vector space. basisThe smallest set of vectors needed to span a vector space forms a basis for that vector space dimensionThe number of vectors in a basis gives the dimension of the vector space Gram-Schmidt processGiven any basis for a vector space, we can use an algorithm called the Gram-Schmidt process to construct an orthonormal basis for that space Let the vectors $v_{1}, v_{2}, . . . , v_{n}$ be a basis for some n- dimensional vector space. We will assume here that these vectors are column matrices, but this process also applies more generally. We will construct an orthogonal basis $u_{1}, u_{2}, . . . , u_{n}$, and then normalize each vector to obtain an orthonormal basis. First, define $u_{1} = v_{1}$, To find the next orthogonal basis vector, define u_{2} = v_{2} - \frac{(u_{1}^{T}v_{2})u_{1}}{u_{1}^{T}u_{1}}The next orthogonal vector in the new basis can be found from u_{3} = v_{3} - \frac{(u_{1}^{T}v_{3})u_{1}}{u_{1}^{T}u_{1}} - \frac{(u_{2}^{T}v_{3})u_{2}}{u_{2}^{T}u_{2}}We can continue in this fashion to construct n orthogonal basis vectors. These vectors can then be normalized via \hat{u_{1}} = \frac{u_{1}}{(u_{1}^{T}u_{1})^{\frac{1}{2}}}Null spaceThe null space of a matrix A, which we denote as Null(A), is the vector space spanned by all column vectors x that satisfy the matrix equation Ax = 0To find a basis for the null space of a noninvertible matrix, we bring A to reduced row echelon form. A = \begin{pmatrix} -3 & 6 & -1 & 1 & -1 \\ 1 & -2 & 2 & 3 & -1 \\ 2 & -4 & 5 & 8 & -4 \\ \end{pmatrix} \rightarrow A = \begin{pmatrix} 1 & -2 & 0 & -1 & 3 \\ 0 & 0 & 1 & 2 & -2 \\ 0 & 0 & 0 & 0 & 0 \\ \end{pmatrix}We call the variables associated with the pivot columns, x1 and x3, basic variables, and the variables associated with the non-pivot columns, x2, x4 and x5, free variables. Writing the basic variables on the left-hand side of the $Ax = 0$ equations, we have from the first and second rows \begin{align*} x_{1} = 2x_{2} + x_{4} - 3x_{5}, \\ x_{3} = -2x_{4} + 2x_{5}, \\ \end{align*}Eliminating x1 and x3, we can write the general solution for vectors in Null(A) as \begin{pmatrix} 2x_{2} + x_{4} - 3x_{5} \\ x_{2} \\ -2x_{4} + 2x_{5} \\ x_{4} \\ x_{5} \\ \end{pmatrix} = x_{2} \begin{pmatrix} 2 \\ 1 \\ 0 \\ 0 \\ 0 \\ \end{pmatrix} + x_{4} \begin{pmatrix} 1 \\ 0 \\ -2 \\ 1 \\ 0 \\ \end{pmatrix} + x_{5} \begin{pmatrix} -3 \\ 0 \\ 2 \\ 0 \\ 1 \\ \end{pmatrix}where the free variables $x_{2}$, $x_{4}$, and $x_{5}$ can take any values. By writing the null space in this form, a basis for Null(A) is made evident, and is given by \left\{ \begin{pmatrix} 2 \\ 1 \\ 0 \\ 0 \\ 0 \\ \end{pmatrix}, \begin{pmatrix} 1 \\ 0 \\ -2 \\ 1 \\ 0 \\ \end{pmatrix}, \begin{pmatrix} -3 \\ 0 \\ 2 \\ 0 \\ 1 \\ \end{pmatrix} \right\}Application of the null spaceAn underdetermined system of linear equations $Ax = b$ with more unknowns than equations may not have a unique solution If u is the general form of a vector in the null space of A, and v is any vector that satisfies $Av = b$, then $x = u+v$ satisfies $Ax = A(u+v) = Au+Av = 0+b = b$. The general solution of $Ax = b$ can therefore be written as the sum of a general vector in Null(A) and a particular vector that satisfies the underdetermined system. As an example, \begin{align*} 2x_{1} + 2x_{2} + x_{3} = 0, \\ 2x_{1} − 2x_{2} − x_{3} = 1, \\ \end{align*}We first bring the augmented matrix to reduced row echelon form: \begin{pmatrix} 2 & 2 & 1 & 0 \\ 2 & -2 & -1 & 1 \\ \end{pmatrix} \rightarrow \begin{pmatrix} 1 & 0 & 0 & \frac{1}{4} \\ 0 & 1 & \frac{1}{2} & -\frac{1}{4} \\ \end{pmatrix}The null space is determined from $x_{1} = 0$ and $x_{2} = −\frac{x_{3}}{2}$, and we can write Null(A) = span \left\{ \begin{pmatrix} 0 \\ -1 \\ 2 \end{pmatrix}\right\}The general solution to the original underdetermined linear system is the sum of the null space and the particular solution and is given by \begin{pmatrix} x_{1} \\ x_{2} \\ x_{3} \\ \end{pmatrix} = a \begin{pmatrix} 0 \\ -1 \\ 2 \\ \end{pmatrix} + \frac{1}{4} \begin{pmatrix} 1 \\ -1 \\ 0 \\ \end{pmatrix}Column spaceThe column space of a matrix is the vector space spanned by the columns of the matrix. When a matrix is multiplied by a column vector, the resulting vector is in the column space of the matrix, ascan be seen from \begin{pmatrix} a & b \\ c & d \\ \end{pmatrix} \begin{pmatrix} x \\ y \\ \end{pmatrix} = \begin{pmatrix} ax + by \\ cx + dy \\ \end{pmatrix} = x \begin{pmatrix} a \\ c \\ \end{pmatrix} + y \begin{pmatrix} b \\ d \\ \end{pmatrix}Recall that the dimension of the null space is the number of non-pivot columns—equal to the number of free variables—so that the sum of the dimensions of the null space and the column space is equal to the total number of columns—equal dim(Col(A)) + dim(Null(A)) = n.Row space, left null space and rankIn addition to the column space and the null space, a matrix A has two more vector spaces associated with it, namely the column space and null space of $A^{T}$, which are called the row space and the left null space. Furthermore, the dimension of the column space of A is also equal to the number of pivot columns,so that the dimensions of the column space and the row space of a matrix are equal. We have dim(Col(A)) = dim(Row(A)).We call this dimension the rank of the matrix A Orthogonal projectionsSuppose that V is an n-dimensional vector space and W is a p-dimensional subspace of V. In general, the orthogonal projection of v onto W is given by v_{proj_{W}} = (v^{T}s_{1})s_{1} + (v^{T}s_{2})s_{2} + · · · + (v^{T}s_{p})s_{p};and we can write v=v_{proj_{W}} +(v−v_{proj_{W}})$v_{proj_{W}}$ is closer to v than any other vector in W The least-squares problem These equations constitute a system of n equations in the two unknowns $\beta_{0}$ and $\beta_{1}$. The correspondingmatrix equation is given by: \begin{pmatrix} 1 & x_{1} \\ 1 & x_{2} \\ \vdots \\ 1 & x_{n} \\ \end{pmatrix} \begin{pmatrix} \beta{0} \\ \beta{1} \\ \end{pmatrix} = \begin{pmatrix} y_{1} \\ y_{2} \\ \vdots \\ y_{n} \end{pmatrix}This is an overdetermined system of equations with no solution. The problem of least squares is to find the best solution. We can generalize this problem as follows. Suppose we are given a matrix equation, $Ax = b$, that has no solution because b is not in the column space of A. So instead we solve $Ax = b_{projCol(A)}$ , where $b_{projCol(A)}$ is the projection of b onto the column space of A. The solution is then called the least-squares solution for x. b_{projCol(A)} = A(A^{T}A)^{−1}A^{T}b.Laplace expansion \begin{vmatrix} a & b & c \\ d & e & f \\ g & h & i \\ \end{vmatrix} = aei+bfg+cdh−ceg−bdi−afh = a(ei− fh)−b(di− fg)+c(dh−eg) \\which can be written suggestively as \begin{vmatrix} a & b & c \\ d & e & f \\ g & h & i \\ \end{vmatrix} = a \begin{vmatrix} e & f \\ h & i \\ \end{vmatrix} - b \begin{vmatrix} d & f \\ g & i \\ \end{vmatrix} + c \begin{vmatrix} d & e \\ g & h \\ \end{vmatrix}Properties of a determinant Property 1: The determinant of the identity matrix is one; Property 2: The determinant changes sign under row interchange; Property 3: The determinant is a linear function of the first row, holding all other rows fixed. The eigenvalue problemLet A be a square matrix, x a column vector, and λ a scalar. The eigenvalue problem for A solves Ax = \lambda xfor eigenvalues $\lambda_{i}$ with corresponding eigenvectors $x_{i}$. Making use of the identity matrix I, the eigenvalue problem can be rewritten as (A−\lambda I)x = 0For there to be nonzero eigenvectors, the matrix $(A − \lambda I)$ must be singular, that is, det(A−\lambda I) = 0.Matrix diagonalizationFor concreteness, consider a two-by-two matrix A with eigenvalues and eigenvectors given by \lambda_{1}, x_{1} = \begin{pmatrix} x_{11}\\ x_{21}\\ \end{pmatrix} ; \lambda_{2}, x_{2} = \begin{pmatrix} x_{12}\\ x_{22}\\ \end{pmatrix}And consider the matrix product and factorization given by A \begin{pmatrix} x_{11} & x_{12} \\ x_{21} & x_{22} \\ \end{pmatrix} = \begin{pmatrix} \lambda_{1}x_{11} & \lambda_{2}x_{12} \\ \lambda_{1}x_{21} & \lambda_{2}x_{22} \\ \end{pmatrix} = \begin{pmatrix} x_{11} & x_{12} \\ x_{21} & x_{22} \\ \end{pmatrix} \begin{pmatrix} \lambda_{1} & 0 \\ 0 & \lambda_{2} \\ \end{pmatrix}Generalizing, we define S to be the matrix whose columns are the eigenvectors of A, and Λ to be the diagonal matrix with eigenvalues down the diagonal. Then for any n-by-n matrix with n linearly independent eigenvectors, we have AS = SΛwhere S is an invertible matrix. Multiplying both sides on the right or the left by $S^{−1}$, we derive therelations A = SΛS^{−1} \quad or \quad Λ = S^{−1}AS.Powers of a matrixSuppose that A is diagonalizable, and consider A^{p} = (SΛS^{−1})(SΛS^{−1}) = SΛ^{p}S^{−1} \begin{pmatrix} \lambda_{1} & 0 \\ 0 & \lambda_{2} \\ \end{pmatrix} \begin{pmatrix} \lambda_{1} & 0 \\ 0 & \lambda_{2} \\ \end{pmatrix} = \begin{pmatrix} \lambda_{1}^{2} & 0 \\ 0 & \lambda_{2}^{2} \\ \end{pmatrix}]]></content>
      <categories>
        <category>Linear Algebra</category>
      </categories>
      <tags>
        <tag>Eigenvalues and eigenvectors</tag>
        <tag>Vector spaces</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Matrix Algebra for Engineers (part one)]]></title>
    <url>%2FMatrix-Algebra-for-Engineers-part-one%2F2019%2F03%2F17%2F</url>
    <content type="text"><![CDATA[reference from _Matrix Algebra for Engineers_ by Jeffrey R. Chasnov Inner and outer productsThe inner product (or dot product or scalar product) between two vectors is obtained from the ma- trix product of a row vector times a column vector \mu^{T}\nu = ( \mu_{1} \quad \mu_{2} \quad \mu_{3} ) \begin{pmatrix} \nu_{1} \\ \nu_{2} \\ \nu_{3} \end{pmatrix} = \mu_{1}\nu_{1} + \mu_{2}\nu_{2} + \mu_{3}\nu_{3}.If the inner product between two vectors is zero, we say that the vectors are orthogonal. The norm of a vector is defined by \lVert \mu \rVert = (\mu^{T}\mu) = ( \mu_{1}^{2} + \mu_{2}^{2} + \mu_{3}^{2} )^{\frac{1}{2}}If the norm of a vector is equal to one, we say that the vector is normalized. If a set of vectors are mutually orthogonal and normalized, we say that these vectors are orthonormal. An outer product is also defined, and is used in some applications. The outer product between u and v is given by \mu\nu^{T} = \begin{pmatrix} \mu_{1} \\ \mu_{2} \\ \mu_{3} \end{pmatrix} ( \nu_{1} \quad \nu_{2} \quad \nu_{3} ) = \begin{pmatrix} \mu_{1}\nu_{1} & \mu_{1}\nu_{2} & \mu_{1}\nu_{3} \\ \mu_{2}\nu_{1} & \mu_{2}\nu_{2} & \mu_{2}\nu_{3} \\ \mu_{3}\nu_{1} & \mu_{3}\nu_{2} & \mu_{3}\nu_{3} \\ \end{pmatrix}Inverse matrixSquare matrices may have inverses. When a matrix A has an inverse, we say it is invertible and denote its inverse by $A^{−1}$. The inverse matrix satisfies AA^{−1} = A^{−1}A = I.A^{-1} = \frac{1}{ad-bc} \begin{pmatrix} d & -b \\ -c & a \\ \end{pmatrix} det \ A = \begin{vmatrix} a & b \\ c & d \\ \end{vmatrix} = ad - bcThe determinant of a two-by-two matrix is the product of the diagonals minus the product of the off-diagonals. Evidently, A is invertible only if $det \quad A \neq 0.$ Notice that the inverse of a two-by-two matrix, in words, is found by switching the diagonal elements of the matrix, negating the off-diagonal elements, and dividing by the determinant.Later, we will show that an n-by-n matrix is invertible if and only if its determinant is nonzero. This will require a more general definition of determinant. Orthogonal matricesA square matrix Q with real entries that satisfies Q^{−1} = Q^{T}is called an orthogonal matrix. Since the columns of $Q^{T}$ are just the rows of Q, and $QQ^{T}$ = I, the row vectors that form Q mustbe orthonormal. Similarly, since the rows of $Q^{T}$ are just the columns of Q, and $Q^{T}Q$ = I, the column vectors that form Q must also be orthonormal. Rotation matrices Writing the equations for $x’$ and $y’$ in matrix form, we have \begin{pmatrix} x' \\ y' \\ \end{pmatrix} = \begin{pmatrix} cos\theta & -sin\theta \\ sin\theta & cos\theta \\ \end{pmatrix} = \begin{pmatrix} x \\ y \\ \end{pmatrix}The above two-by-two matrix is a rotation matrix and we will denote it by $R_{θ}$. Observe that the rows and columns of $R_{θ}$ are orthonormal and that the inverse of $R_{θ}$ is just its transpose. The inverse of $R_{θ}$ rotates a vector by −θ. Permutation matricesAnother type of orthogonal matrix is a permutation matrix. An n-by-n permutation matrix, when multiplying on the left permutes the rows of a matrix, and when multiplying on the right permutes the columns. Clearly, permuting the rows of a column vector will not change its norm. \begin{pmatrix} 0 & 1 \\ 1 & 0 \\ \end{pmatrix} \begin{pmatrix} a & b \\ c & d \\ \end{pmatrix} = \begin{pmatrix} c & d \\ a & b \\ \end{pmatrix} \begin{pmatrix} a & b \\ c & d \\ \end{pmatrix} \begin{pmatrix} 0 & 1 \\ 1 & 0 \\ \end{pmatrix} = \begin{pmatrix} b & a \\ d & c \\ \end{pmatrix}Gaussian elimination \begin{align*} −3x_{1} + 2x_{2} − x_{3} = −1 \\ 6x_{1} − 6x_{2} + 7x_{3} = −7, \\ 3x_{1} − 4x_{2} + 4x_{3} = −6, \\ \end{align*}which can be written in matrix form as \begin{pmatrix} -3 & 2 & -1 & -1 \\ 6 & -6 & 7 & -7 \\ 3 & -4 & 4 & -6 \\ \end{pmatrix}Row reduction is then performed on this augmented matrix. Allowed operations are (1) interchange the order of any rows, (2) multiply any row by a constant, (3) add a multiple of one row to another row. These three operations do not change the solution of the original equations. The goal here is to convert the matrix A into upper-triangular form, and then use this form to quickly solve for the unknowns x. We first form what is called an augmented matrix by combining the matrix A with thecolumn vector b \begin{pmatrix} -3 & 2 & -1 & -1 \\ 0 & -2 & 5 & -9 \\ 0 & -2 & 3 & -7 \\ \end{pmatrix}These equations can be solved by back substitution, starting from the last equation and workingbackwards. We have \begin{align*} & x_{3} = −1, \\ & x_{2} = −\frac{1}{2}(−9−5x_{3})=2, \\ & x_{1} = −\frac{1}{3}(−1+x_{3}−2x_{2})=2. \\ \end{align*}We have thus found the solution \begin{pmatrix} x_{1} \\ x_{2} \\ x_{3} \\ \end{pmatrix} = \begin{pmatrix} 2 \\ 2 \\ -1 \\ \end{pmatrix}When performing Gaussian elimination, the diagonal element that is used during the elimination procedure is called the pivot Reduced row echelon formIf we continue the row elimination procedure so that all the pivots are one, and all the entries above and below the pivots are eliminated, then we say that the resulting matrix is in reduced row echelon form \begin{pmatrix} 1 & 2 & 3 & 4 \\ 4 & 5 & 6 & 7 \\ 6 & 7 & 8 & 9 \\ \end{pmatrix} \\ rref(A) = \begin{pmatrix} 1 & 0 & -1 & -2 \\ 0 & 1 & 2 & 3 \\ 0 & 0 & 0 & 0 \\ \end{pmatrix}Computing inverses(A | E) \rightarrow (E | A^{-1})Because:\begin{align}&amp; p_{1}p_{2}p_{3}p_{4}…p_{n}A \rightarrow E \\&amp; p_{1}p_{2}p_{3}p_{4}…p_{n} = A^{-1} \\&amp; p_{1}p_{2}p_{3}p_{4}…p_{n}E \rightarrow A^{-1} \\\end{align} \begin{pmatrix} -3 & -2 & -1 & 1 & 0 & 0 \\ 6 & -6 & 7 & 0 & 1 & 0\\ 3 & -4 & 4 & 0 & 0 & 1 \\ \end{pmatrix}\rightarrow \begin{pmatrix} 1 & 0 & 0 & -\frac{1}{3} & \frac{1}{3} & -\frac{2}{3} \\ 0 & 1 & 0 & \frac{1}{4} & \frac{3}{4} & -\frac{5}{4} \\ 0 & 0 & 1 & \frac{1}{2} & \frac{1}{2} & -\frac{1}{2} \\ \end{pmatrix}LU decompositionrow reduction of a matrix A can be written as M_{3}M_{2}M_{1}A = Uwhere U is upper triangular. Upon inverting the elementary matrices, we have A = M_{3}^{-1}M_{2}^{-1}M_{1}^{-1}UTherefore, L = M_{3}^{-1}M_{2}^{-1}M_{1}^{-1}Our LU decomposition of A is therefore: \begin{pmatrix} -3 & -2 & -1\\ 6 & -6 & 7\\ 3 & -4 & 4\\ \end{pmatrix} = \begin{pmatrix} 1 & 0 & 0\\ -2 & 1 & 0\\ -1 & 1 & 1\\ \end{pmatrix} \begin{pmatrix} -3 & 2 & -1\\ 0 & -2 & 5\\ 0 & 0 & -2\\ \end{pmatrix}Solving (LU)x = bThe LU decomposition is useful when one needs to solve Ax = b for many right-hand-sides. With the LU decomposition in hand, one writes (LU)x = L(Ux) = b]]></content>
      <categories>
        <category>Linear Algebra</category>
      </categories>
      <tags>
        <tag>Matrices</tag>
        <tag>Systems of linear equations</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Fluent Python]]></title>
    <url>%2FFluent-Python%2F2019%2F03%2F05%2F</url>
    <content type="text"><![CDATA[字典泛映射类型Mapping 和 MutableMapping 这两个抽象基类，提供形式化接口 什么是可散列数据？ 原子不可变数据类型（str，bytes 和 number） 在生命周期类，散列值不变的类型。需要有__hash__ 和 __qe__ 方法 元组类型需要元组里每一个值都是可散列类型 12a = ("a","b",("c","d")) #-&gt;hashablea = ("a","b",["c","d"]) #-&gt; not hashable 用户自定义的对象都是可散列的，因为散列值就是id()函数的值。如果自定义对象实现了__eq__方法，并且这个用到了这个对象的内部状态的话，内部状态必须不可变。 字典推导可以从任何键值对作为作为元素的可迭代对象中推导123data = [("zhang",23),["li",23],["ding",24],&#123;"huang",24&#125;]data_dict = &#123;name:age for name,age in data&#125;print(data_dict) #-&gt; &#123;'zhang': 23, 'li': 23, 'ding': 24, 24: 'huang'&#125; 常用的映射方法 d.clear() d. __contains__(k) d.copy() #潜赋值 d.__delitem__(k) d.get(k, default) d.items() d.__iter__() d.keys() d.__len__() d.pop(k) d.popitem() d.__reversed__() #仅针对 OrdereDidic d.setdefault(k,[default]) #如果存在键k,将对应的值设置为default,然后返回.如果没有，d[k] = default. d.__setitem__(k,v) d.values() setdefault 用法12345my_dict.setdefault(key,[]).append(value) #效率更高if ket not in my_dict: my_dict[key] = []my_dict[key].append(new_value) 映射的弹性查询defaultdict12from collections import defaultdicta = defaultdict(list) list可调用对象存储在default_factory中，当a[k]，k不存在时，a.__getitem__ 会调用 __miss__ 方法（只会在__getitem__里调用），然后利用default_factory生成返回值。 自己创建继承 dict 类型，然后充血__miss__方法1234567891011121314151617181920class StrDict(dict): def __missing__(self, key): if isinstance(key, str): return KeyError(key) else: return self[str(key)] def get(self, key, default=None): try: return self[key] except keyError: return default def __contains__(self, key): return key in self.keys() or str(key) in self.keys()if __name__ == '__main__': a = StrDict(&#123;"1": 2&#125;) print(a[1]) k in my_dict.keys() (.items(), .values())这种操作很快，因为返回的是视图，类似集合。 字典的变种 collections.OrderedDict 添加元素时会保持顺序，popitem默认返回最后一个元素，popitem(last=False)默认返回第一个元素 collections.ChainMap 容纳多个不同的映射对象，在键查找时，会当做整体查找。 1234import builtinsfrom collections import ChainMappylookup = ChainMap(locals(),globals(),vars(builtins))print(pylookup) collections.Counter 给每个键会准备一个计数器1234567891011from collections import Countera = Counter("aabbccdd")print(a)a.update("aacc")print(a)print(a.most_common(1))#output#Counter(&#123;'a': 2, 'b': 2, 'c': 2, 'd': 2&#125;)#Counter(&#123;'a': 4, 'c': 4, 'b': 2, 'd': 2&#125;)#[('a', 4)] 子类化 UserDict含有data属性，是dict实例，是存储数据的地方.123456789101112131415161718192021222324class StrDict(dict): def __missing__(self, key): if isinstance(key, str): return KeyError(key) else: return self[str(key)] def get(self, key, default=None): try: return self[key] except keyError: return default def __setitem__(self, key,item): self.data[str(key)] = item def __contains__(self, key): return str(key) in self.dataif __name__ == '__main__': a = StrDict(&#123;"1": 2&#125;) print(a[1]) 不可变的映射类型MappingProxyType 返回动态内存视图，不能靠视图改变原对象，但是原对象的更改可以由视图表现出来 1234567from types import MappingProxyTyped = &#123;1:'A'&#125;d_proxy = MappingProxyType(d)print(d_proxy[1])#d_proxy[2] = 'B' #-&gt;errord[2] = 'B'print(d_proxy) 集合论 set 对象中的元素必须是可散列的，但是 set 对象本身是不可散列的，frozenset是可散列的对象。 | 合集 - 差集 &amp; 交集 创建空集合要用set(), 如果用{}则是创建空字典 集合推导1&#123;char(i) for i range(100)&#125; 集合的运算 集合的比较运算 dict set list效率比较查找元素，dict 和 set 有强大的散列表做支撑，速度非常快 散列表原理my_dict[key], 现根据 hash(key)， 根据最低几位去散列表里查找表元。如为空，返回 error；若有表元，则表元中存在 foundkey:foundvalue. 若 foundkey == key, 返回 foundvalue。若不等，取 hash(key)的高几位再去找。循环。 dict conclusion 键必须是可散列的一个可散列的对象必须满足 __hash__()方法返回的值不变 __eq__()可做相等判断 a == b， 则 hash(a) == hash(b) 字典内存开销巨大 字典使用散列表，散列表是稀疏的。 键查询很快 空间换时间 添加新键可能会改变已有的顺序 set conclusion 集合元素必须是可散列的一个可散列的对象必须满足 __hash__()方法返回的值不变 __eq__()可做相等判断 a == b， 则 hash(a) == hash(b) 集合内存开销巨大 字典使用散列表，散列表是稀疏的。 高效判断是否包含 空间换时间 添加新元素可能会改变已有的顺序 序列模型分类 容器序列 list, tuple, collections.deque 等，存放对象的引用 扁平序列 str, bytes, bytearray, memoryview, array.array 实际是一段连续的内存空间 或者 可变序列 list, bytearray, array.array, collection.deque, memeoryview 不可变序列 tuple, str, bytes. 列表推倒与生成器列表推倒 不存在变量泄露的问题 可对元素过滤和加工 类似 map/filter 的功能 可计算笛卡尔积12345678s = 'a'symbols = "abcde"beyond_ascii = [ord(s) for s in symbols if ord(s) &gt; 10]print(s) # s = 'a'colors = ['b','w']sizes = ['S','M','L']tshirts = [(color,size) for color in colors for size in sizes] 生成器表达式 跟列表推倒差不多，把方括号换成圆括号 生成器表达式遵守迭代器协议，可以逐个产出元素，节省内存1234colors = ['b','w']sizes = ['S','M','L']for tshirt in ((color,size) for color in colors for size in sizes): print(tshirt) 生成器表达式逐个产出元素，内存中不会一次性产出6个 tshirt 的列表 元组元组与记录元组其实是没有字段名的记录，元组中的每个元素都存放了记录中一个字段的数据1city,year,pop,cha,area = ('Tokyo',2003,32450,0.66,8014) 元组拆包 元组拆包可以运用到任何可迭代的对象上，唯一的要求是可迭代对象的元素数量必须与接收这些元素的变量数量一致。 可用*来表示忽略多余的元组 1a,b,*rest = range(5) *运算可以把可迭代对象拆开作为函数的参数 123divmod(20,8) #-&gt;(2,4)t = (20,8)divmod(*t) #-&gt;(2,4) 嵌套拆包123metro_areas = [('Tokyo','JP',36.933,(35.689,139.691)),('Beijing','CH',36.933,(35.689,139.691))]for name,cc,pop,(lat,long) in metro_areas: print(name) 具名元组collections.namedtuple 是一个工厂函数,可以用来创建一个带字段名的元组和一个有名字的类,该类的实例所消耗的内存和元组是一样的,因为字段名都被存在对应的类里面。比普通的类消耗的内存要小. 具名元组具有专有的属性和方法，如_fields类属性，类方法_make(iterable),实例方法_asdict().123456from collections import namedtuplePerson = namedtuple('P',['name','sex'])print(Person._fields)iterable = ("zhangruochi","male")me = Person._make(iterable)print(me._asdict()) 作为不可变列表的元组元组除了没有列表元素的增减方法，支持列表的其他所有方法 切片切片忽略最后一个元素的好处 最后一个元素时, 只有通过最后一个元素直接看出切片区间里有几个元素 起始和结束元素都可见时， stop - start 快速计算出区间元素的个数 通过一个元素直接把列表分成两段a[:x],a[x:] 对象切片seq[start:stop:step] -&gt; seq.__getitem__(slice(start,stop,end))因此可以自定义切片对象:123my_slice = slice(1,2)seq = range(10)sub_seq = seq[my_slice] 多维切片内置的序列类型只支持一维的索引，外部库 numpy 之类的可以支持二维索引12a[i,j]a[:,i:j] 切片赋值把切片放在负值语句的左边，就可以对切片进行操作123l = list(range(10))l[2:5] = [20,30]del l[5:7] 对序列对象使用+和*+和*都遵守不修改原对象，而构建新对象的规律注意： 用[[]]*3来初始化由列表组成的列表，但是列表里其实包含的是3个对同意对象的引用12345678a = [["_"]*3]*3a[1][2] = "x"print(a) #-&gt; [['_', '_', 'x'], ['_', '_', 'x'], ['_', '_', 'x']]#正确写法a = [["_"]*3 for i in range(3)]a[1][2] = "x"print(a) #-&gt; [['_', '_', '_'], ['_', '_', 'x'], ['_', '_', '_']] 序列的增量赋值+= 背后的特殊方法是__iadd__(就地加发)， 但是如果这个类没有实现__iadd__时，Python解释器会退而使用__add__ 对于可变序列a, a+=b 等同于 a.extend(b) 对于不可变序列a, a+=b 等同于 a = a+b 对不可变对象进行重复拼接操作会导致效率低下，因为每次都有新对象生成，还要复制元素到新对象 一个 += 的谜题12t = (&quot;a&quot;,&quot;b&quot;,[&quot;c&quot;])t[2] += [&quot;d&quot;] 既抛出异常又修改了t教训： 不要把可变对象放在不可变对象里面 增量赋值不是原子操作 序列对象的排序就地排序和负值排序 list.sort()就地排序 sorted(list) 会赋值一份新的序列对像 Python排序算法Timsort的时间复杂度为nlog(n) 参数 reverse, 如设定为True, 被排序的对象会以降序输出 key, 以函数为参数，这个函数会应用在每个元素上1sorted(list,key = len, reverse = True) 利用bisect 管理已排序的序列 bisect 利用二分查找插入元素的位置 insort 利用 bisect 查找位置然后插入元素 123456789101112from bisect import *a = [1,2,3,4,5,6,7]#bisect = bisect_leftindex_left = bisect_left(a,3)index_right = bisect_right(a,3.0)print(index_left,index_right) #-&gt; 2 3#insort = insort_leftinsort_left(a,3)insort_right(a,3.0)print(a) #-&gt;[1, 2, 3, 3, 3.0, 4, 5, 6, 7] list的可替换对象array.arrayPython数组跟 C 语言数组一样精简, 如果我们需要一个只包含数字的列表,用 array.array会比list 效率更高，且array支持所有可变序列的操作. array.array需要类型码作为参数来表示底层的 C 语言需要存放怎样的数据. 如’b’表示有符号的字符. 数组还提供更多的读取文件和存入文件的方法 12345from array import arrayfrom random import randomfloats = array('d',(random() for i in range(10**7)))print(floats[-1])floats.tofile("floats.bin","wb") pickle.dump 也可以快速序列化数字类型，速度与 array.tofile()几乎一样快, pickle 还支持其他的数据类型 但是从Python3.4开始, 数组不再支持就地排序, 如果排序需要新建数组 a = array(a.typecode,sorted(array)) 内存视图memoryview 能够让你在不复制内存的条件下,在数据结构之间共享内存123456789101112131415161718192021222324252627import timefor n in (100000, 200000, 300000, 400000): data = 'x'*n start = time.time() b = data while b: b = b[1:] print 'bytes', n, time.time()-startfor n in (100000, 200000, 300000, 400000): data = 'x'*n start = time.time() b = memoryview(data) while b: b = b[1:] print 'memoryview', n, time.time()-start """outputbytes 100000 0.240149021149bytes 200000 1.04921603203bytes 300000 2.66688489914bytes 400000 4.83206987381memoryview 100000 0.011647939682memoryview 200000 0.0258820056915memoryview 300000 0.0385529994965memoryview 400000 0.0550448894501""" memoryview.cast 可以利用不同的方式读写同一块内存12345678910import arraynumbers = array.array("h",[-2,-1,0,1,2])memv = memoryview(numbers)print(memv[0]) #-&gt; -2memv_oct = memv.cast('B')print(memv_oct.tolist()) #-&gt; [254, 255, 255, 255, 0, 0, 1, 0, 2, 0memv_oct[4] = 1print(numbers) #-&gt; array('h', [-2, -1, 1, 1, 2])print(array.array('H', [1]).tostring()) #-&gt; b'\x01\x00' python使用大端法，取高字节数据存放在低地址 计算机存储的大端法和小端法 在计算机内存中，通常是以字节（Byte），也就是 8 个位（Bit）为基本存储单元（也有以 16 位为基本存储单元的）。对于跨越多个字节的数据类型（比如 int 长 4 个字节），如何在内存中对这些字节进行排序有两种常见的方法：大端法（Big-endian）和小端法（Little-endian）。 不管是大端法还是小端法存储，计算机在内存中存放数据的顺序都是从低地址到高地址，所不同的是首先取低字节的数据存放在低地址还是取高字节数据存放在低地址。 若首先取高字节的数据存放在低地址，则是大端法； 若首先取低字节的数据存放在低地址，则是小端法。 双向队列和其他形式的队列collections.deque利用 append 和 pop(0) 的方法, 我们可以把 list 当做 stack 来使用. 但是 pop(0) 的时间复杂度为n，效率低下. collections.deque类是一个线程安全，可以快速从两段添加或者删除元素的数据类型. 对stackd的模拟123456789from collections import dequearray = deque(range(10),maxlen = 10)array.rotate(3)print(array) #-&gt; deque([7, 8, 9, 0, 1, 2, 3, 4, 5, 6], maxlen=10)array.append(-1) #-&gt; deque([8, 9, 0, 1, 2, 3, 4, 5, 6, -1], maxlen=10)print(array)array.popleft() #-&gt; deque([9, 0, 1, 2, 3, 4, 5, 6, -1], maxlen=10)print(array) queue提供了同步(线程安全)类 Queue, LifoQueue 和 PriorityQueue, 不同线程可以利用这些数据来交换信息。具有 maxsize参数，超出容量时queue会被锁住. heapq让用户可以把可变序列当做堆队列或者优先队列使用. 函数一等对象编程语言里一等对象的定义: 运行时创建 能赋值给变量或数据结构中的元素 能作为参数传递 能作为函数返回值 123456789101112def factorial(n): '''return n!''' return 1 if n&lt;2 else n * factorial(n-1)print(factorial.__doc__) # -&gt; return n!print(type(factorial)) # -&gt; &lt;class 'function'&gt;fact = factorialprint(fact(5)) #-&gt; 120print(list(map(fact,[1,2,3]))) #-&gt; [1, 2, 6] 高阶函数介绍函数为参数，或者把函数作为返回结果的函数就是高阶函数 123456789fruits = ["apple","pear","cherry","fig"]# 长度排序print(sorted(fruits,key = len)) #-&gt; ['fig', 'pear', 'apple', 'cherry']# 逆序def reverse(word): return word[::-1]print(sorted(fruits,key = reverse)) #-&gt; ['apple', 'fig', 'pear', 'cherry'] map,filter,reduce 极其替代品 列表推导式比map与filter连用更清晰易懂 12print(list(map(fact,filter(lambda x : x%2, range(6))))) # -&gt; [1, 6, 120]print([fact(i) for i in range(6) if i % 2]) # -&gt; [1, 6, 120] sum 比 reduce(add,[]) 更易懂 any,all也是内置的规约函数 12print(all([True,True,False])) # -&gt; Falseprint(any([True,False,True])) # -&gt; True lambda 表达式在 Python内创建匿名函数12fruits = ["apple","pear","cherry","fig"]print(sorted(fruits,key = lambda word: word[::-1])) 七种可调用对象 自定义可调用对象12345678910111213141516import randomclass CallableTest: def __init__(self,items): self.items = list(items) def pick(self,n): random.shuffle(self.items) return self.items[0:n] def __call__(self,n): return self.pick(n)test = CallableTest([1,2,3])print(test(2)) # -&gt; [1,3] 函数内省函数有而自定义对象没有的属性[‘annotations‘, ‘call‘, ‘closure‘, ‘code‘, ‘defaults‘, ‘get‘, ‘globals‘, ‘kwdefaults‘, ‘name‘, ‘qualname‘] 12345class C: passobj = C() print(sorted(set(dir(fact)) - set(dir(obj)))) 参数传递1234567891011def parameters(name,*content, cls = "first_name", **attr): print(name) # -&gt; 1 print(content) # -&gt; (2, 3, 4) print(cls) # -&gt; zhang print(attr) # -&gt; &#123;'face': 'handsome', 'built': 'awesome'&#125;parameters(1,2,3,4,cls = "zhang", face = "handsome",built = "awesome") print(parameters.__defaults__) # -&gt; Noneprint(parameters.__kwdefaults__) # -&gt; &#123;'cls': 'first_name'&#125;print(parameters.__annotations__) # -&gt; &#123;'return': 'test parameters'&#125;print(parameters.__doc__) # -&gt; just for testing parameters 函数式编程 operator 模块 和 functools 模块 reduce itemgetter 从序列或者对象中读取元素或者属性 methodcaller 自行函数，然后再调用对象上使用参数指定的方法(可以冻结参数) 1234from operator import methodcallersplit_and_replace = methodcaller('replace',' ','_')name = "ZHAN RUO CHI"print(split_and_replace(name)) # -&gt; ZHAN_RUO_CHI partial 创建一个新的可调用对象，冻结原有对象的某些参数 1234from operator import mulfrom functools import partialtriple = partial(mul,3)print(triple(7)) #-&gt; 21 数据模型python 解释器在碰到特殊的句法时，会使用特殊方法去激活一些基本的对象操作。例如 len(x) 在调用时，如果 x 是内置对象，速度回非常快，因为 CPthon 会直接从一个 C 结构体里读取对象的长度。如果 x 不是内置对象，len(x) 会读取对象内部的len方法。这种处理方法在保持内置类型的效率和语言一致性之间找到平衡点。 不能让特例特殊到开始破快既定规则 —zon of python 12345678910111213141516171819202122232425262728293031323334import collectionsCard = collections.namedtuple("Card",["rank","suit"])class FrenchDeck: ranks = [str(n) for n in range(2,11)] + list("JQKA") suits = "spades diamonds clubs hearts".split() def __init__(self): self.__cards = [Card(rank,suit) for suit in FrenchDeck.suits for rank in FrenchDeck.ranks] def __len__(self): return len(self.__cards) def __getitem__(self,index): return self.__cards[index]if __name__ == '__main__': deck = FrenchDeck() # 可以使用 len() 函数查看一共多少张纸牌 print(len(deck)) # 可以使用索引和切片 print(deck[-1]) print(deck[1:3]) # 可以随机抽取纸牌 from random import choice print(choice(deck)) # 支持迭代 for card in deck: print(card) 两个好处 类的用户不用再去记标准操作的名称 更加方便的利用 python 标准库 1234567891011121314151617181920212223242526272829303132from math import hypotclass Vector: def __init__(self,x,y): self.x = x self.y = y def __repr__(self): return 'Vector(&#123;&#125;,&#123;&#125;)'.format(self.x,self.y) def __abs__(self): return hypot(self.x,self.y) def __bool__(self): return bool(abs(self)) #return bool(self.x or self.y) def __add__(self,other): x = self.x + other.x y = self.y + other.y return Vector(x,y) def __mul__(self,scalar): return Vector(self.x*scalar, self.y*scalar)if __name__ == '__main__': print(Vector(3,4)) print(abs(Vector(3,4))) __reper__ 反对对象的字符串表示，__str__只有在调用 str()或者print()时才会调用，__repr__ 是更好的选择，因为如果一个对象没有__str__函数，python 又需要调用它时，解释器会调用 __repr__ 作为替代. 任何对象都可以用于需要布尔值的上下文中，为了判定一个值 x 的真假，Python 会调用bool(x), 其背后是调用 x.__bool__()的结果;如果不存在该方法，那么 bool(x)会尝试调用 x.__len__()。 若返回0，则 bool 会返回 False，否则返回 True。 12if([]) #Falseif(0) #false 文本和字节序列字符的问题Python3中，str 对象中获取的元素是 unicode 字符unicode 标准把字符做了如下区分 字符的标识，在 unicode 标准中以4~6个十六进制的数字，然后加前缀 U+. 如A的码位是U+0041 字符的具体表述取决于所用的编码. 编码是在码位与字节序列之间的转换. 如 A 在 UTF8中编码成单个字节\x41 二进制序列类型分为不可变 bytes 类型和 bytearray 类型 bytes对象可以从str 对象使用给定的编码构建 1cafe = bytes('cafe',encoding="utf8") 字节序列的切片还是字节序列 my_bytes[0] 是整数 my_bytes[:1] 是字节序列 二进制序列其实是整数序列，但是它们各个字节的值可能会用如下三种表示法 可打印 ASCII 范围内的字节使用ASCII字符本身 制表符,换行符,回车符和\使用转义序列\t…. 其他字节的值，使用使用十六进制转义序列如 b’caf\xc3\xa9’ 前三个字节b’caf’在可打印的 ASCII 范围内，后两个字节则不然. 1234import arraynumbers = array.array('h',[-2,-1,0,1,2])octets = bytes(numbers)print(octets) 编码中遇到的问题12345my_str = "Português"print(my_str.encode("utf8"))# print(my_str.encode("ascii")) #-&gt; 报错print(my_str.encode("ascii",errors='ignore')) #-&gt; b'Portugus'print(my_str.encode("ascii",errors='replace')) #-&gt; b'Portugu?s' 处理文本文件最佳方式，unicode 三明治 尽早把输入(比如读取文件时)的字节序列转化为字符串 只操作字符串 尽量晚地把字符串转化为字节序列 12345my_str = "Português"open("cafe.txt",'w',encoding='utf8').write(my_str)print(open("cafe.txt").read()) #-&gt;报错print(open("cafe.txt",encoding = "utf8").read()) #-&gt; 正确print(open("cafe.txt",'rb').read()) #-&gt; b'Portugu\xc3\xaas', 以二进制方式读取文件，没有问题 为了正确比较而规范化字符串unicode有组合字符(变音符号和附加到前一个字符上的记号，打印时作为一个整体),所以字符串比较起来很复杂。1234567#已解决该问题？my_str1 = "Portugués"my_str2 = "Portugue\u0301s"print(my_str1)print(my_str2)print(my_str1 == my_str2) #-&gt; Trueprint(len(my_str1) == len(my_str2)) #-&gt; True 去掉所有重音符号 NFD 拆解组合字符为基字符和单独的组合字符 NFC 使用最小的码位构成组合字符串12345from unicodedata import normalizefrom unicodedata import combiningmy_str = &quot;Portugués&quot;new_str = &quot;&quot;.join(c for c in normalize(&quot;NFD&quot;,my_str) if not combining(c))print(new_str) 生成器与迭代器可迭代的原因 实现了__iter__函数 内置的 iter 函数有以下作用 检查对象是否实现__iter__函数，如果实现，返回迭代器 没有实现可迭代对象，如果现实__getitem__方法，python 返回一个迭代器，尝试从索引0开始迭代 尝试失败，跑出 TypeError 异常12345678910111213s = "zhangruochi"for chr in s: print(chr) print("-------")it = iter(s)while True: try: print(next(it)) except: del it break 迭代器与可迭代对象之间的关系 可迭代对象实现__iter__方法，返回一个迭代器实例 迭代器实现__iter__ 方法，返回自己，为了通过 issubclass(iterator,abc.Iterator) 测试 迭代器还要实现__next__方法，每次返回一个元素 可迭代对象一定不能是自身的迭代器，也就是不能包含__next__ 方法 生成器函数12345678910111213141516171819import reRE_WORD = re.compile("\w+")class Sentence: def __init__(self, text): self.text = text self.words = RE_WORD.findall(text) def __iter__(self): for word in self.words: yield words = "zhang ruo chi"sentence = Sentence(s)for word in sentence: print(word) 生成器对象也是迭代器，利用iter方法返回一个生成器对象，可以不用再单独定义迭代器 包含yield关键词的函数是生成器函数，调用生成器函数时，会返回一个生成器对象，也就是说，生成器函数是生成器工厂 把生成器传递给 next()函数时，生成器会向前运行，遇到 yield 关键词会停止并返回产出的值 静态类和静态方法example123456789101112131415161718192021class Date(object): def __init__(self, day=0, month=0, year=0): self.day = day self.month = month self.year = year @classmethod def from_string(cls, date_as_string): day, month, year = map(int, date_as_string.split('-')) date1 = cls(day, month, year) return date1 @staticmethod def is_date_valid(date_as_string): day, month, year = map(int, date_as_string.split('-')) return day &lt;= 31 and month &lt;= 12 and year &lt;= 3999 if __name__ == 'main': date2 = Date.from_string('11-09-2012') is_date = Date.is_date_valid('11-09-2012') class method我们在一个方法中实现了功能，因此它是可重用的。 这里的封装处理的不错（如果你发现还可以在代码的任意地方添加一个不属于 Date 的函数来实现类似的功能，那很显然上面的办法更符合 OOP 规范）。 cls 是一个保存了 class 的对象（所有的一切都是对象）。 更妙的是， Date 类的衍生类都会具有 from_string 这个有用的方法。 static method从静态方法的使用中可以看出，我们不会访问到 class 本身 – 它基本上只是一个函数，在语法上就像一个方法一样，但是没有访问对象和它的内部（字段和其他方法），相反 classmethod 会访问 cls， instancemethod 会访问 self。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Bigtable: A Distributed Storage System for Structured Data]]></title>
    <url>%2FBigtable-A-Distributed-Storage-System-for-Structured-Data%2F2019%2F02%2F28%2F</url>
    <content type="text"><![CDATA[Abstract Bigtable is a distributed storage system for managing structured data that is designed to scale to a very large size Data ModelA Bigtable is a sparse, distributed, persistent multi- dimensional sorted map. The map is indexed by a row key, column key, and a timestamp; each value in the map is an uninterpreted array of bytes. (row:string, column:string, time:int64) → string Rows The row keys in a table are arbitrary strings Every read or write of data under a single row key is atomic makes it easier for concurrent updates to the same row. The row range for a table is dynamically partitioned. Each row range is called a tablet, which is the unit of dis- tribution and load balancing Column Families Column keys are grouped into sets called column fami- lies, which form the basic unit of access control All data stored in a column family is usually of the same type A column family must be created before data can be stored under any column key in that family; after a family has been created, any column key within the family can be used Timestamps Each cell in a Bigtable can contain multiple versions of the same data; these versions are indexed by timestamp API The Bigtable API provides functions for creating and deleting tables and column families. It also provides functions for changing cluster, table, and column family metadata, such as access control rights. Bigtable can be used with MapReduce, a framework for running large-scale parallel computations de- veloped at Google. We have written a set of wrappers that allow a Bigtable to be used both as an input source and as an output target for MapReduce jobs. Building Blocks Bigtable is built on several other pieces of Google infrastructure. Bigtable uses the distributed Google File System (GFS) to store log and data files. A Bigtable cluster typically operates in a shared pool of machines that run a wide variety of other distributed applications, and Bigtable processes often share the same machines with processes from other applications. Bigtable de- pends on a cluster management system for scheduling jobs, managing resources on shared machines, dealing with machine failures, and monitoring machine status. The Google SSTable file format is used internally to store Bigtable data Bigtable relies on a highly-available and persistent distributed lock service called Chubby ImplementationThe Bigtable implementation has three major compo- nents: a library that is linked into every client one master server many tablet servers A Bigtable cluster stores a number of tables. Each table consists of a set of tablets, and each tablet contains all data associated with a row range. Initially, each table consists of just one tablet. As a table grows, it is auto- matically split into multiple tablets, each approximately 100-200 MB in size by default. Tablet Location We use a three-level hierarchy analogous to that of a B+- tree to store tablet location information Tablet AssignmentEach tablet is assigned to one tablet server at a time - The master keeps track of the set of live tablet servers - Bigtable uses Chubby to keep track of tablet servers - The master is responsible for detecting when a tablet server is no longer serving its tablets, and for reassigning those tablets as soon as possible - When a master is started by the cluster management system, it needs to discover the current tablet assign- ments before it can change them Tablet Serving Updates are committed to a commit log that stores redo records the recently committed ones are stored in memory in a sorted buffer called a memtable the older updates are stored in a sequence of SSTables To recover a tablet, a tablet server reads its metadata from the METADATA table. This meta- data contains the list of SSTables that comprise a tablet and a set of a redo points, which are pointers into any commit logs that may contain data for the tablet Refinements Locality groups Clients can group multiple column families together into a locality group Compression Clients can control whether or not the SSTables for a locality group are compressed, and if so, which compression format is used Caching for read performance To improve read performance, tablet servers use two levels of caching. The Scan Cache is a higher-level cache that caches the key-value pairs returned by the SSTable interface to the tablet server code. The Block Cache is a lower-level cache that caches SSTables blocks that were read from GFS Bloom filters a read operation has to read from all SSTables that make up the state of a tablet Commit-log implementation we append mutations to a single commit log per tablet server, co-mingling mutations for different tablets in the same physical log file Speeding up tablet recovery If the master moves a tablet from one tablet server to another, the source tablet server first does a minor compaction on that tablet Exploiting immutability Besides the SSTable caches, various other parts of the Bigtable system have been simplified by the fact that all of the SSTables that we generate are immutable Lesson large distributed sys- tems are vulnerable to many types of failures, not just the standard network partitions and fail-stop failures as- sumed in many distributed protocols it is important to delay adding new features until it is clear how the new features will be used the importance of proper system-level monitoring The most important lesson we learned is the value of simple designs]]></content>
      <categories>
        <category>Paper Note</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[AI for Everyone]]></title>
    <url>%2FAI-for-Everyone%2F2019%2F02%2F28%2F</url>
    <content type="text"><![CDATA[Thanks Andrew Ng for providing the amazing course. Reference From Ai for Everyone Here is my course certificate:]]></content>
      <categories>
        <category>Artificial Intelligence</category>
      </categories>
      <tags>
        <tag>Course Note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[What is P-Value?]]></title>
    <url>%2FWhat-is-P-Value%2F2019%2F02%2F24%2F</url>
    <content type="text"><![CDATA[Why it is so successful in science? In some sense it offers a first line of defense against being fooled by randomness, separating signal from noise. Definition p-values tell you how surprising the data is, assuming there is no effect. formal definition: A p-value is the probability of getting the observed or more extreme data, assuming the null hypothesis is true. 在假设原假设（H0）正确时，出现观察到的现状或更差的情况的概率 Example Does driving while calling increase the risk of a car accident? 设计实验，一组司机开车打电话，一组司机开车不打电话，然后对比发生事故的概率。 The difference is never exactly zero. A difference of e.g., 0.11 means: Probably just random noise. Probably a real difference Null hypthesis 假设零假设为真，即符合中心为0的正态分布。 Assuming null hypthesis is true， means most of the data will fall between these two critical values. Important notes A p-value is the probability of the data, not the probability of a theory. You can’t get the probability the null hypothesis is true, given the data, from a p-value. P(D*|H) ≠ P(H|D) A single p-value is not enough to declare a scientific discovery; only when we can repeatedly observe something, we can consider it a reliable observation. How to use pValue correctly? Use p-values as a rule to guide behavior in the long run. 不能说，因为$p &lt; x$,所以理论正确。应该说，因为$p &lt; x$,所以结果符合预期。 Hwo to calculate pValue?以抛硬币实验为例完成假设检验 假设：硬币是公平的 检验：认为假设是成立的，然后扔十次，看结果与假设是否相符 反复扔硬币符合二项分布），也就是： X\sim B(n,\mu)其中， n代表扔硬币的次数，$\mu$代表“花”朝上的概率。 在我们认为硬币是公平的前提下，扔1000次硬币应该符合以下分布： X\sim B(1000, 0.5) 若1000次抛硬币实验结果为正面朝上530次，则pVlue取530以及更极端的点组成组成区间。 什么是显著水平$\alpha$?抛一千次硬币，我们认为出现530次正面之后，硬币是不公平的，还是出现580次正面之后，硬币是不公平的，这是一个主观标准。 我们一般认为: \text {p-value}\leq 0.05就可以认为假设是不正确的。 表示出来如下图所示:我们可以认为刚开始的假设错的很“显著”，也就是“硬币是不公平的”。]]></content>
      <categories>
        <category>Statistics</category>
      </categories>
      <tags>
        <tag>Concept</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Understanding Logistic Regression]]></title>
    <url>%2FUnderstanding-Logistic-Regression%2F2019%2F02%2F24%2F</url>
    <content type="text"><![CDATA[逻辑回归的输出是什么？h_{\theta} = P(y = 1| x;\theta)也就是给定x和在参数theta下，y=1(default)的概率 逻辑回归的输入是什么？y_{\theta} = \beta_{0} + \beta_{1}x_{1} + \beta_{2}x_{2} ....也就是线性回归 所以Logistic Regression的决策边界是线性回归 逻辑回归的本质还是线性回归，也会看到有一些文章说在特征到结果的映射中多加了一层函数映射 我们用什么把输入与输出联系起来？Logit function: Logit(p) = ln(odds) = ln(\frac{p}{1-p}) 定义域为[0,1], 值域为R. 将上述方程取反函数，得到sigmoid函数，定义域为R, y为P, 值域为[0,1]. Sigmoid(\alpha) = logit^{-1}(\alpha) = \frac{1}{1+e^{-\alpha}} Maximum likelihood estimation 来估计参数theta的值L(\theta) = \prod_{i:y_{i}=1}p(x_{i})\prod_{i^{\prime}:y_{i^{\prime}}=0}(1-p(x_{i^{\prime}})) Get coefficients that maximizes the likelihood, then use them for predictions Maximizing the likelihood function is equivalent to minimizing the cost function $J(\theta)$ J(\theta) = - \sum_{i=1}^{n}[y_{i}log(P(y_{i} = 1 | x)) + (1 - y_{i})log(1 - P(y_{i}=1|x))]]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[INFSCI 2595:Machine Learning(part one)]]></title>
    <url>%2FINFSCI-2595-Machine-Learning-part-one%2F2019%2F02%2F23%2F</url>
    <content type="text"><![CDATA[Reference from some lecture slides of INFSCI 2595 lectured by Dr. Mai Abdelhakim IntroductionWhat is Machine Learning? Subfield of artificial intelligence Field of study that gives computers the ability to learn without being explicitly programmed How can we build computer system that learn and improve with experience? Statistics make conclusions from data, and estimate reliability of conclusions Optimization and computing power to solve problems Machine learns with respect to a particular **task T**, **performance metric P** and **experience E**, if the performance P on task T improves with **experience E**. Why Machine Learning is Important Provide solution to complex problems that cannot be easily programmed Can adapt to new data Helps us to understand complicated phenomena Can outperform human performance Machine Learning AlgorithmsSupervised Learning Learn using labeled data (correct answers are given in learning phase) make predictions of previously unseen data Two types of problems Regression: Target values (Y) are continuous/quantitative Classification: Target values (Y) are discrete/finite/qualitative Unsupervised Learning Clustering analysis Finding groups of similar users Detecting abnormal patterns Machine Learning Models and Trade-offsWhy do we need a model? Why estimate f? Predictions: Make predictions for new inputs/features Inference: understand the way Y is affected by each features Which feature has stronger impact on the response? Is relation positive or negative Is the relationship linear or more complicated How to estimate f? Parametric Approach First,assume function form Second, use training to fit the model Non-Parametric Approach No explicit form of function f is assumed Seek to estimate f as close as possible to the data points Trade-off: Model Flexibility vs Model Interpretabilityinterpretability Model Accuracy In regression setting, a common measure is mean squared error(MSE) MSE = \frac{1}{n}\sum_{i=1}^{n}(y_{i} - \hat{f(x_{i})})^{2}Overfitting and UnderfittingTwo thing we need to avoid: Overfitting: Building a model that is too complex, fits training data very well, but fail to generalize to new data (e.g. large test MSE) Underfitting: build simple model that is unable to capture variability in data Simple models may not capture the variability in the data Complex models may not generalize Bias-Variance TradeoffE(y_{0} - \hat{f(x_{0})})^2 = Var(\hat{f(x_{0})}) + [Bias(\hat{f(x_{0})})]^{2} + Var(\epsilon) Variance: amount by which $\hat{f}$ changes if we made the estimation by different training set Bias: Errors from approximating real-life problems by a simpler model Classification Setting $\hat{y_{0}} = \hat{f(x_{0})}$ is the predicted output class Test error rate:Average(I(y_{0} \neq \hat{y_{0}})) Bayes classifier Bayes classifier assigns each observation to the most likely class given the feature values. Assign $x_{0}$ to class ! that has largest $Pr(Y= j|X = x_{0})$ K-Nearest Neighbors Define a positive integer K For each test observation $x_{0}$ , identify K points in the training data that are closest to $x_{0}$ referred to as $N_{0}$ Estimate the conditional probability for class j as fraction of points in $N_{0}$ whose response values equal to jPr(Y = j | X = x_{0}) = \frac{1}{k}\sum_{i \in N_{0}}I(y_{i} == j) knn]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[An overview of gradient descent optimization algorithms]]></title>
    <url>%2FAn-overview-of-gradient-descent-optimization-algorithms%2F2019%2F02%2F23%2F</url>
    <content type="text"><![CDATA[Reference from An overview of gradient descent optimization algorithms Batch gradient descent\theta = \theta - \eta * \triangledown_{\theta}J(\theta)123for i in range(nb_epochs): params_grad = evaluate_gradient(loss_function, data, params) params = params - learning_rate * params_grad Batch gradient descent is guaranteed to converge to the global minimum for convex error surfaces and to a local minimum for non-convex surfaces. Stochastic gradient descent\theta = \theta - \eta * \triangledown_{\theta}J(\theta; x^{i};y^{i})12345for i in range(nb_epochs): np.random.shuffle(data) for example in data: params_grad = evaluate_gradient(loss_function, example, params) params = params - learning_rate * params_grad SGD performs frequent updates with a high variance that cause the objective function to fluctuate heavily as in Image 1. SGD shows the same convergence behaviour as batch gradient descent, almost certainly converging to a local or the global minimum for non-convex and convex optimization respectively. Mini-batch gradient descent\theta = \theta - \eta * \triangledown_{\theta}J(\theta; x^{i:i+n};y^{i:i+n})12345for i in range(nb_epochs): np.random.shuffle(data) for batch in get_batches(data, batch_size=50): params_grad = evaluate_gradient(loss_function, batch, params) params = params - learning_rate * params_grad Common mini-batch sizes range between 50 and 256, but can vary for different applications Mini-batch gradient descent is typically the algorithm of choice when training a neural network and the term SGD usually is employed also when mini-batches are used Challenges Choosing a proper learning rate can be difficult the same learning rate applies to all parameter updates Learning rate schedules ry to adjust the learning rate during training by e.g. annealing reducing the learning rate according to a pre-defined schedule or when the change in objective between epochs falls below a threshold Another key challenge of minimizing highly non-convex error functions common for neural networks is avoiding getting trapped in their numerous suboptimal local minima MomentumMomentum is a method that helps accelerate SGD in the relevant direction and dampens oscillations as can be seen in Image 3. It does this by adding a fraction of the update vector of the past time step to the current update vector: \begin{align}&amp; v_{t} = \gamma v_{t-1} + \eta \triangledown_{\theta}J(\theta) \\&amp; \theta = \theta - v_{t}\\\end{align*} The momentum term $\gamma$ is usually set to 0.9 or a similar value. The ball accumulates momentum as it rolls downhill, becoming faster and faster on the way Nesterov accelerated gradient\begin{align}&amp; v_{t} = \gamma v_{t-1} + \eta \triangledown_{\theta}J(\theta - \gamma m) \\&amp; \theta = \theta - v_{t}\\\end{align} 既然参数要沿着 $\theta - \gamma * m$更新，那就先先计算未来位置的梯度 This anticipatory update prevents us from going too fast and results in increased responsiveness, which has significantly increased the performance of RNNs on a number of tasks Adagrad\begin{align}&amp; s = s + \triangledown J(\theta) \bigodot \triangledown J(\theta) \\&amp; \theta = \theta - \frac{\eta}{\sqrt{s + \epsilon}} \bigodot \triangledown J(\theta) \\\end{align} One of Adagrad’s main benefits is that it eliminates the need to manually tune the learning rate Adagrad modifies the general learning rate $\gamma$ at each time step t for every parameter $\theta_{i}$ based on the past gradients that have been computed for $\theta_{i}$ RMSprop\begin{align}&amp; v_{t} = \gamma v_{t-1} + (1-\gamma) \triangledown J(\theta) \bigodot \triangledown J(\theta) \\&amp; \theta = \theta - v_{t} \\\end{align*} 1tf.train.RMSPropOptimizer(learning_rate=learning_rate, momentum=0.9, decay=0.9, epsilon=1e-10) 加入Momentum，主要是解决学习速率过快衰减的问题 RMSprop as well divides the learning rate by an exponentially decaying average of squared gradients. Hinton suggests $\gamma$ to be set to 0.9, while a good default value for the learning rate $\eta$ is 0.001. Adaptive moment estimation (Adam)\begin{align}&amp; m = \beta_{1} m + (1-\beta_{1}) \triangledown J(\theta) \\&amp; s = \beta_{2} s + (1-\beta_{2}) \triangledown J(\theta) \bigodot \triangledown J(\theta) \\&amp; m = \frac{m}{1-\beta^{t}_{1}} \\&amp; s = \frac{s}{1-\beta^{t}_{2}} \\&amp; \theta = \theta - \frac{\eta}{\sqrt{s + \epsilon}} \bigodot m\end{align} 其结合了Momentum和RMSprop算法的思想。相比Momentum算法，其学习速率是自适应的，而相比RMSprop，其增加了冲量项, 第三和第四项主要是为了放大它们 The authors propose default values of 0.9 for $\beta1$, 0.9999 for $\beta2$ and $10^{-8}$ for $\epsilon$]]></content>
      <categories>
        <category>Paper Note</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linear models, Optimization]]></title>
    <url>%2FLinear-models-Optimization%2F2019%2F02%2F22%2F</url>
    <content type="text"><![CDATA[Programming assignment (Linear models, Optimization)In this programming assignment you will implement a linear classifier and train it using stochastic gradient descent modifications and numpy. 123import numpy as np%matplotlib inlineimport matplotlib.pyplot as plt 12345import syssys.path.append("..")import gradinggrader = grading.Grader(assignment_key="UaHtvpEFEee0XQ6wjK-hZg", all_parts=["xU7U4", "HyTF6", "uNidL", "ToK7N", "GBdgZ", "dLdHG"]) 123# token expires every 30 minCOURSERA_TOKEN = "TmANlFkR4a4doLvg"COURSERA_EMAIL = "lvduzhen@gmail.com" Two-dimensional classificationTo make things more intuitive, let’s solve a 2D classification problem with synthetic data. 12345678with open('train.npy', 'rb') as fin: X = np.load(fin) with open('target.npy', 'rb') as fin: y = np.load(fin)plt.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.Paired, s=20)plt.show() TaskFeaturesAs you can notice the data above isn’t linearly separable. Since that we should add features (or use non-linear model). Note that decision line between two classes have form of circle, since that we can add quadratic features to make the problem linearly separable. The idea under this displayed on image below: 1print(X) [[ 1.20798057 0.0844994 ] [ 0.76121787 0.72510869] [ 0.55256189 0.51937292] ..., [-1.22224754 0.45743421] [ 0.43973452 -1.47275142] [ 1.4928118 1.15683375]] 123456789101112131415161718192021def expand(X): """ Adds quadratic features. This expansion allows your linear model to make non-linear separation. For each sample (row in matrix), compute an expanded row: [feature0, feature1, feature0^2, feature1^2, feature0*feature1, 1] :param X: matrix of features, shape [n_samples,2] :returns: expanded features of shape [n_samples,6] """ X_expanded = np.zeros((X.shape[0], 6)) X_expanded[:,0] = X[:,0] X_expanded[:,1] = X[:,1] X_expanded[:,2] = np.square(X[:,0]) X_expanded[:,3] = np.square(X[:,1]) X_expanded[:,4] = X[:,0] * X[:,1] X_expanded[:,5] = 1 return X_expanded # TODO:&lt;your code here&gt; 1X_expanded = expand(X) 1X_expanded array([[ 1.20798057, 0.0844994 , 1.45921706, 0.00714015, 0.10207364, 1. ], [ 0.76121787, 0.72510869, 0.57945265, 0.52578261, 0.5519657 , 1. ], [ 0.55256189, 0.51937292, 0.30532464, 0.26974823, 0.28698568, 1. ], ..., [-1.22224754, 0.45743421, 1.49388906, 0.20924606, -0.55909785, 1. ], [ 0.43973452, -1.47275142, 0.19336645, 2.16899674, -0.64761963, 1. ], [ 1.4928118 , 1.15683375, 2.22848708, 1.33826433, 1.72693508, 1. ]]) Here are some tests for your implementation of expand function. 123456789101112131415161718192021222324# simple test on random numbersdummy_X = np.array([ [0,0], [1,0], [2.61,-1.28], [-0.59,2.1] ])# call your expand functiondummy_expanded = expand(dummy_X)# what it should have returned: x0 x1 x0^2 x1^2 x0*x1 1dummy_expanded_ans = np.array([[ 0. , 0. , 0. , 0. , 0. , 1. ], [ 1. , 0. , 1. , 0. , 0. , 1. ], [ 2.61 , -1.28 , 6.8121, 1.6384, -3.3408, 1. ], [-0.59 , 2.1 , 0.3481, 4.41 , -1.239 , 1. ]])#testsassert isinstance(dummy_expanded,np.ndarray), "please make sure you return numpy array"assert dummy_expanded.shape == dummy_expanded_ans.shape, "please make sure your shape is correct"assert np.allclose(dummy_expanded,dummy_expanded_ans,1e-3), "Something's out of order with features"print("Seems legit!") Seems legit! Logistic regressionTo classify objects we will obtain probability of object belongs to class ‘1’. To predict probability we will use output of linear model and logistic function: a(x; w) = \langle w, x \rangleP( y=1 \; \big| \; x, \, w) = \dfrac{1}{1 + \exp(- \langle w, x \rangle)} = \sigma(\langle w, x \rangle)123456789101112131415def probability(X, w): """ Given input features and weights return predicted probabilities of y==1 given x, P(y=1|x), see description above Don't forget to use expand(X) function (where necessary) in this and subsequent functions. :param X: feature matrix X of shape [n_samples,6] (expanded) :param w: weight vector w of shape [6] for each of the expanded features :returns: an array of predicted probabilities in [0,1] interval. """ w = w.reshape((w.shape[0],1)) return 1/(1 + np.exp(-np.dot(X,w))) # TODO:&lt;your code here&gt; 12dummy_weights = np.linspace(-1, 1, 6)ans_part1 = probability(X_expanded[:1, :], dummy_weights)[0] 12## GRADED PART, DO NOT CHANGE!grader.set_answer("xU7U4", ans_part1) 12# you can make submission with answers so far to check yourself at this stagegrader.submit(COURSERA_EMAIL, COURSERA_TOKEN) Submitted to Coursera platform. See results on assignment page! In logistic regression the optimal parameters $w$ are found by cross-entropy minimization: Loss for one sample: l(x_i, y_i, w) = - \left[ {y_i \cdot log P(y_i = 1 \, | \, x_i,w) + (1-y_i) \cdot log (1-P(y_i = 1\, | \, x_i,w))}\right] Loss for many samples: L(X, \vec{y}, w) = {1 \over \ell} \sum_{i=1}^\ell l(x_i, y_i, w) 123456789def compute_loss(X, y, w): """ Given feature matrix X [n_samples,6], target vector [n_samples] of 1/0, and weight vector w [6], compute scalar loss function L using formula above. Keep in mind that our loss is averaged over all samples (rows) in X. """ y = y.reshape((y.shape[0],1)) return -np.mean(y*np.log(probability(X,w)) + (1-y)*np.log(1-probability(X,w))) # TODO:&lt;your code here&gt; 12# use output of this cell to fill answer field ans_part2 = compute_loss(X_expanded, y, dummy_weights) 12## GRADED PART, DO NOT CHANGE!grader.set_answer("HyTF6", ans_part2) 12# you can make submission with answers so far to check yourself at this stagegrader.submit(COURSERA_EMAIL, COURSERA_TOKEN) Submitted to Coursera platform. See results on assignment page! Since we train our model with gradient descent, we should compute gradients. To be specific, we need a derivative of loss function over each weight [6 of them]. \nabla_w L = {1 \over \ell} \sum_{i=1}^\ell \nabla_w l(x_i, y_i, w)We won’t be giving you the exact formula this time — instead, try figuring out a derivative with pen and paper. As usual, we’ve made a small test for you, but if you need more, feel free to check your math against finite differences (estimate how $L$ changes if you shift $w$ by $10^{-5}$ or so). 12345678def compute_grad(X, y, w): """ Given feature matrix X [n_samples,6], target vector [n_samples] of 1/0, and weight vector w [6], compute vector [6] of derivatives of L over each weights. Keep in mind that our loss is averaged over all samples (rows) in X. """ y = y.reshape((y.shape[0],1)) return np.mean(X*(probability(X,w) - y),axis = 0) 12# use output of this cell to fill answer field ans_part3 = np.linalg.norm(compute_grad(X_expanded, y, dummy_weights)) 12## GRADED PART, DO NOT CHANGE!grader.set_answer("uNidL", ans_part3) 12# you can make submission with answers so far to check yourself at this stagegrader.submit(COURSERA_EMAIL, COURSERA_TOKEN) Submitted to Coursera platform. See results on assignment page! Here’s an auxiliary function that visualizes the predictions: 123456789101112131415161718192021222324from IPython import displayh = 0.01x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))def visualize(X, y, w, history): """draws classifier prediction with matplotlib magic""" Z = probability(expand(np.c_[xx.ravel(), yy.ravel()]), w) Z = Z.reshape(xx.shape) plt.subplot(1, 2, 1) plt.contourf(xx, yy, Z, alpha=0.8) plt.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.Paired) plt.xlim(xx.min(), xx.max()) plt.ylim(yy.min(), yy.max()) plt.subplot(1, 2, 2) plt.plot(history) plt.grid() ymin, ymax = plt.ylim() plt.ylim(0, ymax) display.clear_output(wait=True) plt.show() 1visualize(X, y, dummy_weights, [0.5, 0.5, 0.25]) TrainingIn this section we’ll use the functions you wrote to train our classifier using stochastic gradient descent. You can try change hyperparameters like batch size, learning rate and so on to find the best one, but use our hyperparameters when fill answers. Mini-batch SGDStochastic gradient descent just takes a random batch of $m$ samples on each iteration, calculates a gradient of the loss on it and makes a step: w_t = w_{t-1} - \eta \dfrac{1}{m} \sum_{j=1}^m \nabla_w l(x_{i_j}, y_{i_j}, w_t)12345678910111213141516171819202122232425# please use np.random.seed(42), eta=0.1, n_iter=100 and batch_size=4 for deterministic resultsnp.random.seed(42)w = np.array([0, 0, 0, 0, 0, 1])eta= 0.1 # learning raten_iter = 100batch_size = 4loss = np.zeros(n_iter)plt.figure(figsize=(12, 5))for i in range(n_iter): ind = np.random.choice(X_expanded.shape[0], batch_size) loss[i] = compute_loss(X_expanded, y, w) if i % 10 == 0: visualize(X_expanded[ind, :], y[ind], w, loss) # Keep in mind that compute_grad already does averaging over batch for you! # TODO:&lt;your code here&gt; random_index = np.random.randint(0,X_expanded.shape[0],batch_size) w = w - eta * compute_grad(X_expanded[random_index,:],y[random_index],w)visualize(X, y, w, loss)plt.clf() &lt;matplotlib.figure.Figure at 0x7fdbbfafb908&gt; 12# use output of this cell to fill answer field ans_part4 = compute_loss(X_expanded, y, w) 12## GRADED PART, DO NOT CHANGE!grader.set_answer("ToK7N", ans_part4) 12# you can make submission with answers so far to check yourself at this stagegrader.submit(COURSERA_EMAIL, COURSERA_TOKEN) Submitted to Coursera platform. See results on assignment page! SGD with momentumMomentum is a method that helps accelerate SGD in the relevant direction and dampens oscillations as can be seen in image below. It does this by adding a fraction $\alpha$ of the update vector of the past time step to the current update vector. \nu_t = \alpha \nu_{t-1} + \eta\dfrac{1}{m} \sum_{j=1}^m \nabla_w l(x_{i_j}, y_{i_j}, w_t)w_t = w_{t-1} - \nu_t 1234567891011121314151617181920212223242526# please use np.random.seed(42), eta=0.05, alpha=0.9, n_iter=100 and batch_size=4 for deterministic resultsnp.random.seed(42)w = np.array([0, 0, 0, 0, 0, 1])eta = 0.05 # learning ratealpha = 0.9 # momentumnu = np.zeros_like(w)n_iter = 100batch_size = 4loss = np.zeros(n_iter)plt.figure(figsize=(12, 5))for i in range(n_iter): ind = np.random.choice(X_expanded.shape[0], batch_size) loss[i] = compute_loss(X_expanded, y, w) if i % 10 == 0: visualize(X_expanded[ind, :], y[ind], w, loss) # TODO:&lt;your code here&gt; random_index = np.random.randint(0,X_expanded.shape[0],batch_size) nu = alpha*nu + eta * compute_grad(X_expanded[random_index,:],y[random_index],w) w = w - nuvisualize(X, y, w, loss)plt.clf() &lt;matplotlib.figure.Figure at 0x7fdbba216e10&gt; 123# use output of this cell to fill answer field ans_part5 = compute_loss(X_expanded, y, w) 12## GRADED PART, DO NOT CHANGE!grader.set_answer("GBdgZ", ans_part5) 12# you can make submission with answers so far to check yourself at this stagegrader.submit(COURSERA_EMAIL, COURSERA_TOKEN) Submitted to Coursera platform. See results on assignment page! RMSpropImplement RMSPROP algorithm, which use squared gradients to adjust learning rate: G_j^t = \alpha G_j^{t-1} + (1 - \alpha) g_{tj}^2w_j^t = w_j^{t-1} - \dfrac{\eta}{\sqrt{G_j^t + \varepsilon}} g_{tj}1234567891011121314151617181920212223242526272829# please use np.random.seed(42), eta=0.1, alpha=0.9, n_iter=100 and batch_size=4 for deterministic resultsnp.random.seed(42)w = np.array([0, 0, 0, 0, 0, 1.])eta = 0.1 # learning ratealpha = 0.9 # moving average of gradient norm squaredg2 = None # we start with None so that you can update this value correctly on the first iterationeps = 1e-8G = 0n_iter = 100batch_size = 4loss = np.zeros(n_iter)plt.figure(figsize=(12,5))for i in range(n_iter): ind = np.random.choice(X_expanded.shape[0], batch_size) loss[i] = compute_loss(X_expanded, y, w) if i % 10 == 0: visualize(X_expanded[ind, :], y[ind], w, loss) # TODO:&lt;your code here&gt; random_index = np.random.randint(0,X_expanded.shape[0],batch_size) g2 = np.square(compute_grad(X_expanded[random_index,:],y[random_index],w)) G = alpha*G + (1-alpha) * g2 w = w - eta/np.sqrt(G + eps) * g2 visualize(X, y, w, loss)plt.clf() &lt;matplotlib.figure.Figure at 0x7fdbba944f98&gt; 12# use output of this cell to fill answer field ans_part6 = compute_loss(X_expanded, y, w) 12## GRADED PART, DO NOT CHANGE!grader.set_answer("dLdHG", ans_part6) 1grader.submit(COURSERA_EMAIL, COURSERA_TOKEN) Submitted to Coursera platform. See results on assignment page! 12]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Homework of Online Coueses</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Master Computer Science]]></title>
    <url>%2FMaster-Computer-Science%2F2019%2F02%2F20%2F</url>
    <content type="text"><![CDATA[table th:first-of-type { width: 30%; } MATH Course Institute Rating Type Status Commnet Improving your statistical inferences Eindhoven University of Technology 4.9 Statistical Matrix Algebra for Engineers The Hong Kong University of Science and Technology Linear Algebra completed Easy but useful Mathematical Thinking in Computer Science UCSanDiego Discrete Mathematics Mathematics for Machine Learning Specialization Imperail London University 4.5 Math ARCHIVED Convex Optimization Standford Optimization Statistical Learning Standford Probability and Statistics Probability and Statistics Standford Probability and Statistics Mathematics for Computer Science MIT Math Basic Modeling for Discrete Optimization The Chinese University of Hong Kong Optimization Advanced Modeling for Discrete Optimization The Chinese University of Hong Kong Optimization Discrete Mathematics Generality Pking University 4.7 Discrete Mathematics Methods and Statistics in Social Sciences University of Amsterdam Statistics Introduction to Discrete Mathematics for Computer Science UCSanDiego 4.5 Discrete Mathematics Bayesian Statistics: From Concept to Data Analysis UCSantaCruz Statistics Introduction to Mathematical Thinking Standford Math 18.06 Linear Algebra MIT Linear Algebra Calculus Applied! Harvard Calculus Probability and Statistics in Data Science using Python UCSanDiego Probability and Statistics Introduction to Probability Harvard Probability and Statistics Calculus 1A: Differentiation MIT Calculus Calculus 1B: Integration MIT Calculus Calculus 1C: Coordinate Systems &amp; Infinite Series MIT Calculus Linear Algebra - Foundations to Frontiers UT Austin Linear Algebra Computer Scicence Course Institute Rating Type Status Commnet Cloud Computing Specialization UIUC 4.4 Cloud Computing Data Structures and Algorithms UCSanDiego 4.6 Algorithm and Data Structure Algorithm Part1 Priceton 4.9 Algorithm and Data Structure Algorithm Part2 Priceton 4.9 Algorithm and Data Structure Nand to Tetris Part I Hebrew University of Jerusalem 5 System Nand to Tetris Part II Hebrew University of Jerusalem 5 System Algorithms Specialization Standford Algorithm and Data Structure An Introduction to Programming the Internet of Things (IOT) Specialization University of California, Irvine 4.6 Hardware Functional Programming in Scala École Polytechnique Fédérale de Lausanne 4.5 Programming Language Analysis of Algorithms Priceton Algorithm and Data Structure Parallel, Concurrent, and Distributed Programming in Java Rice University 4.5 Programming Language Probabilistic Graphical Models Specialization Standford 4.7 Graphical Model Bitcoin and Cryptocurrency Technologies Priceton Bitcoin Computer Science: Algorithms, Theory, and Machines Princeton University System CS 61A: Structure and Interpretation of Computer Programs UCBerkeley System CS161: Algorithm Standford Algorithm and Data Structure CS224n: Natural Language Processing with Deep Learning Stanford Natural Language Processing Operating Systems Design and Implementation Standford Operating Systems Operating System Engineering MIT Operating Systems 6.006 Introduction to Algorithms MIT Algorithm and Data Structure Machine Learning Course Institute Rating Type Status Commnet Machine Learning Foundations University of Washington Machine Learning Advanced Machine Learning Specialization National Research University Higher School of Economics Deep Learning Advanced Machine Learning with TensorFlow on Google Cloud Platform Specialization Google 4.6 Machine Learning Machine Learning Standford 4.9 Machine Learning Deep Learning deeplearning.ai 4.9 Deep Learning Self-Driving Cars Specialization University of Toronto 5 Self-Driving Self-Driving Cars Teach-Out University of Michigan 4.9 Self-Driving 機器學習基石上 National Taiwan University 4.9 Machine Learning 機器學習基石下 National Taiwan University 4.9 Machine Learning Recommender Systems Specialization University of Minnesota Recommender Systems CS224n: Natural Language Processing with Deep Learning Stanford Natural Language Processing CS231n: Convolutional Neural Networks for Visual Recognition Standford Computer Vision 11-785 Introduction to Deep Learning Standford Deep Learning Artificial Intelligence Course Institute Rating Type Status Commnet AI for Everyone deeplearning.ai 5 Artificial Intelligence completed good course for AI from business perspective Artificial Intelligence UCBerkeley Artificial Intelligence Data Mining Specialization UIUC Data Mining Data Systems Specialization ASU 4.0 Database I love MOOCs and MOOCs love me]]></content>
      <categories>
        <category>Gossip</category>
      </categories>
      <tags>
        <tag>Courses</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[INFSCI 2160 DATA MINING(PART ONE)]]></title>
    <url>%2FINFSCI-2160-DATA-MINING-PART-ONE%2F2019%2F02%2F18%2F</url>
    <content type="text"><![CDATA[Reference from some lecture slides of INFSCI 2160 DATA MINING lectured by Matt Berezo Introduction What is Artificial Intelligence?The goal of machine learning/AI/data mining is to develop an algorithm that performs well on new, unseen inputs. The ability to perform well on previously unobserved inputs is called generalization Data Mining process Business undertanding is important Data understranding is important Regression Simple linear regression involves 2 variables: A predictor variable, x A response variable, y \hat{y_{i}} = \hat{\alpha} + \hat{\beta_{i}}X_{i} $\hat{y_{i}}$ = Estimated prediction of y $\hat{\alpha}$ = Intercept $\hat{\beta_{i}}$ = coefficient/parameter Goal: Obtain coefficient estimates that the linear model fits the available data well, and will also perform well (generalize) on unseen data The least square approach\begin{align*} & \hat{\beta_{1}} = \frac{\sum_{i=1}^{n}{(x_{i}-\bar{x})(y_{i}-\bar{y})}}{\sum_{i=1}^{n}{(x_{i} - \bar{x})^{2}}}\\ & \hat{\beta_{0}} = \bar{y} - \hat{\beta_{1}}\bar{x} \end{align*}Coefficient AccuracyWe can compute the standard error of our coefficients what is SE (standaed error)? If the purpose is Descriptive, use standard Deviation; if the purpose is Estimation, use standard Error. 很容易混淆,我们拿到一个样本,对样本观察值离散程度的量化是$SD:sd(x)$; 而我们可以从很多个样本中得到很多个均值，这些均值的离散度用SE来量化,也就是$SE=sd(\bar{x})$ 1234567891011## generate 1000 sample with sample size 100a = sapply(rep(100, 1000), rnorm)a.mean = colMeans(a)## estimate SEM by simulationsd(a.mean)## estimate SEM by sigma/sqrt(n), sigma = 11/sqrt(100)## estimate SEM by sample 1sd(a[, 1])/sqrt(100) We have established that the average of $\hat{\mu}$ over many data sets will be very close to $\mu$, but that a single estimate $\hat{\mu}$ may be a substantial underestimate or overestimate of $\mu$. How far off will that single estimate of $\hat{\mu}$ be? \begin{align*} & SE(\hat{\beta_{0}})^{2} = \sigma^{2}\lbrack\frac{1}{n} + \frac{\bar{x}^{2}}{\sum_{i=1}^{n}{(x_{i} - \bar{x})^{2}}}\rbrack\\ & SE(\hat{\beta_{1}})^{2} = \frac{\sigma^{2}}{\sum_{i=1}^{n}{(x_{i} - \bar{x})^{2}}}\\ \end{align*}When we get the SE of parameters, we can calculate the 95% confidence interval \hat{B_{i}} = +/- 2 * SE(\hat{B_{i}})Standard errors can also be used to perform hypothesis tests on the coefficients. The most common hypothesis test involves testing the null hypothesis Null hypothesis(H0): there is no relationship between x and y Alternative hypothesis(Ha): there is a relationship between x and y Mathematically, this corresponds to testing \begin{align*} H_{0}: \beta_{1} = 0 \\ H_{a}: \beta_{1} \ne 0 \\ \end{align*}To test the null hypothesis, we need to determine whether $\hat{β_{1}}$, our estimate for $\hat{β_{1}}$ , is sufficiently far from zero that we can be confident that $\hat{β_{1}}$ is non-zero t = \frac{\hat{β_{1}} - 0}{SE(\hat{\beta_{1}})}Model Accuracy RSS: Residual Sum of Squares e_{1}^{2} + e_{2}^{2} + e_{3}^{2} + ..... RSE: Residual standard error \sqrt\frac{RSS}{(N-2)} R squaredHow much better does your model do than simply using the mean, in terms ofSSE?R^{2} = 1 - (\frac{\sum{(y_{i} - \hat{y}_{i})^{2}}}{\sum{(y_{i} - \overline{y}_{i})^{2}}}) R-square takes form of a proportion and gives a value between 0 and 1 (1 = perfect model) Multiple Linear Regression F-statIf the F-stat is larger than 1 and the p-value is &lt;= 0.05, we can determine that our predictors and model have a relationship with the response variable \frac{TSS - RSS}{p} / \frac{RSS}{n-p-1}- Where p = our number of predictors - N = number of observations R-squaredR^{2} = 1 - \frac{\sum{(y_{i} - \hat{y}_{i})^{2}} / (n-d-1)}{\sum{(y_{i} - \overline{y}_{i})^{2}}/(n-d)} Feature SelectionStepwise Procedures Backward Elimination This is the simplest of all variable selection procedures and can be easily implemented without special software. In situations where there is a complex hierarchy, backward elimination can be run manually while taking account of what variables are eligible for removal. Start with all the predictors in the model Remove the predictor with highest p-value greater than $\alpha$ Refit the model and goto 2 Stop when all p-values are less than $\alpha$ Forward Selection This just reverses the backward method. Start with no variables in the model. For all predictors not in the model, check their p-value if they are added to the model. Choose the one with lowest p-value less than αcrit . Continue until no new predictors can be added. Ridge regression (i.e., L2 norm regulizar)Ridge looks to minimize: RSS + \lambda\sum_{j=1}^{p}{\beta_{j}^{2}} $\lambda$ is a tuning parameter Bias vs. Variance Trade-offIdeally, we want to derive a model that has low bias, low variance, and low MSE on test data Local Polynomial Regression The fitted value changes with x in a nonparametric manner Define a weight function so that only values within a smoothing window [𝑥0 - h(𝑥0 ), 𝑥0 + h(𝑥0 )] will be considered in the estimate of $\hat{y}$ Model PerformanceCross-validationThe goal of cross-validation is to test the model’s ability to predict new data that was not used in estimating it, in order to flag problems like overfitting or selection bias[6] and to give an insight on how the model will generalize to an independent dataset (i.e., an unknown dataset, for instance from a real problem). Advantages of LOOCVAdvantages of LOOCV: Works well on small datasets Meticulously tests the data Disadvantages of LOOCV: Computationally expensive on “big data” sets Can result in high variability since model is only tested on one observation Overfitting Use cross-validation Ensemble/combine models together Use regularization techniques to penalize models that are too complex Non-parametric MethodsAdvantages of Non-parametric Methods: Do not assume an explicit form of f(x), so the model is more “flexible” Disadvantages of Non-Parametric Methods: Often are more complex and thus more difficult to interpret K Nearest-Neighbors KNN is a non-parametric method, vs. linear and logistic regression which are parametric approaches since they assume a linear functional form for f(x) Accuracy and Error Rate1234567891011import numpy as npfrom sklearn import metricsy = np.array([1, 1, 2, 2])scores = np.array([0.1, 0.4, 0.35, 0.8])fpr, tpr, thresholds = metrics.roc_curve(y, scores, pos_label=2)&gt;&gt;&gt; fprarray([0. , 0. , 0.5, 0.5, 1. ])&gt;&gt;&gt; tprarray([0. , 0.5, 0.5, 1. , 1. ])&gt;&gt;&gt; thresholdsarray([1.8 , 0.8 , 0.4 , 0.35, 0.1 ]) ClassificationNaïve Bayes a Naïve Bayes classifier assumes independence between features Naïve Bayes assumes that the continuous variables are normally distributed For continuous random variables, probabilities are areas under the curve Decision TreesConstructing Decision Trees for Regression First, we divide the predictor space into distinct and non-overlapping regions (𝑅1, 𝑅2,𝑅3 … 𝑅𝑛) To make a prediction, we typically use the mean of the training data in the region to which it belongs How do we construct R1 and R2?The goal is to find regions that minimize the residual sum of squares (RSS) Decision trees can get too complex, memorize the training data, and overfit on test data It is advised to first build a very large tree and then prune it back to obtain a subtree Given a subtree, we can estimate the test error rate using cross-validation Cost complexity pruning i.e., weakest link pruning gives us the most efficient way to choose our subset of trees Decision Trees Advantages and DisadvantagesAdvantages: Trees are easy to explain and are intuitive Trees can be displayed graphically and are easy to interpret Trees can handle qualitative predictors without dummy variables Disadvantages: Trees to not usually have the same level of predictive accuracy as other regression and classification methods Trees can be non-robust, i.e., a small change in the data can cause a large change in the tree Bagging and Random ForestsBootstrap aggregation, also known as bagging, is a procedure of reducing the variance of a statistical learning method This is a good way to reduce variance→by taking many training sets from the population and buildseparate learning methods using each set We can then calculate f1,f2,f3… and average them in order to obtain a low-variancestatistical model We can do this by bootstrapping, or taking repeated random samples from the training set Ensemble learning is a machine learning paradigm where multiple learners are trained to solve the same problem Random forests provide an improvement over bagged trees by decorrelating them Like bagging, decision trees are made on bootstrapped training samples Random forests are an ensemble method for decision trees The difference is, each time a split in the tree is considered, a random sample of predictors is chosen as split candidates from the full set of predictors. So, at each split of the tree, the algorithm can’t even consider a majority of the predictors Support Vector Machines SVM’s use a classifying tool called maximum margin classifier maximum margin classifiers can’t be applied to most datasets because they require the classes to be separated by a linear boundary Support vector classifiers are an extension of maximum margin classifiers that can be applied to a broader range of datasets hyperplaneA hyperplane is a flat subspace in p-dimensional space with p – 1 dimensions parameters C = a nonnegative tuning parameter C can be thought of as a budget for the amount the margin can be violated by n observations. If C = 0, there is no budget for violations to the margin large C, Overfitting small C, underfitting What if the decision boundary for the two classes is not linear? enlarging the feature space with kernels A kernel is a function that quantifies the similarity between two observations Multinomial Logistic Regression Similar to binary logistic regression, all probabilities in the output will sum to 1 This is just an extension of the same math from logistic regression Drawbacks Models involve many parameters, which makes their interpretation tedious Maximum-likelihood estimation can encounter numerical problems if the data is separable and if the predicted probabilities are close to either 0 or 1 XGBoostoverviewAdvantages of XGBoost: Scalability: XGBoost system runs 10x faster than existing popular solutions on a single machine XGBoost accepts null values: users don’t have to impute missing values, drop records, etc. Less time spent on feature selection and more time spent on hyperparametric tuning Typically, one tree is not as strong as an ensemble/combination of other trees. XGBoost uses an ensemble method to gather information from other trees. Objective Function and RegularizationThe additive function fixes what we have already learned, and adds one new tree at a time But how do we choose which tree we want at each step? We pick the one that optimizes our objective function! This is known as an additive function Objective Functions Linear: Continuous numeric prediction Binary: logistic,binary classification Multi:softmax: multiclassification Tree Boosting ParametersReference from https://www.cnblogs.com/sarahp/p/6900572.html Eta (i.e., learning rate): Step shrinkage use in update to prevent overfitting. After each boosting step, we can getthe weights of new features. Eta shrinks the weights to make the boosting process more conservative Gamma: Minimum loss reduction required to make a further partition on a leaf node of a tree. Larger gamma = more conservative model (这个指定了一个结点被分割时，所需要的最小损失函数减小的大小) Max depth: Maximum depth of a tree. Increasing this value will make the model more complex (树的最大深度，值越大，树越复杂) Minimum child weight: Minimum sum of instance weight needed in a child. If the tree partition step results in a leaf node with the sum of instance weight less than this set parameter, the building process will stop partitioning. Larger weight = more conservative model (定义了一个子集的所有观察值的最小权重和) Subsample: A subsample ratio of the training instances. Setting to 0.5 would make XGBoost randomly sample halfof the training data prior to growing trees and will help prevent overfitting (样本的采样率，如果设置成0.5，那么Xgboost会随机选择一般的样本作为训练集) Column sample by tree: Subsample ratio of columns when constructing a tree Column sample by level: Subsample ratio of columns for each level of the tree Column sample by node: Subsample ratio of columns for each node (split) Lambda: L2 regularization Alpha: L1 regularization Scale positive weight: Control the balance of positive and negative weights REVIEWWhat is the difference between boost, ensemble, bootstrap and bagging?Reference from https://www.quora.com/What-is-the-difference-between-boost-ensemble-bootstrap-and-bagging Boosting is the idea of training iteratively the same “weak” classifier, so that at each iteration, the i-th classifier is supposed to correct the mistakes made by the previous classifier (i-1). It is done by weighting more the misclassified observations. The final classifier is calculated by a weighted mean of all the “weak” classifiers, the weights being close to the accuracies calculated for each classifier. Ensembling is quite general and encompasses simple methods like Averaging, and more complicated ones like Boosting, Bagging, Stacking, etc. Bootstrapping means taking a sample of a population by drawing with replacement. It is one of the main ideas behind Bagging (which stands for Bootstrap AGGregatING). Bagging means training the same classifier on different subsets (that may be overlapping) of one dataset. You do so with bootstrap. RF vs XGBoostReference from https://www.cnblogs.com/sarahp/p/6900572.html RF use bagging: 种集成学习算法，基于bootstrap sampling 自助采样法，重复性有放回的随机采用部分样本进行训练最后再将结果 voting 或者 averaging 它是并行式算法，因为不同基学习器是独立 训练一个bagging集成学习器时间复杂度与基学习器同阶（n倍，n为基学习器个数）。 bagging可以用于二分类／多分类／回归 每个基学习器的未用作训练样本可用来做包外估计，评价泛化性能。 bagging主要关注降低方差 两个步骤 1. 抽样训练（采样样本，采样特征） 2 融合 XGBoost use boosting(Gradient Boosting Decision Tree): gbdt的基本原理是boost 里面的 boosting tree（提升树），并使用 gradient boost。 Gradient Boosting是一种Boosting的方法，其与传统的Boosting的区别是，每一次的计算是为了减少上一次的残差(residual)，而为了消除残差，可以在残差减少的梯度(Gradient)方向上建立一个新的模型。所以说，在Gradient Boosting中，每个新的模型的建立是为了使得之前模型的残差往梯度方向减少，与传统Boosting对正确、错误样本进行加权有着很大的区别。这个梯度代表上一轮学习器损失函数对预测值求导。 与Boosting Tree的区别：Boosting Tree的适合于损失函数为平方损失或者指数损失。而Gradient Boosting适合各类损失函数（损失函数为：平方损失则相当于Boosting Tree拟合残差、损失函数为：使用指数损失则可以近似于Adaboost，但树是回归树）]]></content>
      <categories>
        <category>Data Mining</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Machine Learning Assignment1(Upitt)]]></title>
    <url>%2FMachine-Learning-Assignment1-upitt%2F2019%2F02%2F17%2F</url>
    <content type="text"><![CDATA[Enter password to read. Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>Homework</category>
      </categories>
      <tags>
        <tag>Homewrok of Upitt</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Machine Learning (Andrew Ng)]]></title>
    <url>%2FMachine-Learning-Andraw-Ng%2F2019%2F02%2F15%2F</url>
    <content type="text"><![CDATA[Reference From Coursera Course Machine Learning. I am also really sorry that I did not write down some sources when I cite from the web. I was too young and did not get any academic training when I wrote these notes. Let me thank Ng first. This course Changed me. I still remember that afternoon when I was just a sophomore. I discovered the Machine Learning course lectured by Andrew Ng on Coursera and was fascinated by the underlying algorithms. It was amazing to see that a simple yet elegant mathematical model could make predictions on new data after being trained with large amounts of training sets for analysis and fitting. I spent several days on the assignments and developed a classifier to filter spam emails and an Optical Character Recognition program. Never expecting that I could program the machine to gain the cognitive ability, I was so thrilled and resolved to advance my knowledge in this area. About two years later, I took this course again and reviewed some important concepts to prapare the interviews. I wrote down notes and paid for the course this time This is my course certificate. I really want all of guys who want to dive into the area of machine learning to take this course on Coursera. What is Machine Learning?Two definitions of Machine Learning are offered. Arthur Samuel described it as: “the field of study that gives computers the ability to learn without being explicitly programmed.“ This is an older, informal definition. Tom Mitchell provides a more modern definition: “A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P, if its performance at tasks in T, as measured by P, improves with experience E.” Example: playing checkers. E = the experience of playing many games of checkers T = the task of playing checkers. P = the probability that the program will win the next game. In general, any machine learning problem can be assigned to one of two broad classifications: Supervised learning and Unsupervised learning. Supervised LearningIn supervised learning, we are given a data set and already know what our correct output should look like, having the idea that there is a relationship between the input and the output. Supervised learning problems are categorized into “regression“ and “classification“ problems. In a regression problem, we are trying to predict results within a continuous output, meaning that we are trying to map input variables to some continuous function. In a classification problem, we are instead trying to predict results in a discrete output. In other words, we are trying to map input variables into discrete categories. Example 1: Given data about the size of houses on the real estate market, try to predict their price. Price as a function of size is a continuous output, so this is a regression problem. We could turn this example into a classification problem by instead making our output about whether the house “sells for more or less than the asking price.” Here we are classifying the houses based on price into two discrete categories. Example 2: Regression - Given a picture of a person, we have to predict their age on the basis of the given picture Classification - Given a patient with a tumor, we have to predict whether the tumor is malignant or benign. Unsupervised LearningUnsupervised learning allows us to approach problems with little or no idea what our results should look like. We can derive structure from data where we don’t necessarily know the effect of the variables. We can derive this structure by clustering the data based on relationships among the variables in the data. With unsupervised learning there is no feedback based on the prediction results. Example: Clustering: Take a collection of 1,000,000 different genes, and find a way to automatically group these genes into groups that are somehow similar or related by different variables, such as lifespan, location, roles, and so on. Model RepresentationTo establish notation for future use, we’ll use x(i) to denote the “input” variables (living area in this example), also called input features, and y(i) to denote the “output” or target variable that we are trying to predict (price). A pair (x(i),y(i)) is called a training example, and the dataset that we’ll be using to learn—a list of m training examples (x(i),y(i));i=1,…,m—is called a training set. Note that the superscript “(i)” in the notation is simply an index into the training set, and has nothing to do with exponentiation. We will also use X to denote the space of input values, and Y to denote the space of output values. In this example, X = Y = ℝ. To describe the supervised learning problem slightly more formally, our goal is, given a training set, to learn a function h : X → Y so that h(x) is a “good” predictor for the corresponding value of y. For historical reasons, this function h is called a hypothesis. Seen pictorially, the process is therefore like this: When the target variable that we’re trying to predict is continuous, such as in our housing example, we call the learning problem a regression problem. When y can take on only a small number of discrete values (such as if, given the living area, we wanted to predict if a dwelling is a house or an apartment, say), we call it a classification problem. Linear Regression with Multiple VariablesCost FunctionWe can measure the accuracy of our hypothesis function by using a cost function. This takes an average difference (actually a fancier version of an average) of all the results of the hypothesis with inputs from x’s and the actual output y’s. J(θ_0,θ_1)=\frac{1}{2m}\sum_{i=1}^m(\hat{y}_i−y_i)^2=\frac{1}{2m}\sum_{i=1}^m(h_θ(x_i)−y_i)^2To break it apart, it is $\frac{1}{2}\bar{x}$ where $\bar{x}$ is the mean of the squares of $h_θ(x_i)−y_i$ , or the difference between the predicted value and the actual value. This function is otherwise called the “Squared error function”, or “Mean squared error”. The mean is halved ($\frac{1}{2}$) as a convenience for the computation of the gradient descent, as the derivative term of the square function will cancel out the $\frac{1}{2}$ term. The following image summarizes what the cost function does: Cost Function - Intuition IIf we try to think of it in visual terms, our training data set is scattered on the x-y plane. We are trying to make a straight line (defined by $h_θ(x)$) which passes through these scattered data points. Our objective is to get the best possible line. The best possible line will be such so that the average squared vertical distances of the scattered points from the line will be the least. Ideally, the line should pass through all the points of our training data set. In such a case, the value of $J(θ_0,θ_1)$ will be 0. The following example shows the ideal situation where we have a cost function of 0. When $θ_1=1$, we get a slope of 1 which goes through every single data point in our model. Conversely, when θ1=0.5, we see the vertical distance from our fit to the data points increase. This increases our cost function to 0.58. Plotting several other points yields to the following graph: Thus as a goal, we should try to minimize the cost function. In this case, $θ_1=1$ is our global minimum. Cost Function - Intuition IIA contour plot is a graph that contains many contour lines. A contour line of a two variable function has a constant value at all points of the same line. An example of such a graph is the one to the right below. Taking any color and going along the ‘circle’, one would expect to get the same value of the cost function. For example, the three green points found on the green line above have the same value for $J(θ_0,θ_1)$ and as a result, they are found along the same line. The circled x displays the value of the cost function for the graph on the left when $θ_0 = 800$ and $θ_1= -0.15$. Taking another h(x) and plotting its contour plot, one gets the following graphs: When $θ_0 = 360$ and $θ_1 = 0$, the value of $J(θ_0,θ_1)$ in the contour plot gets closer to the center thus reducing the cost function error. Now giving our hypothesis function a slightly positive slope results in a better fit of the data. The graph above minimizes the cost function as much as possible and consequently, the result of $θ_1$ and $θ_0$ tend to be around 0.12 and 250 respectively. Plotting those values on our graph to the right seems to put our point in the center of the inner most ‘circle’. Gradient DescentSo we have our hypothesis function and we have a way of measuring how well it fits into the data. Now we need to estimate the parameters in the hypothesis function. That’s where gradient descent comes in. Imagine that we graph our hypothesis function based on its fields $θ_0$ and $θ_1$ (actually we are graphing the cost function as a function of the parameter estimates). We are not graphing x and y itself, but the parameter range of our hypothesis function and the cost resulting from selecting a particular set of parameters. We put $θ_0$ on the x axis and $θ_1$ on the y axis, with the cost function on the vertical z axis. The points on our graph will be the result of the cost function using our hypothesis with those specific theta parameters. The graph below depicts such a setup. We will know that we have succeeded when our cost function is at the very bottom of the pits in our graph, i.e. when its value is the minimum. The red arrows show the minimum points in the graph. The way we do this is by taking the derivative (the tangential line to a function) of our cost function. The slope of the tangent is the derivative at that point and it will give us a direction to move towards. We make steps down the cost function in the direction with the steepest descent. The size of each step is determined by the parameter α, which is called the learning rate. For example, the distance between each ‘star’ in the graph above represents a step determined by our parameter α. A smaller α would result in a smaller step and a larger α results in a larger step. The direction in which the step is taken is determined by the partial derivative of $J(θ_0,θ_1)$. Depending on where one starts on the graph, one could end up at different points. The image above shows us two different starting points that end up in two different places. The gradient descent algorithm is: repeat until convergence: θ_j:=θ_j−α\frac{∂}{∂θj}J(θ_0,θ_1)wherej=0,1 represents the feature index number.At each iteration j, one should simultaneously update the parameters $θ_1$,$θ_2$,…,$θ_n$. Updating a specific parameter prior to calculating another one on the $j^{(th)}$ iteration would yield to a wrong implementation. Gradient Descent IntuitionIn this video we explored the scenario where we used one parameter $θ_s1$ and plotted its cost function to implement a gradient descent. Our sformula for a single parameter was: Repeat until convergence: θ_1 := θ_1 − α\frac{d}{dθ_1}J(θ_1)Regardless of the slope’s sign for \frac{d}{dθ_1}J(θ_1), $θ_1$ eventually converges to its minimum value. The following graph shows that when the slope is negative, the value of $θ_1$ increases and when it is positive, the value of θ1 decreases. On a side note, we should adjust our parameter α to ensure that the gradient descent algorithm converges in a reasonable time. Failure to converge or too much time to obtain the minimum value imply that our step size is wrong. How does gradient descent converge with a fixed step size α? The intuition behind the convergence is that $\frac{d}{dθ_1}J(θ_1)$ approaches 0 as we approach the bottom of our convex function. At the minimum, the derivative will always be 0 and thus we get: θ_1 := θ_1 − α∗0 Gradient Descent For Linear RegressionWhen specifically applied to the case of linear regression, a new form of the gradient descent equation can be derived. We can substitute our actual cost function and our actual hypothesis function and modify the equation to : repeat until convergence:{ \begin{align*} & θ_0:=θ_0−α\frac{1}{m}\sum_{i=1}^m(h_θ(x_i)−y_i) \\ & θ_1:=θ_1−α\frac{1}{m}\sum_{i=1}^m((h_θ(x_i)−y_i)x_i) \end{align*}} where m is the size of the training set, $θ_0$ a constant that will be changing simultaneously with θ1 and xi,yiare values of the given training set (data). Note that we have separated out the two cases for $θ_j$ into separate equations for $θ_0$ and $θ_1$; and that for $θ_1$ we are multiplying $x_i$ at the end due to the derivative. The following is a derivation of $\frac{∂}{∂θ_j}J(θ)$ for a single example : The point of all this is that if we start with a guess for our hypothesis and then repeatedly apply these gradient descent equations, our hypothesis will become more and more accurate. So, this is simply gradient descent on the original cost function J. This method looks at every example in the entire training set on every step, and is called batch gradient descent. Note that, while gradient descent can be susceptible to local minima in general, the optimization problem we have posed here for linear regression has only one global, and no other local, optima; thus gradient descent always converges (assuming the learning rate α is not too large) to the global minimum. Indeed, J is a convex quadratic function. Here is an example of gradient descent as it is run to minimize a quadratic function. The ellipses shown above are the contours of a quadratic function. Also shown is the trajectory taken by gradient descent, which was initialized at (48,30). The x’s in the figure (joined by straight lines) mark the successive values of θ that gradient descent went through as it converged to its minimum. Matrices and VectorsMatrices are 2-dimensional arrays: \begin{pmatrix} a & b & c \\ d & e & f \\ g & h & i \\ j & k & l \\ \end{pmatrix}The above matrix has four rows and three columns, so it is a 4 x 3 matrix. A vector is a matrix with one column and many rows: \begin{bmatrix} a \\ b \\ c \\ d \\ e \\ \end{bmatrix}So vectors are a subset of matrices. The above vector is a 4 x 1 matrix. Notation and terms: $A_{ij}$ refers to the element in the ith row and jth column of matrix A. A vector with ‘n’ rows is referred to as an ‘n’-dimensional vector. $v_i$ refers to the element in the ith row of the vector.In general, all our vectors and matrices will be 1-indexed. Note that for some programming languages, the arrays are 0-indexed. Matrices are usually denoted by uppercase names while vectors are lowercase. “Scalar” means that an object is a single value, not a vector or matrix. ℝ refers to the set of scalar real numbers. ℝ𝕟 refers to the set of n-dimensional vectors of real numbers. 1234567891011121314151617% The ; denotes we are going back to a new row.A = [1, 2, 3; 4, 5, 6; 7, 8, 9; 10, 11, 12]% Initialize a vector v = [1;2;3] % Get the dimension of the matrix A where m = rows and n = columns[m,n] = size(A)% You could also store it this waydim_A = size(A)% Get the dimension of the vector v dim_v = size(v)% Now let's index into the 2nd row 3rd column of matrix AA_23 = A(2,3) Addition and Scalar MultiplicationAddition and subtraction are element-wise, so you simply add or subtract each corresponding element: \begin{equation} \begin{bmatrix} a & b \\ c & d \\ \end{bmatrix} + \begin{bmatrix} w & x \\ y & z \\ \end{bmatrix} = \begin{bmatrix} a+w & b+x \\ c+y & d+z \\ \end{bmatrix} \end{equation}Subtracting Matrices: \begin{equation} \begin{bmatrix} a & b \\ c & d \\ \end{bmatrix} - \begin{bmatrix} w & x \\ y & z \\ \end{bmatrix} = \begin{bmatrix} a-w & b-x \\ c-y & d-z \\ \end{bmatrix} \end{equation}To add or subtract two matrices, their dimensions must be the same. In scalar multiplication, we simply multiply every element by the scalar value: \begin{equation} \begin{bmatrix} a & b \\ c & d \\ \end{bmatrix} * x = \begin{bmatrix} a*x & b*x \\ c*x & d*x \\ \end{bmatrix} \end{equation}In scalar division, we simply divide every element by the scalar value: \begin{equation} \begin{bmatrix} a & b \\ c & d \\ \end{bmatrix} / x = \begin{bmatrix} a/x & b/x \\ c/x & d/x \\ \end{bmatrix} \end{equation}Experiment below with the Octave/Matlab commands for matrix addition and scalar multiplication. Feel free to try out different commands. Try to write out your answers for each command before running the cell below. 123456789101112131415161718192021% Initialize matrix A and B A = [1, 2, 4; 5, 3, 2]B = [1, 3, 4; 1, 1, 1]% Initialize constant s s = 2% See how element-wise addition worksadd_AB = A + B % See how element-wise subtraction workssub_AB = A - B% See how scalar multiplication worksmult_As = A * s% Divide A by sdiv_As = A / s% What happens if we have a Matrix + scalar?add_As = A + s Matrix-Vector Multiplication \begin{equation} \begin{bmatrix} a & b\\ c & d\\ e & f\\ \end{bmatrix} *\begin{bmatrix} x \\ y \\ \end{bmatrix} = \begin{bmatrix} a*x & b*y\\ c*x & d*y\\ e*x & f*y\\ \end{bmatrix} \end{equation}Below is an example of a matrix-vector multiplication. Make sure you understand how the multiplication works. Feel free to try different matrix-vector multiplications. 12345678% Initialize matrix A A = [1, 2, 3; 4, 5, 6;7, 8, 9] % Initialize vector v v = [1; 1; 1] % Multiply A * vAv = A * v Matrix-Matrix MultiplicationWe multiply two matrices by breaking it into several vector multiplications and concatenating the result. \begin{equation} \begin{bmatrix} a & b\\ c & d\\ e & f\\ \end{bmatrix} *\begin{bmatrix} w & x \\ y & z \\ \end{bmatrix} = \begin{bmatrix} a∗w+b∗y & a∗x+b∗z \\ c∗w+d∗y & c∗x+d∗z \\ e∗w+f∗y & e∗x+f∗z \\ \end{bmatrix} \end{equation}An m x n matrix multiplied by an n x o matrix results in an m x o matrix. In the above example, a 3 x 2 matrix times a 2 x 2 matrix resulted in a 3 x 2 matrix. To multiply two matrices, the number of columns of the first matrix must equal the number of rows of the second matrix. For example:12345678910% Initialize a 3 by 2 matrix A = [1, 2; 3, 4;5, 6]% Initialize a 2 by 1 matrix B = [1; 2] % We expect a resulting matrix of (3 by 2)*(2 by 1) = (3 by 1) mult_AB = A*B% Make sure you understand why we got that result Matrix Multiplication Properties Matrices are not commutative: A∗B≠B∗A Matrices are associative: (A∗B)∗C=A∗(B∗C) The identity matrix, when multiplied by any matrix of the same dimensions, results in the original matrix. It’s just like multiplying numbers by 1. The identity matrix simply has 1’s on the diagonal (upper left to lower right diagonal) and 0’s elsewhere. \begin{bmatrix} 1 & 0 & 0 \\ 0 & 1 & 0 \\ 0 & 0 & 1 \\ \end{bmatrix}When multiplying the identity matrix after some matrix (A∗I), the square identity matrix’s dimension should match the other matrix’s columns. When multiplying the identity matrix before some other matrix (I∗A), the square identity matrix’s dimension should match the other matrix’s rows. 12345678910111213141516171819202122% Initialize random matrices A and B A = [1,2;4,5]B = [1,1;0,2]% Initialize a 2 by 2 identity matrixI = eye(2)% The above notation is the same as I = [1,0;0,1]% What happens when we multiply I*A ? IA = I*A % How about A*I ? AI = A*I % Compute A*B AB = A*B % Is it equal to B*A? BA = B*A % Note that IA = AI but AB != BA Inverse and Transpose \begin{equation} A = \begin{bmatrix} a & b\\ c & d\\ e & f\\ \end{bmatrix} \end{equation}In other words: A_{ij}=A^T_{ji}1234567891011% Initialize matrix A A = [1,2,0;0,5,6;7,0,9]% Transpose A A_trans = A' % Take the inverse of A A_inv = inv(A)% What is A^(-1)*A? A_invA = inv(A)*A multivariate Linear AnalyticallyMultiple FeaturesLinear regression with multiple variables is also known as “multivariate linear regression”. We now introduce notation for equations where we can have any number of input variables. $x^{(i)}_j$ = value of feature j in the $i^{th}$ training example $x^{(i)}$ =the input (features) of the $i^{th}$ training example m = the number of training examples n = the number of features The multivariable form of the hypothesis function accommodating these multiple features is as follows: h_θ(x)=θ_0+θ_1x1+θ_2x_2+θ_3x_3+\cdots+θ_nx_nIn order to develop intuition about this function, we can think about θ0 as the basic price of a house, θ1 as the price per square meter, θ2 as the price per floor, etc. x1 will be the number of square meters in the house, x2 the number of floors, etc. Using the definition of matrix multiplication, our multivariable hypothesis function can be concisely represented as: \begin{equation} h_θ(x) = \left[ \begin{array}{ccc} θ_0 & θ_1 & \cdots & θ_n \end{array} \right] \left[ \begin{array}{ccc} θ_0 \\ θ_1 \\ \vdots \\ θ_n \end{array} \right] = θ^Tx \end{equation}This is a vectorization of our hypothesis function for one training example; see the lessons on vectorization to learn more. Remark: Note that for convenience reasons in this course we assume $x^{(i)}_0=1$ for (i∈1,…,m). This allows us to do matrix operations with theta and x. Hence making the two vectors ‘θ’ and $x^{(i)}$ match each other element-wise (that is, have the same number of elements: n+1).] Gradient Descent For Multiple VariablesThe gradient descent equation itself is generally the same form; we just have to repeat it for our ‘n’ features: repeat until convergence:{ \begin{align*} & θ_0:=θ_0−α\frac{1}{m}\sum_{i=1}^m(h_θ(x^{(i)})−y^{(i)}) \cdot{x^{(i)}_0}\\ & θ_1:=θ_1−α\frac{1}{m}\sum_{i=1}^m(h_θ(x^{(i)})−y^{(i)}) \cdot{x^{(i)}_1}\\ & θ_2:=θ_2−α\frac{1}{m}\sum_{i=1}^m(h_θ(x^{(i)})−y^{(i)}) \cdot{x^{(i)}_2}\\ & \cdots \end{align*}} In other words: repeat until convergence: { θ_j:=θ_0−α\frac{1}{m}\sum_{i=1}^m(h_θ(x^{(i)})−y^{(i)}) \cdot{x^{(i)}_j} \qquad for\ j := 0\cdots n} The following image compares gradient descent with one variable to gradient descent with multiple variables: Gradient Descent in Practice I - Feature ScalingWe can speed up gradient descent by having each of our input values in roughly the same range. This is because θ will descend quickly on small ranges and slowly on large ranges, and so will oscillate inefficiently down to the optimum when the variables are very uneven. The way to prevent this is to modify the ranges of our input variables so that they are all roughly the same. Ideally: −1 ≤ x_{(i)} ≤ 1or −0.5 ≤ x_{(i)} ≤ 0.5These aren’t exact requirements; we are only trying to speed things up. The goal is to get all input variables into roughly one of these ranges, give or take a few. Two techniques to help with this are feature scaling and mean normalization. Feature scaling involves dividing the input values by the range (i.e. the maximum value minus the minimum value) of the input variable, resulting in a new range of just 1. Mean normalization involves subtracting the average value for an input variable from the values for that input variable resulting in a new average value for the input variable of just zero. To implement both of these techniques, adjust your input values as shown in this formula: x_i:=\frac{x_i−μ_i}{si}Where μi is the average of all the values for feature (i) and si is the range of values (max - min), or si is the standard deviation. For example, if xi represents housing prices with a range of 100 to 2000 and a mean value of 1000, then, $x_i:=\frac{price−1000}{1900}$. Gradient Descent in Practice II - Learning RateDebugging gradient descent. Make a plot with number of iterations on the x-axis. Now plot the cost function, $J_{(θ)}$ over the number of iterations of gradient descent. If $J_{(θ)}$ ever increases, then you probably need to decrease α. Automatic convergence test. Declare convergence if $J_{(θ)}$ decreases by less than E in one iteration, where E is some small value such as 10−3. However in practice it’s difficult to choose this threshold value. It has been proven that if learning rate α is sufficiently small, then $J_{(θ)}$ will decrease on every iteration. To summarize: If α is too small: slow convergence. If α is too large: may not decrease on every iteration and thus may not converge. Features and Polynomial RegressionWe can improve our features and the form of our hypothesis function in a couple different ways. We can combine multiple features into one. For example, we can combine $x_1$ and $x_2$ into a new feature x3 by taking $x_1⋅x_2$. Polynomial Regression Our hypothesis function need not be linear (a straight line) if that does not fit the data well. We can change the behavior or curve of our hypothesis function by making it a quadratic, cubic or square root function (or any other form). For example, if our hypothesis function is $h_θ(x)=θ_0+θ_1x_1$ then we can create additional features based on x1, to get the quadratic function $h_θ(x)=θ_0+θ_1x_1+θ_2x^2_1$ or the cubic function $hθ(x)=θ_0+θ_1x_1+θ_2x^2_1+θ_3x^3_1$In the cubic version, we have created new features $x_2$ and $x_3$ where $x_2=x^2_1$ and $x_3=x^3_1$. To make it a square root function, we could do: $h_θ(x)=θ_0+θ_1x_1+θ_2\sqrt{x_1}$One important thing to keep in mind is, if you choose your features this way then feature scaling becomes very important. eg. if $x_1$ has range 1 - 1000 then range of $x^2_1$ becomes 1 - 1000000 and that of $x^3_1$ becomes 1 - 1000000000 Normal EquationGradient descent gives one way of minimizing J. Let’s discuss a second way of doing so, this time performing the minimization explicitly and without resorting to an iterative algorithm. In the “Normal Equation” method, we will minimize J by explicitly taking its derivatives with respect to the θj ’s, and setting them to zero. This allows us to find the optimum theta without iteration. The normal equation formula is given below: θ=(X^TX)^{−1}X^Ty There is no need to do feature scaling with the normal equation. The following is a comparison of gradient descent and the normal equation:|Gradient Descent|Normal Equation||:—-|:—-||Need to choose alpha| No need to choose alpha||Needs many iterations| No need to iterate||$O(kn^2)$|$O(n^3)$ | need to calculate inverse of $X^TX$||Works well when n is large|Slow if n is very large| With the normal equation, computing the inversion has complexity $O(n^3)$. So if we have a very large number of features, the normal equation will be slow. In practice, when n exceeds 10,000 it might be a good time to go from a normal solution to an iterative process. Normal Equation NoninvertibilityWhen implementing the normal equation in octave we want to use the ‘pinv’ function rather than ‘inv.’ The ‘pinv’ function will give you a value of θ even if $X^TX$ is not invertible. If $X^TX$ is noninvertible, the common causes might be having : Redundant features, where two features are very closely related (i.e. they are linearly dependent) Too many features (e.g. m ≤ n). In this case, delete some features or use “regularization” (to be explained in a later lesson). Solutions to the above problems include deleting a feature that is linearly dependent with another or deleting one or more features when there are too many features. Logistic RegressionClassificationTo attempt classification, one method is to use linear regression and map all predictions greater than 0.5 as a 1 and all less than 0.5 as a 0. However, this method doesn’t work well because classification is not actually a linear function. The classification problem is just like the regression problem, except that the values we now want to predict take on only a small number of discrete values. For now, we will focus on the binary classification problem in which y can take on only two values, 0 and 1. (Most of what we say here will also generalize to the multiple-class case.) For instance, if we are trying to build a spam classifier for email, then $x^{(i)}$ may be some features of a piece of email, and y may be 1 if it is a piece of spam mail, and 0 otherwise. Hence, y∈{0,1}. 0 is also called the negative class, and 1 the positive class, and they are sometimes also denoted by the symbols “-” and “+.” Given $x^{(i)}$, the corresponding $y^{(i)}$ is also called the label for the training example. Hypothesis RepresentationWe could approach the classification problem ignoring the fact that y is discrete-valued, and use our old linear regression algorithm to try to predict y given x. However, it is easy to construct examples where this method performs very poorly. Intuitively, it also doesn’t make sense for hθ(x) to take values larger than 1 or smaller than 0 when we know that y ∈ {0, 1}. To fix this, let’s change the form for our hypotheses $h_θ(x)$ to satisfy $0≤h_θ(x)≤1$. This is accomplished by plugging $θ^Tx$ into the Logistic Function. Our new form uses the “Sigmoid Function,” also called the “Logistic Function”: \begin{align*} & h_θ(x)=g(θ^Tx) \\ & z=θ^Tx \\ & g(z)=\frac{1}{1+e^{−z}} \\ \end{align*}The following image shows us what the sigmoid function looks like: The function g(z), shown here, maps any real number to the (0, 1) interval, making it useful for transforming an arbitrary-valued function into a function better suited for classification. hθ(x) will give us the probability that our output is 1. For example, $h_θ(x)=0.7$ gives us a probability of 70% that our output is 1. Our probability that our prediction is 0 is just the complement of our probability that it is 1 (e.g. if probability that it is 1 is 70%, then the probability that it is 0 is 30%). \begin{align*} & h_θ(x)=P(y=1|x;θ)=1−P(y=0|x;θ)\\ & P(y=0|x;θ)+P(y=1|x;θ)=1 \end{align*}Decision BoundaryIn order to get our discrete 0 or 1 classification, we can translate the output of the hypothesis function as follows: \begin{align*} & hθ(x)≥0.5 \rightarrow y=1 \\ & hθ(x)]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Machine Learning of Andrew Ng</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Feasibility of Learning]]></title>
    <url>%2FFeasibility-of-Learning%2F2019%2F02%2F15%2F</url>
    <content type="text"><![CDATA[Feasibility of Learning 我们希望找到无限逼近实际函数f的假设函数g $g(hypothesis) \approx f(real function)$ inside $D$: sure! $g(hypothesis) \approx f(real function)$ outside $D$: No! (what we want) Hoeffding’s Inequality P(| \nu-\mu| > \epsilon) \leqslant 2e^{-2\epsilon^{2}N} valid for all N and $\epsilon$ does not depend on $\mu$, no need to know $\mu$ larger sample size N or looser gap $\epsilon$ =&gt; higher probability for $\nu \approx \mu$ Connection to Learning if large N, can probably infer unknow $| h(x) \neq f(x) |$ by know $| h(x_{n} \neq y_n)|$ $E_{in}(h)$: 在已知的样本里，假设函数与实际函数不相等的概率。$E_{out}(h)$: 在所有样本里，上述二者不相等的概率。 [|E_{in}(h) - E_{out}(h)| > \epsilon] \leqslant 2e^{-2\epsilon^{2}N} $E_{in}(h)$ small is a good choice, but $E_{in}(h)$ is not always small. multiple h掷硬币，求出现反面的概率。 bad sample 掷骰子150次，每次掷5下，有超过99%的概率会出现连续5次都是正面。 这就是一个bad sample，因为其使得$E_{in}(h)$ far away $E_{out}(h)$ $E_{in}(h)$ = 0 $E_{out}(h)$ = $1/2$ 对于M个假设函数，出现 bad sample 的概率: 所有假设函数都是安全的 最优P为lowest $E_{in}(h_{m})$]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Machine Learning Foundation</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Types of Learning]]></title>
    <url>%2FTypes-of-Learning%2F2019%2F02%2F15%2F</url>
    <content type="text"><![CDATA[Learning with Different Output Space $\gamma$Binary classification Y = {−1, +1} Multiclass Classification classify US coins (1c, 5c, 10c, 25c) by (size, mass) $\gamma = {1c,5c,10c,25c}$,or $\gamma = {1,2,··· ,K}$ (abstractly) binary classification: special case with K =2 Regression $\gamma = \mathbb{R}$ or $\gamma = [lower, upper] \subset \mathbb{R}$ (bounded regression) Structured Learning: Sequence Tagging Problem a fancy but complicated learning problem sentence -&gt; structure (class of each word) $\gamma = \{PVN,PVP,NVN,PV,···\}$, not including VVVVV huge multiclass classification problem ($structure \equiv hyperclass$) without explicit class definition Learning with Different Data Label $y_n$Supervised learning every $x_n$ comes with corresponding $y_n$ Unsupervised learning clustering articles -&gt; topics consumer profiles -&gt; consumer groups density estimation: {xn} -&gt; density(x) i.e. traffic reports with location -&gt; dangerous areas outlier detection: {xn} -&gt; unusual(x) i.e. Internet logs -&gt; intrusion alert Semi-supervised learning leverage unlabeled data to avoid expensive labeling Reinforcement Learning Teach Your Dog: Say Sit Down cannot easily show the dog that $y_n$ = sit when $x_n$ = sit down but can punish to say $\hat{y_n}$ = pee is wrong but can reward to say $\hat{y_n}$ = sit is good learn with partial/implicit information (often sequentially) Learning with different Protocol $f \rightarrow (x_n,y_n)$Batch Learning batch supervised multiclass classification: learn from all known data Online Learning: hypothesis improves through receiving data instances sequentially Active Learning: Learning by ‘Asking’ improve hypothesis with fewer labels (hopefully) by asking questions strategically Learning with different Input Space $\chi$ concrete features: each dimension of $\chi \in \mathbb{R}$ represents sophisticated physical meaning Raw Features simple physical meaning; thus more difficult for ML than concrete features often need human or machines to convert to concrete ones Abstract Features: again need feature conversion/extraction/construction]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Machine Learning Foundation</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Learning to answer Yes or No]]></title>
    <url>%2FLearning-to-answer-Yes-or-No%2F2019%2F02%2F15%2F</url>
    <content type="text"><![CDATA[What hypothesis set can we use? A Simple Hypothesis Set: the “Perceptron” Perceptron in $\mathbb{R}^2$ h(x) = sign(w_0 + w_1x_1 + w_2x_2) features x: points on the plane (or points in $\mathbb{R}^d$ ) labels y: (+1), × (-1) hypothesis h: lines (or hyperplanes in $\mathbb{R}^d$ ),positive on one side of a line, negative on the other side different line classifies simples differently perceptrons linear (binary) classifiers Select g from $\mathscr{H}$ want: $g \approx f$ (hard when f unknown) almost necessary: $g \approx f$ on D, ideally $g(x_n) = f(x_n) = y_n$ difficult: H is of infinite size idea: start from some $g_0$, and correct its mistakes on $D$ Perceptron Learning Algorithm if PLA halts (i.e. no more mistakes),(necessary condition) $D$ allows some w to make no mistake call such $D$ linear separable as long as linear separable and correct by mistake inner product of $w_f$ and $w_t$ grows fast; length of wt grows slowly PLA ‘lines’ are more and more aligned with $w_f \rightarrow halts$ Line with Noise Tolerance$D$ is not linear separable? Pocket AlgorithmFind the best weights in pocket until enough iterations Question Since we do not know whether D is linear separable in advance, we may decide to just go with pocket instead of PLA. If D is actually linear separable, what’s the difference between the two?1 pocket on D is slower than PLA2 pocket on D is faster than PLA3 pocket on D returns a better g in approximating f than PLA4 pocket on D returns a worse g in approximating f than PLA answer: Because pocket need to check whether $w_{t+1}$ is better than $\hat{w}$ in each iteration, it is slower than PLA. On linear separable D, $w_{POCKET}$ is the same as $w_{PLA}$, both making no mistakes.]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Machine Learning Foundation</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[The Learning Problems]]></title>
    <url>%2FThe%20Learning%20Problems%2F2019%2F02%2F14%2F</url>
    <content type="text"><![CDATA[The Learning Problems When Can Machines Learn? (illustrative + technical) Why Can Machines Learn? (theoretical + illustrative) How Can Machines Learn? (technical + practical) How Can Machines Learn Better? (practical + theoretical) When Can Machines Learn? Some definitions Learning: acquiring skill with experience accumulated from observations Machine learning: acquiring skill with experience accumulated/computed from data data ——-&gt; ML ———&gt; sklill Skill: improve some performance measure (e.g. prediction accuracy) data ——-&gt; ML ———&gt; improved performance measure The Machine Learning RouteML: an alternative route to build complicated systems Give a computer a fish, you feed it for a day; teach it how to fish, you feed it for a lifetime Key Essence of Machine LearningImproving some performance measure with experience computed from data exists some underlying pattern to be learned but no programmable (easy) definition omehow there is data about the pattern Formalize the Learning Problem inputs: $x \in \chi$ outputs:$y\in \gamma$ unknown pattern to be learned &lt;=&gt; target function f: \chi \rightarrow \gamma data &lt;=&gt; training examples D = \{(x_1,y_1),(x_2,y_2),......(x_N,y_N)\} hypothesis &lt;=&gt; skill with hopefully good performance g: \chi \rightarrow \gammaLearning Flow Learning Model Practical Definition of Machine LearningMachine Learning: use data to compute hypothesis g that approximates target f Relationships between Machine Learnig, Data Mining, Artifical Intelligence and Statics Machine Learning use data to compute hypothesis g that approximates target f Data Mining use (huge) data to find property that is interesting Artifical Intelligence compute something that shows intelligent behavior ML can realize AI, among other routes $g \approx f$ is something that shows intelligent behavior Statics use data to make inference about an unknown process statistics is a useful tool for ML]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Machine Learning Foundation</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Introduction to Cloud Computing]]></title>
    <url>%2FIntroduction-to-Cloud-Computing%2F2019%2F02%2F14%2F</url>
    <content type="text"><![CDATA[Overview Why this course is about distributed system comcepts in cloud? clouds are distributed system Cloud examples MapReduce and Hadoops Introduction Customers save money and time Two categories of cloud public provide service to any paying customer private accessbile only to company employees What is a cloud? Informal definition lots of storage + compute circle nearby Components a single-site cloud Compute nodes (grouped into racks) (servers) Switches, connecting the racks A network topology, e.g. hierarchical Storage(backend) nodes, connecting to the network Front-end for submiting jobs and receiveing client requests Software services a geographically distributed cloud Mutiple such sites Each site perhaps with different structures and services Four major characteristicsDistinguish today’s clouds from previous generations of distributed computing systems and problems Massive scale Massive-scale essentially means that data centers are very large. They contain tens of thousands, sometimes hundreds of thousands of servers and you could run your computation across as many servers as you want and as many servers as your application will scale On-demand access Pay-as-you-go, no upfront commitment. Anyone can access it HaaS: Hardware as a Service IaaS: Infrastructure as a Service(Ex: Amazon Web Services (AWS: EC2 and S3)) PaaS: Platform as a Service(You get access to flexible computing and storage infrastructure, coupled with a software platform (often tightly), Ex: Google’s AppEngine (Python, Java, Go)) SaaS: Software as a Service(You get access to software services, when you need them. Often said to subsume SOA (Service Oriented Architectures), Ex: Google docs, MS Office on demand) Data-intensive Nature Typically store data at datacenters Use compute nodes nearby Compute nodes run computation services In data-intensive computing, the focus shifts from computation to the data: CPU utilization no longer the most important resource metric, instead I/O is (disk and/or network) New Cloud Programming Paradigms MapReduce/Hadoop, NoSQL/Cassandra/MongoDB and many others. Easy to write and run highly parallel programs in new cloud programming paradigms: A cloud is a distribyted system A cloud consists of Hundreds to thousands of machines in a datacenter (server side) Thousands to millions of machines accessing these services (client side) Servers communicate amongst one another Distributed System Essentially a cluster! Clients communicate with servers Also a distributed system! Clients also communicate with each other Also a distributed system! Four Features of Clouds = All Distributed Systems Features Cloud = A Fancy Word for a Distributed System Economics of clouds What is a distributed system A distributed system is a collection of independent computers that appear to the users of the system as a single computer.[Andrew Tanenbaum] A distributed system is several computers doing something together. Thus, a distributed system has three primary characteristics: multiple computers, interconnections, and shared state. [Michael Schroeder] A distributed system is a collection of entities, each of which is autonomous, programmable, asynchronous and failure- prone, and which communicate through an unreliable communication medium. programmable,Eliminates “Humans Interacting with each other” asynchronous, Distinguishes distributed systems from parallel systems (e.g., multiprocessor systems) Our interest in distributed systems involves algorithmics design and implementation maintenance, study MapReduce paradigm (map square (1,2,3,4)) output: (1,4,9,16)process each record sequentially and independently (reduce + (1,4,9,16)) (+16 (+9 (+4))) output: 30process set of all records in batches Map Map task processes each record sequentially and independently Parallelly process different map tasks Reduce Reduce process set of all records in batches Parallelly process by partitioning records MapReduce Scheduling1.Externally, for the user: 1. write map program, write reduce program 2. submit job; wait for result 3. need to know nothing about parallel programming Internally, for the paradigm and scheduler Parallelize Map each Map task is independent all Map output records with teh same key should assign to the same Reducer Transfer data from Map to Reduce Parallelize Reduce each Reduce task is independent use partition function Implement Storage for Map input, Map output, Reduce input, Reduce output Map input: DFS Map output: local disk Reduce input: remote disk Reduce output: DFS The YARN SCHEDULER Used in Hadoop 2.x + YARN = Yet Another Resource Negotiator Treats each server as a collection of containers Container = some CPU + some memory Has 3 main components Global Resource Manager (RM) scheduling Per-server Node Manager (NM) Daemon and server-specific functions Per-application (job) Application Master (AM) Container negotiation with RM and NMs Detecting task failures of that job MapReduce Example Fault tolerance Server failure NM,AM heartbeats to RM NM keep track of each task running at its server RM failure use old checkpoints and bring up secondary RM stragglers the slowest machine slows the entire job speculative exection: backup execction of straggler task Locality Reference from some slides from Coursera course Cloud Computing]]></content>
      <categories>
        <category>Cloud Computing</category>
      </categories>
      <tags>
        <tag>Cloud Computing of UIUC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Gossip,Member,Grid]]></title>
    <url>%2FGossip-Member-Grid%2F2019%2F02%2F14%2F</url>
    <content type="text"><![CDATA[GossipTree-Based Multicast Protocol Build a spanning tree among the processes of the multicast group Use spanning tree to disseminate multicasts Use either acknowledgments (ACKs) or negative acknowledgements (NAKs) to repair multicasts not received SRM (Scalable Reliable Multicast) Uses NAKs But adds random delays, and uses exponential backoff to avoid NAK storms RMTP (Reliable Multicast Transport Protocol) Uses ACKs But ACKs only sent to designated receivers, which then re-transmit missing multicasts These protocols still cause an O(N) ACK/NAK overhead Epidemic Multicast Push gossip Once you have a multicast message, you start gossiping about it Multiple messages? Gossip a random subset of them, or recently-received ones, or higher priority ones Pull gossip Periodically poll a few randomly selected processes for new multicast messages that you haven’t received Get those messages Hybrid variant: Push-Pull As the name suggests Topology-Aware Gossip Network topology is hierachical Random gossip target selection =&gt; core routers face O(N) load In subnet i, which contains $n_i$ nodes, pick gossip target in your subnet with probability $\frac{1}{n_i}$ Router $load=O(1)$ Dissemination $time=O(log(N))$ Member two sub-protocals Failure Detection Dissemination Failure Detectionsome process find out the failure process quickly Desirable propertities Completeness (most important) Accuracy Speed Scale Gossip Style Failure Detection Could use mylti-level Gossip Swim Failure Detection Two choice for the $P_j$(failure process) Directed ping to $P_j$ and indirected ping to $P_j$ (Randomly select another process and then send ping to $P_j$) Constant time =&gt; $O(1)$ Dissemination Multicast Dissemination(Hardware/IP) unreliable Point-to-Point expensive Infection style Dissemination Suspicion MechanismSuspect a process before declaring it as failed in the group Grid two level scheduling infrastructure Inter-site protol Globus No single entity controls the entire infrastructure(federate) Reference from some slides from Coursera course Cloud Computing]]></content>
      <categories>
        <category>Cloud Computing</category>
      </categories>
      <tags>
        <tag>Cloud Computing of UIUC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[P2P System]]></title>
    <url>%2FP2P-System%2F2019%2F02%2F14%2F</url>
    <content type="text"><![CDATA[Why Study Peer-to-Peer Systems? First distributed systems that seriously focused on scalability with respect to number of nodes P2P techniques abound in cloud computing systems Napster(创始人Sean Parker, 看Social Network时有讲到，哈哈) Napster Structure Client Connect to a Napster server Upload list of music files that you want to share Server maintains list of tuples. Server stores no files. Search Send server keywords to search with Server searches its list with the keywords Server returns a list of hosts – tuples – to client Client pings each host in the list to find transfer rates Client fetches file from best host All communication uses TCP (Transmission Control Protocol) Reliable and ordered networking protocol Joining a P2P system Send an http request to well-known url for that P2P service - http://www.myp2pservice.com Message routed (after lookup in DNS) to introducer, a well known server that keeps track of some recently joined nodes in p2p system Introducer initializes new peers’ neighbor table Gnutella Eliminate the servers Client machines search and retrieve amongst themselves Clients act as servers too, called servents Gnutella protocol has 5 main message types Query (search) QueryHit (response to query) Ping (to probe network for other peers) Pong (reply to ping, contains address of another peer) Push (used to initiate file transfer) Gnutella Structure Connected in an overlay graph Search Avoiding excessive traffic To avoid duplicate transmissions, each peer maintains a list of recently received messages Query forwarded to all neighbors except peer from which received Each Query (identified by DescriptorID) forwarded only once QueryHit routed back only to peer from which Query received with same DescriptorID Duplicates with same DescriptorID and Payload descriptor (msg type) are dropped QueryHit with DescriptorID for which Query not seen is dropped After receiving QueryHit messages Requestor chooses “best” QueryHit responder 1234GET /get/&lt;File Index&gt;/&lt;File Name&gt;/HTTP/1.0\r\nConnection: Keep-Alive\r\n Range: bytes=0-\r\n User-Agent: Gnutella\r\n \r\n Responder then replies with file packets after this message: 12345HTTP 200 OK\r\nServer: Gnutella\r\n Content-type:application/binary\r\n Content-length: 1024 \r\n\r\n Dealing with Firewalls Requestor sends Push to responder asking for file transfer Responder establishes a TCP connection at ip_address, port specified. Requestor then sends GET to responder (as before) and file is transferred as explained earlier Ping-Pong Peers initiate Ping’s periodically Ping’s flooded out like Query’s, Pong’s routed along reverse path like QueryHit’s Pong replies used to update set of neighboring peers To keep neighbor lists fresh in spite of peers joining, leaving and failing Gnutella Summary No servers Peers/servents maintain “neighbors,” this forms an overlay graph Peers store their own files Queries flooded out, ttl restricted QueryHit (replies) reverse path routed Supports file transfer through firewalls Periodic ping-pong to continuously refresh neighbor lists FastTrack Hybrid between Gnutella and Napster FastTrack Structure A supernode stores a directory listing a subset of nearby (), similar to Napster servers Supernode membership changes over time Any peer can become (and stay) a supernode, provided it has earned enough reputation A peer searches by contacting a nearby supernode BitTorrentBitTorrent Structure File split into blocks (32 KB – 256 KB) Download Local Rarest First block policy: prefer early download of blocks that are least replicated among neighbors Tit for tat bandwidth usage: Provide blocks to neighbors that provided it the best download rates Choking: Limit number of neighbors to which concurrent uploads &lt;= a number (5), i.e., the “best” neighbors BitTorrent 原理简述Reference from https://jaminzhang.github.io/p2p/BitTorrent-Principle-Introduction/ 与传统客户端/服务器网络通信模式不同，对等方到对等方（P2P）通信模式在近年来越来越流行起来。在 P2P 模式中，服务和资源分布化，资源不集中存储在某些设备上，而是分散存储在运行 P2P 程序的设备上，每一个对等方都可以为其他对等方提供服务。BitTorrent（中文全称比特流，简称 BT）是一个网络文件传输协议，是能够实现点对点文件分享的技术。在大多数人感觉中与 P2P 成了对等的一组概念，而它也将 P2P 技术发展到了近乎完美的地步。研究 BitTorrent 协议对我们深入把握 P2P 技术，了解 Interent 网络发展的未来走向有很大的意义。 BitTorrent 协议是架构于 TCP/IP 协议之上的一个 P2P 文件传输协议，处于 TCP/IP 结构的应用层。BitTorrent 协议本身也包含了很多具体的内容协议和扩展协议，并在不断扩充中。如果有多个下载者并发的下载同一个文件，则每个下载者也同时为其它下载者上传文件，这样，文件源可以支持大量的用户进行下载，而只带来适当的负载的增长。 BitTorrent 协议把提供下载的文件虚拟分成大小相等的块，块大小必须为 2k 的整数次方（由于是虚拟分块，硬盘上并不产生各个块文件），并把每个块的索引信息和 Hash 验证码写入 .torrent 文件（即种子文件，也简称为“种子”）中，作为被下载文件的“索引”。下载者要下载文件内容，需要先得到相应的 .torrent 文件，然后使用 BT 客户端软件进行下载。 下载时，BT 客户端首先解析 .torrent 文件得到 Tracker 地址，然后连接 Tracker 服务器。Tracker 服务器回应下载者的请求，提供下载者其他下载者（包括发布者）的 IP。或者，BT客户端也可解析 .torrent 文件得到 nodes 路由表，然后连接路由表中的有效节点，由网络节点提供下载者其他下载者的 IP。 下载者再连接其他下载者，根据 .torrent 文件，两者分别对方告知自己已经有的块，然后交换对方没有的数据。此时不需要其他服务器参或者其他网络节点的参与，分散了单个线路上的数据流量，因此减轻了服务器负担。下载者每得到一个块，需要算出下载块的 Hash 验证码与 .torrent 文件中的对比，如果一样则说明块正确，不一样则需要重新下载这个块。 因此，下载的人越多，提供的带宽也越多，种子也会越来越多，下载速度就越快。 从 BT 客户端角度考虑，下载原理分为以下几步： 一．根据 BitTorrent 协议，文件发布者会根据要发布的文件生成提供一个 .torrent 文件。客户端可从 Web 服务器上下载种子文件，并从中得到 Tracker 服务器 URL 和 DHT 网络 nodes 等信息。 二．根据 Tracker URL 与 Tracker 服务器建立连接，并从服务器上得到 Peers 信息。或者根据 nodes 与 DHT 网络中节点通信，并从节点上得到 Peers 信息。 三．根据 Peers 信息与一个 Peer 建立连接，依据 Peer wire 协议完成握手，并从 Peer 端下载数据文件。同时监听 Peer 的连接，并给 Peer 上传数据文件。 依据得到 Peers 信息的途径的不同，可分为使用 Tracker 服务器和使用 Trackerless DHT 网络两种方式。 基于 HTTP 的 Tracker 协议，基于 UDP 的 Trackerless 协议，基于 TCP 的 Peer wire 协议。 ChordUses Consistent Hashing on node’s (peer’s) address SHA-1(ip_address,port) -&gt; 160 bit string Truncated to m bits Called peer id (number between 0 and 2m −1 ) Not unique but id conflicts very unlikely Can then map peers to one of 2m logical points on a circle Comparative Performance Chord StructureTow pointers successors finger tables FilesFilenames also mapped using same consistent hash function SHA-1(filename)-&gt;160 bit string (key) File is stored at first peer with id greater than its key(mod 2^m) Consistent Hashing =&gt; with K keys and N peers, each peer stores O(K/N) keys Search At node n, send query for key k to largest successor/finger entry &lt;= k if none exist, send query to successor(n) Search takes O(log(N)) time O(log(N)) search time holds for file insertions too (in general for routing to any key) Failure in Chord maintain r multiple successor entries replicate file/key at r successors and predecessors Dynamic changes New peers joining Introducer directs N40 to N45 (and N32) N32 updates successor to N40 N40 initializes successor to N45, and inits fingers from it N40 periodically talks to neighbors to update finger table N40 may need to copy some files/keys from N45 (files with fileid between 32 and 40) A new peer affects O(log(N)) other finger entries in the system, on average Stabilization ProtocolConcurrent peer joins, leaves, failures might cause loopiness of pointers and failure of lookups Chord peers periodically run a stabilization algorithm that checks and updates pointers and keys Virtual NodesHash can get non-uniform -&gt; Bad load balancing Treat each node as multiple virtual nodesbehaving independently Each joins the system Reduces variance of load imbalance Pastry Assigns ids to nodes, just like Chord (using a virtual ring) Leaf Set – Each node knows its successor(s) and predecessor(s) Routing tables based prefix matching(Routing is thus based on prefix matching and is thus log(N)) Pastry Locality For each prefix, say 011, among all potential neighbors with a matching prefix, the neighbor with the shortest round-trip time is selected Since shorter prefixes have many more candidates (spread out throughout the Internet), the neighbors for shorter prefixes are likely to be closer than the neighbors for longer prefixes Thus, in the prefix routing, early hops are short and later hops are longer KelipsA 1 hop Lookup DHT Kelips Structure k “affinity groups” k ~ sqrt(N) Each node hashed to a group (hash mod k) Node’s neighbors (Almost) all other nodes in its own affinity group One contact node per foreign affinity group File can be stored at any (few) node(s) Decouple file replication/location (outside Kelips) from file querying (in Kelips) Each filename hashed to a group All nodes in the group replicate pointer information, i.e., Affinity group does not store files Lookup Find file affinity group Go to your contact for the file affinity group Failing that try another of your neighbors to find a contact Reference from some slides from Coursera course Cloud Computing]]></content>
      <categories>
        <category>Cloud Computing</category>
      </categories>
      <tags>
        <tag>Cloud Computing of UIUC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Dive into blog]]></title>
    <url>%2FDive-into-blog%2F2019%2F02%2F13%2F</url>
    <content type="text"><![CDATA[前天为了搭建 hadoop 集群，被网络上语言含糊不清的教程搞得精疲力尽，于是萌发了自己写技术博客的想法。 开始搭建了 Hexo做博客框架不错，就它了。于是我纠结了两个小时选什么主题。Next肯定是第一个排除的，因为用的人太多了，我要不一样。Daily也不错，简洁大方，符合我的气质，就它吧。我去，Daily连个打赏系统都没集成啊，这不妨碍我赚钱吗。算了，还是Next吧。嗯，真香。 部署就选Github Page，没必要额外买服务器。 zhangruochi.github.io的域名不行，看上去不高端，散发着程序猿气质。于是我去买了zhangruochi.com，Godaddy上买的，二十多刀，很便宜。 第一个要做的功能必须是打赏系统，比较顺利，Next已经集成了。 评论系统纠结了很久, 后来发现没什么好纠结的。基本上要么被墙要么停止服务。什么，你说gitment？ 那也不考虑，我的博客怎么能局限于程序猿圈呢。就来必力吧，你看名字多可爱。 分享系统用自带的BaiduShare，虽然丑了点。 差不多可以上线了 因为Github不会将站点信息提交给搜索引擎，Dore’s blog作为一个技术博客，baidu, google什么的都搜索不到，这不行，这么有价值的博文不是写给我自己看的。于是开始做seo优化。首先是验证站点，google和baidu两者都验证通不过，不管是文件验证 还是html标签验证。折腾了几个小时，发现文件验证不通过的原因是Hexo生成网站时会修改google和baidu提供的验证文件。这好办，在验证文件开头加上 layout: false。 生成sitemap, 提交sitemap，测试robots.txt，比较顺利。 终于能搜索到了 不对啊，打开网站经常会显示website coming soon页面，但是多刷新几次又没问题，这是什么磨人的小bug。而且现在网站是http协议，不是https, Chorme总是显示Not Secure。去Github Page页面修改强行使用https，然而选择不了。折腾一圈发现是在 Godaddy上添加了一个多余的DNS解析，删除之后可以选择强制https了。 我去，强制https之后safari和chorme都显示网站不被信任, 进不去了。又找了一圈方案，说要购买ssl证书,然而Github Page不支持上传证书。后来找到解决方案，使用DNSPod解析DNS, 修改DNSPod为default nameserver. 终于能正常登陆了 然而，分享系统又不能用了，原来是因为BaiduShare不支持https. 我为什么要用百度家的产品? 想起小恶魔的台词，“Next time I have an idea like that, just punch me in the face.” 于是使用ShareSDK, 本地测试没问题，但是联网会出错。发现是https限制http的外链接。好的，修改一下src tag，可以了。但是ShareSDK长得丑啊，于是又来了一顿操作，添加新的css和js。 基本满意了我更加精疲力尽，写什么博客，Next time I have an idea like that, just punch me in the face。]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>My Blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[值得期待的一块零一分 --鹿麒序]]></title>
    <url>%2FHello-Blog%2F2019%2F02%2F12%2F</url>
    <content type="text"><![CDATA[那天一句玩笑说建好博客让鹿总给我写个序，今天终于看到了。挺不好意思的。别人一夸我，我就扭捏，总担心别人夸得还不够😝。以下是序的正文。 狄更斯说，这是最好的时代，这是最坏的时代；有人直上天堂，有人直下地狱。所以当下的这个时代给予我们的到底是什么，我觉得这是一个很难回答的问题。 应该是从大三开始，在即将面临社会的时候我产生了更多的自我怀疑，经常问自己“你到底想做什么，你以后会做什么呢”。那个时候我很羡慕两种人。一种是从来不会认真思考这个问题，随遇而安的人，另一种是有着明确的目标，并为之不断努力的人。老实说，其实这是两种极端，前一种人说得难听的可以是“不思进取”，但是往往他们也容易满足，能在自己的世界里过得很幸福。后一种人可以说是“野心太大”，但是这样的人也容易充实自己。反观我，就是那种不尴不尬，不上不下的一类。不满足于现在的生活可是也没有明确的目标。 也是在这种情况下，我选择出国留学，觉得对我来说这也是逃避社会逃避现实的好的方式。圈子广了，接触的人多了，但是大部分人也还是可以按照上面说的道理分成三种。张若驰（以下称为张老师，叫他全名实在有点不习惯）就是我说的目标明确并且不断努力的人。 其实张老师让我写序，我也不知道写点啥，于是打算讲讲我对他的看法。 张老师是这样一种人：他从来不避讳自己取得的一些成绩，也从来不会夸大自己的成就。也可能是他真的太厉害，所以不管他在生活里还是朋友圈里怎么讲自己，我的第一反应总是“牛逼，不愧是张老师”。其实，跟他相处的时候只要你好好留意，就会发现他是个很有目标性的人。比如说，他吃饭的时候很快，往往我吃了一半还不到，他已经差不多了。他等你的这个时候，大部分时间里他都是一个人在沉思或者跟你讲讲他对自己未来有什么规划。因为和国内的时差，他也经常性会在半夜开会。为了自己项目里的问题或者刷题，在图书馆熬夜，通宵也是常有的事。打开他的linkedin，上面也写满了他发的论文和上过的有分量的课。可能也是为什么我发现他的眼眶下面是青黑的原因吧。 说实话，这样的生活如果安在我身上，那我多半受不了。但是我也没有问过他累不累，因为每次这种时候我都会想到之前问我发小“一直这么努力不会觉得很辛苦吗”，她当时回答我“习惯了就不觉得了”。 张老师跟许多程序员不一样的是，通过跟他的接触，你会发现他是一个读过很多书，对这个社会很有想法的文化人。同时，张老师跟许多人不一样的是，大家都知道自己是被生活推着走，但是他在被推着走的时候，也在思考怎样最大化发挥自己的价值去影响这个世界。 写到这儿我顿悟了。一开始他自己写这个blog我只觉得这是文化人和处女座对于一些完美事物的执着，但是现在我明白了，这个blog或许也是他的一种知识输出，是一种他用来影响别人的方式。而我，作为一个被用来测试网站的小白羊，对张老师的blog充满了自信。刚起步的时候，张老师的知识分享也都是比较浅显的东西，但这几天我每天睡醒都会看到他半夜给我发的告诉我他又做了哪方面的改进。虽然现在我只花了一块零一分，但这样我也算是入股了吧，等到以后这个blog真的开始发挥它的价值的时候，我觉得我的一块零一分的价值也会乘十乘百乘千乘万乘亿地增长。和它一起的，我相信也一定是张老师之于这个社会，这个时代的价值。 所以，只要够主动够幸运够优秀，这个时代给予我们的东西，总有一天是能通过自己的身体力行去感知的。最后，我想代表我们大家对张老师说一句：“苟富贵，勿相忘。”]]></content>
      <categories>
        <category>Gossip</category>
      </categories>
      <tags>
        <tag>Gossip</tag>
      </tags>
  </entry>
</search>
