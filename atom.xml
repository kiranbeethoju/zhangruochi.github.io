<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RUOCHI.AI</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhangruochi.com/"/>
  <updated>2020-02-22T04:38:55.776Z</updated>
  <id>https://zhangruochi.com/</id>
  
  <author>
    <name>Ruochi Zhang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Tensorflow Serving</title>
    <link href="https://zhangruochi.com/Tensorflow-Serving/2020/02/21/"/>
    <id>https://zhangruochi.com/Tensorflow-Serving/2020/02/21/</id>
    <published>2020-02-22T04:37:47.000Z</published>
    <updated>2020-02-22T04:38:55.776Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Train-Your-Own-Model-and-Serve-It-With-TensorFlow-Serving"><a href="#Train-Your-Own-Model-and-Serve-It-With-TensorFlow-Serving" class="headerlink" title="Train Your Own Model and Serve It With TensorFlow Serving"></a>Train Your Own Model and Serve It With TensorFlow Serving</h1><p>In this notebook, you will train a neural network to classify images of handwritten digits from the <a href="http://yann.lecun.com/exdb/mnist/" target="_blank" rel="noopener">MNIST</a> dataset. You will then save the trained model, and serve it using <a href="https://www.tensorflow.org/tfx/guide/serving" target="_blank" rel="noopener">TensorFlow Serving</a>.</p><p><strong>Warning: This notebook is designed to be run in a Google Colab only</strong>.  It installs packages on the system and requires root access. If you want to run it in a local Jupyter notebook, please proceed with caution.</p><table class="tfo-notebook-buttons" align="left">  <td>    <a target="_blank" href="https://colab.research.google.com/github/lmoroney/dlaicourse/blob/master/TensorFlow%20Deployment/Course%204%20-%20TensorFlow%20Serving/Week%201/Exercises/TFServing_Week1_Exercise.ipynb">    <img src="https://www.tensorflow.org/images/colab_logo_32px.png">    Run in Google Colab</a>  </td>  <td>    <a target="_blank" href="https://github.com/lmoroney/dlaicourse/blob/master/TensorFlow%20Deployment/Course%204%20-%20TensorFlow%20Serving/Week%201/Exercises/TFServing_Week1_Exercise.ipynb">    <img src="https://www.tensorflow.org/images/GitHub-Mark-32px.png">    View source on GitHub</a>  </td></table><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    %tensorflow_version <span class="number">2.</span>x</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">print(<span class="string">"\u2022 Using TensorFlow Version:"</span>, tf.__version__)</span><br></pre></td></tr></table></figure><pre><code>• Using TensorFlow Version: 2.2.0-dev20200217</code></pre><h2 id="Import-the-MNIST-Dataset"><a href="#Import-the-MNIST-Dataset" class="headerlink" title="Import the MNIST Dataset"></a>Import the MNIST Dataset</h2><p>The <a href="http://yann.lecun.com/exdb/mnist/" target="_blank" rel="noopener">MNIST</a> dataset contains 70,000 grayscale images of the digits 0 through 9. The images show individual digits at a low resolution (28 by 28 pixels). </p><p>Even though these are really images, we will load them as NumPy arrays and not as binary image objects.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mnist = tf.keras.datasets.mnist</span><br><span class="line">(train_images, train_labels), (test_images, test_labels) = mnist.load_data()</span><br></pre></td></tr></table></figure><pre><code>Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz11493376/11490434 [==============================] - 1s 0us/step</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EXERCISE: Scale the values of the arrays below to be between 0.0 and 1.0.</span></span><br><span class="line">train_images = train_images / <span class="number">255.0</span></span><br><span class="line">test_images =  test_images / <span class="number">255.0</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_images.shape, test_images.shape</span><br></pre></td></tr></table></figure><pre><code>((60000, 28, 28), (10000, 28, 28))</code></pre><p>In the cell below use the <code>.reshape</code> method to resize the arrays to the following sizes:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">train_images.shape: (<span class="number">60000</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)</span><br><span class="line">test_images.shape: (<span class="number">10000</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EXERCISE: Reshape the arrays below.</span></span><br><span class="line">train_images = train_images.reshape((*train_images.shape,<span class="number">1</span>))</span><br><span class="line">test_images =  test_images.reshape((*test_images.shape,<span class="number">1</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'\ntrain_images.shape: &#123;&#125;, of &#123;&#125;'</span>.format(train_images.shape, train_images.dtype))</span><br><span class="line">print(<span class="string">'test_images.shape: &#123;&#125;, of &#123;&#125;'</span>.format(test_images.shape, test_images.dtype))</span><br></pre></td></tr></table></figure><pre><code>train_images.shape: (60000, 28, 28, 1), of float64test_images.shape: (10000, 28, 28, 1), of float64</code></pre><h2 id="Look-at-a-Sample-Image"><a href="#Look-at-a-Sample-Image" class="headerlink" title="Look at a Sample Image"></a>Look at a Sample Image</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">idx = <span class="number">42</span></span><br><span class="line"></span><br><span class="line">plt.imshow(test_images[idx].reshape(<span class="number">28</span>,<span class="number">28</span>), cmap=plt.cm.binary)</span><br><span class="line">plt.title(<span class="string">'True Label: &#123;&#125;'</span>.format(test_labels[idx]), fontdict=&#123;<span class="string">'size'</span>: <span class="number">16</span>&#125;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="output_14_0.png" alt="png"></p><h2 id="Build-a-Model"><a href="#Build-a-Model" class="headerlink" title="Build a Model"></a>Build a Model</h2><p>In the cell below build a <code>tf.keras.Sequential</code> model that can be used to classify the images of the MNIST dataset. Feel free to use the simplest possible CNN. Make sure your model has the correct <code>input_shape</code> and the correct number of output units.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EXERCISE: Create a model.</span></span><br><span class="line">model =  tf.keras.Sequential([</span><br><span class="line">    </span><br><span class="line">        tf.keras.layers.Conv2D(input_shape=(<span class="number">28</span>,<span class="number">28</span>,<span class="number">1</span>), filters=<span class="number">8</span>, kernel_size=<span class="number">3</span>,</span><br><span class="line">                               strides=<span class="number">2</span>, activation=<span class="string">'relu'</span>, name=<span class="string">'Conv1'</span>),</span><br><span class="line">        tf.keras.layers.Flatten(),</span><br><span class="line">        tf.keras.layers.Dense(<span class="number">10</span>, activation=tf.nn.softmax, name=<span class="string">'Softmax'</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">model.summary()</span><br></pre></td></tr></table></figure><pre><code>Model: &quot;sequential&quot;_________________________________________________________________Layer (type)                 Output Shape              Param #   =================================================================Conv1 (Conv2D)               (None, 13, 13, 8)         80        _________________________________________________________________flatten (Flatten)            (None, 1352)              0         _________________________________________________________________Softmax (Dense)              (None, 10)                13530     =================================================================Total params: 13,610Trainable params: 13,610Non-trainable params: 0_________________________________________________________________</code></pre><h2 id="Train-the-Model"><a href="#Train-the-Model" class="headerlink" title="Train the Model"></a>Train the Model</h2><p>In the cell below configure your model for training using the <code>adam</code> optimizer, <code>sparse_categorical_crossentropy</code> as the loss, and <code>accuracy</code> for your metrics. Then train the model for the given number of epochs, using the <code>train_images</code> array.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EXERCISE: Configure the model for training.</span></span><br><span class="line">model.compile(optimizer = <span class="string">"adam"</span>, loss = <span class="string">"sparse_categorical_crossentropy"</span>, metrics=[<span class="string">"accuracy"</span>])</span><br><span class="line"></span><br><span class="line">epochs = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># EXERCISE: Train the model.</span></span><br><span class="line">history = model.fit(train_images, train_labels,</span><br><span class="line">                    batch_size = <span class="number">16</span>,</span><br><span class="line">                    epochs = epochs,</span><br><span class="line">                    validation_data= [test_images, test_labels],</span><br><span class="line">                    verbose = <span class="number">1</span></span><br><span class="line">                   )</span><br></pre></td></tr></table></figure><pre><code>Train on 60000 samples, validate on 10000 samplesEpoch 1/560000/60000 [==============================] - 8s 127us/sample - loss: 0.3098 - accuracy: 0.9120 - val_loss: 0.1723 - val_accuracy: 0.9489Epoch 2/560000/60000 [==============================] - 7s 121us/sample - loss: 0.1511 - accuracy: 0.9569 - val_loss: 0.1145 - val_accuracy: 0.9667Epoch 3/560000/60000 [==============================] - 7s 122us/sample - loss: 0.1103 - accuracy: 0.9680 - val_loss: 0.0939 - val_accuracy: 0.9720Epoch 4/560000/60000 [==============================] - 7s 121us/sample - loss: 0.0901 - accuracy: 0.9737 - val_loss: 0.0895 - val_accuracy: 0.9739Epoch 5/560000/60000 [==============================] - 7s 121us/sample - loss: 0.0780 - accuracy: 0.9763 - val_loss: 0.0787 - val_accuracy: 0.9758</code></pre><h2 id="Evaluate-the-Model"><a href="#Evaluate-the-Model" class="headerlink" title="Evaluate the Model"></a>Evaluate the Model</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EXERCISE: Evaluate the model on the test images.</span></span><br><span class="line">results_eval = model.evaluate(test_images, test_labels)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> metric, value <span class="keyword">in</span> zip(model.metrics_names, results_eval):</span><br><span class="line">    print(metric + <span class="string">': &#123;:.3&#125;'</span>.format(value))</span><br></pre></td></tr></table></figure><pre><code>10000/10000 [==============================] - 0s 39us/sample - loss: 0.0787 - accuracy: 0.9758loss: 0.0787accuracy: 0.976</code></pre><h2 id="Save-the-Model"><a href="#Save-the-Model" class="headerlink" title="Save the Model"></a>Save the Model</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">MODEL_DIR = <span class="string">"digits_model"</span></span><br><span class="line"></span><br><span class="line">version = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">export_path = os.path.join(MODEL_DIR, str(version))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.path.isdir(export_path):</span><br><span class="line">    print(<span class="string">'\nAlready saved a model, cleaning up\n'</span>)</span><br><span class="line">    !rm -r &#123;export_path&#125;</span><br><span class="line"></span><br><span class="line">model.save(export_path, save_format=<span class="string">"tf"</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'\nexport_path = &#123;&#125;'</span>.format(export_path))</span><br><span class="line">!ls -l &#123;export_path&#125;</span><br></pre></td></tr></table></figure><pre><code>WARNING:tensorflow:AutoGraph could not transform &lt;function canonicalize_signatures.&lt;locals&gt;.signature_wrapper at 0x14b735bf8&gt; and will run it as-is.Please report this to the TensorFlow team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output.Cause: Bad argument number for Name: 4, expecting 3To silence this warning, decorate the function with @tf.autograph.experimental.do_not_convertWARNING:tensorflow:AutoGraph could not transform &lt;function canonicalize_signatures.&lt;locals&gt;.signature_wrapper at 0x14b735bf8&gt; and will run it as-is.Please report this to the TensorFlow team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output.Cause: Bad argument number for Name: 4, expecting 3To silence this warning, decorate the function with @tf.autograph.experimental.do_not_convertWARNING: AutoGraph could not transform &lt;function canonicalize_signatures.&lt;locals&gt;.signature_wrapper at 0x14b735bf8&gt; and will run it as-is.Please report this to the TensorFlow team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output.Cause: Bad argument number for Name: 4, expecting 3To silence this warning, decorate the function with @tf.autograph.experimental.do_not_convertINFO:tensorflow:Assets written to: digits_model/1/assetsINFO:tensorflow:Assets written to: digits_model/1/assetsexport_path = digits_model/1total 152drwxr-xr-x  2 ZRC  staff     64 Feb 21 23:32 [1m[36massets[m[m-rw-r--r--  1 ZRC  staff  74809 Feb 21 23:32 saved_model.pbdrwxr-xr-x  4 ZRC  staff    128 Feb 21 23:32 [1m[36mvariables[m[m</code></pre><h2 id="Examine-Your-Saved-Model"><a href="#Examine-Your-Saved-Model" class="headerlink" title="Examine Your Saved Model"></a>Examine Your Saved Model</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!saved_model_cli show --dir &#123;export_path&#125; --all</span><br></pre></td></tr></table></figure><pre><code>MetaGraphDef with tag-set: &#39;serve&#39; contains the following SignatureDefs:signature_def[&#39;__saved_model_init_op&#39;]:  The given SavedModel SignatureDef contains the following input(s):  The given SavedModel SignatureDef contains the following output(s):    outputs[&#39;__saved_model_init_op&#39;] tensor_info:        dtype: DT_INVALID        shape: unknown_rank        name: NoOp  Method name is: signature_def[&#39;serving_default&#39;]:  The given SavedModel SignatureDef contains the following input(s):    inputs[&#39;Conv1_input&#39;] tensor_info:        dtype: DT_FLOAT        shape: (-1, 28, 28, 1)        name: serving_default_Conv1_input:0  The given SavedModel SignatureDef contains the following output(s):    outputs[&#39;Softmax&#39;] tensor_info:        dtype: DT_FLOAT        shape: (-1, 10)        name: StatefulPartitionedCall:0  Method name is: tensorflow/serving/predictWARNING:tensorflow:From /Users/ZRC/miniconda3/envs/tryit/lib/python3.6/site-packages/tensorflow/python/ops/resource_variable_ops.py:1809: calling BaseResourceVariable.__init__ (from tensorflow.python.ops.resource_variable_ops) with constraint is deprecated and will be removed in a future version.Instructions for updating:If using Keras pass *_constraint arguments to layers.Defined Functions:  Function Name: &#39;__call__&#39;    Option #1      Callable with:        Argument #1          inputs: TensorSpec(shape=(None, 28, 28, 1), dtype=tf.float32, name=&#39;inputs&#39;)        Argument #2          DType: bool          Value: False        Argument #3          DType: NoneType          Value: None    Option #2      Callable with:        Argument #1          Conv1_input: TensorSpec(shape=(None, 28, 28, 1), dtype=tf.float32, name=&#39;Conv1_input&#39;)        Argument #2          DType: bool          Value: False        Argument #3          DType: NoneType          Value: None    Option #3      Callable with:        Argument #1          Conv1_input: TensorSpec(shape=(None, 28, 28, 1), dtype=tf.float32, name=&#39;Conv1_input&#39;)        Argument #2          DType: bool          Value: True        Argument #3          DType: NoneType          Value: None    Option #4      Callable with:        Argument #1          inputs: TensorSpec(shape=(None, 28, 28, 1), dtype=tf.float32, name=&#39;inputs&#39;)        Argument #2          DType: bool          Value: True        Argument #3          DType: NoneType          Value: None  Function Name: &#39;_default_save_signature&#39;    Option #1      Callable with:        Argument #1          Conv1_input: TensorSpec(shape=(None, 28, 28, 1), dtype=tf.float32, name=&#39;Conv1_input&#39;)  Function Name: &#39;call_and_return_all_conditional_losses&#39;    Option #1      Callable with:        Argument #1          Conv1_input: TensorSpec(shape=(None, 28, 28, 1), dtype=tf.float32, name=&#39;Conv1_input&#39;)        Argument #2          DType: bool          Value: False        Argument #3          DType: NoneType          Value: None    Option #2      Callable with:        Argument #1          Conv1_input: TensorSpec(shape=(None, 28, 28, 1), dtype=tf.float32, name=&#39;Conv1_input&#39;)        Argument #2          DType: bool          Value: True        Argument #3          DType: NoneType          Value: None    Option #3      Callable with:        Argument #1          inputs: TensorSpec(shape=(None, 28, 28, 1), dtype=tf.float32, name=&#39;inputs&#39;)        Argument #2          DType: bool          Value: True        Argument #3          DType: NoneType          Value: None    Option #4      Callable with:        Argument #1          inputs: TensorSpec(shape=(None, 28, 28, 1), dtype=tf.float32, name=&#39;inputs&#39;)        Argument #2          DType: bool          Value: False        Argument #3          DType: NoneType          Value: None</code></pre><h2 id="Add-TensorFlow-Serving-Distribution-URI-as-a-Package-Source"><a href="#Add-TensorFlow-Serving-Distribution-URI-as-a-Package-Source" class="headerlink" title="Add TensorFlow Serving Distribution URI as a Package Source"></a>Add TensorFlow Serving Distribution URI as a Package Source</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This is the same as you would do from your command line, but without the [arch=amd64], and no sudo</span></span><br><span class="line"><span class="comment"># You would instead do:</span></span><br><span class="line"><span class="comment"># echo "deb [arch=amd64] http://storage.googleapis.com/tensorflow-serving-apt stable tensorflow-model-server tensorflow-model-server-universal" | sudo tee /etc/apt/sources.list.d/tensorflow-serving.list &amp;&amp; \</span></span><br><span class="line"><span class="comment"># curl https://storage.googleapis.com/tensorflow-serving-apt/tensorflow-serving.release.pub.gpg | sudo apt-key add -</span></span><br><span class="line"></span><br><span class="line">!echo <span class="string">"deb http://storage.googleapis.com/tensorflow-serving-apt stable tensorflow-model-server tensorflow-model-server-universal"</span> | tee /etc/apt/sources.list.d/tensorflow-serving.list &amp;&amp; \</span><br><span class="line">curl https://storage.googleapis.com/tensorflow-serving-apt/tensorflow-serving.release.pub.gpg | apt-key add -</span><br><span class="line">!apt update</span><br></pre></td></tr></table></figure><pre><code>tee: /etc/apt/sources.list.d/tensorflow-serving.list: No such file or directorydeb http://storage.googleapis.com/tensorflow-serving-apt stable tensorflow-model-server tensorflow-model-server-universalUnable to locate an executable at &quot;/Library/Java/JavaVirtualMachines/jdk1.8.0_73.jdk/Contents/Home/bin/apt&quot; (-1)</code></pre><h2 id="Install-TensorFlow-Serving"><a href="#Install-TensorFlow-Serving" class="headerlink" title="Install TensorFlow Serving"></a>Install TensorFlow Serving</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!apt-get install tensorflow-model-server</span><br></pre></td></tr></table></figure><pre><code>/bin/sh: apt-get: command not found</code></pre><h2 id="Run-the-TensorFlow-Model-Server"><a href="#Run-the-TensorFlow-Model-Server" class="headerlink" title="Run the TensorFlow Model Server"></a>Run the TensorFlow Model Server</h2><p>You will now launch the TensorFlow model server with a bash script. In the cell below use the following parameters when running the TensorFlow model server:</p><ul><li><code>rest_api_port</code>: Use port <code>8501</code> for your requests.</li></ul><ul><li><code>model_name</code>: Use <code>digits_model</code> as your model name. </li></ul><ul><li><code>model_base_path</code>: Use the environment variable <code>MODEL_DIR</code> defined below as the base path to the saved model.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.environ[<span class="string">"MODEL_DIR"</span>] = MODEL_DIR</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MODEL_DIR</span><br></pre></td></tr></table></figure><pre><code>&#39;digits_model&#39;</code></pre><ul><li>-p 8501:8501 : Publishing the container’s port 8501 (where TF Serving responds to REST API requests) to the host’s port 8501</li><li>—mount type=bind,source=/tmp/resnet,target=/models/resnet : Mounting the host’s local directory (/tmp/resnet) on the container (/models/resnet) so TF Serving can read the model from inside the container.</li><li>-e MODEL_NAME=digits_model : Telling TensorFlow Serving to load the model named “digits_model”</li><li>-t tensorflow/serving : Running a Docker container based on the serving image “tensorflow/serving”</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%%bash</span><br><span class="line"></span><br><span class="line">nohup docker run -p 8501:8501 \</span><br><span class="line">  --mount <span class="built_in">type</span>=<span class="built_in">bind</span>,<span class="built_in">source</span>=<span class="string">"/Users/ZRC/Desktop/TensorFlow Data and Deployment/week13/Exercises/digits_model,target=/models/digits_model"</span> \</span><br><span class="line">  -e MODEL_NAME=digits_model -t tensorflow/serving  &amp;</span><br></pre></td></tr></table></figure><pre><code>docker: Error response from daemon: driver failed programming external connectivity on endpoint wonderful_ganguly (32049ac8fc320931031b817d6269004dcac5878b1e8c8addceb79fb1cd5dca24): Bind for 0.0.0.0:8501 failed: port is already allocated.</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># # EXERCISE: Fill in the missing code below.</span></span><br><span class="line"><span class="comment"># %%bash --bg </span></span><br><span class="line"><span class="comment"># nohup tensorflow_model_server \</span></span><br><span class="line"><span class="comment">#   --rest_api_port=8501 \</span></span><br><span class="line"><span class="comment">#   --model_name=digits_model \</span></span><br><span class="line"><span class="comment">#   --model_base_path="$&#123;MODEL_DIR&#125;" &gt;server.log 2&gt;&amp;1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!tail server.log</span><br></pre></td></tr></table></figure><pre><code>docker: Error response from daemon: driver failed programming external connectivity on endpoint determined_antonelli (6a4d67f3751bc7f9fed7821f6df430cbf368992e00c710738cb6f1d9f1e647d2): Bind for 0.0.0.0:8501 failed: port is already allocated.</code></pre><h2 id="Create-JSON-Object-with-Test-Images"><a href="#Create-JSON-Object-with-Test-Images" class="headerlink" title="Create JSON Object with Test Images"></a>Create JSON Object with Test Images</h2><p>In the cell below construct a JSON object and use the first three images of the testing set (<code>test_images</code>) as your data.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EXERCISE: Create JSON Object</span></span><br><span class="line">data = data = json.dumps(&#123;<span class="string">"signature_name"</span>: <span class="string">"serving_default"</span>, <span class="string">"instances"</span>: test_images[<span class="number">0</span>:<span class="number">3</span>].tolist()&#125;)</span><br></pre></td></tr></table></figure><h2 id="Make-Inference-Request"><a href="#Make-Inference-Request" class="headerlink" title="Make Inference Request"></a>Make Inference Request</h2><p>In the cell below, send a predict request as a POST to the server’s REST endpoint, and pass it your test data. You should ask the server to give you the latest version of your model.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EXERCISE: Fill in the code below</span></span><br><span class="line">headers = &#123;<span class="string">"content-type"</span>: <span class="string">"application/json"</span>&#125;</span><br><span class="line">json_response = requests.post(<span class="string">'http://localhost:8501/v1/models/digits_model:predict'</span>, data=data, headers=headers)</span><br><span class="line">    </span><br><span class="line">predictions = json.loads(json_response.text)[<span class="string">'predictions'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">predictions</span><br></pre></td></tr></table></figure><pre><code>[[1.68959902e-09,  3.5654768e-10,  4.89267848e-07,  6.09665512e-05,  5.58686e-10,  2.27727126e-09,  8.49646383e-15,  0.999936819,  1.21679037e-07,  1.63355e-06], [1.37625943e-06,  6.47248962e-05,  0.99961108,  4.23558049e-06,  5.8764843e-10,  7.63888067e-07,  0.000306190021,  2.43645703e-15,  1.15736648e-05,  8.24755108e-12], [2.70507389e-05,  0.996317267,  0.00121238839,  1.1719947e-05,  0.00065574795,  2.86702857e-06,  0.000181563752,  0.000955980679,  0.000630841067,  4.60029833e-06]]</code></pre><h2 id="Plot-Predictions"><a href="#Plot-Predictions" class="headerlink" title="Plot Predictions"></a>Plot Predictions</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">15</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    plt.subplot(<span class="number">1</span>,<span class="number">3</span>,i+<span class="number">1</span>)</span><br><span class="line">    plt.imshow(test_images[i].reshape(<span class="number">28</span>,<span class="number">28</span>), cmap = plt.cm.binary)</span><br><span class="line">    plt.axis(<span class="string">'off'</span>)</span><br><span class="line">    color = <span class="string">'green'</span> <span class="keyword">if</span> np.argmax(predictions[i]) == test_labels[i] <span class="keyword">else</span> <span class="string">'red'</span></span><br><span class="line">    plt.title(<span class="string">'Prediction: &#123;&#125;\nTrue Label: &#123;&#125;'</span>.format(np.argmax(predictions[i]), test_labels[i]), color=color)</span><br><span class="line">    </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="output_42_0.png" alt="png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Train-Your-Own-Model-and-Serve-It-With-TensorFlow-Serving&quot;&gt;&lt;a href=&quot;#Train-Your-Own-Model-and-Serve-It-With-TensorFlow-Serving&quot; clas
      
    
    </summary>
    
    
      <category term="Artificial Inteligence" scheme="https://zhangruochi.com/categories/Artificial-Inteligence/"/>
    
      <category term="Deep Learning" scheme="https://zhangruochi.com/categories/Artificial-Inteligence/Deep-Learning/"/>
    
      <category term="Development" scheme="https://zhangruochi.com/categories/Development/"/>
    
    
      <category term="Tensorflow" scheme="https://zhangruochi.com/tags/Tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>Improving Performance of Tensorflow ETL Pipeline</title>
    <link href="https://zhangruochi.com/Improving-Performance-of-Tensorflow-ETL-pipeline/2020/02/20/"/>
    <id>https://zhangruochi.com/Improving-Performance-of-Tensorflow-ETL-pipeline/2020/02/20/</id>
    <published>2020-02-20T07:17:20.000Z</published>
    <updated>2020-02-20T07:18:12.674Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Parallelization-with-TFDS"><a href="#Parallelization-with-TFDS" class="headerlink" title="Parallelization with TFDS"></a>Parallelization with TFDS</h1><p>In this week’s exercise, we’ll go back to the classic cats versus dogs example, but instead of just naively loading the data to train a model, you will be parallelizing various stages of the Extract, Transform and Load processes. In particular, you will be performing following tasks:   </p><ol><li>Parallelize the extraction of the stored TFRecords of the cats_vs_dogs dataset by using the interleave operation.</li><li>Parallelize the transformation during the preprocessing of the raw dataset by using the map operation.</li><li>Cache the processed dataset in memory by using the cache operation for faster retrieval.</li><li>Parallelize the loading of the cached dataset during the training cycle by using the prefetch operation.</li></ol><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> tensorflow_datasets <span class="keyword">as</span> tfds</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> getcwd</span><br></pre></td></tr></table></figure><h2 id="Create-and-Compile-the-Model"><a href="#Create-and-Compile-the-Model" class="headerlink" title="Create and Compile the Model"></a>Create and Compile the Model</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_model</span><span class="params">()</span>:</span></span><br><span class="line">    input_layer = tf.keras.layers.Input(shape=(<span class="number">224</span>, <span class="number">224</span>, <span class="number">3</span>))</span><br><span class="line">    base_model = tf.keras.applications.MobileNetV2(input_tensor=input_layer,</span><br><span class="line">                                                   weights=<span class="string">'imagenet'</span>,</span><br><span class="line">                                                   include_top=<span class="keyword">False</span>)</span><br><span class="line">    base_model.trainable = <span class="keyword">False</span></span><br><span class="line">    x = tf.keras.layers.GlobalAveragePooling2D()(base_model.output)</span><br><span class="line">    x = tf.keras.layers.Dense(<span class="number">2</span>, activation=<span class="string">'softmax'</span>)(x)</span><br><span class="line">    </span><br><span class="line">    model = tf.keras.models.Model(inputs=input_layer, outputs=x)</span><br><span class="line">    model.compile(optimizer=<span class="string">'adam'</span>,</span><br><span class="line">                  loss=<span class="string">'sparse_categorical_crossentropy'</span>,</span><br><span class="line">                  metrics=[<span class="string">'acc'</span>])</span><br><span class="line">    <span class="keyword">return</span> model</span><br></pre></td></tr></table></figure><h2 id="Naive-Approach"><a href="#Naive-Approach" class="headerlink" title="Naive Approach"></a>Naive Approach</h2><p>Just for comparison, let’s start by using the naive approach to Extract, Transform, and Load the data to train the model defined above. By naive approach we mean that we won’t apply any of the new concepts of parallelization that we learned about in this module.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dataset_name = <span class="string">'cats_vs_dogs'</span></span><br><span class="line">filePath = <span class="string">f"<span class="subst">&#123;getcwd()&#125;</span>/../tmp2"</span></span><br><span class="line">dataset, info = tfds.load(name=dataset_name, split=tfds.Split.TRAIN, with_info=<span class="keyword">True</span>, data_dir=filePath)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(info.version)</span><br></pre></td></tr></table></figure><pre><code>2.0.1</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preprocess</span><span class="params">(features)</span>:</span></span><br><span class="line">    image = features[<span class="string">'image'</span>]</span><br><span class="line">    image = tf.image.resize(image, (<span class="number">224</span>, <span class="number">224</span>))</span><br><span class="line">    image = image / <span class="number">255.0</span></span><br><span class="line">    <span class="keyword">return</span> image, features[<span class="string">'label'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_dataset = dataset.map(preprocess).batch(<span class="number">32</span>)</span><br></pre></td></tr></table></figure><p>The next step will be to train the model using the following code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model = create_model()</span><br><span class="line">model.fit(train_dataset, epochs=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>Since we want to focus on the parallelization techniques, we won’t go through the training process here, as this can take some time. </p><h1 id="Parallelize-Various-Stages-of-the-ETL-Processes"><a href="#Parallelize-Various-Stages-of-the-ETL-Processes" class="headerlink" title="Parallelize Various Stages of the ETL Processes"></a>Parallelize Various Stages of the ETL Processes</h1><p>The following exercises are about parallelizing various stages of Extract, Transform and Load processes. In particular, you will be tasked with performing following tasks:   </p><ol><li>Parallelize the extraction of the stored TFRecords of the cats_vs_dogs dataset by using the interleave operation.</li><li>Parallelize the transformation during the preprocessing of the raw dataset by using the map operation.</li><li>Cache the processed dataset in memory by using the cache operation for faster retrieval.</li><li>Parallelize the loading of the cached dataset during the training cycle by using the prefetch operation.</li></ol><p>We start by creating a dataset of strings corresponding to the <code>file_pattern</code> of the TFRecords of the cats_vs_dogs dataset.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file_pattern = <span class="string">f'<span class="subst">&#123;getcwd()&#125;</span>/../tmp2/<span class="subst">&#123;dataset_name&#125;</span>/<span class="subst">&#123;info.version&#125;</span>/<span class="subst">&#123;dataset_name&#125;</span>-train.tfrecord*'</span></span><br><span class="line">files = tf.data.Dataset.list_files(file_pattern)</span><br></pre></td></tr></table></figure><p>Let’s recall that the TFRecord format is a simple format for storing a sequence of binary records. This is very useful because by serializing the data and storing it in a set of files (100-200MB each) that can each be read linearly greatly increases the efficiency when reading the data.</p><p>Since we will use it later, we should also recall that a <code>tf.Example</code> message (or protobuf) is a flexible message type that represents a <code>{&quot;string&quot;: tf.train.Feature}</code> mapping.</p><h2 id="Parallelize-Extraction"><a href="#Parallelize-Extraction" class="headerlink" title="Parallelize Extraction"></a>Parallelize Extraction</h2><p>In the cell below you will use the <a href="https://www.tensorflow.org/api_docs/python/tf/data/Dataset#interleave" target="_blank" rel="noopener">interleave</a> operation with certain <a href="https://www.tensorflow.org/api_docs/python/tf/data/Dataset#args_38" target="_blank" rel="noopener">arguments</a> to parallelize the extraction of the stored TFRecords of the cats_vs_dogs dataset.</p><p>Recall that <code>tf.data.experimental.AUTOTUNE</code> will delegate the decision about what level of parallelism to use to the <code>tf.data</code> runtime.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EXERCISE: Parallelize the extraction of the stored TFRecords of</span></span><br><span class="line"><span class="comment"># the cats_vs_dogs dataset by using the interleave operation with</span></span><br><span class="line"><span class="comment"># cycle_length = 4 and the number of parallel calls set to tf.data.experimental.AUTOTUNE.</span></span><br><span class="line">train_dataset = files.interleave(tf.data.TFRecordDataset,</span><br><span class="line">                                cycle_length=<span class="number">4</span>,</span><br><span class="line">                                block_length=<span class="number">1</span>,</span><br><span class="line">                                num_parallel_calls=tf.data.experimental.AUTOTUNE)</span><br></pre></td></tr></table></figure><h2 id="Parse-and-Decode"><a href="#Parse-and-Decode" class="headerlink" title="Parse and Decode"></a>Parse and Decode</h2><p>At this point the <code>train_dataset</code> contains serialized <code>tf.train.Example</code> messages. When iterated over, it returns these as scalar string tensors. The sample output for one record is given below:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;tf.Tensor: id=189, shape=(), dtype=string, numpy=b&apos;\n\x8f\xc4\x01\n\x0e\n\x05label\x12\x05\x1a\x03\n\x01\x00\n,\n\x0eimage/filename\x12\x1a\n\x18\n\x16PetImages/Cat/4159.jpg\n\xcd\xc3\x01\n\x05image\x12...\xff\xd9&apos;&gt;</span><br></pre></td></tr></table></figure><p>In order to be able to use these tensors to train our model, we must first parse them and decode them. We can parse and decode these string tensors by using a function. In the cell below you will create a <code>read_tfrecord</code> function that will read the serialized <code>tf.train.Example</code> messages and decode them. The function will also normalize and resize the images after they have been decoded. </p><p>In order to parse the <code>tf.train.Example</code> messages we need to create a <code>feature_description</code> dictionary. We need the <code>feature_description</code> dictionary because TFDS uses graph-execution and therefore, needs this description to build their shape and type signature. The basic structure of the <code>feature_description</code> dictionary looks like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">feature_description = &#123;<span class="string">'feature'</span>: tf.io.FixedLenFeature([], tf.Dtype, default_value)&#125;</span><br></pre></td></tr></table></figure><p>The number of features in your <code>feature_description</code> dictionary will vary depending on your dataset. In our particular case, the features are <code>&#39;image&#39;</code> and <code>&#39;label&#39;</code> and can be seen in the sample output of the string tensor above. Therefore, our <code>feature_description</code> dictionary will look like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">feature_description = &#123;</span><br><span class="line">    <span class="string">'image'</span>: tf.io.FixedLenFeature((), tf.string, <span class="string">""</span>),</span><br><span class="line">    <span class="string">'label'</span>: tf.io.FixedLenFeature((), tf.int64, <span class="number">-1</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>where we have given the default values of <code>&quot;&quot;</code> and <code>-1</code> to the <code>&#39;image&#39;</code> and <code>&#39;label&#39;</code> respectively.</p><p>The next step will be to parse the serialized <code>tf.train.Example</code> message using the <code>feature_description</code> dictionary given above. This can be done with the following code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">example = tf.io.parse_single_example(serialized_example, feature_description)</span><br></pre></td></tr></table></figure><p>Finally, we can decode the image by using:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">image = tf.io.decode_jpeg(example[<span class="string">'image'</span>], channels=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>Use the code given above to complete the exercise below.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EXERCISE: Fill in the missing code below.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_tfrecord</span><span class="params">(serialized_example)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Create the feature description dictionary</span></span><br><span class="line">    feature_description = &#123;</span><br><span class="line">        <span class="string">'image'</span>: tf.io.FixedLenFeature((), tf.string, <span class="string">""</span>),</span><br><span class="line">        <span class="string">'label'</span>: tf.io.FixedLenFeature((), tf.int64, <span class="number">-1</span>),</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># Parse the serialized_example and decode the image</span></span><br><span class="line">    example = tf.io.parse_single_example(serialized_example, feature_description)</span><br><span class="line">    image = tf.io.decode_jpeg(example[<span class="string">'image'</span>], channels=<span class="number">3</span>)</span><br><span class="line">    </span><br><span class="line">    image = tf.cast(image, tf.float32)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Normalize the pixels in the image</span></span><br><span class="line">    image = image / <span class="number">255.0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Resize the image to (224, 224) using tf.image.resize</span></span><br><span class="line">    image = tf.image.resize(image, (<span class="number">224</span>, <span class="number">224</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> image, example[<span class="string">'label'</span>]</span><br></pre></td></tr></table></figure><h2 id="Parallelize-Transformation"><a href="#Parallelize-Transformation" class="headerlink" title="Parallelize Transformation"></a>Parallelize Transformation</h2><p>You can now apply the <code>read_tfrecord</code> function to each item in the <code>train_dataset</code> by using the <code>map</code> method. You can parallelize the transformation of the <code>train_dataset</code> by using the <code>map</code> method with the <code>num_parallel_calls</code> set to the number of CPU cores.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EXERCISE: Fill in the missing code below.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Get the number of CPU cores. </span></span><br><span class="line">cores = multiprocessing.cpu_count()</span><br><span class="line"></span><br><span class="line">print(cores)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Parallelize the transformation of the train_dataset by using</span></span><br><span class="line"><span class="comment"># the map operation with the number of parallel calls set to</span></span><br><span class="line"><span class="comment"># the number of CPU cores.</span></span><br><span class="line">train_dataset = train_dataset.map(read_tfrecord, num_parallel_calls=cores)</span><br></pre></td></tr></table></figure><pre><code>8</code></pre><h2 id="Cache-the-Dataset"><a href="#Cache-the-Dataset" class="headerlink" title="Cache the Dataset"></a>Cache the Dataset</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EXERCISE: Cache the train_dataset in-memory.</span></span><br><span class="line">train_dataset = train_dataset.cache()</span><br></pre></td></tr></table></figure><h2 id="Parallelize-Loading"><a href="#Parallelize-Loading" class="headerlink" title="Parallelize Loading"></a>Parallelize Loading</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EXERCISE: Fill in the missing code below.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Shuffle and batch the train_dataset. Use a buffer size of 1024</span></span><br><span class="line"><span class="comment"># for shuffling and a batch size 32 for batching. </span></span><br><span class="line">train_dataset = train_dataset.shuffle(buffer_size=<span class="number">1024</span>).batch(<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Parallelize the loading by prefetching the train_dataset.</span></span><br><span class="line"><span class="comment"># Set the prefetching buffer size to tf.data.experimental.AUTOTUNE.</span></span><br><span class="line">train_dataset = train_dataset.prefetch(buffer_size = tf.data.experimental.AUTOTUNE)</span><br></pre></td></tr></table></figure><p>The next step will be to train your model using the following code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model = create_model()</span><br><span class="line">model.fit(train_dataset, epochs=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>We won’t go through the training process here as this can take some time. However, due to the parallelization of the various stages of the ETL processes, you should see a decrease in training time as compared to the naive approach depicted at beginning of the notebook.<br>```</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Parallelization-with-TFDS&quot;&gt;&lt;a href=&quot;#Parallelization-with-TFDS&quot; class=&quot;headerlink&quot; title=&quot;Parallelization with TFDS&quot;&gt;&lt;/a&gt;Paralleliza
      
    
    </summary>
    
    
      <category term="Artificial Inteligence" scheme="https://zhangruochi.com/categories/Artificial-Inteligence/"/>
    
      <category term="Deep Learning" scheme="https://zhangruochi.com/categories/Artificial-Inteligence/Deep-Learning/"/>
    
      <category term="Development" scheme="https://zhangruochi.com/categories/Development/"/>
    
    
      <category term="Tensorflow" scheme="https://zhangruochi.com/tags/Tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>Tensorflow input pipeline</title>
    <link href="https://zhangruochi.com/Tensorflow-input-pipeline/2020/02/20/"/>
    <id>https://zhangruochi.com/Tensorflow-input-pipeline/2020/02/20/</id>
    <published>2020-02-20T07:16:41.000Z</published>
    <updated>2020-02-20T07:18:44.369Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Classify-Structured-Data"><a href="#Classify-Structured-Data" class="headerlink" title="Classify Structured Data"></a>Classify Structured Data</h1><h2 id="Import-TensorFlow-and-Other-Libraries"><a href="#Import-TensorFlow-and-Other-Libraries" class="headerlink" title="Import TensorFlow and Other Libraries"></a>Import TensorFlow and Other Libraries</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> layers</span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> feature_column</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> getcwd</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br></pre></td></tr></table></figure><h2 id="Use-Pandas-to-Create-a-Dataframe"><a href="#Use-Pandas-to-Create-a-Dataframe" class="headerlink" title="Use Pandas to Create a Dataframe"></a>Use Pandas to Create a Dataframe</h2><p><a href="https://pandas.pydata.org/" target="_blank" rel="noopener">Pandas</a> is a Python library with many helpful utilities for loading and working with structured data. We will use Pandas to download the dataset and load it into a dataframe.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">filePath = <span class="string">f"<span class="subst">&#123;getcwd()&#125;</span>/../tmp2/heart.csv"</span></span><br><span class="line">dataframe = pd.read_csv(filePath)</span><br><span class="line">dataframe.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>age</th>      <th>sex</th>      <th>cp</th>      <th>trestbps</th>      <th>chol</th>      <th>fbs</th>      <th>restecg</th>      <th>thalach</th>      <th>exang</th>      <th>oldpeak</th>      <th>slope</th>      <th>ca</th>      <th>thal</th>      <th>target</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>63</td>      <td>1</td>      <td>1</td>      <td>145</td>      <td>233</td>      <td>1</td>      <td>2</td>      <td>150</td>      <td>0</td>      <td>2.3</td>      <td>3</td>      <td>0</td>      <td>fixed</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>67</td>      <td>1</td>      <td>4</td>      <td>160</td>      <td>286</td>      <td>0</td>      <td>2</td>      <td>108</td>      <td>1</td>      <td>1.5</td>      <td>2</td>      <td>3</td>      <td>normal</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>67</td>      <td>1</td>      <td>4</td>      <td>120</td>      <td>229</td>      <td>0</td>      <td>2</td>      <td>129</td>      <td>1</td>      <td>2.6</td>      <td>2</td>      <td>2</td>      <td>reversible</td>      <td>0</td>    </tr>    <tr>      <th>3</th>      <td>37</td>      <td>1</td>      <td>3</td>      <td>130</td>      <td>250</td>      <td>0</td>      <td>0</td>      <td>187</td>      <td>0</td>      <td>3.5</td>      <td>3</td>      <td>0</td>      <td>normal</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>41</td>      <td>0</td>      <td>2</td>      <td>130</td>      <td>204</td>      <td>0</td>      <td>2</td>      <td>172</td>      <td>0</td>      <td>1.4</td>      <td>1</td>      <td>0</td>      <td>normal</td>      <td>0</td>    </tr>  </tbody></table></div><h2 id="Split-the-Dataframe-Into-Train-Validation-and-Test-Sets"><a href="#Split-the-Dataframe-Into-Train-Validation-and-Test-Sets" class="headerlink" title="Split the Dataframe Into Train, Validation, and Test Sets"></a>Split the Dataframe Into Train, Validation, and Test Sets</h2><p>The dataset we downloaded was a single CSV file. We will split this into train, validation, and test sets.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">train, test = train_test_split(dataframe, test_size=<span class="number">0.2</span>)</span><br><span class="line">train, val = train_test_split(train, test_size=<span class="number">0.2</span>)</span><br><span class="line">print(len(train), <span class="string">'train examples'</span>)</span><br><span class="line">print(len(val), <span class="string">'validation examples'</span>)</span><br><span class="line">print(len(test), <span class="string">'test examples'</span>)</span><br></pre></td></tr></table></figure><pre><code>193 train examples49 validation examples61 test examples</code></pre><h2 id="Create-an-Input-Pipeline-Using-tf-data"><a href="#Create-an-Input-Pipeline-Using-tf-data" class="headerlink" title="Create an Input Pipeline Using tf.data"></a>Create an Input Pipeline Using <code>tf.data</code></h2><p>Next, we will wrap the dataframes with <a href="https://www.tensorflow.org/guide/datasets" target="_blank" rel="noopener">tf.data</a>. This will enable us  to use feature columns as a bridge to map from the columns in the Pandas dataframe to features used to train the model. If we were working with a very large CSV file (so large that it does not fit into memory), we would use tf.data to read it from disk directly.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EXERCISE: A utility method to create a tf.data dataset from a Pandas Dataframe.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">df_to_dataset</span><span class="params">(dataframe, shuffle=True, batch_size=<span class="number">32</span>)</span>:</span></span><br><span class="line">    dataframe = dataframe.copy()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Use Pandas dataframe's pop method to get the list of targets.</span></span><br><span class="line">    labels = dataframe[<span class="string">"target"</span>].values</span><br><span class="line">    dataframe.drop(<span class="string">"target"</span>, axis = <span class="number">1</span>, inplace = <span class="keyword">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Create a tf.data.Dataset from the dataframe and labels.</span></span><br><span class="line">    ds = tf.data.Dataset.from_tensor_slices((dict(dataframe),labels))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> shuffle:</span><br><span class="line">        <span class="comment"># Shuffle dataset.</span></span><br><span class="line">        ds = ds.shuffle(<span class="number">3</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># Batch dataset with specified batch_size parameter.</span></span><br><span class="line">    ds = ds.batch(batch_size)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ds</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">batch_size = <span class="number">5</span> <span class="comment"># A small batch sized is used for demonstration purposes</span></span><br><span class="line">train_ds = df_to_dataset(train, batch_size=batch_size)</span><br><span class="line">val_ds = df_to_dataset(val, shuffle=<span class="keyword">False</span>, batch_size=batch_size)</span><br><span class="line">test_ds = df_to_dataset(test, shuffle=<span class="keyword">False</span>, batch_size=batch_size)</span><br></pre></td></tr></table></figure><h2 id="Understand-the-Input-Pipeline"><a href="#Understand-the-Input-Pipeline" class="headerlink" title="Understand the Input Pipeline"></a>Understand the Input Pipeline</h2><p>Now that we have created the input pipeline, let’s call it to see the format of the data it returns. We have used a small batch size to keep the output readable.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> feature_batch, label_batch <span class="keyword">in</span> train_ds.take(<span class="number">1</span>):</span><br><span class="line">    print(<span class="string">'Every feature:'</span>, list(feature_batch.keys()))</span><br><span class="line">    print(<span class="string">'A batch of ages:'</span>, feature_batch[<span class="string">'age'</span>])</span><br><span class="line">    print(<span class="string">'A batch of targets:'</span>, label_batch )</span><br></pre></td></tr></table></figure><pre><code>Every feature: [&#39;age&#39;, &#39;sex&#39;, &#39;cp&#39;, &#39;trestbps&#39;, &#39;chol&#39;, &#39;fbs&#39;, &#39;restecg&#39;, &#39;thalach&#39;, &#39;exang&#39;, &#39;oldpeak&#39;, &#39;slope&#39;, &#39;ca&#39;, &#39;thal&#39;]A batch of ages: tf.Tensor([51 63 64 58 57], shape=(5,), dtype=int32)A batch of targets: tf.Tensor([0 1 0 0 0], shape=(5,), dtype=int64)</code></pre><p>We can see that the dataset returns a dictionary of column names (from the dataframe) that map to column values from rows in the dataframe.</p><h2 id="Create-Several-Types-of-Feature-Columns"><a href="#Create-Several-Types-of-Feature-Columns" class="headerlink" title="Create Several Types of Feature Columns"></a>Create Several Types of Feature Columns</h2><p>TensorFlow provides many types of feature columns. In this section, we will create several types of feature columns, and demonstrate how they transform a column from the dataframe.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Try to demonstrate several types of feature columns by getting an example.</span></span><br><span class="line">example_batch = next(iter(train_ds))[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># A utility method to create a feature column and to transform a batch of data.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(feature_column)</span>:</span></span><br><span class="line">    feature_layer = layers.DenseFeatures(feature_column, dtype=<span class="string">'float64'</span>)</span><br><span class="line">    print(feature_layer(example_batch).numpy())</span><br></pre></td></tr></table></figure><h3 id="Numeric-Columns"><a href="#Numeric-Columns" class="headerlink" title="Numeric Columns"></a>Numeric Columns</h3><p>The output of a feature column becomes the input to the model (using the demo function defined above, we will be able to see exactly how each column from the dataframe is transformed). A <a href="https://www.tensorflow.org/api_docs/python/tf/feature_column/numeric_column" target="_blank" rel="noopener">numeric column</a> is the simplest type of column. It is used to represent real valued features. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EXERCISE: Create a numeric feature column out of 'age' and demo it.</span></span><br><span class="line">age = tf.feature_column.numeric_column(<span class="string">"age"</span>)</span><br><span class="line"></span><br><span class="line">demo(age)</span><br></pre></td></tr></table></figure><pre><code>[[51.] [58.] [63.] [64.] [60.]]</code></pre><p>In the heart disease dataset, most columns from the dataframe are numeric.</p><h3 id="Bucketized-Columns"><a href="#Bucketized-Columns" class="headerlink" title="Bucketized Columns"></a>Bucketized Columns</h3><p>Often, you don’t want to feed a number directly into the model, but instead split its value into different categories based on numerical ranges. Consider raw data that represents a person’s age. Instead of representing age as a numeric column, we could split the age into several buckets using a <a href="https://www.tensorflow.org/api_docs/python/tf/feature_column/bucketized_column" target="_blank" rel="noopener">bucketized column</a>. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EXERCISE: Create a bucketized feature column out of 'age' with</span></span><br><span class="line"><span class="comment"># the following boundaries and demo it.</span></span><br><span class="line">boundaries = [<span class="number">18</span>, <span class="number">25</span>, <span class="number">30</span>, <span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>, <span class="number">50</span>, <span class="number">55</span>, <span class="number">60</span>, <span class="number">65</span>]</span><br><span class="line"></span><br><span class="line">age_buckets = tf.feature_column.bucketized_column(age, boundaries = boundaries)</span><br><span class="line"></span><br><span class="line">demo(age_buckets)</span><br></pre></td></tr></table></figure><pre><code>[[0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0.] [0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0.] [0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0.] [0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0.] [0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0.]]</code></pre><p>Notice the one-hot values above describe which age range each row matches.</p><h3 id="Categorical-Columns"><a href="#Categorical-Columns" class="headerlink" title="Categorical Columns"></a>Categorical Columns</h3><p>In this dataset, thal is represented as a string (e.g. ‘fixed’, ‘normal’, or ‘reversible’). We cannot feed strings directly to a model. Instead, we must first map them to numeric values. The categorical vocabulary columns provide a way to represent strings as a one-hot vector (much like you have seen above with age buckets). </p><p><strong>Note</strong>: You will probably see some warning messages when running some of the code cell below. These warnings have to do with software updates and should not cause any errors or prevent your code from running.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EXERCISE: Create a categorical vocabulary column out of the</span></span><br><span class="line"><span class="comment"># above mentioned categories with the key specified as 'thal'.</span></span><br><span class="line">thal = tf.feature_column.categorical_column_with_vocabulary_list(</span><br><span class="line">      <span class="string">'thal'</span>, [<span class="string">'fixed'</span>, <span class="string">'normal'</span>, <span class="string">'reversible'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># EXERCISE: Create an indicator column out of the created categorical column.</span></span><br><span class="line">thal_one_hot = tf.feature_column.indicator_column(thal)</span><br><span class="line"></span><br><span class="line">demo(thal_one_hot)</span><br></pre></td></tr></table></figure><pre><code>[[0. 1. 0.] [0. 1. 0.] [0. 0. 1.] [0. 0. 1.] [0. 1. 0.]]</code></pre><p>The vocabulary can be passed as a list using <a href="https://www.tensorflow.org/api_docs/python/tf/feature_column/categorical_column_with_vocabulary_list" target="_blank" rel="noopener">categorical_column_with_vocabulary_list</a>, or loaded from a file using <a href="https://www.tensorflow.org/api_docs/python/tf/feature_column/categorical_column_with_vocabulary_file" target="_blank" rel="noopener">categorical_column_with_vocabulary_file</a>.</p><h3 id="Embedding-Columns"><a href="#Embedding-Columns" class="headerlink" title="Embedding Columns"></a>Embedding Columns</h3><p>Suppose instead of having just a few possible strings, we have thousands (or more) values per category. For a number of reasons, as the number of categories grow large, it becomes infeasible to train a neural network using one-hot encodings. We can use an embedding column to overcome this limitation. Instead of representing the data as a one-hot vector of many dimensions, an <a href="https://www.tensorflow.org/api_docs/python/tf/feature_column/embedding_column" target="_blank" rel="noopener">embedding column</a> represents that data as a lower-dimensional, dense vector in which each cell can contain any number, not just 0 or 1. You can tune the size of the embedding with the <code>dimension</code> parameter.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EXERCISE: Create an embedding column out of the categorical</span></span><br><span class="line"><span class="comment"># vocabulary you just created (thal). Set the size of the </span></span><br><span class="line"><span class="comment"># embedding to 8, by using the dimension parameter.</span></span><br><span class="line"></span><br><span class="line">thal_embedding = tf.feature_column.embedding_column(thal, dimension=<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">demo(thal_embedding)</span><br></pre></td></tr></table></figure><pre><code>[[-1.4254066e-01 -1.0374661e-01  3.4352791e-01 -3.3996427e-01  -3.2193713e-02 -1.8381193e-01 -1.8051244e-01  3.2638407e-01] [-1.4254066e-01 -1.0374661e-01  3.4352791e-01 -3.3996427e-01  -3.2193713e-02 -1.8381193e-01 -1.8051244e-01  3.2638407e-01] [-6.5549983e-05  2.7680036e-01  4.1849682e-01  5.3418136e-01  -1.6281548e-01  2.5406811e-01  8.8969752e-02  1.8004593e-01] [-6.5549983e-05  2.7680036e-01  4.1849682e-01  5.3418136e-01  -1.6281548e-01  2.5406811e-01  8.8969752e-02  1.8004593e-01] [-1.4254066e-01 -1.0374661e-01  3.4352791e-01 -3.3996427e-01  -3.2193713e-02 -1.8381193e-01 -1.8051244e-01  3.2638407e-01]]</code></pre><h3 id="Hashed-Feature-Columns"><a href="#Hashed-Feature-Columns" class="headerlink" title="Hashed Feature Columns"></a>Hashed Feature Columns</h3><p>Another way to represent a categorical column with a large number of values is to use a <a href="https://www.tensorflow.org/api_docs/python/tf/feature_column/categorical_column_with_hash_bucket" target="_blank" rel="noopener">categorical_column_with_hash_bucket</a>. This feature column calculates a hash value of the input, then selects one of the <code>hash_bucket_size</code> buckets to encode a string. When using this column, you do not need to provide the vocabulary, and you can choose to make the number of hash buckets significantly smaller than the number of actual categories to save space.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EXERCISE: Create a hashed feature column with 'thal' as the key and </span></span><br><span class="line"><span class="comment"># 1000 hash buckets.</span></span><br><span class="line">thal_hashed = tf.feature_column.categorical_column_with_hash_bucket(</span><br><span class="line">      <span class="string">'thal'</span>, hash_bucket_size=<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">demo(feature_column.indicator_column(thal_hashed))</span><br></pre></td></tr></table></figure><pre><code>[[0. 0. 0. ... 0. 0. 0.] [0. 0. 0. ... 0. 0. 0.] [0. 0. 0. ... 0. 0. 0.] [0. 0. 0. ... 0. 0. 0.] [0. 0. 0. ... 0. 0. 0.]]</code></pre><h3 id="Crossed-Feature-Columns"><a href="#Crossed-Feature-Columns" class="headerlink" title="Crossed Feature Columns"></a>Crossed Feature Columns</h3><p>Combining features into a single feature, better known as <a href="https://developers.google.com/machine-learning/glossary/#feature_cross" target="_blank" rel="noopener">feature crosses</a>, enables a model to learn separate weights for each combination of features. Here, we will create a new feature that is the cross of age and thal. Note that <code>crossed_column</code> does not build the full table of all possible combinations (which could be very large). Instead, it is backed by a <code>hashed_column</code>, so you can choose how large the table is.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EXERCISE: Create a crossed column using the bucketized column (age_buckets),</span></span><br><span class="line"><span class="comment"># the categorical vocabulary column (thal) previously created, and 1000 hash buckets.</span></span><br><span class="line">crossed_feature = tf.feature_column.crossed_column([age_buckets, thal], hash_bucket_size=<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">demo(feature_column.indicator_column(crossed_feature))</span><br></pre></td></tr></table></figure><pre><code>[[0. 0. 0. ... 0. 0. 0.] [0. 0. 0. ... 0. 0. 0.] [0. 0. 0. ... 0. 0. 0.] [0. 0. 0. ... 0. 0. 0.] [0. 0. 0. ... 0. 0. 0.]]</code></pre><h2 id="Choose-Which-Columns-to-Use"><a href="#Choose-Which-Columns-to-Use" class="headerlink" title="Choose Which Columns to Use"></a>Choose Which Columns to Use</h2><p>We have seen how to use several types of feature columns. Now we will use them to train a model. The goal of this exercise is to show you the complete code needed to work with feature columns. We have selected a few columns to train our model below arbitrarily.</p><p>If your aim is to build an accurate model, try a larger dataset of your own, and think carefully about which features are the most meaningful to include, and how they should be represented.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataframe.dtypes</span><br></pre></td></tr></table></figure><pre><code>age           int64sex           int64cp            int64trestbps      int64chol          int64fbs           int64restecg       int64thalach       int64exang         int64oldpeak     float64slope         int64ca            int64thal         objecttarget        int64dtype: object</code></pre><p>You can use the above list of column datatypes to map the appropriate feature column to every column in the dataframe.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EXERCISE: Fill in the missing code below</span></span><br><span class="line">feature_columns = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># Numeric Cols.</span></span><br><span class="line"><span class="comment"># Create a list of numeric columns. Use the following list of columns</span></span><br><span class="line"><span class="comment"># that have a numeric datatype: ['age', 'trestbps', 'chol', 'thalach', 'oldpeak', 'slope', 'ca'].</span></span><br><span class="line">numeric_columns = [<span class="string">'age'</span>, <span class="string">'trestbps'</span>, <span class="string">'chol'</span>, <span class="string">'thalach'</span>, <span class="string">'oldpeak'</span>, <span class="string">'slope'</span>, <span class="string">'ca'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> header <span class="keyword">in</span> numeric_columns:</span><br><span class="line">    <span class="comment"># Create a numeric feature column  out of the header.</span></span><br><span class="line">    numeric_feature_column = tf.feature_column.numeric_column(header)</span><br><span class="line">    </span><br><span class="line">    feature_columns.append(numeric_feature_column)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bucketized Cols.</span></span><br><span class="line"><span class="comment"># Create a bucketized feature column out of the age column (numeric column)</span></span><br><span class="line"><span class="comment"># that you've already created. Use the following boundaries:</span></span><br><span class="line"><span class="comment"># [18, 25, 30, 35, 40, 45, 50, 55, 60, 65]</span></span><br><span class="line">age_buckets = tf.feature_column.bucketized_column(age, boundaries = [<span class="number">18</span>, <span class="number">25</span>, <span class="number">30</span>, <span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>, <span class="number">50</span>, <span class="number">55</span>, <span class="number">60</span>, <span class="number">65</span>] )</span><br><span class="line"></span><br><span class="line">feature_columns.append(age_buckets)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Indicator Cols.</span></span><br><span class="line"><span class="comment"># Create a categorical vocabulary column out of the categories</span></span><br><span class="line"><span class="comment"># ['fixed', 'normal', 'reversible'] with the key specified as 'thal'.</span></span><br><span class="line">thal = feature_column.categorical_column_with_vocabulary_list(</span><br><span class="line">      <span class="string">'thal'</span>, [<span class="string">'fixed'</span>, <span class="string">'normal'</span>, <span class="string">'reversible'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create an indicator column out of the created thal categorical column</span></span><br><span class="line">thal_one_hot = feature_column.indicator_column(thal)</span><br><span class="line"></span><br><span class="line">feature_columns.append(thal_one_hot)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Embedding Cols.</span></span><br><span class="line"><span class="comment"># Create an embedding column out of the categorical vocabulary you</span></span><br><span class="line"><span class="comment"># just created (thal). Set the size of the embedding to 8, by using</span></span><br><span class="line"><span class="comment"># the dimension parameter.</span></span><br><span class="line">thal_embedding = tf.feature_column.embedding_column(thal, dimension=<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">feature_columns.append(thal_embedding)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Crossed Cols.</span></span><br><span class="line"><span class="comment"># Create a crossed column using the bucketized column (age_buckets),</span></span><br><span class="line"><span class="comment"># the categorical vocabulary column (thal) previously created, and 1000 hash buckets.</span></span><br><span class="line">crossed_feature = feature_column.crossed_column([age_buckets, thal], hash_bucket_size=<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create an indicator column out of the crossed column created above to one-hot encode it.</span></span><br><span class="line">crossed_feature = feature_column.indicator_column(crossed_feature)</span><br><span class="line"></span><br><span class="line">feature_columns.append(crossed_feature)</span><br></pre></td></tr></table></figure><h3 id="Create-a-Feature-Layer"><a href="#Create-a-Feature-Layer" class="headerlink" title="Create a Feature Layer"></a>Create a Feature Layer</h3><p>Now that we have defined our feature columns, we will use a <a href="https://www.tensorflow.org/versions/r2.0/api_docs/python/tf/keras/layers/DenseFeatures" target="_blank" rel="noopener">DenseFeatures</a> layer to input them to our Keras model.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EXERCISE: Create a Keras DenseFeatures layer and pass the feature_columns you just created.</span></span><br><span class="line">feature_layer = tf.keras.layers.DenseFeatures(feature_columns)</span><br></pre></td></tr></table></figure><p>Earlier, we used a small batch size to demonstrate how feature columns worked. We create a new input pipeline with a larger batch size.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">batch_size = <span class="number">32</span></span><br><span class="line">train_ds = df_to_dataset(train, batch_size=batch_size)</span><br><span class="line">val_ds = df_to_dataset(val, shuffle=<span class="keyword">False</span>, batch_size=batch_size)</span><br><span class="line">test_ds = df_to_dataset(test, shuffle=<span class="keyword">False</span>, batch_size=batch_size)</span><br></pre></td></tr></table></figure><h2 id="Create-Compile-and-Train-the-Model"><a href="#Create-Compile-and-Train-the-Model" class="headerlink" title="Create, Compile, and Train the Model"></a>Create, Compile, and Train the Model</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">model = tf.keras.Sequential([</span><br><span class="line">        feature_layer,</span><br><span class="line">        layers.Dense(<span class="number">128</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">        layers.Dense(<span class="number">128</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">        layers.Dense(<span class="number">1</span>, activation=<span class="string">'sigmoid'</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">model.compile(optimizer=<span class="string">'adam'</span>,</span><br><span class="line">              loss=<span class="string">'binary_crossentropy'</span>,</span><br><span class="line">              metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line"></span><br><span class="line">model.fit(train_ds,</span><br><span class="line">          validation_data=val_ds,</span><br><span class="line">          epochs=<span class="number">100</span>)</span><br></pre></td></tr></table></figure><pre><code>Epoch 1/1007/7 [==============================] - 4s 609ms/step - loss: 1.5455 - accuracy: 0.6321 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00Epoch 2/1007/7 [==============================] - 0s 45ms/step - loss: 1.6424 - accuracy: 0.5803 - val_loss: 1.7392 - val_accuracy: 0.7143Epoch 3/1007/7 [==============================] - 0s 44ms/step - loss: 1.2255 - accuracy: 0.6995 - val_loss: 0.7653 - val_accuracy: 0.5714Epoch 4/1007/7 [==============================] - 0s 44ms/step - loss: 0.7326 - accuracy: 0.6891 - val_loss: 0.5689 - val_accuracy: 0.6939Epoch 5/1007/7 [==============================] - 0s 43ms/step - loss: 0.5230 - accuracy: 0.7358 - val_loss: 0.5406 - val_accuracy: 0.7143Epoch 6/1007/7 [==============================] - 0s 44ms/step - loss: 0.4348 - accuracy: 0.8083 - val_loss: 0.5609 - val_accuracy: 0.7143Epoch 7/1007/7 [==============================] - 0s 56ms/step - loss: 0.4592 - accuracy: 0.7824 - val_loss: 0.5710 - val_accuracy: 0.7347Epoch 8/1007/7 [==============================] - 0s 45ms/step - loss: 0.4996 - accuracy: 0.7461 - val_loss: 0.5585 - val_accuracy: 0.7143Epoch 9/1007/7 [==============================] - 0s 44ms/step - loss: 0.4389 - accuracy: 0.7927 - val_loss: 0.5297 - val_accuracy: 0.6735Epoch 10/1007/7 [==============================] - 0s 55ms/step - loss: 0.3914 - accuracy: 0.8446 - val_loss: 0.5216 - val_accuracy: 0.6531Epoch 11/1007/7 [==============================] - 0s 45ms/step - loss: 0.4022 - accuracy: 0.7979 - val_loss: 0.5331 - val_accuracy: 0.7347Epoch 12/1007/7 [==============================] - 0s 54ms/step - loss: 0.3811 - accuracy: 0.8238 - val_loss: 0.6522 - val_accuracy: 0.6735Epoch 13/1007/7 [==============================] - 0s 44ms/step - loss: 0.4173 - accuracy: 0.7927 - val_loss: 0.5219 - val_accuracy: 0.7347Epoch 14/1007/7 [==============================] - 0s 44ms/step - loss: 0.4235 - accuracy: 0.7513 - val_loss: 0.5027 - val_accuracy: 0.6531Epoch 15/1007/7 [==============================] - 0s 44ms/step - loss: 0.3789 - accuracy: 0.7979 - val_loss: 0.7249 - val_accuracy: 0.6531Epoch 16/1007/7 [==============================] - 0s 45ms/step - loss: 0.3972 - accuracy: 0.8342 - val_loss: 0.4830 - val_accuracy: 0.6939Epoch 17/1007/7 [==============================] - 0s 55ms/step - loss: 0.3339 - accuracy: 0.8601 - val_loss: 0.4912 - val_accuracy: 0.6531Epoch 18/1007/7 [==============================] - 0s 44ms/step - loss: 0.3555 - accuracy: 0.7927 - val_loss: 0.6399 - val_accuracy: 0.6939Epoch 19/1007/7 [==============================] - 0s 43ms/step - loss: 0.3531 - accuracy: 0.8601 - val_loss: 0.5526 - val_accuracy: 0.6735Epoch 20/1007/7 [==============================] - 0s 44ms/step - loss: 0.3810 - accuracy: 0.7876 - val_loss: 0.5751 - val_accuracy: 0.7143Epoch 21/1007/7 [==============================] - 0s 56ms/step - loss: 0.3409 - accuracy: 0.8549 - val_loss: 0.5524 - val_accuracy: 0.7551Epoch 22/1007/7 [==============================] - 0s 44ms/step - loss: 0.3167 - accuracy: 0.8756 - val_loss: 0.6607 - val_accuracy: 0.7143Epoch 23/1007/7 [==============================] - 0s 45ms/step - loss: 0.3732 - accuracy: 0.8601 - val_loss: 0.5993 - val_accuracy: 0.6939Epoch 24/1007/7 [==============================] - 0s 55ms/step - loss: 0.3918 - accuracy: 0.7979 - val_loss: 0.5646 - val_accuracy: 0.6735Epoch 25/1007/7 [==============================] - 0s 44ms/step - loss: 0.3624 - accuracy: 0.8187 - val_loss: 0.7324 - val_accuracy: 0.6735Epoch 26/1007/7 [==============================] - 0s 56ms/step - loss: 0.3531 - accuracy: 0.8446 - val_loss: 0.4501 - val_accuracy: 0.6939Epoch 27/1007/7 [==============================] - 0s 45ms/step - loss: 0.3164 - accuracy: 0.8653 - val_loss: 0.4770 - val_accuracy: 0.6735Epoch 28/1007/7 [==============================] - 0s 55ms/step - loss: 0.3557 - accuracy: 0.8290 - val_loss: 0.5188 - val_accuracy: 0.7551Epoch 29/1007/7 [==============================] - 0s 45ms/step - loss: 0.3193 - accuracy: 0.8446 - val_loss: 0.5949 - val_accuracy: 0.7347Epoch 30/1007/7 [==============================] - 0s 55ms/step - loss: 0.3049 - accuracy: 0.8601 - val_loss: 0.5904 - val_accuracy: 0.7347Epoch 31/1007/7 [==============================] - 0s 44ms/step - loss: 0.3150 - accuracy: 0.8705 - val_loss: 0.4901 - val_accuracy: 0.6531Epoch 32/1007/7 [==============================] - 0s 55ms/step - loss: 0.3223 - accuracy: 0.8446 - val_loss: 0.5034 - val_accuracy: 0.6939Epoch 33/1007/7 [==============================] - 0s 43ms/step - loss: 0.3178 - accuracy: 0.8394 - val_loss: 0.6359 - val_accuracy: 0.7347Epoch 34/1007/7 [==============================] - 0s 43ms/step - loss: 0.3041 - accuracy: 0.8549 - val_loss: 0.5558 - val_accuracy: 0.7551Epoch 35/1007/7 [==============================] - 0s 44ms/step - loss: 0.2853 - accuracy: 0.8808 - val_loss: 0.5089 - val_accuracy: 0.6939Epoch 36/1007/7 [==============================] - 0s 55ms/step - loss: 0.2905 - accuracy: 0.8653 - val_loss: 0.5989 - val_accuracy: 0.7347Epoch 37/1007/7 [==============================] - 0s 45ms/step - loss: 0.2885 - accuracy: 0.8705 - val_loss: 0.5644 - val_accuracy: 0.7551Epoch 38/1007/7 [==============================] - 0s 55ms/step - loss: 0.2890 - accuracy: 0.8601 - val_loss: 0.5590 - val_accuracy: 0.7755Epoch 39/1007/7 [==============================] - 0s 45ms/step - loss: 0.2792 - accuracy: 0.8808 - val_loss: 0.4820 - val_accuracy: 0.7551Epoch 40/1007/7 [==============================] - 0s 55ms/step - loss: 0.2781 - accuracy: 0.8653 - val_loss: 0.4974 - val_accuracy: 0.7551Epoch 41/1007/7 [==============================] - 0s 45ms/step - loss: 0.2873 - accuracy: 0.8705 - val_loss: 0.5550 - val_accuracy: 0.7551Epoch 42/1007/7 [==============================] - 0s 55ms/step - loss: 0.2737 - accuracy: 0.8808 - val_loss: 0.5356 - val_accuracy: 0.7347Epoch 43/1007/7 [==============================] - 0s 44ms/step - loss: 0.2677 - accuracy: 0.8860 - val_loss: 0.5071 - val_accuracy: 0.7551Epoch 44/1007/7 [==============================] - 0s 44ms/step - loss: 0.2794 - accuracy: 0.8756 - val_loss: 0.5320 - val_accuracy: 0.6939Epoch 45/1007/7 [==============================] - 0s 55ms/step - loss: 0.2932 - accuracy: 0.8394 - val_loss: 0.5533 - val_accuracy: 0.7755Epoch 46/1007/7 [==============================] - 0s 45ms/step - loss: 0.2750 - accuracy: 0.8705 - val_loss: 0.5723 - val_accuracy: 0.7347Epoch 47/1007/7 [==============================] - 0s 55ms/step - loss: 0.2694 - accuracy: 0.8808 - val_loss: 0.5347 - val_accuracy: 0.7551Epoch 48/1007/7 [==============================] - 0s 44ms/step - loss: 0.2632 - accuracy: 0.8912 - val_loss: 0.5369 - val_accuracy: 0.7755Epoch 49/1007/7 [==============================] - 0s 44ms/step - loss: 0.2677 - accuracy: 0.8860 - val_loss: 0.5837 - val_accuracy: 0.7143Epoch 50/1007/7 [==============================] - 0s 55ms/step - loss: 0.2635 - accuracy: 0.8808 - val_loss: 0.5337 - val_accuracy: 0.7755Epoch 51/1007/7 [==============================] - 0s 45ms/step - loss: 0.2592 - accuracy: 0.8912 - val_loss: 0.5533 - val_accuracy: 0.7755Epoch 52/1007/7 [==============================] - 0s 55ms/step - loss: 0.2536 - accuracy: 0.8912 - val_loss: 0.5743 - val_accuracy: 0.7347Epoch 53/1007/7 [==============================] - 0s 45ms/step - loss: 0.2511 - accuracy: 0.9016 - val_loss: 0.5451 - val_accuracy: 0.7551Epoch 54/1007/7 [==============================] - 0s 55ms/step - loss: 0.2650 - accuracy: 0.8860 - val_loss: 0.5864 - val_accuracy: 0.6531Epoch 55/1007/7 [==============================] - 0s 45ms/step - loss: 0.3354 - accuracy: 0.8290 - val_loss: 0.5772 - val_accuracy: 0.7347Epoch 56/1007/7 [==============================] - 0s 54ms/step - loss: 0.2759 - accuracy: 0.8653 - val_loss: 0.5857 - val_accuracy: 0.7347Epoch 57/1007/7 [==============================] - 0s 44ms/step - loss: 0.2522 - accuracy: 0.8860 - val_loss: 0.5930 - val_accuracy: 0.7347Epoch 58/1007/7 [==============================] - 0s 44ms/step - loss: 0.2488 - accuracy: 0.8808 - val_loss: 0.5814 - val_accuracy: 0.7551Epoch 59/1007/7 [==============================] - 0s 55ms/step - loss: 0.2428 - accuracy: 0.8964 - val_loss: 0.5805 - val_accuracy: 0.7551Epoch 60/1007/7 [==============================] - 0s 44ms/step - loss: 0.2555 - accuracy: 0.8912 - val_loss: 0.5903 - val_accuracy: 0.7347Epoch 61/1007/7 [==============================] - 0s 44ms/step - loss: 0.2391 - accuracy: 0.9016 - val_loss: 0.5721 - val_accuracy: 0.7755Epoch 62/1007/7 [==============================] - 0s 44ms/step - loss: 0.2423 - accuracy: 0.8860 - val_loss: 0.5911 - val_accuracy: 0.7551Epoch 63/1007/7 [==============================] - 0s 44ms/step - loss: 0.2450 - accuracy: 0.8756 - val_loss: 0.5845 - val_accuracy: 0.7755Epoch 64/1007/7 [==============================] - 0s 55ms/step - loss: 0.2447 - accuracy: 0.8912 - val_loss: 0.5883 - val_accuracy: 0.7551Epoch 65/1007/7 [==============================] - 0s 44ms/step - loss: 0.2386 - accuracy: 0.8964 - val_loss: 0.6093 - val_accuracy: 0.7551Epoch 66/1007/7 [==============================] - 0s 56ms/step - loss: 0.2278 - accuracy: 0.9067 - val_loss: 0.6654 - val_accuracy: 0.7347Epoch 67/1007/7 [==============================] - 0s 44ms/step - loss: 0.2474 - accuracy: 0.8912 - val_loss: 0.6545 - val_accuracy: 0.7143Epoch 68/1007/7 [==============================] - 0s 45ms/step - loss: 0.2509 - accuracy: 0.8808 - val_loss: 0.6298 - val_accuracy: 0.6735Epoch 69/1007/7 [==============================] - 0s 44ms/step - loss: 0.2931 - accuracy: 0.8549 - val_loss: 0.6237 - val_accuracy: 0.7347Epoch 70/1007/7 [==============================] - 0s 44ms/step - loss: 0.2653 - accuracy: 0.8808 - val_loss: 0.6296 - val_accuracy: 0.7143Epoch 71/1007/7 [==============================] - 0s 43ms/step - loss: 0.2649 - accuracy: 0.8549 - val_loss: 0.5915 - val_accuracy: 0.6531Epoch 72/1007/7 [==============================] - 0s 44ms/step - loss: 0.3141 - accuracy: 0.8394 - val_loss: 0.6017 - val_accuracy: 0.7755Epoch 73/1007/7 [==============================] - 0s 45ms/step - loss: 0.2557 - accuracy: 0.8756 - val_loss: 0.6444 - val_accuracy: 0.7347Epoch 74/1007/7 [==============================] - 0s 55ms/step - loss: 0.2220 - accuracy: 0.9067 - val_loss: 0.6380 - val_accuracy: 0.7347Epoch 75/1007/7 [==============================] - 0s 44ms/step - loss: 0.2209 - accuracy: 0.9016 - val_loss: 0.6977 - val_accuracy: 0.7347Epoch 76/1007/7 [==============================] - 0s 55ms/step - loss: 0.2318 - accuracy: 0.8964 - val_loss: 0.6422 - val_accuracy: 0.7347Epoch 77/1007/7 [==============================] - 0s 44ms/step - loss: 0.2183 - accuracy: 0.9067 - val_loss: 0.6183 - val_accuracy: 0.7143Epoch 78/1007/7 [==============================] - 0s 55ms/step - loss: 0.2304 - accuracy: 0.8860 - val_loss: 0.6522 - val_accuracy: 0.7143Epoch 79/1007/7 [==============================] - 0s 44ms/step - loss: 0.2338 - accuracy: 0.8756 - val_loss: 0.5959 - val_accuracy: 0.7551Epoch 80/1007/7 [==============================] - 0s 44ms/step - loss: 0.2250 - accuracy: 0.8964 - val_loss: 0.6232 - val_accuracy: 0.7551Epoch 81/1007/7 [==============================] - 0s 55ms/step - loss: 0.2275 - accuracy: 0.8912 - val_loss: 0.6500 - val_accuracy: 0.7551Epoch 82/1007/7 [==============================] - 0s 44ms/step - loss: 0.2053 - accuracy: 0.9016 - val_loss: 0.6249 - val_accuracy: 0.7347Epoch 83/1007/7 [==============================] - 0s 45ms/step - loss: 0.2250 - accuracy: 0.8964 - val_loss: 0.6744 - val_accuracy: 0.7347Epoch 84/1007/7 [==============================] - 0s 44ms/step - loss: 0.2109 - accuracy: 0.9067 - val_loss: 0.7039 - val_accuracy: 0.7347Epoch 85/1007/7 [==============================] - 0s 45ms/step - loss: 0.2171 - accuracy: 0.9016 - val_loss: 0.6693 - val_accuracy: 0.7347Epoch 86/1007/7 [==============================] - 0s 44ms/step - loss: 0.2187 - accuracy: 0.9067 - val_loss: 0.6765 - val_accuracy: 0.7143Epoch 87/1007/7 [==============================] - 0s 45ms/step - loss: 0.2225 - accuracy: 0.9067 - val_loss: 0.6637 - val_accuracy: 0.6939Epoch 88/1007/7 [==============================] - 0s 44ms/step - loss: 0.2193 - accuracy: 0.8808 - val_loss: 0.7029 - val_accuracy: 0.6735Epoch 89/1007/7 [==============================] - 0s 45ms/step - loss: 0.2644 - accuracy: 0.8653 - val_loss: 0.6829 - val_accuracy: 0.6939Epoch 90/1007/7 [==============================] - 0s 55ms/step - loss: 0.2625 - accuracy: 0.8601 - val_loss: 0.6617 - val_accuracy: 0.7347Epoch 91/1007/7 [==============================] - 0s 45ms/step - loss: 0.2206 - accuracy: 0.8860 - val_loss: 0.6889 - val_accuracy: 0.7551Epoch 92/1007/7 [==============================] - 0s 55ms/step - loss: 0.2090 - accuracy: 0.8964 - val_loss: 0.7322 - val_accuracy: 0.7347Epoch 93/1007/7 [==============================] - 0s 45ms/step - loss: 0.2016 - accuracy: 0.9119 - val_loss: 0.7244 - val_accuracy: 0.7347Epoch 94/1007/7 [==============================] - 0s 55ms/step - loss: 0.1933 - accuracy: 0.9067 - val_loss: 0.6788 - val_accuracy: 0.7347Epoch 95/1007/7 [==============================] - 0s 45ms/step - loss: 0.2002 - accuracy: 0.9171 - val_loss: 0.6849 - val_accuracy: 0.7143Epoch 96/1007/7 [==============================] - 0s 55ms/step - loss: 0.2138 - accuracy: 0.8964 - val_loss: 0.7610 - val_accuracy: 0.6939Epoch 97/1007/7 [==============================] - 0s 45ms/step - loss: 0.2225 - accuracy: 0.8912 - val_loss: 0.6998 - val_accuracy: 0.6939Epoch 98/1007/7 [==============================] - 0s 55ms/step - loss: 0.2089 - accuracy: 0.9067 - val_loss: 0.6846 - val_accuracy: 0.7143Epoch 99/1007/7 [==============================] - 0s 44ms/step - loss: 0.2043 - accuracy: 0.8964 - val_loss: 0.7292 - val_accuracy: 0.7347Epoch 100/1007/7 [==============================] - 0s 55ms/step - loss: 0.2008 - accuracy: 0.9016 - val_loss: 0.7064 - val_accuracy: 0.7143&lt;tensorflow.python.keras.callbacks.History at 0x7f33184937b8&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">loss, accuracy = model.evaluate(test_ds)</span><br><span class="line">print(<span class="string">"Accuracy"</span>, accuracy)</span><br></pre></td></tr></table></figure><pre><code>2/2 [==============================] - 1s 329ms/step - loss: 0.5511 - accuracy: 0.8197Accuracy 0.8196721</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Classify-Structured-Data&quot;&gt;&lt;a href=&quot;#Classify-Structured-Data&quot; class=&quot;headerlink&quot; title=&quot;Classify Structured Data&quot;&gt;&lt;/a&gt;Classify Struc
      
    
    </summary>
    
    
      <category term="Artificial Inteligence" scheme="https://zhangruochi.com/categories/Artificial-Inteligence/"/>
    
      <category term="Deep Learning" scheme="https://zhangruochi.com/categories/Artificial-Inteligence/Deep-Learning/"/>
    
      <category term="Development" scheme="https://zhangruochi.com/categories/Development/"/>
    
    
      <category term="Tensorflow" scheme="https://zhangruochi.com/tags/Tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow Data Service</title>
    <link href="https://zhangruochi.com/TensorFlow-Data-Service/2020/02/17/"/>
    <id>https://zhangruochi.com/TensorFlow-Data-Service/2020/02/17/</id>
    <published>2020-02-18T04:58:32.000Z</published>
    <updated>2020-02-18T08:52:36.514Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Extract-Transform-Load-ETL"><a href="#Extract-Transform-Load-ETL" class="headerlink" title="Extract - Transform - Load (ETL)"></a>Extract - Transform - Load (ETL)</h2><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="ETL.png" width="80%" height="80%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">ETL Pipeline</div></center><p>First, to perform the Extract process we use tfts.load. This handles everything from downloading the raw data to parsing and splitting it, giving us a dataset. Next, we perform the Transform process. In this simple example, our transform process will just consist of shuffling the dataset. Finally, we Load one record by using the take(1) method. In this case, each record consists of an image and its corresponding label. After loading the record we proceed to plot the image and print its corresponding label.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EXTRACT</span></span><br><span class="line">dataset = tfds.load(name=<span class="string">"mnist"</span>, split=<span class="string">"train"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># TRANSFORM</span></span><br><span class="line">dataset.shuffle(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># LOAD</span></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> dataset.take(<span class="number">1</span>):</span><br><span class="line">    image = data[<span class="string">"image"</span>].numpy().squeeze()</span><br><span class="line">    label = data[<span class="string">"label"</span>].numpy()</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">"Label: &#123;&#125;"</span>.format(label))</span><br><span class="line">    plt.imshow(image, cmap=plt.cm.binary)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><h2 id="US3-API-for-TensorFlow-datasets"><a href="#US3-API-for-TensorFlow-datasets" class="headerlink" title="US3 API for TensorFlow datasets."></a>US3 API for TensorFlow datasets.</h2><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="s3.png" width="80%" height="80%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">S3 API</div></center><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> tensorflow_datasets <span class="keyword">as</span> tfds</span><br><span class="line"></span><br><span class="line">print(<span class="string">"\u2022 Using TensorFlow Version:"</span>, tf.__version__)</span><br></pre></td></tr></table></figure><p>Before using the new S3 API, we must first find out whether the MNIST dataset implements the new S3 API. In the cell below we indicate that we want to use version <code>3.*.*</code> of the MNIST dataset.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mnist_builder = tfds.builder(<span class="string">"mnist:3.*.*"</span>)</span><br><span class="line"></span><br><span class="line">print(mnist_builder.version.implements(tfds.core.Experiment.S3))</span><br></pre></td></tr></table></figure><p>We can see that the code above printed <code>True</code>, which means that version <code>3.*.*</code> of the MNIST dataset supports the new S3 API.</p><p>Now, let’s see how we can use the S3 API to download the MNIST dataset and specify the splits we want use. In the code below we download the <code>train</code> and <code>test</code> splits of the MNIST dataset and then we print their size. We will see that there are 60,000 records in the training set and 10,000 in the test set.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">train_ds, test_ds = tfds.load(<span class="string">'mnist:3.*.*'</span>, split=[<span class="string">'train'</span>, <span class="string">'test'</span>])</span><br><span class="line"></span><br><span class="line">print(len(list(train_ds)))</span><br><span class="line">print(len(list(test_ds)))</span><br></pre></td></tr></table></figure><p>In the S3 API we can use strings to specify the slicing instructions. For example, in the cell below we will merge the training and test sets by passing the string <code>’train+test&#39;</code> to the <code>split</code> argument.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">combined = tfds.load(<span class="string">'mnist:3.*.*'</span>, split=<span class="string">'train+test'</span>)</span><br><span class="line"></span><br><span class="line">print(len(list(combined)))</span><br></pre></td></tr></table></figure><p>We can also use Python style list slicers to specify the data we want. For example, we can specify that we want to take the first 10,000 records of the <code>train</code> split with the string <code>&#39;train[:10000]&#39;</code>, as shown below:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">first10k = tfds.load(<span class="string">'mnist:3.*.*'</span>, split=<span class="string">'train[:10000]'</span>)</span><br><span class="line"></span><br><span class="line">print(len(list(first10k)))</span><br></pre></td></tr></table></figure><p>The S3 API, also allows us to specify the percentage of the data we want to use. For example, we can select the first 20\% of the training set with the string <code>&#39;train[:20%]&#39;</code>, as shown below:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">first20p = tfds.load(<span class="string">'mnist:3.*.*'</span>, split=<span class="string">'train[:20%]'</span>)</span><br><span class="line"></span><br><span class="line">print(len(list(first20p)))</span><br></pre></td></tr></table></figure><p>We can see that <code>first20p</code> contains 12,000 records, which is indeed 20\% the total number of records in the training set. Recall that the training set contains 60,000 records. </p><p>Because the slices are string-based we can use loops, like the ones shown below, to slice up the dataset and make some pretty complex splits. For example, the loops below create 10 complimentary validation and training sets (each loop returns a list with 5 data sets).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">val_ds = tfds.load(<span class="string">'mnist:3.*.*'</span>, split=[<span class="string">'train[&#123;&#125;%:&#123;&#125;%]'</span>.format(k, k+<span class="number">20</span>) <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">100</span>, <span class="number">20</span>)])</span><br><span class="line"></span><br><span class="line">train_ds = tfds.load(<span class="string">'mnist:3.*.*'</span>, split=[<span class="string">'train[:&#123;&#125;%]+train[&#123;&#125;%:]'</span>.format(k, k+<span class="number">20</span>) <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">100</span>, <span class="number">20</span>)])</span><br></pre></td></tr></table></figure><p>The S3 API also allows us to compose new datasets by using pieces from different splits. For example, we can create a new dataset from the first 10\% of the test set and the last 80\% of the training set, as shown below.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">composed_ds = tfds.load(<span class="string">'mnist:3.*.*'</span>, split=<span class="string">'test[:10%]+train[-80%:]'</span>)</span><br><span class="line"></span><br><span class="line">print(len(list(composed_ds)))</span><br></pre></td></tr></table></figure><h1 id="Pipeline-for-Classifing-Structured-Data"><a href="#Pipeline-for-Classifing-Structured-Data" class="headerlink" title="Pipeline for Classifing Structured Data"></a>Pipeline for Classifing Structured Data</h1><h2 id="Import-TensorFlow-and-Other-Libraries"><a href="#Import-TensorFlow-and-Other-Libraries" class="headerlink" title="Import TensorFlow and Other Libraries"></a>Import TensorFlow and Other Libraries</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> layers</span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> feature_column</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> getcwd</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br></pre></td></tr></table></figure><h2 id="Use-Pandas-to-Create-a-Dataframe"><a href="#Use-Pandas-to-Create-a-Dataframe" class="headerlink" title="Use Pandas to Create a Dataframe"></a>Use Pandas to Create a Dataframe</h2><p><a href="https://pandas.pydata.org/" target="_blank" rel="noopener">Pandas</a> is a Python library with many helpful utilities for loading and working with structured data. We will use Pandas to download the dataset and load it into a dataframe.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">filePath = <span class="string">f"<span class="subst">&#123;getcwd()&#125;</span>/../tmp2/heart.csv"</span></span><br><span class="line">dataframe = pd.read_csv(filePath)</span><br><span class="line">dataframe.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>age</th>      <th>sex</th>      <th>cp</th>      <th>trestbps</th>      <th>chol</th>      <th>fbs</th>      <th>restecg</th>      <th>thalach</th>      <th>exang</th>      <th>oldpeak</th>      <th>slope</th>      <th>ca</th>      <th>thal</th>      <th>target</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>63</td>      <td>1</td>      <td>1</td>      <td>145</td>      <td>233</td>      <td>1</td>      <td>2</td>      <td>150</td>      <td>0</td>      <td>2.3</td>      <td>3</td>      <td>0</td>      <td>fixed</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>67</td>      <td>1</td>      <td>4</td>      <td>160</td>      <td>286</td>      <td>0</td>      <td>2</td>      <td>108</td>      <td>1</td>      <td>1.5</td>      <td>2</td>      <td>3</td>      <td>normal</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>67</td>      <td>1</td>      <td>4</td>      <td>120</td>      <td>229</td>      <td>0</td>      <td>2</td>      <td>129</td>      <td>1</td>      <td>2.6</td>      <td>2</td>      <td>2</td>      <td>reversible</td>      <td>0</td>    </tr>    <tr>      <th>3</th>      <td>37</td>      <td>1</td>      <td>3</td>      <td>130</td>      <td>250</td>      <td>0</td>      <td>0</td>      <td>187</td>      <td>0</td>      <td>3.5</td>      <td>3</td>      <td>0</td>      <td>normal</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>41</td>      <td>0</td>      <td>2</td>      <td>130</td>      <td>204</td>      <td>0</td>      <td>2</td>      <td>172</td>      <td>0</td>      <td>1.4</td>      <td>1</td>      <td>0</td>      <td>normal</td>      <td>0</td>    </tr>  </tbody></table></div><h2 id="Split-the-Dataframe-Into-Train-Validation-and-Test-Sets"><a href="#Split-the-Dataframe-Into-Train-Validation-and-Test-Sets" class="headerlink" title="Split the Dataframe Into Train, Validation, and Test Sets"></a>Split the Dataframe Into Train, Validation, and Test Sets</h2><p>The dataset we downloaded was a single CSV file. We will split this into train, validation, and test sets.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">train, test = train_test_split(dataframe, test_size=<span class="number">0.2</span>)</span><br><span class="line">train, val = train_test_split(train, test_size=<span class="number">0.2</span>)</span><br><span class="line">print(len(train), <span class="string">'train examples'</span>)</span><br><span class="line">print(len(val), <span class="string">'validation examples'</span>)</span><br><span class="line">print(len(test), <span class="string">'test examples'</span>)</span><br></pre></td></tr></table></figure><pre><code>193 train examples49 validation examples61 test examples</code></pre><h2 id="Create-an-Input-Pipeline-Using-tf-data"><a href="#Create-an-Input-Pipeline-Using-tf-data" class="headerlink" title="Create an Input Pipeline Using tf.data"></a>Create an Input Pipeline Using <code>tf.data</code></h2><p>Next, we will wrap the dataframes with <a href="https://www.tensorflow.org/guide/datasets" target="_blank" rel="noopener">tf.data</a>. This will enable us  to use feature columns as a bridge to map from the columns in the Pandas dataframe to features used to train the model. If we were working with a very large CSV file (so large that it does not fit into memory), we would use tf.data to read it from disk directly.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EXERCISE: A utility method to create a tf.data dataset from a Pandas Dataframe.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">df_to_dataset</span><span class="params">(dataframe, shuffle=True, batch_size=<span class="number">32</span>)</span>:</span></span><br><span class="line">    dataframe = dataframe.copy()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Use Pandas dataframe's pop method to get the list of targets.</span></span><br><span class="line">    labels = dataframe[<span class="string">"target"</span>].values</span><br><span class="line">    dataframe.drop(<span class="string">"target"</span>, axis = <span class="number">1</span>, inplace = <span class="keyword">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Create a tf.data.Dataset from the dataframe and labels.</span></span><br><span class="line">    ds = tf.data.Dataset.from_tensor_slices((dict(dataframe),labels))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> shuffle:</span><br><span class="line">        <span class="comment"># Shuffle dataset.</span></span><br><span class="line">        ds = ds.shuffle(<span class="number">3</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># Batch dataset with specified batch_size parameter.</span></span><br><span class="line">    ds = ds.batch(batch_size)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ds</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">batch_size = <span class="number">5</span> <span class="comment"># A small batch sized is used for demonstration purposes</span></span><br><span class="line">train_ds = df_to_dataset(train, batch_size=batch_size)</span><br><span class="line">val_ds = df_to_dataset(val, shuffle=<span class="keyword">False</span>, batch_size=batch_size)</span><br><span class="line">test_ds = df_to_dataset(test, shuffle=<span class="keyword">False</span>, batch_size=batch_size)</span><br></pre></td></tr></table></figure><h2 id="Understand-the-Input-Pipeline"><a href="#Understand-the-Input-Pipeline" class="headerlink" title="Understand the Input Pipeline"></a>Understand the Input Pipeline</h2><p>Now that we have created the input pipeline, let’s call it to see the format of the data it returns. We have used a small batch size to keep the output readable.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> feature_batch, label_batch <span class="keyword">in</span> train_ds.take(<span class="number">1</span>):</span><br><span class="line">    print(<span class="string">'Every feature:'</span>, list(feature_batch.keys()))</span><br><span class="line">    print(<span class="string">'A batch of ages:'</span>, feature_batch[<span class="string">'age'</span>])</span><br><span class="line">    print(<span class="string">'A batch of targets:'</span>, label_batch )</span><br></pre></td></tr></table></figure><pre><code>Every feature: [&#39;age&#39;, &#39;sex&#39;, &#39;cp&#39;, &#39;trestbps&#39;, &#39;chol&#39;, &#39;fbs&#39;, &#39;restecg&#39;, &#39;thalach&#39;, &#39;exang&#39;, &#39;oldpeak&#39;, &#39;slope&#39;, &#39;ca&#39;, &#39;thal&#39;]A batch of ages: tf.Tensor([51 63 64 58 57], shape=(5,), dtype=int32)A batch of targets: tf.Tensor([0 1 0 0 0], shape=(5,), dtype=int64)</code></pre><p>We can see that the dataset returns a dictionary of column names (from the dataframe) that map to column values from rows in the dataframe.</p><h2 id="Create-Several-Types-of-Feature-Columns"><a href="#Create-Several-Types-of-Feature-Columns" class="headerlink" title="Create Several Types of Feature Columns"></a>Create Several Types of Feature Columns</h2><p>TensorFlow provides many types of feature columns. In this section, we will create several types of feature columns, and demonstrate how they transform a column from the dataframe.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Try to demonstrate several types of feature columns by getting an example.</span></span><br><span class="line">example_batch = next(iter(train_ds))[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># A utility method to create a feature column and to transform a batch of data.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(feature_column)</span>:</span></span><br><span class="line">    feature_layer = layers.DenseFeatures(feature_column, dtype=<span class="string">'float64'</span>)</span><br><span class="line">    print(feature_layer(example_batch).numpy())</span><br></pre></td></tr></table></figure><h3 id="Numeric-Columns"><a href="#Numeric-Columns" class="headerlink" title="Numeric Columns"></a>Numeric Columns</h3><p>The output of a feature column becomes the input to the model (using the demo function defined above, we will be able to see exactly how each column from the dataframe is transformed). A <a href="https://www.tensorflow.org/api_docs/python/tf/feature_column/numeric_column" target="_blank" rel="noopener">numeric column</a> is the simplest type of column. It is used to represent real valued features. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EXERCISE: Create a numeric feature column out of 'age' and demo it.</span></span><br><span class="line">age = tf.feature_column.numeric_column(<span class="string">"age"</span>)</span><br><span class="line"></span><br><span class="line">demo(age)</span><br></pre></td></tr></table></figure><pre><code>[[51.] [58.] [63.] [64.] [60.]]</code></pre><p>In the heart disease dataset, most columns from the dataframe are numeric.</p><h3 id="Bucketized-Columns"><a href="#Bucketized-Columns" class="headerlink" title="Bucketized Columns"></a>Bucketized Columns</h3><p>Often, you don’t want to feed a number directly into the model, but instead split its value into different categories based on numerical ranges. Consider raw data that represents a person’s age. Instead of representing age as a numeric column, we could split the age into several buckets using a <a href="https://www.tensorflow.org/api_docs/python/tf/feature_column/bucketized_column" target="_blank" rel="noopener">bucketized column</a>. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EXERCISE: Create a bucketized feature column out of 'age' with</span></span><br><span class="line"><span class="comment"># the following boundaries and demo it.</span></span><br><span class="line">boundaries = [<span class="number">18</span>, <span class="number">25</span>, <span class="number">30</span>, <span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>, <span class="number">50</span>, <span class="number">55</span>, <span class="number">60</span>, <span class="number">65</span>]</span><br><span class="line"></span><br><span class="line">age_buckets = tf.feature_column.bucketized_column(age, boundaries = boundaries)</span><br><span class="line"></span><br><span class="line">demo(age_buckets)</span><br></pre></td></tr></table></figure><pre><code>[[0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0.] [0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0.] [0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0.] [0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0.] [0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0.]]</code></pre><p>Notice the one-hot values above describe which age range each row matches.</p><h3 id="Categorical-Columns"><a href="#Categorical-Columns" class="headerlink" title="Categorical Columns"></a>Categorical Columns</h3><p>In this dataset, thal is represented as a string (e.g. ‘fixed’, ‘normal’, or ‘reversible’). We cannot feed strings directly to a model. Instead, we must first map them to numeric values. The categorical vocabulary columns provide a way to represent strings as a one-hot vector (much like you have seen above with age buckets). </p><p><strong>Note</strong>: You will probably see some warning messages when running some of the code cell below. These warnings have to do with software updates and should not cause any errors or prevent your code from running.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EXERCISE: Create a categorical vocabulary column out of the</span></span><br><span class="line"><span class="comment"># above mentioned categories with the key specified as 'thal'.</span></span><br><span class="line">thal = tf.feature_column.categorical_column_with_vocabulary_list(</span><br><span class="line">      <span class="string">'thal'</span>, [<span class="string">'fixed'</span>, <span class="string">'normal'</span>, <span class="string">'reversible'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># EXERCISE: Create an indicator column out of the created categorical column.</span></span><br><span class="line">thal_one_hot = tf.feature_column.indicator_column(thal)</span><br><span class="line"></span><br><span class="line">demo(thal_one_hot)</span><br></pre></td></tr></table></figure><pre><code>[[0. 1. 0.] [0. 1. 0.] [0. 0. 1.] [0. 0. 1.] [0. 1. 0.]]</code></pre><p>The vocabulary can be passed as a list using <a href="https://www.tensorflow.org/api_docs/python/tf/feature_column/categorical_column_with_vocabulary_list" target="_blank" rel="noopener">categorical_column_with_vocabulary_list</a>, or loaded from a file using <a href="https://www.tensorflow.org/api_docs/python/tf/feature_column/categorical_column_with_vocabulary_file" target="_blank" rel="noopener">categorical_column_with_vocabulary_file</a>.</p><h3 id="Embedding-Columns"><a href="#Embedding-Columns" class="headerlink" title="Embedding Columns"></a>Embedding Columns</h3><p>Suppose instead of having just a few possible strings, we have thousands (or more) values per category. For a number of reasons, as the number of categories grow large, it becomes infeasible to train a neural network using one-hot encodings. We can use an embedding column to overcome this limitation. Instead of representing the data as a one-hot vector of many dimensions, an <a href="https://www.tensorflow.org/api_docs/python/tf/feature_column/embedding_column" target="_blank" rel="noopener">embedding column</a> represents that data as a lower-dimensional, dense vector in which each cell can contain any number, not just 0 or 1. You can tune the size of the embedding with the <code>dimension</code> parameter.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EXERCISE: Create an embedding column out of the categorical</span></span><br><span class="line"><span class="comment"># vocabulary you just created (thal). Set the size of the </span></span><br><span class="line"><span class="comment"># embedding to 8, by using the dimension parameter.</span></span><br><span class="line"></span><br><span class="line">thal_embedding = tf.feature_column.embedding_column(thal, dimension=<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">demo(thal_embedding)</span><br></pre></td></tr></table></figure><pre><code>[[-1.4254066e-01 -1.0374661e-01  3.4352791e-01 -3.3996427e-01  -3.2193713e-02 -1.8381193e-01 -1.8051244e-01  3.2638407e-01] [-1.4254066e-01 -1.0374661e-01  3.4352791e-01 -3.3996427e-01  -3.2193713e-02 -1.8381193e-01 -1.8051244e-01  3.2638407e-01] [-6.5549983e-05  2.7680036e-01  4.1849682e-01  5.3418136e-01  -1.6281548e-01  2.5406811e-01  8.8969752e-02  1.8004593e-01] [-6.5549983e-05  2.7680036e-01  4.1849682e-01  5.3418136e-01  -1.6281548e-01  2.5406811e-01  8.8969752e-02  1.8004593e-01] [-1.4254066e-01 -1.0374661e-01  3.4352791e-01 -3.3996427e-01  -3.2193713e-02 -1.8381193e-01 -1.8051244e-01  3.2638407e-01]]</code></pre><h3 id="Hashed-Feature-Columns"><a href="#Hashed-Feature-Columns" class="headerlink" title="Hashed Feature Columns"></a>Hashed Feature Columns</h3><p>Another way to represent a categorical column with a large number of values is to use a <a href="https://www.tensorflow.org/api_docs/python/tf/feature_column/categorical_column_with_hash_bucket" target="_blank" rel="noopener">categorical_column_with_hash_bucket</a>. This feature column calculates a hash value of the input, then selects one of the <code>hash_bucket_size</code> buckets to encode a string. When using this column, you do not need to provide the vocabulary, and you can choose to make the number of hash buckets significantly smaller than the number of actual categories to save space.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EXERCISE: Create a hashed feature column with 'thal' as the key and </span></span><br><span class="line"><span class="comment"># 1000 hash buckets.</span></span><br><span class="line">thal_hashed = tf.feature_column.categorical_column_with_hash_bucket(</span><br><span class="line">      <span class="string">'thal'</span>, hash_bucket_size=<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">demo(feature_column.indicator_column(thal_hashed))</span><br></pre></td></tr></table></figure><pre><code>[[0. 0. 0. ... 0. 0. 0.] [0. 0. 0. ... 0. 0. 0.] [0. 0. 0. ... 0. 0. 0.] [0. 0. 0. ... 0. 0. 0.] [0. 0. 0. ... 0. 0. 0.]]</code></pre><h3 id="Crossed-Feature-Columns"><a href="#Crossed-Feature-Columns" class="headerlink" title="Crossed Feature Columns"></a>Crossed Feature Columns</h3><p>Combining features into a single feature, better known as <a href="https://developers.google.com/machine-learning/glossary/#feature_cross" target="_blank" rel="noopener">feature crosses</a>, enables a model to learn separate weights for each combination of features. Here, we will create a new feature that is the cross of age and thal. Note that <code>crossed_column</code> does not build the full table of all possible combinations (which could be very large). Instead, it is backed by a <code>hashed_column</code>, so you can choose how large the table is.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EXERCISE: Create a crossed column using the bucketized column (age_buckets),</span></span><br><span class="line"><span class="comment"># the categorical vocabulary column (thal) previously created, and 1000 hash buckets.</span></span><br><span class="line">crossed_feature = tf.feature_column.crossed_column([age_buckets, thal], hash_bucket_size=<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">demo(feature_column.indicator_column(crossed_feature))</span><br></pre></td></tr></table></figure><pre><code>[[0. 0. 0. ... 0. 0. 0.] [0. 0. 0. ... 0. 0. 0.] [0. 0. 0. ... 0. 0. 0.] [0. 0. 0. ... 0. 0. 0.] [0. 0. 0. ... 0. 0. 0.]]</code></pre><h2 id="Choose-Which-Columns-to-Use"><a href="#Choose-Which-Columns-to-Use" class="headerlink" title="Choose Which Columns to Use"></a>Choose Which Columns to Use</h2><p>We have seen how to use several types of feature columns. Now we will use them to train a model. The goal of this exercise is to show you the complete code needed to work with feature columns. We have selected a few columns to train our model below arbitrarily.</p><p>If your aim is to build an accurate model, try a larger dataset of your own, and think carefully about which features are the most meaningful to include, and how they should be represented.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataframe.dtypes</span><br></pre></td></tr></table></figure><pre><code>age           int64sex           int64cp            int64trestbps      int64chol          int64fbs           int64restecg       int64thalach       int64exang         int64oldpeak     float64slope         int64ca            int64thal         objecttarget        int64dtype: object</code></pre><p>You can use the above list of column datatypes to map the appropriate feature column to every column in the dataframe.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EXERCISE: Fill in the missing code below</span></span><br><span class="line">feature_columns = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># Numeric Cols.</span></span><br><span class="line"><span class="comment"># Create a list of numeric columns. Use the following list of columns</span></span><br><span class="line"><span class="comment"># that have a numeric datatype: ['age', 'trestbps', 'chol', 'thalach', 'oldpeak', 'slope', 'ca'].</span></span><br><span class="line">numeric_columns = [<span class="string">'age'</span>, <span class="string">'trestbps'</span>, <span class="string">'chol'</span>, <span class="string">'thalach'</span>, <span class="string">'oldpeak'</span>, <span class="string">'slope'</span>, <span class="string">'ca'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> header <span class="keyword">in</span> numeric_columns:</span><br><span class="line">    <span class="comment"># Create a numeric feature column  out of the header.</span></span><br><span class="line">    numeric_feature_column = tf.feature_column.numeric_column(header)</span><br><span class="line">    </span><br><span class="line">    feature_columns.append(numeric_feature_column)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bucketized Cols.</span></span><br><span class="line"><span class="comment"># Create a bucketized feature column out of the age column (numeric column)</span></span><br><span class="line"><span class="comment"># that you've already created. Use the following boundaries:</span></span><br><span class="line"><span class="comment"># [18, 25, 30, 35, 40, 45, 50, 55, 60, 65]</span></span><br><span class="line">age_buckets = tf.feature_column.bucketized_column(age, boundaries = [<span class="number">18</span>, <span class="number">25</span>, <span class="number">30</span>, <span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>, <span class="number">50</span>, <span class="number">55</span>, <span class="number">60</span>, <span class="number">65</span>] )</span><br><span class="line"></span><br><span class="line">feature_columns.append(age_buckets)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Indicator Cols.</span></span><br><span class="line"><span class="comment"># Create a categorical vocabulary column out of the categories</span></span><br><span class="line"><span class="comment"># ['fixed', 'normal', 'reversible'] with the key specified as 'thal'.</span></span><br><span class="line">thal = feature_column.categorical_column_with_vocabulary_list(</span><br><span class="line">      <span class="string">'thal'</span>, [<span class="string">'fixed'</span>, <span class="string">'normal'</span>, <span class="string">'reversible'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create an indicator column out of the created thal categorical column</span></span><br><span class="line">thal_one_hot = feature_column.indicator_column(thal)</span><br><span class="line"></span><br><span class="line">feature_columns.append(thal_one_hot)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Embedding Cols.</span></span><br><span class="line"><span class="comment"># Create an embedding column out of the categorical vocabulary you</span></span><br><span class="line"><span class="comment"># just created (thal). Set the size of the embedding to 8, by using</span></span><br><span class="line"><span class="comment"># the dimension parameter.</span></span><br><span class="line">thal_embedding = tf.feature_column.embedding_column(thal, dimension=<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">feature_columns.append(thal_embedding)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Crossed Cols.</span></span><br><span class="line"><span class="comment"># Create a crossed column using the bucketized column (age_buckets),</span></span><br><span class="line"><span class="comment"># the categorical vocabulary column (thal) previously created, and 1000 hash buckets.</span></span><br><span class="line">crossed_feature = feature_column.crossed_column([age_buckets, thal], hash_bucket_size=<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create an indicator column out of the crossed column created above to one-hot encode it.</span></span><br><span class="line">crossed_feature = feature_column.indicator_column(crossed_feature)</span><br><span class="line"></span><br><span class="line">feature_columns.append(crossed_feature)</span><br></pre></td></tr></table></figure><h3 id="Create-a-Feature-Layer"><a href="#Create-a-Feature-Layer" class="headerlink" title="Create a Feature Layer"></a>Create a Feature Layer</h3><p>Now that we have defined our feature columns, we will use a <a href="https://www.tensorflow.org/versions/r2.0/api_docs/python/tf/keras/layers/DenseFeatures" target="_blank" rel="noopener">DenseFeatures</a> layer to input them to our Keras model.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EXERCISE: Create a Keras DenseFeatures layer and pass the feature_columns you just created.</span></span><br><span class="line">feature_layer = tf.keras.layers.DenseFeatures(feature_columns)</span><br></pre></td></tr></table></figure><p>Earlier, we used a small batch size to demonstrate how feature columns worked. We create a new input pipeline with a larger batch size.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">batch_size = <span class="number">32</span></span><br><span class="line">train_ds = df_to_dataset(train, batch_size=batch_size)</span><br><span class="line">val_ds = df_to_dataset(val, shuffle=<span class="keyword">False</span>, batch_size=batch_size)</span><br><span class="line">test_ds = df_to_dataset(test, shuffle=<span class="keyword">False</span>, batch_size=batch_size)</span><br></pre></td></tr></table></figure><h2 id="Create-Compile-and-Train-the-Model"><a href="#Create-Compile-and-Train-the-Model" class="headerlink" title="Create, Compile, and Train the Model"></a>Create, Compile, and Train the Model</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">model = tf.keras.Sequential([</span><br><span class="line">        feature_layer,</span><br><span class="line">        layers.Dense(<span class="number">128</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">        layers.Dense(<span class="number">128</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">        layers.Dense(<span class="number">1</span>, activation=<span class="string">'sigmoid'</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">model.compile(optimizer=<span class="string">'adam'</span>,</span><br><span class="line">              loss=<span class="string">'binary_crossentropy'</span>,</span><br><span class="line">              metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line"></span><br><span class="line">model.fit(train_ds,</span><br><span class="line">          validation_data=val_ds,</span><br><span class="line">          epochs=<span class="number">100</span>)</span><br></pre></td></tr></table></figure><pre><code>......7/7 [==============================] - 0s 45ms/step - loss: 0.2225 - accuracy: 0.8912 - val_loss: 0.6998 - val_accuracy: 0.6939Epoch 98/1007/7 [==============================] - 0s 55ms/step - loss: 0.2089 - accuracy: 0.9067 - val_loss: 0.6846 - val_accuracy: 0.7143Epoch 99/1007/7 [==============================] - 0s 44ms/step - loss: 0.2043 - accuracy: 0.8964 - val_loss: 0.7292 - val_accuracy: 0.7347Epoch 100/1007/7 [==============================] - 0s 55ms/step - loss: 0.2008 - accuracy: 0.9016 - val_loss: 0.7064 - val_accuracy: 0.7143&lt;tensorflow.python.keras.callbacks.History at 0x7f33184937b8&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">loss, accuracy = model.evaluate(test_ds)</span><br><span class="line">print(<span class="string">"Accuracy"</span>, accuracy)</span><br></pre></td></tr></table></figure><pre><code>2/2 [==============================] - 1s 329ms/step - loss: 0.5511 - accuracy: 0.8197Accuracy 0.8196721</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Extract-Transform-Load-ETL&quot;&gt;&lt;a href=&quot;#Extract-Transform-Load-ETL&quot; class=&quot;headerlink&quot; title=&quot;Extract - Transform - Load (ETL)&quot;&gt;&lt;/a&gt;Ex
      
    
    </summary>
    
    
      <category term="Artificial Inteligence" scheme="https://zhangruochi.com/categories/Artificial-Inteligence/"/>
    
      <category term="Deep Learning" scheme="https://zhangruochi.com/categories/Artificial-Inteligence/Deep-Learning/"/>
    
    
      <category term="Tensorflow" scheme="https://zhangruochi.com/tags/Tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>Use Tensorflow Lite to do Inference on Raspberry Pi</title>
    <link href="https://zhangruochi.com/Use-Tensorflow-Lite-to-do-Inference-on-Raspberry-Pi/2020/02/17/"/>
    <id>https://zhangruochi.com/Use-Tensorflow-Lite-to-do-Inference-on-Raspberry-Pi/2020/02/17/</id>
    <published>2020-02-18T01:30:15.000Z</published>
    <updated>2020-02-18T04:59:19.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Image-Classification-in-Raspberry-Pi"><a href="#Image-Classification-in-Raspberry-Pi" class="headerlink" title="Image Classification in Raspberry Pi"></a>Image Classification in Raspberry Pi</h1><h2 id="Building-TensorFlow-Lite"><a href="#Building-TensorFlow-Lite" class="headerlink" title="Building TensorFlow Lite"></a>Building TensorFlow Lite</h2><h3 id="Cross-Compile"><a href="#Cross-Compile" class="headerlink" title="Cross Compile"></a>Cross Compile</h3><p>We recommend cross-compiling the TensorFlow Raspbian package. Cross-compilation is using a different platform to build the package than deploy to. Instead of using the Raspberry Pi’s limited RAM and comparatively slow processor, it’s easier to build TensorFlow on a more powerful host machine running Linux, macOS, or Windows. You can see detailed instructions <a href="https://www.tensorflow.org/install/source_rpi" target="_blank" rel="noopener">here</a>.</p><h2 id="Install-just-the-TensorFlow-Lite-interpreter"><a href="#Install-just-the-TensorFlow-Lite-interpreter" class="headerlink" title="Install just the TensorFlow Lite interpreter"></a>Install just the TensorFlow Lite interpreter</h2><p>To quickly start executing TensorFlow Lite models with Python, you can install just the TensorFlow Lite interpreter, instead of all TensorFlow packages.</p><p>This interpreter-only package is a fraction the size of the full TensorFlow package and includes the bare minimum code required to run inferences with TensorFlow Lite—it includes only the <code>tf.lite.Interpreter</code> Python class. This small package is ideal when all you want to do is execute .tflite models and avoid wasting disk space with the large TensorFlow library.</p><h3 id="Install-from-pip"><a href="#Install-from-pip" class="headerlink" title="Install from pip"></a>Install from pip</h3><p>To install just the interpreter, download the appropriate Python wheel for your system from the following <a href="https://www.tensorflow.org/lite/guide/python" target="_blank" rel="noopener">link</a>, and then install it with the <code>pip install</code> command.</p><p>For example, if you’re setting up a Raspberry Pi Model B (using Raspbian Stretch, which has Python 3.5), install the Python wheel as follows (after you click to download the <code>.whl</code> file in the provided link):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install tflite_runtime-1.14.0-cp35-cp35m-linux_armv7l.whl</span><br></pre></td></tr></table></figure><h3 id="Running-inference"><a href="#Running-inference" class="headerlink" title="Running inference"></a>Running inference</h3><p>So instead of importing Interpreter from the tensorflow module, you need to import it from tflite_runtime.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from tflite_runtime.interpreter import Interpreter</span><br></pre></td></tr></table></figure></p><h2 id="Additional-notes"><a href="#Additional-notes" class="headerlink" title="Additional notes"></a>Additional notes</h2><p>In case you have built TensorFlow from source, you need to import the Interpreter as follows:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from tensorflow.lite.python.interpreter import Interpreter</span><br></pre></td></tr></table></figure></p><h2 id="Inference-on-Pi"><a href="#Inference-on-Pi" class="headerlink" title="Inference on Pi"></a>Inference on Pi</h2><p>To get started, download the pretrained model along with its label file.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://storage.googleapis.com/download.tensorflow.org/models/tflite/mobilenet_v1_1.0_224_quant_and_labels.zip</span><br><span class="line">unzip mobilenet_v1_1.0_224_quant_and_labels</span><br></pre></td></tr></table></figure><h3 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h3><p>To install the Python dependencies, run:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install numpy</span><br><span class="line">pip install Pillow</span><br></pre></td></tr></table></figure><p>Next, to run the code on Raspberry Pi, use <code>classify.py</code> as follows:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 classify.py --filename dog.jpg --model_path mobilenet_v1_1.0_224_quant.tflite --label_path labels_mobilenet_quant_v1_224.txt</span><br></pre></td></tr></table></figure><blockquote><p>classify.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tflite_runtime.interpreter <span class="keyword">import</span> Interpreter</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">'Image Classification'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--filename'</span>, type=str, help=<span class="string">'Specify the filename'</span>, required=<span class="keyword">True</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--model_path'</span>, type=str, help=<span class="string">'Specify the model path'</span>, required=<span class="keyword">True</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--label_path'</span>, type=str, help=<span class="string">'Specify the label map'</span>, required=<span class="keyword">True</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--top_k'</span>, type=int, help=<span class="string">'How many top results'</span>, default=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">filename = args.filename</span><br><span class="line">model_path = args.model_path </span><br><span class="line">label_path = args.label_path </span><br><span class="line">top_k_results = args.top_k</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(label_path, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    labels = list(map(str.strip, f.readlines()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load TFLite model and allocate tensors</span></span><br><span class="line">interpreter = Interpreter(model_path=model_path)</span><br><span class="line">interpreter.allocate_tensors()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get input and output tensors.</span></span><br><span class="line">input_details = interpreter.get_input_details()</span><br><span class="line">output_details = interpreter.get_output_details()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Read image</span></span><br><span class="line">img = Image.open(filename).convert(<span class="string">'RGB'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get input size</span></span><br><span class="line">input_shape = input_details[<span class="number">0</span>][<span class="string">'shape'</span>]</span><br><span class="line">size = input_shape[:<span class="number">2</span>] <span class="keyword">if</span> len(input_shape) == <span class="number">3</span> <span class="keyword">else</span> input_shape[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Preprocess image</span></span><br><span class="line">img = img.resize(size)</span><br><span class="line">img = np.array(img)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add a batch dimension</span></span><br><span class="line">input_data = np.expand_dims(img, axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Point the data to be used for testing and run the interpreter</span></span><br><span class="line">interpreter.set_tensor(input_details[<span class="number">0</span>][<span class="string">'index'</span>], input_data)</span><br><span class="line">interpreter.invoke()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Obtain results and map them to the classes</span></span><br><span class="line">predictions = interpreter.get_tensor(output_details[<span class="number">0</span>][<span class="string">'index'</span>])[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get indices of the top k results</span></span><br><span class="line">top_k_indices = np.argsort(predictions)[::<span class="number">-1</span>][:top_k_results]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(top_k_results):</span><br><span class="line">    print(labels[top_k_indices[i]], predictions[top_k_indices[i]] / <span class="number">255.0</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Image-Classification-in-Raspberry-Pi&quot;&gt;&lt;a href=&quot;#Image-Classification-in-Raspberry-Pi&quot; class=&quot;headerlink&quot; title=&quot;Image Classification
      
    
    </summary>
    
    
      <category term="Artificial Inteligence" scheme="https://zhangruochi.com/categories/Artificial-Inteligence/"/>
    
      <category term="Deep Learning" scheme="https://zhangruochi.com/categories/Artificial-Inteligence/Deep-Learning/"/>
    
      <category term="Development" scheme="https://zhangruochi.com/categories/Development/"/>
    
    
      <category term="Project" scheme="https://zhangruochi.com/tags/Project/"/>
    
      <category term="Tensorflow" scheme="https://zhangruochi.com/tags/Tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>Tensorflow Lite: Model Converter</title>
    <link href="https://zhangruochi.com/Tensorflow-Lite-Model-Converter/2020/02/16/"/>
    <id>https://zhangruochi.com/Tensorflow-Lite-Model-Converter/2020/02/16/</id>
    <published>2020-02-16T09:39:52.000Z</published>
    <updated>2020-02-16T10:00:31.596Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Copyright-2018-The-TensorFlow-Authors"><a href="#Copyright-2018-The-TensorFlow-Authors" class="headerlink" title="Copyright 2018 The TensorFlow Authors."></a>Copyright 2018 The TensorFlow Authors.</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ATTENTION: Please do not alter any of the provided code in the exercise. Only add your own code where indicated</span></span><br><span class="line"><span class="comment"># ATTENTION: Please do not add or remove any cells in the exercise. The grader will check specific cells based on the cell position.</span></span><br><span class="line"><span class="comment"># ATTENTION: Please use the provided epoch values when training.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"># you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"># You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># https://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"># distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"># See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"># limitations under the License.</span></span><br></pre></td></tr></table></figure><h1 id="Train-Your-Own-Model-and-Convert-It-to-TFLite"><a href="#Train-Your-Own-Model-and-Convert-It-to-TFLite" class="headerlink" title="Train Your Own Model and Convert It to TFLite"></a>Train Your Own Model and Convert It to TFLite</h1><p>This notebook uses the <a href="https://github.com/zalandoresearch/fashion-mnist" target="_blank" rel="noopener">Fashion MNIST</a> dataset which contains 70,000 grayscale images in 10 categories. The images show individual articles of clothing at low resolution (28 by 28 pixels), as seen here:</p><table>  <tr><td>    <img src="https://tensorflow.org/images/fashion-mnist-sprite.png" alt="Fashion MNIST sprite" width="600">  </td></tr>  <tr><td align="center">    <b>Figure 1.</b> <a href="https://github.com/zalandoresearch/fashion-mnist" target="_blank" rel="noopener">Fashion-MNIST samples</a> (by Zalando, MIT License).<br>&nbsp;  </td></tr></table><p>Fashion MNIST is intended as a drop-in replacement for the classic <a href="http://yann.lecun.com/exdb/mnist/" target="_blank" rel="noopener">MNIST</a> dataset—often used as the “Hello, World” of machine learning programs for computer vision. The MNIST dataset contains images of handwritten digits (0, 1, 2, etc.) in a format identical to that of the articles of clothing we’ll use here.</p><p>This uses Fashion MNIST for variety, and because it’s a slightly more challenging problem than regular MNIST. Both datasets are relatively small and are used to verify that an algorithm works as expected. They’re good starting points to test and debug code.</p><p>We will use 60,000 images to train the network and 10,000 images to evaluate how accurately the network learned to classify images. You can access the Fashion MNIST directly from TensorFlow. Import and load the Fashion MNIST data directly from TensorFlow:</p><h1 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TensorFlow</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment"># TensorFlow Datsets</span></span><br><span class="line"><span class="keyword">import</span> tensorflow_datasets <span class="keyword">as</span> tfds</span><br><span class="line">tfds.disable_progress_bar()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Helper Libraries</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pathlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> getcwd</span><br><span class="line"></span><br><span class="line">print(<span class="string">'\u2022 Using TensorFlow Version:'</span>, tf.__version__)</span><br><span class="line">print(<span class="string">'\u2022 GPU Device Found.'</span> <span class="keyword">if</span> tf.test.is_gpu_available() <span class="keyword">else</span> <span class="string">'\u2022 GPU Device Not Found. Running on CPU'</span>)</span><br></pre></td></tr></table></figure><pre><code>• Using TensorFlow Version: 2.0.0• GPU Device Found.</code></pre><h1 id="Download-Fashion-MNIST-Dataset"><a href="#Download-Fashion-MNIST-Dataset" class="headerlink" title="Download Fashion MNIST Dataset"></a>Download Fashion MNIST Dataset</h1><p>We will use TensorFlow Datasets to load the Fashion MNIST dataset. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">splits = tfds.Split.ALL.subsplit(weighted=(<span class="number">80</span>, <span class="number">10</span>, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">filePath = <span class="string">f"<span class="subst">&#123;getcwd()&#125;</span>/../tmp2/"</span></span><br><span class="line">splits, info = tfds.load(<span class="string">'fashion_mnist'</span>, with_info=<span class="keyword">True</span>, as_supervised=<span class="keyword">True</span>, split=splits, data_dir=filePath)</span><br><span class="line"></span><br><span class="line">(train_examples, validation_examples, test_examples) = splits</span><br><span class="line"></span><br><span class="line">num_examples = info.splits[<span class="string">'train'</span>].num_examples</span><br><span class="line">num_classes = info.features[<span class="string">'label'</span>].num_classes</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sample = next(iter(train_examples))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sample[<span class="number">0</span>].shape</span><br></pre></td></tr></table></figure><pre><code>TensorShape([28, 28, 1])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sample[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><pre><code>&lt;tf.Tensor: id=490, shape=(), dtype=int64, numpy=6&gt;</code></pre><p>The class names are not included with the dataset, so we will specify them here.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class_names = [<span class="string">'T-shirt_top'</span>, <span class="string">'Trouser'</span>, <span class="string">'Pullover'</span>, <span class="string">'Dress'</span>, <span class="string">'Coat'</span>,</span><br><span class="line">               <span class="string">'Sandal'</span>, <span class="string">'Shirt'</span>, <span class="string">'Sneaker'</span>, <span class="string">'Bag'</span>, <span class="string">'Ankle boot'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Create a labels.txt file with the class names</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'labels.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">'\n'</span>.join(class_names))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The images in the dataset are 28 by 28 pixels.</span></span><br><span class="line">IMG_SIZE = <span class="number">28</span></span><br></pre></td></tr></table></figure><h1 id="Preprocessing-Data"><a href="#Preprocessing-Data" class="headerlink" title="Preprocessing Data"></a>Preprocessing Data</h1><h2 id="Preprocess"><a href="#Preprocess" class="headerlink" title="Preprocess"></a>Preprocess</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EXERCISE: Write a function to normalize the images.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">format_example</span><span class="params">(image, label)</span>:</span></span><br><span class="line">    <span class="comment"># Cast image to float32</span></span><br><span class="line">    image = tf.cast(image, tf.float32)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># Normalize the image in the range [0, 1]</span></span><br><span class="line">    image = image / <span class="number">255.0</span></span><br><span class="line">    </span><br><span class="line">    label = tf.one_hot(label, num_classes)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> image, label</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Specify the batch size</span></span><br><span class="line">BATCH_SIZE = <span class="number">256</span></span><br></pre></td></tr></table></figure><h2 id="Create-Datasets-From-Images-and-Labels"><a href="#Create-Datasets-From-Images-and-Labels" class="headerlink" title="Create Datasets From Images and Labels"></a>Create Datasets From Images and Labels</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Create Datasets</span></span><br><span class="line">train_batches = train_examples.cache().shuffle(num_examples//<span class="number">4</span>).batch(BATCH_SIZE).map(format_example).prefetch(<span class="number">1</span>)</span><br><span class="line">validation_batches = validation_examples.cache().batch(BATCH_SIZE).map(format_example)</span><br><span class="line">test_batches = test_examples.map(format_example).batch(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">batch_sample = next(iter(train_batches))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.squeeze(batch_sample[<span class="number">0</span>][<span class="number">0</span>]).numpy()</span><br></pre></td></tr></table></figure><pre><code>array([[0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.16078432, 0.47843137, 0.3019608 ,        0.10588235, 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        ],       [0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.46666667, 0.8509804 , 0.6666667 ,        0.63529414, 0.11372549, 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        ],       [0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.13333334, 0.74509805, 0.98039216, 0.8117647 , 0.6156863 ,        0.62352943, 0.87058824, 0.40392157, 0.01568628, 0.        ,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        ],       [0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.4509804 , 0.99215686, 0.87058824, 0.7019608 , 0.57254905,        0.6666667 , 0.56078434, 0.49411765, 0.47058824, 0.11372549,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        ],       [0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.3372549 , 0.8666667 , 0.76862746, 0.7019608 , 0.6901961 ,        0.57254905, 0.33333334, 0.49411765, 0.6039216 , 0.24705882,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        ],       [0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.40392157, 0.78431374, 0.65882355, 0.7137255 , 0.58431375,        0.39215687, 0.29411766, 0.78431374, 0.39215687, 0.        ,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        ],       [0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.6039216 , 0.8       , 0.73333335, 0.78431374, 0.49019608,        0.3137255 , 0.38039216, 0.17254902, 0.        , 0.        ,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        ],       [0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.26666668, 0.9019608 , 0.8117647 , 0.8392157 , 0.49019608,        0.38039216, 0.37254903, 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        ],       [0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.7058824 , 0.58431375, 0.49019608, 0.4       ,        0.4509804 , 0.23529412, 0.        , 0.00392157, 0.00392157,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        ],       [0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.3137255 , 0.7176471 , 0.42745098, 0.42352942, 0.38039216,        0.45882353, 0.15686275, 0.        , 0.        , 0.01176471,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        ],       [0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.62352943, 0.7372549 , 0.44705883, 0.40392157, 0.38039216,        0.44705883, 0.23921569, 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        ],       [0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.85882354, 0.78039217, 0.44705883, 0.4117647 , 0.4       ,        0.4117647 , 0.4117647 , 0.03529412, 0.        , 0.00392157,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        ],       [0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.67058825, 0.8666667 , 0.54509807, 0.48235294, 0.43529412,        0.4117647 , 0.4       , 0.1254902 , 0.        , 0.00392157,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        ],       [0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.37254903, 0.9137255 , 0.6039216 , 0.54509807, 0.5058824 ,        0.53333336, 0.5372549 , 0.11372549, 0.        , 0.00392157,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        ],       [0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.4       , 0.89411765, 0.5254902 , 0.54509807, 0.5176471 ,        0.57254905, 0.65882355, 0.16078432, 0.        , 0.        ,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        ],       [0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.53333336, 0.8901961 , 0.5254902 , 0.54509807, 0.5176471 ,        0.57254905, 0.56078434, 0.16078432, 0.        , 0.        ,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        ],       [0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.64705884, 0.8784314 , 0.49411765, 0.56078434, 0.48235294,        0.6039216 , 0.6156863 , 0.14509805, 0.        , 0.00392157,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        ],       [0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.8156863 , 0.8784314 , 0.5058824 , 0.6156863 , 0.48235294,        0.6039216 , 0.6039216 , 0.16078432, 0.        , 0.00392157,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        ],       [0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.9372549 , 0.84705883, 0.49411765, 0.6784314 , 0.45882353,        0.68235296, 0.627451  , 0.21176471, 0.        , 0.00392157,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        ],       [0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.95686275, 0.8392157 , 0.49411765, 0.7176471 , 0.47058824,        0.68235296, 0.6156863 , 0.23529412, 0.        , 0.00392157,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        ],       [0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        , 0.        , 0.06666667,        0.9019608 , 0.8392157 , 0.47058824, 0.7490196 , 0.49019608,        0.75686276, 0.6039216 , 0.27058825, 0.        , 0.        ,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        ],       [0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        , 0.        , 0.14509805,        0.8352941 , 0.8784314 , 0.46666667, 0.78039217, 0.54901963,        0.78039217, 0.57254905, 0.30588236, 0.        , 0.        ,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        ],       [0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        , 0.        , 0.22352941,        0.8235294 , 0.99215686, 0.47058824, 0.8       , 0.58431375,        0.7921569 , 0.54901963, 0.34901962, 0.        , 0.        ,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        ],       [0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        , 0.        , 0.28235295,        0.75686276, 1.        , 0.48235294, 0.76862746, 0.6156863 ,        0.7921569 , 0.5568628 , 0.36078432, 0.        , 0.        ,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        ],       [0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        , 0.        , 0.36862746,        0.73333335, 0.8901961 , 0.5058824 , 0.7254902 , 0.68235296,        0.77254903, 0.54509807, 0.4117647 , 0.        , 0.        ,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        ],       [0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        , 0.        , 0.49019608,        0.6901961 , 0.90588236, 0.5372549 , 0.6392157 , 0.7058824 ,        0.85882354, 0.56078434, 0.42745098, 0.        , 0.        ,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        ],       [0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        , 0.        , 0.627451  ,        0.78039217, 0.9137255 , 0.827451  , 0.6509804 , 0.91764706,        0.69411767, 0.6       , 0.48235294, 0.        , 0.        ,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        ],       [0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.04705882, 0.34901962, 0.24705882, 0.11764706,        0.18431373, 0.77254903, 0.29411766, 0.        , 0.        ,        0.        , 0.        , 0.        , 0.        , 0.        ,        0.        , 0.        , 0.        ]], dtype=float32)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">batch_sample[<span class="number">1</span>][<span class="number">0</span>].numpy().argmax()</span><br></pre></td></tr></table></figure><pre><code>3</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_batch</span><span class="params">(x,y,shape = None)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    input: </span></span><br><span class="line"><span class="string">        x(Tensor[num_images, rows, columns]): images tensor</span></span><br><span class="line"><span class="string">        y(array): labels</span></span><br><span class="line"><span class="string">        shape(tuple): (rows,col) </span></span><br><span class="line"><span class="string">    output:</span></span><br><span class="line"><span class="string">        grid of smaple images</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> shape:</span><br><span class="line">        shape = (int(x.shape[<span class="number">0</span>]**<span class="number">0.5</span>), int(x.shape[<span class="number">0</span>]**<span class="number">0.5</span>))</span><br><span class="line"></span><br><span class="line">    fig, axs = plt.subplots(nrows= shape[<span class="number">0</span>], ncols=shape[<span class="number">1</span>], figsize = (<span class="number">12</span>,<span class="number">8</span>))</span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> axs:</span><br><span class="line">        <span class="keyword">for</span> ax <span class="keyword">in</span> row:</span><br><span class="line">            ax.imshow(tf.squeeze(x[index]).numpy())</span><br><span class="line">            ax.set_xlabel(class_names[y[index].numpy().argmax()])</span><br><span class="line">            index+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># plt.subplots_adjust(wspace = 0.2, hspace = 0.5) </span></span><br><span class="line">    fig.tight_layout()</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show_batch(batch_sample[<span class="number">0</span>],batch_sample[<span class="number">1</span>], (<span class="number">4</span>,<span class="number">4</span>))</span><br></pre></td></tr></table></figure><p><img src="output_24_0.png" alt="png"></p><h1 id="Building-the-Model"><a href="#Building-the-Model" class="headerlink" title="Building the Model"></a>Building the Model</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Model: &quot;sequential&quot;</span><br><span class="line">_________________________________________________________________</span><br><span class="line">Layer (type)                 Output Shape              Param #   </span><br><span class="line">=================================================================</span><br><span class="line">conv2d (Conv2D)              (None, 26, 26, 16)        160       </span><br><span class="line">_________________________________________________________________</span><br><span class="line">max_pooling2d (MaxPooling2D) (None, 13, 13, 16)        0         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv2d_1 (Conv2D)            (None, 11, 11, 32)        4640      </span><br><span class="line">_________________________________________________________________</span><br><span class="line">flatten (Flatten)            (None, 3872)              0         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense (Dense)                (None, 64)                247872    </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense_1 (Dense)              (None, 10)                650       </span><br><span class="line">=================================================================</span><br><span class="line">Total params: 253,322</span><br><span class="line">Trainable params: 253,322</span><br><span class="line">Non-trainable params: 0</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EXERCISE: Build and compile the model shown in the previous cell.</span></span><br><span class="line"></span><br><span class="line">model = tf.keras.Sequential([</span><br><span class="line">    <span class="comment"># Set the input shape to (28, 28, 1), kernel size=3, filters=16 and use ReLU activation,</span></span><br><span class="line">    tf.keras.layers.Conv2D(input_shape = (<span class="number">28</span>,<span class="number">28</span>,<span class="number">1</span>), kernel_size=<span class="number">3</span>, filters=<span class="number">16</span>,activation = <span class="string">"relu"</span>),</span><br><span class="line">      </span><br><span class="line">    tf.keras.layers.MaxPooling2D(),</span><br><span class="line">      </span><br><span class="line">    <span class="comment"># Set the number of filters to 32, kernel size to 3 and use ReLU activation </span></span><br><span class="line">    tf.keras.layers.Conv2D(filters=<span class="number">32</span>, kernel_size=<span class="number">3</span>, activation=<span class="string">"relu"</span>),</span><br><span class="line">      </span><br><span class="line">    <span class="comment"># Flatten the output layer to 1 dimension</span></span><br><span class="line">    tf.keras.layers.Flatten(),</span><br><span class="line">      </span><br><span class="line">    <span class="comment"># Add a fully connected layer with 64 hidden units and ReLU activation</span></span><br><span class="line">    tf.keras.layers.Dense(units=<span class="number">64</span>, activation=<span class="string">"relu"</span>),</span><br><span class="line">      </span><br><span class="line">    <span class="comment"># Attach a final softmax classification head</span></span><br><span class="line">    tf.keras.layers.Dense(units = num_classes, activation=<span class="string">"softmax"</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the appropriate loss function and use accuracy as your metric</span></span><br><span class="line">model.compile(optimizer=<span class="string">'adam'</span>,</span><br><span class="line">              loss= tf.keras.losses.CategoricalCrossentropy(),</span><br><span class="line">              metrics=[<span class="string">'accuracy'</span>] )</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.summary()</span><br></pre></td></tr></table></figure><pre><code>Model: &quot;sequential_1&quot;_________________________________________________________________Layer (type)                 Output Shape              Param #   =================================================================conv2d_2 (Conv2D)            (None, 26, 26, 16)        160       _________________________________________________________________max_pooling2d_1 (MaxPooling2 (None, 13, 13, 16)        0         _________________________________________________________________conv2d_3 (Conv2D)            (None, 11, 11, 32)        4640      _________________________________________________________________flatten_1 (Flatten)          (None, 3872)              0         _________________________________________________________________dense_2 (Dense)              (None, 64)                247872    _________________________________________________________________dense_3 (Dense)              (None, 10)                650       =================================================================Total params: 253,322Trainable params: 253,322Non-trainable params: 0_________________________________________________________________</code></pre><h2 id="Train"><a href="#Train" class="headerlink" title="Train"></a>Train</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">history = model.fit(train_batches, epochs=<span class="number">10</span>, validation_data=validation_batches)</span><br></pre></td></tr></table></figure><pre><code>Epoch 1/10219/219 [==============================] - 148s 675ms/step - loss: 0.5912 - accuracy: 0.7919 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00Epoch 2/10219/219 [==============================] - 4s 20ms/step - loss: 0.3837 - accuracy: 0.8648 - val_loss: 0.3390 - val_accuracy: 0.8796Epoch 3/10219/219 [==============================] - 4s 20ms/step - loss: 0.3319 - accuracy: 0.8819 - val_loss: 0.3046 - val_accuracy: 0.8914Epoch 4/10219/219 [==============================] - 4s 20ms/step - loss: 0.3014 - accuracy: 0.8925 - val_loss: 0.2903 - val_accuracy: 0.8957Epoch 5/10219/219 [==============================] - 4s 20ms/step - loss: 0.2805 - accuracy: 0.8993 - val_loss: 0.2841 - val_accuracy: 0.9011Epoch 6/10219/219 [==============================] - 4s 20ms/step - loss: 0.2602 - accuracy: 0.9054 - val_loss: 0.2777 - val_accuracy: 0.9009Epoch 7/10219/219 [==============================] - 4s 20ms/step - loss: 0.2477 - accuracy: 0.9101 - val_loss: 0.2548 - val_accuracy: 0.9091Epoch 8/10219/219 [==============================] - 4s 20ms/step - loss: 0.2351 - accuracy: 0.9144 - val_loss: 0.2703 - val_accuracy: 0.9000Epoch 9/10219/219 [==============================] - 4s 20ms/step - loss: 0.2209 - accuracy: 0.9198 - val_loss: 0.2462 - val_accuracy: 0.9126Epoch 10/10219/219 [==============================] - 4s 20ms/step - loss: 0.2108 - accuracy: 0.9243 - val_loss: 0.2566 - val_accuracy: 0.9089</code></pre><h1 id="Exporting-to-TFLite"><a href="#Exporting-to-TFLite" class="headerlink" title="Exporting to TFLite"></a>Exporting to TFLite</h1><p>You will now save the model to TFLite. We should note, that you will probably see some warning messages when running the code below. These warnings have to do with software updates and should not cause any errors or prevent your code from running. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EXERCISE: Use the tf.saved_model API to save your model in the SavedModel format. </span></span><br><span class="line">export_dir = <span class="string">'saved_model/1'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># YOUR CODE HERE</span></span><br><span class="line">tf.saved_model.save(model, export_dir)</span><br></pre></td></tr></table></figure><pre><code>WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow_core/python/ops/resource_variable_ops.py:1781: calling BaseResourceVariable.__init__ (from tensorflow.python.ops.resource_variable_ops) with constraint is deprecated and will be removed in a future version.Instructions for updating:If using Keras pass *_constraint arguments to layers.WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow_core/python/ops/resource_variable_ops.py:1781: calling BaseResourceVariable.__init__ (from tensorflow.python.ops.resource_variable_ops) with constraint is deprecated and will be removed in a future version.Instructions for updating:If using Keras pass *_constraint arguments to layers.INFO:tensorflow:Assets written to: saved_model/1/assetsINFO:tensorflow:Assets written to: saved_model/1/assets</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Select mode of optimization</span></span><br><span class="line">mode = <span class="string">"Speed"</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> mode == <span class="string">'Storage'</span>:</span><br><span class="line">    optimization = tf.lite.Optimize.OPTIMIZE_FOR_SIZE</span><br><span class="line"><span class="keyword">elif</span> mode == <span class="string">'Speed'</span>:</span><br><span class="line">    optimization = tf.lite.Optimize.OPTIMIZE_FOR_LATENCY</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    optimization = tf.lite.Optimize.DEFAULT</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EXERCISE: Use the TFLiteConverter SavedModel API to initialize the converter</span></span><br><span class="line"></span><br><span class="line">converter = tf.lite.TFLiteConverter.from_saved_model(export_dir)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the optimzations</span></span><br><span class="line">converter.optimizations = [optimization]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Invoke the converter to finally generate the TFLite model</span></span><br><span class="line">tflite_model = converter.convert()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tflite_model_file = pathlib.Path(<span class="string">'./model.tflite'</span>)</span><br><span class="line">tflite_model_file.write_bytes(tflite_model)</span><br></pre></td></tr></table></figure><pre><code>258704</code></pre><h1 id="Test-the-Model-with-TFLite-Interpreter"><a href="#Test-the-Model-with-TFLite-Interpreter" class="headerlink" title="Test the Model with TFLite Interpreter"></a>Test the Model with TFLite Interpreter</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Load TFLite model and allocate tensors.</span></span><br><span class="line">interpreter = tf.lite.Interpreter(model_content=tflite_model)</span><br><span class="line">interpreter.allocate_tensors()</span><br><span class="line"></span><br><span class="line">input_index = interpreter.get_input_details()[<span class="number">0</span>][<span class="string">"index"</span>]</span><br><span class="line">output_index = interpreter.get_output_details()[<span class="number">0</span>][<span class="string">"index"</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gather results for the randomly sampled test images</span></span><br><span class="line">predictions = []</span><br><span class="line">test_labels = []</span><br><span class="line">test_images = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> img, label <span class="keyword">in</span> test_batches.take(<span class="number">50</span>):</span><br><span class="line">    interpreter.set_tensor(input_index, img)</span><br><span class="line">    interpreter.invoke()</span><br><span class="line">    predictions.append(interpreter.get_tensor(output_index))</span><br><span class="line">    test_labels.append(label[<span class="number">0</span>])</span><br><span class="line">    test_images.append(np.array(img))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class_names</span><br></pre></td></tr></table></figure><pre><code>[&#39;T-shirt_top&#39;, &#39;Trouser&#39;, &#39;Pullover&#39;, &#39;Dress&#39;, &#39;Coat&#39;, &#39;Sandal&#39;, &#39;Shirt&#39;, &#39;Sneaker&#39;, &#39;Bag&#39;, &#39;Ankle boot&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Utilities functions for plotting</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_image</span><span class="params">(i, predictions_array, true_label, img)</span>:</span></span><br><span class="line">    predictions_array, true_label, img = predictions_array[i], true_label[i], img[i]</span><br><span class="line">    plt.grid(<span class="keyword">False</span>)</span><br><span class="line">    plt.xticks([])</span><br><span class="line">    plt.yticks([])</span><br><span class="line">    </span><br><span class="line">    img = np.squeeze(img)</span><br><span class="line">    </span><br><span class="line">    plt.imshow(img, cmap=plt.cm.binary)</span><br><span class="line">    </span><br><span class="line">    predicted_label = np.argmax(predictions_array)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#     print(predicted_label)</span></span><br><span class="line"><span class="comment">#     print(true_label.numpy().argmax())</span></span><br><span class="line">    <span class="keyword">if</span> predicted_label == true_label.numpy().argmax():</span><br><span class="line">        color = <span class="string">'green'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        color = <span class="string">'red'</span></span><br><span class="line">        </span><br><span class="line">    plt.xlabel(<span class="string">"&#123;&#125; &#123;:2.0f&#125;% (&#123;&#125;)"</span>.format(class_names[predicted_label],</span><br><span class="line">                                         <span class="number">100</span>*np.max(predictions_array),</span><br><span class="line">                                         class_names[true_label.numpy().argmax()]),</span><br><span class="line">                                         color=color)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_value_array</span><span class="params">(i, predictions_array, true_label)</span>:</span></span><br><span class="line">    predictions_array, true_label = predictions_array[i], true_label[i]</span><br><span class="line">    plt.grid(<span class="keyword">False</span>)</span><br><span class="line">    plt.xticks(list(range(<span class="number">10</span>)))</span><br><span class="line">    plt.yticks([])</span><br><span class="line">    thisplot = plt.bar(range(<span class="number">10</span>), predictions_array[<span class="number">0</span>], color=<span class="string">"#777777"</span>)</span><br><span class="line">    plt.ylim([<span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line">    predicted_label = np.argmax(predictions_array[<span class="number">0</span>])</span><br><span class="line">    </span><br><span class="line">    thisplot[predicted_label].set_color(<span class="string">'red'</span>)</span><br><span class="line">    thisplot[true_label.numpy().argmax()].set_color(<span class="string">'blue'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Visualize the outputs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Select index of image to display. Minimum index value is 1 and max index value is 50. </span></span><br><span class="line">index = <span class="number">49</span> </span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">6</span>,<span class="number">3</span>))</span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">plot_image(index, predictions, test_labels, test_images)</span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">plot_value_array(index, predictions, test_labels)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="output_41_0.png" alt="png"></p><h2 id="Other-Comfiguration-example"><a href="#Other-Comfiguration-example" class="headerlink" title="Other Comfiguration example"></a>Other Comfiguration example</h2><h3 id="Post-Training-Quantization"><a href="#Post-Training-Quantization" class="headerlink" title="Post-Training Quantization"></a>Post-Training Quantization</h3><p>The simplest form of post-training quantization quantizes weights from floating point to 8-bits of precision. This technique is enabled as an option in the TensorFlow Lite converter. At inference, weights are converted from 8-bits of precision to floating point and computed using floating-point kernels. This conversion is done once and cached to reduce latency.</p><p>To further improve latency, hybrid operators dynamically quantize activations to 8-bits and perform computations with 8-bit weights and activations. This optimization provides latencies close to fully fixed-point inference. However, the outputs are still stored using floating point, so that the speedup with hybrid ops is less than a full fixed-point computation.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">converter.optimizations = [tf.lite.Optimize.DEFAULT]</span><br></pre></td></tr></table></figure><h3 id="Post-Training-Integer-Quantization"><a href="#Post-Training-Integer-Quantization" class="headerlink" title="Post-Training Integer Quantization"></a>Post-Training Integer Quantization</h3><p>We can get further latency improvements, reductions in peak memory usage, and access to integer only hardware accelerators by making sure all model math is quantized. To do this, we need to measure the dynamic range of activations and inputs with a representative data set. You can simply create an input data generator and provide it to our converter.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">representative_data_gen</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> input_value, _ <span class="keyword">in</span> test_batches.take(<span class="number">100</span>):</span><br><span class="line">        <span class="keyword">yield</span> [input_value]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">converter.representative_dataset = representative_data_gen</span><br></pre></td></tr></table></figure><p>The resulting model will be fully quantized but still take float input and output for convenience.</p><p>Ops that do not have quantized implementations will automatically be left in floating point. This allows conversion to occur smoothly but may restrict deployment to accelerators that support float. </p><h3 id="Full-Integer-Quantization"><a href="#Full-Integer-Quantization" class="headerlink" title="Full Integer Quantization"></a>Full Integer Quantization</h3><p>To require the converter to only output integer operations, one can specify:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">converter.target_spec.supported_ops = [tf.lite.OpsSet.TFLITE_BUILTINS_INT8]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;Copyright-2018-The-TensorFlow-Authors&quot;&gt;&lt;a href=&quot;#Copyright-2018-The-TensorFlow-Authors&quot; class=&quot;headerlink&quot; title=&quot;Copyright 2018 The
      
    
    </summary>
    
    
      <category term="Artificial Inteligence" scheme="https://zhangruochi.com/categories/Artificial-Inteligence/"/>
    
      <category term="Deep Learning" scheme="https://zhangruochi.com/categories/Artificial-Inteligence/Deep-Learning/"/>
    
      <category term="Development" scheme="https://zhangruochi.com/categories/Development/"/>
    
    
  </entry>
  
  <entry>
    <title>Promise</title>
    <link href="https://zhangruochi.com/Promise/2020/02/13/"/>
    <id>https://zhangruochi.com/Promise/2020/02/13/</id>
    <published>2020-02-13T16:22:12.000Z</published>
    <updated>2020-02-13T17:07:26.743Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What-is-Promise"><a href="#What-is-Promise" class="headerlink" title="What is Promise"></a>What is Promise</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 做一些事情</span></span><br><span class="line">  <span class="comment">// 然后在某些条件下resolve，或者reject</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="comment">/* 条件随便写^_^ */</span>) &#123;</span><br><span class="line">    resolve()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 如果p的状态被resolve了，就进入这里</span></span><br><span class="line">&#125;, () =&gt; &#123;</span><br><span class="line">    <span class="comment">// 如果p的状态被reject</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="构造实例"><a href="#构造实例" class="headerlink" title="构造实例"></a>构造实例</h3><ul><li>构造函数接受一个函数作为参数</li><li>调用构造函数得到实例p的同时，作为参数的函数会立即执行</li><li>参数函数接受两个回调函数参数resolve和reject</li><li>在参数函数被执行的过程中，如果在其内部调用resolve，会将p的状态变成<code>fulfilled</code>，或者调用reject，会将p的状态变成<code>rejected</code>.</li></ul><h3 id="调用-then"><a href="#调用-then" class="headerlink" title="调用.then"></a>调用<code>.then</code></h3><ul><li>调用.then可以为实例p注册两种状态回调函数</li><li>当实例p的状态为fulfilled，会触发第一个函数执行</li><li>当实例p的状态为rejected，则触发第二个函数执行</li><li>then方法返回的是一个新的Promise实例（注意，不是原来那个Promise实例）。因此可以采用链式写法，即then方法后面再调用另一个then方法。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>将异步过程转化成promise对象</li><li>对象有3种状态</li><li>通过<code>.then</code>注册状态的回调</li><li>已完成的状态能触发回调</li></ul><h2 id="How-to-use-Promise"><a href="#How-to-use-Promise" class="headerlink" title="How to use Promise"></a>How to use Promise</h2><h3 id="3种状态"><a href="#3种状态" class="headerlink" title="3种状态"></a>3种状态</h3><p>首先，promise实例有三种状态：</p><ul><li>pending（待定）</li><li>fulfilled（已执行）</li><li>rejected（已拒绝）</li></ul><p>fulfilled和rejected有可以说是已成功和已失败，这两种状态又归为已完成状态</p><h3 id="resolve和reject"><a href="#resolve和reject" class="headerlink" title="resolve和reject"></a><code>resolve</code>和<code>reject</code></h3><p>调用resolve和reject能将分别将promise实例的状态变成fulfilled和rejected，只有状态变成已完成（即fulfilled和rejected之一），才能触发状态的回调</p><h3 id="promise的内容分为构造函数、实例方法和静态方法"><a href="#promise的内容分为构造函数、实例方法和静态方法" class="headerlink" title="promise的内容分为构造函数、实例方法和静态方法"></a>promise的内容分为构造函数、实例方法和静态方法</h3><h4 id="1个构造函数：-new-Promise"><a href="#1个构造函数：-new-Promise" class="headerlink" title="1个构造函数： new Promise"></a>1个构造函数： new Promise</h4><ul><li>new Promise能将一个异步过程转化成promise对象。先有了promise对象，然后才有promise编程方式。</li></ul><h4 id="2个实例方法：-then-和-catch"><a href="#2个实例方法：-then-和-catch" class="headerlink" title="2个实例方法：.then 和 .catch"></a>2个实例方法：.then 和 .catch</h4><ul><li><code>.then</code>用于为promise对象的状态注册回调函数。它会返回一个promise对象，所以可以进行链式调用，也就是.then后面可以继续.then。在注册的状态回调函数中，可以通过<code>return</code>语句改变.then返回的promise对象的状态，以及向后面.then注册的状态回调传递数据；也可以不使用return语句，那样默认就是将返回的promise对象resolve。</li><li><code>.catch</code>用于注册rejected状态的回调函数，同时该回调也是程序出错的回调，即如果前面的程序运行过程中出错，也会进入执行该回调函数。同.then一样，也会返回新的promise对象。</li></ul><h4 id="4个静态方法：Promise-all、Promise-race、Promise-resolve和Promise-reject"><a href="#4个静态方法：Promise-all、Promise-race、Promise-resolve和Promise-reject" class="headerlink" title="4个静态方法：Promise.all、Promise.race、Promise.resolve和Promise.reject"></a>4个静态方法：Promise.all、Promise.race、Promise.resolve和Promise.reject</h4><p>调用Promise.resolve会返回一个状态为fulfilled状态的promise对象，参数会作为数据传递给后面的状态回调函数; Promise.reject与Promise.resolve同理，区别在于返回的promise对象状态为rejected</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> resolve(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"BOOM"</span>)) </span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>((resolve, reject) </span><br><span class="line">    =&gt; reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"BOOM"</span>)));</span><br></pre></td></tr></table></figure><h2 id="Practice"><a href="#Practice" class="headerlink" title="Practice"></a>Practice</h2><blockquote><p>题目：红灯三秒亮一次，绿灯一秒亮一次，黄灯2秒亮一次；如何让三个灯不断交替重复亮灯？</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">red</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'red'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">green</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'green'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">yellow</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'yellow'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> light = <span class="function">(<span class="params">fn, timer</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line"> setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    fn();</span><br><span class="line">    resolve();</span><br><span class="line"> &#125;, timer)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">times</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!times) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  times--</span><br><span class="line">  <span class="built_in">Promise</span>.resolve()</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> light(red, <span class="number">3000</span>))</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> light(green, <span class="number">1000</span>))</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> light(yellow, <span class="number">2000</span>))</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> start(times))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">start(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h2 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h2><h3 id="async"><a href="#async" class="headerlink" title="async"></a>async</h3><p>async关键字的意思很简单，就是函数返回的是一个promise</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">f().then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>async函数会返回一个promise对象，如果function中返回的是一个值，async直接会用<code>Promise.resolve()</code>包裹一下返回。</p><h3 id="await"><a href="#await" class="headerlink" title="await"></a>await</h3><blockquote><p>[return_value] = await expression;</p></blockquote><p>关键词await是等待的意思，那么他在等什么呢？ 等的是一个表达式，那么表达式，可以是一个常量，变量，promise，函数等。</p><p>await操作符等的是一个返回的结果，那么如果是同步的情况，那就直接返回了。 异步的情况下，await会阻塞整一个流程，直到结果返回之后，才会继续下面的代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProvinces</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        setTimeout(resolve, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncFn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">await</span> getProvinces()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello async'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">asyncFn()</span><br></pre></td></tr></table></figure><p>上面代码先定义了一个获取省份数据的getProvinces函数，其中用setTimeout模拟数据请求的异步操作。当我们在asyncFn 函数前面使用关键字 async 就表明该函数内存在异步操作。当遇到 await 关键字时，会等待异步操作完成后再接着执行接下去的代码。所以代码的执行结果为等待1000毫秒之后才会在控制台中打印出 ‘hello async’。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/26523836" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/26523836</a></li><li><a href="https://juejin.im/post/5d9e8539f265da5b8a515e63" target="_blank" rel="noopener">https://juejin.im/post/5d9e8539f265da5b8a515e63</a></li><li><a href="https://juejin.im/post/5c553b71f265da2d8532b351" target="_blank" rel="noopener">https://juejin.im/post/5c553b71f265da2d8532b351</a></li></ul>]]></content>
    
    <summary type="html">
    
      concepts of Promise, Async, Await
    
    </summary>
    
    
      <category term="Programming Language" scheme="https://zhangruochi.com/categories/Programming-Language/"/>
    
      <category term="JavaScript" scheme="https://zhangruochi.com/categories/Programming-Language/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>Introduction to Operating Systems</title>
    <link href="https://zhangruochi.com/Introduction-to-Operating-Systems/2020/02/07/"/>
    <id>https://zhangruochi.com/Introduction-to-Operating-Systems/2020/02/07/</id>
    <published>2020-02-07T05:29:25.000Z</published>
    <updated>2020-02-07T05:43:31.624Z</updated>
    
    <content type="html"><![CDATA[<p>Introduction to Operating Systems</p><ul><li>Topics to be covered in this lesson:<ul><li>What is an OS (operating system)?</li><li>What are key components of an OS?</li><li>Design and implementation considerations of OSs</li></ul></li></ul><h2 id="What-is-an-Operating-System"><a href="#What-is-an-Operating-System" class="headerlink" title="What is an Operating System?"></a>What is an Operating System?</h2><ul><li>An OS is a special piece of software that abstracts and arbitrates the use of a computer system</li><li>An <strong>OS</strong> is like <strong>a toy shop manager</strong> in that an OS:<ul><li>Directs operational resources</li><li>Enforces working policies</li><li>Mitigates difficulty of complex tasks</li></ul></li><li>By definition, an OS is a layer of systems software that:<ul><li>Directly has privileged access to the underlying hardware</li><li>Hides the hardware complexity</li><li>Manages hardware on behalf of one of more applications according to some predefined polices</li><li>In addition, it ensures that applications are isolated and protected from one another</li></ul></li></ul><h2 id="OS-Elements"><a href="#OS-Elements" class="headerlink" title="OS Elements"></a>OS Elements</h2><ul><li>Abstractions:<ul><li>Process, thread, file, socket, memory page</li></ul></li><li>Mechanisms<ul><li>Create, schedule, open, write, allocate</li></ul></li><li>Policies<ul><li>Least recently used (LRU), earliest deadline first (EDF)</li></ul></li></ul><h2 id="Design-Principles"><a href="#Design-Principles" class="headerlink" title="Design Principles"></a>Design Principles</h2><ul><li>Separation of mechanisms to policy:<ul><li>Implement flexible mechanisms to support many policies</li></ul></li><li>Optimize for common case:<ul><li>Where will the OS be used?</li><li>What will the user want to execute on that machine?</li><li>What are the workload requirements?</li></ul></li></ul><h2 id="OS-Protection-Boundary"><a href="#OS-Protection-Boundary" class="headerlink" title="OS Protection Boundary"></a>OS Protection Boundary</h2><ul><li>Generally, applications operate in unprivileged mode (user level) while operating systems operate in privileged mode (kernel level)</li><li>Kernel level software is able to access hardware directly</li><li>User-kernel switch is supported by hardware<ul><li>trap instructions</li><li>system call(open send malloc …)</li><li>signals</li></ul></li></ul><h2 id="Crossing-The-OS-Boundary"><a href="#Crossing-The-OS-Boundary" class="headerlink" title="Crossing The OS Boundary"></a>Crossing The OS Boundary</h2><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="system_call.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">System Call</div></center><ul><li>Applications will need to utilize user-kernel transitions which is accomplished by hardware, this involves a number of instructions and switches locality</li><li>Switching locality will affect hardware cache (transitions are costly)</li><li>Hardware will set _traps_ on illegal instructions and os can check what cause the trap</li><li>Cache <ul><li>Because context switches will swap the data/addresses currently in cache, the performance of applications can benefit or suffer based on how a context switch changes what is in cache at the time they are accessing it.</li><li>A cache would be considered hot (fire) if an application is accessing the cache when it contains the data/addresses it needs.</li><li>Likewise, a cache would be considered cold (ice) if an application is accessing the cache when it does not contain the data/addresses it needs — forcing it to retrieve data/addresses from main memory.</li></ul></li></ul><h2 id="OS-Services"><a href="#OS-Services" class="headerlink" title="OS Services"></a>OS Services</h2><p>An operating system provide applications with access to the underlying hardware by exporting a number of services. Thses services are directly linked to some of the components of the hardware.</p><ul><li>process management</li><li>file management</li><li>device management</li><li>memory management</li><li>storage management</li><li>security management</li></ul><h2 id="Monolithic-OS"><a href="#Monolithic-OS" class="headerlink" title="Monolithic OS"></a>Monolithic OS</h2><ul><li>Pros:<ul><li>Everything included</li><li>Inlining, compile-time optimizations</li></ul></li><li>Cons:<ul><li>Customization, portability, manageability</li><li>Memory footprint</li><li>Performance</li></ul></li></ul><h2 id="Modular-OS"><a href="#Modular-OS" class="headerlink" title="Modular OS"></a>Modular OS</h2><ul><li>Pros:<ul><li>Maintainability</li><li>Smaller footprint</li><li>Less resource needs</li></ul></li><li>Cons:<ul><li>Indirection can impact performance</li><li>Maintenance can still be an issue</li></ul></li></ul><h2 id="Microkernel"><a href="#Microkernel" class="headerlink" title="Microkernel"></a>Microkernel</h2><ul><li>Pros:<ul><li>Size</li><li>Verifiability</li></ul></li><li>Cons:<ul><li>Portability</li><li>Complexity of software development</li><li>Cost of user/kernel crossing</li></ul></li></ul><h2 id="Operating-System-Architecture"><a href="#Operating-System-Architecture" class="headerlink" title="Operating System Architecture"></a>Operating System Architecture</h2><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="linux.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Linux Architecture</div></center><h3 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h3><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="macos.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Macos Architecture</div></center><h2 id="Quiz"><a href="#Quiz" class="headerlink" title="Quiz"></a>Quiz</h2><h4 id="Quiz-1-Operating-Systems-Components"><a href="#Quiz-1-Operating-Systems-Components" class="headerlink" title="Quiz 1: Operating Systems Components"></a>Quiz 1: Operating Systems Components</h4><p>Which of the following are likely components of an operating system?</p><p>A: </p><p>file system (hides hardware complexity), device driver (makes decisions), scheduler (distributes processes).</p><h4 id="Quiz-2-Operating-Systems-Components"><a href="#Quiz-2-Operating-Systems-Components" class="headerlink" title="Quiz 2: Operating Systems Components"></a>Quiz 2: Operating Systems Components</h4><p>For the following options, indicate if they are examples of abstraction or arbitration.</p><p>A: </p><ul><li>Distributing memory between multiple processes (arbitration)</li><li>Supporting different types of speakers (abstraction)</li><li>Interchangeable access of hard disk or SSD (abstraction)</li></ul><h4 id="Quiz-3-System-Calls"><a href="#Quiz-3-System-Calls" class="headerlink" title="# Quiz 3: System Calls"></a># Quiz 3: System Calls</h4><p>On a 64-bit Linux-based OS, which system call is used to:</p><ul><li>Send a signal to a process?</li><li>Set the group identity of a process?</li><li>Mount a file system?</li><li>Read/write system parameters</li></ul><p>A: </p><p>The answers are respectively,</p><ul><li><code>kill</code></li><li><code>setgid</code></li><li><code>mount</code></li><li><code>sysctl</code></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://github.com/stevenxchung/Introduction-to-Operating-Systems" target="_blank" rel="noopener">https://github.com/stevenxchung/Introduction-to-Operating-Systems</a></li></ul>]]></content>
    
    <summary type="html">
    
      This is the course note from Introduction to Operating Systems of Udacity
    
    </summary>
    
    
      <category term="Operating System" scheme="https://zhangruochi.com/categories/Operating-System/"/>
    
    
  </entry>
  
  <entry>
    <title>AI - Search</title>
    <link href="https://zhangruochi.com/AI-Search/2020/02/06/"/>
    <id>https://zhangruochi.com/AI-Search/2020/02/06/</id>
    <published>2020-02-07T01:56:08.000Z</published>
    <updated>2020-02-07T03:40:57.205Z</updated>
    
    <content type="html"><![CDATA[<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="AI.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">AI</div></center><h2 id="Applications"><a href="#Applications" class="headerlink" title="Applications"></a>Applications</h2><h3 id="Route-finding"><a href="#Route-finding" class="headerlink" title="Route finding"></a>Route finding</h3><ul><li>Route finding is perhaps the most canonical example of a search problem. We are given as the input a map, a source point and a destination point. The goal is to output a sequence of actions (e.g., go straight, turn left, or turn right) that will take us from the source to the destination.</li><li>We might evaluate action sequences based on an objective (distance, time, or pleasantness).</li></ul><h3 id="Robot-motion-planning"><a href="#Robot-motion-planning" class="headerlink" title="Robot motion planning"></a>Robot motion planning</h3><ul><li>In robot motion planning, the goal is get a robot to move from one position/pose to another. The desired output trajectory consists of individual actions, each action corresponding to moving or rotating the joints by a small amount.</li><li>Again, we might evaluate action sequences based on various resources like time or energy.</li></ul><h2 id="Search-Problems"><a href="#Search-Problems" class="headerlink" title="Search Problems"></a>Search Problems</h2><ul><li>Recall the modeling-inference-learning paradigm. For reflex-based classifiers, modeling consisted of choos- ing the features and the neural network architecture; inference was trivial forward computation of the output given the input; and learning involved using stochastic gradient descent on the gradient of the loss function, which might involve backpropagation.</li><li>Today, we will focus on the modeling and inference part of search problems. The next lecture will cover learning.</li></ul><h3 id="Definitions"><a href="#Definitions" class="headerlink" title="Definitions"></a>Definitions</h3><ul><li>$S_{start}: staring state$</li><li>Actions(s): possible actions</li><li>Cons(s,a): action cost</li><li>Succ(s,a): successor</li><li>IsEnd(s): reached end state?</li></ul><p>We will build what we will call a <strong>search tree</strong>. The root of the tree is the start state <script type="math/tex">S_{start}</script>, and the leaves are the end states (IsEnd(s) is true). Each edge leaving a node s corresponds to a possible action <script type="math/tex">a \in \text{Actions(s)}</script>  that could be performed in state s. The edge is labeled with the action and its cost, written <code>a : Cost(s,a)</code>. The action leads deterministically to the successor state <code>Succ(s,a)</code>, represented by the child node.</p><p>In summary, each root-to-leaf path represents a possible action sequence, and the sum of the costs of the edges is the cost of that path. The goal is to find the root-to-leaf path that ends in a valid end state with minimum cost.</p><p>Note that in code, we usually do not build the search tree as a concrete data structure. The search tree is used merely to visualize the computation of the search algorithms and study the structure of the search problem.</p><h2 id="Transportation-example"><a href="#Transportation-example" class="headerlink" title="Transportation example"></a>Transportation example</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Street with blocks numbered 1 to n.</span><br><span class="line"></span><br><span class="line">Walking from s to s + 1 takes 1 minute.</span><br><span class="line"></span><br><span class="line">Taking a magic tram from s to 2s takes 2 minutes. </span><br><span class="line"></span><br><span class="line">How to travel from 1 to n in the least time?</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TransportationProblem</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, N)</span>:</span></span><br><span class="line">        <span class="comment"># N = number of blocks</span></span><br><span class="line">        self.N = N</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">startState</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isEnd</span><span class="params">(self, state)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> state == self.N</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">succAndCost</span><span class="params">(self, state)</span>:</span></span><br><span class="line">        <span class="comment"># return list of (action, newState, cost) triples</span></span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">if</span> state+<span class="number">1</span>&lt;=self.N:</span><br><span class="line">            result.append((<span class="string">'walk'</span>, state+<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">if</span> state*<span class="number">2</span>&lt;=self.N:</span><br><span class="line">            result.append((<span class="string">'tram'</span>, state*<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>Now let’s put modeling aside and suppose we are handed a search problem. How do we construct an algorithm for finding a minimum cost path (not necessarily unique)?</p><h2 id="Tree-search"><a href="#Tree-search" class="headerlink" title="Tree search"></a>Tree search</h2><h3 id="Backtracking-search"><a href="#Backtracking-search" class="headerlink" title="Backtracking search"></a>Backtracking search</h3><p>If <code>b</code> actions per state, maximum depth is <code>D</code> actions:</p><ul><li>Memory: $O(D)$ (small)</li><li>Time: $O(b^D)$ (huge) [$2^{50}$ = 1125899906842624]</li></ul><p>We will start with backtracking search, the simplest algorithm which just tries all paths. The algorithm is called recursively on the <code>current state s</code> and the path leading up to that state. If we have reached a goal, then we can update the minimum cost path with the current path. Otherwise, we consider <code>all possible actions a from state s</code>, and recursively search each of the possibilities.</p><p>Graphically, backtracking search performs a depth-first traversal of the search tree. What is the time and memory complexity of this algorithm? To get a simple characterization, assume that the search tree has maximum depth D (each path consists of D actions/edges) and that there are b available actions per state (the branching factor is b). It is easy to see that backtracking search only requires <strong>O(D) memory</strong> (to maintain the stack for the recurrence), which is as good as it gets.</p><p>However, the running time is proportional to the number of nodes in the tree, since the algorithm needs to check each of them. The number of nodes is</p><script type="math/tex; mode=display">1 + b + b^{2} + \cdots + b^{D} = \frac{b^{D+1} - 1}{B-1} = O(b^{D})</script><p>Note that the total number of nodes in the search tree is on the same order as the number of leaves, so the cost is always dominated by the last level.</p><h3 id="Depth-first-search"><a href="#Depth-first-search" class="headerlink" title="Depth-first search"></a>Depth-first search</h3><ul><li>Assume action costs Cost(s, a) = 0.</li><li><strong>Idea</strong>: Backtracking search + stop when find the first end state.</li><li>If b actions per state, maximum depth is D actions:</li><li>Memory: $O(D)$ (small)</li><li>Time: $O(b^D)$ worst case but could be much better if solutions<br>are easy to find.</li></ul><p>Backtracking search will always work (i.e., find a minimum cost path), but there are cases where we can do it faster. But in order to do that, we need some additional assumptions — there is no free lunch. Suppose we make the assumption that all the action costs are zero. In other words, all we care about is finding a valid action sequence that reaches the goal. Any such sequence will have the minimum cost: zero.</p><p>In this case, we can just modify backtracking search to not keep track of costs and then stop searching as soon as we reach a goal. The resulting algorithm is depth-first search (DFS), which should be familiar to you. The worst time and space complexity are of the same order as backtracking search. In particular, if there is no path to an end state, then we have to search the entire tree.</p><h3 id="Breadth-first-search"><a href="#Breadth-first-search" class="headerlink" title="Breadth-first search"></a>Breadth-first search</h3><ul><li>Assume action costs Cost(s, a) = c for some c &gt;= 0.</li><li><strong>Idea</strong>: explore all nodes in order of increasing depth.</li><li>Legend: b actions per state, solution has d actions</li><li>Memory: $O(b^{d})$ (small)</li><li>Time: $O(b^d)$ (better, depends on d, not D).</li></ul><p>Breadth-first search (BFS), which should also be familiar, makes a less stringent assumption, that all the action costs are the same non-negative number. This effectively means that all the paths of a given length have the same cost. BFS maintains a <code>queue</code> of states to be explored. It pops a state off the queue, then pushes its successors back on the queue.</p><h3 id="DFS-with-iterative-deepening"><a href="#DFS-with-iterative-deepening" class="headerlink" title="DFS with iterative deepening"></a>DFS with iterative deepening</h3><ul><li>Assume action costs Cost(s, a) = c for some c ≥ 0.</li><li>Modify DFS to stop at a maximum depth.</li><li>Call DFS for maximum depths 1,2,….</li><li>Memory: $O(d)$ (sabed!)</li><li>Time: $O(b^d)$ (same as BFS).</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backtrackingSearch</span><span class="params">(problem)</span>:</span></span><br><span class="line">    <span class="comment"># Best solution found so far (dictionary because of python scoping technicality)</span></span><br><span class="line">    best = &#123;</span><br><span class="line">        <span class="string">'cost'</span>: float(<span class="string">'+inf'</span>),</span><br><span class="line">        <span class="string">'history'</span>: <span class="keyword">None</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recurse</span><span class="params">(state, history, totalCost)</span>:</span></span><br><span class="line">        <span class="comment"># At state, having undergone history, accumulated</span></span><br><span class="line">        <span class="comment"># totalCost.</span></span><br><span class="line">        <span class="comment"># Explore the rest of the subtree under state.</span></span><br><span class="line">        <span class="keyword">if</span> problem.isEnd(state):</span><br><span class="line">            <span class="comment"># Update the best solution so far</span></span><br><span class="line">            <span class="keyword">if</span> totalCost&lt;best[<span class="string">'cost'</span>]:</span><br><span class="line">                best[<span class="string">'cost'</span>] = totalCost</span><br><span class="line">                best[<span class="string">'history'</span>] = history</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># Recurse on children</span></span><br><span class="line">        <span class="keyword">for</span> action, newState, cost <span class="keyword">in</span> problem.succAndCost(state):</span><br><span class="line">            recurse(newState, history+[(action, newState, cost)], totalCost+cost)</span><br><span class="line">    recurse(problem.startState(), history=[], totalCost=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> (best[<span class="string">'cost'</span>], best[<span class="string">'history'</span>])</span><br></pre></td></tr></table></figure><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="Search.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;"> Tree search algorithms</div></center><h2 id="Dynamic-programming"><a href="#Dynamic-programming" class="headerlink" title="Dynamic programming"></a>Dynamic programming</h2><p>backtracking search with memoization — potentially exponential savings</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="dp.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;"> Dynamic programming</div></center><ul><li>Now let us see if we can avoid the exponential time. If we consider the simple route finding problem of traveling from city 1 to city n, the search tree grows exponentially with n.</li><li>However, upon closer inspection, we note that this search tree has a lot of <strong>repeated structures</strong>. Moreover (and this is important), <strong>the future costs (the minimum cost of reaching a end state) of a state only depends on the current city!</strong> So therefore, all the subtrees rooted at city 5, for example, have the same minimum cost!</li><li>If we can just do that computation once, then we will have saved big time. This is the central idea of dynamic programming.</li></ul><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="dp1.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;"> Dynamic programming</div></center><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="dp2.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;"> Dynamic programming</div></center><ul><li>The dynamic programming algorithm is exactly backtracking search with one twist. At the beginning of the function, we check to see if we’ve already computed the future cost for s. If we have, then we simply return it (which takes constant time if we use a hash map). Otherwise, we compute it and save it in the cache so we don’t have to recompute it again. In this way, for every state, we are only computing its value once.</li><li>One important point is that the graph must be acyclic for dynamic programming to work. If there are cycles, the computation of a future cost for s might depend on $s^{\prime}$ which might depend on s. We will infinite loop in this case. To deal with cycles, we need uniform cost search, which we will describe later.</li></ul><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="dp3.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Dynamic programming</div></center><ul><li>This is perhaps the most important idea of this lecture: <strong>state</strong>. A state is a summary of all the past actions sufficient to choose future actions optimally.</li><li>What state is really about is forgetting the past. We can’t forget everything because the action costs in the future might depend on what we did on the past. The more we forget, the fewer states we have, and the more efficient our algorithm. So the name of the game is to find the minimal set of states that suffice. It’s a fun game.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dynamicProgramming</span><span class="params">(problem)</span>:</span></span><br><span class="line">    cache = &#123;&#125; <span class="comment"># state -&gt; futureCost(state)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">futureCost</span><span class="params">(state)</span>:</span></span><br><span class="line">        <span class="comment"># Base case</span></span><br><span class="line">        <span class="keyword">if</span> problem.isEnd(state):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> state <span class="keyword">in</span> cache: <span class="comment"># Exponential savings</span></span><br><span class="line">            <span class="keyword">return</span> cache[state]</span><br><span class="line">        <span class="comment"># Actually doing work</span></span><br><span class="line">        result = min(cost+futureCost(newState) \</span><br><span class="line">                <span class="keyword">for</span> action, newState, cost <span class="keyword">in</span> problem.succAndCost(state))</span><br><span class="line">        cache[state] = result</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> (futureCost(problem.startState()), [])</span><br></pre></td></tr></table></figure><h3 id="Uniform-cost-search"><a href="#Uniform-cost-search" class="headerlink" title="Uniform cost search"></a>Uniform cost search</h3><ul><li>UCS enumerates states in order of increasing past cost.</li><li>All action costs are non-negative: Cost(s, a) ≥ 0.</li></ul><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="ufs.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Uniform cost search</div></center><ul><li>The key idea that uniform cost search (UCS) uses is to compute the past costs in order of increasing past cost. To make this efficient, we need to make an important assumption that all action costs are non-negative.</li><li>This assumption is reasonable in many cases, but doesn’t allow us to handle cases where actions have payoff. To handle negative costs (positive payoffs), we need the Bellman-Ford algorithm. When we talk about value iteration for MDPs, we will see a form of this algorithm.</li><li>Note: those of you who have studied algorithms should immediately recognize UCS as Dijkstra’s algorithm. Logically, the two are indeed equivalent. There is an important implementation difference: UCS takes as input a search problem, which implicitly defines a large and even infinite graph, whereas Dijkstra’s algorithm (in the typical exposition) takes as input a fully concrete graph. The implicitness is important in practice because we might be working with an enormous graph (a detailed map of world) but only need to find the path between two close by points (Stanford to Palo Alto).</li></ul><h4 id="High-level-strategy"><a href="#High-level-strategy" class="headerlink" title="High-level strategy"></a>High-level strategy</h4><ul><li><strong>Explored</strong>: states we’ve found the optimal path to</li><li><strong>Frontier</strong>: states we’ve seen, still figuring out how to get there<br>cheaply</li><li><strong>Unexplored</strong>: states we haven’t seen</li></ul><p>The general strategy of UCS is to maintain three sets of nodes: explored, frontier, and unexplored. Throughout the course of the algorithm, we will move states from unexplored to frontier, and from frontier to explored. The key invariant is that we have computed the minimum cost paths to all the nodes in the explored set. So when the end state moves into the explored set, then we are done.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uniformCostSearch</span><span class="params">(problem)</span>:</span></span><br><span class="line">    frontier = util.PriorityQueue()</span><br><span class="line">    frontier.update(problem.startState(), <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="comment"># Move from frontier to explored</span></span><br><span class="line">        state, pastCost = frontier.removeMin()</span><br><span class="line">        <span class="keyword">if</span> problem.isEnd(state):</span><br><span class="line">            <span class="keyword">return</span> (pastCost, [])</span><br><span class="line">        <span class="comment"># Push out on the frontier</span></span><br><span class="line">        <span class="keyword">for</span> action, newState, cost <span class="keyword">in</span> problem.succAndCost(state):</span><br><span class="line">            frontier.update(newState, pastCost+cost)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      we will proceed to the first type of state-based models, search problems.
    
    </summary>
    
    
      <category term="Artificial Intelligence" scheme="https://zhangruochi.com/categories/Artificial-Intelligence/"/>
    
    
  </entry>
  
  <entry>
    <title>AI - Overview</title>
    <link href="https://zhangruochi.com/AI-Overview/2020/02/05/"/>
    <id>https://zhangruochi.com/AI-Overview/2020/02/05/</id>
    <published>2020-02-06T02:58:42.000Z</published>
    <updated>2020-02-07T03:41:20.654Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Two-views-of-AI"><a href="#Two-views-of-AI" class="headerlink" title="Two views of AI"></a>Two views of AI</h2><ol><li><strong>AI agents</strong>: how can we create intelligence? </li></ol><ul><li>achieving human-level intelligence, still very far (e.g., generalize from few examples)</li><li>The first is what one would normally associate with AI: the science and engineering of building ”intelligent” agents. The inspiration of what constitutes intelligence comes from the types of capabilities that humans possess: the ability to perceive a very complex world and make enough sense of it to be able to manipulate it.</li></ul><ol><li><strong>AI tools</strong>: how can we benefit society? </li></ol><ul><li>need to think carefully about real-world consequences (e.g., security, biases)</li><li>The second views AI as a set of tools. We are simply trying to solve problems in the world, and techniques developed by the AI community happen to be useful for that, but these problems are not ones that humans necessarily do well on natively.</li></ul><h2 id="How-should-we-actually-solve-AI-tasks"><a href="#How-should-we-actually-solve-AI-tasks" class="headerlink" title="How should we actually solve AI tasks?"></a>How should we actually solve AI tasks?</h2><p>In this class, we will adopt the <strong>modeling-inference-learning</strong> paradigm to help us navigate the solution space. In reality the lines are blurry, but this paradigm serves as an ideal and a useful guiding principle.</p><h3 id="Modeling"><a href="#Modeling" class="headerlink" title="Modeling"></a>Modeling</h3><ul><li>The first pillar is modeling. Modeling takes messy real world problems and packages them into <strong>neat formal mathematical objects</strong> called models, which can be subject to rigorous analysis and can be operated on by computers. However, modeling is lossy: not all of the richness of the real world can be captured, and therefore there is an art of modeling: what does one keep versus ignore? (An exception to this are games such as Chess, Go or Sodoku, where the real world is identical to the model.)</li><li>As an example, suppose we’re trying to have an AI that can navigate through a busy city. We might formulate this as a graph where nodes represent points in the city, edges represent the roads, and the cost of an edge represents the traffic on that road.</li></ul><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="modeling.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Modeling</div></center><h3 id="Inference"><a href="#Inference" class="headerlink" title="Inference"></a>Inference</h3><ul><li>The second pillar is inference. Given a model, the task of inference is to answer questions with respect to the model. For example, given the model of the city, one could ask questions such as: what is the shortest path? what is the cheapest path?</li><li>The focus of inference is usually on <strong>efficient algorithms</strong> that can answer these questions. For some models, computational complexity can be a concern (games such as Go), and usually approximations are needed.</li></ul><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="inference.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Inference</div></center><h3 id="Learning"><a href="#Learning" class="headerlink" title="Learning"></a>Learning</h3><ul><li>But where does the model come from? Remember that the real world is rich, so if the model is to be faithful, the model has to be rich as well. But we can’t possibly write down such a rich model manually.</li><li>The idea behind (machine) learning is to instead get it from data. Instead of constructing a model, one constructs a skeleton of a model (more precisely, a model family), which is a model without parameters. And then if we have the right type of data, we can run a machine learning algorithm to tune the parameters of the model.</li><li>Note that learning here is not tied to a particular approach (e.g., neural networks), but more of a philosophy. This general paradigm will allow us to bridge the gap between logic-based AI and statistical AI.</li></ul><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="learning.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Learning</div></center><h2 id="Machine-Learning"><a href="#Machine-Learning" class="headerlink" title="Machine Learning"></a>Machine Learning</h2><p>We concentrate on the models that we can use to represent real-world tasks. The topics will in a sense advance from low-level intelligence to high-level intelligence, evolving from models that simply make a reflex decision to models that are based on logical reasoning.</p><p>Supporting all of these models is machine learning, which has been arguably the most crucial ingredient powering recent successes in AI. From a systems engineering perspective, machine learning allows us to shift the information complexity of the model from code to data, which is much easier to obtain (either naturally occurring or via crowdsourcing).</p><p>The main conceptually magical part of learning is that if done properly, the trained model will be able to produce good predictions beyond the set of training examples. This leap of faith is called generalization, and is, explicitly or implicitly, at the heart of any machine learning algorithm. This can even be formalized using tools from probability and statistical learning theory.</p><ul><li>The main driver of recent successes in AI</li><li>Move from ”code” to ”data” to manage the information complex-<br>ity</li><li>Requires a leap of faith: <strong>generalization</strong></li></ul><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="machine-learning.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">machine-learning.png</div></center><h3 id="Reflex-based-models"><a href="#Reflex-based-models" class="headerlink" title="Reflex-based models"></a>Reflex-based models</h3><p>A reflex-based model simply performs a fixed sequence of computations on a given input. Examples include most models found in machine learning, from simple linear classifiers to deep neural networks. The main characteristic of reflex-based models is that their computations are feed-forward; one doesn’t backtrack and consider alternative computations. Inference is trivial in these models because it is just running the fixed computations, which makes these models appealing.</p><ul><li>linear classifiers, deep neural networks</li><li>Most common models in machine learning</li><li>Fully feed-forward (no backtracking)</li></ul><h3 id="State-based-models"><a href="#State-based-models" class="headerlink" title="State-based models"></a>State-based models</h3><p>Reflex-based models are too simple for tasks that require more forethought (e.g., in playing chess or planning a big trip). State-based models overcome this limitation. The key idea is, at a high-level, to model the state of a world and transitions between states which are triggered by actions. Concretely, one can think of states as nodes in a graph and transitions as edges. This reduction is useful because we understand graphs well and have a lot of efficient algorithms for operating on graphs.</p><ul><li>Search problems: you control everything</li><li>Markov decision processes: against nature (e.g., Blackjack)</li><li>Adversarial games: against opponent (e.g., chess)</li></ul><p>application  </p><ul><li>Games: Chess, Go, Pac-Man, Starcraft, etc.</li><li>Robotics: motion planning</li><li>Natural language generation: machine translation, image caption-<br>ing</li></ul><h3 id="Variable-based-models"><a href="#Variable-based-models" class="headerlink" title="Variable-based models"></a>Variable-based models</h3><ul><li>Constraint satisfaction problems: hard constraints (e.g., Sudoku, scheduling)</li></ul><p>Constraint satisfaction problems are variable-based models where we only have hard constraints. For example, in scheduling, we can’t have two people in the same place at the same time.</p><ul><li>Bayesian networks: soft dependencies (e.g., tracking cars from sensors)</li></ul><p>Bayesian networks are variable-based models where variables are random variables which are dependent on each other. For example, the true location of an airplane Ht and its radar reading Et are related, as are the location Ht and the location at the last time step $H_{t−1}$. The exact dependency structure is given by the graph structure and it formally defines a joint probability distribution over all of the variables. This topic is studied thoroughly in probabilistic graphical models (CS228).</p><h2 id="Optimization"><a href="#Optimization" class="headerlink" title="Optimization"></a>Optimization</h2><p>We are now done with the high-level motivation for the class. Let us now dive into some technical details. Let us focus on the inference and the learning aspect of the modeling-inference-learning paradigm. We will approach <strong>inference</strong> and <strong>learning</strong> from an optimization perspective, which allows us to decouple the mathematical specification of what we want to compute from the algorithms for <strong>how to compute it</strong>.</p><p>In total generality, optimization problems ask that you find the x that lives in a constraint set C that makes the function F(x) as small as possible. There are two types of optimization problems we’ll consider:  discrete optimization problems (mostly for inference) and continuous optimization problems (mostly for learning). Both are backed by a rich research field and are interesting topics in their own right. For this course, we will use the most basic tools from these topics: dynamic programming and gradient descent.</p><ol><li>Discrete optimization: find the best discrete object</li></ol><script type="math/tex; mode=display">min_{p \in Paths} Cost(p)</script><p>Algorithmic tool: dynamic programming</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">computeEditDistance</span><span class="params">(s, t)</span>:</span></span><br><span class="line">    cache = &#123;&#125;  <span class="comment"># (m, n) =&gt; result</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recurse</span><span class="params">(m, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Return the minimum edit distance between:</span></span><br><span class="line"><span class="string">        - first m letters of s</span></span><br><span class="line"><span class="string">        - first n letters of t</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> (m, n) <span class="keyword">in</span> cache:</span><br><span class="line">            <span class="keyword">return</span> cache[(m, n)]</span><br><span class="line">        <span class="keyword">if</span> m == <span class="number">0</span>:  <span class="comment"># Base case</span></span><br><span class="line">            result = n</span><br><span class="line">        <span class="keyword">elif</span> n == <span class="number">0</span>:  <span class="comment"># Base case</span></span><br><span class="line">            result = m</span><br><span class="line">        <span class="keyword">elif</span> s[m - <span class="number">1</span>] == t[n - <span class="number">1</span>]:  <span class="comment"># Last letter matches</span></span><br><span class="line">            result = recurse(m - <span class="number">1</span>, n - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            subCost = <span class="number">1</span> + recurse(m - <span class="number">1</span>, n - <span class="number">1</span>)</span><br><span class="line">            delCost = <span class="number">1</span> + recurse(m - <span class="number">1</span>, n)</span><br><span class="line">            insCost = <span class="number">1</span> + recurse(m, n - <span class="number">1</span>)</span><br><span class="line">            result = min(subCost, delCost, insCost)</span><br><span class="line">        cache[(m, n)] = result</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> recurse(len(s), len(t))</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(computeEditDistance('a cat!', 'the cats!'))</span></span><br><span class="line">print(computeEditDistance(<span class="string">'a cat!'</span> * <span class="number">10</span>, <span class="string">'the cats!'</span> * <span class="number">10</span>))</span><br></pre></td></tr></table></figure><ol><li>Continuous optimization: find the best vector of real numbers</li></ol><script type="math/tex; mode=display">min_{w \in \mathbb{R}^d} TrainingError(w)</script><p>Algorithmic tool: gradient descent</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">points = [(<span class="number">2</span>, <span class="number">4</span>), (<span class="number">4</span>, <span class="number">2</span>)]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">F</span><span class="params">(w)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> sum((w * x - y)**<span class="number">2</span> <span class="keyword">for</span> x, y <span class="keyword">in</span> points)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dF</span><span class="params">(w)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> sum(<span class="number">2</span>*(w * x - y) * x <span class="keyword">for</span> x, y <span class="keyword">in</span> points)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Gradient descent</span></span><br><span class="line">w = <span class="number">0</span></span><br><span class="line">eta = <span class="number">0.01</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    value = F(w)</span><br><span class="line">    gradient = dF(w)</span><br><span class="line">    w = w - eta * gradient</span><br><span class="line">    print(<span class="string">'iteration &#123;&#125;: w = &#123;&#125;, F(w) = &#123;&#125;'</span>.format(t, w, value))</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li>course note from <a href="https://stanford-cs221.github.io/autumn2019/" target="_blank" rel="noopener">cs221</a></li></ul>]]></content>
    
    <summary type="html">
    
      Two views of AI, modeling-inference-learning paradigm, Machine Learning
    
    </summary>
    
    
      <category term="Artificial Intelligence" scheme="https://zhangruochi.com/categories/Artificial-Intelligence/"/>
    
    
  </entry>
  
  <entry>
    <title>Module Sequential ModuleList ModuleDict</title>
    <link href="https://zhangruochi.com/Module-Sequential-ModuleList-ModuleDict/2020/01/28/"/>
    <id>https://zhangruochi.com/Module-Sequential-ModuleList-ModuleDict/2020/01/28/</id>
    <published>2020-01-28T21:21:52.000Z</published>
    <updated>2020-02-16T09:49:45.589Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Pytorch-how-and-when-to-use-Module-Sequential-ModuleList-and-ModuleDict"><a href="#Pytorch-how-and-when-to-use-Module-Sequential-ModuleList-and-ModuleDict" class="headerlink" title="Pytorch: how and when to use Module, Sequential, ModuleList and ModuleDict"></a>Pytorch: how and when to use Module, Sequential, ModuleList and ModuleDict</h3><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://github.com/FrancescoSaverioZuppichini/Pytorch-how-and-when-to-use-Module-Sequential-ModuleList-and-ModuleDict/blob/master/README.md" target="_blank" rel="noopener">Github Repo of FrancescoSaverioZuppichini</a></li><li>You can find the code <a href="https://github.com/FrancescoSaverioZuppichini/Pytorch-how-and-when-to-use-Module-Sequential-ModuleList-and-ModuleDict" target="_blank" rel="noopener">here</a></li></ul><p><a href="https://pytorch.org/" target="_blank" rel="noopener">Pytorch</a> is an open source deep learning frameworks that provide a smart way to create ML models. Even if the documentation is well made, I still find that most people still are able to write bad and not organized PyTorch code.</p><p>Today, we are going to see how to use the three main building blocks of PyTorch: <code>Module, Sequential and ModuleList</code>. We are going to start with an example and iteratively we will make it better.</p><p>All these four classes are contained into <code>torch.nn</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"></span><br><span class="line"><span class="comment"># nn.Module</span></span><br><span class="line"><span class="comment"># nn.Sequential</span></span><br><span class="line"><span class="comment"># nn.Module</span></span><br></pre></td></tr></table></figure><h2 id="Module-the-main-building-block"><a href="#Module-the-main-building-block" class="headerlink" title="Module: the main building block"></a>Module: the main building block</h2><p>The <a href="https://pytorch.org/docs/stable/nn.html?highlight=module" target="_blank" rel="noopener">Module</a> is the main building block, it defines the base class for all neural network and you MUST subclass it. </p><p>Let’s create a classic CNN classifier as example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCNNClassifier</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, in_c, n_classes)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.conv1 = nn.Conv2d(in_c, <span class="number">32</span>, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">1</span>)</span><br><span class="line">        self.bn1 = nn.BatchNorm2d(<span class="number">32</span>)</span><br><span class="line">        </span><br><span class="line">        self.conv2 = nn.Conv2d(<span class="number">32</span>, <span class="number">64</span>, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">1</span>)</span><br><span class="line">        self.bn2 = nn.BatchNorm2d(<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">        self.fc1 = nn.Linear(<span class="number">32</span> * <span class="number">28</span> * <span class="number">28</span>, <span class="number">1024</span>)</span><br><span class="line">        self.fc2 = nn.Linear(<span class="number">1024</span>, n_classes)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x = self.conv1(x)</span><br><span class="line">        x = self.bn1(x)</span><br><span class="line">        x = F.relu(x)</span><br><span class="line">        </span><br><span class="line">        x = self.conv2(x)</span><br><span class="line">        x = self.bn2(x)</span><br><span class="line">        x = F.relu(x)</span><br><span class="line"></span><br><span class="line">        x = x.view(x.size(<span class="number">0</span>), <span class="number">-1</span>) <span class="comment"># flat</span></span><br><span class="line">        </span><br><span class="line">        x = self.fc1(x)</span><br><span class="line">        x = F.sigmoid(x)</span><br><span class="line">        x = self.fc2(x)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model = MyCNNClassifier(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">print(model)</span><br></pre></td></tr></table></figure><pre><code>MyCNNClassifier(  (conv1): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))  (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (conv2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))  (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (fc1): Linear(in_features=25088, out_features=1024, bias=True)  (fc2): Linear(in_features=1024, out_features=10, bias=True))</code></pre><p>This is a very simple classifier with an encoding part that uses two layers with 3x3 convs + batchnorm + relu and a decoding part with two linear layers. If you are not new to PyTorch you may have seen this type of coding before, but there are two problems.</p><p>If we want to add a layer we have to again write lots of code in the <code>__init__</code> and in the <code>forward</code> function. Also, if we have some common block that we want to use in another model, e.g. the 3x3 conv + batchnorm + relu, we have to write it again.</p><h2 id="Sequential-stack-and-merge-layers"><a href="#Sequential-stack-and-merge-layers" class="headerlink" title="Sequential: stack and merge layers"></a>Sequential: stack and merge layers</h2><p><a href="https://pytorch.org/docs/stable/nn.html?highlight=sequential#torch.nn.Sequential" target="_blank" rel="noopener">Sequential</a> is a container of Modules that can be stacked together and run at the same time.</p><p>You can notice that we have to store into <code>self</code> everything. We can use <code>Sequential</code> to improve our code. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCNNClassifier</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, in_c, n_classes)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.conv_block1 = nn.Sequential(</span><br><span class="line">            nn.Conv2d(in_c, <span class="number">32</span>, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.BatchNorm2d(<span class="number">32</span>),</span><br><span class="line">            nn.ReLU()</span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        self.conv_block2 = nn.Sequential(</span><br><span class="line">            nn.Conv2d(<span class="number">32</span>, <span class="number">64</span>, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.BatchNorm2d(<span class="number">64</span>),</span><br><span class="line">            nn.ReLU()</span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        self.decoder = nn.Sequential(</span><br><span class="line">            nn.Linear(<span class="number">32</span> * <span class="number">28</span> * <span class="number">28</span>, <span class="number">1024</span>),</span><br><span class="line">            nn.Sigmoid(),</span><br><span class="line">            nn.Linear(<span class="number">1024</span>, n_classes)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x = self.conv_block1(x)</span><br><span class="line">        x = self.conv_block2(x)</span><br><span class="line"></span><br><span class="line">        x = x.view(x.size(<span class="number">0</span>), <span class="number">-1</span>) <span class="comment"># flat</span></span><br><span class="line">        </span><br><span class="line">        x = self.decoder(x)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model = MyCNNClassifier(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">print(model)</span><br></pre></td></tr></table></figure><pre><code>MyCNNClassifier(  (conv_block1): Sequential(    (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    (2): ReLU()  )  (conv_block2): Sequential(    (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    (2): ReLU()  )  (decoder): Sequential(    (0): Linear(in_features=25088, out_features=1024, bias=True)    (1): Sigmoid()    (2): Linear(in_features=1024, out_features=10, bias=True)  ))</code></pre><p>Much Better uhu?</p><p>Did you notice that <code>conv_block1</code> and <code>conv_block2</code> looks almost the same? We could create a function that reteurns a <code>nn.Sequential</code> to even simplify the code!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conv_block</span><span class="params">(in_f, out_f, *args, **kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> nn.Sequential(</span><br><span class="line">        nn.Conv2d(in_f, out_f, *args, **kwargs),</span><br><span class="line">        nn.BatchNorm2d(out_f),</span><br><span class="line">        nn.ReLU()</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>Then we can just call this function in our Module</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCNNClassifier</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, in_c, n_classes)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.conv_block1 = conv_block(in_c, <span class="number">32</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        self.conv_block2 = conv_block(<span class="number">32</span>, <span class="number">64</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        self.decoder = nn.Sequential(</span><br><span class="line">            nn.Linear(<span class="number">32</span> * <span class="number">28</span> * <span class="number">28</span>, <span class="number">1024</span>),</span><br><span class="line">            nn.Sigmoid(),</span><br><span class="line">            nn.Linear(<span class="number">1024</span>, n_classes)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x = self.conv_block1(x)</span><br><span class="line">        x = self.conv_block2(x)</span><br><span class="line"></span><br><span class="line">        x = x.view(x.size(<span class="number">0</span>), <span class="number">-1</span>) <span class="comment"># flat</span></span><br><span class="line">        </span><br><span class="line">        x = self.decoder(x)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model = MyCNNClassifier(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">print(model)</span><br></pre></td></tr></table></figure><pre><code>MyCNNClassifier(  (conv_block1): Sequential(    (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    (2): ReLU()  )  (conv_block2): Sequential(    (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    (2): ReLU()  )  (decoder): Sequential(    (0): Linear(in_features=25088, out_features=1024, bias=True)    (1): Sigmoid()    (2): Linear(in_features=1024, out_features=10, bias=True)  ))</code></pre><p>Even cleaner! Still <code>conv_block1</code> and <code>conv_block2</code> are almost the same! We can merge them using <code>nn.Sequential</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCNNClassifier</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, in_c, n_classes)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.encoder = nn.Sequential(</span><br><span class="line">            conv_block(in_c, <span class="number">32</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            conv_block(<span class="number">32</span>, <span class="number">64</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        self.decoder = nn.Sequential(</span><br><span class="line">            nn.Linear(<span class="number">32</span> * <span class="number">28</span> * <span class="number">28</span>, <span class="number">1024</span>),</span><br><span class="line">            nn.Sigmoid(),</span><br><span class="line">            nn.Linear(<span class="number">1024</span>, n_classes)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x = self.encoder(x)</span><br><span class="line">        </span><br><span class="line">        x = x.view(x.size(<span class="number">0</span>), <span class="number">-1</span>) <span class="comment"># flat</span></span><br><span class="line">        </span><br><span class="line">        x = self.decoder(x)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model = MyCNNClassifier(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">print(model)</span><br></pre></td></tr></table></figure><pre><code>MyCNNClassifier(  (encoder): Sequential(    (0): Sequential(      (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (2): ReLU()    )    (1): Sequential(      (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (2): ReLU()    )  )  (decoder): Sequential(    (0): Linear(in_features=25088, out_features=1024, bias=True)    (1): Sigmoid()    (2): Linear(in_features=1024, out_features=10, bias=True)  ))</code></pre><p><code>self.encoder</code> now holds booth <code>conv_block</code>. We have decoupled logic for our model and make it easier to read and reuse. Our <code>conv_block</code> function can be imported and used in another model.</p><h2 id="Dynamic-Sequential-create-multiple-layers-at-once"><a href="#Dynamic-Sequential-create-multiple-layers-at-once" class="headerlink" title="Dynamic Sequential: create multiple layers at once"></a>Dynamic Sequential: create multiple layers at once</h2><p>What if we can to add a new layers in <code>self.encoder</code>, hardcoded them is not convinient:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">self.encoder = nn.Sequential(</span><br><span class="line">            conv_block(in_c, <span class="number">32</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            conv_block(<span class="number">32</span>, <span class="number">64</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            conv_block(<span class="number">64</span>, <span class="number">128</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            conv_block(<span class="number">128</span>, <span class="number">256</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line"></span><br><span class="line">        )</span><br></pre></td></tr></table></figure><p>Would it be nice if we can define the sizes as an array and automatically create all the layers without writing each one of them? Fortunately we can create an array and pass it to <code>Sequential</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCNNClassifier</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, in_c, n_classes)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.enc_sizes = [in_c, <span class="number">32</span>, <span class="number">64</span>]</span><br><span class="line">        </span><br><span class="line">        conv_blocks = [conv_block(in_f, out_f, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>) </span><br><span class="line">                       <span class="keyword">for</span> in_f, out_f <span class="keyword">in</span> zip(self.enc_sizes, self.enc_sizes[<span class="number">1</span>:])]</span><br><span class="line">        </span><br><span class="line">        self.encoder = nn.Sequential(*conv_blocks)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        self.decoder = nn.Sequential(</span><br><span class="line">            nn.Linear(<span class="number">32</span> * <span class="number">28</span> * <span class="number">28</span>, <span class="number">1024</span>),</span><br><span class="line">            nn.Sigmoid(),</span><br><span class="line">            nn.Linear(<span class="number">1024</span>, n_classes)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x = self.encoder(x)</span><br><span class="line">        </span><br><span class="line">        x = x.view(x.size(<span class="number">0</span>), <span class="number">-1</span>) <span class="comment"># flat</span></span><br><span class="line">        </span><br><span class="line">        x = self.decoder(x)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model = MyCNNClassifier(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">print(model)</span><br></pre></td></tr></table></figure><pre><code>MyCNNClassifier(  (encoder): Sequential(    (0): Sequential(      (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (2): ReLU()    )    (1): Sequential(      (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (2): ReLU()    )  )  (decoder): Sequential(    (0): Linear(in_features=25088, out_features=1024, bias=True)    (1): Sigmoid()    (2): Linear(in_features=1024, out_features=10, bias=True)  ))</code></pre><p>Let’s break it down. We created an array <code>self.enc_sizes</code> that holds the sizes of our encoder. Then we create an array <code>conv_blocks</code> by iterating the sizes. Since we have to give booth a in size and an outsize for each layer we <code>zip</code>ed the size’array with itself by shifting it by one. </p><p>Just to be clear, take a look at the following example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sizes = [<span class="number">1</span>, <span class="number">32</span>, <span class="number">64</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> in_f,out_f <span class="keyword">in</span> zip(sizes, sizes[<span class="number">1</span>:]):</span><br><span class="line">    print(in_f,out_f)</span><br></pre></td></tr></table></figure><pre><code>1 3232 64</code></pre><p>Then, since <code>Sequential</code> does not accept a list, we decompose it by using the <code>*</code> operator.</p><p>Tada! Now if we just want to add a size, we can easily add a new number to the list. It is a common practice to make the size a parameter.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCNNClassifier</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, in_c, enc_sizes, n_classes)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.enc_sizes = [in_c, *enc_sizes]</span><br><span class="line">        </span><br><span class="line">        conv_blokcs = [conv_block(in_f, out_f, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>) </span><br><span class="line">                       <span class="keyword">for</span> in_f, out_f <span class="keyword">in</span> zip(self.enc_sizes, self.enc_sizes[<span class="number">1</span>:])]</span><br><span class="line">        </span><br><span class="line">        self.encoder = nn.Sequential(*conv_blokcs)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        self.decoder = nn.Sequential(</span><br><span class="line">            nn.Linear(<span class="number">32</span> * <span class="number">28</span> * <span class="number">28</span>, <span class="number">1024</span>),</span><br><span class="line">            nn.Sigmoid(),</span><br><span class="line">            nn.Linear(<span class="number">1024</span>, n_classes)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x = self.encoder(x)</span><br><span class="line">        </span><br><span class="line">        x = x.view(x.size(<span class="number">0</span>), <span class="number">-1</span>) <span class="comment"># flat</span></span><br><span class="line">        </span><br><span class="line">        x = self.decoder(x)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model = MyCNNClassifier(<span class="number">1</span>, [<span class="number">32</span>,<span class="number">64</span>, <span class="number">128</span>], <span class="number">10</span>)</span><br><span class="line">print(model)</span><br></pre></td></tr></table></figure><pre><code>MyCNNClassifier(  (encoder): Sequential(    (0): Sequential(      (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (2): ReLU()    )    (1): Sequential(      (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (2): ReLU()    )    (2): Sequential(      (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (2): ReLU()    )  )  (decoder): Sequential(    (0): Linear(in_features=25088, out_features=1024, bias=True)    (1): Sigmoid()    (2): Linear(in_features=1024, out_features=10, bias=True)  ))</code></pre><p>We can do the same for the decoder part</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dec_block</span><span class="params">(in_f, out_f)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> nn.Sequential(</span><br><span class="line">        nn.Linear(in_f, out_f),</span><br><span class="line">        nn.Sigmoid()</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCNNClassifier</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, in_c, enc_sizes, dec_sizes,  n_classes)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.enc_sizes = [in_c, *enc_sizes]</span><br><span class="line">        self.dec_sizes = [<span class="number">32</span> * <span class="number">28</span> * <span class="number">28</span>, *dec_sizes]</span><br><span class="line"></span><br><span class="line">        conv_blokcs = [conv_block(in_f, out_f, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>) </span><br><span class="line">                       <span class="keyword">for</span> in_f, out_f <span class="keyword">in</span> zip(self.enc_sizes, self.enc_sizes[<span class="number">1</span>:])]</span><br><span class="line">        </span><br><span class="line">        self.encoder = nn.Sequential(*conv_blokcs)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        dec_blocks = [dec_block(in_f, out_f) </span><br><span class="line">                       <span class="keyword">for</span> in_f, out_f <span class="keyword">in</span> zip(self.dec_sizes, self.dec_sizes[<span class="number">1</span>:])]</span><br><span class="line">        </span><br><span class="line">        self.decoder = nn.Sequential(*dec_blocks)</span><br><span class="line">        </span><br><span class="line">        self.last = nn.Linear(self.dec_sizes[<span class="number">-1</span>], n_classes)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x = self.encoder(x)</span><br><span class="line">        </span><br><span class="line">        x = x.view(x.size(<span class="number">0</span>), <span class="number">-1</span>) <span class="comment"># flat</span></span><br><span class="line">        </span><br><span class="line">        x = self.decoder(x)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model = MyCNNClassifier(<span class="number">1</span>, [<span class="number">32</span>,<span class="number">64</span>], [<span class="number">1024</span>, <span class="number">512</span>], <span class="number">10</span>)</span><br><span class="line">print(model)</span><br></pre></td></tr></table></figure><pre><code>MyCNNClassifier(  (encoder): Sequential(    (0): Sequential(      (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (2): ReLU()    )    (1): Sequential(      (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (2): ReLU()    )  )  (decoder): Sequential(    (0): Sequential(      (0): Linear(in_features=25088, out_features=1024, bias=True)      (1): Sigmoid()    )    (1): Sequential(      (0): Linear(in_features=1024, out_features=512, bias=True)      (1): Sigmoid()    )  )  (last): Linear(in_features=512, out_features=10, bias=True))</code></pre><p>We followed the same pattern, we create a new block for the decoding part, linear + sigmoid, and we pass an array with the sizes. We had to add a <code>self.last</code> since we do not want to activate the output</p><p>Now, we can even break down our model in two! Encoder + Decoder</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyEncoder</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, enc_sizes)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.conv_blokcs = nn.Sequential(*[conv_block(in_f, out_f, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>) </span><br><span class="line">                       <span class="keyword">for</span> in_f, out_f <span class="keyword">in</span> zip(enc_sizes, enc_sizes[<span class="number">1</span>:])])</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> self.conv_blokcs(x)</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDecoder</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, dec_sizes, n_classes)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.dec_blocks = nn.Sequential(*[dec_block(in_f, out_f) </span><br><span class="line">                       <span class="keyword">for</span> in_f, out_f <span class="keyword">in</span> zip(dec_sizes, dec_sizes[<span class="number">1</span>:])])</span><br><span class="line">        self.last = nn.Linear(dec_sizes[<span class="number">-1</span>], n_classes)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.dec_blocks()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCNNClassifier</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, in_c, enc_sizes, dec_sizes,  n_classes)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.enc_sizes = [in_c, *enc_sizes]</span><br><span class="line">        self.dec_sizes = [<span class="number">32</span> * <span class="number">28</span> * <span class="number">28</span>, *dec_sizes]</span><br><span class="line"></span><br><span class="line">        self.encoder = MyEncoder(self.enc_sizes)</span><br><span class="line">        </span><br><span class="line">        self.decoder = MyDecoder(dec_sizes, n_classes)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x = self.encoder(x)</span><br><span class="line">        </span><br><span class="line">        x = x.flatten(<span class="number">1</span>) <span class="comment"># flat</span></span><br><span class="line">        </span><br><span class="line">        x = self.decoder(x)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model = MyCNNClassifier(<span class="number">1</span>, [<span class="number">32</span>,<span class="number">64</span>], [<span class="number">1024</span>, <span class="number">512</span>], <span class="number">10</span>)</span><br><span class="line">print(model)</span><br></pre></td></tr></table></figure><pre><code>MyCNNClassifier(  (encoder): MyEncoder(    (conv_blokcs): Sequential(      (0): Sequential(        (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))        (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (2): ReLU()      )      (1): Sequential(        (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (2): ReLU()      )    )  )  (decoder): MyDecoder(    (dec_blocks): Sequential(      (0): Sequential(        (0): Linear(in_features=1024, out_features=512, bias=True)        (1): Sigmoid()      )    )    (last): Linear(in_features=512, out_features=10, bias=True)  ))</code></pre><p>Be aware that <code>MyEncoder</code> and <code>MyDecoder</code> could also be functions that returns a <code>nn.Sequential</code>. I prefer to use the first pattern for models and the second for building blocks.</p><p>By diving our module into submodules it is easier to <strong>share</strong> the code, <strong>debug</strong> it and <strong>test</strong> it.</p><h2 id="ModuleList-when-we-need-to-iterate"><a href="#ModuleList-when-we-need-to-iterate" class="headerlink" title="ModuleList : when we need to iterate"></a>ModuleList : when we need to iterate</h2><p><code>ModuleList</code> allows you to store <code>Module</code> as a list. It can be useful when you need to iterate through layer and store/use some information, like in U-net.</p><p>The main difference between <code>Sequential</code> is that <code>ModuleList</code> have not a <code>forward</code> method so the inner layers are not connected. Assuming we need each output of each layer in the decoder, we can store it by:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyModule</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sizes)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.layers = nn.ModuleList([nn.Linear(in_f, out_f) <span class="keyword">for</span> in_f, out_f <span class="keyword">in</span> zip(sizes, sizes[<span class="number">1</span>:])])</span><br><span class="line">        self.trace = []</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self,x)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> layer <span class="keyword">in</span> self.layers:</span><br><span class="line">            x = layer(x)</span><br><span class="line">            self.trace.append(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">model = MyModule([<span class="number">1</span>, <span class="number">16</span>, <span class="number">32</span>])</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">model(torch.rand((<span class="number">4</span>,<span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line">[print(trace.shape) <span class="keyword">for</span> trace <span class="keyword">in</span> model.trace]</span><br></pre></td></tr></table></figure><pre><code>torch.Size([4, 16])torch.Size([4, 32])[None, None]</code></pre><h2 id="ModuleDict-when-we-need-to-choose"><a href="#ModuleDict-when-we-need-to-choose" class="headerlink" title="ModuleDict: when we need to choose"></a>ModuleDict: when we need to choose</h2><p>What if we want to switch to <code>LearkyRelu</code> in our <code>conv_block</code>? We can use <code>ModuleDict</code> to create a dictionary of <code>Module</code> and dynamically switch <code>Module</code> when we want</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conv_block</span><span class="params">(in_f, out_f, activation=<span class="string">'relu'</span>, *args, **kwargs)</span>:</span></span><br><span class="line">    </span><br><span class="line">    activations = nn.ModuleDict([</span><br><span class="line">                [<span class="string">'lrelu'</span>, nn.LeakyReLU()],</span><br><span class="line">                [<span class="string">'relu'</span>, nn.ReLU()]</span><br><span class="line">    ])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> nn.Sequential(</span><br><span class="line">        nn.Conv2d(in_f, out_f, *args, **kwargs),</span><br><span class="line">        nn.BatchNorm2d(out_f),</span><br><span class="line">        activations[activation]</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(conv_block(<span class="number">1</span>, <span class="number">32</span>,<span class="string">'lrelu'</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>))</span><br><span class="line">print(conv_block(<span class="number">1</span>, <span class="number">32</span>,<span class="string">'relu'</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>))</span><br></pre></td></tr></table></figure><pre><code>Sequential(  (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (2): LeakyReLU(negative_slope=0.01))Sequential(  (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (2): ReLU())</code></pre><h2 id="Final-implementation"><a href="#Final-implementation" class="headerlink" title="Final implementation"></a>Final implementation</h2><p>Let’s wrap it up everything!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conv_block</span><span class="params">(in_f, out_f, activation=<span class="string">'relu'</span>, *args, **kwargs)</span>:</span></span><br><span class="line">    activations = nn.ModuleDict([</span><br><span class="line">                [<span class="string">'lrelu'</span>, nn.LeakyReLU()],</span><br><span class="line">                [<span class="string">'relu'</span>, nn.ReLU()]</span><br><span class="line">    ])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> nn.Sequential(</span><br><span class="line">        nn.Conv2d(in_f, out_f, *args, **kwargs),</span><br><span class="line">        nn.BatchNorm2d(out_f),</span><br><span class="line">        activations[activation]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dec_block</span><span class="params">(in_f, out_f)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> nn.Sequential(</span><br><span class="line">        nn.Linear(in_f, out_f),</span><br><span class="line">        nn.Sigmoid()</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyEncoder</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, enc_sizes, *args, **kwargs)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.conv_blokcs = nn.Sequential(*[conv_block(in_f, out_f, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>, *args, **kwargs) </span><br><span class="line">                       <span class="keyword">for</span> in_f, out_f <span class="keyword">in</span> zip(enc_sizes, enc_sizes[<span class="number">1</span>:])])</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> self.conv_blokcs(x)</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDecoder</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, dec_sizes, n_classes)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.dec_blocks = nn.Sequential(*[dec_block(in_f, out_f) </span><br><span class="line">                       <span class="keyword">for</span> in_f, out_f <span class="keyword">in</span> zip(dec_sizes, dec_sizes[<span class="number">1</span>:])])</span><br><span class="line">        self.last = nn.Linear(dec_sizes[<span class="number">-1</span>], n_classes)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.dec_blocks()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCNNClassifier</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, in_c, enc_sizes, dec_sizes,  n_classes, activation=<span class="string">'relu'</span>)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.enc_sizes = [in_c, *enc_sizes]</span><br><span class="line">        self.dec_sizes = [<span class="number">32</span> * <span class="number">28</span> * <span class="number">28</span>, *dec_sizes]</span><br><span class="line"></span><br><span class="line">        self.encoder = MyEncoder(self.enc_sizes, activation=activation)</span><br><span class="line">        </span><br><span class="line">        self.decoder = MyDecoder(dec_sizes, n_classes)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x = self.encoder(x)</span><br><span class="line">        </span><br><span class="line">        x = x.flatten(<span class="number">1</span>) <span class="comment"># flat</span></span><br><span class="line">        </span><br><span class="line">        x = self.decoder(x)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model = MyCNNClassifier(<span class="number">1</span>, [<span class="number">32</span>,<span class="number">64</span>], [<span class="number">1024</span>, <span class="number">512</span>], <span class="number">10</span>, activation=<span class="string">'lrelu'</span>)</span><br><span class="line">print(model)</span><br></pre></td></tr></table></figure><pre><code>MyCNNClassifier(  (encoder): MyEncoder(    (conv_blokcs): Sequential(      (0): Sequential(        (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))        (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (2): LeakyReLU(negative_slope=0.01)      )      (1): Sequential(        (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (2): LeakyReLU(negative_slope=0.01)      )    )  )  (decoder): MyDecoder(    (dec_blocks): Sequential(      (0): Sequential(        (0): Linear(in_features=1024, out_features=512, bias=True)        (1): Sigmoid()      )    )    (last): Linear(in_features=512, out_features=10, bias=True)  ))</code></pre><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>So, in summary.</p><ul><li>Use <code>Module</code> when you have a big block compose of multiple smaller blocks</li><li>Use <code>Sequential</code> when you want to create a small block from layers</li><li>Use <code>ModuleList</code> when you need to iterate through some layers or building blocks and do something</li><li>Use <code>ModuleDict</code> when you need to parametise some blocks of your model, for example an activation function</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Pytorch-how-and-when-to-use-Module-Sequential-ModuleList-and-ModuleDict&quot;&gt;&lt;a href=&quot;#Pytorch-how-and-when-to-use-Module-Sequential-Mod
      
    
    </summary>
    
    
      <category term="Artificial Intelligence" scheme="https://zhangruochi.com/categories/Artificial-Intelligence/"/>
    
      <category term="Deep Learning" scheme="https://zhangruochi.com/categories/Artificial-Intelligence/Deep-Learning/"/>
    
    
  </entry>
  
  <entry>
    <title>Minimum Spanning Trees</title>
    <link href="https://zhangruochi.com/Minimum-Spanning-Trees/2020/01/25/"/>
    <id>https://zhangruochi.com/Minimum-Spanning-Trees/2020/01/25/</id>
    <published>2020-01-25T20:56:49.000Z</published>
    <updated>2020-01-26T01:41:21.028Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Minimum-Spanning-Trees"><a href="#Minimum-Spanning-Trees" class="headerlink" title="Minimum Spanning Trees"></a>Minimum Spanning Trees</h3><ul><li>Kruskal’s Algorithm <ul><li>O(n + m lg(n))</li></ul></li><li>Prim’s Algorithm<ul><li>O(n lg(n) + m lg(n))</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, nodes)</span>:</span></span><br><span class="line">        self.parent =  &#123;v: <span class="number">-1</span> <span class="keyword">for</span> v <span class="keyword">in</span> nodes&#125;</span><br><span class="line">        self.rank = &#123;r: <span class="number">0</span> <span class="keyword">for</span> r <span class="keyword">in</span> nodes&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_root</span><span class="params">(self, i)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.parent[i] == <span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">        self.parent[i] = self.get_root(self.parent[i])</span><br><span class="line">        <span class="keyword">return</span> self.parent[i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(self, i, j)</span>:</span></span><br><span class="line">        i_root = self.get_root(i)</span><br><span class="line">        j_root = self.get_root(j)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> i_root != j_root:</span><br><span class="line">            <span class="keyword">if</span> self.rank[i_root] == self.rank[j_root]:</span><br><span class="line">                self.parent[i_root] = j_root</span><br><span class="line">                self.rank[j_root] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> self.rank[i_root] &gt; self.rank[j_root]:</span><br><span class="line">                self.parent[j_root] = i_root</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.parent[i_root] = j_root</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_connected</span><span class="params">(self, i, j)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.get_root(i) == self.get_root(j)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHeap</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, initial = None, key = None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> key:</span><br><span class="line">            self.key = <span class="keyword">lambda</span> x: x.weight</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> initial:</span><br><span class="line">           self._data = [(key(item), item) <span class="keyword">for</span> item <span class="keyword">in</span> initial]</span><br><span class="line">           heapq.heapify(self._data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">           self._data = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="comment"># print(self._data)</span></span><br><span class="line">        heapq.heappush(self._data, (self.key(item), item))</span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">       <span class="keyword">return</span> heapq.heappop(self._data)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">empty</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span> <span class="keyword">if</span> self._data <span class="keyword">else</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># KruskalMST(G):</span></span><br><span class="line"><span class="comment">#     DisjointSets forest</span></span><br><span class="line"><span class="comment">#     foreach (Vertex v : G):</span></span><br><span class="line"><span class="comment">#         forest.makeSet(v)</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#     PriorityQueue Q    // min edge weight</span></span><br><span class="line"><span class="comment">#     foreach (Edge e : G):</span></span><br><span class="line"><span class="comment">#         Q.insert(e)</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#     Graph T = (V, &#123;&#125;)</span></span><br><span class="line"><span class="comment">#     while |T.edges()| &lt; n-1:</span></span><br><span class="line"><span class="comment">#         Edge (u, v) = Q.removeMin()</span></span><br><span class="line"><span class="comment">#         if forest.find(u) != forest.find(v):</span></span><br><span class="line"><span class="comment">#             T.addEdge(u, v) </span></span><br><span class="line"><span class="comment">#             forest.union(forest.find(u)),</span></span><br><span class="line"><span class="comment">#     return T</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kruskal</span><span class="params">(graph)</span>:</span></span><br><span class="line"></span><br><span class="line">    edge = namedtuple(<span class="string">"edge"</span>,(<span class="string">'u'</span>,<span class="string">'v'</span>,<span class="string">'weight'</span>))        </span><br><span class="line">    heap = MyHeap()</span><br><span class="line">    union_find = UnionFind(graph.keys())</span><br><span class="line"></span><br><span class="line">    path = []</span><br><span class="line">    weight = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> u <span class="keyword">in</span> graph:</span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> graph[u]:</span><br><span class="line">            heap.push(edge(u,v,graph[u][v]))</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> len(path) &lt; len(graph)<span class="number">-1</span>:</span><br><span class="line">        edge = heap.pop()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> union_find.is_connected(edge.u, edge.v):</span><br><span class="line">            path.append(edge)</span><br><span class="line">            weight += edge.weight</span><br><span class="line">            union_find.union(edge.u,edge.v)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> weight,path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># PrimMST(G, s):</span></span><br><span class="line"><span class="comment">#     foreach (Vertex v : G):</span></span><br><span class="line"><span class="comment">#         d[v] = +inf</span></span><br><span class="line"><span class="comment">#         p[v] = NULL</span></span><br><span class="line"><span class="comment">#     d[s] = 0</span></span><br><span class="line"><span class="comment">#     PriorityQueue Q // min distance, defined by d[v] </span></span><br><span class="line"><span class="comment">#     Q.buildHeap(G.vertices())</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     Graph T // "labeled set"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     repeat n times:</span></span><br><span class="line"><span class="comment">#         Vertex m = Q.removeMin()</span></span><br><span class="line"><span class="comment">#         T.add(m)</span></span><br><span class="line"><span class="comment">#         foreach (Vertex v : neighbors of m not in T):</span></span><br><span class="line"><span class="comment">#             if cost(v, m) &lt; d[v]:</span></span><br><span class="line"><span class="comment">#                 d[v] = cost(v, m)</span></span><br><span class="line"><span class="comment">#                 p[v] = m</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prim</span><span class="params">(graph, root)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Input: G, Graph;</span></span><br><span class="line">    <span class="comment">#      s, vertex in G, starting vertex</span></span><br><span class="line">    <span class="comment"># Output: T, a minimum spanning tree (MST) of G</span></span><br><span class="line"></span><br><span class="line">    prev = <span class="keyword">None</span></span><br><span class="line">    path = []</span><br><span class="line">    total = <span class="number">0</span>                   <span class="comment"># Total cost of edges in tree</span></span><br><span class="line">    visited = set()            <span class="comment"># Set of vertices in tree</span></span><br><span class="line">    Node = namedtuple(<span class="string">"Node"</span>,(<span class="string">"v"</span>,<span class="string">"weight"</span>))</span><br><span class="line">    heap = MyHeap()   <span class="comment"># Unexplored edges ordered by cost</span></span><br><span class="line">    heap.push(Node(root,<span class="number">0</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> heap.empty():</span><br><span class="line">        cur_node = heap.pop()</span><br><span class="line">        <span class="keyword">if</span> cur_node.v <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">            visited.add(cur_node.v)</span><br><span class="line">            total += cur_node.weight</span><br><span class="line">            <span class="keyword">if</span> prev:</span><br><span class="line">                path.append((prev,cur_node.v,cur_node.weight))</span><br><span class="line">            prev = cur_node.v</span><br><span class="line">            <span class="keyword">for</span> neighbour <span class="keyword">in</span> graph[cur_node.v]:</span><br><span class="line">                <span class="keyword">if</span> neighbour <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">                    heap.push(Node(neighbour, graph[cur_node.v][neighbour]))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> total,path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> weight,path</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    graph_dict = &#123;  <span class="string">"v1"</span>:&#123;<span class="string">"v2"</span>: <span class="number">32</span>, <span class="string">"v4"</span>: <span class="number">17</span>&#125;,</span><br><span class="line">                    <span class="string">"v2"</span>:&#123;<span class="string">"v1"</span>:<span class="number">32</span>, <span class="string">"v5"</span>: <span class="number">45</span>&#125;,</span><br><span class="line">                    <span class="string">"v3"</span>:&#123;<span class="string">"v7"</span>:<span class="number">5</span>,<span class="string">"v4"</span>:<span class="number">18</span>&#125;,</span><br><span class="line">                    <span class="string">"v4"</span>:&#123;<span class="string">"v3"</span>:<span class="number">18</span>,<span class="string">"v1"</span>:<span class="number">17</span>, <span class="string">"v5"</span>:<span class="number">10</span>,<span class="string">"v8"</span>:<span class="number">3</span>&#125;,</span><br><span class="line">                    <span class="string">"v5"</span>:&#123;<span class="string">"v4"</span>:<span class="number">10</span>,<span class="string">"v2"</span>:<span class="number">45</span>,<span class="string">"v9"</span>:<span class="number">25</span>,<span class="string">"v6"</span>:<span class="number">28</span>&#125;,</span><br><span class="line">                    <span class="string">"v6"</span>:&#123;<span class="string">"v5"</span>:<span class="number">28</span>,<span class="string">"v10"</span>:<span class="number">6</span>&#125;,</span><br><span class="line">                    <span class="string">"v7"</span>:&#123;<span class="string">"v3"</span>:<span class="number">5</span>,<span class="string">"v8"</span>:<span class="number">59</span>&#125;,</span><br><span class="line">                    <span class="string">"v8"</span>:&#123;<span class="string">"v4"</span>:<span class="number">3</span>,<span class="string">"v7"</span>:<span class="number">59</span>,<span class="string">"v9"</span>:<span class="number">4</span>&#125;,</span><br><span class="line">                    <span class="string">"v9"</span>:&#123;<span class="string">"v8"</span>:<span class="number">4</span>,<span class="string">"v5"</span>:<span class="number">25</span>,<span class="string">"v10"</span>:<span class="number">12</span>&#125;,</span><br><span class="line">                    <span class="string">"v10"</span>:&#123;<span class="string">"v9"</span>:<span class="number">12</span>,<span class="string">"v6"</span>:<span class="number">6</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    weight,path = prim(graph_dict, <span class="string">'v1'</span>)</span><br><span class="line">    print(weight)</span><br><span class="line">    print(path)</span><br><span class="line"></span><br><span class="line">    weight,path = kruskal(graph_dict)</span><br><span class="line">    print(weight)</span><br><span class="line">    print(path)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Minimum-Spanning-Trees&quot;&gt;&lt;a href=&quot;#Minimum-Spanning-Trees&quot; class=&quot;headerlink&quot; title=&quot;Minimum Spanning Trees&quot;&gt;&lt;/a&gt;Minimum Spanning Tre
      
    
    </summary>
    
    
      <category term="Data Structure and Algorithm" scheme="https://zhangruochi.com/categories/Data-Structure-and-Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>Unordered Data Structure</title>
    <link href="https://zhangruochi.com/Unordered-Data-Structure/2020/01/24/"/>
    <id>https://zhangruochi.com/Unordered-Data-Structure/2020/01/24/</id>
    <published>2020-01-24T15:17:20.000Z</published>
    <updated>2020-01-25T21:02:01.118Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hashing"><a href="#Hashing" class="headerlink" title="Hashing"></a>Hashing</h3><p>We want to define a keyspace, a (mathematical) description of the keys for a set of data, using a <code>function</code> to map the keyspace into a small set of integers.</p><p>A Hash Table consists of three things:</p><ul><li>Hash Function</li><li>An array</li><li>Collision</li></ul><h4 id="Hash-Function"><a href="#Hash-Function" class="headerlink" title="Hash Function"></a>Hash Function</h4><p>Our hash function consists of two parts:</p><ul><li>A hash: transfrom input to an integer(index)</li><li>A compression: make the hash function within the bounds of the arrays(%N).</li></ul><p>Characteristics of a good hash function:</p><ul><li>Computation Time</li><li>Deterministic</li><li>Satisfythe SUHA(simple unifrom hashing assumption)</li></ul><h4 id="std-map"><a href="#std-map" class="headerlink" title="std::map"></a>std::map</h4><ol><li><code>std::map</code></li></ol><ul><li>std::operator[] </li><li>::insert ::erase</li><li>::lower_bound(key) -&gt; Iterator to first element ≤ key </li><li>::upper_bound(key) -&gt; Iterator to first element &gt; key</li></ul><ol><li>std::unordered_map</li></ol><ul><li>std::operator[]</li><li>std::insert </li><li>std::erase</li><li>std::load_factor()</li><li>std::max_load_factor(ml) -&gt; Sets the max load factor</li></ul><h3 id="Disjoint-Sets"><a href="#Disjoint-Sets" class="headerlink" title="Disjoint Sets"></a>Disjoint Sets</h3><blockquote><p><a href="https://zhangruochi.com/Union-Find/2019/11/19/">https://zhangruochi.com/Union-Find/2019/11/19/</a></p></blockquote><ul><li>Maintain a collection S = {$s_0$, $s_1$, \cdots,  $s_k$}.</li><li>Each set has a <strong>representative member</strong>.</li></ul><h4 id="Disjoint-Sets-ADT"><a href="#Disjoint-Sets-ADT" class="headerlink" title="Disjoint Sets ADT"></a>Disjoint Sets ADT</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeSet</span><span class="params">(<span class="keyword">const</span> T &amp; t)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">const</span> T &amp; k1, <span class="keyword">const</span> T &amp; k2)</span></span>; </span><br><span class="line"><span class="function">T &amp; <span class="title">find</span><span class="params">(<span class="keyword">const</span> T &amp; k)</span></span>;</span><br></pre></td></tr></table></figure><p>In an Disjoint Sets implemented with smart unions and path compression on find</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> DisjointSets::find(<span class="keyword">int</span> i) &#123; </span><br><span class="line">    <span class="keyword">if</span> ( s[i] &lt; <span class="number">0</span> ) &#123; </span><br><span class="line">        <span class="keyword">return</span> i; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="keyword">return</span> _find( s[i] ); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> DisjointSets::unionBySize(<span class="keyword">int</span> root1, <span class="keyword">int</span> root2) &#123; </span><br><span class="line">    <span class="keyword">int</span> newSize = arr_[root1] + arr_[root2];</span><br><span class="line"><span class="comment">// If arr_[root1] is less than (more negative), it is the larger set; // we union the smaller set, root2, with root1.</span></span><br><span class="line">    <span class="keyword">if</span> ( arr_[root1] &lt; arr_[root2] ) &#123;</span><br><span class="line">        arr_[root2] = root1;</span><br><span class="line">        arr_[root1] = newSize; </span><br><span class="line">    &#125;</span><br><span class="line">      <span class="comment">// Otherwise, do the opposite:</span></span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        arr_[root1] = root2;</span><br><span class="line">        arr_[root2] = newSize; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DisjointSets</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> s[<span class="number">256</span>];</span><br><span class="line"></span><br><span class="line">    DisjointSets() &#123; <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) s[i] = <span class="number">-1</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Modify the find() method below</span></span><br><span class="line"><span class="comment"> * to implement path compression</span></span><br><span class="line"><span class="comment"> * so that element i and all of</span></span><br><span class="line"><span class="comment"> * its ancestors in the up-tree</span></span><br><span class="line"><span class="comment"> * point to directly to the root</span></span><br><span class="line"><span class="comment"> * after find() completes.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> DisjointSets::find(<span class="keyword">int</span> i) &#123;</span><br><span class="line">  <span class="keyword">if</span> ( s[i] &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    s[i] = find(s[i]);</span><br><span class="line">    <span class="keyword">return</span> s[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  DisjointSets d;</span><br><span class="line"></span><br><span class="line">  d.s[<span class="number">1</span>] = <span class="number">3</span>;</span><br><span class="line">  d.s[<span class="number">3</span>] = <span class="number">5</span>;</span><br><span class="line">  d.s[<span class="number">5</span>] = <span class="number">7</span>;</span><br><span class="line">  d.s[<span class="number">7</span>] = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"d.find(3) = "</span> &lt;&lt; d.find(<span class="number">3</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"d.s(1) = "</span> &lt;&lt; d.s[<span class="number">1</span>] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"d.s(3) = "</span> &lt;&lt; d.s[<span class="number">3</span>] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"d.s(5) = "</span> &lt;&lt; d.s[<span class="number">5</span>] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"d.s(7) = "</span> &lt;&lt; d.s[<span class="number">7</span>] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Graph"><a href="#Graph" class="headerlink" title="Graph"></a>Graph</h3><h4 id="Graph-ADT"><a href="#Graph-ADT" class="headerlink" title="Graph ADT"></a>Graph ADT</h4><p>Data:</p><ul><li>Vertices</li><li>Edges</li><li>Some data structure maintaining the structure between vertices and edges.</li></ul><p>Functions:</p><ul><li>insertVertex(K key);</li><li>insertEdge(Vertex v1, Vertex v2, K key);</li><li>removeVertex(Vertex v);</li><li>removeEdge(Vertex v1, Vertex v2);</li><li>incidentEdges(Vertex v);</li><li>areAdjacent(Vertex v1, Vertex v2);</li><li>origin(Edge e);</li><li>destination(Edge e);</li></ul><h4 id="Graph-Implementation-Edge-List"><a href="#Graph-Implementation-Edge-List" class="headerlink" title="Graph Implementation: Edge List"></a>Graph Implementation: Edge List</h4><ul><li>insertVertex: O(1)</li><li>removeVertex: O(1)</li><li>areAdjancet: O(m)</li><li>incidentEdges: O(m)</li></ul><h4 id="Graph-Implementation-Adjacnecy-Matrix"><a href="#Graph-Implementation-Adjacnecy-Matrix" class="headerlink" title="Graph Implementation: Adjacnecy Matrix"></a>Graph Implementation: Adjacnecy Matrix</h4><ul><li>insertVertex: O(n)</li><li>removeVertex: O(n)</li><li>areAdjancet: O(1)</li><li>incidentEdges: O(n)</li></ul><h4 id="Graph-Implementation-Adjacnecy-List"><a href="#Graph-Implementation-Adjacnecy-List" class="headerlink" title="Graph Implementation: Adjacnecy List"></a>Graph Implementation: Adjacnecy List</h4><ul><li>insertVertex: O(1)</li><li>removeVertex: O(degree v)</li><li>areAdjancet: min(dgree(v1), degree(v2))</li><li>incidentEdges: O(degree v)</li></ul><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="1.png" width="50%" height="50%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Graph</div></center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Hashing&quot;&gt;&lt;a href=&quot;#Hashing&quot; class=&quot;headerlink&quot; title=&quot;Hashing&quot;&gt;&lt;/a&gt;Hashing&lt;/h3&gt;&lt;p&gt;We want to define a keyspace, a (mathematical) des
      
    
    </summary>
    
    
      <category term="Data Structure and Algorithm" scheme="https://zhangruochi.com/categories/Data-Structure-and-Algorithm/"/>
    
      <category term="Programming Language" scheme="https://zhangruochi.com/categories/Programming-Language/"/>
    
      <category term="C++" scheme="https://zhangruochi.com/categories/Programming-Language/C/"/>
    
    
  </entry>
  
  <entry>
    <title>C Plus Plus Reference</title>
    <link href="https://zhangruochi.com/C-Plus-Plus-Reference/2020/01/23/"/>
    <id>https://zhangruochi.com/C-Plus-Plus-Reference/2020/01/23/</id>
    <published>2020-01-23T14:54:31.000Z</published>
    <updated>2020-01-23T15:23:37.582Z</updated>
    
    <content type="html"><![CDATA[<ul><li>在引用的使用中，单纯给某个变量取个别名是毫无意义的，引用的目的主要用于在函数参数传递中，解决大块数据或对象的传递效率和空间不如意的问题。</li><li>用引用传递函数的参数，能保证参数传递中不产生副本，提高传递的效率，且通过const的使用，保证了引用传递的安全性。</li><li>引用与指针的区别是，指针通过某个指针变量指向一个对象后，对它所指向的变量间接操作。程序中使用指针，程序的可读性差；而引用本身就是目标变量的别名，对引用的操作就是对目标变量的操作。</li><li>使用引用的时机。流操作符&lt;&lt;和&gt;&gt;、赋值操作符=的返回值、拷贝构造函数的参数、赋值操作符=的参数、其它情况都推荐使用引用。</li></ul><h3 id="引用作为参数"><a href="#引用作为参数" class="headerlink" title="引用作为参数"></a>引用作为参数</h3><p>引用的一个重要作用就是作为函数的参数。以前的C语言中函数参数传递是值传递，如果有大块数据作为参数传递的时候，采用的方案往往是指针，因为这样可以避免将整块数据全部压栈，可以提高程序的效率。但是现在（C++中）又增加了一种同样有效率的选择（在某些特殊情况下又是必须的选择），就是引用。</p><p>传递引用给函数与传递指针的效果是一样的。这时，被调函数的形参就成为原来主调函数中的实参变量或对象的一个别名来使用，所以在被调函数中对形参变量的操作就是对其相应的目标对象（在主调函数中）的操作。</p><p>使用引用传递函数的参数，在内存中并没有产生实参的副本，它是直接对实参操作；而使用一般变量传递函数的参数，当发生函数调用时，需要给形参分配存储单元，形参变量是实参变量的副本；如果传递的是对象，还将调用拷贝构造函数。因此，当参数传递的数据较大时，用引用比用一般变量传递参数的效率和所占空间都好。</p><p>使用指针作为函数的参数虽然也能达到与使用引用的效果，但是，在被调函数中同样要给形参分配存储单元，且需要重复使用”*指针变量名”的形式进行运算，这很容易产生错误且程序的阅读性较差；另一方面，在主调函数的调用点处，必须用变量的地址作为实参。而引用更容易使用，更清晰。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> &amp;p1,  <span class="keyword">int</span> &amp;p2)</span>  <span class="comment">//此处函数的形参p1, p2都是引用 </span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">int</span> p;</span><br><span class="line">    p=p1;  p1=p2;  p2=p; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">swap(a,b);  <span class="comment">//直接以变量a和b作为实参调用swap函数</span></span><br></pre></td></tr></table></figure><h3 id="常引用"><a href="#常引用" class="headerlink" title="常引用"></a>常引用</h3><p>常引用声明方式：</p><blockquote><p>const 类型标识符 &amp;引用名=目标变量名；</p></blockquote><p>用这种方式声明的引用，不能通过引用对目标变量的值进行修改,从而使引用的目标成为const，达到了引用的安全性。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a ;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;ra=a;</span><br><span class="line">ra=<span class="number">1</span>;  <span class="comment">//错误，不能通过引用对目标变量的值进行修改</span></span><br><span class="line">a=<span class="number">1</span>;  <span class="comment">//正确</span></span><br></pre></td></tr></table></figure><h3 id="引用作为返回值"><a href="#引用作为返回值" class="headerlink" title="引用作为返回值"></a>引用作为返回值</h3><ul><li>以引用返回函数值，定义函数时需要在函数名前加 <code>&amp;</code></li><li>用引用返回一个函数值的最大好处是，在内存中不产生被返回值的副本</li><li>将引用作为函数返回值时应该注意不能返回局部数据（例如局部变量、局部对象、局部数组等）的引用，因为当函数调用完成后局部数据就会被销毁，有可能在下次使用时数据就不存在了，C++ 编译器检测到该行为时也会给出警告；</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> &amp; <span class="title">func</span><span class="params">(<span class="keyword">int</span> &amp;n)</span> </span>&#123;</span><br><span class="line">    n += <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> &amp;b = func(a);   <span class="comment">// 传递a的引用给b</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a = %d, b = %d, &amp;a = %p, &amp;b = %p\n"</span>, a, b, &amp;a, &amp;b);</span><br><span class="line">    b++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a = %d, b = %d\n"</span>, a, b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> y = func(x);    <span class="comment">// 用y接收func()的返回值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"x = %d, y = %d, &amp;x = %p, &amp;y = %p\n"</span>, x, y, &amp;x, &amp;y);</span><br><span class="line">    y++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"x = %d, y = %d\n"</span>, x, y);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a = 20, b = 20, &amp;a = 0x7fff159e9214, &amp;b = 0x7fff159e9214</span></span><br><span class="line"><span class="comment">// a = 21, b = 21</span></span><br><span class="line"><span class="comment">// x = 20, y = 20, &amp;x = 0x7fff159e9218, &amp;y = 0x7fff159e921c</span></span><br><span class="line"><span class="comment">// x = 20, y = 21</span></span><br></pre></td></tr></table></figure><h3 id="引用类型的类成员变量"><a href="#引用类型的类成员变量" class="headerlink" title="引用类型的类成员变量"></a>引用类型的类成员变量</h3><ol><li>不能有默认构造函数，必须提供构造函数</li><li>构造函数的形参必须为引用类型</li><li>初始化必须在成员初始化链表内完成</li></ol><p>凡是有引用类型的成员变量的类，不能有缺省构造函数。默认构造函数没有对引用成员提供默认的初始化机制，也因此造成引用未初始化的编译错误。</p><p>不能直接在构造函数里初始化，必须用到初始化列表，且形参也必须是引用类型。构造函数分为初始化和计算两个阶段，前者对应成员初始化链表，后者对应构造函数函数体。引用必须在初始化阶段，也即在成员初始化链表中完成，否则编译时会报错（引用未初始化）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ref</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">        Ref (<span class="keyword">int</span> &amp;target) : myref(target) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Ref constructor"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">printRef</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"myref is: "</span> &lt;&lt; myref &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">virtual</span> ~Ref () &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">int</span> &amp;myref;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">20</span>;</span><br><span class="line">    <span class="function">Ref <span class="title">r</span><span class="params">(a)</span></span>;</span><br><span class="line">    r.printRef();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> &amp;b = a;</span><br><span class="line">    <span class="function">Ref <span class="title">r1</span><span class="params">(b)</span></span>;</span><br><span class="line">    r1.printRef();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// error:引用定义时必须初始化</span></span><br><span class="line">    <span class="comment">// int &amp;c;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://www.cnblogs.com/xiaofengkang/archive/2011/05/16/2048262.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiaofengkang/archive/2011/05/16/2048262.html</a></li><li><a href="https://www.zfl9.com/cpp-refer.html" target="_blank" rel="noopener">https://www.zfl9.com/cpp-refer.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;在引用的使用中，单纯给某个变量取个别名是毫无意义的，引用的目的主要用于在函数参数传递中，解决大块数据或对象的传递效率和空间不如意的问题。&lt;/li&gt;
&lt;li&gt;用引用传递函数的参数，能保证参数传递中不产生副本，提高传递的效率，且通过const的使用，保证了引用传递的
      
    
    </summary>
    
    
      <category term="Programming Language" scheme="https://zhangruochi.com/categories/Programming-Language/"/>
    
      <category term="C++" scheme="https://zhangruochi.com/categories/Programming-Language/C/"/>
    
    
  </entry>
  
  <entry>
    <title>Ordered Data Structures</title>
    <link href="https://zhangruochi.com/Ordered-Data-Structures/2020/01/22/"/>
    <id>https://zhangruochi.com/Ordered-Data-Structures/2020/01/22/</id>
    <published>2020-01-22T18:47:51.000Z</published>
    <updated>2020-01-24T01:46:32.353Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h3><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="1.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Arrays</div></center><h4 id="Initialization"><a href="#Initialization" class="headerlink" title="Initialization"></a>Initialization</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 静态分配</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>&#125;; <span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>]=&#123;<span class="number">0</span>&#125;; <span class="comment">//正确，省略初始化最后一个元素,最后省略的元素初始化为0</span></span><br><span class="line"><span class="keyword">int</span> a[n]=&#123;<span class="number">0</span>&#125;; <span class="comment">// 注意n必须为const类型，否则错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态分配</span></span><br><span class="line"><span class="keyword">int</span> *a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>] ();  <span class="comment">// 每个元素初始化为0,括号内不能写其他值，只能初始化为0</span></span><br><span class="line"><span class="keyword">int</span>* a = <span class="keyword">new</span> <span class="keyword">int</span>[n];<span class="comment">// 注意n必须为const</span></span><br></pre></td></tr></table></figure><h4 id="Array-Limitation-1"><a href="#Array-Limitation-1" class="headerlink" title="Array Limitation #1"></a>Array Limitation #1</h4><p>All data in an array must be of the same type</p><ul><li>An integer array must only contain integers. </li><li>A string array must only contain strings.</li></ul><p>We know two facts about arrays:</p><ul><li>Elements are all the same type.</li><li>The size (number of bytes) of the type of data is known.</li></ul><p>We can calculate the offset to any given index from the start of the array:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Create an array of 10 primes:</span></span><br><span class="line">  <span class="keyword">int</span> values[<span class="number">10</span>] = &#123; <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">17</span>, <span class="number">21</span>, <span class="number">23</span> &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Print the size of each type `int`:</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">int</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(values) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Using pointer arithmetic, ask the computer to calculate</span></span><br><span class="line">  <span class="comment">// the offset from the beginning of the array to [2]:</span></span><br><span class="line">  <span class="keyword">int</span> offset = (<span class="keyword">long</span>)&amp;(values[<span class="number">2</span>]) - (<span class="keyword">long</span>)&amp;(values[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; offset &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output: </span></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 40</span></span><br><span class="line"><span class="comment">// 8</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Simple C++ class for representing a Cube (with constructors).</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @author</span></span><br><span class="line"><span class="comment"> *   Wade Fagen-Ulmschneider &lt;waf@illinois.edu&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> uiuc &#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Cube</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">      Cube(<span class="keyword">double</span> length);  <span class="comment">// One argument constructor</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">double</span> <span class="title">getVolume</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">double</span> <span class="title">getSurfaceArea</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">setLength</span><span class="params">(<span class="keyword">double</span> length)</span></span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> Cube &amp; other);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">      <span class="keyword">double</span> length_;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Calculating the memory seperation of elements in an array.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @author</span></span><br><span class="line"><span class="comment"> *   Wade Fagen-Ulmschneider &lt;waf@illinois.edu&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../Cube.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> uiuc::Cube;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Create an array of 3 `Cube`s:</span></span><br><span class="line">  Cube cubes[<span class="number">3</span>] = &#123; Cube(<span class="number">11</span>), Cube(<span class="number">42</span>), Cube(<span class="number">400</span>) &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Print the size of each type `Cube`:</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">double</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(Cube) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Using pointer arithmetic, ask the computer to calculate</span></span><br><span class="line">  <span class="comment">// the offset from the beginning of the array to [2]:</span></span><br><span class="line">  <span class="keyword">int</span> offset = (<span class="keyword">long</span>)&amp;(cubes[<span class="number">2</span>]) - (<span class="keyword">long</span>)&amp;(cubes[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; offset &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 8</span></span><br><span class="line"><span class="comment">// 8</span></span><br><span class="line"><span class="comment">// 16</span></span><br></pre></td></tr></table></figure><h4 id="Array-Limitation-2"><a href="#Array-Limitation-2" class="headerlink" title="Array Limitation #2"></a>Array Limitation #2</h4><p>Arrays have a fixed capacity.</p><ul><li>Arrays must store their data sequentially in memory.</li><li>The <code>capacity</code> of an array is the maximum number of elements that can be stored.</li><li>The <code>size</code> of an array is the current number of elements stored in the array.</li></ul><p>The only way to add another element is to allocate a new, larger array and copy over all of the data</p><h3 id="std-vector"><a href="#std-vector" class="headerlink" title="std::vector"></a>std::vector</h3><p>The std::vector implements an array that dynamically grows in size automatically. However, all properties remain true:</p><ul><li>Array elements are a fixed data type.</li><li>At any given point, the array has a fixed capacity.</li><li>The array must be expanded when the capacity is reached.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Calculating the memory seperation of elements in a std::vector.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @author</span></span><br><span class="line"><span class="comment"> *   Wade Fagen-Ulmschneider &lt;waf@illinois.edu&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../Cube.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> uiuc::Cube;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Cube&gt; cubes = &#123; Cube(<span class="number">11</span>), Cube(<span class="number">42</span>), Cube(<span class="number">400</span>) &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Examine capacity:  </span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Initial Capacity: "</span> &lt;&lt; cubes.capacity() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  cubes.push_back( Cube(<span class="number">800</span>) );</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Size after adding: "</span> &lt;&lt; cubes.size() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Capacity after adding: "</span> &lt;&lt; cubes.capacity() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Using pointer arithmetic, ask the computer to calculate</span></span><br><span class="line">  <span class="comment">// the offset from the beginning of the array to [2]:</span></span><br><span class="line">  <span class="keyword">int</span> offset = (<span class="keyword">long</span>)&amp;(cubes[<span class="number">2</span>]) - (<span class="keyword">long</span>)&amp;(cubes[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Memory separation: "</span> &lt;&lt; offset &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Find a specific `target` cube in the array:</span></span><br><span class="line">  Cube target = Cube(<span class="number">400</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">0</span>; i &lt; cubes.size(); i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (target == cubes[i]) &#123;</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Found target at ["</span> &lt;&lt; i &lt;&lt; <span class="string">"]"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Linked-List"><a href="#Linked-List" class="headerlink" title="Linked List"></a>Linked List</h3><p>A list <code>node</code> refers to pair of both the data and the link. Zero or more ListNode elements linked together form a Linked List.</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="2.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Linked List</div></center><ul><li>A pointer called the “head pointer” stores the link to the beginning of the list.</li><li>A pointer to NULL (Ø) marks the end of the list.</li></ul><blockquote><p>List.h</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">const</span> T &amp; <span class="keyword">operator</span>[](<span class="keyword">unsigned</span> index);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertAtFront</span><span class="params">(<span class="keyword">const</span> T &amp; data)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We define this constructor to make sure that head_ is null-initialized.</span></span><br><span class="line">    List() : head_(<span class="literal">nullptr</span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We define a destructor to delete the memory allocated for the ListNode</span></span><br><span class="line">    <span class="comment">// objects when the List is destroyed.</span></span><br><span class="line">    ~List() &#123;</span><br><span class="line">      <span class="comment">// We'll walk through from the head.</span></span><br><span class="line">      ListNode *thru = head_;</span><br><span class="line">      <span class="keyword">while</span> (thru != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="comment">// Copy the address that the "thru" pointer has currently.</span></span><br><span class="line">        ListNode* toDelete = thru;</span><br><span class="line">        <span class="comment">// Step the pointer to the "next" pointer of the current node.</span></span><br><span class="line">        thru = thru-&gt;next;</span><br><span class="line">        <span class="comment">// Now, finally, we can delete the toDelete pointer. We could not</span></span><br><span class="line">        <span class="comment">// delete it before we stepped away from it above, because we needed</span></span><br><span class="line">        <span class="comment">// the next pointer information first.</span></span><br><span class="line">        <span class="keyword">delete</span> toDelete;</span><br><span class="line">        <span class="comment">// We don't strictly need to set toDelete to nullptr here because</span></span><br><span class="line">        <span class="comment">// it goes out of scope immediately after, but remember that you</span></span><br><span class="line">        <span class="comment">// should generally do this after deleting a pointer:</span></span><br><span class="line">        toDelete = <span class="literal">nullptr</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line">      <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">const</span> T &amp; data;</span><br><span class="line">        ListNode *next;</span><br><span class="line">        ListNode(<span class="keyword">const</span> T &amp; data) : data(data), next(<span class="literal">nullptr</span>) &#123; &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    ListNode *head_;   <span class="comment">/*&lt; Head pointer for our List */</span></span><br><span class="line">    </span><br><span class="line">    ListNode* _find(<span class="keyword">const</span> T &amp; data);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>List.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Simple linked-memory, templated list class.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @author</span></span><br><span class="line"><span class="comment"> *   Wade Fagen-Ulmschneider &lt;waf@illinois.edu&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Redundantly make sure theat List.h is included. Since List.h is written</span></span><br><span class="line"><span class="comment">// to include this file, we won't need to explicitly include List.hpp in</span></span><br><span class="line"><span class="comment">// the main.cpp file.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"List.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">const</span> T &amp; List&lt;T&gt;::<span class="keyword">operator</span>[](<span class="keyword">unsigned</span> index) &#123;</span><br><span class="line">  <span class="comment">// Start a `thru` pointer to advance thru the list:</span></span><br><span class="line">  ListNode *thru = head_;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Loop until the end of the list (or until a `nullptr`):</span></span><br><span class="line">  <span class="keyword">while</span> (index &gt; <span class="number">0</span> &amp;&amp; thru-&gt;next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    thru = thru-&gt;next;</span><br><span class="line">    index--;</span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line">  <span class="comment">// Return the data:</span></span><br><span class="line">  <span class="keyword">return</span> thru-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> List&lt;T&gt;::insertAtFront(<span class="keyword">const</span> T &amp; data) &#123;</span><br><span class="line">  <span class="comment">// Create a new ListNode on the heap:</span></span><br><span class="line">  ListNode *node = <span class="keyword">new</span> ListNode(data);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set the new node’s next pointer point the current</span></span><br><span class="line">  <span class="comment">// head of the List:</span></span><br><span class="line">  node-&gt;next = head_;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set the List’s head pointer to be the new node:</span></span><br><span class="line">  head_ = node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Finds and returns the ListNode containing `data` in the</span></span><br><span class="line"><span class="comment"> * List or `nullptr` if the data is not found.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">typename</span> List&lt;T&gt;::ListNode *List&lt;T&gt;::_find(<span class="keyword">const</span> T &amp; data) &#123;</span><br><span class="line">  ListNode *thru = head_;</span><br><span class="line">  <span class="keyword">while</span> (thru != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (thru-&gt;data == data) &#123; <span class="keyword">return</span> thru; &#125;</span><br><span class="line">    thru = thru-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nullptr</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="List-Capacity"><a href="#List-Capacity" class="headerlink" title="List Capacity"></a>List Capacity</h4><p>In a list, the time it takes to access a given index grows based on the size of the list.(In contrast, an array can access any element in a constant, fixed amount of time. Therefore, for accessing a given index, an array is faster than a list.)</p><h4 id="Linked-Memory"><a href="#Linked-Memory" class="headerlink" title="Linked Memory"></a>Linked Memory</h4><ul><li>Linked memory stores data in “nodes” linked together by “links” (pointers).</li><li>A basic linked memory structure is a Linked List, which consists of zero or more ListNodes lined together and a head pointer.</li><li>A linked list provides a flexible alternative to an array.</li></ul><h3 id="Array-and-List-Operations"><a href="#Array-and-List-Operations" class="headerlink" title="Array and List Operations"></a>Array and List Operations</h3><p>Arrays and Lists are both ordered collections of data. There are several key operations common to both all ordered collections that are worth analyzing.</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="3.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Array and List</div></center><ol><li>Objective: Access a given index in the collection.<ul><li>Array: <code>O(1)</code></li><li>List: <code>O(n)</code></li></ul></li><li>Objective: Insert an element at the front<ul><li>Array: <code>O(1)</code> (Amortized constant time when array size is doubled when copied)</li><li>List: <code>O(1)</code></li></ul></li><li>Objective: Given data, find the location of that data in the collection.<ul><li>Unsorted Array: <code>O(n)</code></li><li>Sorted Array: <code>O( lg(n) )</code></li><li>List: <code>O(n)</code></li></ul></li><li>Objective: Given an element (array index), insert a new element immediately afterwards.<ul><li>Array: <code>O(n)</code></li><li>List: <code>O(1)</code></li></ul></li><li>Objective: Given an element (ListNode or index), delete the element immediately afterwards.<ul><li>Array: <code>O(n)</code></li><li>List: <code>O(1)</code></li></ul></li></ol><h3 id="Queue-Data-Structure"><a href="#Queue-Data-Structure" class="headerlink" title="Queue (Data Structure)"></a>Queue (Data Structure)</h3><p>A queue is a first-in first-out data structure that is similar to waiting in a line or <code>queue</code>.</p><p>A structure’s Abstract Data Type (ADT) is how data interacts with the structure. An ADT is not an implementation, it is a description.</p><h4 id="Queue-ADT"><a href="#Queue-ADT" class="headerlink" title="Queue ADT"></a>Queue ADT</h4><ul><li><strong>create</strong> : Creates an empty queue</li><li><strong>push</strong> : Adds data to the back of the queue</li><li><strong>pop</strong> : Removes data from the front of the queue empty è Returns true if the queue is empty</li><li><strong>empty</strong> : Returns true if the queue is empty</li></ul><p>A queue may be implemented with an array or a doubly-linked list. Both an array-based and a list-based implementation can be built to run in constant, O(1) running time.</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="4.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Queue</div></center><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Create a std::queue:Duquesne Light</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; q;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add several strings to the queue:</span></span><br><span class="line">  q.push( <span class="string">"Orange"</span> );</span><br><span class="line">  q.push( <span class="string">"Blue"</span> );</span><br><span class="line">  q.push( <span class="string">"Illinois"</span> );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Print the front of the queue out and pop it off:</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"First pop(): "</span> &lt;&lt; q.front() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  q.pop();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add another string and then print ouf the front of the queue:</span></span><br><span class="line">  q.push( <span class="string">"Illini"</span> );</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Second pop(): "</span> &lt;&lt; q.front() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Stack-Data-Structure"><a href="#Stack-Data-Structure" class="headerlink" title="Stack (Data Structure)"></a>Stack (Data Structure)</h3><p>A stack is a last-in first-out data structure that is similar to a pile (stack) of papers.</p><h4 id="Stack-ADT"><a href="#Stack-ADT" class="headerlink" title="Stack ADT"></a>Stack ADT</h4><ul><li><strong>create</strong> : Creates an empty stack </li><li><strong>push</strong> : Adds data to the top of the stack</li><li><strong>pop</strong> : Removes data from the top of the stack </li><li><strong>empty</strong> : Returns true if the stack is empty</li></ul><p>A stack may be implemented with an array or a linked list. Both an array-based and a list-based implementation can be built to run in constant, O(1) running time.</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="5.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Stack</div></center><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Create a std::stack:</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">stack</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; s;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add several strings to the stack:</span></span><br><span class="line">  s.push( <span class="string">"Orange"</span> );</span><br><span class="line">  s.push( <span class="string">"Blue"</span> );</span><br><span class="line">  s.push( <span class="string">"Illinois"</span> );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Print the front of the stack out and pop it off:</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"First pop(): "</span> &lt;&lt; s.top() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  s.pop();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add another string and then print ouf the front of the stack:</span></span><br><span class="line">  s.push( <span class="string">"Illini"</span> );</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Second pop(): "</span> &lt;&lt; s.top() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Tree"><a href="#Tree" class="headerlink" title="Tree"></a>Tree</h3><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="6.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Tree</div></center><h4 id="Terminology"><a href="#Terminology" class="headerlink" title="Terminology"></a>Terminology</h4><p>Most ancestry terms apply as expected:</p><ul><li>Sibling<br><code>B</code> and <code>D</code> are siblings. </li><li>Ancestor<br><code>M</code>, <code>L</code>, and <code>D</code> share <code>A</code> as a common ancestor.</li><li>Grandchild / grandchildren<br><code>M</code> is a <code>D</code>’s grandchild.</li><li><p>Grandparent<br><code>D</code> is <code>M</code>’s grandparent.</p></li><li><p>Trees formed with nodes and edges.</p></li><li>Trees must be <code>rooted</code>, <code>directed</code>, and <code>acyclic</code>.</li><li>The relationship between nodes in a tree follow classical ancestry terms (parent, child, etc).</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinaryTree</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line">      <span class="keyword">public</span>:</span><br><span class="line">        <span class="comment">// *See note below about how references are being used here.</span></span><br><span class="line">        T &amp; data;</span><br><span class="line">        <span class="comment">// Note that you can declare multiple pointers on the same line as</span></span><br><span class="line">        <span class="comment">// shorthand, like this:</span></span><br><span class="line">        <span class="comment">//   TreeNode *left, *right;</span></span><br><span class="line">        <span class="comment">// But since this requires you to write the "*" with each variable</span></span><br><span class="line">        <span class="comment">// name, it can be a little confusing, or prone to making a mistake.</span></span><br><span class="line">        <span class="comment">// Instead, you can declare the pointers on separate lines like this:</span></span><br><span class="line">        TreeNode* left;</span><br><span class="line">        TreeNode* right;</span><br><span class="line">        <span class="comment">// **See note below about how this initialization list is styled.</span></span><br><span class="line">        TreeNode(T &amp; data) : data(data), left(<span class="literal">nullptr</span>), right(<span class="literal">nullptr</span>) &#123; &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    TreeNode *root_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="Property"><a href="#Property" class="headerlink" title="Property"></a>Property</h4><ul><li>The <code>height</code> of a binary tree is the number of edges in the longest path from the root to a leaf.</li><li>A binary tree is <code>full</code> if and only if every node has either zero children or two children.</li><li>A binary tree is <code>perfect</code> if and only if all interior nodes have two children and leaves are at the same level.</li><li>A binary tree is <code>complete</code> if and only if the tree is perfect up until the last level and all leaf nodes on the last level are pushed to the left.</li></ul><h3 id="Binary-Search-Tree"><a href="#Binary-Search-Tree" class="headerlink" title="Binary Search Tree"></a>Binary Search Tree</h3><p>A binary search tree (BST) is an ordered binary tree capable of being used as a search structure:</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="7.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">BST</div></center><p>A binary tree is a BST if for every node in the tree:</p><ul><li>Nodes in the left subtree are less than itself.</li><li>Nodes in the right subtree are greater than itself.</li></ul><h4 id="Dictionary-ADT"><a href="#Dictionary-ADT" class="headerlink" title="Dictionary ADT"></a>Dictionary ADT</h4><ul><li><strong>find</strong> : Finds the data associated with a key in the dictionary</li><li><strong>insert</strong> : Adds a key/data pair to the dictionary </li><li><strong>remove</strong> : Removes a key from the dictionary </li><li><strong>empty</strong> Returns true if the dictionary is empty</li></ul><p>BST-Based Dictionary</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="8.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">BST Dictionary</div></center><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> D&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dictionary</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Dictionary();</span><br><span class="line">    <span class="function"><span class="keyword">const</span> D &amp; <span class="title">find</span><span class="params">(<span class="keyword">const</span> K &amp; key)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> K &amp; key, <span class="keyword">const</span> D &amp; data)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> D &amp; <span class="title">remove</span><span class="params">(<span class="keyword">const</span> K &amp; key)</span></span>;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line">      <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">const</span> K &amp; key;</span><br><span class="line">        <span class="keyword">const</span> D &amp; data;</span><br><span class="line">        TreeNode *left, *right;</span><br><span class="line">        TreeNode(<span class="keyword">const</span> K &amp; key, <span class="keyword">const</span> D &amp; data)</span><br><span class="line">: key(key), data(data), left(<span class="literal">nullptr</span>), right(<span class="literal">nullptr</span>) &#123; &#125;</span><br><span class="line">&#125;;</span><br><span class="line">  TreeNode *head_;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="In-Order-Predecessor-IOP"><a href="#In-Order-Predecessor-IOP" class="headerlink" title="In-Order Predecessor (IOP):"></a>In-Order Predecessor (IOP):</h4><p>The in-order predecessor is the previous node in an in-order traversal of a BST. The IOP of a node will always be the right-most node in<br>the node’s left sub-tree.</p><h4 id="BST-remove"><a href="#BST-remove" class="headerlink" title="BST::remove"></a>BST::remove</h4><ul><li>Zero children: Simple, delete the node. </li><li>One child: Simple, works like a linked list.</li><li>Two children:<ul><li>Find the IOP of the node to be removed.</li><li>Swap with the IOP.</li><li>Remove the node in it’s new position.</li></ul></li></ul><h4 id="BST-Analysis"><a href="#BST-Analysis" class="headerlink" title="BST Analysis"></a>BST Analysis</h4><ul><li>There are <strong>n!</strong> different ways to create BSTs with the same data.<ul><li>The worst-case BST will have a height proportional to the number of nodes.</li><li>An average BST will have a height proportional to the logarithm of the number of nodes.</li></ul></li><li>Using a height balance factor, we can formalize if a given BST is balanced.</li></ul><h3 id="Balanced-BST"><a href="#Balanced-BST" class="headerlink" title="Balanced BST"></a>Balanced BST</h3><p>Balanced BSTs are height-balanced trees that ensures nearly half of the data is<br>located in each subtree:</p><h4 id="BST-Rotations"><a href="#BST-Rotations" class="headerlink" title="BST Rotations"></a>BST Rotations</h4><p><a href="https://zhangruochi.com/AVL-Tree/2019/09/15/">https://zhangruochi.com/AVL-Tree/2019/09/15/</a></p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="9.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">BST Dictionary</div></center><ul><li>BST rotations restore the <code>balance property</code> to a tree after an insert causes a BST to be out of balance.</li><li>Four possible rotations: L, R, LR, RL<br>  – Rotations are local operations.<br>  – Rotations do not impact the broader tree.<br>  – Rotations run in O(1) time.’</li></ul><h3 id="B-tree"><a href="#B-tree" class="headerlink" title="B tree"></a>B tree</h3><blockquote><p><a href="https://www.cnblogs.com/nullzx/p/8729425.html" target="_blank" rel="noopener">https://www.cnblogs.com/nullzx/p/8729425.html</a></p></blockquote><p>大规模数据存储中，实现索引查询这样一个实际背景下，树节点存储的元素数量是有限的（如果元素数量非常多的话，查找就退化成节点内部的线性查找了），这样导致二叉查找树结构由于树的深度过大而造成磁盘I/O读写过于频繁，进而导致查询效率低下，因此我们该想办法降低树的深度，从而减少磁盘查找存取的次数。一个基本的想法就是：采用多叉树结构（由于树节点元素数量是有限的，自然该节点的子树数量也就是有限的）。</p><h4 id="B-Tree-Properties"><a href="#B-Tree-Properties" class="headerlink" title="B-Tree Properties"></a>B-Tree Properties</h4><p>For a B-tree “of order m”:</p><ol><li>All keys within a node are in sorted order. </li><li>Each node contains no more than m-1 keys.</li><li>Each internal node has exactly one more child than key(at most m children, so a B-tree of order m is like an m-way tree). <ul><li>A root node can be a leaf or have [2, m] children.</li><li>Each non-root, internal node has [ceil(m/2), m] children.</li></ul></li><li>All leaves are on the same level.</li></ol><h4 id="B-Tree-Insert"><a href="#B-Tree-Insert" class="headerlink" title="B-Tree Insert"></a>B-Tree Insert</h4><p>插入操作是指插入一条记录，即（key,value）的键值对。如果B树中已存在需要插入的键值对，则用需要插入的value替换旧的value。若B树不存在这个key,则一定是在叶子结点中进行插入操作。</p><ul><li>根据要插入的key的值，找到叶子结点并插入。</li><li>判断当前结点key的个数是否小于等于m-1，若满足则结束，否则进行第3步。</li><li>以结点中间的key为中心分裂成左右两部分，然后将这个中间的key插入到父结点中，这个key的左子树指向分裂后的左半部分，这个key的右子支指向分裂后的右半部分，然后将当前结点指向父结点，继续进行第3步。</li></ul><h4 id="B-tree-Search"><a href="#B-tree-Search" class="headerlink" title="B-tree Search"></a>B-tree Search</h4><p>Use can use the binary search ti replace the linear seach. But it is not important because the process of comsuming most time is <code>_fetchChild</code>.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * BTree class outline.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @author</span></span><br><span class="line"><span class="comment"> *   Wade Fagen-Ulmschneider &lt;waf@illinois.edu&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BTree</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BTreeNode</span> &#123;</span></span><br><span class="line">      <span class="keyword">public</span>:</span><br><span class="line">        K* keys_;</span><br><span class="line">        <span class="keyword">unsigned</span> keys_ct_;</span><br><span class="line">        <span class="keyword">bool</span> _isLeaf;</span><br><span class="line"></span><br><span class="line">        BTreeNode() : keys_(<span class="literal">nullptr</span>), keys_ct_(<span class="number">0</span>), _isLeaf(<span class="literal">true</span>) &#123; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">isLeaf</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    BTreeNode *root_;</span><br><span class="line"></span><br><span class="line">    BTreeNode &amp; _fetchChild(<span class="keyword">unsigned</span> index);</span><br><span class="line">    <span class="keyword">bool</span> _exists(BTreeNode &amp; node, <span class="keyword">const</span> K &amp; key);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"BTree.hpp"</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * An empty BTree.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @author</span></span><br><span class="line"><span class="comment"> *   Wade Fagen-Ulmschneider &lt;waf@illinois.edu&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"BTree.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K&gt;</span><br><span class="line"><span class="keyword">bool</span> BTree&lt;K&gt;::_exists(BTree&lt;K&gt;::BTreeNode &amp; node, <span class="keyword">const</span> K &amp; key) &#123;</span><br><span class="line">  <span class="keyword">unsigned</span> i;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; node.keys_ct_ &amp;&amp; key &lt; node.keys_[i]; i++) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( i &lt; node.keys_ct_ &amp;&amp; key == node.keys_[i] ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( node.isLeaf() ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    BTreeNode nextChild = node._fetchChild(i);</span><br><span class="line">    <span class="keyword">return</span> _exists(nextChild, key);</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K&gt;</span><br><span class="line"><span class="keyword">bool</span> BTree&lt;K&gt;::BTreeNode::isLeaf() <span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="comment">// Stub implementation </span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K&gt;</span><br><span class="line"><span class="keyword">typename</span> BTree&lt;K&gt;::BTreeNode &amp; BTree&lt;K&gt;::_fetchChild(<span class="keyword">unsigned</span> index) &#123;</span><br><span class="line">  <span class="comment">// Stub implementation </span></span><br><span class="line">  <span class="keyword">return</span> *root_;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Heap"><a href="#Heap" class="headerlink" title="Heap"></a>Heap</h3><p>(min)Heap: A <strong>complete</strong> binary tree T is a min-heap if:</p><ul><li>T={} or</li><li>T = {r, $T_L$, $T_R$}, where r is less than the roots of {$T_L$, $T_R$} and {$T_L$, $T_R$} are min-heaps.</li></ul><h4 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">Heap</span>&lt;T&gt;:</span>:_insert(<span class="keyword">const</span> T &amp; key) &#123;</span><br><span class="line"><span class="comment">// Check to ensure there’s space to insert an element // ...if not, grow the array</span></span><br><span class="line"><span class="keyword">if</span> ( size_ == capacity_ ) &#123; _growArray(); &#125;</span><br><span class="line"><span class="comment">// Insert the new element at the end of the array item_[++size] = key;</span></span><br><span class="line">   <span class="comment">// Restore the heap property</span></span><br><span class="line">_heapifyUp(size); </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">Heap</span>&lt;T&gt;:</span>:_insert(<span class="keyword">const</span> T &amp; key) &#123;</span><br><span class="line"><span class="comment">// Check to ensure there’s space to insert an element // ...if not, grow the array</span></span><br><span class="line">    <span class="keyword">if</span> ( size_ == capacity_ ) &#123; _growArray(); &#125;</span><br><span class="line"><span class="comment">// Insert the new element at the end of the array item_[++size] = key;</span></span><br><span class="line">  <span class="comment">// Restore the heap property</span></span><br><span class="line">    _heapifyUp(size); </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">Heap</span>&lt;T&gt;:</span>:_heapifyUp( _________________ ) &#123;</span><br><span class="line">    <span class="keyword">if</span> ( index &gt; _________ ) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( item_[index] &lt; item_[ parent(index) ] ) &#123;</span><br><span class="line">            <span class="built_in">std</span>::swap( item_[index], item_[ parent(index) ] );</span><br><span class="line">            _heapifyUp( ________________ );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="removeMin"><a href="#removeMin" class="headerlink" title="removeMin"></a>removeMin</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">Heap</span>&lt;T&gt;:</span>:_removeMin() &#123;</span><br><span class="line"><span class="comment">// Swap with the last value </span></span><br><span class="line">    T minValue = item_[<span class="number">1</span>]; </span><br><span class="line">    item_[<span class="number">1</span>] = item_[size_]; </span><br><span class="line">    size--;</span><br><span class="line"><span class="comment">// Restore the heap property </span></span><br><span class="line">    _heapifyDown();</span><br><span class="line">  <span class="comment">// Return the minimum value</span></span><br><span class="line">  <span class="keyword">return</span> minValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">Heap</span>&lt;T&gt;:</span>:_heapifyDown(<span class="keyword">int</span> index) &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !_isLeaf(index) ) &#123;</span><br><span class="line">        T minChildIndex = _minChild(index);</span><br><span class="line">        <span class="keyword">if</span> ( item_[index] ___ item_[minChildIndex] ) &#123;</span><br><span class="line">            <span class="built_in">std</span>::swap( item_[index], item_[minChildIndex] );</span><br><span class="line">            _heapifyDown( ________________ ); &#125;</span><br><span class="line">        &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Build-heap"><a href="#Build-heap" class="headerlink" title="Build heap"></a>Build heap</h4><ol><li>Sort the array–it’s a heap!</li><li><p>heapifyUp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">Heap</span>&lt;T&gt;:</span>:buildHeap() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">2</span>; i &lt;= size_; i++) &#123;</span><br><span class="line">        heapifyUp(i); A P N O W</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>heapifyDown</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">Heap</span>&lt;T&gt;:</span>:buildHeap() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = parent(size); i &gt; <span class="number">0</span>; i--) &#123; </span><br><span class="line">        heapifyDown(i);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      Arrays,Vector,LinkList,Binary Tree, AVL Tree, B-Tree, Heap
    
    </summary>
    
    
      <category term="Data Structure and Algorithm" scheme="https://zhangruochi.com/categories/Data-Structure-and-Algorithm/"/>
    
      <category term="Programming Language" scheme="https://zhangruochi.com/categories/Programming-Language/"/>
    
      <category term="C++" scheme="https://zhangruochi.com/categories/Programming-Language/C/"/>
    
    
  </entry>
  
  <entry>
    <title>C++ Review</title>
    <link href="https://zhangruochi.com/C-Plus-Plus-Review/2020/01/21/"/>
    <id>https://zhangruochi.com/C-Plus-Plus-Review/2020/01/21/</id>
    <published>2020-01-21T18:01:14.000Z</published>
    <updated>2020-01-22T11:57:00.083Z</updated>
    
    <content type="html"><![CDATA[<p>C++ is a strongly typed programming language where every variable has a <code>type</code>, <code>name</code>, <code>value</code>, and <code>location</code> in memory.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> value = <span class="number">42</span>;</span><br></pre></td></tr></table></figure><h3 id="C-types"><a href="#C-types" class="headerlink" title="C++ types"></a>C++ types</h3><p>the type of a variable defines the contents of the variable. Every <code>type</code> is either:</p><h4 id="Primitive"><a href="#Primitive" class="headerlink" title="Primitive"></a>Primitive</h4><ul><li>int, stores integers</li><li>char, stores single characters/single byte</li><li>bool, stores a Boolean (true or false)</li><li>float, stores a floating point number</li><li>double, stores a double-precision floating point number </li><li>void, denotes the absence of a value</li></ul><h4 id="User-defined"><a href="#User-defined" class="headerlink" title="User-defined"></a>User-defined</h4><ul><li>Std</li><li>An unbounded number of user-defined types can exist – we’ll create many of our own!</li></ul><h3 id="C-program"><a href="#C-program" class="headerlink" title="C++ program"></a>C++ program</h3><p>Every C++ program must contain a starting point. By the C++ standard, the starting point is a function:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>By convention, the return value of main is 0 (zero) if the program was successful and non-zero on errors.</p><h3 id="Classes"><a href="#Classes" class="headerlink" title="Classes"></a>Classes</h3><h4 id="Encapsulation-1"><a href="#Encapsulation-1" class="headerlink" title="Encapsulation #1"></a>Encapsulation #1</h4><p>C++ classes encapsulate <strong>data</strong> and associated <strong>functionality</strong> into an object.</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="1.png" width="80%" height="90%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Encapsulation</div></center><p>In C++, data and functionality are separated into two separate protections: public and private.</p><ul><li>Public members can be accessed by client code.</li><li>Private members cannot be accessed by client code (only used within the class itself).</li></ul><h4 id="Encapsulation-2"><a href="#Encapsulation-2" class="headerlink" title="Encapsulation #2"></a>Encapsulation #2</h4><p>In C++, the interface (.h file) to the class is defined separately from the implementation (.cpp file).</p><p>A header file (.h) defines the interface to the class, which includes:</p><ul><li>Declaration of all member variables</li><li>Declaration of all member functions</li></ul><p>An implementation file (.cpp) contains the code to implement the class (or other C++ code).</p><h3 id="C-standard-library"><a href="#C-standard-library" class="headerlink" title="C++ standard library"></a>C++ standard library</h3><p>The C++ standard library (std) provides a set of commonly used functionality and data structures to build upon.</p><h4 id="Std-Organization"><a href="#Std-Organization" class="headerlink" title="Std Organization"></a>Std Organization</h4><p>The C++ standard library is organized into many separate sub-libraries that can be #include’d in any C++ program.</p><ul><li>The iostream header includes operations for reading/writing to files and the console itself, including std::cout.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>All functionality used from the standard library will be part of the <code>std namespace</code>.<ul><li>Namespaces allow us to avoid name conflicts for commonly used names.</li><li>If a feature from a namespace is used often, it can be imported into the global space with using:<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ul><blockquote><p>Cube.h</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Simple C++ class for representing a Cube.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @author</span></span><br><span class="line"><span class="comment"> *   Wade Fagen-Ulmschneider &lt;waf@illinois.edu&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// All header (.h) files start with "#pragma once":</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// A class is defined with the `class` keyword, the name</span></span><br><span class="line"><span class="comment">// of the class, curly braces, and a required semicolon</span></span><br><span class="line"><span class="comment">// at the end:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cube</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:  <span class="comment">// Public members:</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getVolume</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getSurfaceArea</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setLength</span><span class="params">(<span class="keyword">double</span> length)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>: <span class="comment">// Private members:</span></span><br><span class="line">    <span class="keyword">double</span> length_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Cube.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Simple C++ class for representing a Cube.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @author</span></span><br><span class="line"><span class="comment"> *   Wade Fagen-Ulmschneider &lt;waf@illinois.edu&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Cube.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> Cube::getVolume() &#123;</span><br><span class="line">  <span class="keyword">return</span> length_ * length_ * length_;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> Cube::getSurfaceArea() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">6</span> * length_ * length_;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Cube::setLength(<span class="keyword">double</span> length) &#123;</span><br><span class="line">  length_ = length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>main.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * C++ code for creating a Cube of length 2.4 units.</span></span><br><span class="line"><span class="comment"> * - See ../cpp-std/main.cpp for a similar program with print statements.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @author</span></span><br><span class="line"><span class="comment"> *   Wade Fagen-Ulmschneider &lt;waf@illinois.edu&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Cube.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Cube c;</span><br><span class="line"></span><br><span class="line">  c.setLength(<span class="number">3.48</span>);</span><br><span class="line">  <span class="keyword">double</span> volume = c.getVolume();</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Volume: "</span> &lt;&lt; volume &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Stack-Memory"><a href="#Stack-Memory" class="headerlink" title="Stack Memory"></a>Stack Memory</h3><p>In C++, the programmer has control over the memory and lifecycle of every variable! By default, variables live in stack memory.</p><p>Stack memory is associated with the <code>current</code> function and the memory’s lifecycle is tied to the function(When the function returns or ends, the stack memory of that function is released).</p><p>Stack memory always starts from high addresses and grows down.</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="2.png" width="50%" height="50%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Encapsulation</div></center><h4 id="amp"><a href="#amp" class="headerlink" title="&amp;"></a>&amp;</h4><p>In C++, the &amp; operator returns the memory address of a variable.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * C++ program using the &amp; operator to find the address of a variable in memory.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @author</span></span><br><span class="line"><span class="comment"> *   Wade Fagen-Ulmschneider &lt;waf@illinois.edu&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> num = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Value: "</span>   &lt;&lt;  num &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Address: "</span> &lt;&lt; &amp;num &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Pointer"><a href="#Pointer" class="headerlink" title="Pointer"></a>Pointer</h4><p>A pointer is a variable that stores the memory address of the data.</p><ul><li>Simply put: pointers are a level of indirection from the data.</li><li>In C++, a pointer is defined by adding an * to the type of the variable.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> * p = &amp;num;</span><br></pre></td></tr></table></figure><ul><li>Given a pointer, a level of indirection can be removed with the dereference operator *.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> * p = &amp;num;</span><br><span class="line"><span class="keyword">int</span> value_in_num = *p; </span><br><span class="line">*p = <span class="number">42</span>;</span><br></pre></td></tr></table></figure><h4 id="Puzzle"><a href="#Puzzle" class="headerlink" title="Puzzle"></a>Puzzle</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">someOtherFunction</span><span class="params">()</span></span>;  <span class="comment">// Forward decl</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Cube.h"</span></span></span><br><span class="line"><span class="keyword">using</span> uiuc::Cube;</span><br><span class="line"></span><br><span class="line"><span class="function">Cube *<span class="title">CreateUnitCube</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Cube cube;</span><br><span class="line">  cube.setLength(<span class="number">15</span>);</span><br><span class="line">  <span class="keyword">return</span> &amp;cube;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Cube *c = CreateUnitCube();</span><br><span class="line">  someOtherFunction();</span><br><span class="line">  <span class="keyword">double</span> a = c-&gt;getSurfaceArea();</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Surface Area: "</span> &lt;&lt; a &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">double</span> v = c-&gt;getVolume();</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Volume: "</span> &lt;&lt; v &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="3.png" width="50%" height="50%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Stack Memory</div></center><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="4.png" width="50%" height="50%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Stack Memory</div></center><h3 id="Heap-Memory"><a href="#Heap-Memory" class="headerlink" title="Heap Memory"></a>Heap Memory</h3><p>Heap memory allows us to create memory independent of the lifecycle of a function.</p><ul><li>The only way to create heap memory in C++ is with the <code>new</code> operator.</li><li>The new operator returns a <code>pointer</code> to the memory storing the data – not an instance of the data itself.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> * numPtr = <span class="keyword">new</span> <span class="keyword">int</span>;</span><br></pre></td></tr></table></figure><h4 id="nullptr"><a href="#nullptr" class="headerlink" title="nullptr"></a>nullptr</h4><p>The C++ keyword nullptr is a pointer that points to the memory address 0x0.</p><ul><li>nullptr represents a pointer to <code>nowhere</code></li><li>Address 0x0 is reserved and never used by the system</li><li>Address 0x0 will always generate an “segmentation fault” when accessed.</li><li>Calls to delete 0x0 are ignored</li></ul><h4 id="Arrow-Operator-gt"><a href="#Arrow-Operator-gt" class="headerlink" title="Arrow Operator (-&gt;)"></a>Arrow Operator (-&gt;)</h4><p>When an object is stored via a pointer, access can be made to member functions using the <code>-&gt;</code> operator:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c -&gt; getVolume();</span><br><span class="line">(*c).getVolume();</span><br></pre></td></tr></table></figure><h3 id="C-program’s-source-code-organization"><a href="#C-program’s-source-code-organization" class="headerlink" title="C++ program’s source code organization"></a>C++ program’s source code organization</h3><ul><li><p><code>.h</code> files are “header files”. These usually have definitions of objects and declarations of global functions. Recently, some people name header files with a “.hpp” suffix instead.</p></li><li><p><code>.cpp</code> files are often called the “implementation files,” or simply the “source files”. This is where most function definitions and main program logic go.</p></li></ul><p>Take the <code>Cube</code> code above as example:</p><p>When you write #include <iostream>, the compiler will look for the iostream header file in a system-wide library path that is located outside of your current directory.</iostream></p><p>#include “Cube.h” just like in the Cube.cpp file. You have to include the necessary headers in every cpp file where they are needed. However, you shouldn’t use #include to literally include one cpp file in another! There is no need to write #include “Cube.cpp” because the function definitions in the Cube.cpp file will be compiled separately and then linked to the code from the main.cpp file.</p><p>The Cube.cpp files and main.cpp files make requests to include various header files. (The compiler might automatically skip some requests because of #pragma once to avoid including multiple times in the same file.) The contents of the requested header files will be temporarily copied into the cpp source code file where they are included. Then, the cpp file with all of its extra included content will be compiled into something called an object file. (Our provided examples keep the object files hidden in a subdirectory, so you don’t need to bother with them. But, if you see a file that has a .o extension, that is an object file.) Each cpp file is separately compiled into an object file. So, in this case Cube.cpp will be compiled into Cube.o, and main.cpp will be compiled into <code>main.o</code>.</p><h3 id="Class-Constructors"><a href="#Class-Constructors" class="headerlink" title="Class Constructors"></a>Class Constructors</h3><p><code>Automatic Default Constructor</code>:  If we do not provide any custom constructors, the C++ compiler provides an automatic default constructor for our class for free. The automatic default constructor will only initialize all member variables to their default values. If any custom constructor is defined, an automatic default constructor is not defined.</p><p><code>Custom Default Constructor</code>: The simplest constructor we can provide is a custom default constructor that specifies the state of the object when the object is constructed. We define one by creating:</p><ul><li>A member function with the same name of the class</li><li>The function takes zero parameters.</li><li>The function does not have a return type.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cube::Cube()  <span class="comment">// custom default constructor</span></span><br></pre></td></tr></table></figure><p><code>Custom Constructors</code>: We can also specify custom, non-default constructors that require client code to supply arguments.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cube::Cube(<span class="keyword">double</span> length)</span><br><span class="line"><span class="comment">// one-argument ctor specifying initial length</span></span><br></pre></td></tr></table></figure><h3 id="Copy-Constructors"><a href="#Copy-Constructors" class="headerlink" title="Copy Constructors"></a>Copy Constructors</h3><p>In C++, a copy constructor is a special constructor that exists to make a copy of an existing object.</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="5.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">copy constructor</div></center><p>If we do not provide a custom copy constructor, the C++ compiler provides an automatic copy constructor for our class for free. The automatic copy constructor will copy the contents of all member variables.</p><p>A custom copy constructor is:</p><ul><li>Has exactly one argument<br>– The argument must be const reference of the same type as the class.</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cube::Cube(const Cube &amp; obj)</span><br></pre></td></tr></table></figure><p>Often, copy constructors are invoked automatically:</p><ul><li>Passing an object as a parameter (by value) </li><li>Returning an object from a function (by value) </li><li>Initializing a new object</li></ul><h3 id="Assignment-Operator"><a href="#Assignment-Operator" class="headerlink" title="Assignment Operator"></a>Assignment Operator</h3><p>A custom assignment operator is:</p><ul><li>Is a public member function of the class.</li><li>Has the function name <code>operator=</code>.</li><li>Has a return value of a reference of the class’ type.</li><li>Has exactly one argument<br>– The argument must be const reference of the class’ type.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Cube &amp; Cube::<span class="keyword">operator</span>=(<span class="keyword">const</span> Cube &amp; obj) &#123;</span><br><span class="line">  length_ = obj.length_;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Assignment operator invoked!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Variable-Storage"><a href="#Variable-Storage" class="headerlink" title="Variable Storage"></a>Variable Storage</h3><p> In C++, an instance of a variable can be stored directly <code>in memory</code>, <code>accessed by pointer</code>, or <code>accessed by reference</code>.</p> <center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="4.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Variable Storage</div></center><h4 id="Direct-Storage"><a href="#Direct-Storage" class="headerlink" title="Direct Storage"></a>Direct Storage</h4><p>By default, variables are stored directly in memory. </p><ul><li>The type of a variable has no modifiers.</li><li>The object takes up exactly its size in memory.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cube c;            <span class="comment">// Stores a Cube in memory</span></span><br><span class="line"><span class="keyword">int</span> i;             <span class="comment">// Stores an integer in memory</span></span><br><span class="line">uiuc::HSLAPixel p; <span class="comment">// Stores a pixel in memory</span></span><br></pre></td></tr></table></figure><h4 id="Storage-by-Pointer"><a href="#Storage-by-Pointer" class="headerlink" title="Storage by Pointer"></a>Storage by Pointer</h4><ul><li>The type of a variable is modified with an asterisk (*). </li><li>A pointer takes a “memory address width” of memory<br>(ex: 64 bits on a 64-bit system).</li><li>The pointer “points” to the allocated space of the object.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cube *c;            <span class="comment">// Pointer to a Cube in memory</span></span><br><span class="line"><span class="keyword">int</span> *i;             <span class="comment">// Pointer to an integer in memory</span></span><br><span class="line">uiuc::HSLAPixel *p; <span class="comment">// Pointer to a pixel in memory</span></span><br></pre></td></tr></table></figure><h4 id="Storage-by-Reference"><a href="#Storage-by-Reference" class="headerlink" title="Storage by Reference"></a>Storage by Reference</h4><ul><li>A reference is an alias to existing memory and is denoted in the type with an ampersand (&amp;).</li><li>A reference <code>does not store</code> memory itself, it is only an alias to another variable.</li><li>The alias must be assigned when the variable is initialized.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cube &amp;c = cube; <span class="comment">// Alias to the variable `cube` </span></span><br><span class="line"><span class="keyword">int</span> &amp;i = count; <span class="comment">// Alias to the variable `i` uiuc::HSLAPixel &amp;p; // Illegal! Must alias something</span></span><br><span class="line">when variable is initialized.</span><br></pre></td></tr></table></figure><h4 id="Pass-by"><a href="#Pass-by" class="headerlink" title="Pass by"></a>Pass by</h4><p>Identical to storage, arguments can be passed to functions in three different ways:</p><ul><li>Pass by <strong>value</strong> (default)</li><li>Pass by <strong>pointer</strong> (modified with *)</li><li>Pass by <strong>reference</strong> (modified with &amp;, acts as an alias)</li></ul><h3 id="Class-Destructor"><a href="#Class-Destructor" class="headerlink" title="Class Destructor"></a>Class Destructor</h3><p>When an instance of a class is cleaned up, the class destructor is the last call in a class’s lifecycle.</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="7.png" width="80%" height="90%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Destructor</div></center><p>An destructor should never be called directly. Instead, it is automatically called when the object’s memory is being reclaimed by the system.</p><ul><li>If the object is on the stack, when the function returns</li><li>If the object is on the heap, when <code>delete</code> is used</li></ul><p>To add custom behavior to the end-of-life of the function, a custom destructor can be defined as:</p><ul><li>A custom destructor is a member function.</li><li>The function’s destructor is the name of the class,<br>preceded by a tilde ~.</li><li>All destructors have zero arguments and no return type.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cube::~Cube(); <span class="comment">// Custom destructor</span></span><br></pre></td></tr></table></figure><p>A custom destructor is essential when an object allocates an external resource that must be closed or freed when the object is destroyed. Examples:</p><ul><li>Heap memory</li><li>Open files</li><li>Shared memory</li></ul><h3 id="Creating-Templated-Types"><a href="#Creating-Templated-Types" class="headerlink" title="Creating Templated Types"></a>Creating Templated Types</h3><p>A template variable is defined by declaring it before the beginning of a class or function</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span> &#123;</span> </span><br><span class="line">  ...</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  T data_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(T a, T b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b) &#123; <span class="keyword">return</span> a; &#125; </span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h3><p>A base class is a generic form of a specialized, derived class.</p><h4 id="Initialization"><a href="#Initialization" class="headerlink" title="Initialization"></a>Initialization</h4><p>When a derived class is initialized, the derived class must construct the base class:</p><ul><li>Cube must construct Shape</li><li>By default, uses default constructor</li><li>Custom constructor can be used with an initialization list</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A `Cube` class inheriting from a `Shape`</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @author</span></span><br><span class="line"><span class="comment"> *   Wade Fagen-Ulmschneider &lt;waf@illinois.edu&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Cube.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Shape.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> uiuc &#123;</span><br><span class="line">  Cube::Cube(<span class="keyword">double</span> width, uiuc::HSLAPixel color) : Shape(width) &#123;</span><br><span class="line">    color_ = color;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">double</span> Cube::getVolume() <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="comment">// Cannot access Shape::width_ due to it being `private`</span></span><br><span class="line">    <span class="comment">// ...instead we use the public Shape::getWidth(), a public function</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> getWidth() * getWidth() * getWidth();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Access-Control"><a href="#Access-Control" class="headerlink" title="Access Control"></a>Access Control</h4><p>When a base class is inherited, the derived class:</p><ul><li>Can access all public members of the base class</li><li>Can not access private members of the base class</li></ul><h4 id="Initializer-List"><a href="#Initializer-List" class="headerlink" title="Initializer List"></a>Initializer List</h4><p>The syntax to initialize the base class is called the initializer list and can be used for several purposes:</p><ul><li>Initialize a base class</li><li>Initialize the current class using another constructor </li><li>Initialize the default values of member variables</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Shape.h"</span></span></span><br><span class="line"></span><br><span class="line">Shape::Shape() : Shape(<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="comment">// Nothing.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Shape::Shape(<span class="keyword">double</span> width) : width_(width) &#123;</span><br><span class="line">  <span class="comment">// Nothing.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> Shape::getWidth() <span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> width_;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      review concepts of C++
    
    </summary>
    
    
      <category term="Programming Language" scheme="https://zhangruochi.com/categories/Programming-Language/"/>
    
      <category term="C++" scheme="https://zhangruochi.com/categories/Programming-Language/C/"/>
    
    
  </entry>
  
  <entry>
    <title>rails tutorials: sessions</title>
    <link href="https://zhangruochi.com/rails-tutorials-sessions/2020/01/20/"/>
    <id>https://zhangruochi.com/rails-tutorials-sessions/2020/01/20/</id>
    <published>2020-01-20T12:15:14.000Z</published>
    <updated>2020-01-20T12:56:44.311Z</updated>
    
    <content type="html"><![CDATA[<p>HTTP 协议没有状态，每个请求都是独立的事务，无法使用之前请求中的信息。所以，在 HTTP 协议中无法 在两个页面之间记住用户的身份。需要用户登录的应用必须使用会话(session)。会话是两台电脑(例如运 行 Web 浏览器的客户端电脑和运行 Rails 的服务器)之间的半永久性连接。在 Rails 中实现会话最常见的方式是使用 cookie。cookie 是存储在用户浏览器中的少量文本。访问其他页面时，cookie 中存储的信息仍在，所以可以在 cookie 中存储一些信息，例如用户的 ID，让应用从数据库中检索 已登录的用户。这一节使用 Rails 提供的 session 方法实现临时会话，浏览器关闭后会话自动失效。</p><p>把会话看成 REST 式资源便于操作，访问登录页面时渲染一个用于创建会话的表单，登录时创建会话，退出 时再把会话销毁。</p><h3 id="创建-sessions-控制器"><a href="#创建-sessions-控制器" class="headerlink" title="创建 sessions 控制器"></a>创建 sessions 控制器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails generate controller Sessions new</span><br></pre></td></tr></table></figure><h3 id="获得会话的标准-REST-式动作"><a href="#获得会话的标准-REST-式动作" class="headerlink" title="获得会话的标准 REST 式动作"></a>获得会话的标准 REST 式动作</h3><blockquote><p>config/routes.rb</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Rails.application.routes.draw <span class="keyword">do</span></span><br><span class="line">     </span><br><span class="line">  root <span class="string">"todo_lists#index"</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># # For details on the DSL available within this file, see https://guides.rubyonrails.org/routing.html</span></span><br><span class="line">  <span class="comment"># resources :todo_lists do</span></span><br><span class="line">  <span class="comment">#   resources :todo_items</span></span><br><span class="line">  <span class="comment"># end</span></span><br><span class="line"></span><br><span class="line">  get  <span class="string">'/login'</span>,   <span class="symbol">to:</span> <span class="string">'sessions#new'</span></span><br><span class="line">  post <span class="string">'/login'</span>,   <span class="symbol">to:</span> <span class="string">'sessions#create'</span></span><br><span class="line">  delete <span class="string">"/logout"</span>,<span class="symbol">to:</span> <span class="string">"sessions#destroy"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="创建登录表单"><a href="#创建登录表单" class="headerlink" title="创建登录表单"></a>创建登录表单</h3><blockquote><p>app/views/sessions/new.html.erb</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;Login&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;%= form_with(url: login_path, scope: :session, local: true) do |f| %&gt;</span></span><br><span class="line"><span class="regexp">&lt;div class="field"&gt;</span></span><br><span class="line"><span class="regexp">&lt;%= f.label :username %&gt; &lt;br/</span>&gt; &lt;%= f.text_field <span class="symbol">:username</span> %&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;p/</span>&gt;</span><br><span class="line">&lt;div class="field"&gt;</span><br><span class="line">&lt;%= f.label <span class="symbol">:password</span> %&gt; &lt;br/&gt;</span><br><span class="line">&lt;%= f.password_field <span class="symbol">:password</span> %&gt; &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;p/</span>&gt;</span><br><span class="line">&lt;div class="actions"&gt;</span><br><span class="line">&lt;%= f.submit <span class="string">"Login"</span> %&gt; &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;% end %&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编写控制器"><a href="#编写控制器" class="headerlink" title="编写控制器"></a>编写控制器</h3><blockquote><p>app/controllers/application_controller.rb</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplicationController</span> &lt; ActionController::Base</span></span><br><span class="line">  before_action <span class="symbol">:ensure_login</span></span><br><span class="line">  helper_method <span class="symbol">:logged_in?</span>, <span class="symbol">:current_user</span></span><br><span class="line"></span><br><span class="line">  protected</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">ensure_login</span></span></span><br><span class="line">        redirect_to login_path <span class="keyword">unless</span> logged_in?</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">logged_in?</span></span></span><br><span class="line">          session[<span class="symbol">:user_id</span>] <span class="comment"># nil is false</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">current_user</span></span></span><br><span class="line">          @current_user <span class="params">||</span>= User.find(session[<span class="symbol">:user_id</span>])</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>app/controllers/sessions_controller.rb</p></blockquote><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SessionsController</span> &lt; ApplicationController</span></span><br><span class="line"></span><br><span class="line">  skip_before_action <span class="symbol">:ensure_login</span>, <span class="symbol">only:</span> [<span class="symbol">:new</span>, <span class="symbol">:create</span>]</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">new</span></span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">create</span></span></span><br><span class="line">    user = User.find_by(<span class="symbol">username:</span> params[<span class="symbol">:session</span>][<span class="symbol">:username</span>])</span><br><span class="line">    <span class="keyword">if</span> user &amp;&amp; user.authenticate(params[<span class="symbol">:session</span>][<span class="symbol">:password</span>])</span><br><span class="line">        session[<span class="symbol">:user_id</span>] = user.id</span><br><span class="line">        redirect_to root_path, <span class="symbol">notice:</span> <span class="string">"Logged in successfully"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        flash.now[<span class="symbol">:danger</span>] = <span class="string">'Invalid username/password combination'</span></span><br><span class="line">        redirect_to login_path, <span class="symbol">alert:</span> <span class="string">"Invalid username/password combination"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">destroy</span></span></span><br><span class="line">    reset_session</span><br><span class="line">    redirect_to login_path, <span class="symbol">notice:</span> <span class="string">"You have been logged out"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="修改其他布局"><a href="#修改其他布局" class="headerlink" title="修改其他布局"></a>修改其他布局</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> <span class="attr">logged_in</span>? %&gt;</span></span><br><span class="line"># 登录用户看到的链接</span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">else</span> %&gt;</span></span><br><span class="line"># 未登录用户看到的链接</span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">end</span> %&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;HTTP 协议没有状态，每个请求都是独立的事务，无法使用之前请求中的信息。所以，在 HTTP 协议中无法 在两个页面之间记住用户的身份。需要用户登录的应用必须使用会话(session)。会话是两台电脑(例如运 行 Web 浏览器的客户端电脑和运行 Rails 的服务器)之间
      
    
    </summary>
    
    
      <category term="Full Stack" scheme="https://zhangruochi.com/categories/Full-Stack/"/>
    
      <category term="Ruby on Rails" scheme="https://zhangruochi.com/categories/Full-Stack/Ruby-on-Rails/"/>
    
    
  </entry>
  
  <entry>
    <title>rails tutorials: ActionPack</title>
    <link href="https://zhangruochi.com/rails-tutorials-ActionPack/2020/01/19/"/>
    <id>https://zhangruochi.com/rails-tutorials-ActionPack/2020/01/19/</id>
    <published>2020-01-19T16:55:17.000Z</published>
    <updated>2020-01-19T18:38:03.196Z</updated>
    
    <content type="html"><![CDATA[<p>ActionPack is Controller and View work together to let you interact with resources in the Model layer</p><h3 id="REST-Representational-State-Transfer"><a href="#REST-Representational-State-Transfer" class="headerlink" title="REST(Representational State Transfer)"></a>REST(Representational State Transfer)</h3><p>REST is all about resources, You should be to able to:</p><ol><li>List available resources</li><li>Show a specific resource</li><li>Destroy an existing resource</li><li>Provide a way to create a new resource</li><li>Create a new resource</li><li>Provide a way to update an existing resource</li><li>Update an existing resource</li></ol><h3 id="REST-A-Simple-Rails-Convention"><a href="#REST-A-Simple-Rails-Convention" class="headerlink" title="REST: A Simple Rails Convention"></a>REST: A Simple Rails Convention</h3><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="1.png" width="80%" height="80%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Rails Convention</div></center><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="2.png" width="80%" height="80%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Named Routes From</div></center><h3 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h3><p>Index action retrieves resources from Data layer. Then, implicitly invokes either HTML or JSON templates.</p><blockquote><p>app/controllers/posts_controller.rb</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostsController</span> &lt; ApplicationController</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="comment"># GET /posts</span></span><br><span class="line">  <span class="comment"># GET /posts.json</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">index</span></span></span><br><span class="line">    @posts = Post.all</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  ...</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>app/views/posts/show.html.erb</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"notice"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">notice</span> %&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Listing Posts<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">"3"</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> @<span class="attr">posts.each</span> <span class="attr">do</span> |<span class="attr">post</span>| %&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">post.title</span> %&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">post.content</span> %&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">link_to</span> '<span class="attr">Show</span>', <span class="attr">post</span> %&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">link_to</span> '<span class="attr">Edit</span>', <span class="attr">edit_post_path</span>(<span class="attr">post</span>) %&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">link_to</span> '<span class="attr">Destroy</span>', <span class="attr">post</span>, <span class="attr">method:</span> <span class="attr">:delete</span>, <span class="attr">data:</span> &#123; <span class="attr">confirm:</span> '<span class="attr">Are</span> <span class="attr">you</span> <span class="attr">sure</span>?' &#125; %&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">end</span> %&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">link_to</span> '<span class="attr">New</span> <span class="attr">Post</span>', <span class="attr">new_post_path</span> %&gt;</span></span><br></pre></td></tr></table></figure><ul><li>post = post_path(post)</li><li><code>Destroy</code> 和 <code>Show</code>  的 named route 都是 <code>post</code>, 因此 <code>Destroy</code> 需要指定 <code>method: :delete</code></li></ul><h3 id="Show"><a href="#Show" class="headerlink" title="Show"></a>Show</h3><ul><li>Retrieve specific post based on id parameter passed in (as part of URL)</li><li>(Implicit) Look for show.html.erb template to render response</li></ul><blockquote><p>app/controllers/posts_controller.rb</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostsController</span> &lt; ApplicationController</span></span><br><span class="line">  before_action <span class="symbol">:set_post</span>, <span class="symbol">only:</span> [<span class="symbol">:show</span>, <span class="symbol">:edit</span>, <span class="symbol">:update</span>, <span class="symbol">:destroy</span>]</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="comment"># GET /posts/1</span></span><br><span class="line">  <span class="comment"># GET /posts/1.json</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">show</span></span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  private</span><br><span class="line">    <span class="comment"># Use callbacks to share common setup or constraints between actions.</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_post</span></span></span><br><span class="line">      @post = Post.find(params[<span class="symbol">:id</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>app/views/posts/show.html.erb</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"notice"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">notice</span> %&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Title:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%=</span> @<span class="attr">post.title</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Content:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%=</span> @<span class="attr">post.content</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">link_to</span> '<span class="attr">Edit</span>', <span class="attr">edit_post_path</span>(@<span class="attr">post</span>) %&gt;</span> |</span><br><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">link_to</span> '<span class="attr">Back</span>', <span class="attr">posts_path</span> %&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><p>destroy action destroys a resource and then <code>redirects</code> the browser to another page</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostsController</span> &lt; ApplicationController</span></span><br><span class="line">  before_action <span class="symbol">:set_post</span>, <span class="symbol">only:</span> [<span class="symbol">:show</span>, <span class="symbol">:edit</span>, <span class="symbol">:update</span>, <span class="symbol">:destroy</span>]</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="comment"># DELETE /posts/1</span></span><br><span class="line">  <span class="comment"># DELETE /posts/1.json</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">destroy</span></span></span><br><span class="line">    @post.destroy</span><br><span class="line">    respond_to <span class="keyword">do</span> <span class="params">|format|</span></span><br><span class="line">      format.html &#123; redirect_to posts_url, <span class="symbol">notice:</span> <span class="string">'Post was successfully destroyed.'</span> &#125;</span><br><span class="line">      format.json &#123; head <span class="symbol">:no_content</span> &#125;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  private</span><br><span class="line">    <span class="comment"># Use callbacks to share common setup or constraints between actions.</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_post</span></span></span><br><span class="line">      @post = Post.find(params[<span class="symbol">:id</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="respond-to"><a href="#respond-to" class="headerlink" title="respond_to"></a>respond_to</h4><ul><li>Rails helper that specifies how to respond to a request based on a request format</li><li>Takes an optional block where the argument is the format</li><li>Block specifies how to handle each format:<ul><li>format.format_name – matching template</li><li>format.format_name {do_something_other_than_just_displaying_the_ matching_template}</li></ul></li></ul><h4 id="redirect-to"><a href="#redirect-to" class="headerlink" title="redirect_to"></a>redirect_to</h4><ul><li>Instead of rendering a template – send a response to the browser: “Go here!”</li></ul><h3 id="New-and-Create"><a href="#New-and-Create" class="headerlink" title="New and Create"></a>New and Create</h3><ol><li>New</li></ol><ul><li>Create a new empty post object </li><li>(Implicit) Look for new.html.erb</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostsController</span> &lt; ApplicationController</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># GET /posts/new</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">new</span></span></span><br><span class="line">    @post = Post.new</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>New Post<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">render</span> '<span class="attr">form</span>' %&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">link_to</span> '<span class="attr">Back</span>', <span class="attr">posts_path</span> %&gt;</span></span><br></pre></td></tr></table></figure><ol><li>Create</li></ol><ul><li>Create a new post object with parameters that were passed from the new form</li><li>Try to save the object to the database</li><li>If successful, redirect to show template</li><li>If unsuccessful, render new action (template - again)</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostsController</span> &lt; ApplicationController</span></span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="comment"># POST /posts</span></span><br><span class="line">  <span class="comment"># POST /posts.json</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">create</span></span></span><br><span class="line">    @post = Post.new(post_params)</span><br><span class="line"></span><br><span class="line">    respond_to <span class="keyword">do</span> <span class="params">|format|</span></span><br><span class="line">      <span class="keyword">if</span> @post.save</span><br><span class="line">        flash[<span class="symbol">:success</span>] = <span class="string">"Welcome to the Sample App!"</span></span><br><span class="line">        format.html &#123; redirect_to @post, <span class="symbol">notice:</span> <span class="string">'Post was successfully created.'</span> &#125;</span><br><span class="line">        format.json &#123; render <span class="symbol">:show</span>, <span class="symbol">status:</span> <span class="symbol">:created</span>, <span class="symbol">location:</span> @post &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        format.html &#123; render <span class="symbol">:new</span> &#125;</span><br><span class="line">        format.json &#123; render <span class="symbol">json:</span> @post.errors, <span class="symbol">status:</span> <span class="symbol">:unprocessable_entity</span> &#125;</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  private</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Never trust parameters from the scary internet, only allow the white list through.</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post_params</span></span></span><br><span class="line">      params.<span class="keyword">require</span>(<span class="symbol">:post</span>).permit(<span class="symbol">:title</span>, <span class="symbol">:content</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="Strong-parameters"><a href="#Strong-parameters" class="headerlink" title="Strong parameters"></a>Strong parameters</h4><p>With strong parameters, Action Controller parameters are <strong>forbidden</strong> to be used in Active Model mass assigments until they have been whitelisted.</p><h4 id="Flash"><a href="#Flash" class="headerlink" title="Flash"></a>Flash</h4><p>a hash where the data you put in persists for exactly ONE request AFTER the current request.</p><ul><li>Two very common attributes are <code>:notice</code> (good) and <code>:alert</code> (bad)</li><li>These are so common in fact, that the redirect_to takes a <code>:notice</code> or <code>:alert</code> keys</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flash[<span class="symbol">:attribute</span>] = value</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">flash.each</span> <span class="attr">do</span> |<span class="attr">message_type</span>, <span class="attr">message</span>| %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-&lt;%= message_type %&gt;"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">message</span> %&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">end</span> %&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Edit-and-Update"><a href="#Edit-and-Update" class="headerlink" title="Edit and Update"></a>Edit and Update</h3><ol><li>Edit</li></ol><ul><li>Retrieve a post object based on the id provided (as part of the URl)</li><li>(Implicit) Look for edit.html.erb</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostsController</span> &lt; ApplicationController</span></span><br><span class="line">  before_action <span class="symbol">:set_post</span>, <span class="symbol">only:</span> [<span class="symbol">:show</span>, <span class="symbol">:edit</span>, <span class="symbol">:update</span>, <span class="symbol">:destroy</span>]</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="comment"># GET /posts/1/edit</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">edit</span></span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">  private</span><br><span class="line">    <span class="comment"># Use callbacks to share common setup or constraints between actions.</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_post</span></span></span><br><span class="line">      @post = Post.find(params[<span class="symbol">:id</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Editing Post<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">render</span> '<span class="attr">form</span>' %&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">link_to</span> '<span class="attr">Show</span>', @<span class="attr">post</span> %&gt;</span> |</span><br><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">link_to</span> '<span class="attr">Back</span>', <span class="attr">posts_path</span> %&gt;</span></span><br></pre></td></tr></table></figure><ol><li>Update</li></ol><ul><li>Retrieve an existing post using id parameter</li><li>Update post object with (strong) parameters that were<br>passed from the edit form</li><li>Try to (re)save the object to the database</li><li>If successful, redirect to show template</li><li>If unsuccessful, render edit action (template) again</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostsController</span> &lt; ApplicationController</span></span><br><span class="line">  before_action <span class="symbol">:set_post</span>, <span class="symbol">only:</span> [<span class="symbol">:show</span>, <span class="symbol">:edit</span>, <span class="symbol">:update</span>, <span class="symbol">:destroy</span>]</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">  <span class="comment"># PATCH/PUT /posts/1</span></span><br><span class="line">  <span class="comment"># PATCH/PUT /posts/1.json</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">update</span></span></span><br><span class="line">    respond_to <span class="keyword">do</span> <span class="params">|format|</span></span><br><span class="line">      <span class="keyword">if</span> @post.update(post_params)</span><br><span class="line">        format.html &#123; redirect_to @post, <span class="symbol">notice:</span> <span class="string">'Post was successfully updated.'</span> &#125;</span><br><span class="line">        format.json &#123; render <span class="symbol">:show</span>, <span class="symbol">status:</span> <span class="symbol">:ok</span>, <span class="symbol">location:</span> @post &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        format.html &#123; render <span class="symbol">:edit</span> &#125;</span><br><span class="line">        format.json &#123; render <span class="symbol">json:</span> @post.errors, <span class="symbol">status:</span> <span class="symbol">:unprocessable_entity</span> &#125;</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  private</span><br><span class="line">    <span class="comment"># Use callbacks to share common setup or constraints between actions.</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_post</span></span></span><br><span class="line">      @post = Post.find(params[<span class="symbol">:id</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Never trust parameters from the scary internet, only allow the white list through.</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post_params</span></span></span><br><span class="line">      params.<span class="keyword">require</span>(<span class="symbol">:post</span>).permit(<span class="symbol">:title</span>, <span class="symbol">:content</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><code>html</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ActionPack is Controller and View work together to let you interact with resources in the Model layer&lt;/p&gt;
&lt;h3 id=&quot;REST-Representational-S
      
    
    </summary>
    
    
      <category term="Full Stack" scheme="https://zhangruochi.com/categories/Full-Stack/"/>
    
      <category term="Ruby on Rails" scheme="https://zhangruochi.com/categories/Full-Stack/Ruby-on-Rails/"/>
    
    
  </entry>
  
  <entry>
    <title>rails tutorials: Association</title>
    <link href="https://zhangruochi.com/rails-tutorials-Association/2020/01/18/"/>
    <id>https://zhangruochi.com/rails-tutorials-Association/2020/01/18/</id>
    <published>2020-01-18T22:06:30.000Z</published>
    <updated>2020-01-18T23:17:56.954Z</updated>
    
    <content type="html"><![CDATA[<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="1.png" width="80%" height="80%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">ER</div></center><h2 id="One-to-One-Association"><a href="#One-to-One-Association" class="headerlink" title="One-to-One Association"></a>One-to-One Association</h2><ul><li>One person has exactly one personal_info entry</li><li>One personal_info entry belongs to exactly one person</li><li>The “belongs to” side is the one with a foreign key</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails g model personal_info height:<span class="built_in">float</span> weight:<span class="built_in">float</span> person:references</span><br></pre></td></tr></table></figure><blockquote><p>db/migrate/_create_personal_info.rb</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreatePersonalInfos</span> &lt; ActiveRecord::Migration[6.0]</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">change</span></span></span><br><span class="line">    create_table <span class="symbol">:personal_infos</span> <span class="keyword">do</span> <span class="params">|t|</span></span><br><span class="line">      t.float <span class="symbol">:height</span></span><br><span class="line">      t.float <span class="symbol">:weight</span></span><br><span class="line">      t.references <span class="symbol">:person</span>, <span class="symbol">null:</span> <span class="literal">false</span>, <span class="symbol">foreign_key:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">      t.timestamps</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rake db:migrate</span><br></pre></td></tr></table></figure><blockquote><p>app/models/person.rb</p></blockquote><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &lt; ApplicationRecord</span></span><br><span class="line">    has_one <span class="symbol">:personal_info</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>app/models/personal_info.rb</p></blockquote><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonalInfo</span> &lt; ApplicationRecord</span></span><br><span class="line">  belongs_to <span class="symbol">:person</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="More-Methods"><a href="#More-Methods" class="headerlink" title="More Methods"></a>More Methods</h3><p>you have <code>build_personal_info(hash)</code> and <code>create_personal_info(hash)</code> methods on a person instance</p><h3 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zhang = Person.first</span><br><span class="line">pi1 = PersonalInfo.create height: 6.5 weight: 220</span><br><span class="line">zhang.personal_info = pi1</span><br><span class="line"></span><br><span class="line">zhang.build_personal_info height: 6.5 weight: 220</span><br></pre></td></tr></table></figure><h2 id="One-to-Many-Association"><a href="#One-to-Many-Association" class="headerlink" title="One-to-Many Association"></a>One-to-Many Association</h2><ul><li>One person has one or more jobs</li><li>One job entry belongs to exactly one person</li><li>The “belongs to” side is the one with a foreign key</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails g model job title company position_id person:references</span><br></pre></td></tr></table></figure><blockquote><p>db/migrate/_create_jobs.rb</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateJobs</span> &lt; ActiveRecord::Migration[6.0]</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">change</span></span></span><br><span class="line">    create_table <span class="symbol">:jobs</span> <span class="keyword">do</span> <span class="params">|t|</span></span><br><span class="line">      t.string <span class="symbol">:title</span></span><br><span class="line">      t.string <span class="symbol">:company</span></span><br><span class="line">      t.string <span class="symbol">:position_id</span></span><br><span class="line">      t.references <span class="symbol">:person</span>, <span class="symbol">null:</span> <span class="literal">false</span>, <span class="symbol">foreign_key:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">      t.timestamps</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rake db:migrate</span><br></pre></td></tr></table></figure><blockquote><p>app/models/person.rb</p></blockquote><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &lt; ApplicationRecord</span></span><br><span class="line">    has_one <span class="symbol">:personal_info</span></span><br><span class="line">    has_many <span class="symbol">:jobs</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>app/models/job.rb</p></blockquote><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Job</span> &lt; ApplicationRecord</span></span><br><span class="line">  belongs_to <span class="symbol">:person</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="More-Methods-1"><a href="#More-Methods-1" class="headerlink" title="More Methods"></a>More Methods</h3><ul><li>person.jobs = jobs</li><li>person.jobs &lt;&lt; job(s)</li><li>person.jobs.clear</li></ul><h2 id="Many-to-Many"><a href="#Many-to-Many" class="headerlink" title="Many-to-Many"></a>Many-to-Many</h2><ul><li>One person can have many hobbies</li><li>One hobby can be shared by many people</li><li>Need to create an extra (a.k.a. join) table (<strong>without</strong> a model, i.e. just a migration)</li><li>Convention: Plural model names separated by an underscore in alphabetical order</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rails g model hobby name</span><br><span class="line">rails g migration create_hobbies_people person:references hobby:references</span><br></pre></td></tr></table></figure><blockquote><p>db/migrate/_create_habbies_people.rb</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateHabbiesPeople</span> &lt; ActiveRecord::Migration[6.0]</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">change</span></span></span><br><span class="line">    create_table <span class="symbol">:habbies_people</span>, <span class="symbol">id:</span><span class="literal">false</span> <span class="keyword">do</span> <span class="params">|t|</span></span><br><span class="line">      t.references <span class="symbol">:person</span>, <span class="symbol">null:</span> <span class="literal">false</span>, <span class="symbol">index:</span> <span class="literal">false</span>, <span class="symbol">foreign_key:</span> <span class="literal">true</span></span><br><span class="line">      t.references <span class="symbol">:hobby</span>, <span class="symbol">null:</span> <span class="literal">false</span>, <span class="symbol">index:</span> <span class="literal">false</span>, <span class="symbol">foreign_key:</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rake db:migrate</span><br></pre></td></tr></table></figure><blockquote><p>app/models/person.rb</p></blockquote><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &lt; ApplicationRecord</span></span><br><span class="line">    has_one <span class="symbol">:personal_info</span></span><br><span class="line">    has_many <span class="symbol">:jobs</span></span><br><span class="line">    has_and_belongs_to_many <span class="symbol">:hobbies</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>app/models/hobby.rb</p></blockquote><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hobby</span> &lt; ApplicationRecord</span></span><br><span class="line">    has_and_belongs_to_many <span class="symbol">:people</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="Rich-Many-to-Many-Association"><a href="#Rich-Many-to-Many-Association" class="headerlink" title="Rich Many-to-Many Association"></a>Rich Many-to-Many Association</h2><ul><li>Sometimes, you need to keep some data on the join table</li><li>You need to store grandchild relationships on a model, like Person -&gt; Job -&gt; SalaryRange</li><li>ActiveRecord provides a <code>:through</code> option for this purpose</li><li><strong>Basic idea</strong>: you first create a regular <code>parent-child</code> relationship and then use the child model as a <strong>join</strong> between the parent and grandchild.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails g model salary_range min_salary:<span class="built_in">float</span>  max_salary:<span class="built_in">float</span> job:references</span><br></pre></td></tr></table></figure><blockquote><p>db/migrate/_create_salary_ranges.rb</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateSalaryRanges</span> &lt; ActiveRecord::Migration[6.0]</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">change</span></span></span><br><span class="line">    create_table <span class="symbol">:salary_ranges</span> <span class="keyword">do</span> <span class="params">|t|</span></span><br><span class="line">      t.float <span class="symbol">:min_salary</span></span><br><span class="line">      t.float <span class="symbol">:max_salary</span></span><br><span class="line">      t.references <span class="symbol">:job</span>, <span class="symbol">null:</span> <span class="literal">false</span>, <span class="symbol">foreign_key:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">      t.timestamps</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rake db:migrate</span><br></pre></td></tr></table></figure><blockquote><p>app/models/salary_range.rb</p></blockquote><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SalaryRange</span> &lt; ApplicationRecord</span></span><br><span class="line">  belongs_to <span class="symbol">:job</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>app/models/job.rb</p></blockquote><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Job</span> &lt; ApplicationRecord</span></span><br><span class="line">  belongs_to <span class="symbol">:person</span></span><br><span class="line">  has_one <span class="symbol">:salary_range</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>app/models/person.rb<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &lt; ApplicationRecord</span></span><br><span class="line">    has_one <span class="symbol">:personal_info</span></span><br><span class="line">    has_many <span class="symbol">:jobs</span></span><br><span class="line">    has_and_belongs_to_many <span class="symbol">:hobbies</span></span><br><span class="line">    has_many <span class="symbol">:approx_salaries</span>, <span class="symbol">through:</span> <span class="symbol">:jobs</span>, <span class="symbol">source:</span> <span class="symbol">:salary_range</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">max_salary</span></span></span><br><span class="line">      approx_salaries.maximum(<span class="symbol">:max_salary</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment"># Average, minimum and sum also available...</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="More-Methods-2"><a href="#More-Methods-2" class="headerlink" title="More Methods"></a>More Methods</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lebron = Person.find_by <span class="symbol">last_name:</span> <span class="string">"James"</span></span><br><span class="line">lebron.max_salary</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;center&gt;
    &lt;img style=&quot;border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);&quot; src=&quot;1.pn
      
    
    </summary>
    
    
      <category term="Full Stack" scheme="https://zhangruochi.com/categories/Full-Stack/"/>
    
      <category term="Ruby on Rails" scheme="https://zhangruochi.com/categories/Full-Stack/Ruby-on-Rails/"/>
    
    
  </entry>
  
  <entry>
    <title>rails tutorials: Active Record CURD</title>
    <link href="https://zhangruochi.com/rails-tutorials-Active-Record-CURD/2020/01/18/"/>
    <id>https://zhangruochi.com/rails-tutorials-Active-Record-CURD/2020/01/18/</id>
    <published>2020-01-18T17:57:50.000Z</published>
    <updated>2020-01-18T20:02:27.046Z</updated>
    
    <content type="html"><![CDATA[<p>ActiveRecord is the name of Rails’ default ORM</p><blockquote><p>ORM (Object-Relational Mapping): Bridges the gap between <code>relational databases</code>, which are designed around mathematical Set Theory and Object-Oriented programming languages that deal with objects and their behavior. Greatly simplifies writing code for accessing the database.</p></blockquote><h3 id="Three-Prerequisites"><a href="#Three-Prerequisites" class="headerlink" title="Three Prerequisites"></a>Three Prerequisites</h3><ol><li>ActiveRecord has to know how to find your database (when Rails<br>is loaded, this info is read from config/database.yml file)</li><li>(Convention) There is a table with a <code>plural name</code> that corresponds<br>to ActiveRecord::Base subclass with a <code>singular name</code></li><li>(Convention) Expects the table to have a primary key named <code>id</code></li></ol><h3 id="CURD"><a href="#CURD" class="headerlink" title="CURD"></a>CURD</h3><h4 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h4><ol><li><p>Use an empty constructor and (ghost) attributes to set the values and then call save.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p1 = Person.new</span><br><span class="line">p1.first_name = <span class="string">"zhang"</span></span><br><span class="line">p1.email = <span class="string">"zrc720@gmail.com"</span></span><br><span class="line">p1.save</span><br></pre></td></tr></table></figure></li><li><p>Pass a hash of attributes into the constructor and then call save.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p2 = Person.new(<span class="symbol">name:</span> <span class="string">"zhang"</span>, <span class="symbol">email:</span> <span class="string">"zrc720@gmail.com"</span>)</span><br><span class="line">p2.save</span><br></pre></td></tr></table></figure></li><li><p>Use create method with a hash to create an object and save it to the database in one step.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p3 = Person.create(<span class="symbol">name:</span> <span class="string">"zhang"</span>, <span class="symbol">email:</span> <span class="string">"zrc720@gmail.com"</span>)</span><br></pre></td></tr></table></figure></li></ol><h4 id="Retrieve"><a href="#Retrieve" class="headerlink" title="Retrieve"></a>Retrieve</h4><ol><li><p><code>find(id)</code> or <code>find(id1, id2)</code><br>Throws a RecordNotFound exception if not found</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person.find(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>first</code>, <code>last</code>, <code>take</code>, <code>all</code><br>Return the results you expect or nil if nothing is found</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Person.first</span><br><span class="line">Person.last</span><br><span class="line">Person.take</span><br><span class="line">Person.all</span><br></pre></td></tr></table></figure></li><li><p><code>order(:column)</code> or <code>order(column: :desc)</code><br>Allows ordering of the results. Ascending or descending</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person.all.order(<span class="symbol">first_name:</span> <span class="symbol">:desc</span>)</span><br><span class="line">Person.all.order(<span class="symbol">:first_name</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>pluck</code><br>Use pluck as a shortcut to select one or more attributes without loading a bunch of records just to grab the attributes you want.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Person.pluck(<span class="symbol">:id</span>, <span class="symbol">:name</span>)</span><br><span class="line"><span class="comment"># SELECT people.id, people.name FROM people</span></span><br><span class="line"><span class="comment"># =&gt; [[1, 'David'], [2, 'Jeremy'], [3, 'Jose']]</span></span><br></pre></td></tr></table></figure></li><li><p><code>take</code><br>Gives a record (or N records if a parameter is supplied) without any implied order. The order will depend on the database implementation. If an order is supplied it will be respected.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person.take <span class="comment"># returns an object fetched by SELECT * FROM people LIMIT 1</span></span><br><span class="line">Person.take(<span class="number">5</span>) <span class="comment"># returns 5 objects fetched by SELECT * FROM people LIMIT 5</span></span><br></pre></td></tr></table></figure></li><li><p><code>where(hash)</code><br>Enables you to supply conditions for your search</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Person.where(<span class="symbol">name:</span> <span class="string">"zhangruochi"</span>)</span><br><span class="line">Person.where([<span class="string">"name = ? and email = ?"</span>, <span class="string">"Joe"</span>, <span class="string">"joe@example.com"</span>])</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">7. `</span>find_by<span class="string">`</span></span><br><span class="line"><span class="string">Same as where, but returns a single result or nil if a record with the specified conditions is not found</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>ruby</span><br><span class="line">User.find_by(<span class="symbol">name:</span> <span class="string">"zhangruochi"</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>limit</code><br>Enables you to limit how many records come back</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person.offset(<span class="number">1</span>).limit(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>offset(n)</code><br>Don’t start from the beginning; skip a few</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person.offset(<span class="number">1</span>).limit(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li></ol><h4 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h4><ol><li><p>Retrieve a record, modify the values and then call save</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zhang = User.where(<span class="symbol">name:</span> <span class="string">"zhangruochi"</span>)</span><br><span class="line">zhang.email = <span class="string">"lvduzhen@gmail.com"</span></span><br><span class="line">zhang.save</span><br></pre></td></tr></table></figure></li><li><p>Retrieve a record and then call update method passing in a hash of attributes with new values</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zhang = User.where(<span class="symbol">name:</span> <span class="string">"zhangruochi"</span>)</span><br><span class="line">zhang.update(<span class="symbol">email:</span> <span class="string">"lvduzhen@gmail.com"</span>)</span><br></pre></td></tr></table></figure></li><li><p>There is also <code>update_all</code> for batch updates</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User.where(<span class="symbol">email:</span> <span class="string">'zrc720@gmail.com'</span>).update_all(<span class="symbol">name:</span> <span class="string">'ruochi'</span>)</span><br></pre></td></tr></table></figure></li></ol><h4 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h4><ol><li>destroy(id) or destroy<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zhang = User.first</span><br><span class="line">zhang.destroy</span><br><span class="line"></span><br><span class="line">User.destroy(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ActiveRecord is the name of Rails’ default ORM&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ORM (Object-Relational Mapping): Bridges the gap between &lt;code&gt;relatio
      
    
    </summary>
    
    
      <category term="Full Stack" scheme="https://zhangruochi.com/categories/Full-Stack/"/>
    
      <category term="Ruby on Rails" scheme="https://zhangruochi.com/categories/Full-Stack/Ruby-on-Rails/"/>
    
    
  </entry>
  
</feed>
