<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RUOCHI.AI</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhangruochi.com/"/>
  <updated>2020-02-05T23:40:22.974Z</updated>
  <id>https://zhangruochi.com/</id>
  
  <author>
    <name>Ruochi Zhang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Module Sequential ModuleList ModuleDict</title>
    <link href="https://zhangruochi.com/Module-Sequential-ModuleList-ModuleDict/2020/01/28/"/>
    <id>https://zhangruochi.com/Module-Sequential-ModuleList-ModuleDict/2020/01/28/</id>
    <published>2020-01-28T21:21:52.000Z</published>
    <updated>2020-02-05T23:40:22.974Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Pytorch-how-and-when-to-use-Module-Sequential-ModuleList-and-ModuleDict"><a href="#Pytorch-how-and-when-to-use-Module-Sequential-ModuleList-and-ModuleDict" class="headerlink" title="Pytorch: how and when to use Module, Sequential, ModuleList and ModuleDict"></a>Pytorch: how and when to use Module, Sequential, ModuleList and ModuleDict</h3><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://github.com/FrancescoSaverioZuppichini/Pytorch-how-and-when-to-use-Module-Sequential-ModuleList-and-ModuleDict/blob/master/README.md" target="_blank" rel="noopener">Github Repo of FrancescoSaverioZuppichini</a></li><li>You can find the code <a href="https://github.com/FrancescoSaverioZuppichini/Pytorch-how-and-when-to-use-Module-Sequential-ModuleList-and-ModuleDict" target="_blank" rel="noopener">here</a></li></ul><p><a href="https://pytorch.org/" target="_blank" rel="noopener">Pytorch</a> is an open source deep learning frameworks that provide a smart way to create ML models. Even if the documentation is well made, I still find that most people still are able to write bad and not organized PyTorch code.</p><p>Today, we are going to see how to use the three main building blocks of PyTorch: <code>Module, Sequential and ModuleList</code>. We are going to start with an example and iteratively we will make it better.</p><p>All these four classes are contained into <code>torch.nn</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"></span><br><span class="line"><span class="comment"># nn.Module</span></span><br><span class="line"><span class="comment"># nn.Sequential</span></span><br><span class="line"><span class="comment"># nn.Module</span></span><br></pre></td></tr></table></figure><h2 id="Module-the-main-building-block"><a href="#Module-the-main-building-block" class="headerlink" title="Module: the main building block"></a>Module: the main building block</h2><p>The <a href="https://pytorch.org/docs/stable/nn.html?highlight=module" target="_blank" rel="noopener">Module</a> is the main building block, it defines the base class for all neural network and you MUST subclass it. </p><p>Let’s create a classic CNN classifier as example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCNNClassifier</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, in_c, n_classes)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.conv1 = nn.Conv2d(in_c, <span class="number">32</span>, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">1</span>)</span><br><span class="line">        self.bn1 = nn.BatchNorm2d(<span class="number">32</span>)</span><br><span class="line">        </span><br><span class="line">        self.conv2 = nn.Conv2d(<span class="number">32</span>, <span class="number">64</span>, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">1</span>)</span><br><span class="line">        self.bn2 = nn.BatchNorm2d(<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">        self.fc1 = nn.Linear(<span class="number">32</span> * <span class="number">28</span> * <span class="number">28</span>, <span class="number">1024</span>)</span><br><span class="line">        self.fc2 = nn.Linear(<span class="number">1024</span>, n_classes)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x = self.conv1(x)</span><br><span class="line">        x = self.bn1(x)</span><br><span class="line">        x = F.relu(x)</span><br><span class="line">        </span><br><span class="line">        x = self.conv2(x)</span><br><span class="line">        x = self.bn2(x)</span><br><span class="line">        x = F.relu(x)</span><br><span class="line"></span><br><span class="line">        x = x.view(x.size(<span class="number">0</span>), <span class="number">-1</span>) <span class="comment"># flat</span></span><br><span class="line">        </span><br><span class="line">        x = self.fc1(x)</span><br><span class="line">        x = F.sigmoid(x)</span><br><span class="line">        x = self.fc2(x)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model = MyCNNClassifier(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">print(model)</span><br></pre></td></tr></table></figure><pre><code>MyCNNClassifier(  (conv1): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))  (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (conv2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))  (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (fc1): Linear(in_features=25088, out_features=1024, bias=True)  (fc2): Linear(in_features=1024, out_features=10, bias=True))</code></pre><p>This is a very simple classifier with an encoding part that uses two layers with 3x3 convs + batchnorm + relu and a decoding part with two linear layers. If you are not new to PyTorch you may have seen this type of coding before, but there are two problems.</p><p>If we want to add a layer we have to again write lots of code in the <code>__init__</code> and in the <code>forward</code> function. Also, if we have some common block that we want to use in another model, e.g. the 3x3 conv + batchnorm + relu, we have to write it again.</p><h2 id="Sequential-stack-and-merge-layers"><a href="#Sequential-stack-and-merge-layers" class="headerlink" title="Sequential: stack and merge layers"></a>Sequential: stack and merge layers</h2><p><a href="https://pytorch.org/docs/stable/nn.html?highlight=sequential#torch.nn.Sequential" target="_blank" rel="noopener">Sequential</a> is a container of Modules that can be stacked together and run at the same time.</p><p>You can notice that we have to store into <code>self</code> everything. We can use <code>Sequential</code> to improve our code. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCNNClassifier</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, in_c, n_classes)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.conv_block1 = nn.Sequential(</span><br><span class="line">            nn.Conv2d(in_c, <span class="number">32</span>, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.BatchNorm2d(<span class="number">32</span>),</span><br><span class="line">            nn.ReLU()</span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        self.conv_block2 = nn.Sequential(</span><br><span class="line">            nn.Conv2d(<span class="number">32</span>, <span class="number">64</span>, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.BatchNorm2d(<span class="number">64</span>),</span><br><span class="line">            nn.ReLU()</span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        self.decoder = nn.Sequential(</span><br><span class="line">            nn.Linear(<span class="number">32</span> * <span class="number">28</span> * <span class="number">28</span>, <span class="number">1024</span>),</span><br><span class="line">            nn.Sigmoid(),</span><br><span class="line">            nn.Linear(<span class="number">1024</span>, n_classes)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x = self.conv_block1(x)</span><br><span class="line">        x = self.conv_block2(x)</span><br><span class="line"></span><br><span class="line">        x = x.view(x.size(<span class="number">0</span>), <span class="number">-1</span>) <span class="comment"># flat</span></span><br><span class="line">        </span><br><span class="line">        x = self.decoder(x)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model = MyCNNClassifier(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">print(model)</span><br></pre></td></tr></table></figure><pre><code>MyCNNClassifier(  (conv_block1): Sequential(    (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    (2): ReLU()  )  (conv_block2): Sequential(    (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    (2): ReLU()  )  (decoder): Sequential(    (0): Linear(in_features=25088, out_features=1024, bias=True)    (1): Sigmoid()    (2): Linear(in_features=1024, out_features=10, bias=True)  ))</code></pre><p>Much Better uhu?</p><p>Did you notice that <code>conv_block1</code> and <code>conv_block2</code> looks almost the same? We could create a function that reteurns a <code>nn.Sequential</code> to even simplify the code!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conv_block</span><span class="params">(in_f, out_f, *args, **kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> nn.Sequential(</span><br><span class="line">        nn.Conv2d(in_f, out_f, *args, **kwargs),</span><br><span class="line">        nn.BatchNorm2d(out_f),</span><br><span class="line">        nn.ReLU()</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>Then we can just call this function in our Module</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCNNClassifier</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, in_c, n_classes)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.conv_block1 = conv_block(in_c, <span class="number">32</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        self.conv_block2 = conv_block(<span class="number">32</span>, <span class="number">64</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        self.decoder = nn.Sequential(</span><br><span class="line">            nn.Linear(<span class="number">32</span> * <span class="number">28</span> * <span class="number">28</span>, <span class="number">1024</span>),</span><br><span class="line">            nn.Sigmoid(),</span><br><span class="line">            nn.Linear(<span class="number">1024</span>, n_classes)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x = self.conv_block1(x)</span><br><span class="line">        x = self.conv_block2(x)</span><br><span class="line"></span><br><span class="line">        x = x.view(x.size(<span class="number">0</span>), <span class="number">-1</span>) <span class="comment"># flat</span></span><br><span class="line">        </span><br><span class="line">        x = self.decoder(x)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model = MyCNNClassifier(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">print(model)</span><br></pre></td></tr></table></figure><pre><code>MyCNNClassifier(  (conv_block1): Sequential(    (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    (2): ReLU()  )  (conv_block2): Sequential(    (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    (2): ReLU()  )  (decoder): Sequential(    (0): Linear(in_features=25088, out_features=1024, bias=True)    (1): Sigmoid()    (2): Linear(in_features=1024, out_features=10, bias=True)  ))</code></pre><p>Even cleaner! Still <code>conv_block1</code> and <code>conv_block2</code> are almost the same! We can merge them using <code>nn.Sequential</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCNNClassifier</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, in_c, n_classes)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.encoder = nn.Sequential(</span><br><span class="line">            conv_block(in_c, <span class="number">32</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            conv_block(<span class="number">32</span>, <span class="number">64</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        self.decoder = nn.Sequential(</span><br><span class="line">            nn.Linear(<span class="number">32</span> * <span class="number">28</span> * <span class="number">28</span>, <span class="number">1024</span>),</span><br><span class="line">            nn.Sigmoid(),</span><br><span class="line">            nn.Linear(<span class="number">1024</span>, n_classes)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x = self.encoder(x)</span><br><span class="line">        </span><br><span class="line">        x = x.view(x.size(<span class="number">0</span>), <span class="number">-1</span>) <span class="comment"># flat</span></span><br><span class="line">        </span><br><span class="line">        x = self.decoder(x)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model = MyCNNClassifier(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">print(model)</span><br></pre></td></tr></table></figure><pre><code>MyCNNClassifier(  (encoder): Sequential(    (0): Sequential(      (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (2): ReLU()    )    (1): Sequential(      (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (2): ReLU()    )  )  (decoder): Sequential(    (0): Linear(in_features=25088, out_features=1024, bias=True)    (1): Sigmoid()    (2): Linear(in_features=1024, out_features=10, bias=True)  ))</code></pre><p><code>self.encoder</code> now holds booth <code>conv_block</code>. We have decoupled logic for our model and make it easier to read and reuse. Our <code>conv_block</code> function can be imported and used in another model.</p><h2 id="Dynamic-Sequential-create-multiple-layers-at-once"><a href="#Dynamic-Sequential-create-multiple-layers-at-once" class="headerlink" title="Dynamic Sequential: create multiple layers at once"></a>Dynamic Sequential: create multiple layers at once</h2><p>What if we can to add a new layers in <code>self.encoder</code>, hardcoded them is not convinient:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">self.encoder = nn.Sequential(</span><br><span class="line">            conv_block(in_c, <span class="number">32</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            conv_block(<span class="number">32</span>, <span class="number">64</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            conv_block(<span class="number">64</span>, <span class="number">128</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            conv_block(<span class="number">128</span>, <span class="number">256</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line"></span><br><span class="line">        )</span><br></pre></td></tr></table></figure><p>Would it be nice if we can define the sizes as an array and automatically create all the layers without writing each one of them? Fortunately we can create an array and pass it to <code>Sequential</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCNNClassifier</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, in_c, n_classes)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.enc_sizes = [in_c, <span class="number">32</span>, <span class="number">64</span>]</span><br><span class="line">        </span><br><span class="line">        conv_blocks = [conv_block(in_f, out_f, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>) </span><br><span class="line">                       <span class="keyword">for</span> in_f, out_f <span class="keyword">in</span> zip(self.enc_sizes, self.enc_sizes[<span class="number">1</span>:])]</span><br><span class="line">        </span><br><span class="line">        self.encoder = nn.Sequential(*conv_blocks)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        self.decoder = nn.Sequential(</span><br><span class="line">            nn.Linear(<span class="number">32</span> * <span class="number">28</span> * <span class="number">28</span>, <span class="number">1024</span>),</span><br><span class="line">            nn.Sigmoid(),</span><br><span class="line">            nn.Linear(<span class="number">1024</span>, n_classes)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x = self.encoder(x)</span><br><span class="line">        </span><br><span class="line">        x = x.view(x.size(<span class="number">0</span>), <span class="number">-1</span>) <span class="comment"># flat</span></span><br><span class="line">        </span><br><span class="line">        x = self.decoder(x)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model = MyCNNClassifier(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">print(model)</span><br></pre></td></tr></table></figure><pre><code>MyCNNClassifier(  (encoder): Sequential(    (0): Sequential(      (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (2): ReLU()    )    (1): Sequential(      (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (2): ReLU()    )  )  (decoder): Sequential(    (0): Linear(in_features=25088, out_features=1024, bias=True)    (1): Sigmoid()    (2): Linear(in_features=1024, out_features=10, bias=True)  ))</code></pre><p>Let’s break it down. We created an array <code>self.enc_sizes</code> that holds the sizes of our encoder. Then we create an array <code>conv_blocks</code> by iterating the sizes. Since we have to give booth a in size and an outsize for each layer we <code>zip</code>ed the size’array with itself by shifting it by one. </p><p>Just to be clear, take a look at the following example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sizes = [<span class="number">1</span>, <span class="number">32</span>, <span class="number">64</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> in_f,out_f <span class="keyword">in</span> zip(sizes, sizes[<span class="number">1</span>:]):</span><br><span class="line">    print(in_f,out_f)</span><br></pre></td></tr></table></figure><pre><code>1 3232 64</code></pre><p>Then, since <code>Sequential</code> does not accept a list, we decompose it by using the <code>*</code> operator.</p><p>Tada! Now if we just want to add a size, we can easily add a new number to the list. It is a common practice to make the size a parameter.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCNNClassifier</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, in_c, enc_sizes, n_classes)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.enc_sizes = [in_c, *enc_sizes]</span><br><span class="line">        </span><br><span class="line">        conv_blokcs = [conv_block(in_f, out_f, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>) </span><br><span class="line">                       <span class="keyword">for</span> in_f, out_f <span class="keyword">in</span> zip(self.enc_sizes, self.enc_sizes[<span class="number">1</span>:])]</span><br><span class="line">        </span><br><span class="line">        self.encoder = nn.Sequential(*conv_blokcs)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        self.decoder = nn.Sequential(</span><br><span class="line">            nn.Linear(<span class="number">32</span> * <span class="number">28</span> * <span class="number">28</span>, <span class="number">1024</span>),</span><br><span class="line">            nn.Sigmoid(),</span><br><span class="line">            nn.Linear(<span class="number">1024</span>, n_classes)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x = self.encoder(x)</span><br><span class="line">        </span><br><span class="line">        x = x.view(x.size(<span class="number">0</span>), <span class="number">-1</span>) <span class="comment"># flat</span></span><br><span class="line">        </span><br><span class="line">        x = self.decoder(x)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model = MyCNNClassifier(<span class="number">1</span>, [<span class="number">32</span>,<span class="number">64</span>, <span class="number">128</span>], <span class="number">10</span>)</span><br><span class="line">print(model)</span><br></pre></td></tr></table></figure><pre><code>MyCNNClassifier(  (encoder): Sequential(    (0): Sequential(      (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (2): ReLU()    )    (1): Sequential(      (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (2): ReLU()    )    (2): Sequential(      (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (2): ReLU()    )  )  (decoder): Sequential(    (0): Linear(in_features=25088, out_features=1024, bias=True)    (1): Sigmoid()    (2): Linear(in_features=1024, out_features=10, bias=True)  ))</code></pre><p>We can do the same for the decoder part</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dec_block</span><span class="params">(in_f, out_f)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> nn.Sequential(</span><br><span class="line">        nn.Linear(in_f, out_f),</span><br><span class="line">        nn.Sigmoid()</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCNNClassifier</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, in_c, enc_sizes, dec_sizes,  n_classes)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.enc_sizes = [in_c, *enc_sizes]</span><br><span class="line">        self.dec_sizes = [<span class="number">32</span> * <span class="number">28</span> * <span class="number">28</span>, *dec_sizes]</span><br><span class="line"></span><br><span class="line">        conv_blokcs = [conv_block(in_f, out_f, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>) </span><br><span class="line">                       <span class="keyword">for</span> in_f, out_f <span class="keyword">in</span> zip(self.enc_sizes, self.enc_sizes[<span class="number">1</span>:])]</span><br><span class="line">        </span><br><span class="line">        self.encoder = nn.Sequential(*conv_blokcs)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        dec_blocks = [dec_block(in_f, out_f) </span><br><span class="line">                       <span class="keyword">for</span> in_f, out_f <span class="keyword">in</span> zip(self.dec_sizes, self.dec_sizes[<span class="number">1</span>:])]</span><br><span class="line">        </span><br><span class="line">        self.decoder = nn.Sequential(*dec_blocks)</span><br><span class="line">        </span><br><span class="line">        self.last = nn.Linear(self.dec_sizes[<span class="number">-1</span>], n_classes)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x = self.encoder(x)</span><br><span class="line">        </span><br><span class="line">        x = x.view(x.size(<span class="number">0</span>), <span class="number">-1</span>) <span class="comment"># flat</span></span><br><span class="line">        </span><br><span class="line">        x = self.decoder(x)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model = MyCNNClassifier(<span class="number">1</span>, [<span class="number">32</span>,<span class="number">64</span>], [<span class="number">1024</span>, <span class="number">512</span>], <span class="number">10</span>)</span><br><span class="line">print(model)</span><br></pre></td></tr></table></figure><pre><code>MyCNNClassifier(  (encoder): Sequential(    (0): Sequential(      (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (2): ReLU()    )    (1): Sequential(      (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (2): ReLU()    )  )  (decoder): Sequential(    (0): Sequential(      (0): Linear(in_features=25088, out_features=1024, bias=True)      (1): Sigmoid()    )    (1): Sequential(      (0): Linear(in_features=1024, out_features=512, bias=True)      (1): Sigmoid()    )  )  (last): Linear(in_features=512, out_features=10, bias=True))</code></pre><p>We followed the same pattern, we create a new block for the decoding part, linear + sigmoid, and we pass an array with the sizes. We had to add a <code>self.last</code> since we do not want to activate the output</p><p>Now, we can even break down our model in two! Encoder + Decoder</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyEncoder</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, enc_sizes)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.conv_blokcs = nn.Sequential(*[conv_block(in_f, out_f, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>) </span><br><span class="line">                       <span class="keyword">for</span> in_f, out_f <span class="keyword">in</span> zip(enc_sizes, enc_sizes[<span class="number">1</span>:])])</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> self.conv_blokcs(x)</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDecoder</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, dec_sizes, n_classes)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.dec_blocks = nn.Sequential(*[dec_block(in_f, out_f) </span><br><span class="line">                       <span class="keyword">for</span> in_f, out_f <span class="keyword">in</span> zip(dec_sizes, dec_sizes[<span class="number">1</span>:])])</span><br><span class="line">        self.last = nn.Linear(dec_sizes[<span class="number">-1</span>], n_classes)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.dec_blocks()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCNNClassifier</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, in_c, enc_sizes, dec_sizes,  n_classes)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.enc_sizes = [in_c, *enc_sizes]</span><br><span class="line">        self.dec_sizes = [<span class="number">32</span> * <span class="number">28</span> * <span class="number">28</span>, *dec_sizes]</span><br><span class="line"></span><br><span class="line">        self.encoder = MyEncoder(self.enc_sizes)</span><br><span class="line">        </span><br><span class="line">        self.decoder = MyDecoder(dec_sizes, n_classes)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x = self.encoder(x)</span><br><span class="line">        </span><br><span class="line">        x = x.flatten(<span class="number">1</span>) <span class="comment"># flat</span></span><br><span class="line">        </span><br><span class="line">        x = self.decoder(x)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model = MyCNNClassifier(<span class="number">1</span>, [<span class="number">32</span>,<span class="number">64</span>], [<span class="number">1024</span>, <span class="number">512</span>], <span class="number">10</span>)</span><br><span class="line">print(model)</span><br></pre></td></tr></table></figure><pre><code>MyCNNClassifier(  (encoder): MyEncoder(    (conv_blokcs): Sequential(      (0): Sequential(        (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))        (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (2): ReLU()      )      (1): Sequential(        (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (2): ReLU()      )    )  )  (decoder): MyDecoder(    (dec_blocks): Sequential(      (0): Sequential(        (0): Linear(in_features=1024, out_features=512, bias=True)        (1): Sigmoid()      )    )    (last): Linear(in_features=512, out_features=10, bias=True)  ))</code></pre><p>Be aware that <code>MyEncoder</code> and <code>MyDecoder</code> could also be functions that returns a <code>nn.Sequential</code>. I prefer to use the first pattern for models and the second for building blocks.</p><p>By diving our module into submodules it is easier to <strong>share</strong> the code, <strong>debug</strong> it and <strong>test</strong> it.</p><h2 id="ModuleList-when-we-need-to-iterate"><a href="#ModuleList-when-we-need-to-iterate" class="headerlink" title="ModuleList : when we need to iterate"></a>ModuleList : when we need to iterate</h2><p><code>ModuleList</code> allows you to store <code>Module</code> as a list. It can be useful when you need to iterate through layer and store/use some information, like in U-net.</p><p>The main difference between <code>Sequential</code> is that <code>ModuleList</code> have not a <code>forward</code> method so the inner layers are not connected. Assuming we need each output of each layer in the decoder, we can store it by:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyModule</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sizes)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.layers = nn.ModuleList([nn.Linear(in_f, out_f) <span class="keyword">for</span> in_f, out_f <span class="keyword">in</span> zip(sizes, sizes[<span class="number">1</span>:])])</span><br><span class="line">        self.trace = []</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self,x)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> layer <span class="keyword">in</span> self.layers:</span><br><span class="line">            x = layer(x)</span><br><span class="line">            self.trace.append(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">model = MyModule([<span class="number">1</span>, <span class="number">16</span>, <span class="number">32</span>])</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">model(torch.rand((<span class="number">4</span>,<span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line">[print(trace.shape) <span class="keyword">for</span> trace <span class="keyword">in</span> model.trace]</span><br></pre></td></tr></table></figure><pre><code>torch.Size([4, 16])torch.Size([4, 32])[None, None]</code></pre><h2 id="ModuleDict-when-we-need-to-choose"><a href="#ModuleDict-when-we-need-to-choose" class="headerlink" title="ModuleDict: when we need to choose"></a>ModuleDict: when we need to choose</h2><p>What if we want to switch to <code>LearkyRelu</code> in our <code>conv_block</code>? We can use <code>ModuleDict</code> to create a dictionary of <code>Module</code> and dynamically switch <code>Module</code> when we want</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conv_block</span><span class="params">(in_f, out_f, activation=<span class="string">'relu'</span>, *args, **kwargs)</span>:</span></span><br><span class="line">    </span><br><span class="line">    activations = nn.ModuleDict([</span><br><span class="line">                [<span class="string">'lrelu'</span>, nn.LeakyReLU()],</span><br><span class="line">                [<span class="string">'relu'</span>, nn.ReLU()]</span><br><span class="line">    ])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> nn.Sequential(</span><br><span class="line">        nn.Conv2d(in_f, out_f, *args, **kwargs),</span><br><span class="line">        nn.BatchNorm2d(out_f),</span><br><span class="line">        activations[activation]</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(conv_block(<span class="number">1</span>, <span class="number">32</span>,<span class="string">'lrelu'</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>))</span><br><span class="line">print(conv_block(<span class="number">1</span>, <span class="number">32</span>,<span class="string">'relu'</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>))</span><br></pre></td></tr></table></figure><pre><code>Sequential(  (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (2): LeakyReLU(negative_slope=0.01))Sequential(  (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (2): ReLU())</code></pre><h2 id="Final-implementation"><a href="#Final-implementation" class="headerlink" title="Final implementation"></a>Final implementation</h2><p>Let’s wrap it up everything!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conv_block</span><span class="params">(in_f, out_f, activation=<span class="string">'relu'</span>, *args, **kwargs)</span>:</span></span><br><span class="line">    activations = nn.ModuleDict([</span><br><span class="line">                [<span class="string">'lrelu'</span>, nn.LeakyReLU()],</span><br><span class="line">                [<span class="string">'relu'</span>, nn.ReLU()]</span><br><span class="line">    ])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> nn.Sequential(</span><br><span class="line">        nn.Conv2d(in_f, out_f, *args, **kwargs),</span><br><span class="line">        nn.BatchNorm2d(out_f),</span><br><span class="line">        activations[activation]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dec_block</span><span class="params">(in_f, out_f)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> nn.Sequential(</span><br><span class="line">        nn.Linear(in_f, out_f),</span><br><span class="line">        nn.Sigmoid()</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyEncoder</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, enc_sizes, *args, **kwargs)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.conv_blokcs = nn.Sequential(*[conv_block(in_f, out_f, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>, *args, **kwargs) </span><br><span class="line">                       <span class="keyword">for</span> in_f, out_f <span class="keyword">in</span> zip(enc_sizes, enc_sizes[<span class="number">1</span>:])])</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> self.conv_blokcs(x)</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDecoder</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, dec_sizes, n_classes)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.dec_blocks = nn.Sequential(*[dec_block(in_f, out_f) </span><br><span class="line">                       <span class="keyword">for</span> in_f, out_f <span class="keyword">in</span> zip(dec_sizes, dec_sizes[<span class="number">1</span>:])])</span><br><span class="line">        self.last = nn.Linear(dec_sizes[<span class="number">-1</span>], n_classes)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.dec_blocks()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCNNClassifier</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, in_c, enc_sizes, dec_sizes,  n_classes, activation=<span class="string">'relu'</span>)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.enc_sizes = [in_c, *enc_sizes]</span><br><span class="line">        self.dec_sizes = [<span class="number">32</span> * <span class="number">28</span> * <span class="number">28</span>, *dec_sizes]</span><br><span class="line"></span><br><span class="line">        self.encoder = MyEncoder(self.enc_sizes, activation=activation)</span><br><span class="line">        </span><br><span class="line">        self.decoder = MyDecoder(dec_sizes, n_classes)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x = self.encoder(x)</span><br><span class="line">        </span><br><span class="line">        x = x.flatten(<span class="number">1</span>) <span class="comment"># flat</span></span><br><span class="line">        </span><br><span class="line">        x = self.decoder(x)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model = MyCNNClassifier(<span class="number">1</span>, [<span class="number">32</span>,<span class="number">64</span>], [<span class="number">1024</span>, <span class="number">512</span>], <span class="number">10</span>, activation=<span class="string">'lrelu'</span>)</span><br><span class="line">print(model)</span><br></pre></td></tr></table></figure><pre><code>MyCNNClassifier(  (encoder): MyEncoder(    (conv_blokcs): Sequential(      (0): Sequential(        (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))        (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (2): LeakyReLU(negative_slope=0.01)      )      (1): Sequential(        (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (2): LeakyReLU(negative_slope=0.01)      )    )  )  (decoder): MyDecoder(    (dec_blocks): Sequential(      (0): Sequential(        (0): Linear(in_features=1024, out_features=512, bias=True)        (1): Sigmoid()      )    )    (last): Linear(in_features=512, out_features=10, bias=True)  ))</code></pre><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>So, in summary.</p><ul><li>Use <code>Module</code> when you have a big block compose of multiple smaller blocks</li><li>Use <code>Sequential</code> when you want to create a small block from layers</li><li>Use <code>ModuleList</code> when you need to iterate through some layers or building blocks and do something</li><li>Use <code>ModuleDict</code> when you need to parametise some blocks of your model, for example an activation function</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Pytorch-how-and-when-to-use-Module-Sequential-ModuleList-and-ModuleDict&quot;&gt;&lt;a href=&quot;#Pytorch-how-and-when-to-use-Module-Sequential-Mod
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Minimum Spanning Trees</title>
    <link href="https://zhangruochi.com/Minimum-Spanning-Trees/2020/01/25/"/>
    <id>https://zhangruochi.com/Minimum-Spanning-Trees/2020/01/25/</id>
    <published>2020-01-25T20:56:49.000Z</published>
    <updated>2020-01-26T01:41:21.028Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Minimum-Spanning-Trees"><a href="#Minimum-Spanning-Trees" class="headerlink" title="Minimum Spanning Trees"></a>Minimum Spanning Trees</h3><ul><li>Kruskal’s Algorithm <ul><li>O(n + m lg(n))</li></ul></li><li>Prim’s Algorithm<ul><li>O(n lg(n) + m lg(n))</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, nodes)</span>:</span></span><br><span class="line">        self.parent =  &#123;v: <span class="number">-1</span> <span class="keyword">for</span> v <span class="keyword">in</span> nodes&#125;</span><br><span class="line">        self.rank = &#123;r: <span class="number">0</span> <span class="keyword">for</span> r <span class="keyword">in</span> nodes&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_root</span><span class="params">(self, i)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.parent[i] == <span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">        self.parent[i] = self.get_root(self.parent[i])</span><br><span class="line">        <span class="keyword">return</span> self.parent[i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(self, i, j)</span>:</span></span><br><span class="line">        i_root = self.get_root(i)</span><br><span class="line">        j_root = self.get_root(j)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> i_root != j_root:</span><br><span class="line">            <span class="keyword">if</span> self.rank[i_root] == self.rank[j_root]:</span><br><span class="line">                self.parent[i_root] = j_root</span><br><span class="line">                self.rank[j_root] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> self.rank[i_root] &gt; self.rank[j_root]:</span><br><span class="line">                self.parent[j_root] = i_root</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.parent[i_root] = j_root</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_connected</span><span class="params">(self, i, j)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.get_root(i) == self.get_root(j)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHeap</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, initial = None, key = None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> key:</span><br><span class="line">            self.key = <span class="keyword">lambda</span> x: x.weight</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> initial:</span><br><span class="line">           self._data = [(key(item), item) <span class="keyword">for</span> item <span class="keyword">in</span> initial]</span><br><span class="line">           heapq.heapify(self._data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">           self._data = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="comment"># print(self._data)</span></span><br><span class="line">        heapq.heappush(self._data, (self.key(item), item))</span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">       <span class="keyword">return</span> heapq.heappop(self._data)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">empty</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span> <span class="keyword">if</span> self._data <span class="keyword">else</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># KruskalMST(G):</span></span><br><span class="line"><span class="comment">#     DisjointSets forest</span></span><br><span class="line"><span class="comment">#     foreach (Vertex v : G):</span></span><br><span class="line"><span class="comment">#         forest.makeSet(v)</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#     PriorityQueue Q    // min edge weight</span></span><br><span class="line"><span class="comment">#     foreach (Edge e : G):</span></span><br><span class="line"><span class="comment">#         Q.insert(e)</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#     Graph T = (V, &#123;&#125;)</span></span><br><span class="line"><span class="comment">#     while |T.edges()| &lt; n-1:</span></span><br><span class="line"><span class="comment">#         Edge (u, v) = Q.removeMin()</span></span><br><span class="line"><span class="comment">#         if forest.find(u) != forest.find(v):</span></span><br><span class="line"><span class="comment">#             T.addEdge(u, v) </span></span><br><span class="line"><span class="comment">#             forest.union(forest.find(u)),</span></span><br><span class="line"><span class="comment">#     return T</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kruskal</span><span class="params">(graph)</span>:</span></span><br><span class="line"></span><br><span class="line">    edge = namedtuple(<span class="string">"edge"</span>,(<span class="string">'u'</span>,<span class="string">'v'</span>,<span class="string">'weight'</span>))        </span><br><span class="line">    heap = MyHeap()</span><br><span class="line">    union_find = UnionFind(graph.keys())</span><br><span class="line"></span><br><span class="line">    path = []</span><br><span class="line">    weight = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> u <span class="keyword">in</span> graph:</span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> graph[u]:</span><br><span class="line">            heap.push(edge(u,v,graph[u][v]))</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> len(path) &lt; len(graph)<span class="number">-1</span>:</span><br><span class="line">        edge = heap.pop()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> union_find.is_connected(edge.u, edge.v):</span><br><span class="line">            path.append(edge)</span><br><span class="line">            weight += edge.weight</span><br><span class="line">            union_find.union(edge.u,edge.v)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> weight,path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># PrimMST(G, s):</span></span><br><span class="line"><span class="comment">#     foreach (Vertex v : G):</span></span><br><span class="line"><span class="comment">#         d[v] = +inf</span></span><br><span class="line"><span class="comment">#         p[v] = NULL</span></span><br><span class="line"><span class="comment">#     d[s] = 0</span></span><br><span class="line"><span class="comment">#     PriorityQueue Q // min distance, defined by d[v] </span></span><br><span class="line"><span class="comment">#     Q.buildHeap(G.vertices())</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     Graph T // "labeled set"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     repeat n times:</span></span><br><span class="line"><span class="comment">#         Vertex m = Q.removeMin()</span></span><br><span class="line"><span class="comment">#         T.add(m)</span></span><br><span class="line"><span class="comment">#         foreach (Vertex v : neighbors of m not in T):</span></span><br><span class="line"><span class="comment">#             if cost(v, m) &lt; d[v]:</span></span><br><span class="line"><span class="comment">#                 d[v] = cost(v, m)</span></span><br><span class="line"><span class="comment">#                 p[v] = m</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prim</span><span class="params">(graph, root)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Input: G, Graph;</span></span><br><span class="line">    <span class="comment">#      s, vertex in G, starting vertex</span></span><br><span class="line">    <span class="comment"># Output: T, a minimum spanning tree (MST) of G</span></span><br><span class="line"></span><br><span class="line">    prev = <span class="keyword">None</span></span><br><span class="line">    path = []</span><br><span class="line">    total = <span class="number">0</span>                   <span class="comment"># Total cost of edges in tree</span></span><br><span class="line">    visited = set()            <span class="comment"># Set of vertices in tree</span></span><br><span class="line">    Node = namedtuple(<span class="string">"Node"</span>,(<span class="string">"v"</span>,<span class="string">"weight"</span>))</span><br><span class="line">    heap = MyHeap()   <span class="comment"># Unexplored edges ordered by cost</span></span><br><span class="line">    heap.push(Node(root,<span class="number">0</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> heap.empty():</span><br><span class="line">        cur_node = heap.pop()</span><br><span class="line">        <span class="keyword">if</span> cur_node.v <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">            visited.add(cur_node.v)</span><br><span class="line">            total += cur_node.weight</span><br><span class="line">            <span class="keyword">if</span> prev:</span><br><span class="line">                path.append((prev,cur_node.v,cur_node.weight))</span><br><span class="line">            prev = cur_node.v</span><br><span class="line">            <span class="keyword">for</span> neighbour <span class="keyword">in</span> graph[cur_node.v]:</span><br><span class="line">                <span class="keyword">if</span> neighbour <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">                    heap.push(Node(neighbour, graph[cur_node.v][neighbour]))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> total,path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> weight,path</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    graph_dict = &#123;  <span class="string">"v1"</span>:&#123;<span class="string">"v2"</span>: <span class="number">32</span>, <span class="string">"v4"</span>: <span class="number">17</span>&#125;,</span><br><span class="line">                    <span class="string">"v2"</span>:&#123;<span class="string">"v1"</span>:<span class="number">32</span>, <span class="string">"v5"</span>: <span class="number">45</span>&#125;,</span><br><span class="line">                    <span class="string">"v3"</span>:&#123;<span class="string">"v7"</span>:<span class="number">5</span>,<span class="string">"v4"</span>:<span class="number">18</span>&#125;,</span><br><span class="line">                    <span class="string">"v4"</span>:&#123;<span class="string">"v3"</span>:<span class="number">18</span>,<span class="string">"v1"</span>:<span class="number">17</span>, <span class="string">"v5"</span>:<span class="number">10</span>,<span class="string">"v8"</span>:<span class="number">3</span>&#125;,</span><br><span class="line">                    <span class="string">"v5"</span>:&#123;<span class="string">"v4"</span>:<span class="number">10</span>,<span class="string">"v2"</span>:<span class="number">45</span>,<span class="string">"v9"</span>:<span class="number">25</span>,<span class="string">"v6"</span>:<span class="number">28</span>&#125;,</span><br><span class="line">                    <span class="string">"v6"</span>:&#123;<span class="string">"v5"</span>:<span class="number">28</span>,<span class="string">"v10"</span>:<span class="number">6</span>&#125;,</span><br><span class="line">                    <span class="string">"v7"</span>:&#123;<span class="string">"v3"</span>:<span class="number">5</span>,<span class="string">"v8"</span>:<span class="number">59</span>&#125;,</span><br><span class="line">                    <span class="string">"v8"</span>:&#123;<span class="string">"v4"</span>:<span class="number">3</span>,<span class="string">"v7"</span>:<span class="number">59</span>,<span class="string">"v9"</span>:<span class="number">4</span>&#125;,</span><br><span class="line">                    <span class="string">"v9"</span>:&#123;<span class="string">"v8"</span>:<span class="number">4</span>,<span class="string">"v5"</span>:<span class="number">25</span>,<span class="string">"v10"</span>:<span class="number">12</span>&#125;,</span><br><span class="line">                    <span class="string">"v10"</span>:&#123;<span class="string">"v9"</span>:<span class="number">12</span>,<span class="string">"v6"</span>:<span class="number">6</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    weight,path = prim(graph_dict, <span class="string">'v1'</span>)</span><br><span class="line">    print(weight)</span><br><span class="line">    print(path)</span><br><span class="line"></span><br><span class="line">    weight,path = kruskal(graph_dict)</span><br><span class="line">    print(weight)</span><br><span class="line">    print(path)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Minimum-Spanning-Trees&quot;&gt;&lt;a href=&quot;#Minimum-Spanning-Trees&quot; class=&quot;headerlink&quot; title=&quot;Minimum Spanning Trees&quot;&gt;&lt;/a&gt;Minimum Spanning Tre
      
    
    </summary>
    
    
      <category term="Data Structure and Algorithm" scheme="https://zhangruochi.com/categories/Data-Structure-and-Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>Unordered Data Structure</title>
    <link href="https://zhangruochi.com/Unordered-Data-Structure/2020/01/24/"/>
    <id>https://zhangruochi.com/Unordered-Data-Structure/2020/01/24/</id>
    <published>2020-01-24T15:17:20.000Z</published>
    <updated>2020-01-25T21:02:01.118Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hashing"><a href="#Hashing" class="headerlink" title="Hashing"></a>Hashing</h3><p>We want to define a keyspace, a (mathematical) description of the keys for a set of data, using a <code>function</code> to map the keyspace into a small set of integers.</p><p>A Hash Table consists of three things:</p><ul><li>Hash Function</li><li>An array</li><li>Collision</li></ul><h4 id="Hash-Function"><a href="#Hash-Function" class="headerlink" title="Hash Function"></a>Hash Function</h4><p>Our hash function consists of two parts:</p><ul><li>A hash: transfrom input to an integer(index)</li><li>A compression: make the hash function within the bounds of the arrays(%N).</li></ul><p>Characteristics of a good hash function:</p><ul><li>Computation Time</li><li>Deterministic</li><li>Satisfythe SUHA(simple unifrom hashing assumption)</li></ul><h4 id="std-map"><a href="#std-map" class="headerlink" title="std::map"></a>std::map</h4><ol><li><code>std::map</code></li></ol><ul><li>std::operator[] </li><li>::insert ::erase</li><li>::lower_bound(key) -&gt; Iterator to first element ≤ key </li><li>::upper_bound(key) -&gt; Iterator to first element &gt; key</li></ul><ol><li>std::unordered_map</li></ol><ul><li>std::operator[]</li><li>std::insert </li><li>std::erase</li><li>std::load_factor()</li><li>std::max_load_factor(ml) -&gt; Sets the max load factor</li></ul><h3 id="Disjoint-Sets"><a href="#Disjoint-Sets" class="headerlink" title="Disjoint Sets"></a>Disjoint Sets</h3><blockquote><p><a href="https://zhangruochi.com/Union-Find/2019/11/19/">https://zhangruochi.com/Union-Find/2019/11/19/</a></p></blockquote><ul><li>Maintain a collection S = {$s_0$, $s_1$, \cdots,  $s_k$}.</li><li>Each set has a <strong>representative member</strong>.</li></ul><h4 id="Disjoint-Sets-ADT"><a href="#Disjoint-Sets-ADT" class="headerlink" title="Disjoint Sets ADT"></a>Disjoint Sets ADT</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeSet</span><span class="params">(<span class="keyword">const</span> T &amp; t)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">const</span> T &amp; k1, <span class="keyword">const</span> T &amp; k2)</span></span>; </span><br><span class="line"><span class="function">T &amp; <span class="title">find</span><span class="params">(<span class="keyword">const</span> T &amp; k)</span></span>;</span><br></pre></td></tr></table></figure><p>In an Disjoint Sets implemented with smart unions and path compression on find</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> DisjointSets::find(<span class="keyword">int</span> i) &#123; </span><br><span class="line">    <span class="keyword">if</span> ( s[i] &lt; <span class="number">0</span> ) &#123; </span><br><span class="line">        <span class="keyword">return</span> i; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="keyword">return</span> _find( s[i] ); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> DisjointSets::unionBySize(<span class="keyword">int</span> root1, <span class="keyword">int</span> root2) &#123; </span><br><span class="line">    <span class="keyword">int</span> newSize = arr_[root1] + arr_[root2];</span><br><span class="line"><span class="comment">// If arr_[root1] is less than (more negative), it is the larger set; // we union the smaller set, root2, with root1.</span></span><br><span class="line">    <span class="keyword">if</span> ( arr_[root1] &lt; arr_[root2] ) &#123;</span><br><span class="line">        arr_[root2] = root1;</span><br><span class="line">        arr_[root1] = newSize; </span><br><span class="line">    &#125;</span><br><span class="line">      <span class="comment">// Otherwise, do the opposite:</span></span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        arr_[root1] = root2;</span><br><span class="line">        arr_[root2] = newSize; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DisjointSets</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> s[<span class="number">256</span>];</span><br><span class="line"></span><br><span class="line">    DisjointSets() &#123; <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) s[i] = <span class="number">-1</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Modify the find() method below</span></span><br><span class="line"><span class="comment"> * to implement path compression</span></span><br><span class="line"><span class="comment"> * so that element i and all of</span></span><br><span class="line"><span class="comment"> * its ancestors in the up-tree</span></span><br><span class="line"><span class="comment"> * point to directly to the root</span></span><br><span class="line"><span class="comment"> * after find() completes.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> DisjointSets::find(<span class="keyword">int</span> i) &#123;</span><br><span class="line">  <span class="keyword">if</span> ( s[i] &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    s[i] = find(s[i]);</span><br><span class="line">    <span class="keyword">return</span> s[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  DisjointSets d;</span><br><span class="line"></span><br><span class="line">  d.s[<span class="number">1</span>] = <span class="number">3</span>;</span><br><span class="line">  d.s[<span class="number">3</span>] = <span class="number">5</span>;</span><br><span class="line">  d.s[<span class="number">5</span>] = <span class="number">7</span>;</span><br><span class="line">  d.s[<span class="number">7</span>] = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"d.find(3) = "</span> &lt;&lt; d.find(<span class="number">3</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"d.s(1) = "</span> &lt;&lt; d.s[<span class="number">1</span>] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"d.s(3) = "</span> &lt;&lt; d.s[<span class="number">3</span>] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"d.s(5) = "</span> &lt;&lt; d.s[<span class="number">5</span>] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"d.s(7) = "</span> &lt;&lt; d.s[<span class="number">7</span>] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Graph"><a href="#Graph" class="headerlink" title="Graph"></a>Graph</h3><h4 id="Graph-ADT"><a href="#Graph-ADT" class="headerlink" title="Graph ADT"></a>Graph ADT</h4><p>Data:</p><ul><li>Vertices</li><li>Edges</li><li>Some data structure maintaining the structure between vertices and edges.</li></ul><p>Functions:</p><ul><li>insertVertex(K key);</li><li>insertEdge(Vertex v1, Vertex v2, K key);</li><li>removeVertex(Vertex v);</li><li>removeEdge(Vertex v1, Vertex v2);</li><li>incidentEdges(Vertex v);</li><li>areAdjacent(Vertex v1, Vertex v2);</li><li>origin(Edge e);</li><li>destination(Edge e);</li></ul><h4 id="Graph-Implementation-Edge-List"><a href="#Graph-Implementation-Edge-List" class="headerlink" title="Graph Implementation: Edge List"></a>Graph Implementation: Edge List</h4><ul><li>insertVertex: O(1)</li><li>removeVertex: O(1)</li><li>areAdjancet: O(m)</li><li>incidentEdges: O(m)</li></ul><h4 id="Graph-Implementation-Adjacnecy-Matrix"><a href="#Graph-Implementation-Adjacnecy-Matrix" class="headerlink" title="Graph Implementation: Adjacnecy Matrix"></a>Graph Implementation: Adjacnecy Matrix</h4><ul><li>insertVertex: O(n)</li><li>removeVertex: O(n)</li><li>areAdjancet: O(1)</li><li>incidentEdges: O(n)</li></ul><h4 id="Graph-Implementation-Adjacnecy-List"><a href="#Graph-Implementation-Adjacnecy-List" class="headerlink" title="Graph Implementation: Adjacnecy List"></a>Graph Implementation: Adjacnecy List</h4><ul><li>insertVertex: O(1)</li><li>removeVertex: O(degree v)</li><li>areAdjancet: min(dgree(v1), degree(v2))</li><li>incidentEdges: O(degree v)</li></ul><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="1.png" width="50%" height="50%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Graph</div></center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Hashing&quot;&gt;&lt;a href=&quot;#Hashing&quot; class=&quot;headerlink&quot; title=&quot;Hashing&quot;&gt;&lt;/a&gt;Hashing&lt;/h3&gt;&lt;p&gt;We want to define a keyspace, a (mathematical) des
      
    
    </summary>
    
    
      <category term="Data Structure and Algorithm" scheme="https://zhangruochi.com/categories/Data-Structure-and-Algorithm/"/>
    
      <category term="Programming Language" scheme="https://zhangruochi.com/categories/Programming-Language/"/>
    
      <category term="C++" scheme="https://zhangruochi.com/categories/Programming-Language/C/"/>
    
    
  </entry>
  
  <entry>
    <title>C Plus Plus Reference</title>
    <link href="https://zhangruochi.com/C-Plus-Plus-Reference/2020/01/23/"/>
    <id>https://zhangruochi.com/C-Plus-Plus-Reference/2020/01/23/</id>
    <published>2020-01-23T14:54:31.000Z</published>
    <updated>2020-01-23T15:23:37.582Z</updated>
    
    <content type="html"><![CDATA[<ul><li>在引用的使用中，单纯给某个变量取个别名是毫无意义的，引用的目的主要用于在函数参数传递中，解决大块数据或对象的传递效率和空间不如意的问题。</li><li>用引用传递函数的参数，能保证参数传递中不产生副本，提高传递的效率，且通过const的使用，保证了引用传递的安全性。</li><li>引用与指针的区别是，指针通过某个指针变量指向一个对象后，对它所指向的变量间接操作。程序中使用指针，程序的可读性差；而引用本身就是目标变量的别名，对引用的操作就是对目标变量的操作。</li><li>使用引用的时机。流操作符&lt;&lt;和&gt;&gt;、赋值操作符=的返回值、拷贝构造函数的参数、赋值操作符=的参数、其它情况都推荐使用引用。</li></ul><h3 id="引用作为参数"><a href="#引用作为参数" class="headerlink" title="引用作为参数"></a>引用作为参数</h3><p>引用的一个重要作用就是作为函数的参数。以前的C语言中函数参数传递是值传递，如果有大块数据作为参数传递的时候，采用的方案往往是指针，因为这样可以避免将整块数据全部压栈，可以提高程序的效率。但是现在（C++中）又增加了一种同样有效率的选择（在某些特殊情况下又是必须的选择），就是引用。</p><p>传递引用给函数与传递指针的效果是一样的。这时，被调函数的形参就成为原来主调函数中的实参变量或对象的一个别名来使用，所以在被调函数中对形参变量的操作就是对其相应的目标对象（在主调函数中）的操作。</p><p>使用引用传递函数的参数，在内存中并没有产生实参的副本，它是直接对实参操作；而使用一般变量传递函数的参数，当发生函数调用时，需要给形参分配存储单元，形参变量是实参变量的副本；如果传递的是对象，还将调用拷贝构造函数。因此，当参数传递的数据较大时，用引用比用一般变量传递参数的效率和所占空间都好。</p><p>使用指针作为函数的参数虽然也能达到与使用引用的效果，但是，在被调函数中同样要给形参分配存储单元，且需要重复使用”*指针变量名”的形式进行运算，这很容易产生错误且程序的阅读性较差；另一方面，在主调函数的调用点处，必须用变量的地址作为实参。而引用更容易使用，更清晰。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> &amp;p1,  <span class="keyword">int</span> &amp;p2)</span>  <span class="comment">//此处函数的形参p1, p2都是引用 </span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">int</span> p;</span><br><span class="line">    p=p1;  p1=p2;  p2=p; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">swap(a,b);  <span class="comment">//直接以变量a和b作为实参调用swap函数</span></span><br></pre></td></tr></table></figure><h3 id="常引用"><a href="#常引用" class="headerlink" title="常引用"></a>常引用</h3><p>常引用声明方式：</p><blockquote><p>const 类型标识符 &amp;引用名=目标变量名；</p></blockquote><p>用这种方式声明的引用，不能通过引用对目标变量的值进行修改,从而使引用的目标成为const，达到了引用的安全性。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a ;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;ra=a;</span><br><span class="line">ra=<span class="number">1</span>;  <span class="comment">//错误，不能通过引用对目标变量的值进行修改</span></span><br><span class="line">a=<span class="number">1</span>;  <span class="comment">//正确</span></span><br></pre></td></tr></table></figure><h3 id="引用作为返回值"><a href="#引用作为返回值" class="headerlink" title="引用作为返回值"></a>引用作为返回值</h3><ul><li>以引用返回函数值，定义函数时需要在函数名前加 <code>&amp;</code></li><li>用引用返回一个函数值的最大好处是，在内存中不产生被返回值的副本</li><li>将引用作为函数返回值时应该注意不能返回局部数据（例如局部变量、局部对象、局部数组等）的引用，因为当函数调用完成后局部数据就会被销毁，有可能在下次使用时数据就不存在了，C++ 编译器检测到该行为时也会给出警告；</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> &amp; <span class="title">func</span><span class="params">(<span class="keyword">int</span> &amp;n)</span> </span>&#123;</span><br><span class="line">    n += <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> &amp;b = func(a);   <span class="comment">// 传递a的引用给b</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a = %d, b = %d, &amp;a = %p, &amp;b = %p\n"</span>, a, b, &amp;a, &amp;b);</span><br><span class="line">    b++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a = %d, b = %d\n"</span>, a, b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> y = func(x);    <span class="comment">// 用y接收func()的返回值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"x = %d, y = %d, &amp;x = %p, &amp;y = %p\n"</span>, x, y, &amp;x, &amp;y);</span><br><span class="line">    y++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"x = %d, y = %d\n"</span>, x, y);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a = 20, b = 20, &amp;a = 0x7fff159e9214, &amp;b = 0x7fff159e9214</span></span><br><span class="line"><span class="comment">// a = 21, b = 21</span></span><br><span class="line"><span class="comment">// x = 20, y = 20, &amp;x = 0x7fff159e9218, &amp;y = 0x7fff159e921c</span></span><br><span class="line"><span class="comment">// x = 20, y = 21</span></span><br></pre></td></tr></table></figure><h3 id="引用类型的类成员变量"><a href="#引用类型的类成员变量" class="headerlink" title="引用类型的类成员变量"></a>引用类型的类成员变量</h3><ol><li>不能有默认构造函数，必须提供构造函数</li><li>构造函数的形参必须为引用类型</li><li>初始化必须在成员初始化链表内完成</li></ol><p>凡是有引用类型的成员变量的类，不能有缺省构造函数。默认构造函数没有对引用成员提供默认的初始化机制，也因此造成引用未初始化的编译错误。</p><p>不能直接在构造函数里初始化，必须用到初始化列表，且形参也必须是引用类型。构造函数分为初始化和计算两个阶段，前者对应成员初始化链表，后者对应构造函数函数体。引用必须在初始化阶段，也即在成员初始化链表中完成，否则编译时会报错（引用未初始化）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ref</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">        Ref (<span class="keyword">int</span> &amp;target) : myref(target) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Ref constructor"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">printRef</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"myref is: "</span> &lt;&lt; myref &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">virtual</span> ~Ref () &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">int</span> &amp;myref;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">20</span>;</span><br><span class="line">    <span class="function">Ref <span class="title">r</span><span class="params">(a)</span></span>;</span><br><span class="line">    r.printRef();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> &amp;b = a;</span><br><span class="line">    <span class="function">Ref <span class="title">r1</span><span class="params">(b)</span></span>;</span><br><span class="line">    r1.printRef();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// error:引用定义时必须初始化</span></span><br><span class="line">    <span class="comment">// int &amp;c;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://www.cnblogs.com/xiaofengkang/archive/2011/05/16/2048262.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiaofengkang/archive/2011/05/16/2048262.html</a></li><li><a href="https://www.zfl9.com/cpp-refer.html" target="_blank" rel="noopener">https://www.zfl9.com/cpp-refer.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;在引用的使用中，单纯给某个变量取个别名是毫无意义的，引用的目的主要用于在函数参数传递中，解决大块数据或对象的传递效率和空间不如意的问题。&lt;/li&gt;
&lt;li&gt;用引用传递函数的参数，能保证参数传递中不产生副本，提高传递的效率，且通过const的使用，保证了引用传递的
      
    
    </summary>
    
    
      <category term="Programming Language" scheme="https://zhangruochi.com/categories/Programming-Language/"/>
    
      <category term="C++" scheme="https://zhangruochi.com/categories/Programming-Language/C/"/>
    
    
  </entry>
  
  <entry>
    <title>Ordered Data Structures</title>
    <link href="https://zhangruochi.com/Ordered-Data-Structures/2020/01/22/"/>
    <id>https://zhangruochi.com/Ordered-Data-Structures/2020/01/22/</id>
    <published>2020-01-22T18:47:51.000Z</published>
    <updated>2020-01-24T01:46:32.353Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h3><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="1.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Arrays</div></center><h4 id="Initialization"><a href="#Initialization" class="headerlink" title="Initialization"></a>Initialization</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 静态分配</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>&#125;; <span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>]=&#123;<span class="number">0</span>&#125;; <span class="comment">//正确，省略初始化最后一个元素,最后省略的元素初始化为0</span></span><br><span class="line"><span class="keyword">int</span> a[n]=&#123;<span class="number">0</span>&#125;; <span class="comment">// 注意n必须为const类型，否则错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态分配</span></span><br><span class="line"><span class="keyword">int</span> *a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>] ();  <span class="comment">// 每个元素初始化为0,括号内不能写其他值，只能初始化为0</span></span><br><span class="line"><span class="keyword">int</span>* a = <span class="keyword">new</span> <span class="keyword">int</span>[n];<span class="comment">// 注意n必须为const</span></span><br></pre></td></tr></table></figure><h4 id="Array-Limitation-1"><a href="#Array-Limitation-1" class="headerlink" title="Array Limitation #1"></a>Array Limitation #1</h4><p>All data in an array must be of the same type</p><ul><li>An integer array must only contain integers. </li><li>A string array must only contain strings.</li></ul><p>We know two facts about arrays:</p><ul><li>Elements are all the same type.</li><li>The size (number of bytes) of the type of data is known.</li></ul><p>We can calculate the offset to any given index from the start of the array:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Create an array of 10 primes:</span></span><br><span class="line">  <span class="keyword">int</span> values[<span class="number">10</span>] = &#123; <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">17</span>, <span class="number">21</span>, <span class="number">23</span> &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Print the size of each type `int`:</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">int</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(values) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Using pointer arithmetic, ask the computer to calculate</span></span><br><span class="line">  <span class="comment">// the offset from the beginning of the array to [2]:</span></span><br><span class="line">  <span class="keyword">int</span> offset = (<span class="keyword">long</span>)&amp;(values[<span class="number">2</span>]) - (<span class="keyword">long</span>)&amp;(values[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; offset &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output: </span></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 40</span></span><br><span class="line"><span class="comment">// 8</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Simple C++ class for representing a Cube (with constructors).</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @author</span></span><br><span class="line"><span class="comment"> *   Wade Fagen-Ulmschneider &lt;waf@illinois.edu&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> uiuc &#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Cube</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">      Cube(<span class="keyword">double</span> length);  <span class="comment">// One argument constructor</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">double</span> <span class="title">getVolume</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">double</span> <span class="title">getSurfaceArea</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">setLength</span><span class="params">(<span class="keyword">double</span> length)</span></span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> Cube &amp; other);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">      <span class="keyword">double</span> length_;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Calculating the memory seperation of elements in an array.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @author</span></span><br><span class="line"><span class="comment"> *   Wade Fagen-Ulmschneider &lt;waf@illinois.edu&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../Cube.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> uiuc::Cube;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Create an array of 3 `Cube`s:</span></span><br><span class="line">  Cube cubes[<span class="number">3</span>] = &#123; Cube(<span class="number">11</span>), Cube(<span class="number">42</span>), Cube(<span class="number">400</span>) &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Print the size of each type `Cube`:</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">double</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(Cube) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Using pointer arithmetic, ask the computer to calculate</span></span><br><span class="line">  <span class="comment">// the offset from the beginning of the array to [2]:</span></span><br><span class="line">  <span class="keyword">int</span> offset = (<span class="keyword">long</span>)&amp;(cubes[<span class="number">2</span>]) - (<span class="keyword">long</span>)&amp;(cubes[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; offset &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 8</span></span><br><span class="line"><span class="comment">// 8</span></span><br><span class="line"><span class="comment">// 16</span></span><br></pre></td></tr></table></figure><h4 id="Array-Limitation-2"><a href="#Array-Limitation-2" class="headerlink" title="Array Limitation #2"></a>Array Limitation #2</h4><p>Arrays have a fixed capacity.</p><ul><li>Arrays must store their data sequentially in memory.</li><li>The <code>capacity</code> of an array is the maximum number of elements that can be stored.</li><li>The <code>size</code> of an array is the current number of elements stored in the array.</li></ul><p>The only way to add another element is to allocate a new, larger array and copy over all of the data</p><h3 id="std-vector"><a href="#std-vector" class="headerlink" title="std::vector"></a>std::vector</h3><p>The std::vector implements an array that dynamically grows in size automatically. However, all properties remain true:</p><ul><li>Array elements are a fixed data type.</li><li>At any given point, the array has a fixed capacity.</li><li>The array must be expanded when the capacity is reached.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Calculating the memory seperation of elements in a std::vector.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @author</span></span><br><span class="line"><span class="comment"> *   Wade Fagen-Ulmschneider &lt;waf@illinois.edu&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../Cube.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> uiuc::Cube;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Cube&gt; cubes = &#123; Cube(<span class="number">11</span>), Cube(<span class="number">42</span>), Cube(<span class="number">400</span>) &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Examine capacity:  </span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Initial Capacity: "</span> &lt;&lt; cubes.capacity() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  cubes.push_back( Cube(<span class="number">800</span>) );</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Size after adding: "</span> &lt;&lt; cubes.size() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Capacity after adding: "</span> &lt;&lt; cubes.capacity() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Using pointer arithmetic, ask the computer to calculate</span></span><br><span class="line">  <span class="comment">// the offset from the beginning of the array to [2]:</span></span><br><span class="line">  <span class="keyword">int</span> offset = (<span class="keyword">long</span>)&amp;(cubes[<span class="number">2</span>]) - (<span class="keyword">long</span>)&amp;(cubes[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Memory separation: "</span> &lt;&lt; offset &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Find a specific `target` cube in the array:</span></span><br><span class="line">  Cube target = Cube(<span class="number">400</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">0</span>; i &lt; cubes.size(); i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (target == cubes[i]) &#123;</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Found target at ["</span> &lt;&lt; i &lt;&lt; <span class="string">"]"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Linked-List"><a href="#Linked-List" class="headerlink" title="Linked List"></a>Linked List</h3><p>A list <code>node</code> refers to pair of both the data and the link. Zero or more ListNode elements linked together form a Linked List.</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="2.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Linked List</div></center><ul><li>A pointer called the “head pointer” stores the link to the beginning of the list.</li><li>A pointer to NULL (Ø) marks the end of the list.</li></ul><blockquote><p>List.h</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">const</span> T &amp; <span class="keyword">operator</span>[](<span class="keyword">unsigned</span> index);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertAtFront</span><span class="params">(<span class="keyword">const</span> T &amp; data)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We define this constructor to make sure that head_ is null-initialized.</span></span><br><span class="line">    List() : head_(<span class="literal">nullptr</span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We define a destructor to delete the memory allocated for the ListNode</span></span><br><span class="line">    <span class="comment">// objects when the List is destroyed.</span></span><br><span class="line">    ~List() &#123;</span><br><span class="line">      <span class="comment">// We'll walk through from the head.</span></span><br><span class="line">      ListNode *thru = head_;</span><br><span class="line">      <span class="keyword">while</span> (thru != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="comment">// Copy the address that the "thru" pointer has currently.</span></span><br><span class="line">        ListNode* toDelete = thru;</span><br><span class="line">        <span class="comment">// Step the pointer to the "next" pointer of the current node.</span></span><br><span class="line">        thru = thru-&gt;next;</span><br><span class="line">        <span class="comment">// Now, finally, we can delete the toDelete pointer. We could not</span></span><br><span class="line">        <span class="comment">// delete it before we stepped away from it above, because we needed</span></span><br><span class="line">        <span class="comment">// the next pointer information first.</span></span><br><span class="line">        <span class="keyword">delete</span> toDelete;</span><br><span class="line">        <span class="comment">// We don't strictly need to set toDelete to nullptr here because</span></span><br><span class="line">        <span class="comment">// it goes out of scope immediately after, but remember that you</span></span><br><span class="line">        <span class="comment">// should generally do this after deleting a pointer:</span></span><br><span class="line">        toDelete = <span class="literal">nullptr</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line">      <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">const</span> T &amp; data;</span><br><span class="line">        ListNode *next;</span><br><span class="line">        ListNode(<span class="keyword">const</span> T &amp; data) : data(data), next(<span class="literal">nullptr</span>) &#123; &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    ListNode *head_;   <span class="comment">/*&lt; Head pointer for our List */</span></span><br><span class="line">    </span><br><span class="line">    ListNode* _find(<span class="keyword">const</span> T &amp; data);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>List.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Simple linked-memory, templated list class.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @author</span></span><br><span class="line"><span class="comment"> *   Wade Fagen-Ulmschneider &lt;waf@illinois.edu&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Redundantly make sure theat List.h is included. Since List.h is written</span></span><br><span class="line"><span class="comment">// to include this file, we won't need to explicitly include List.hpp in</span></span><br><span class="line"><span class="comment">// the main.cpp file.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"List.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">const</span> T &amp; List&lt;T&gt;::<span class="keyword">operator</span>[](<span class="keyword">unsigned</span> index) &#123;</span><br><span class="line">  <span class="comment">// Start a `thru` pointer to advance thru the list:</span></span><br><span class="line">  ListNode *thru = head_;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Loop until the end of the list (or until a `nullptr`):</span></span><br><span class="line">  <span class="keyword">while</span> (index &gt; <span class="number">0</span> &amp;&amp; thru-&gt;next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    thru = thru-&gt;next;</span><br><span class="line">    index--;</span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line">  <span class="comment">// Return the data:</span></span><br><span class="line">  <span class="keyword">return</span> thru-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> List&lt;T&gt;::insertAtFront(<span class="keyword">const</span> T &amp; data) &#123;</span><br><span class="line">  <span class="comment">// Create a new ListNode on the heap:</span></span><br><span class="line">  ListNode *node = <span class="keyword">new</span> ListNode(data);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set the new node’s next pointer point the current</span></span><br><span class="line">  <span class="comment">// head of the List:</span></span><br><span class="line">  node-&gt;next = head_;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set the List’s head pointer to be the new node:</span></span><br><span class="line">  head_ = node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Finds and returns the ListNode containing `data` in the</span></span><br><span class="line"><span class="comment"> * List or `nullptr` if the data is not found.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">typename</span> List&lt;T&gt;::ListNode *List&lt;T&gt;::_find(<span class="keyword">const</span> T &amp; data) &#123;</span><br><span class="line">  ListNode *thru = head_;</span><br><span class="line">  <span class="keyword">while</span> (thru != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (thru-&gt;data == data) &#123; <span class="keyword">return</span> thru; &#125;</span><br><span class="line">    thru = thru-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nullptr</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="List-Capacity"><a href="#List-Capacity" class="headerlink" title="List Capacity"></a>List Capacity</h4><p>In a list, the time it takes to access a given index grows based on the size of the list.(In contrast, an array can access any element in a constant, fixed amount of time. Therefore, for accessing a given index, an array is faster than a list.)</p><h4 id="Linked-Memory"><a href="#Linked-Memory" class="headerlink" title="Linked Memory"></a>Linked Memory</h4><ul><li>Linked memory stores data in “nodes” linked together by “links” (pointers).</li><li>A basic linked memory structure is a Linked List, which consists of zero or more ListNodes lined together and a head pointer.</li><li>A linked list provides a flexible alternative to an array.</li></ul><h3 id="Array-and-List-Operations"><a href="#Array-and-List-Operations" class="headerlink" title="Array and List Operations"></a>Array and List Operations</h3><p>Arrays and Lists are both ordered collections of data. There are several key operations common to both all ordered collections that are worth analyzing.</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="3.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Array and List</div></center><ol><li>Objective: Access a given index in the collection.<ul><li>Array: <code>O(1)</code></li><li>List: <code>O(n)</code></li></ul></li><li>Objective: Insert an element at the front<ul><li>Array: <code>O(1)</code> (Amortized constant time when array size is doubled when copied)</li><li>List: <code>O(1)</code></li></ul></li><li>Objective: Given data, find the location of that data in the collection.<ul><li>Unsorted Array: <code>O(n)</code></li><li>Sorted Array: <code>O( lg(n) )</code></li><li>List: <code>O(n)</code></li></ul></li><li>Objective: Given an element (array index), insert a new element immediately afterwards.<ul><li>Array: <code>O(n)</code></li><li>List: <code>O(1)</code></li></ul></li><li>Objective: Given an element (ListNode or index), delete the element immediately afterwards.<ul><li>Array: <code>O(n)</code></li><li>List: <code>O(1)</code></li></ul></li></ol><h3 id="Queue-Data-Structure"><a href="#Queue-Data-Structure" class="headerlink" title="Queue (Data Structure)"></a>Queue (Data Structure)</h3><p>A queue is a first-in first-out data structure that is similar to waiting in a line or <code>queue</code>.</p><p>A structure’s Abstract Data Type (ADT) is how data interacts with the structure. An ADT is not an implementation, it is a description.</p><h4 id="Queue-ADT"><a href="#Queue-ADT" class="headerlink" title="Queue ADT"></a>Queue ADT</h4><ul><li><strong>create</strong> : Creates an empty queue</li><li><strong>push</strong> : Adds data to the back of the queue</li><li><strong>pop</strong> : Removes data from the front of the queue empty è Returns true if the queue is empty</li><li><strong>empty</strong> : Returns true if the queue is empty</li></ul><p>A queue may be implemented with an array or a doubly-linked list. Both an array-based and a list-based implementation can be built to run in constant, O(1) running time.</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="4.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Queue</div></center><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Create a std::queue:Duquesne Light</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; q;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add several strings to the queue:</span></span><br><span class="line">  q.push( <span class="string">"Orange"</span> );</span><br><span class="line">  q.push( <span class="string">"Blue"</span> );</span><br><span class="line">  q.push( <span class="string">"Illinois"</span> );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Print the front of the queue out and pop it off:</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"First pop(): "</span> &lt;&lt; q.front() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  q.pop();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add another string and then print ouf the front of the queue:</span></span><br><span class="line">  q.push( <span class="string">"Illini"</span> );</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Second pop(): "</span> &lt;&lt; q.front() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Stack-Data-Structure"><a href="#Stack-Data-Structure" class="headerlink" title="Stack (Data Structure)"></a>Stack (Data Structure)</h3><p>A stack is a last-in first-out data structure that is similar to a pile (stack) of papers.</p><h4 id="Stack-ADT"><a href="#Stack-ADT" class="headerlink" title="Stack ADT"></a>Stack ADT</h4><ul><li><strong>create</strong> : Creates an empty stack </li><li><strong>push</strong> : Adds data to the top of the stack</li><li><strong>pop</strong> : Removes data from the top of the stack </li><li><strong>empty</strong> : Returns true if the stack is empty</li></ul><p>A stack may be implemented with an array or a linked list. Both an array-based and a list-based implementation can be built to run in constant, O(1) running time.</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="5.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Stack</div></center><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Create a std::stack:</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">stack</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; s;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add several strings to the stack:</span></span><br><span class="line">  s.push( <span class="string">"Orange"</span> );</span><br><span class="line">  s.push( <span class="string">"Blue"</span> );</span><br><span class="line">  s.push( <span class="string">"Illinois"</span> );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Print the front of the stack out and pop it off:</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"First pop(): "</span> &lt;&lt; s.top() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  s.pop();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add another string and then print ouf the front of the stack:</span></span><br><span class="line">  s.push( <span class="string">"Illini"</span> );</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Second pop(): "</span> &lt;&lt; s.top() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Tree"><a href="#Tree" class="headerlink" title="Tree"></a>Tree</h3><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="6.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Tree</div></center><h4 id="Terminology"><a href="#Terminology" class="headerlink" title="Terminology"></a>Terminology</h4><p>Most ancestry terms apply as expected:</p><ul><li>Sibling<br><code>B</code> and <code>D</code> are siblings. </li><li>Ancestor<br><code>M</code>, <code>L</code>, and <code>D</code> share <code>A</code> as a common ancestor.</li><li>Grandchild / grandchildren<br><code>M</code> is a <code>D</code>’s grandchild.</li><li><p>Grandparent<br><code>D</code> is <code>M</code>’s grandparent.</p></li><li><p>Trees formed with nodes and edges.</p></li><li>Trees must be <code>rooted</code>, <code>directed</code>, and <code>acyclic</code>.</li><li>The relationship between nodes in a tree follow classical ancestry terms (parent, child, etc).</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinaryTree</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line">      <span class="keyword">public</span>:</span><br><span class="line">        <span class="comment">// *See note below about how references are being used here.</span></span><br><span class="line">        T &amp; data;</span><br><span class="line">        <span class="comment">// Note that you can declare multiple pointers on the same line as</span></span><br><span class="line">        <span class="comment">// shorthand, like this:</span></span><br><span class="line">        <span class="comment">//   TreeNode *left, *right;</span></span><br><span class="line">        <span class="comment">// But since this requires you to write the "*" with each variable</span></span><br><span class="line">        <span class="comment">// name, it can be a little confusing, or prone to making a mistake.</span></span><br><span class="line">        <span class="comment">// Instead, you can declare the pointers on separate lines like this:</span></span><br><span class="line">        TreeNode* left;</span><br><span class="line">        TreeNode* right;</span><br><span class="line">        <span class="comment">// **See note below about how this initialization list is styled.</span></span><br><span class="line">        TreeNode(T &amp; data) : data(data), left(<span class="literal">nullptr</span>), right(<span class="literal">nullptr</span>) &#123; &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    TreeNode *root_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="Property"><a href="#Property" class="headerlink" title="Property"></a>Property</h4><ul><li>The <code>height</code> of a binary tree is the number of edges in the longest path from the root to a leaf.</li><li>A binary tree is <code>full</code> if and only if every node has either zero children or two children.</li><li>A binary tree is <code>perfect</code> if and only if all interior nodes have two children and leaves are at the same level.</li><li>A binary tree is <code>complete</code> if and only if the tree is perfect up until the last level and all leaf nodes on the last level are pushed to the left.</li></ul><h3 id="Binary-Search-Tree"><a href="#Binary-Search-Tree" class="headerlink" title="Binary Search Tree"></a>Binary Search Tree</h3><p>A binary search tree (BST) is an ordered binary tree capable of being used as a search structure:</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="7.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">BST</div></center><p>A binary tree is a BST if for every node in the tree:</p><ul><li>Nodes in the left subtree are less than itself.</li><li>Nodes in the right subtree are greater than itself.</li></ul><h4 id="Dictionary-ADT"><a href="#Dictionary-ADT" class="headerlink" title="Dictionary ADT"></a>Dictionary ADT</h4><ul><li><strong>find</strong> : Finds the data associated with a key in the dictionary</li><li><strong>insert</strong> : Adds a key/data pair to the dictionary </li><li><strong>remove</strong> : Removes a key from the dictionary </li><li><strong>empty</strong> Returns true if the dictionary is empty</li></ul><p>BST-Based Dictionary</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="8.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">BST Dictionary</div></center><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> D&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dictionary</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Dictionary();</span><br><span class="line">    <span class="function"><span class="keyword">const</span> D &amp; <span class="title">find</span><span class="params">(<span class="keyword">const</span> K &amp; key)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> K &amp; key, <span class="keyword">const</span> D &amp; data)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> D &amp; <span class="title">remove</span><span class="params">(<span class="keyword">const</span> K &amp; key)</span></span>;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line">      <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">const</span> K &amp; key;</span><br><span class="line">        <span class="keyword">const</span> D &amp; data;</span><br><span class="line">        TreeNode *left, *right;</span><br><span class="line">        TreeNode(<span class="keyword">const</span> K &amp; key, <span class="keyword">const</span> D &amp; data)</span><br><span class="line">: key(key), data(data), left(<span class="literal">nullptr</span>), right(<span class="literal">nullptr</span>) &#123; &#125;</span><br><span class="line">&#125;;</span><br><span class="line">  TreeNode *head_;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="In-Order-Predecessor-IOP"><a href="#In-Order-Predecessor-IOP" class="headerlink" title="In-Order Predecessor (IOP):"></a>In-Order Predecessor (IOP):</h4><p>The in-order predecessor is the previous node in an in-order traversal of a BST. The IOP of a node will always be the right-most node in<br>the node’s left sub-tree.</p><h4 id="BST-remove"><a href="#BST-remove" class="headerlink" title="BST::remove"></a>BST::remove</h4><ul><li>Zero children: Simple, delete the node. </li><li>One child: Simple, works like a linked list.</li><li>Two children:<ul><li>Find the IOP of the node to be removed.</li><li>Swap with the IOP.</li><li>Remove the node in it’s new position.</li></ul></li></ul><h4 id="BST-Analysis"><a href="#BST-Analysis" class="headerlink" title="BST Analysis"></a>BST Analysis</h4><ul><li>There are <strong>n!</strong> different ways to create BSTs with the same data.<ul><li>The worst-case BST will have a height proportional to the number of nodes.</li><li>An average BST will have a height proportional to the logarithm of the number of nodes.</li></ul></li><li>Using a height balance factor, we can formalize if a given BST is balanced.</li></ul><h3 id="Balanced-BST"><a href="#Balanced-BST" class="headerlink" title="Balanced BST"></a>Balanced BST</h3><p>Balanced BSTs are height-balanced trees that ensures nearly half of the data is<br>located in each subtree:</p><h4 id="BST-Rotations"><a href="#BST-Rotations" class="headerlink" title="BST Rotations"></a>BST Rotations</h4><p><a href="https://zhangruochi.com/AVL-Tree/2019/09/15/">https://zhangruochi.com/AVL-Tree/2019/09/15/</a></p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="9.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">BST Dictionary</div></center><ul><li>BST rotations restore the <code>balance property</code> to a tree after an insert causes a BST to be out of balance.</li><li>Four possible rotations: L, R, LR, RL<br>  – Rotations are local operations.<br>  – Rotations do not impact the broader tree.<br>  – Rotations run in O(1) time.’</li></ul><h3 id="B-tree"><a href="#B-tree" class="headerlink" title="B tree"></a>B tree</h3><blockquote><p><a href="https://www.cnblogs.com/nullzx/p/8729425.html" target="_blank" rel="noopener">https://www.cnblogs.com/nullzx/p/8729425.html</a></p></blockquote><p>大规模数据存储中，实现索引查询这样一个实际背景下，树节点存储的元素数量是有限的（如果元素数量非常多的话，查找就退化成节点内部的线性查找了），这样导致二叉查找树结构由于树的深度过大而造成磁盘I/O读写过于频繁，进而导致查询效率低下，因此我们该想办法降低树的深度，从而减少磁盘查找存取的次数。一个基本的想法就是：采用多叉树结构（由于树节点元素数量是有限的，自然该节点的子树数量也就是有限的）。</p><h4 id="B-Tree-Properties"><a href="#B-Tree-Properties" class="headerlink" title="B-Tree Properties"></a>B-Tree Properties</h4><p>For a B-tree “of order m”:</p><ol><li>All keys within a node are in sorted order. </li><li>Each node contains no more than m-1 keys.</li><li>Each internal node has exactly one more child than key(at most m children, so a B-tree of order m is like an m-way tree). <ul><li>A root node can be a leaf or have [2, m] children.</li><li>Each non-root, internal node has [ceil(m/2), m] children.</li></ul></li><li>All leaves are on the same level.</li></ol><h4 id="B-Tree-Insert"><a href="#B-Tree-Insert" class="headerlink" title="B-Tree Insert"></a>B-Tree Insert</h4><p>插入操作是指插入一条记录，即（key,value）的键值对。如果B树中已存在需要插入的键值对，则用需要插入的value替换旧的value。若B树不存在这个key,则一定是在叶子结点中进行插入操作。</p><ul><li>根据要插入的key的值，找到叶子结点并插入。</li><li>判断当前结点key的个数是否小于等于m-1，若满足则结束，否则进行第3步。</li><li>以结点中间的key为中心分裂成左右两部分，然后将这个中间的key插入到父结点中，这个key的左子树指向分裂后的左半部分，这个key的右子支指向分裂后的右半部分，然后将当前结点指向父结点，继续进行第3步。</li></ul><h4 id="B-tree-Search"><a href="#B-tree-Search" class="headerlink" title="B-tree Search"></a>B-tree Search</h4><p>Use can use the binary search ti replace the linear seach. But it is not important because the process of comsuming most time is <code>_fetchChild</code>.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * BTree class outline.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @author</span></span><br><span class="line"><span class="comment"> *   Wade Fagen-Ulmschneider &lt;waf@illinois.edu&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BTree</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BTreeNode</span> &#123;</span></span><br><span class="line">      <span class="keyword">public</span>:</span><br><span class="line">        K* keys_;</span><br><span class="line">        <span class="keyword">unsigned</span> keys_ct_;</span><br><span class="line">        <span class="keyword">bool</span> _isLeaf;</span><br><span class="line"></span><br><span class="line">        BTreeNode() : keys_(<span class="literal">nullptr</span>), keys_ct_(<span class="number">0</span>), _isLeaf(<span class="literal">true</span>) &#123; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">isLeaf</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    BTreeNode *root_;</span><br><span class="line"></span><br><span class="line">    BTreeNode &amp; _fetchChild(<span class="keyword">unsigned</span> index);</span><br><span class="line">    <span class="keyword">bool</span> _exists(BTreeNode &amp; node, <span class="keyword">const</span> K &amp; key);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"BTree.hpp"</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * An empty BTree.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @author</span></span><br><span class="line"><span class="comment"> *   Wade Fagen-Ulmschneider &lt;waf@illinois.edu&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"BTree.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K&gt;</span><br><span class="line"><span class="keyword">bool</span> BTree&lt;K&gt;::_exists(BTree&lt;K&gt;::BTreeNode &amp; node, <span class="keyword">const</span> K &amp; key) &#123;</span><br><span class="line">  <span class="keyword">unsigned</span> i;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; node.keys_ct_ &amp;&amp; key &lt; node.keys_[i]; i++) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( i &lt; node.keys_ct_ &amp;&amp; key == node.keys_[i] ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( node.isLeaf() ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    BTreeNode nextChild = node._fetchChild(i);</span><br><span class="line">    <span class="keyword">return</span> _exists(nextChild, key);</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K&gt;</span><br><span class="line"><span class="keyword">bool</span> BTree&lt;K&gt;::BTreeNode::isLeaf() <span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="comment">// Stub implementation </span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K&gt;</span><br><span class="line"><span class="keyword">typename</span> BTree&lt;K&gt;::BTreeNode &amp; BTree&lt;K&gt;::_fetchChild(<span class="keyword">unsigned</span> index) &#123;</span><br><span class="line">  <span class="comment">// Stub implementation </span></span><br><span class="line">  <span class="keyword">return</span> *root_;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Heap"><a href="#Heap" class="headerlink" title="Heap"></a>Heap</h3><p>(min)Heap: A <strong>complete</strong> binary tree T is a min-heap if:</p><ul><li>T={} or</li><li>T = {r, $T_L$, $T_R$}, where r is less than the roots of {$T_L$, $T_R$} and {$T_L$, $T_R$} are min-heaps.</li></ul><h4 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">Heap</span>&lt;T&gt;:</span>:_insert(<span class="keyword">const</span> T &amp; key) &#123;</span><br><span class="line"><span class="comment">// Check to ensure there’s space to insert an element // ...if not, grow the array</span></span><br><span class="line"><span class="keyword">if</span> ( size_ == capacity_ ) &#123; _growArray(); &#125;</span><br><span class="line"><span class="comment">// Insert the new element at the end of the array item_[++size] = key;</span></span><br><span class="line">   <span class="comment">// Restore the heap property</span></span><br><span class="line">_heapifyUp(size); </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">Heap</span>&lt;T&gt;:</span>:_insert(<span class="keyword">const</span> T &amp; key) &#123;</span><br><span class="line"><span class="comment">// Check to ensure there’s space to insert an element // ...if not, grow the array</span></span><br><span class="line">    <span class="keyword">if</span> ( size_ == capacity_ ) &#123; _growArray(); &#125;</span><br><span class="line"><span class="comment">// Insert the new element at the end of the array item_[++size] = key;</span></span><br><span class="line">  <span class="comment">// Restore the heap property</span></span><br><span class="line">    _heapifyUp(size); </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">Heap</span>&lt;T&gt;:</span>:_heapifyUp( _________________ ) &#123;</span><br><span class="line">    <span class="keyword">if</span> ( index &gt; _________ ) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( item_[index] &lt; item_[ parent(index) ] ) &#123;</span><br><span class="line">            <span class="built_in">std</span>::swap( item_[index], item_[ parent(index) ] );</span><br><span class="line">            _heapifyUp( ________________ );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="removeMin"><a href="#removeMin" class="headerlink" title="removeMin"></a>removeMin</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">Heap</span>&lt;T&gt;:</span>:_removeMin() &#123;</span><br><span class="line"><span class="comment">// Swap with the last value </span></span><br><span class="line">    T minValue = item_[<span class="number">1</span>]; </span><br><span class="line">    item_[<span class="number">1</span>] = item_[size_]; </span><br><span class="line">    size--;</span><br><span class="line"><span class="comment">// Restore the heap property </span></span><br><span class="line">    _heapifyDown();</span><br><span class="line">  <span class="comment">// Return the minimum value</span></span><br><span class="line">  <span class="keyword">return</span> minValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">Heap</span>&lt;T&gt;:</span>:_heapifyDown(<span class="keyword">int</span> index) &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !_isLeaf(index) ) &#123;</span><br><span class="line">        T minChildIndex = _minChild(index);</span><br><span class="line">        <span class="keyword">if</span> ( item_[index] ___ item_[minChildIndex] ) &#123;</span><br><span class="line">            <span class="built_in">std</span>::swap( item_[index], item_[minChildIndex] );</span><br><span class="line">            _heapifyDown( ________________ ); &#125;</span><br><span class="line">        &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Build-heap"><a href="#Build-heap" class="headerlink" title="Build heap"></a>Build heap</h4><ol><li>Sort the array–it’s a heap!</li><li><p>heapifyUp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">Heap</span>&lt;T&gt;:</span>:buildHeap() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">2</span>; i &lt;= size_; i++) &#123;</span><br><span class="line">        heapifyUp(i); A P N O W</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>heapifyDown</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">Heap</span>&lt;T&gt;:</span>:buildHeap() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = parent(size); i &gt; <span class="number">0</span>; i--) &#123; </span><br><span class="line">        heapifyDown(i);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      Arrays,Vector,LinkList,Binary Tree, AVL Tree, B-Tree, Heap
    
    </summary>
    
    
      <category term="Data Structure and Algorithm" scheme="https://zhangruochi.com/categories/Data-Structure-and-Algorithm/"/>
    
      <category term="Programming Language" scheme="https://zhangruochi.com/categories/Programming-Language/"/>
    
      <category term="C++" scheme="https://zhangruochi.com/categories/Programming-Language/C/"/>
    
    
  </entry>
  
  <entry>
    <title>C++ Review</title>
    <link href="https://zhangruochi.com/C-Plus-Plus-Review/2020/01/21/"/>
    <id>https://zhangruochi.com/C-Plus-Plus-Review/2020/01/21/</id>
    <published>2020-01-21T18:01:14.000Z</published>
    <updated>2020-01-22T11:57:00.083Z</updated>
    
    <content type="html"><![CDATA[<p>C++ is a strongly typed programming language where every variable has a <code>type</code>, <code>name</code>, <code>value</code>, and <code>location</code> in memory.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> value = <span class="number">42</span>;</span><br></pre></td></tr></table></figure><h3 id="C-types"><a href="#C-types" class="headerlink" title="C++ types"></a>C++ types</h3><p>the type of a variable defines the contents of the variable. Every <code>type</code> is either:</p><h4 id="Primitive"><a href="#Primitive" class="headerlink" title="Primitive"></a>Primitive</h4><ul><li>int, stores integers</li><li>char, stores single characters/single byte</li><li>bool, stores a Boolean (true or false)</li><li>float, stores a floating point number</li><li>double, stores a double-precision floating point number </li><li>void, denotes the absence of a value</li></ul><h4 id="User-defined"><a href="#User-defined" class="headerlink" title="User-defined"></a>User-defined</h4><ul><li>Std</li><li>An unbounded number of user-defined types can exist – we’ll create many of our own!</li></ul><h3 id="C-program"><a href="#C-program" class="headerlink" title="C++ program"></a>C++ program</h3><p>Every C++ program must contain a starting point. By the C++ standard, the starting point is a function:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>By convention, the return value of main is 0 (zero) if the program was successful and non-zero on errors.</p><h3 id="Classes"><a href="#Classes" class="headerlink" title="Classes"></a>Classes</h3><h4 id="Encapsulation-1"><a href="#Encapsulation-1" class="headerlink" title="Encapsulation #1"></a>Encapsulation #1</h4><p>C++ classes encapsulate <strong>data</strong> and associated <strong>functionality</strong> into an object.</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="1.png" width="80%" height="90%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Encapsulation</div></center><p>In C++, data and functionality are separated into two separate protections: public and private.</p><ul><li>Public members can be accessed by client code.</li><li>Private members cannot be accessed by client code (only used within the class itself).</li></ul><h4 id="Encapsulation-2"><a href="#Encapsulation-2" class="headerlink" title="Encapsulation #2"></a>Encapsulation #2</h4><p>In C++, the interface (.h file) to the class is defined separately from the implementation (.cpp file).</p><p>A header file (.h) defines the interface to the class, which includes:</p><ul><li>Declaration of all member variables</li><li>Declaration of all member functions</li></ul><p>An implementation file (.cpp) contains the code to implement the class (or other C++ code).</p><h3 id="C-standard-library"><a href="#C-standard-library" class="headerlink" title="C++ standard library"></a>C++ standard library</h3><p>The C++ standard library (std) provides a set of commonly used functionality and data structures to build upon.</p><h4 id="Std-Organization"><a href="#Std-Organization" class="headerlink" title="Std Organization"></a>Std Organization</h4><p>The C++ standard library is organized into many separate sub-libraries that can be #include’d in any C++ program.</p><ul><li>The iostream header includes operations for reading/writing to files and the console itself, including std::cout.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>All functionality used from the standard library will be part of the <code>std namespace</code>.<ul><li>Namespaces allow us to avoid name conflicts for commonly used names.</li><li>If a feature from a namespace is used often, it can be imported into the global space with using:<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ul><blockquote><p>Cube.h</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Simple C++ class for representing a Cube.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @author</span></span><br><span class="line"><span class="comment"> *   Wade Fagen-Ulmschneider &lt;waf@illinois.edu&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// All header (.h) files start with "#pragma once":</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// A class is defined with the `class` keyword, the name</span></span><br><span class="line"><span class="comment">// of the class, curly braces, and a required semicolon</span></span><br><span class="line"><span class="comment">// at the end:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cube</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:  <span class="comment">// Public members:</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getVolume</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getSurfaceArea</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setLength</span><span class="params">(<span class="keyword">double</span> length)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>: <span class="comment">// Private members:</span></span><br><span class="line">    <span class="keyword">double</span> length_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Cube.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Simple C++ class for representing a Cube.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @author</span></span><br><span class="line"><span class="comment"> *   Wade Fagen-Ulmschneider &lt;waf@illinois.edu&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Cube.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> Cube::getVolume() &#123;</span><br><span class="line">  <span class="keyword">return</span> length_ * length_ * length_;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> Cube::getSurfaceArea() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">6</span> * length_ * length_;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Cube::setLength(<span class="keyword">double</span> length) &#123;</span><br><span class="line">  length_ = length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>main.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * C++ code for creating a Cube of length 2.4 units.</span></span><br><span class="line"><span class="comment"> * - See ../cpp-std/main.cpp for a similar program with print statements.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @author</span></span><br><span class="line"><span class="comment"> *   Wade Fagen-Ulmschneider &lt;waf@illinois.edu&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Cube.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Cube c;</span><br><span class="line"></span><br><span class="line">  c.setLength(<span class="number">3.48</span>);</span><br><span class="line">  <span class="keyword">double</span> volume = c.getVolume();</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Volume: "</span> &lt;&lt; volume &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Stack-Memory"><a href="#Stack-Memory" class="headerlink" title="Stack Memory"></a>Stack Memory</h3><p>In C++, the programmer has control over the memory and lifecycle of every variable! By default, variables live in stack memory.</p><p>Stack memory is associated with the <code>current</code> function and the memory’s lifecycle is tied to the function(When the function returns or ends, the stack memory of that function is released).</p><p>Stack memory always starts from high addresses and grows down.</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="2.png" width="50%" height="50%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Encapsulation</div></center><h4 id="amp"><a href="#amp" class="headerlink" title="&amp;"></a>&amp;</h4><p>In C++, the &amp; operator returns the memory address of a variable.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * C++ program using the &amp; operator to find the address of a variable in memory.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @author</span></span><br><span class="line"><span class="comment"> *   Wade Fagen-Ulmschneider &lt;waf@illinois.edu&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> num = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Value: "</span>   &lt;&lt;  num &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Address: "</span> &lt;&lt; &amp;num &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Pointer"><a href="#Pointer" class="headerlink" title="Pointer"></a>Pointer</h4><p>A pointer is a variable that stores the memory address of the data.</p><ul><li>Simply put: pointers are a level of indirection from the data.</li><li>In C++, a pointer is defined by adding an * to the type of the variable.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> * p = &amp;num;</span><br></pre></td></tr></table></figure><ul><li>Given a pointer, a level of indirection can be removed with the dereference operator *.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> * p = &amp;num;</span><br><span class="line"><span class="keyword">int</span> value_in_num = *p; </span><br><span class="line">*p = <span class="number">42</span>;</span><br></pre></td></tr></table></figure><h4 id="Puzzle"><a href="#Puzzle" class="headerlink" title="Puzzle"></a>Puzzle</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">someOtherFunction</span><span class="params">()</span></span>;  <span class="comment">// Forward decl</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Cube.h"</span></span></span><br><span class="line"><span class="keyword">using</span> uiuc::Cube;</span><br><span class="line"></span><br><span class="line"><span class="function">Cube *<span class="title">CreateUnitCube</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Cube cube;</span><br><span class="line">  cube.setLength(<span class="number">15</span>);</span><br><span class="line">  <span class="keyword">return</span> &amp;cube;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Cube *c = CreateUnitCube();</span><br><span class="line">  someOtherFunction();</span><br><span class="line">  <span class="keyword">double</span> a = c-&gt;getSurfaceArea();</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Surface Area: "</span> &lt;&lt; a &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">double</span> v = c-&gt;getVolume();</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Volume: "</span> &lt;&lt; v &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="3.png" width="50%" height="50%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Stack Memory</div></center><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="4.png" width="50%" height="50%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Stack Memory</div></center><h3 id="Heap-Memory"><a href="#Heap-Memory" class="headerlink" title="Heap Memory"></a>Heap Memory</h3><p>Heap memory allows us to create memory independent of the lifecycle of a function.</p><ul><li>The only way to create heap memory in C++ is with the <code>new</code> operator.</li><li>The new operator returns a <code>pointer</code> to the memory storing the data – not an instance of the data itself.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> * numPtr = <span class="keyword">new</span> <span class="keyword">int</span>;</span><br></pre></td></tr></table></figure><h4 id="nullptr"><a href="#nullptr" class="headerlink" title="nullptr"></a>nullptr</h4><p>The C++ keyword nullptr is a pointer that points to the memory address 0x0.</p><ul><li>nullptr represents a pointer to <code>nowhere</code></li><li>Address 0x0 is reserved and never used by the system</li><li>Address 0x0 will always generate an “segmentation fault” when accessed.</li><li>Calls to delete 0x0 are ignored</li></ul><h4 id="Arrow-Operator-gt"><a href="#Arrow-Operator-gt" class="headerlink" title="Arrow Operator (-&gt;)"></a>Arrow Operator (-&gt;)</h4><p>When an object is stored via a pointer, access can be made to member functions using the <code>-&gt;</code> operator:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c -&gt; getVolume();</span><br><span class="line">(*c).getVolume();</span><br></pre></td></tr></table></figure><h3 id="C-program’s-source-code-organization"><a href="#C-program’s-source-code-organization" class="headerlink" title="C++ program’s source code organization"></a>C++ program’s source code organization</h3><ul><li><p><code>.h</code> files are “header files”. These usually have definitions of objects and declarations of global functions. Recently, some people name header files with a “.hpp” suffix instead.</p></li><li><p><code>.cpp</code> files are often called the “implementation files,” or simply the “source files”. This is where most function definitions and main program logic go.</p></li></ul><p>Take the <code>Cube</code> code above as example:</p><p>When you write #include <iostream>, the compiler will look for the iostream header file in a system-wide library path that is located outside of your current directory.</iostream></p><p>#include “Cube.h” just like in the Cube.cpp file. You have to include the necessary headers in every cpp file where they are needed. However, you shouldn’t use #include to literally include one cpp file in another! There is no need to write #include “Cube.cpp” because the function definitions in the Cube.cpp file will be compiled separately and then linked to the code from the main.cpp file.</p><p>The Cube.cpp files and main.cpp files make requests to include various header files. (The compiler might automatically skip some requests because of #pragma once to avoid including multiple times in the same file.) The contents of the requested header files will be temporarily copied into the cpp source code file where they are included. Then, the cpp file with all of its extra included content will be compiled into something called an object file. (Our provided examples keep the object files hidden in a subdirectory, so you don’t need to bother with them. But, if you see a file that has a .o extension, that is an object file.) Each cpp file is separately compiled into an object file. So, in this case Cube.cpp will be compiled into Cube.o, and main.cpp will be compiled into <code>main.o</code>.</p><h3 id="Class-Constructors"><a href="#Class-Constructors" class="headerlink" title="Class Constructors"></a>Class Constructors</h3><p><code>Automatic Default Constructor</code>:  If we do not provide any custom constructors, the C++ compiler provides an automatic default constructor for our class for free. The automatic default constructor will only initialize all member variables to their default values. If any custom constructor is defined, an automatic default constructor is not defined.</p><p><code>Custom Default Constructor</code>: The simplest constructor we can provide is a custom default constructor that specifies the state of the object when the object is constructed. We define one by creating:</p><ul><li>A member function with the same name of the class</li><li>The function takes zero parameters.</li><li>The function does not have a return type.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cube::Cube()  <span class="comment">// custom default constructor</span></span><br></pre></td></tr></table></figure><p><code>Custom Constructors</code>: We can also specify custom, non-default constructors that require client code to supply arguments.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cube::Cube(<span class="keyword">double</span> length)</span><br><span class="line"><span class="comment">// one-argument ctor specifying initial length</span></span><br></pre></td></tr></table></figure><h3 id="Copy-Constructors"><a href="#Copy-Constructors" class="headerlink" title="Copy Constructors"></a>Copy Constructors</h3><p>In C++, a copy constructor is a special constructor that exists to make a copy of an existing object.</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="5.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">copy constructor</div></center><p>If we do not provide a custom copy constructor, the C++ compiler provides an automatic copy constructor for our class for free. The automatic copy constructor will copy the contents of all member variables.</p><p>A custom copy constructor is:</p><ul><li>Has exactly one argument<br>– The argument must be const reference of the same type as the class.</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cube::Cube(const Cube &amp; obj)</span><br></pre></td></tr></table></figure><p>Often, copy constructors are invoked automatically:</p><ul><li>Passing an object as a parameter (by value) </li><li>Returning an object from a function (by value) </li><li>Initializing a new object</li></ul><h3 id="Assignment-Operator"><a href="#Assignment-Operator" class="headerlink" title="Assignment Operator"></a>Assignment Operator</h3><p>A custom assignment operator is:</p><ul><li>Is a public member function of the class.</li><li>Has the function name <code>operator=</code>.</li><li>Has a return value of a reference of the class’ type.</li><li>Has exactly one argument<br>– The argument must be const reference of the class’ type.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Cube &amp; Cube::<span class="keyword">operator</span>=(<span class="keyword">const</span> Cube &amp; obj) &#123;</span><br><span class="line">  length_ = obj.length_;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Assignment operator invoked!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Variable-Storage"><a href="#Variable-Storage" class="headerlink" title="Variable Storage"></a>Variable Storage</h3><p> In C++, an instance of a variable can be stored directly <code>in memory</code>, <code>accessed by pointer</code>, or <code>accessed by reference</code>.</p> <center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="4.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Variable Storage</div></center><h4 id="Direct-Storage"><a href="#Direct-Storage" class="headerlink" title="Direct Storage"></a>Direct Storage</h4><p>By default, variables are stored directly in memory. </p><ul><li>The type of a variable has no modifiers.</li><li>The object takes up exactly its size in memory.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cube c;            <span class="comment">// Stores a Cube in memory</span></span><br><span class="line"><span class="keyword">int</span> i;             <span class="comment">// Stores an integer in memory</span></span><br><span class="line">uiuc::HSLAPixel p; <span class="comment">// Stores a pixel in memory</span></span><br></pre></td></tr></table></figure><h4 id="Storage-by-Pointer"><a href="#Storage-by-Pointer" class="headerlink" title="Storage by Pointer"></a>Storage by Pointer</h4><ul><li>The type of a variable is modified with an asterisk (*). </li><li>A pointer takes a “memory address width” of memory<br>(ex: 64 bits on a 64-bit system).</li><li>The pointer “points” to the allocated space of the object.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cube *c;            <span class="comment">// Pointer to a Cube in memory</span></span><br><span class="line"><span class="keyword">int</span> *i;             <span class="comment">// Pointer to an integer in memory</span></span><br><span class="line">uiuc::HSLAPixel *p; <span class="comment">// Pointer to a pixel in memory</span></span><br></pre></td></tr></table></figure><h4 id="Storage-by-Reference"><a href="#Storage-by-Reference" class="headerlink" title="Storage by Reference"></a>Storage by Reference</h4><ul><li>A reference is an alias to existing memory and is denoted in the type with an ampersand (&amp;).</li><li>A reference <code>does not store</code> memory itself, it is only an alias to another variable.</li><li>The alias must be assigned when the variable is initialized.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cube &amp;c = cube; <span class="comment">// Alias to the variable `cube` </span></span><br><span class="line"><span class="keyword">int</span> &amp;i = count; <span class="comment">// Alias to the variable `i` uiuc::HSLAPixel &amp;p; // Illegal! Must alias something</span></span><br><span class="line">when variable is initialized.</span><br></pre></td></tr></table></figure><h4 id="Pass-by"><a href="#Pass-by" class="headerlink" title="Pass by"></a>Pass by</h4><p>Identical to storage, arguments can be passed to functions in three different ways:</p><ul><li>Pass by <strong>value</strong> (default)</li><li>Pass by <strong>pointer</strong> (modified with *)</li><li>Pass by <strong>reference</strong> (modified with &amp;, acts as an alias)</li></ul><h3 id="Class-Destructor"><a href="#Class-Destructor" class="headerlink" title="Class Destructor"></a>Class Destructor</h3><p>When an instance of a class is cleaned up, the class destructor is the last call in a class’s lifecycle.</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="7.png" width="80%" height="90%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Destructor</div></center><p>An destructor should never be called directly. Instead, it is automatically called when the object’s memory is being reclaimed by the system.</p><ul><li>If the object is on the stack, when the function returns</li><li>If the object is on the heap, when <code>delete</code> is used</li></ul><p>To add custom behavior to the end-of-life of the function, a custom destructor can be defined as:</p><ul><li>A custom destructor is a member function.</li><li>The function’s destructor is the name of the class,<br>preceded by a tilde ~.</li><li>All destructors have zero arguments and no return type.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cube::~Cube(); <span class="comment">// Custom destructor</span></span><br></pre></td></tr></table></figure><p>A custom destructor is essential when an object allocates an external resource that must be closed or freed when the object is destroyed. Examples:</p><ul><li>Heap memory</li><li>Open files</li><li>Shared memory</li></ul><h3 id="Creating-Templated-Types"><a href="#Creating-Templated-Types" class="headerlink" title="Creating Templated Types"></a>Creating Templated Types</h3><p>A template variable is defined by declaring it before the beginning of a class or function</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span> &#123;</span> </span><br><span class="line">  ...</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  T data_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(T a, T b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b) &#123; <span class="keyword">return</span> a; &#125; </span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h3><p>A base class is a generic form of a specialized, derived class.</p><h4 id="Initialization"><a href="#Initialization" class="headerlink" title="Initialization"></a>Initialization</h4><p>When a derived class is initialized, the derived class must construct the base class:</p><ul><li>Cube must construct Shape</li><li>By default, uses default constructor</li><li>Custom constructor can be used with an initialization list</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A `Cube` class inheriting from a `Shape`</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @author</span></span><br><span class="line"><span class="comment"> *   Wade Fagen-Ulmschneider &lt;waf@illinois.edu&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Cube.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Shape.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> uiuc &#123;</span><br><span class="line">  Cube::Cube(<span class="keyword">double</span> width, uiuc::HSLAPixel color) : Shape(width) &#123;</span><br><span class="line">    color_ = color;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">double</span> Cube::getVolume() <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="comment">// Cannot access Shape::width_ due to it being `private`</span></span><br><span class="line">    <span class="comment">// ...instead we use the public Shape::getWidth(), a public function</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> getWidth() * getWidth() * getWidth();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Access-Control"><a href="#Access-Control" class="headerlink" title="Access Control"></a>Access Control</h4><p>When a base class is inherited, the derived class:</p><ul><li>Can access all public members of the base class</li><li>Can not access private members of the base class</li></ul><h4 id="Initializer-List"><a href="#Initializer-List" class="headerlink" title="Initializer List"></a>Initializer List</h4><p>The syntax to initialize the base class is called the initializer list and can be used for several purposes:</p><ul><li>Initialize a base class</li><li>Initialize the current class using another constructor </li><li>Initialize the default values of member variables</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Shape.h"</span></span></span><br><span class="line"></span><br><span class="line">Shape::Shape() : Shape(<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="comment">// Nothing.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Shape::Shape(<span class="keyword">double</span> width) : width_(width) &#123;</span><br><span class="line">  <span class="comment">// Nothing.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> Shape::getWidth() <span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> width_;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      review concepts of C++
    
    </summary>
    
    
      <category term="Programming Language" scheme="https://zhangruochi.com/categories/Programming-Language/"/>
    
      <category term="C++" scheme="https://zhangruochi.com/categories/Programming-Language/C/"/>
    
    
  </entry>
  
  <entry>
    <title>rails tutorials: sessions</title>
    <link href="https://zhangruochi.com/rails-tutorials-sessions/2020/01/20/"/>
    <id>https://zhangruochi.com/rails-tutorials-sessions/2020/01/20/</id>
    <published>2020-01-20T12:15:14.000Z</published>
    <updated>2020-01-20T12:56:44.311Z</updated>
    
    <content type="html"><![CDATA[<p>HTTP 协议没有状态，每个请求都是独立的事务，无法使用之前请求中的信息。所以，在 HTTP 协议中无法 在两个页面之间记住用户的身份。需要用户登录的应用必须使用会话(session)。会话是两台电脑(例如运 行 Web 浏览器的客户端电脑和运行 Rails 的服务器)之间的半永久性连接。在 Rails 中实现会话最常见的方式是使用 cookie。cookie 是存储在用户浏览器中的少量文本。访问其他页面时，cookie 中存储的信息仍在，所以可以在 cookie 中存储一些信息，例如用户的 ID，让应用从数据库中检索 已登录的用户。这一节使用 Rails 提供的 session 方法实现临时会话，浏览器关闭后会话自动失效。</p><p>把会话看成 REST 式资源便于操作，访问登录页面时渲染一个用于创建会话的表单，登录时创建会话，退出 时再把会话销毁。</p><h3 id="创建-sessions-控制器"><a href="#创建-sessions-控制器" class="headerlink" title="创建 sessions 控制器"></a>创建 sessions 控制器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails generate controller Sessions new</span><br></pre></td></tr></table></figure><h3 id="获得会话的标准-REST-式动作"><a href="#获得会话的标准-REST-式动作" class="headerlink" title="获得会话的标准 REST 式动作"></a>获得会话的标准 REST 式动作</h3><blockquote><p>config/routes.rb</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Rails.application.routes.draw <span class="keyword">do</span></span><br><span class="line">     </span><br><span class="line">  root <span class="string">"todo_lists#index"</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># # For details on the DSL available within this file, see https://guides.rubyonrails.org/routing.html</span></span><br><span class="line">  <span class="comment"># resources :todo_lists do</span></span><br><span class="line">  <span class="comment">#   resources :todo_items</span></span><br><span class="line">  <span class="comment"># end</span></span><br><span class="line"></span><br><span class="line">  get  <span class="string">'/login'</span>,   <span class="symbol">to:</span> <span class="string">'sessions#new'</span></span><br><span class="line">  post <span class="string">'/login'</span>,   <span class="symbol">to:</span> <span class="string">'sessions#create'</span></span><br><span class="line">  delete <span class="string">"/logout"</span>,<span class="symbol">to:</span> <span class="string">"sessions#destroy"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="创建登录表单"><a href="#创建登录表单" class="headerlink" title="创建登录表单"></a>创建登录表单</h3><blockquote><p>app/views/sessions/new.html.erb</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;Login&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;%= form_with(url: login_path, scope: :session, local: true) do |f| %&gt;</span></span><br><span class="line"><span class="regexp">&lt;div class="field"&gt;</span></span><br><span class="line"><span class="regexp">&lt;%= f.label :username %&gt; &lt;br/</span>&gt; &lt;%= f.text_field <span class="symbol">:username</span> %&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;p/</span>&gt;</span><br><span class="line">&lt;div class="field"&gt;</span><br><span class="line">&lt;%= f.label <span class="symbol">:password</span> %&gt; &lt;br/&gt;</span><br><span class="line">&lt;%= f.password_field <span class="symbol">:password</span> %&gt; &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;p/</span>&gt;</span><br><span class="line">&lt;div class="actions"&gt;</span><br><span class="line">&lt;%= f.submit <span class="string">"Login"</span> %&gt; &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;% end %&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编写控制器"><a href="#编写控制器" class="headerlink" title="编写控制器"></a>编写控制器</h3><blockquote><p>app/controllers/application_controller.rb</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplicationController</span> &lt; ActionController::Base</span></span><br><span class="line">  before_action <span class="symbol">:ensure_login</span></span><br><span class="line">  helper_method <span class="symbol">:logged_in?</span>, <span class="symbol">:current_user</span></span><br><span class="line"></span><br><span class="line">  protected</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">ensure_login</span></span></span><br><span class="line">        redirect_to login_path <span class="keyword">unless</span> logged_in?</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">logged_in?</span></span></span><br><span class="line">          session[<span class="symbol">:user_id</span>] <span class="comment"># nil is false</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">current_user</span></span></span><br><span class="line">          @current_user <span class="params">||</span>= User.find(session[<span class="symbol">:user_id</span>])</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>app/controllers/sessions_controller.rb</p></blockquote><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SessionsController</span> &lt; ApplicationController</span></span><br><span class="line"></span><br><span class="line">  skip_before_action <span class="symbol">:ensure_login</span>, <span class="symbol">only:</span> [<span class="symbol">:new</span>, <span class="symbol">:create</span>]</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">new</span></span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">create</span></span></span><br><span class="line">    user = User.find_by(<span class="symbol">username:</span> params[<span class="symbol">:session</span>][<span class="symbol">:username</span>])</span><br><span class="line">    <span class="keyword">if</span> user &amp;&amp; user.authenticate(params[<span class="symbol">:session</span>][<span class="symbol">:password</span>])</span><br><span class="line">        session[<span class="symbol">:user_id</span>] = user.id</span><br><span class="line">        redirect_to root_path, <span class="symbol">notice:</span> <span class="string">"Logged in successfully"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        flash.now[<span class="symbol">:danger</span>] = <span class="string">'Invalid username/password combination'</span></span><br><span class="line">        redirect_to login_path, <span class="symbol">alert:</span> <span class="string">"Invalid username/password combination"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">destroy</span></span></span><br><span class="line">    reset_session</span><br><span class="line">    redirect_to login_path, <span class="symbol">notice:</span> <span class="string">"You have been logged out"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="修改其他布局"><a href="#修改其他布局" class="headerlink" title="修改其他布局"></a>修改其他布局</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> <span class="attr">logged_in</span>? %&gt;</span></span><br><span class="line"># 登录用户看到的链接</span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">else</span> %&gt;</span></span><br><span class="line"># 未登录用户看到的链接</span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">end</span> %&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;HTTP 协议没有状态，每个请求都是独立的事务，无法使用之前请求中的信息。所以，在 HTTP 协议中无法 在两个页面之间记住用户的身份。需要用户登录的应用必须使用会话(session)。会话是两台电脑(例如运 行 Web 浏览器的客户端电脑和运行 Rails 的服务器)之间
      
    
    </summary>
    
    
      <category term="Full Stack" scheme="https://zhangruochi.com/categories/Full-Stack/"/>
    
      <category term="Ruby on Rails" scheme="https://zhangruochi.com/categories/Full-Stack/Ruby-on-Rails/"/>
    
    
  </entry>
  
  <entry>
    <title>rails tutorials: ActionPack</title>
    <link href="https://zhangruochi.com/rails-tutorials-ActionPack/2020/01/19/"/>
    <id>https://zhangruochi.com/rails-tutorials-ActionPack/2020/01/19/</id>
    <published>2020-01-19T16:55:17.000Z</published>
    <updated>2020-01-19T18:38:03.196Z</updated>
    
    <content type="html"><![CDATA[<p>ActionPack is Controller and View work together to let you interact with resources in the Model layer</p><h3 id="REST-Representational-State-Transfer"><a href="#REST-Representational-State-Transfer" class="headerlink" title="REST(Representational State Transfer)"></a>REST(Representational State Transfer)</h3><p>REST is all about resources, You should be to able to:</p><ol><li>List available resources</li><li>Show a specific resource</li><li>Destroy an existing resource</li><li>Provide a way to create a new resource</li><li>Create a new resource</li><li>Provide a way to update an existing resource</li><li>Update an existing resource</li></ol><h3 id="REST-A-Simple-Rails-Convention"><a href="#REST-A-Simple-Rails-Convention" class="headerlink" title="REST: A Simple Rails Convention"></a>REST: A Simple Rails Convention</h3><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="1.png" width="80%" height="80%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Rails Convention</div></center><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="2.png" width="80%" height="80%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Named Routes From</div></center><h3 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h3><p>Index action retrieves resources from Data layer. Then, implicitly invokes either HTML or JSON templates.</p><blockquote><p>app/controllers/posts_controller.rb</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostsController</span> &lt; ApplicationController</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="comment"># GET /posts</span></span><br><span class="line">  <span class="comment"># GET /posts.json</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">index</span></span></span><br><span class="line">    @posts = Post.all</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  ...</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>app/views/posts/show.html.erb</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"notice"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">notice</span> %&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Listing Posts<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">"3"</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> @<span class="attr">posts.each</span> <span class="attr">do</span> |<span class="attr">post</span>| %&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">post.title</span> %&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">post.content</span> %&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">link_to</span> '<span class="attr">Show</span>', <span class="attr">post</span> %&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">link_to</span> '<span class="attr">Edit</span>', <span class="attr">edit_post_path</span>(<span class="attr">post</span>) %&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">link_to</span> '<span class="attr">Destroy</span>', <span class="attr">post</span>, <span class="attr">method:</span> <span class="attr">:delete</span>, <span class="attr">data:</span> &#123; <span class="attr">confirm:</span> '<span class="attr">Are</span> <span class="attr">you</span> <span class="attr">sure</span>?' &#125; %&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">end</span> %&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">link_to</span> '<span class="attr">New</span> <span class="attr">Post</span>', <span class="attr">new_post_path</span> %&gt;</span></span><br></pre></td></tr></table></figure><ul><li>post = post_path(post)</li><li><code>Destroy</code> 和 <code>Show</code>  的 named route 都是 <code>post</code>, 因此 <code>Destroy</code> 需要指定 <code>method: :delete</code></li></ul><h3 id="Show"><a href="#Show" class="headerlink" title="Show"></a>Show</h3><ul><li>Retrieve specific post based on id parameter passed in (as part of URL)</li><li>(Implicit) Look for show.html.erb template to render response</li></ul><blockquote><p>app/controllers/posts_controller.rb</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostsController</span> &lt; ApplicationController</span></span><br><span class="line">  before_action <span class="symbol">:set_post</span>, <span class="symbol">only:</span> [<span class="symbol">:show</span>, <span class="symbol">:edit</span>, <span class="symbol">:update</span>, <span class="symbol">:destroy</span>]</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="comment"># GET /posts/1</span></span><br><span class="line">  <span class="comment"># GET /posts/1.json</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">show</span></span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  private</span><br><span class="line">    <span class="comment"># Use callbacks to share common setup or constraints between actions.</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_post</span></span></span><br><span class="line">      @post = Post.find(params[<span class="symbol">:id</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>app/views/posts/show.html.erb</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"notice"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">notice</span> %&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Title:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%=</span> @<span class="attr">post.title</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Content:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%=</span> @<span class="attr">post.content</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">link_to</span> '<span class="attr">Edit</span>', <span class="attr">edit_post_path</span>(@<span class="attr">post</span>) %&gt;</span> |</span><br><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">link_to</span> '<span class="attr">Back</span>', <span class="attr">posts_path</span> %&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><p>destroy action destroys a resource and then <code>redirects</code> the browser to another page</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostsController</span> &lt; ApplicationController</span></span><br><span class="line">  before_action <span class="symbol">:set_post</span>, <span class="symbol">only:</span> [<span class="symbol">:show</span>, <span class="symbol">:edit</span>, <span class="symbol">:update</span>, <span class="symbol">:destroy</span>]</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="comment"># DELETE /posts/1</span></span><br><span class="line">  <span class="comment"># DELETE /posts/1.json</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">destroy</span></span></span><br><span class="line">    @post.destroy</span><br><span class="line">    respond_to <span class="keyword">do</span> <span class="params">|format|</span></span><br><span class="line">      format.html &#123; redirect_to posts_url, <span class="symbol">notice:</span> <span class="string">'Post was successfully destroyed.'</span> &#125;</span><br><span class="line">      format.json &#123; head <span class="symbol">:no_content</span> &#125;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  private</span><br><span class="line">    <span class="comment"># Use callbacks to share common setup or constraints between actions.</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_post</span></span></span><br><span class="line">      @post = Post.find(params[<span class="symbol">:id</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="respond-to"><a href="#respond-to" class="headerlink" title="respond_to"></a>respond_to</h4><ul><li>Rails helper that specifies how to respond to a request based on a request format</li><li>Takes an optional block where the argument is the format</li><li>Block specifies how to handle each format:<ul><li>format.format_name – matching template</li><li>format.format_name {do_something_other_than_just_displaying_the_ matching_template}</li></ul></li></ul><h4 id="redirect-to"><a href="#redirect-to" class="headerlink" title="redirect_to"></a>redirect_to</h4><ul><li>Instead of rendering a template – send a response to the browser: “Go here!”</li></ul><h3 id="New-and-Create"><a href="#New-and-Create" class="headerlink" title="New and Create"></a>New and Create</h3><ol><li>New</li></ol><ul><li>Create a new empty post object </li><li>(Implicit) Look for new.html.erb</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostsController</span> &lt; ApplicationController</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># GET /posts/new</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">new</span></span></span><br><span class="line">    @post = Post.new</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>New Post<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">render</span> '<span class="attr">form</span>' %&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">link_to</span> '<span class="attr">Back</span>', <span class="attr">posts_path</span> %&gt;</span></span><br></pre></td></tr></table></figure><ol><li>Create</li></ol><ul><li>Create a new post object with parameters that were passed from the new form</li><li>Try to save the object to the database</li><li>If successful, redirect to show template</li><li>If unsuccessful, render new action (template - again)</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostsController</span> &lt; ApplicationController</span></span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="comment"># POST /posts</span></span><br><span class="line">  <span class="comment"># POST /posts.json</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">create</span></span></span><br><span class="line">    @post = Post.new(post_params)</span><br><span class="line"></span><br><span class="line">    respond_to <span class="keyword">do</span> <span class="params">|format|</span></span><br><span class="line">      <span class="keyword">if</span> @post.save</span><br><span class="line">        flash[<span class="symbol">:success</span>] = <span class="string">"Welcome to the Sample App!"</span></span><br><span class="line">        format.html &#123; redirect_to @post, <span class="symbol">notice:</span> <span class="string">'Post was successfully created.'</span> &#125;</span><br><span class="line">        format.json &#123; render <span class="symbol">:show</span>, <span class="symbol">status:</span> <span class="symbol">:created</span>, <span class="symbol">location:</span> @post &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        format.html &#123; render <span class="symbol">:new</span> &#125;</span><br><span class="line">        format.json &#123; render <span class="symbol">json:</span> @post.errors, <span class="symbol">status:</span> <span class="symbol">:unprocessable_entity</span> &#125;</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  private</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Never trust parameters from the scary internet, only allow the white list through.</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post_params</span></span></span><br><span class="line">      params.<span class="keyword">require</span>(<span class="symbol">:post</span>).permit(<span class="symbol">:title</span>, <span class="symbol">:content</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="Strong-parameters"><a href="#Strong-parameters" class="headerlink" title="Strong parameters"></a>Strong parameters</h4><p>With strong parameters, Action Controller parameters are <strong>forbidden</strong> to be used in Active Model mass assigments until they have been whitelisted.</p><h4 id="Flash"><a href="#Flash" class="headerlink" title="Flash"></a>Flash</h4><p>a hash where the data you put in persists for exactly ONE request AFTER the current request.</p><ul><li>Two very common attributes are <code>:notice</code> (good) and <code>:alert</code> (bad)</li><li>These are so common in fact, that the redirect_to takes a <code>:notice</code> or <code>:alert</code> keys</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flash[<span class="symbol">:attribute</span>] = value</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">flash.each</span> <span class="attr">do</span> |<span class="attr">message_type</span>, <span class="attr">message</span>| %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-&lt;%= message_type %&gt;"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">message</span> %&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">end</span> %&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Edit-and-Update"><a href="#Edit-and-Update" class="headerlink" title="Edit and Update"></a>Edit and Update</h3><ol><li>Edit</li></ol><ul><li>Retrieve a post object based on the id provided (as part of the URl)</li><li>(Implicit) Look for edit.html.erb</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostsController</span> &lt; ApplicationController</span></span><br><span class="line">  before_action <span class="symbol">:set_post</span>, <span class="symbol">only:</span> [<span class="symbol">:show</span>, <span class="symbol">:edit</span>, <span class="symbol">:update</span>, <span class="symbol">:destroy</span>]</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="comment"># GET /posts/1/edit</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">edit</span></span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">  private</span><br><span class="line">    <span class="comment"># Use callbacks to share common setup or constraints between actions.</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_post</span></span></span><br><span class="line">      @post = Post.find(params[<span class="symbol">:id</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Editing Post<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">render</span> '<span class="attr">form</span>' %&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">link_to</span> '<span class="attr">Show</span>', @<span class="attr">post</span> %&gt;</span> |</span><br><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">link_to</span> '<span class="attr">Back</span>', <span class="attr">posts_path</span> %&gt;</span></span><br></pre></td></tr></table></figure><ol><li>Update</li></ol><ul><li>Retrieve an existing post using id parameter</li><li>Update post object with (strong) parameters that were<br>passed from the edit form</li><li>Try to (re)save the object to the database</li><li>If successful, redirect to show template</li><li>If unsuccessful, render edit action (template) again</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostsController</span> &lt; ApplicationController</span></span><br><span class="line">  before_action <span class="symbol">:set_post</span>, <span class="symbol">only:</span> [<span class="symbol">:show</span>, <span class="symbol">:edit</span>, <span class="symbol">:update</span>, <span class="symbol">:destroy</span>]</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">  <span class="comment"># PATCH/PUT /posts/1</span></span><br><span class="line">  <span class="comment"># PATCH/PUT /posts/1.json</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">update</span></span></span><br><span class="line">    respond_to <span class="keyword">do</span> <span class="params">|format|</span></span><br><span class="line">      <span class="keyword">if</span> @post.update(post_params)</span><br><span class="line">        format.html &#123; redirect_to @post, <span class="symbol">notice:</span> <span class="string">'Post was successfully updated.'</span> &#125;</span><br><span class="line">        format.json &#123; render <span class="symbol">:show</span>, <span class="symbol">status:</span> <span class="symbol">:ok</span>, <span class="symbol">location:</span> @post &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        format.html &#123; render <span class="symbol">:edit</span> &#125;</span><br><span class="line">        format.json &#123; render <span class="symbol">json:</span> @post.errors, <span class="symbol">status:</span> <span class="symbol">:unprocessable_entity</span> &#125;</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  private</span><br><span class="line">    <span class="comment"># Use callbacks to share common setup or constraints between actions.</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_post</span></span></span><br><span class="line">      @post = Post.find(params[<span class="symbol">:id</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Never trust parameters from the scary internet, only allow the white list through.</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post_params</span></span></span><br><span class="line">      params.<span class="keyword">require</span>(<span class="symbol">:post</span>).permit(<span class="symbol">:title</span>, <span class="symbol">:content</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><code>html</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ActionPack is Controller and View work together to let you interact with resources in the Model layer&lt;/p&gt;
&lt;h3 id=&quot;REST-Representational-S
      
    
    </summary>
    
    
      <category term="Full Stack" scheme="https://zhangruochi.com/categories/Full-Stack/"/>
    
      <category term="Ruby on Rails" scheme="https://zhangruochi.com/categories/Full-Stack/Ruby-on-Rails/"/>
    
    
  </entry>
  
  <entry>
    <title>rails tutorials: Association</title>
    <link href="https://zhangruochi.com/rails-tutorials-Association/2020/01/18/"/>
    <id>https://zhangruochi.com/rails-tutorials-Association/2020/01/18/</id>
    <published>2020-01-18T22:06:30.000Z</published>
    <updated>2020-01-18T23:17:56.954Z</updated>
    
    <content type="html"><![CDATA[<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="1.png" width="80%" height="80%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">ER</div></center><h2 id="One-to-One-Association"><a href="#One-to-One-Association" class="headerlink" title="One-to-One Association"></a>One-to-One Association</h2><ul><li>One person has exactly one personal_info entry</li><li>One personal_info entry belongs to exactly one person</li><li>The “belongs to” side is the one with a foreign key</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails g model personal_info height:<span class="built_in">float</span> weight:<span class="built_in">float</span> person:references</span><br></pre></td></tr></table></figure><blockquote><p>db/migrate/_create_personal_info.rb</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreatePersonalInfos</span> &lt; ActiveRecord::Migration[6.0]</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">change</span></span></span><br><span class="line">    create_table <span class="symbol">:personal_infos</span> <span class="keyword">do</span> <span class="params">|t|</span></span><br><span class="line">      t.float <span class="symbol">:height</span></span><br><span class="line">      t.float <span class="symbol">:weight</span></span><br><span class="line">      t.references <span class="symbol">:person</span>, <span class="symbol">null:</span> <span class="literal">false</span>, <span class="symbol">foreign_key:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">      t.timestamps</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rake db:migrate</span><br></pre></td></tr></table></figure><blockquote><p>app/models/person.rb</p></blockquote><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &lt; ApplicationRecord</span></span><br><span class="line">    has_one <span class="symbol">:personal_info</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>app/models/personal_info.rb</p></blockquote><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonalInfo</span> &lt; ApplicationRecord</span></span><br><span class="line">  belongs_to <span class="symbol">:person</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="More-Methods"><a href="#More-Methods" class="headerlink" title="More Methods"></a>More Methods</h3><p>you have <code>build_personal_info(hash)</code> and <code>create_personal_info(hash)</code> methods on a person instance</p><h3 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zhang = Person.first</span><br><span class="line">pi1 = PersonalInfo.create height: 6.5 weight: 220</span><br><span class="line">zhang.personal_info = pi1</span><br><span class="line"></span><br><span class="line">zhang.build_personal_info height: 6.5 weight: 220</span><br></pre></td></tr></table></figure><h2 id="One-to-Many-Association"><a href="#One-to-Many-Association" class="headerlink" title="One-to-Many Association"></a>One-to-Many Association</h2><ul><li>One person has one or more jobs</li><li>One job entry belongs to exactly one person</li><li>The “belongs to” side is the one with a foreign key</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails g model job title company position_id person:references</span><br></pre></td></tr></table></figure><blockquote><p>db/migrate/_create_jobs.rb</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateJobs</span> &lt; ActiveRecord::Migration[6.0]</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">change</span></span></span><br><span class="line">    create_table <span class="symbol">:jobs</span> <span class="keyword">do</span> <span class="params">|t|</span></span><br><span class="line">      t.string <span class="symbol">:title</span></span><br><span class="line">      t.string <span class="symbol">:company</span></span><br><span class="line">      t.string <span class="symbol">:position_id</span></span><br><span class="line">      t.references <span class="symbol">:person</span>, <span class="symbol">null:</span> <span class="literal">false</span>, <span class="symbol">foreign_key:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">      t.timestamps</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rake db:migrate</span><br></pre></td></tr></table></figure><blockquote><p>app/models/person.rb</p></blockquote><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &lt; ApplicationRecord</span></span><br><span class="line">    has_one <span class="symbol">:personal_info</span></span><br><span class="line">    has_many <span class="symbol">:jobs</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>app/models/job.rb</p></blockquote><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Job</span> &lt; ApplicationRecord</span></span><br><span class="line">  belongs_to <span class="symbol">:person</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="More-Methods-1"><a href="#More-Methods-1" class="headerlink" title="More Methods"></a>More Methods</h3><ul><li>person.jobs = jobs</li><li>person.jobs &lt;&lt; job(s)</li><li>person.jobs.clear</li></ul><h2 id="Many-to-Many"><a href="#Many-to-Many" class="headerlink" title="Many-to-Many"></a>Many-to-Many</h2><ul><li>One person can have many hobbies</li><li>One hobby can be shared by many people</li><li>Need to create an extra (a.k.a. join) table (<strong>without</strong> a model, i.e. just a migration)</li><li>Convention: Plural model names separated by an underscore in alphabetical order</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rails g model hobby name</span><br><span class="line">rails g migration create_hobbies_people person:references hobby:references</span><br></pre></td></tr></table></figure><blockquote><p>db/migrate/_create_habbies_people.rb</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateHabbiesPeople</span> &lt; ActiveRecord::Migration[6.0]</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">change</span></span></span><br><span class="line">    create_table <span class="symbol">:habbies_people</span>, <span class="symbol">id:</span><span class="literal">false</span> <span class="keyword">do</span> <span class="params">|t|</span></span><br><span class="line">      t.references <span class="symbol">:person</span>, <span class="symbol">null:</span> <span class="literal">false</span>, <span class="symbol">index:</span> <span class="literal">false</span>, <span class="symbol">foreign_key:</span> <span class="literal">true</span></span><br><span class="line">      t.references <span class="symbol">:hobby</span>, <span class="symbol">null:</span> <span class="literal">false</span>, <span class="symbol">index:</span> <span class="literal">false</span>, <span class="symbol">foreign_key:</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rake db:migrate</span><br></pre></td></tr></table></figure><blockquote><p>app/models/person.rb</p></blockquote><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &lt; ApplicationRecord</span></span><br><span class="line">    has_one <span class="symbol">:personal_info</span></span><br><span class="line">    has_many <span class="symbol">:jobs</span></span><br><span class="line">    has_and_belongs_to_many <span class="symbol">:hobbies</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>app/models/hobby.rb</p></blockquote><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hobby</span> &lt; ApplicationRecord</span></span><br><span class="line">    has_and_belongs_to_many <span class="symbol">:people</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="Rich-Many-to-Many-Association"><a href="#Rich-Many-to-Many-Association" class="headerlink" title="Rich Many-to-Many Association"></a>Rich Many-to-Many Association</h2><ul><li>Sometimes, you need to keep some data on the join table</li><li>You need to store grandchild relationships on a model, like Person -&gt; Job -&gt; SalaryRange</li><li>ActiveRecord provides a <code>:through</code> option for this purpose</li><li><strong>Basic idea</strong>: you first create a regular <code>parent-child</code> relationship and then use the child model as a <strong>join</strong> between the parent and grandchild.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails g model salary_range min_salary:<span class="built_in">float</span>  max_salary:<span class="built_in">float</span> job:references</span><br></pre></td></tr></table></figure><blockquote><p>db/migrate/_create_salary_ranges.rb</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateSalaryRanges</span> &lt; ActiveRecord::Migration[6.0]</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">change</span></span></span><br><span class="line">    create_table <span class="symbol">:salary_ranges</span> <span class="keyword">do</span> <span class="params">|t|</span></span><br><span class="line">      t.float <span class="symbol">:min_salary</span></span><br><span class="line">      t.float <span class="symbol">:max_salary</span></span><br><span class="line">      t.references <span class="symbol">:job</span>, <span class="symbol">null:</span> <span class="literal">false</span>, <span class="symbol">foreign_key:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">      t.timestamps</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rake db:migrate</span><br></pre></td></tr></table></figure><blockquote><p>app/models/salary_range.rb</p></blockquote><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SalaryRange</span> &lt; ApplicationRecord</span></span><br><span class="line">  belongs_to <span class="symbol">:job</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>app/models/job.rb</p></blockquote><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Job</span> &lt; ApplicationRecord</span></span><br><span class="line">  belongs_to <span class="symbol">:person</span></span><br><span class="line">  has_one <span class="symbol">:salary_range</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>app/models/person.rb<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &lt; ApplicationRecord</span></span><br><span class="line">    has_one <span class="symbol">:personal_info</span></span><br><span class="line">    has_many <span class="symbol">:jobs</span></span><br><span class="line">    has_and_belongs_to_many <span class="symbol">:hobbies</span></span><br><span class="line">    has_many <span class="symbol">:approx_salaries</span>, <span class="symbol">through:</span> <span class="symbol">:jobs</span>, <span class="symbol">source:</span> <span class="symbol">:salary_range</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">max_salary</span></span></span><br><span class="line">      approx_salaries.maximum(<span class="symbol">:max_salary</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment"># Average, minimum and sum also available...</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="More-Methods-2"><a href="#More-Methods-2" class="headerlink" title="More Methods"></a>More Methods</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lebron = Person.find_by <span class="symbol">last_name:</span> <span class="string">"James"</span></span><br><span class="line">lebron.max_salary</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;center&gt;
    &lt;img style=&quot;border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);&quot; src=&quot;1.pn
      
    
    </summary>
    
    
      <category term="Full Stack" scheme="https://zhangruochi.com/categories/Full-Stack/"/>
    
      <category term="Ruby on Rails" scheme="https://zhangruochi.com/categories/Full-Stack/Ruby-on-Rails/"/>
    
    
  </entry>
  
  <entry>
    <title>rails tutorials: Active Record CURD</title>
    <link href="https://zhangruochi.com/rails-tutorials-Active-Record-CURD/2020/01/18/"/>
    <id>https://zhangruochi.com/rails-tutorials-Active-Record-CURD/2020/01/18/</id>
    <published>2020-01-18T17:57:50.000Z</published>
    <updated>2020-01-18T20:02:27.046Z</updated>
    
    <content type="html"><![CDATA[<p>ActiveRecord is the name of Rails’ default ORM</p><blockquote><p>ORM (Object-Relational Mapping): Bridges the gap between <code>relational databases</code>, which are designed around mathematical Set Theory and Object-Oriented programming languages that deal with objects and their behavior. Greatly simplifies writing code for accessing the database.</p></blockquote><h3 id="Three-Prerequisites"><a href="#Three-Prerequisites" class="headerlink" title="Three Prerequisites"></a>Three Prerequisites</h3><ol><li>ActiveRecord has to know how to find your database (when Rails<br>is loaded, this info is read from config/database.yml file)</li><li>(Convention) There is a table with a <code>plural name</code> that corresponds<br>to ActiveRecord::Base subclass with a <code>singular name</code></li><li>(Convention) Expects the table to have a primary key named <code>id</code></li></ol><h3 id="CURD"><a href="#CURD" class="headerlink" title="CURD"></a>CURD</h3><h4 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h4><ol><li><p>Use an empty constructor and (ghost) attributes to set the values and then call save.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p1 = Person.new</span><br><span class="line">p1.first_name = <span class="string">"zhang"</span></span><br><span class="line">p1.email = <span class="string">"zrc720@gmail.com"</span></span><br><span class="line">p1.save</span><br></pre></td></tr></table></figure></li><li><p>Pass a hash of attributes into the constructor and then call save.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p2 = Person.new(<span class="symbol">name:</span> <span class="string">"zhang"</span>, <span class="symbol">email:</span> <span class="string">"zrc720@gmail.com"</span>)</span><br><span class="line">p2.save</span><br></pre></td></tr></table></figure></li><li><p>Use create method with a hash to create an object and save it to the database in one step.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p3 = Person.create(<span class="symbol">name:</span> <span class="string">"zhang"</span>, <span class="symbol">email:</span> <span class="string">"zrc720@gmail.com"</span>)</span><br></pre></td></tr></table></figure></li></ol><h4 id="Retrieve"><a href="#Retrieve" class="headerlink" title="Retrieve"></a>Retrieve</h4><ol><li><p><code>find(id)</code> or <code>find(id1, id2)</code><br>Throws a RecordNotFound exception if not found</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person.find(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>first</code>, <code>last</code>, <code>take</code>, <code>all</code><br>Return the results you expect or nil if nothing is found</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Person.first</span><br><span class="line">Person.last</span><br><span class="line">Person.take</span><br><span class="line">Person.all</span><br></pre></td></tr></table></figure></li><li><p><code>order(:column)</code> or <code>order(column: :desc)</code><br>Allows ordering of the results. Ascending or descending</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person.all.order(<span class="symbol">first_name:</span> <span class="symbol">:desc</span>)</span><br><span class="line">Person.all.order(<span class="symbol">:first_name</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>pluck</code><br>Use pluck as a shortcut to select one or more attributes without loading a bunch of records just to grab the attributes you want.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Person.pluck(<span class="symbol">:id</span>, <span class="symbol">:name</span>)</span><br><span class="line"><span class="comment"># SELECT people.id, people.name FROM people</span></span><br><span class="line"><span class="comment"># =&gt; [[1, 'David'], [2, 'Jeremy'], [3, 'Jose']]</span></span><br></pre></td></tr></table></figure></li><li><p><code>take</code><br>Gives a record (or N records if a parameter is supplied) without any implied order. The order will depend on the database implementation. If an order is supplied it will be respected.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person.take <span class="comment"># returns an object fetched by SELECT * FROM people LIMIT 1</span></span><br><span class="line">Person.take(<span class="number">5</span>) <span class="comment"># returns 5 objects fetched by SELECT * FROM people LIMIT 5</span></span><br></pre></td></tr></table></figure></li><li><p><code>where(hash)</code><br>Enables you to supply conditions for your search</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Person.where(<span class="symbol">name:</span> <span class="string">"zhangruochi"</span>)</span><br><span class="line">Person.where([<span class="string">"name = ? and email = ?"</span>, <span class="string">"Joe"</span>, <span class="string">"joe@example.com"</span>])</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">7. `</span>find_by<span class="string">`</span></span><br><span class="line"><span class="string">Same as where, but returns a single result or nil if a record with the specified conditions is not found</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>ruby</span><br><span class="line">User.find_by(<span class="symbol">name:</span> <span class="string">"zhangruochi"</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>limit</code><br>Enables you to limit how many records come back</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person.offset(<span class="number">1</span>).limit(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>offset(n)</code><br>Don’t start from the beginning; skip a few</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person.offset(<span class="number">1</span>).limit(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li></ol><h4 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h4><ol><li><p>Retrieve a record, modify the values and then call save</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zhang = User.where(<span class="symbol">name:</span> <span class="string">"zhangruochi"</span>)</span><br><span class="line">zhang.email = <span class="string">"lvduzhen@gmail.com"</span></span><br><span class="line">zhang.save</span><br></pre></td></tr></table></figure></li><li><p>Retrieve a record and then call update method passing in a hash of attributes with new values</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zhang = User.where(<span class="symbol">name:</span> <span class="string">"zhangruochi"</span>)</span><br><span class="line">zhang.update(<span class="symbol">email:</span> <span class="string">"lvduzhen@gmail.com"</span>)</span><br></pre></td></tr></table></figure></li><li><p>There is also <code>update_all</code> for batch updates</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User.where(<span class="symbol">email:</span> <span class="string">'zrc720@gmail.com'</span>).update_all(<span class="symbol">name:</span> <span class="string">'ruochi'</span>)</span><br></pre></td></tr></table></figure></li></ol><h4 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h4><ol><li>destroy(id) or destroy<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zhang = User.first</span><br><span class="line">zhang.destroy</span><br><span class="line"></span><br><span class="line">User.destroy(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ActiveRecord is the name of Rails’ default ORM&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ORM (Object-Relational Mapping): Bridges the gap between &lt;code&gt;relatio
      
    
    </summary>
    
    
      <category term="Full Stack" scheme="https://zhangruochi.com/categories/Full-Stack/"/>
    
      <category term="Ruby on Rails" scheme="https://zhangruochi.com/categories/Full-Stack/Ruby-on-Rails/"/>
    
    
  </entry>
  
  <entry>
    <title>Metaprogramming in Ruby</title>
    <link href="https://zhangruochi.com/Metaprogramming-in-Ruby/2020/01/17/"/>
    <id>https://zhangruochi.com/Metaprogramming-in-Ruby/2020/01/17/</id>
    <published>2020-01-17T19:38:13.000Z</published>
    <updated>2020-01-18T17:58:30.315Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Dynamic-Dispatch"><a href="#Dynamic-Dispatch" class="headerlink" title="Dynamic Dispatch"></a>Dynamic Dispatch</h2><ul><li>There is another way to call a method in Ruby - using the <code>send</code> method</li><li>First parameter is the method name/symbol; the rest (if any) are method arguments</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bark</span></span></span><br><span class="line">        puts <span class="string">"Woof, woof!"</span> </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">greet</span><span class="params">(greeting)</span></span> </span><br><span class="line">        puts greeting</span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">dog = Dog.new</span><br><span class="line">dog.bark <span class="comment"># =&gt; Woof, woof! dog.send("bark") # =&gt; Woof, woof! dog.send(:bark) # =&gt; Woof, woof! method_name = :bark</span></span><br><span class="line">dog.send method_name <span class="comment"># =&gt; Woof, woof!</span></span><br><span class="line">dog.send(<span class="symbol">:greet</span>, <span class="string">"hello"</span>) <span class="comment"># =&gt; hello</span></span><br></pre></td></tr></table></figure><h2 id="Dynamic-Method"><a href="#Dynamic-Method" class="headerlink" title="Dynamic Method"></a>Dynamic Method</h2><ul><li>Not only can you call methods dynamically (with send), you can also define methods dynamically</li><li><code>define_method :method_name</code> and a <code>block</code> which<br>contains the method definition</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Whatever</span></span></span><br><span class="line">    define_method <span class="symbol">:make_it_up</span> <span class="keyword">do</span></span><br><span class="line">        puts <span class="string">"Whatever..."</span> </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">whatever = Whatever.new whatever.make_it_up <span class="comment"># =&gt; Whatever...</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">require_relative <span class="string">'store'</span> </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReportingSystem</span></span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span></span></span><br><span class="line">        @store = Store.new</span><br><span class="line">        @store.methods.grep(<span class="regexp">/^get_(.*)_desc/</span>) &#123; ReportingSystem.define_report_methods_for $1 &#125;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">define_report_methods_for</span> <span class="params">(item)</span></span> </span><br><span class="line">        define_method(<span class="string">"get_<span class="subst">#&#123;item&#125;</span>_desc"</span>) &#123; @store.send(<span class="string">"get_<span class="subst">#&#123;item&#125;</span>_desc"</span>)&#125; define_method(<span class="string">"get_<span class="subst">#&#123;item&#125;</span>_price"</span>) &#123; @store.send(<span class="string">"get_<span class="subst">#&#123;item&#125;</span>_price"</span>)&#125;</span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">rs = ReportingSystem.new</span><br><span class="line">puts <span class="string">"<span class="subst">#&#123;rs.get_piano_desc&#125;</span> costs <span class="subst">#&#123;rs.get_piano_price.to_s.ljust(<span class="number">6</span>, <span class="string">'0'</span>)&#125;</span>"</span> <span class="comment"># =&gt; Excellent piano costs 120.00</span></span><br></pre></td></tr></table></figure><h2 id="Ghost-Methods"><a href="#Ghost-Methods" class="headerlink" title="Ghost Methods"></a>Ghost Methods</h2><ul><li>method_missing gives you the power to “fake” the methods</li><li>Called “ghost methods” because the methods don’t really exist</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mystery</span></span></span><br><span class="line"><span class="comment"># no_methods defined</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">method_missing</span> <span class="params">(method, *args)</span></span></span><br><span class="line">        puts <span class="string">"Looking for..."</span></span><br><span class="line">        puts <span class="string">"\"<span class="subst">#&#123;method&#125;</span>\" with params (<span class="subst">#&#123;args.join(<span class="string">','</span>)&#125;</span>) ?"</span> puts <span class="string">"Sorry... He is on vacation..."</span></span><br><span class="line">        <span class="keyword">yield</span> <span class="string">"Ended up in method_missing"</span> <span class="keyword">if</span> block_given?</span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">m = Mystery.new</span><br><span class="line">m.solve_mystery(<span class="string">"abc"</span>, <span class="number">123123</span>) <span class="keyword">do</span> <span class="params">|answer|</span></span><br><span class="line">    puts <span class="string">"And the answer is: <span class="subst">#&#123;answer&#125;</span>"</span> </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="Struct-and-OpenStruct"><a href="#Struct-and-OpenStruct" class="headerlink" title="Struct and OpenStruct"></a>Struct and OpenStruct</h2><ul><li><code>Struct</code>: Generator of specific classes, each one of which is defined to hold a set of variables and their accessors (“Dynamic Methods”)</li><li><code>OpenStruct</code>: Object (similar to Struct) whose attributes are created dynamically when first assigned (“Ghost methods”)</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Customer = Struct.new(<span class="symbol">:name</span>, <span class="symbol">:address</span>) <span class="keyword">do</span> <span class="comment"># block is optional </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_s</span></span></span><br><span class="line">        <span class="string">"<span class="subst">#&#123;name&#125;</span> lives at <span class="subst">#&#123;address&#125;</span>"</span> </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">jim = Customer.new(<span class="string">"Jim"</span>, <span class="string">"-1000 Wall Street"</span>) puts jim <span class="comment"># =&gt; Jim lives at -1000 Wall Street</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'ostruct'</span> <span class="comment"># =&gt; need to require ostruct for OpenStruct</span></span><br><span class="line">some_obj = OpenStruct.new(<span class="symbol">name:</span> <span class="string">"Joe"</span>, <span class="symbol">age:</span> <span class="number">15</span>) </span><br><span class="line">some_obj.sure = <span class="string">"three"</span></span><br><span class="line">some_obj.really = <span class="string">"yes, it is true"</span> some_obj.not_only_strings = <span class="number">10</span></span><br><span class="line">puts <span class="string">"<span class="subst">#&#123;some_obj.name&#125;</span> <span class="subst">#&#123;some_obj.age&#125;</span> <span class="subst">#&#123;some_obj.really&#125;</span>"</span> <span class="comment"># =&gt; Joe 15 yes, it is true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Dynamic Dispatch, Dynamic Method, Ghost Methods, Struct and OpenStruct
    
    </summary>
    
    
      <category term="Programming Language" scheme="https://zhangruochi.com/categories/Programming-Language/"/>
    
      <category term="Metaprogramming" scheme="https://zhangruochi.com/categories/Programming-Language/Metaprogramming/"/>
    
    
  </entry>
  
  <entry>
    <title>rails tutorils: signup</title>
    <link href="https://zhangruochi.com/rails-tutorils-signup/2020/01/17/"/>
    <id>https://zhangruochi.com/rails-tutorils-signup/2020/01/17/</id>
    <published>2020-01-17T16:38:19.000Z</published>
    <updated>2020-01-17T17:28:35.003Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Users-资源"><a href="#Users-资源" class="headerlink" title="Users 资源"></a>Users 资源</h3><blockquote><p>config/routes.rb</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Rails.application.routes.draw <span class="keyword">do</span></span><br><span class="line">    root <span class="string">'static_pages#home'</span></span><br><span class="line">    get <span class="string">'/help'</span>, <span class="symbol">to:</span> <span class="string">'static_pages#help'</span> </span><br><span class="line">    get <span class="string">'/about'</span>, <span class="symbol">to:</span> <span class="string">'static_pages#about'</span> </span><br><span class="line">    get <span class="string">'/contact'</span>, <span class="symbol">to:</span> <span class="string">'static_pages#contact'</span> </span><br><span class="line">    get <span class="string">'/signup'</span>, <span class="symbol">to:</span> <span class="string">'users#new'</span></span><br><span class="line">    </span><br><span class="line">    resources <span class="symbol">:users</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="users.png" width="80%" height="80%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Users Resources</div></center><h3 id="Gravatar-头像和侧边栏"><a href="#Gravatar-头像和侧边栏" class="headerlink" title="Gravatar 头像和侧边栏"></a>Gravatar 头像和侧边栏</h3><blockquote><p>app/views/users/show.html.erb</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">provide</span>(<span class="attr">:title</span>, @<span class="attr">user.name</span>) %&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"user_info"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">%=</span> <span class="attr">gravatar_for</span> @<span class="attr">user</span> %&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">%=</span> @<span class="attr">user.name</span> %&gt;</span> <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>app/assets/stylesheets/custom.scss</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* sidebar */</span></span><br><span class="line"><span class="selector-tag">aside</span> &#123; </span><br><span class="line">    section.user_info &#123;</span><br><span class="line">        <span class="selector-tag">margin-top</span>: 20<span class="selector-tag">px</span>; &#125;</span><br><span class="line">    <span class="selector-tag">section</span> &#123;</span><br><span class="line">        padding: 10px 0; margin-top: 20px; &amp;:first-child &#123;</span><br><span class="line">            <span class="selector-tag">border</span>: 0;</span><br><span class="line">            <span class="selector-tag">padding-top</span>: 0; &#125;</span><br><span class="line">        <span class="selector-tag">span</span> &#123;</span><br><span class="line">            <span class="attribute">display</span>: block; <span class="attribute">margin-bottom</span>: <span class="number">3px</span>; <span class="attribute">line-height</span>: <span class="number">1</span>;&#125;</span><br><span class="line">        <span class="selector-tag">h1</span> &#123;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">1.4em</span>; <span class="attribute">text-align</span>: left; <span class="attribute">letter-spacing</span>: -<span class="number">1px</span>; <span class="attribute">margin-bottom</span>: <span class="number">3px</span>; <span class="attribute">margin-top</span>: <span class="number">0px</span>;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.gravatar</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left; <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.gravatar_edit</span> &#123; </span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>app/helpers/users_helper.rb</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">UsersHelper</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gravatar_for</span><span class="params">(user, options = &#123; <span class="symbol">size:</span> <span class="number">80</span> &#125;)</span></span></span><br><span class="line">        size = options[<span class="symbol">:size</span>]</span><br><span class="line">        gravatar_id = Digest::MD5::hexdigest(user.email.downcase)</span><br><span class="line">        gravatar_url = <span class="string">"https://secure.gravatar.com/avatar/<span class="subst">#&#123;gravatar_id&#125;</span>?s=<span class="subst">#&#123;size&#125;</span>"</span> </span><br><span class="line">        image_tag(gravatar_url, <span class="symbol">alt:</span> user.name, <span class="class"><span class="keyword">class</span>: "<span class="title">gravatar</span>")</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="用户注册表单"><a href="#用户注册表单" class="headerlink" title="用户注册表单"></a>用户注册表单</h3><blockquote><p>app/views/users/new.html.erb</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">provide</span>(<span class="attr">:title</span>, '<span class="attr">Sign</span> <span class="attr">up</span>') %&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Sign up<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6 col-md-offset-3"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%=</span> <span class="attr">form_with</span>(<span class="attr">model:</span> @<span class="attr">user</span>, <span class="attr">local:</span> <span class="attr">true</span>) <span class="attr">do</span> |<span class="attr">f</span>| %&gt;</span> <span class="tag">&lt;<span class="name">%=</span> <span class="attr">render</span> '<span class="attr">shared</span>/<span class="attr">error_messages</span>' %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%=</span> <span class="attr">f.label</span> <span class="attr">:name</span> %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%=</span> <span class="attr">f.text_field</span> <span class="attr">:name</span>, <span class="attr">class:</span> '<span class="attr">form-control</span>' %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%=</span> <span class="attr">f.label</span> <span class="attr">:email</span> %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%=</span> <span class="attr">f.email_field</span> <span class="attr">:email</span>, <span class="attr">class:</span> '<span class="attr">form-control</span>' %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%=</span> <span class="attr">f.label</span> <span class="attr">:password</span> %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%=</span> <span class="attr">f.password_field</span> <span class="attr">:password</span>, <span class="attr">class:</span> '<span class="attr">form-control</span>' %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%=</span> <span class="attr">f.label</span> <span class="attr">:password_confirmation</span>, "<span class="attr">Confirmation</span>" %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%=</span> <span class="attr">f.password_field</span> <span class="attr">:password_confirmation</span>, <span class="attr">class:</span> '<span class="attr">form-control</span>' %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%=</span> <span class="attr">f.submit</span> "<span class="attr">Create</span> <span class="attr">my</span> <span class="attr">account</span>", <span class="attr">class:</span> "<span class="attr">btn</span> <span class="attr">btn-primary</span>" %&gt;</span> <span class="tag">&lt;<span class="name">%</span> <span class="attr">end</span> %&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>app/assets/stylesheets/custom.scss</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/* forms *<span class="regexp">/</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">input, textarea, select, .uneditable-input &#123; </span></span><br><span class="line"><span class="regexp">    border: 1px solid #bbb;</span></span><br><span class="line"><span class="regexp">    width: 100%;</span></span><br><span class="line"><span class="regexp">    margin-bottom: 15px;</span></span><br><span class="line"><span class="regexp">    @include box_sizing; </span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">    input &#123;</span></span><br><span class="line"><span class="regexp">    height: auto !important;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>注意，在上面的代码中，渲染的局部视图名为 ‘shared/error_messages’，这里用到了 Rails 的一个约定:如 果局部视图要在多个控制器中使用(10.1.1 节)，则把它存放在专门的 shared/ 目录中。</p><blockquote><p>app/views/shared/_error_messages.html.erb</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> @<span class="attr">user.errors.any</span>? %&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"error_explanation"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-danger"</span>&gt;</span></span><br><span class="line">            The form contains <span class="tag">&lt;<span class="name">%=</span> <span class="attr">pluralize</span>(@<span class="attr">user.errors.count</span>, "<span class="attr">error</span>") %&gt;</span>.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%</span> @<span class="attr">user.errors.full_messages.each</span> <span class="attr">do</span> |<span class="attr">msg</span>| %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">msg</span> %&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">%</span> <span class="attr">end</span> %&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">end</span> %&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* forms */</span></span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"><span class="selector-id">#error_explanation</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red; </span><br><span class="line">    ul &#123;</span><br><span class="line">        <span class="selector-tag">color</span>: <span class="selector-tag">red</span>;</span><br><span class="line">        <span class="selector-tag">margin</span>: 0 0 30<span class="selector-tag">px</span> 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.field_with_errors</span> &#123; </span><br><span class="line">    @extend .has-error; </span><br><span class="line">    <span class="selector-class">.form-control</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: $state-danger-text; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UsersController</span> &lt; ApplicationController .</span></span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span></span></span><br><span class="line">        @user = User.new(user_params) </span><br><span class="line">        <span class="keyword">if</span> @user.save</span><br><span class="line">            <span class="comment"># 处理注册成功的情况 else</span></span><br><span class="line">            redirect_to @user</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    private</span><br><span class="line">    </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">user_params</span></span></span><br><span class="line">            params.<span class="keyword">require</span>(<span class="symbol">:user</span>).permit(<span class="symbol">:name</span>, <span class="symbol">:email</span>, <span class="symbol">:password</span>,</span><br><span class="line">            <span class="symbol">:password_confirmation</span>)</span><br><span class="line">        <span class="keyword">end</span> </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="闪现消息"><a href="#闪现消息" class="headerlink" title="闪现消息"></a>闪现消息</h3><blockquote><p>app/controllers/users_controller.rb</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UsersController</span> &lt; ApplicationController .</span></span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span></span></span><br><span class="line">        @user = User.new(user_params) </span><br><span class="line">        <span class="keyword">if</span> @user.save</span><br><span class="line">            flash[<span class="symbol">:success</span>] = <span class="string">"Welcome to the Sample App!"</span></span><br><span class="line">            <span class="comment"># 处理注册成功的情况 else</span></span><br><span class="line">            redirect_to @user</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    private</span><br><span class="line">    </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">user_params</span></span></span><br><span class="line">            params.<span class="keyword">require</span>(<span class="symbol">:user</span>).permit(<span class="symbol">:name</span>, <span class="symbol">:email</span>, <span class="symbol">:password</span>,</span><br><span class="line">            <span class="symbol">:password_confirmation</span>)</span><br><span class="line">        <span class="keyword">end</span> </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>app/views/layouts/application.html.erb</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%=</span> <span class="attr">render</span> '<span class="attr">layouts</span>/<span class="attr">header</span>' %&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%</span> <span class="attr">flash.each</span> <span class="attr">do</span> |<span class="attr">message_type</span>, <span class="attr">message</span>| %&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-&lt;%= message_type %&gt;"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">message</span> %&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%</span> <span class="attr">end</span> %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%=</span> <span class="attr">yield</span> %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%=</span> <span class="attr">render</span> '<span class="attr">layouts</span>/<span class="attr">footer</span>' %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%=</span> <span class="attr">debug</span>(<span class="attr">params</span>) <span class="attr">if</span> <span class="attr">Rails.env.development</span>? %&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            .</span><br><span class="line">            .</span><br><span class="line">            .</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="专业部署方案"><a href="#专业部署方案" class="headerlink" title="专业部署方案"></a>专业部署方案</h3><h4 id="在生产环境中使用-SSL"><a href="#在生产环境中使用-SSL" class="headerlink" title="在生产环境中使用 SSL"></a>在生产环境中使用 SSL</h4><blockquote><p>config/environments/production.rb</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Rails.application.configure <span class="keyword">do</span> .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    <span class="comment"># Force all access to the app over SSL, use Strict-Transport-Security,</span></span><br><span class="line">    <span class="comment"># and use secure cookies. </span></span><br><span class="line">    config.force_ssl = <span class="literal">true</span></span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="生产环境中的-Web-服务器"><a href="#生产环境中的-Web-服务器" class="headerlink" title="生产环境中的 Web 服务器"></a>生产环境中的 Web 服务器</h4><blockquote><p>config/puma.rb</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Puma configuration file.</span></span><br><span class="line">max_threads_count = ENV.fetch(<span class="string">"RAILS_MAX_THREADS"</span>) &#123; <span class="number">5</span> &#125; min_threads_count = ENV.fetch(<span class="string">"RAILS_MIN_THREADS"</span>) &#123; max_threads_count &#125; threads min_threads_count, max_threads_count</span><br><span class="line">port ENV.fetch(<span class="string">"PORT"</span>) &#123; <span class="number">3000</span> &#125;</span><br><span class="line">environment ENV.fetch(<span class="string">"RAILS_ENV"</span>) &#123; ENV[<span class="string">'RACK_ENV'</span>] <span class="params">||</span> <span class="string">"development"</span> &#125; pidfile ENV.fetch(<span class="string">"PIDFILE"</span>) &#123; <span class="string">"tmp/pids/server.pid"</span> &#125;</span><br><span class="line">workers ENV.fetch(<span class="string">"WEB_CONCURRENCY"</span>) &#123; <span class="number">2</span> &#125;</span><br><span class="line">preload_app!</span><br><span class="line">plugin <span class="symbol">:tmp_restart</span></span><br></pre></td></tr></table></figure><p>最后，我们要新建一个 Procfile 文件，告诉 Heroku 在生产环境运行一个 Puma 进程。这个文件的内容如代 码清单 7.36 所示。Procfile 文件和 Gemfile 文件一样，应该放在应用的根目录中。</p><blockquote><p>./Procfile</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">web: bundle <span class="built_in">exec</span> puma -C config/puma.rb</span><br></pre></td></tr></table></figure><h4 id="配置生产数据库"><a href="#配置生产数据库" class="headerlink" title="配置生产数据库"></a>配置生产数据库</h4><blockquote><p>config/database.yml</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">default:</span> <span class="meta">&amp;default</span></span><br><span class="line"><span class="attr">      adapter:</span> <span class="string">sqlite3</span></span><br><span class="line"><span class="attr">      pool:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">      timeout:</span> <span class="number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">development:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="meta">*default</span></span><br><span class="line"><span class="attr">    database:</span> <span class="string">db/development.sqlite3</span></span><br><span class="line"><span class="comment"># Warning: The database defined as "test" will be erased and</span></span><br><span class="line"><span class="comment"># re-generated from your development database when you run "rake".</span></span><br><span class="line"><span class="comment"># Do not set this db to the same as development or production. </span></span><br><span class="line"></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="meta">*default</span></span><br><span class="line"><span class="attr">    database:</span> <span class="string">db/test.sqlite3</span></span><br><span class="line"></span><br><span class="line"><span class="attr">production:</span></span><br><span class="line"><span class="attr">    adapter:</span> <span class="string">postgresql</span></span><br><span class="line"><span class="attr">    encoding:</span> <span class="string">unicode</span></span><br><span class="line">    <span class="comment"># For details on connection pooling, see Rails configuration guide # https://guides.rubyonrails.org/configuring.html#database-pooling pool: &lt;%= ENV.fetch("RAILS_MAX_THREADS") &#123; 5 &#125; %&gt;</span></span><br><span class="line"><span class="attr">    database:</span> <span class="string">sample_app_production</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">sample_app</span></span><br><span class="line"><span class="attr">    password:</span> &lt;%=<span class="ruby"> ENV[<span class="string">'SAMPLE_APP_DATABASE_PASSWORD'</span>] </span>%&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      how to signup in website using ruby on rails
    
    </summary>
    
    
      <category term="Full Stack" scheme="https://zhangruochi.com/categories/Full-Stack/"/>
    
      <category term="Ruby on Rails" scheme="https://zhangruochi.com/categories/Full-Stack/Ruby-on-Rails/"/>
    
    
  </entry>
  
  <entry>
    <title>rails tutorials: data model</title>
    <link href="https://zhangruochi.com/rails-tutorials-data-model/2020/01/17/"/>
    <id>https://zhangruochi.com/rails-tutorials-data-model/2020/01/17/</id>
    <published>2020-01-17T15:19:10.000Z</published>
    <updated>2020-01-17T15:42:17.179Z</updated>
    
    <content type="html"><![CDATA[<h3 id="生成-User-Model"><a href="#生成-User-Model" class="headerlink" title="生成 User Model"></a>生成 User Model</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails g model User name:string email:string</span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><blockquote><p>app/models/user.rb</p></blockquote><h4 id="存在性验证"><a href="#存在性验证" class="headerlink" title="存在性验证"></a>存在性验证</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ApplicationRecord </span></span><br><span class="line">    validates <span class="symbol">:name</span>, <span class="symbol">presence:</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="长度验证"><a href="#长度验证" class="headerlink" title="长度验证"></a>长度验证</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ApplicationRecord</span></span><br><span class="line">    validates <span class="symbol">:name</span>, <span class="symbol">presence:</span> <span class="literal">true</span>, <span class="symbol">length:</span> &#123; <span class="symbol">maximum:</span> <span class="number">50</span> &#125; </span><br><span class="line">    validates <span class="symbol">:email</span>, <span class="symbol">presence:</span> <span class="literal">true</span>, <span class="symbol">length:</span> &#123; <span class="symbol">maximum:</span> <span class="number">255</span> &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="电子邮件格式验证"><a href="#电子邮件格式验证" class="headerlink" title="电子邮件格式验证"></a>电子邮件格式验证</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ApplicationRecord</span></span><br><span class="line">    VALID_EMAIL_REGEX = <span class="regexp">/\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i</span></span><br><span class="line">    validates <span class="symbol">:name</span>, <span class="symbol">presence:</span> <span class="literal">true</span>, <span class="symbol">length:</span> &#123; <span class="symbol">maximum:</span> <span class="number">50</span> &#125; </span><br><span class="line">    validates <span class="symbol">:email</span>, <span class="symbol">presence:</span> <span class="literal">true</span>, <span class="symbol">length:</span> &#123; <span class="symbol">maximum:</span> <span class="number">255</span> &#125;,</span><br><span class="line">                      <span class="symbol">format:</span> &#123;<span class="symbol">with:</span> VALID_EMAIL_REGEX&#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="唯一性验证"><a href="#唯一性验证" class="headerlink" title="唯一性验证"></a>唯一性验证</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ApplicationRecord</span></span><br><span class="line">    VALID_EMAIL_REGEX = <span class="regexp">/\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i</span></span><br><span class="line">    validates <span class="symbol">:name</span>, <span class="symbol">presence:</span> <span class="literal">true</span>, <span class="symbol">length:</span> &#123; <span class="symbol">maximum:</span> <span class="number">50</span> &#125; </span><br><span class="line">    validates <span class="symbol">:email</span>, <span class="symbol">presence:</span> <span class="literal">true</span>, <span class="symbol">length:</span> &#123; <span class="symbol">maximum:</span> <span class="number">255</span> &#125;,</span><br><span class="line">                      <span class="symbol">format:</span> &#123;<span class="symbol">with:</span> VALID_EMAIL_REGEX&#125;,</span><br><span class="line">                      <span class="symbol">uniqueness:</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="数据库层唯一性验证"><a href="#数据库层唯一性验证" class="headerlink" title="数据库层唯一性验证"></a>数据库层唯一性验证</h3><blockquote><p>rails generate migration add_index_to_users_email</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddIndexToUsersEmail</span> &lt; ActiveRecord::Migration[6.0] </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">change</span></span></span><br><span class="line">        add_index <span class="symbol">:users</span>, <span class="symbol">:email</span>, <span class="symbol">unique:</span> <span class="literal">true</span> </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails db:migrate</span><br></pre></td></tr></table></figure><h3 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h3><p>保证存储在数据库中的电子邮件都是小写字母的形式</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ApplicationRecord</span></span><br><span class="line">    before_save &#123; <span class="keyword">self</span>.email = email.downcase &#125;</span><br><span class="line">    validates <span class="symbol">:name</span>, <span class="symbol">presence:</span> <span class="literal">true</span>, <span class="symbol">length:</span> &#123; <span class="symbol">maximum:</span> <span class="number">50</span> &#125; </span><br><span class="line">    VALID_EMAIL_REGEX = <span class="regexp">/\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i</span> </span><br><span class="line">    validates <span class="symbol">:email</span>, <span class="symbol">presence:</span> <span class="literal">true</span>, <span class="symbol">length:</span> &#123; <span class="symbol">maximum:</span> <span class="number">255</span> &#125;,</span><br><span class="line">                      <span class="symbol">format:</span> &#123; <span class="symbol">with:</span> VALID_EMAIL_REGEX &#125;, <span class="symbol">uniqueness:</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="添加安全密码"><a href="#添加安全密码" class="headerlink" title="添加安全密码"></a>添加安全密码</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ApplicationRecord</span></span><br><span class="line">    ......</span><br><span class="line">    has_secure_password</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>在模型中调用这个方法后，会自动添加如下功能:</p><ol><li>在数据库中的password_digest列存储安全的密码哈希值;</li><li>获得一对虚拟属性，20password和password_confirmation，而且创建用户对象时会执行存在性验证和 匹配验证;</li><li>获得authenticate方法，如果密码正确，返回对应的用户对象，否则返回false。</li></ol><p>has_secure_password 发挥功效的唯一要求是，对应的模型中有个名为 password_digest 的属性。因此，创建一个适当的迁移文件，添加 password_digest 列。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails generate migration add_password_digest_to_users password_digest:string</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddPasswordDigestToUsers</span> &lt; ActiveRecord::Migration[6.0] </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">change</span></span></span><br><span class="line">        add_column <span class="symbol">:users</span>, <span class="symbol">:password_digest</span>, <span class="symbol">:string</span> </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails db:migrate</span><br></pre></td></tr></table></figure><p>has_secure_password 方法使用先进的 bcrypt 哈希算法计算密码摘要。使用 bcrypt 计算密码哈希值，就算攻击者设法获得了数据库副本也无法登录网站。我们要把 bcrypt gem 添加到 Gemfile 文件中。</p>]]></content>
    
    <summary type="html">
    
      How to create data model and store the data
    
    </summary>
    
    
      <category term="Full Stack" scheme="https://zhangruochi.com/categories/Full-Stack/"/>
    
      <category term="Ruby on Rails" scheme="https://zhangruochi.com/categories/Full-Stack/Ruby-on-Rails/"/>
    
    
  </entry>
  
  <entry>
    <title>rails-tutorials: static page and automated testing</title>
    <link href="https://zhangruochi.com/rails-tutorials-static-page-and-automated-testing/2020/01/11/"/>
    <id>https://zhangruochi.com/rails-tutorials-static-page-and-automated-testing/2020/01/11/</id>
    <published>2020-01-11T20:28:09.000Z</published>
    <updated>2020-01-11T09:11:13.679Z</updated>
    
    <content type="html"><![CDATA[<h3 id="生成静态页面的控制器"><a href="#生成静态页面的控制器" class="headerlink" title="生成静态页面的控制器"></a>生成静态页面的控制器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails generate controller StaticPages home <span class="built_in">help</span></span><br></pre></td></tr></table></figure><h3 id="撤销操作"><a href="#撤销操作" class="headerlink" title="撤销操作"></a>撤销操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rails generate controller StaticPages home <span class="built_in">help</span></span><br><span class="line">rails destroy  controller StaticPages home <span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">rails generate model User name:string email:string</span><br><span class="line">rails destroy model User</span><br><span class="line"></span><br><span class="line">rails db:migrate</span><br><span class="line">rails db:rollback</span><br><span class="line">rails db:migrate VERSION=0</span><br></pre></td></tr></table></figure><h3 id="TDD"><a href="#TDD" class="headerlink" title="TDD"></a>TDD</h3><blockquote><p>test/controllers/static_pages_controller_test.rb</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticPagesControllerTest</span> &lt; ActionDispatch::IntegrationTest</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">        @base_title = <span class="string">"Ruby on Rails Tutorial Sample App"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    test <span class="string">"should get home"</span> <span class="keyword">do</span></span><br><span class="line">        get static_pages_home_url</span><br><span class="line">        assert_response <span class="symbol">:success</span></span><br><span class="line">        assert_select <span class="string">"title"</span>, <span class="string">"Home | <span class="subst">#&#123;@base_title&#125;</span>"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    test <span class="string">"should get help"</span> <span class="keyword">do</span></span><br><span class="line">        get static_pages_help_url</span><br><span class="line">        assert_response <span class="symbol">:success</span></span><br><span class="line">        assert_select <span class="string">"title"</span>, <span class="string">"Help | <span class="subst">#&#123;@base_title&#125;</span>"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    test <span class="string">"should get about"</span> <span class="keyword">do</span></span><br><span class="line">        get static_pages_about_url</span><br><span class="line">        assert_response <span class="symbol">:success</span></span><br><span class="line">        assert_select <span class="string">"title"</span>, <span class="string">"About | <span class="subst">#&#123;@base_title&#125;</span>"</span></span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>app/views/static_pages/home.html.erb</p></blockquote><p>通过&lt;% … %&gt;调用Rails提供的<code>provide</code>函数，把字符串”Home”赋给:title。11然后，在标题中，我们使<br>用类似的符号&lt;%= … %&gt;，通过Ruby的<code>yield</code>函数把标题插入模板中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">provide</span>(<span class="attr">:title</span>, "<span class="attr">Home</span>") %&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">yield</span>(<span class="attr">:title</span>) %&gt;</span> | Ruby on Rails Tutorial Sample App<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Sample App<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        This is the home page for the</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.railstutorial.org/"</span>&gt;</span>Ruby on Rails Tutorial<span class="tag">&lt;/<span class="name">a</span>&gt;</span> sample application.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为了提取出共用的结构，Rails 提供了一个特别的布局文件，名为 application.html.erb。</p><blockquote><p>app/views/layouts/application.html.erb</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">yield</span>(<span class="attr">:title</span>) %&gt;</span> | Ruby on Rails Tutorial Sample App<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">%=</span> <span class="attr">csrf_meta_tags</span> %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%=</span> <span class="attr">csp_meta_tag</span> %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%=</span> <span class="attr">stylesheet_link_tag</span> '<span class="attr">application</span>', <span class="attr">media:</span> '<span class="attr">all</span>', '<span class="attr">data-turbolinks-track</span>'<span class="attr">:</span> '<span class="attr">reload</span>' %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%=</span> <span class="attr">javascript_pack_tag</span> '<span class="attr">application</span>', '<span class="attr">data-turbolinks-track</span>'<span class="attr">:</span> '<span class="attr">reload</span>' %&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%=</span> <span class="attr">yield</span> %&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这几行代码的作用是，引入应用的样式表和 JavaScript 文件; Rails 提供的 csp_meta_tag 方法实现内容安全策略(Content Security Policy，CSP)，避免遭受跨站脚本(cross-site scripting，XSS)攻击;Rails 提供的 csrf_meta_tags 方法用于避免跨站请求伪造(Cross-Site Request Forgery，CSRF)攻击。</p><blockquote><p>app/views/static_pages/home.html.erb</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">provide</span>(<span class="attr">:title</span>, "<span class="attr">Home</span>") %&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Sample App<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    This is the home page for the</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.railstutorial.org/"</span>&gt;</span>Ruby on Rails Tutorial<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line">    sample application.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;%= yield %&gt;</code>这行代码的作用是，把每个页面的内容插入布局中。在布局 中使用这行代码后，访问 /static_pages/home 时会把 home.html.erb 中的内容转换成 HTML，然后插入 <code>&lt;%= yield %&gt;</code> 所在的位置。</p>]]></content>
    
    <summary type="html">
    
      how to use static page and automated testing in ROR
    
    </summary>
    
    
      <category term="Full Stack" scheme="https://zhangruochi.com/categories/Full-Stack/"/>
    
      <category term="Ruby on Rails" scheme="https://zhangruochi.com/categories/Full-Stack/Ruby-on-Rails/"/>
    
    
  </entry>
  
  <entry>
    <title>rails tutorials - toy_app</title>
    <link href="https://zhangruochi.com/rails-tutorials-toy-app/2020/01/11/"/>
    <id>https://zhangruochi.com/rails-tutorials-toy-app/2020/01/11/</id>
    <published>2020-01-11T19:51:49.000Z</published>
    <updated>2020-01-17T15:19:48.617Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rails new toy_app</span><br><span class="line"><span class="built_in">cd</span> toy_app</span><br></pre></td></tr></table></figure><h3 id="修改-Gemfile"><a href="#修改-Gemfile" class="headerlink" title="修改 Gemfile"></a>修改 Gemfile</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">group :development, :<span class="built_in">test</span> <span class="keyword">do</span></span><br><span class="line">    gem <span class="string">'sqlite3'</span>, <span class="string">'1.4.1'</span></span><br><span class="line">    gem <span class="string">'byebug'</span>, <span class="string">'11.0.1'</span>, platforms: [:mri, :mingw, :x64_mingw]</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">group :production <span class="keyword">do</span> </span><br><span class="line">    gem <span class="string">'pg'</span>, <span class="string">'1.1.4'</span></span><br><span class="line">end</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装gem时要指定--without production选项，禁止安装生产环境使用的gem </span></span><br><span class="line">bundle install --without production</span><br></pre></td></tr></table></figure><h3 id="使用-git-版本控制系统"><a href="#使用-git-版本控制系统" class="headerlink" title="使用 git 版本控制系统"></a>使用 git 版本控制系统</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add -A</span><br><span class="line">git commit -m <span class="string">"Initialize repository"</span></span><br><span class="line"></span><br><span class="line">git remote add origin https://github.com/&lt;username&gt;/toy_app.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h3 id="修改-root-route"><a href="#修改-root-route" class="headerlink" title="修改 root route"></a>修改 root route</h3><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="route.png" width="50%" height="50%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">routes</div></center><blockquote><p>app/controllers/application_controller.rb</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplicationController</span> &lt; ActionController::Base</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hello</span></span></span><br><span class="line">        render <span class="symbol">html:</span> <span class="string">"hello, world!"</span></span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>config/routes.rb</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Rails.application.routes.draw <span class="keyword">do</span> </span><br><span class="line">    root <span class="string">'application#hello'</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="创建数据资源"><a href="#创建数据资源" class="headerlink" title="创建数据资源"></a>创建数据资源</h3><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="users.png" width="50%" height="50%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">User model</div></center><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="microposts.png" width="50%" height="50%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">microposts model</div></center><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="relation.png" width="50%" height="50%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">relation between user and micropost</div></center><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rails generate scaffold User name:string email:string</span><br><span class="line">rails generate scaffold Micropost content:text user_id:<span class="built_in">integer</span></span><br></pre></td></tr></table></figure><h3 id="修改根路由"><a href="#修改根路由" class="headerlink" title="修改根路由"></a>修改根路由</h3><blockquote><p>config/routes.rb</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Rails.application.routes.draw <span class="keyword">do</span> </span><br><span class="line">    resources <span class="symbol">:users</span></span><br><span class="line">    root <span class="string">'users#index'</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="模型验证"><a href="#模型验证" class="headerlink" title="模型验证"></a>模型验证</h3><blockquote><p>app/models/micropost.rb</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Micropost</span> &lt; ApplicationRecord</span></span><br><span class="line">    belongs_to <span class="symbol">:user</span></span><br><span class="line">    validates <span class="symbol">:content</span>, <span class="symbol">length:</span> &#123; <span class="symbol">maximum:</span> <span class="number">140</span> &#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ApplicationRecord </span></span><br><span class="line">    has_many <span class="symbol">:microposts</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="数据库迁移"><a href="#数据库迁移" class="headerlink" title="数据库迁移"></a>数据库迁移</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails db:migrate</span><br></pre></td></tr></table></figure><h3 id="部署到heroku"><a href="#部署到heroku" class="headerlink" title="部署到heroku"></a>部署到<code>heroku</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git add -A</span><br><span class="line">git commit -m <span class="string">"Finish toy app"</span></span><br><span class="line">git push</span><br><span class="line"></span><br><span class="line">heroku run rails db:migrate</span><br><span class="line">git push heroku</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      a simple tutorial of ror
    
    </summary>
    
    
      <category term="Full Stack" scheme="https://zhangruochi.com/categories/Full-Stack/"/>
    
      <category term="Ruby on Rails" scheme="https://zhangruochi.com/categories/Full-Stack/Ruby-on-Rails/"/>
    
    
  </entry>
  
  <entry>
    <title>Fastai Data Block API</title>
    <link href="https://zhangruochi.com/Fastai-Data-Block-API/2019/12/29/"/>
    <id>https://zhangruochi.com/Fastai-Data-Block-API/2019/12/29/</id>
    <published>2019-12-29T21:08:18.000Z</published>
    <updated>2019-12-29T13:03:57.484Z</updated>
    
    <content type="html"><![CDATA[<p>Essentially steps:</p><ol><li><p>Define the source of your inputs(X values)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ImageItemList.from_folder(path) </span><br><span class="line"></span><br><span class="line"><span class="comment">## This step generate the `ItemList` class. </span></span><br><span class="line"></span><br><span class="line"><span class="comment">## ItemBase: The ItemBase class defines what an “item” in your inputs or your targets looks like. </span></span><br><span class="line"></span><br><span class="line"><span class="comment">## ItemList: An ItemList defines a collections of `items` (e.g., ItemBase objects) including how they are individually fetched and displayed.</span></span><br></pre></td></tr></table></figure></li><li><p>Define how you want to split your inputs into training and validation datasets using one of the built-in mechanisms for doing so.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ImageItemList.from_folder(path)</span><br><span class="line">             .split_by_folder()</span><br><span class="line"></span><br><span class="line"><span class="comment">## This step generate the `ItemLists` class. </span></span><br><span class="line"></span><br><span class="line"><span class="comment">## ItemLists: A collection of ItemList instances for your inputs or targets. the `split` function above will return a separate ItemList instance for both your training and validation sets in an `ItemLists` object.</span></span><br></pre></td></tr></table></figure></li><li><p>Define the source of your targets (that is your y values) and combine them with the inputs of your training and validation datasets in the form of fastai <code>LabelList</code> objects. LabelList subclasses the PyTorch <code>Dataset</code> class.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ImageItemList.from_folder(path)</span><br><span class="line">             .split_by_folder()</span><br><span class="line">             .label_from_folder()</span><br><span class="line"></span><br><span class="line"><span class="comment">## This step generate the `LabelLists` class</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## LabelList: A LabelList is a PyTorch Dataset that combines your input and target ItemList classes (an inputs ItemList + a targets ItemList = a LabelList). </span></span><br><span class="line"></span><br><span class="line"><span class="comment">## LabelLists: A collection of LabelList instances you get as a result of your `labeling` function. Again, a LabelList` is a PyTorch Dataset and essentially defines the things, your inputs and optionally targets, fed into the forward function of your model.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Pre-Processing: This is also where any PreProcessor classes you’ve passed into your ItemList class run. These classes define things you want done to your data once before they are turned into PyTorch Datasets/DataLoaders. Examples include things like tokenizing and numericalizing text, filling in missing values in tabular, etc…. You can define a default `PreProcessor` or collection of PreProcessors you want ran by overloading the _processor class variable in your custom ItemList.</span></span><br></pre></td></tr></table></figure></li><li><p>Add a test dataset (optional).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data = (ImageItemList.from_folder(path) </span><br><span class="line">                     .split_by_folder()</span><br><span class="line">                     .label_from_folder()</span><br><span class="line">                     .add_test_folder())</span><br><span class="line"></span><br><span class="line"><span class="comment">## If you add a test set, like we do above, the same pre-processing applied to your validation set will be applied to your test.</span></span><br></pre></td></tr></table></figure></li><li><p>Add transforms to your <code>LabelList</code> objects (optional). Here you can apply data augmentation to either, or both, your inputs and targets.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data = (ImageItemList.from_folder(path) </span><br><span class="line">                     .split_by_folder()</span><br><span class="line">                     .label_from_folder()</span><br><span class="line">                     .add_test_folder()</span><br><span class="line">                     .transform(tfms, size=<span class="number">64</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">## Transforms define data augmentation you want done to either, or both, of your inputs and targets datasets.</span></span><br></pre></td></tr></table></figure></li><li><p>Build PyTorch DataLoaders from the Datasets defined above and package them up into a fastai <code>DataBunch</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">data = (ImageItemList.from_folder(path) </span><br><span class="line">                     .split_by_folder()</span><br><span class="line">                     .label_from_folder()</span><br><span class="line">                     .add_test_folder()</span><br><span class="line">                     .transform(tfms, size=<span class="number">64</span>)</span><br><span class="line">                     .databunch())</span><br><span class="line"></span><br><span class="line"><span class="comment">## The step generate the `DataBunch` class</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## A DataBunch is a collection of PyTorch DataLoaders returned when you call the databunch function. It also defines how they are created from your training, validation, and optionally test LabelList instances.</span></span><br></pre></td></tr></table></figure></li></ol><p>Once this is done, you’ll have everything you need to train, validate, and test any PyTorch nn.Module using the fastai library. You’ll also have everything you need to later do inference on future data.</p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImageTuple</span><span class="params">(ItemBase)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    we need to create a custom type of items since we feed the model tuples of images.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, img1, img2)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">         The basis is to code the data attribute that is what will be </span></span><br><span class="line"><span class="string">         given to the model. Note that we still keep track of the </span></span><br><span class="line"><span class="string">         initial object (usuall in an obj attribute) to be able to show </span></span><br><span class="line"><span class="string">         nice representations later on. </span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.img1 = img1</span><br><span class="line">        self.img2 = img2</span><br><span class="line">        self.obj = (img1,img2)</span><br><span class="line">        self.data = [<span class="number">-1</span>+<span class="number">2</span>*img1.data,<span class="number">-1</span>+<span class="number">2</span>*img2.data]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">apply_tfms</span><span class="params">(self, tfms, **kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Then we want to apply data augmentation to our tuple of images. </span></span><br><span class="line"><span class="string">        That's done by writing an apply_tfms method as we saw before. </span></span><br><span class="line"><span class="string">        Here we pass that call to the two underlying images then update the data.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.img1 = self.img1.apply_tfms(tfms, **kwargs)</span><br><span class="line">        self.img2 = self.img2.apply_tfms(tfms, **kwargs)</span><br><span class="line">        self.data = [<span class="number">-1</span>+<span class="number">2</span>*self.img1.data,<span class="number">-1</span>+<span class="number">2</span>*self.img2.data]</span><br><span class="line">        <span class="keyword">return</span> self   </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_one</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        We define a last method to stack the two images next to each other, which we </span></span><br><span class="line"><span class="string">        will use later for a customized show_batch / show_results behavior.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> Image(<span class="number">0.5</span>+torch.cat(self.data,<span class="number">2</span>)/<span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TargetTupleList</span><span class="params">(ItemList)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reconstruct</span><span class="params">(self, t:Tensor)</span>:</span> </span><br><span class="line">        <span class="keyword">if</span> len(t.size()) == <span class="number">0</span>: <span class="keyword">return</span> t</span><br><span class="line">        <span class="keyword">return</span> ImageTuple(Image(t[<span class="number">0</span>]/<span class="number">2</span>+<span class="number">0.5</span>),Image(t[<span class="number">1</span>]/<span class="number">2</span>+<span class="number">0.5</span>))</span><br></pre></td></tr></table></figure><ul><li><code>_bunch</code> contains the name of the class that will be used to create a DataBunch</li><li><code>_processor</code> contains a class (or a list of classes) of PreProcessor that will then be used as the default to create processor for this ItemList</li><li><code>_label_cls</code> contains the class that will be used to create the labels by default</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImageTupleList</span><span class="params">(ImageList)</span>:</span></span><br><span class="line">    _label_cls=TargetTupleList</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, items, itemsB=None, **kwargs)</span>:</span></span><br><span class="line">        super().__init__(items, **kwargs)</span><br><span class="line">        self.itemsB = itemsB</span><br><span class="line">        self.copy_new.append(<span class="string">'itemsB'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, i)</span>:</span></span><br><span class="line">        img1 = super().get(i)</span><br><span class="line">        fn = self.itemsB[random.randint(<span class="number">0</span>, len(self.itemsB)<span class="number">-1</span>)]</span><br><span class="line">        <span class="keyword">return</span> ImageTuple(img1, open_image(fn))</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reconstruct</span><span class="params">(self, t:Tensor)</span>:</span> </span><br><span class="line">        <span class="keyword">return</span> ImageTuple(Image(t[<span class="number">0</span>]/<span class="number">2</span>+<span class="number">0.5</span>),Image(t[<span class="number">1</span>]/<span class="number">2</span>+<span class="number">0.5</span>))</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_folders</span><span class="params">(cls, path, folderA, folderB, **kwargs)</span>:</span></span><br><span class="line">        itemsB = ImageList.from_folder(path/folderB).items</span><br><span class="line">        res = super().from_folder(path/folderA, itemsB=itemsB, **kwargs)</span><br><span class="line">        res.path = path</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_xys</span><span class="params">(self, xs, ys, figsize:Tuple[int,int]=<span class="params">(<span class="number">12</span>,<span class="number">6</span>)</span>, **kwargs)</span>:</span></span><br><span class="line">        <span class="string">"Show the `xs` and `ys` on a figure of `figsize`. `kwargs` are passed to the show method."</span></span><br><span class="line">        rows = int(math.sqrt(len(xs)))</span><br><span class="line">        fig, axs = plt.subplots(rows,rows,figsize=figsize)</span><br><span class="line">        <span class="keyword">for</span> i, ax <span class="keyword">in</span> enumerate(axs.flatten() <span class="keyword">if</span> rows &gt; <span class="number">1</span> <span class="keyword">else</span> [axs]):</span><br><span class="line">            xs[i].to_one().show(ax=ax, **kwargs)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_xyzs</span><span class="params">(self, xs, ys, zs, figsize:Tuple[int,int]=None, **kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""Show `xs` (inputs), `ys` (targets) and `zs` (predictions) on a figure of `figsize`.</span></span><br><span class="line"><span class="string">        `kwargs` are passed to the show method."""</span></span><br><span class="line">        figsize = ifnone(figsize, (<span class="number">12</span>,<span class="number">3</span>*len(xs)))</span><br><span class="line">        fig,axs = plt.subplots(len(xs), <span class="number">2</span>, figsize=figsize)</span><br><span class="line">        fig.suptitle(<span class="string">'Ground truth / Predictions'</span>, weight=<span class="string">'bold'</span>, size=<span class="number">14</span>)</span><br><span class="line">        <span class="keyword">for</span> i,(x,z) <span class="keyword">in</span> enumerate(zip(xs,zs)):</span><br><span class="line">            x.to_one().show(ax=axs[i,<span class="number">0</span>], **kwargs)</span><br><span class="line">            z.to_one().show(ax=axs[i,<span class="number">1</span>], **kwargs)</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://blog.usejournal.com/finding-data-block-nirvana-a-journey-through-the-fastai-data-block-api-c38210537fe4" target="_blank" rel="noopener">https://blog.usejournal.com/finding-data-block-nirvana-a-journey-through-the-fastai-data-block-api-c38210537fe4</a></li><li><a href="https://docs.fast.ai/tutorial.itemlist.html" target="_blank" rel="noopener">https://docs.fast.ai/tutorial.itemlist.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      a journey through the fastai data block API
    
    </summary>
    
    
      <category term="Artificial Intelligence" scheme="https://zhangruochi.com/categories/Artificial-Intelligence/"/>
    
      <category term="Deep Learning" scheme="https://zhangruochi.com/categories/Artificial-Intelligence/Deep-Learning/"/>
    
    
  </entry>
  
  <entry>
    <title>Face Blindness Saver</title>
    <link href="https://zhangruochi.com/Face-Blindness-Saver/2019/12/25/"/>
    <id>https://zhangruochi.com/Face-Blindness-Saver/2019/12/25/</id>
    <published>2019-12-25T06:20:49.000Z</published>
    <updated>2020-01-23T19:01:03.804Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Creating-your-own-dataset-from-Google-Images"><a href="#Creating-your-own-dataset-from-Google-Images" class="headerlink" title="Creating your own dataset from Google Images"></a>Creating your own dataset from Google Images</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fastai.vision <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><h2 id="Get-a-list-of-URLs"><a href="#Get-a-list-of-URLs" class="headerlink" title="Get a list of URLs"></a>Get a list of URLs</h2><h3 id="Search-and-scroll"><a href="#Search-and-scroll" class="headerlink" title="Search and scroll"></a>Search and scroll</h3><p>Go to <a href="http://images.google.com" target="_blank" rel="noopener">Google Images</a> and search for the images you are interested in. The more specific you are in your Google Search, the better the results and the less manual pruning you will have to do.</p><p>Scroll down until you’ve seen all the images you want to download, or until you see a button that says ‘Show more results’. All the images you scrolled past are now available to download. To get more, click on the button, and continue scrolling. The maximum number of images Google Images shows is 700.</p><p>It is a good idea to put things you want to exclude into the search query, for instance if you are searching for the Eurasian wolf, “canis lupus lupus”, it might be a good idea to exclude other variants:</p><pre><code>&quot;canis lupus lupus&quot; -dog -arctos -familiaris -baileyi -occidentalis</code></pre><p>You can also limit your results to show only photos by clicking on Tools and selecting Photos from the Type dropdown.</p><h3 id="Download-into-file"><a href="#Download-into-file" class="headerlink" title="Download into file"></a>Download into file</h3><p>Now you must run some Javascript code in your browser which will save the URLs of all the images you want for you dataset.</p><p>In Google Chrome press <kbd>Ctrl</kbd><kbd>Shift</kbd><kbd>j</kbd> on Windows/Linux and <kbd>Cmd</kbd><kbd>Opt</kbd><kbd>j</kbd> on macOS, and a small window the javascript ‘Console’ will appear. In Firefox press <kbd>Ctrl</kbd><kbd>Shift</kbd><kbd>k</kbd> on Windows/Linux or <kbd>Cmd</kbd><kbd>Opt</kbd><kbd>k</kbd> on macOS. That is where you will paste the JavaScript commands.</p><p>You will need to get the urls of each of the images. Before running the following commands, you may want to disable ad blocking extensions (uBlock, AdBlockPlus etc.) in Chrome. Otherwise the window.open() command doesn’t work. Then you can run the following commands:</p><h3 id="Create-directory-and-upload-urls-file-into-your-server"><a href="#Create-directory-and-upload-urls-file-into-your-server" class="headerlink" title="Create directory and upload urls file into your server"></a>Create directory and upload urls file into your server</h3><p>Choose an appropriate name for your labeled images. You can run these steps multiple times to create different labels.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">help(download_images)</span><br></pre></td></tr></table></figure><pre><code>Help on function download_images in module fastai.vision.data:download_images(urls:Collection[str], dest:Union[pathlib.Path, str], max_pics:int=1000, max_workers:int=8, timeout=4)    Download images listed in text file `urls` to path `dest`, at most `max_pics`</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path = Path(<span class="string">'data/dogs'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">folder = <span class="string">'akita'</span></span><br><span class="line">file = <span class="string">'akita.csv'</span></span><br><span class="line">dest = path/folder</span><br><span class="line">dest.mkdir(parents=<span class="keyword">True</span>, exist_ok=<span class="keyword">True</span>)</span><br><span class="line">urls = path/file</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">download_images(urls=urls, dest=dest, max_pics=<span class="number">200</span>)</span><br></pre></td></tr></table></figure><pre><code>Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">folder = <span class="string">'husky'</span></span><br><span class="line">file = <span class="string">'husky.csv'</span></span><br><span class="line">dest = path/folder</span><br><span class="line">dest.mkdir(parents=<span class="keyword">True</span>, exist_ok=<span class="keyword">True</span>)</span><br><span class="line">urls = path/file</span><br><span class="line">download_images(urls=urls, dest=dest, max_pics=<span class="number">200</span>)</span><br></pre></td></tr></table></figure><pre><code>Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">folder = <span class="string">'shibaInu'</span></span><br><span class="line">file = <span class="string">'shibaInu.csv'</span></span><br><span class="line">dest = path/folder</span><br><span class="line">dest.mkdir(parents=<span class="keyword">True</span>, exist_ok=<span class="keyword">True</span>)</span><br><span class="line">urls = path/file</span><br><span class="line">download_images(urls=urls, dest=dest, max_pics=<span class="number">200</span>)</span><br></pre></td></tr></table></figure><pre><code>Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">folder = <span class="string">'alaska'</span></span><br><span class="line">file = <span class="string">'alaska.csv'</span></span><br><span class="line">dest = path/folder</span><br><span class="line">dest.mkdir(parents=<span class="keyword">True</span>, exist_ok=<span class="keyword">True</span>)</span><br><span class="line">urls = path/file</span><br><span class="line">download_images(urls=urls, dest=dest, max_pics=<span class="number">200</span>)</span><br></pre></td></tr></table></figure><pre><code>Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?Error  Invalid URL &#39;&#39;: No schema supplied. Perhaps you meant http://?</code></pre><h3 id="View-data"><a href="#View-data" class="headerlink" title="View data"></a>View data</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">help(DataBunch)</span><br></pre></td></tr></table></figure><pre><code>Help on class DataBunch in module fastai.basic_data:class DataBunch(builtins.object) |  Bind `train_dl`,`valid_dl` and `test_dl` in a data object. |   |  Methods defined here: |   |  __getattr__(self, k:int) -&gt; Any |   |  __init__(self, train_dl:torch.utils.data.dataloader.DataLoader, valid_dl:torch.utils.data.dataloader.DataLoader, fix_dl:torch.utils.data.dataloader.DataLoader=None, test_dl:Union[torch.utils.data.dataloader.DataLoader, NoneType]=None, device:torch.device=None, dl_tfms:Union[Collection[Callable], NoneType]=None, path:Union[pathlib.Path, str]=&#39;.&#39;, collate_fn:Callable=&lt;function data_collate at 0x7f14501736a8&gt;, no_check:bool=False) |      Initialize self.  See help(type(self)) for accurate signature. |   |  __repr__(self) -&gt; str |      Return repr(self). |   |  __setstate__(self, data:Any) |   |  add_test(self, items:Iterator, label:Any=None, tfms=None, tfm_y=None) -&gt; None |      Add the `items` as a test set. Pass along `label` otherwise label them with `EmptyLabel`. |   |  add_tfm(self, tfm:Callable) -&gt; None |   |  dl(self, ds_type:fastai.basic_data.DatasetType=&lt;DatasetType.Valid: 2&gt;) -&gt; fastai.basic_data.DeviceDataLoader |      Returns appropriate `Dataset` for validation, training, or test (`ds_type`). |   |  export(self, file:Union[pathlib.Path, str, _io.BufferedWriter, _io.BytesIO]=&#39;export.pkl&#39;) |      Export the minimal state of `self` for inference in `self.path/file`. `file` can be file-like (file or buffer) |   |  one_batch(self, ds_type:fastai.basic_data.DatasetType=&lt;DatasetType.Train: 1&gt;, detach:bool=True, denorm:bool=True, cpu:bool=True) -&gt; Collection[torch.Tensor] |      Get one batch from the data loader of `ds_type`. Optionally `detach` and `denorm`. |   |  one_item(self, item, detach:bool=False, denorm:bool=False, cpu:bool=False) |      Get `item` into a batch. Optionally `detach` and `denorm`. |   |  pre_transform = _db_pre_transform(self, train_tfm:List[Callable], valid_tfm:List[Callable]) |      Call `train_tfm` and `valid_tfm` after opening image, before converting from `PIL.Image` |   |  presize = _presize(self, size:int, val_xtra_size:int=32, scale:Tuple[float]=(0.08, 1.0), ratio:Tuple[float]=(0.75, 1.3333333333333333), interpolation:int=2) |      Resize images to `size` using `RandomResizedCrop`, passing along `kwargs` to train transform |   |  remove_tfm(self, tfm:Callable) -&gt; None |   |  sanity_check(self) |      Check the underlying data in the training set can be properly loaded. |   |  save(self, file:Union[pathlib.Path, str, _io.BufferedWriter, _io.BytesIO]=&#39;data_save.pkl&#39;) -&gt; None |      Save the `DataBunch` in `self.path/file`. `file` can be file-like (file or buffer) |   |  show_batch(self, rows:int=5, ds_type:fastai.basic_data.DatasetType=&lt;DatasetType.Train: 1&gt;, reverse:bool=False, **kwargs) -&gt; None |      Show a batch of data in `ds_type` on a few `rows`. |   |  ---------------------------------------------------------------------- |  Class methods defined here: |   |  create(train_ds:torch.utils.data.dataset.Dataset, valid_ds:torch.utils.data.dataset.Dataset, test_ds:Union[torch.utils.data.dataset.Dataset, NoneType]=None, path:Union[pathlib.Path, str]=&#39;.&#39;, bs:int=64, val_bs:int=None, num_workers:int=6, dl_tfms:Union[Collection[Callable], NoneType]=None, device:torch.device=None, collate_fn:Callable=&lt;function data_collate at 0x7f14501736a8&gt;, no_check:bool=False, **dl_kwargs) -&gt; &#39;DataBunch&#39; from builtins.type |      Create a `DataBunch` from `train_ds`, `valid_ds` and maybe `test_ds` with a batch size of `bs`. Passes `**dl_kwargs` to `DataLoader()` |   |  load_empty = _databunch_load_empty(path, fname:str=&#39;export.pkl&#39;) from builtins.type |      Load an empty `DataBunch` from the exported file in `path/fname` with optional `tfms`. |   |  ---------------------------------------------------------------------- |  Data descriptors defined here: |   |  __dict__ |      dictionary for instance variables (if defined) |   |  __weakref__ |      list of weak references to the object (if defined) |   |  batch_size |   |  dls |      Returns a list of all DeviceDataLoaders. If you need a specific DeviceDataLoader, access via the relevant property (`train_dl`, `valid_dl`, etc) as the index of DLs in this list is not guaranteed to remain constant. |   |  empty_val |   |  fix_ds |   |  is_empty |   |  loss_func |   |  single_ds |   |  test_ds |   |  train_ds |   |  valid_ds</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">help(ImageDataBunch.from_folder)</span><br></pre></td></tr></table></figure><pre><code>Help on method from_folder in module fastai.vision.data:from_folder(path:Union[pathlib.Path, str], train:Union[pathlib.Path, str]=&#39;train&#39;, valid:Union[pathlib.Path, str]=&#39;valid&#39;, test:Union[pathlib.Path, str, NoneType]=None, valid_pct=None, seed:int=None, classes:Collection=None, **kwargs:Any) -&gt; &#39;ImageDataBunch&#39; method of builtins.type instance    Create from imagenet style dataset in `path` with `train`,`valid`,`test` subfolders (or provide `valid_pct`).</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">help(ImageDataBunch.from_folder)</span><br></pre></td></tr></table></figure><pre><code>Help on method from_folder in module fastai.vision.data:from_folder(path:Union[pathlib.Path, str], train:Union[pathlib.Path, str]=&#39;train&#39;, valid:Union[pathlib.Path, str]=&#39;valid&#39;, test:Union[pathlib.Path, str, NoneType]=None, valid_pct=None, seed:int=None, classes:Collection=None, **kwargs:Any) -&gt; &#39;ImageDataBunch&#39; method of builtins.type instance    Create from imagenet style dataset in `path` with `train`,`valid`,`test` subfolders (or provide `valid_pct`).</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(<span class="number">7</span>)</span><br><span class="line">data = ImageDataBunch.from_folder(path,train = <span class="string">"."</span>, valid_pct = <span class="number">0.2</span>, size = <span class="number">224</span>, ds_tfms=get_transforms()).normalize(imagenet_stats)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.show_batch(rows = <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p><img src="output_16_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.classes,data.c, len(data.train_ds), len(data.valid_ds)</span><br></pre></td></tr></table></figure><pre><code>([&#39;akita&#39;, &#39;alaska&#39;, &#39;husky&#39;, &#39;shibaInu&#39;], 4, 512, 128)</code></pre><h2 id="Models"><a href="#Models" class="headerlink" title="Models"></a>Models</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">learn = cnn_learner(data,models.resnet34, metrics = error_rate)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">learn.fit_one_cycle(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><table border="1" class="dataframe">  <thead>    <tr style="text-align: left;">      <th>epoch</th>      <th>train_loss</th>      <th>valid_loss</th>      <th>error_rate</th>      <th>time</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>1.609119</td>      <td>0.857839</td>      <td>0.328125</td>      <td>00:05</td>    </tr>    <tr>      <td>1</td>      <td>1.124259</td>      <td>0.611583</td>      <td>0.250000</td>      <td>00:05</td>    </tr>    <tr>      <td>2</td>      <td>0.894434</td>      <td>0.618738</td>      <td>0.218750</td>      <td>00:05</td>    </tr>    <tr>      <td>3</td>      <td>0.738053</td>      <td>0.625707</td>      <td>0.242188</td>      <td>00:05</td>    </tr>  </tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lean.load(<span class="string">"stage-1"</span>)</span><br></pre></td></tr></table></figure><pre><code>Learner(data=ImageDataBunch;Train: LabelList (512 items)x: ImageListImage (3, 224, 224),Image (3, 224, 224),Image (3, 224, 224),Image (3, 224, 224),Image (3, 224, 224)y: CategoryListshibaInu,shibaInu,shibaInu,shibaInu,shibaInuPath: data/dogs;Valid: LabelList (128 items)x: ImageListImage (3, 224, 224),Image (3, 224, 224),Image (3, 224, 224),Image (3, 224, 224),Image (3, 224, 224)y: CategoryListshibaInu,alaska,akita,shibaInu,huskyPath: data/dogs;Test: None, model=Sequential(  (0): Sequential(    (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    (2): ReLU(inplace)    (3): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)    (4): Sequential(      (0): BasicBlock(        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (relu): ReLU(inplace)        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      )      (1): BasicBlock(        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (relu): ReLU(inplace)        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      )      (2): BasicBlock(        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (relu): ReLU(inplace)        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      )    )    (5): Sequential(      (0): BasicBlock(        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (relu): ReLU(inplace)        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (downsample): Sequential(          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        )      )      (1): BasicBlock(        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (relu): ReLU(inplace)        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      )      (2): BasicBlock(        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (relu): ReLU(inplace)        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      )      (3): BasicBlock(        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (relu): ReLU(inplace)        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      )    )    (6): Sequential(      (0): BasicBlock(        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (relu): ReLU(inplace)        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (downsample): Sequential(          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        )      )      (1): BasicBlock(        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (relu): ReLU(inplace)        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      )      (2): BasicBlock(        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (relu): ReLU(inplace)        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      )      (3): BasicBlock(        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (relu): ReLU(inplace)        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      )      (4): BasicBlock(        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (relu): ReLU(inplace)        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      )      (5): BasicBlock(        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (relu): ReLU(inplace)        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      )    )    (7): Sequential(      (0): BasicBlock(        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (relu): ReLU(inplace)        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (downsample): Sequential(          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        )      )      (1): BasicBlock(        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (relu): ReLU(inplace)        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      )      (2): BasicBlock(        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (relu): ReLU(inplace)        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      )    )  )  (1): Sequential(    (0): AdaptiveConcatPool2d(      (ap): AdaptiveAvgPool2d(output_size=1)      (mp): AdaptiveMaxPool2d(output_size=1)    )    (1): Flatten()    (2): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    (3): Dropout(p=0.25)    (4): Linear(in_features=1024, out_features=512, bias=True)    (5): ReLU(inplace)    (6): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    (7): Dropout(p=0.5)    (8): Linear(in_features=512, out_features=4, bias=True)  )), opt_func=functools.partial(&lt;class &#39;torch.optim.adam.Adam&#39;&gt;, betas=(0.9, 0.99)), loss_func=FlattenedLoss of CrossEntropyLoss(), metrics=[&lt;function error_rate at 0x7f144e518e18&gt;], true_wd=True, bn_wd=True, wd=0.01, train_bn=True, path=PosixPath(&#39;data/dogs&#39;), model_dir=&#39;models&#39;, callback_fns=[functools.partial(&lt;class &#39;fastai.basic_train.Recorder&#39;&gt;, add_time=True, silent=False)], callbacks=[], layer_groups=[Sequential(  (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (2): ReLU(inplace)  (3): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)  (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)  (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (6): ReLU(inplace)  (7): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)  (8): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (9): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)  (10): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (11): ReLU(inplace)  (12): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)  (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (14): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)  (15): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (16): ReLU(inplace)  (17): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)  (18): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (19): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)  (20): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (21): ReLU(inplace)  (22): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)  (23): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (24): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)  (25): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (26): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)  (27): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (28): ReLU(inplace)  (29): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)  (30): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (31): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)  (32): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (33): ReLU(inplace)  (34): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)  (35): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (36): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)  (37): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (38): ReLU(inplace)  (39): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)  (40): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)), Sequential(  (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)  (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (2): ReLU(inplace)  (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)  (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (5): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)  (6): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (7): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)  (8): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (9): ReLU(inplace)  (10): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)  (11): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)  (13): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (14): ReLU(inplace)  (15): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)  (16): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (17): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)  (18): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (19): ReLU(inplace)  (20): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)  (21): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (22): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)  (23): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (24): ReLU(inplace)  (25): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)  (26): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (27): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)  (28): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (29): ReLU(inplace)  (30): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)  (31): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (32): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)  (33): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (34): ReLU(inplace)  (35): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)  (36): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (37): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)  (38): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (39): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)  (40): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (41): ReLU(inplace)  (42): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)  (43): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (44): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)  (45): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (46): ReLU(inplace)  (47): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)  (48): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)), Sequential(  (0): AdaptiveAvgPool2d(output_size=1)  (1): AdaptiveMaxPool2d(output_size=1)  (2): Flatten()  (3): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (4): Dropout(p=0.25)  (5): Linear(in_features=1024, out_features=512, bias=True)  (6): ReLU(inplace)  (7): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (8): Dropout(p=0.5)  (9): Linear(in_features=512, out_features=4, bias=True))], add_time=True, silent=False)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lean.unfreeze()</span><br><span class="line">lean.lr_find()</span><br></pre></td></tr></table></figure><pre><code>LR Finder is complete, type {learner_name}.recorder.plot() to see the graph.</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lean.recorder.plot()</span><br></pre></td></tr></table></figure><p><img src="output_23_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lean.fit_one_cycle(<span class="number">4</span>,max_lr=slice(<span class="number">1e-4</span>,<span class="number">3e-3</span>))</span><br></pre></td></tr></table></figure><table border="1" class="dataframe">  <thead>    <tr style="text-align: left;">      <th>epoch</th>      <th>train_loss</th>      <th>valid_loss</th>      <th>error_rate</th>      <th>time</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>0.676978</td>      <td>0.840263</td>      <td>0.406250</td>      <td>00:06</td>    </tr>    <tr>      <td>1</td>      <td>0.629555</td>      <td>0.816797</td>      <td>0.437500</td>      <td>00:06</td>    </tr>    <tr>      <td>2</td>      <td>0.582286</td>      <td>0.740251</td>      <td>0.335938</td>      <td>00:06</td>    </tr>    <tr>      <td>3</td>      <td>0.535621</td>      <td>0.722407</td>      <td>0.289062</td>      <td>00:06</td>    </tr>  </tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">learn.save(<span class="string">'stage-2'</span>)</span><br></pre></td></tr></table></figure><h2 id="Intepretation"><a href="#Intepretation" class="headerlink" title="Intepretation"></a>Intepretation</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">interp = ClassificationInterpretation.from_learner(lean)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">interp.plot_confusion_matrix()</span><br></pre></td></tr></table></figure><p><img src="output_28_0.png" alt="png"></p><h2 id="Cleaning-Up"><a href="#Cleaning-Up" class="headerlink" title="Cleaning Up"></a>Cleaning Up</h2><p>Some of our top losses aren’t due to bad performance by our model. There are images in our data set that shouldn’t be.</p><p>Using the <code>ImageCleaner</code> widget from <code>fastai.widgets</code> we can prune our top losses, removing photos that don’t belong.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fastai.widgets <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><p>First we need to get the file paths from our top_losses. We can do this with <code>.from_toplosses</code>. We then feed the top losses indexes and corresponding dataset to <code>ImageCleaner</code>.</p><p>Notice that the widget will not delete images directly from disk but it will create a new csv file <code>cleaned.csv</code> from where you can create a new ImageDataBunch with the corrected labels to continue training your model.</p><p>In order to clean the entire set of images, we need to create a new dataset without the split. The video lecture demostrated the use of the <code>ds_type</code> param which no longer has any effect. See <a href="https://forums.fast.ai/t/duplicate-widget/30975/10" target="_blank" rel="noopener">the thread</a> for more details.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db = (ImageList.from_folder(path)</span><br><span class="line">                   .split_none()</span><br><span class="line">                   .label_from_folder()</span><br><span class="line">                   .transform(get_transforms(), size=<span class="number">224</span>)</span><br><span class="line">                   .databunch()</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">learn_cln = cnn_learner(db, models.resnet34, metrics=error_rate)</span><br><span class="line">learn_cln.load(<span class="string">'stage-2'</span>);</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ds, idxs = DatasetFormatter().from_toplosses(learn_cln)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ImageCleaner(ds, idxs, path)</span><br></pre></td></tr></table></figure><pre><code>&#39;No images to show :)&#39;</code></pre><p>You can also find duplicates in your dataset and delete them! To do this, you need to run <code>.from_similars</code> to get the potential duplicates’ ids and then run <code>ImageCleaner</code> with <code>duplicates=True</code>. The API works in a similar way as with misclassified images: just choose the ones you want to delete and click ‘Next Batch’ until there are no more images left.</p><p>Make sure to recreate the databunch and <code>learn_cln</code> from the <code>cleaned.csv</code> file. Otherwise the file would be overwritten from scratch, losing all the results from cleaning the data from toplosses.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">doc(ImageDataBunch.from_csv)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data_cleand = ImageDataBunch.from_csv(path,csv_labels = <span class="string">"cleaned.csv"</span>,ds_tfms=get_transforms(),valid_pct = <span class="number">0.2</span>, size = <span class="number">224</span>, bs = <span class="number">32</span>).normalize()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data_cleand.show_batch(rows=<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p><img src="output_39_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">final_learn = cnn_learner(data_cleand, models.resnet50, metrics = error_rate)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">final_learn.fit_one_cycle(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><table border="1" class="dataframe">  <thead>    <tr style="text-align: left;">      <th>epoch</th>      <th>train_loss</th>      <th>valid_loss</th>      <th>error_rate</th>      <th>time</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>1.187646</td>      <td>0.361647</td>      <td>0.114943</td>      <td>00:07</td>    </tr>    <tr>      <td>1</td>      <td>0.830483</td>      <td>0.527104</td>      <td>0.149425</td>      <td>00:06</td>    </tr>    <tr>      <td>2</td>      <td>0.620431</td>      <td>0.356172</td>      <td>0.126437</td>      <td>00:06</td>    </tr>    <tr>      <td>3</td>      <td>0.493722</td>      <td>0.324358</td>      <td>0.114943</td>      <td>00:06</td>    </tr>    <tr>      <td>4</td>      <td>0.417320</td>      <td>0.308305</td>      <td>0.103448</td>      <td>00:06</td>    </tr>  </tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">final_learn.save(<span class="string">"stage-1"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># final_learn.unfreeze()</span></span><br><span class="line">final_learn.lr_find()</span><br></pre></td></tr></table></figure><pre><code>LR Finder is complete, type {learner_name}.recorder.plot() to see the graph.</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">final_learn.recorder.plot()</span><br></pre></td></tr></table></figure><p><img src="output_44_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">final_learn.fit_one_cycle(<span class="number">1</span>, max_lr=slice(<span class="number">1e-3</span>,<span class="number">3e-3</span>))</span><br></pre></td></tr></table></figure><table border="1" class="dataframe">  <thead>    <tr style="text-align: left;">      <th>epoch</th>      <th>train_loss</th>      <th>valid_loss</th>      <th>error_rate</th>      <th>time</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>0.218457</td>      <td>0.279203</td>      <td>0.080460</td>      <td>00:06</td>    </tr>  </tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">final_learn.save(<span class="string">"stage-final"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">interp = ClassificationInterpretation.from_learner(final_learn)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">interp.plot_confusion_matrix()</span><br></pre></td></tr></table></figure><p><img src="output_48_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">interp.plot_top_losses(<span class="number">9</span>, figsize=(<span class="number">15</span>,<span class="number">11</span>))</span><br></pre></td></tr></table></figure><p><img src="output_49_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">final_learn.export()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults.device = torch.device(<span class="string">'cpu'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">img = open_image(path/<span class="string">'akita'</span>/<span class="string">'00000100.jpg'</span>)</span><br><span class="line">img</span><br></pre></td></tr></table></figure><p><img src="output_53_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">serving_model = load_learner(path)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pred_class,pred_idx,outputs = learn.predict(img)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pred_class</span><br></pre></td></tr></table></figure><pre><code>Category akita</code></pre><h2 id="Model-Serving"><a href="#Model-Serving" class="headerlink" title="Model Serving"></a>Model Serving</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> starlette.applications <span class="keyword">import</span> Starlette</span><br><span class="line"><span class="keyword">from</span> starlette.responses <span class="keyword">import</span> JSONResponse</span><br><span class="line"><span class="comment"># from starlette.routing import Route</span></span><br><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> fastai</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastai.vision <span class="keyword">import</span> *</span><br><span class="line">defaults.device = torch.device(<span class="string">'cpu'</span>)</span><br><span class="line">learner = load_learner(<span class="string">"."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Starlette(debug=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get_bytes</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> response:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">await</span> response.read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/", methods=["GET"])</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">homepage</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> JSONResponse(&#123;<span class="string">'hello'</span>: <span class="string">'world'</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/classify-url", methods=["GET"])</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">classify_url</span><span class="params">(request)</span>:</span></span><br><span class="line">    bytes = <span class="keyword">await</span> get_bytes(request.query_params[<span class="string">"url"</span>])</span><br><span class="line">    img = open_image(BytesIO(bytes))</span><br><span class="line">    pred_class,pred_idx,outputs = learner.predict(img)</span><br><span class="line">    <span class="keyword">return</span> JSONResponse(&#123;</span><br><span class="line">        <span class="string">"predictions"</span>:  str(pred_class)&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    uvicorn.run(app, host=<span class="string">"0.0.0.0"</span>, port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      I want to make a classifier to classify the akita and shiba inu, alaska and husky.
    
    </summary>
    
    
      <category term="Artificial Intelligence" scheme="https://zhangruochi.com/categories/Artificial-Intelligence/"/>
    
      <category term="Deep Learning" scheme="https://zhangruochi.com/categories/Artificial-Intelligence/Deep-Learning/"/>
    
    
      <category term="Project" scheme="https://zhangruochi.com/tags/Project/"/>
    
      <category term="Computer Vision" scheme="https://zhangruochi.com/tags/Computer-Vision/"/>
    
  </entry>
  
  <entry>
    <title>ELMo,OpenAI GPT,BERT</title>
    <link href="https://zhangruochi.com/ELMo-OpenAI-GPT-BERT/2019/12/21/"/>
    <id>https://zhangruochi.com/ELMo-OpenAI-GPT-BERT/2019/12/21/</id>
    <published>2019-12-22T03:31:19.000Z</published>
    <updated>2020-01-23T19:06:41.541Z</updated>
    
    <content type="html"><![CDATA[<h2 id="The-problems-of-RNN"><a href="#The-problems-of-RNN" class="headerlink" title="The problems of RNN"></a>The problems of RNN</h2><ol><li>Sequential computation inhibit parallelization</li><li>No explicit modeling of long and short range</li><li>We want to model hierarchy (RNNs seem wasteful)</li></ol><h2 id="ELMo"><a href="#ELMo" class="headerlink" title="ELMo"></a>ELMo</h2><p>ELMo means <code>Embeddings from Language Models</code>. the original paper is from <a href="https://arxiv.org/abs/1802.05365" target="_blank" rel="noopener">https://arxiv.org/abs/1802.05365</a></p><ol><li>Breakout version of word token vectors or contextual word vectors</li><li>Learn word token vectors using long contexts not context windows (here, whole sentence, could be longer)</li><li>Learn a deep Bi-NLM and use all its layers in prediction</li></ol><h3 id="What’s-ELMo’s-secret"><a href="#What’s-ELMo’s-secret" class="headerlink" title="What’s ELMo’s secret?"></a>What’s ELMo’s secret?</h3><p>ELMo gained its language understanding from being trained to predict the next word in a sequence of words - a task called <code>Language Modeling</code>. This is convenient because we have vast amounts of text data that such a model can learn from without needing labels.</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="elmo2.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">char cnn embedding from ELMo</div></center><p>A step in the pre-training process of ELMo: Given “Let’s stick to” as input, predict the next most likely word – a language modeling task. When trained on a large dataset, the model starts to pick up on language patterns. It’s unlikely it’ll accurately guess the next word in this example. More realistically, after a word such as “hang”, it will assign a higher probability to a word like “out” (to spell “hang out”) than to “camera”.</p><h3 id="bilstm-LM"><a href="#bilstm-LM" class="headerlink" title="bilstm LM"></a>bilstm LM</h3><p>ELMo actually goes a step further and trains a bi-directional LSTM – so that its language model doesn’t only have a sense of the next word, but also the previous word.</p><ol><li>前向LSTM结构:<script type="math/tex; mode=display">p(t_1,t_2,...,t_N) = \prod^N_{k=1}p(t_k|t_1,t_2,...,t_{k-1})</script></li><li>反向LSTM结构:<script type="math/tex; mode=display">p(t_1,t_2,...,t_N) = \prod^N_{k=1}p(t_k|t_{k+1},t_{k+2},...,t_{N})</script></li><li>最大似然函数:<script type="math/tex; mode=display">\sum_{k=1}^N(logp(t_k|t_1,t_2,...,t_{k-1}) + logp(t_k|t_{k+1},t_{k+2},...,t_{N}))</script></li><li>线性组合公式：<script type="math/tex; mode=display">\textrm{ELMo}_k^{task} = E(R_k;\Theta^{task}) = \gamma^{task}\sum_{j=0}^L s_j^{task}h_{k,j}^{LM} \tag{1}</script></li></ol><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="elmo.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">bilstm from ELMo</div></center><h3 id="Char-cnn-embedding"><a href="#Char-cnn-embedding" class="headerlink" title="Char cnn embedding"></a>Char cnn embedding</h3><p>The input of elmo is char embedding, see the details from <a href="https://zhangruochi.com/Subword-Models/2019/12/19/">https://zhangruochi.com/Subword-Models/2019/12/19/</a></p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="char_cnn.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">char cnn embedding from ELMo</div></center><h2 id="How-to-use-ELMo-when-after-pre-training"><a href="#How-to-use-ELMo-when-after-pre-training" class="headerlink" title="How to use ELMo when after pre-training"></a>How to use ELMo when after pre-training</h2><p>We can feed our input data to the pre-trained ELMo and get the representation of <code>dynamic word vectors</code>. And then we use them to our specific tasks.</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="elmo3.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">ELMo used in a sequence tagger</div></center><h2 id="OpenAI-Transformer-Pre-training-a-Transformer-Decoder-for-Language-Modeling"><a href="#OpenAI-Transformer-Pre-training-a-Transformer-Decoder-for-Language-Modeling" class="headerlink" title="OpenAI Transformer: Pre-training a Transformer Decoder for Language Modeling"></a>OpenAI Transformer: Pre-training a Transformer Decoder for Language Modeling</h2><p>It turns out we don’t need an entire Transformer to adopt transfer learning and a fine-tunable language model for NLP tasks. We can do with just the decoder of the transformer. The decoder is a good choice because it’s a natural choice for language modeling (predicting the next word) since it’s built to <code>mask future tokens</code> – a valuable feature when it’s generating a translation word by word.</p><p>The model stacked twelve decoder layers. Since there is no encoder in this set up, these decoder layers would not have the encoder-decoder attention sublayer that vanilla transformer decoder layers have. It would still have the self-attention layer, however (masked so it doesn’t peak at future tokens).</p><p>With this structure, we can proceed to train the model on the same language modeling task: predict the next word using massive (unlabeled) datasets. Just, throw the text of 7,000 books at it and have it learn! Books are great for this sort of task since it allows the model to learn to associate related information even if they’re separated by a lot of text – something you don’t get for example, when you’re training with tweets, or articles.</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="openai.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;"></div></center><script type="math/tex; mode=display">\begin{split}h_0 & =UW_e+W_p \\h_l & = transformer\_block(h_{l-1}) \\P(u) & = softmax(h_n W_e^T)\end{split}</script><p>$W_e$ is the embedding matrix, $W_p$ is the positional embedding matrix(Note that it is different with classicial transformer)</p><h3 id="Fine-Tuning-with-OpenAI"><a href="#Fine-Tuning-with-OpenAI" class="headerlink" title="Fine-Tuning with OpenAI"></a>Fine-Tuning with OpenAI</h3><p>Now that the OpenAI transformer is pre-trained and its layers have been tuned to reasonably handle language, we can start using it for downstream tasks. Let’s first look at sentence classification (classify an email message as “spam” or “not spam”):</p><p>If our input sequence is $x_1,\cdots,x_m$, and the label is y. We can add a <code>softmax layer</code> to do classification and use the cross entrophy to calculate the loss.</p><script type="math/tex; mode=display">L_2(\mathcal{C})=\sum{x,y}logP(y|x^1,...,x^m)</script><p>In general, we should update the parameters to minimize the $L_2$, but we can use <code>Multi-task Learning</code> to get a more generalize model. Therefore we can get the max likelihood of $L3$</p><script type="math/tex; mode=display">L_3(\mathcal{C})=L_2(\mathcal{C})+\lambda \times L_1(\mathcal{C})</script><p>$L_1$ if the loss of previous language model.</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="openai2.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">How to use a pre-trained OpenAI transformer to do sentence clasification</div></center><p>The OpenAI paper outlines a number of input transformations to handle the inputs for different types of tasks. The following image from the paper shows the structures of the models and input transformations to carry out different tasks.</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="openai3.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">How to use a pre-trained OpenAI transformer to do different tasks</div></center><h2 id="BERT-From-Decoders-to-Encoders"><a href="#BERT-From-Decoders-to-Encoders" class="headerlink" title="BERT: From Decoders to Encoders"></a>BERT: From Decoders to Encoders</h2><p>The openAI transformer gave us a fine-tunable pre-trained model based on the Transformer. But something went missing in this transition from LSTMs to Transformers. ELMo’s language model was bi-directional, but the openAI transformer only trains a forward language model. Could we build a transformer-based model whose language model looks both forward and backwards (in the technical jargon – “is conditioned on both left and right context”)?</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>The input representation of BERT is shown in the figure below. For example, the two sentences “my dog ​​is cute” and “he likes playing” are entered. I’ll explain why two sentences are needed later. Here, the two sentences similar to GPT are used. First, a special Token <code>[CLS]</code> is added at the beginning of the first sentence, and a <code>[SEP]</code> is added after the cute to indicate the end of the first sentence. After ##ing, A <code>[SEP]</code> will be added later. Note that the word segmentation here will divide “playing” into “play” and “##ing” two tokens. This method of dividing words into more fine-grained Word Pieces was introduced in the previous machine translation section. This is a kind of Common methods to resolve unregistered words. Then perform 3 Embeddings on each Token: </p><ol><li>Embedding of words;</li><li>Embedding of positions; </li><li>Embedding of segments. </li></ol><p>The word Embedding is familiar to everyone, and the position Embedding is similar to the word embedding, mapping a position (such as 2) into a low-dimensional dense vector. And Segment embedding has only two, either belong to the first sentence (segment) or belong to the second sentence. Segment Embedding of the same sentence is shared so that it can learn information belonging to different segments. For tasks such as sentiment classification, there is only one sentence, so the Segment id is always 0; for the Entailment task, the input is two sentences, so the Segment is 0 or 1.</p><p>The BERT model requires a fixed sequence length, such as 128. If it is not enough, then padding in the back, otherwise it will intercept the excess Token, so as to ensure that the input is a fixed-length Token sequence. The first token is always special <code>[CLS]</code>. It does not have any semantics, so it will (must) encode the semantics of the entire sentence (other words).</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="bert.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Input of Bert/div></div></center><h3 id="Masked-Language-Model"><a href="#Masked-Language-Model" class="headerlink" title="Masked Language Model"></a>Masked Language Model</h3><p>Finding the right task to train a Transformer stack of encoders is a complex hurdle that BERT resolves by adopting a <code>masked language model</code> concept from earlier literature (where it’s called a Cloze task).</p><p>Beyond masking 15% of the input, BERT also mixes things a bit in order to improve how the model later fine-tunes. Sometimes it randomly replaces a word with another word and asks the model to predict the correct word in that position.</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="bert2.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">masked language model</div></center><h3 id="Two-sentence-Tasks"><a href="#Two-sentence-Tasks" class="headerlink" title="Two-sentence Tasks"></a>Two-sentence Tasks</h3><p>If you look back up at the input transformations the OpenAI transformer does to handle different tasks, you’ll notice that some tasks require the model to say something intelligent about two sentences (e.g. are they simply paraphrased versions of each other? Given a wikipedia entry as input, and a question regarding that entry as another input, can we answer that question?).</p><p>To make BERT better at handling relationships between multiple sentences, the pre-training process includes an additional task: Given two sentences (A and B), is B likely to be the sentence that follows A, or not?</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="bert3.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">The second task BERT is pre-trained on is a two-sentence classification task.</div></center><h3 id="Task-specific-Models"><a href="#Task-specific-Models" class="headerlink" title="Task specific-Models"></a>Task specific-Models</h3><p>The BERT paper shows a number of ways to use BERT for different tasks.</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="bert4.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">different ways to use BERT</div></center><ol><li>For common classification tasks, the input is a sequence, as shown in the upper right of the figure. All tokens belong to the same Segment (Id = 0). We use the last layer of the first special token <code>[CLS]</code> to connect it. Softmax is used for classification, and classified data is used for Fine-Tuning.</li><li>For tasks such as similarity calculation that are input as two sequences, the process is shown in the upper left. The tokens of the two sequences correspond to different segments (Id = 0/1). We also use the last layer output of the first special token [CLS] to connect with softmax for classification, and then use the classification data for Fine-Tuning.</li><li>The third type is a question-and-answer type question, such as the SQuAD v1.1 dataset. The input is a question and a long paragraph containing the answer (Paragraph), and the output finds the answer to the question in this paragraph.</li><li>The forth type of task is sequence labeling, such as named entity recognition. The input is a sentence (Token sequence). Except for [CLS] and [SEP], there will be output tags at each moment. For example, B-PER indicates the beginning of a person’s name. </li></ol><h3 id="BERT-for-feature-extraction"><a href="#BERT-for-feature-extraction" class="headerlink" title="BERT for feature extraction"></a>BERT for feature extraction</h3><p>The fine-tuning approach isn’t the only way to use BERT. Just like ELMo, you can use the pre-trained BERT to create contextualized word embeddings. Then you can feed these embeddings to your existing model – a process the paper shows yield results not far behind fine-tuning BERT on a task such as named-entity recognition.</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="bert5.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Feature extraction</div></center><p>Which vector works best as a contextualized embedding? I would think it depends on the task. The paper examines six choices (Compared to the fine-tuned model which achieved a score of 96.4):</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="bert6.png" width="70%" height="70%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Feature extraction</div></center><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol><li><a href="http://fancyerii.github.io/2019/03/09/bert-theory/#词汇扩展" target="_blank" rel="noopener">http://fancyerii.github.io/2019/03/09/bert-theory/#词汇扩展</a></li><li><a href="https://zhuanlan.zhihu.com/p/63115885" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/63115885</a></li><li><a href="http://jalammar.github.io/illustrated-bert/" target="_blank" rel="noopener">http://jalammar.github.io/illustrated-bert/</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;The-problems-of-RNN&quot;&gt;&lt;a href=&quot;#The-problems-of-RNN&quot; class=&quot;headerlink&quot; title=&quot;The problems of RNN&quot;&gt;&lt;/a&gt;The problems of RNN&lt;/h2&gt;&lt;ol&gt;

      
    
    </summary>
    
    
      <category term="Artificial Intelligence" scheme="https://zhangruochi.com/categories/Artificial-Intelligence/"/>
    
      <category term="Deep Learning" scheme="https://zhangruochi.com/categories/Artificial-Intelligence/Deep-Learning/"/>
    
    
      <category term="cs224n" scheme="https://zhangruochi.com/tags/cs224n/"/>
    
      <category term="NLP" scheme="https://zhangruochi.com/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>Transformer</title>
    <link href="https://zhangruochi.com/Transformer/2019/12/20/"/>
    <id>https://zhangruochi.com/Transformer/2019/12/20/</id>
    <published>2019-12-20T17:24:40.000Z</published>
    <updated>2019-12-21T18:20:04.625Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU, ByteNet and ConvS2S, all of which use convolutional neural networks as basic building block, computing hidden representations in parallel for all input and output positions. In these models, the number of operations required to relate signals from two arbitrary input or output positions grows in the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. This makes it more difficult to learn dependencies between distant positions. In the Transformer this is reduced to a constant number of operations, albeit at the cost of reduced effective resolution due to averaging attention-weighted positions, an effect we counteract with Multi-Head Attention.</p><p>Self-attention, sometimes called intra-attention is an attention mechanism relating different positions of a single sequence in order to compute a representation of the sequence. Self-attention has been used successfully in a variety of tasks including reading comprehension, abstractive summarization, textual entailment and learning task-independent sentence representations. End-to-end memory networks are based on a recurrent attention mechanism instead of sequencealigned recurrence and have been shown to perform well on simple-language question answering and<br>language modeling tasks.</p><p>To the best of our knowledge, however, the Transformer is the first transduction model relying entirely on self-attention to compute representations of its input and output without using sequence aligned RNNs or convolution. </p><h2 id="Embeddings-and-Softmax"><a href="#Embeddings-and-Softmax" class="headerlink" title="Embeddings and Softmax"></a>Embeddings and Softmax</h2><p>Similarly to other sequence transduction models, we use learned embeddings to convert the input tokens and output tokens to vectors of dimension $d_{\text{model}}$.  We also use the usual learned linear transformation and softmax function to convert the decoder output to predicted next-token probabilities.  In our model, we share the same weight matrix between the two embedding layers and the pre-softmax linear transformation, similar to <a href="https://arxiv.org/abs/1608.05859" target="_blank" rel="noopener">(cite)</a>. In the embedding layers, we multiply those weights by $\sqrt{d_{\text{model}}}$.           </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Embeddings</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, d_model, vocab)</span>:</span></span><br><span class="line">        super(Embeddings, self).__init__()</span><br><span class="line">        self.lut = nn.Embedding(vocab, d_model)</span><br><span class="line">        self.d_model = d_model</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.lut(x) * math.sqrt(self.d_model)</span><br></pre></td></tr></table></figure><h2 id="Positional-Encoding"><a href="#Positional-Encoding" class="headerlink" title="Positional Encoding"></a>Positional Encoding</h2><p>Since our model contains no recurrence and no convolution, <strong>in order for the model to make use of the order of the sequence</strong>, we must inject some information about the relative or absolute position of the tokens in the sequence.  To this end, we add “positional encodings” to the input embeddings at the bottoms of the encoder and decoder stacks.  The positional encodings have the same dimension $d_{\text{model}}$ as the embeddings, so that the two can be summed.   There are many choices of positional encodings, learned and fixed <a href="https://arxiv.org/pdf/1705.03122.pdf" target="_blank" rel="noopener">(cite)</a>. </p><p>In this work, we use sine and cosine functions of different frequencies:    </p><script type="math/tex; mode=display">PE_{(pos,2i)} = sin(pos / 10000^{2i/d_{\text{model}}})</script><script type="math/tex; mode=display">PE_{(pos,2i+1)} = cos(pos / 10000^{2i/d_{\text{model}}})</script><p>where $pos$ is the position and $i$ is the dimension.  That is, each dimension of the positional encoding corresponds to a sinusoid.  The wavelengths form a geometric progression from $2\pi$ to $10000 \cdot 2\pi$.  We chose this function because we hypothesized it would allow the model to easily learn to attend by relative positions, since for any fixed offset $k$, $PE_{pos+k}$ can be represented as a linear function of $PE_{pos}$. </p><p>In addition, we apply dropout to the sums of the embeddings and the positional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of $P_{drop}=0.1$. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PositionalEncoding</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="string">"Implement the PE function."</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, d_model, dropout, max_len=<span class="number">5000</span>)</span>:</span></span><br><span class="line">        super(PositionalEncoding, self).__init__()</span><br><span class="line">        self.dropout = nn.Dropout(p=dropout)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Compute the positional encodings once in log space.</span></span><br><span class="line">        pe = torch.zeros(max_len, d_model)</span><br><span class="line">        position = torch.arange(<span class="number">0</span>, max_len).unsqueeze(<span class="number">1</span>)</span><br><span class="line">        div_term = torch.exp(torch.arange(<span class="number">0</span>, d_model, <span class="number">2</span>) *</span><br><span class="line">                             -(math.log(<span class="number">10000.0</span>) / d_model))</span><br><span class="line">        pe[:, <span class="number">0</span>::<span class="number">2</span>] = torch.sin(position * div_term)</span><br><span class="line">        pe[:, <span class="number">1</span>::<span class="number">2</span>] = torch.cos(position * div_term)</span><br><span class="line">        pe = pe.unsqueeze(<span class="number">0</span>)</span><br><span class="line">        self.register_buffer(<span class="string">'pe'</span>, pe)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x = x + Variable(self.pe[:, :x.size(<span class="number">1</span>)], </span><br><span class="line">                         requires_grad=<span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">return</span> self.dropout(x)</span><br></pre></td></tr></table></figure><h2 id="Layer-Norm-and-residual-connection"><a href="#Layer-Norm-and-residual-connection" class="headerlink" title="Layer Norm and residual connection"></a>Layer Norm and residual connection</h2><p>We employ a residual connection <a href="https://arxiv.org/abs/1512.03385" target="_blank" rel="noopener">(cite)</a> around each of the two sub-layers, followed by layer normalization <a href="https://arxiv.org/abs/1607.06450" target="_blank" rel="noopener">(cite)</a>.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LayerNorm</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="string">"Construct a layernorm module (See citation for details)."</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, features, eps=<span class="number">1e-6</span>)</span>:</span></span><br><span class="line">        super(LayerNorm, self).__init__()</span><br><span class="line">        self.a_2 = nn.Parameter(torch.ones(features))</span><br><span class="line">        self.b_2 = nn.Parameter(torch.zeros(features))</span><br><span class="line">        self.eps = eps</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        mean = x.mean(<span class="number">-1</span>, keepdim=<span class="keyword">True</span>)</span><br><span class="line">        std = x.std(<span class="number">-1</span>, keepdim=<span class="keyword">True</span>)</span><br><span class="line">        <span class="keyword">return</span> self.a_2 * (x - mean) / (std + self.eps) + self.b_2</span><br></pre></td></tr></table></figure><p>That is, the output of each sub-layer is $\mathrm{LayerNorm}(x + \mathrm{Sublayer}(x))$, where $\mathrm{Sublayer}(x)$ is the function implemented by the sub-layer itself.  We apply dropout <a href="http://jmlr.org/papers/v15/srivastava14a.html" target="_blank" rel="noopener">(cite)</a> to the output of each sub-layer, before it is added to the sub-layer input and normalized.  </p><p>To facilitate these residual connections, all sub-layers in the model, as well as the embedding layers, produce outputs of dimension $d_{\text{model}}=512$.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SublayerConnection</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    A residual connection followed by a layer norm.</span></span><br><span class="line"><span class="string">    Note for code simplicity the norm is first as opposed to last.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, size, dropout)</span>:</span></span><br><span class="line">        super(SublayerConnection, self).__init__()</span><br><span class="line">        self.norm = LayerNorm(size)</span><br><span class="line">        self.dropout = nn.Dropout(dropout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x, sublayer)</span>:</span></span><br><span class="line">        <span class="string">"Apply residual connection to any sublayer with the same size."</span></span><br><span class="line">        <span class="keyword">return</span> x + self.dropout(sublayer(self.norm(x)))</span><br></pre></td></tr></table></figure><p>Each layer has two sub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, position-wise fully connected feed-forward network.</p><h2 id="Attention"><a href="#Attention" class="headerlink" title="Attention"></a>Attention</h2><h3 id="Scaled-Dot-Product-Attention"><a href="#Scaled-Dot-Product-Attention" class="headerlink" title="Scaled Dot-Product Attention"></a>Scaled Dot-Product Attention</h3><p>An attention function can be described as mapping a <code>query</code> and a set of <code>key</code>-<code>value</code> pairs to an output, where the query, keys, values, and output are all vectors.  The output is computed as a weighted sum of the values, where the weight assigned to each value is computed by a compatibility function of the query with the corresponding key.</p><p>We call our particular attention <code>Scaled Dot-Product Attention</code>.   The input consists of queries and keys of dimension $d_k$, and values of dimension $d_v$.  We compute the dot products of the query with all keys, divide each by $\sqrt{d_k}$, and apply a softmax function to obtain the weights on the values.</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="ModalNet-19.png" width="20%" height="20%"></center><p>In practice, we compute the attention function on a set of queries simultaneously, packed together into a matrix $Q$.   The keys and values are also packed together into matrices $K$ and $V$.  We compute the matrix of outputs as:                      </p><script type="math/tex; mode=display">\mathrm{Attention}(Q, K, V) = \mathrm{softmax}(\frac{QK^T}{\sqrt{d_k}})V</script><p>The two most commonly used attention functions are additive attention <a href="https://arxiv.org/abs/1409.0473" target="_blank" rel="noopener">(cite)</a>, and dot-product (multiplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor of $\frac{1}{\sqrt{d_k}}$. Additive attention computes the compatibility function using a feed-forward network with a single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is much faster and more space-efficient in practice, since it can be implemented using highly optimized matrix multiplication code.</p><p>While for small values of $d_k$ the two mechanisms perform similarly, additive attention outperforms dot product attention without scaling for larger values of $d_k$ <a href="https://arxiv.org/abs/1703.03906" target="_blank" rel="noopener">(cite)</a>. We suspect that for large values of $d_k$, the dot products grow large in magnitude, pushing the softmax function into regions where it has extremely small gradients  (To illustrate why the dot products get large, assume that the components of $q$ and $k$ are independent random variables with mean $0$ and variance $1$.  Then their dot product, $q \cdot k = \sum_{i=1}^{d_k} q_ik_i$, has mean $0$ and variance $d_k$.). To counteract this effect, we scale the dot products by $\frac{1}{\sqrt{d_k}}$.          </p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="attention.png" width="50%" height="50%"></center><h3 id="Multi-head-attention"><a href="#Multi-head-attention" class="headerlink" title="Multi-head attention"></a>Multi-head attention</h3><p>Multi-head attention allows the model to jointly attend to information from different representation subspaces at different positions. With a single attention head, averaging inhibits this.</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="ModalNet-20.png" width="50%" height="50%"></center><script type="math/tex; mode=display">\mathrm{MultiHead}(Q, K, V) = \mathrm{Concat}(\mathrm{head_1}, ..., \mathrm{head_h})W^O    \\                                               \text{where}~\mathrm{head_i} = \mathrm{Attention}(QW^Q_i, KW^K_i, VW^V_i)</script><p>Where the projections are parameter matrices $W^Q_i \in \mathbb{R}^{d_{\text{model}} \times d_k}$, $W^K_i \in \mathbb{R}^{d_{\text{model}} \times d_k}$, $W^V_i \in \mathbb{R}^{d_{\text{model}} \times d_v}$ and $W^O \in \mathbb{R}^{hd_v \times d_{\text{model}}}$.                                                                                                                                                                                            In this work we employ $h=8$ parallel attention layers, or heads. For each of these we use $d_k=d_v=d_{\text{model}}/h=64$. Due to the reduced dimension of each head, the total computational cost is similar to that of single-head attention with full dimensionality. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultiHeadedAttention</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, h, d_model, dropout=<span class="number">0.1</span>)</span>:</span></span><br><span class="line">        <span class="string">"Take in model size and number of heads."</span></span><br><span class="line">        super(MultiHeadedAttention, self).__init__()</span><br><span class="line">        <span class="keyword">assert</span> d_model % h == <span class="number">0</span></span><br><span class="line">        <span class="comment"># We assume d_v always equals d_k</span></span><br><span class="line">        self.d_k = d_model // h</span><br><span class="line">        self.h = h</span><br><span class="line">        self.linears = clones(nn.Linear(d_model, d_model), <span class="number">4</span>)</span><br><span class="line">        self.attn = <span class="keyword">None</span></span><br><span class="line">        self.dropout = nn.Dropout(p=dropout)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, query, key, value, mask=None)</span>:</span></span><br><span class="line">        <span class="string">"Implements Figure 2"</span></span><br><span class="line">        <span class="keyword">if</span> mask <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="comment"># Same mask applied to all h heads.</span></span><br><span class="line">            mask = mask.unsqueeze(<span class="number">1</span>)</span><br><span class="line">        nbatches = query.size(<span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 1) Do all the linear projections in batch from d_model =&gt; h x d_k </span></span><br><span class="line">        query, key, value = \</span><br><span class="line">            [l(x).view(nbatches, <span class="number">-1</span>, self.h, self.d_k).transpose(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">             <span class="keyword">for</span> l, x <span class="keyword">in</span> zip(self.linears, (query, key, value))]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 2) Apply attention on all the projected vectors in batch. </span></span><br><span class="line">        x, self.attn = attention(query, key, value, mask=mask, </span><br><span class="line">                                 dropout=self.dropout)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 3) "Concat" using a view and apply a final linear. </span></span><br><span class="line">        x = x.transpose(<span class="number">1</span>, <span class="number">2</span>).contiguous() \</span><br><span class="line">             .view(nbatches, <span class="number">-1</span>, self.h * self.d_k)</span><br><span class="line">        <span class="keyword">return</span> self.linears[<span class="number">-1</span>](x)</span><br></pre></td></tr></table></figure><h3 id="Applications-of-Attention-in-our-Model"><a href="#Applications-of-Attention-in-our-Model" class="headerlink" title="Applications of Attention in our Model"></a>Applications of Attention in our Model</h3><p>The Transformer uses multi-head attention in three different ways:                                                        </p><ol><li><p>In <strong>encoder-decoder attention</strong> layers, the queries come from the previous decoder layer, and the memory keys and values come from the <code>output of the encoder</code>.   This allows every position in the decoder to attend over all positions in the input sequence.  This mimics the typical encoder-decoder attention mechanisms in sequence-to-sequence models such as <a href="https://arxiv.org/abs/1609.08144" target="_blank" rel="noopener">(cite)</a>.    </p></li><li><p>The encoder contains self-attention layers.  In a self-attention layer all of the keys, values and queries come from the same place, in this case, the output of the previous layer in the encoder.   Each position in the encoder can attend to all positions in the previous layer of the encoder.                                                   </p></li><li>Similarly, self-attention layers in the decoder allow each position in the decoder to attend to all positions in the decoder up to and including that position.  We need to prevent leftward information flow in the decoder to preserve the auto-regressive property.  We implement this inside of scaled dot-product attention by masking out (setting to $-\infty$) all values in the input of the softmax which correspond to illegal connections. </li></ol><h2 id="Position-wise-Feed-Forward-Networks"><a href="#Position-wise-Feed-Forward-Networks" class="headerlink" title="Position-wise Feed-Forward Networks"></a>Position-wise Feed-Forward Networks</h2><p>In addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully connected feed-forward network, which is applied to each position separately and identically.  This consists of two linear transformations with a ReLU activation in between.</p><script type="math/tex; mode=display">\mathrm{FFN}(x)=\max(0, xW_1 + b_1) W_2 + b_2</script><p>While the linear transformations are the same across different positions, they use different parameters from layer to layer. Another way of describing this is as two convolutions with kernel size 1.  The dimensionality of input and output is $d_{\text{model}}=512$, and the inner-layer has dimensionality $d_{ff}=2048$. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PositionwiseFeedForward</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="string">"Implements FFN equation."</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, d_model, d_ff, dropout=<span class="number">0.1</span>)</span>:</span></span><br><span class="line">        super(PositionwiseFeedForward, self).__init__()</span><br><span class="line">        self.w_1 = nn.Linear(d_model, d_ff)</span><br><span class="line">        self.w_2 = nn.Linear(d_ff, d_model)</span><br><span class="line">        self.dropout = nn.Dropout(dropout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.w_2(self.dropout(F.relu(self.w_1(x))))</span><br></pre></td></tr></table></figure><h2 id="Model-Architecture"><a href="#Model-Architecture" class="headerlink" title="Model Architecture"></a>Model Architecture</h2><p>Most competitive neural sequence transduction models have an encoder-decoder structure <a href="https://arxiv.org/abs/1409.0473" target="_blank" rel="noopener">(cite)</a>. Here, the encoder maps an input sequence of symbol representations $(x_1, …, x_n)$ to a sequence of continuous representations $\mathbf{z} = (z_1, …, z_n)$. Given $\mathbf{z}$, the decoder then generates an output sequence $(y_1,…,y_m)$ of symbols one element at a time. At each step the model is auto-regressive <a href="https://arxiv.org/abs/1308.0850" target="_blank" rel="noopener">(cite)</a>, consuming the previously generated symbols as additional input when generating the next. </p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="ModalNet-21.png" width="50%" height="50%"></center><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EncoderDecoder</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    A standard Encoder-Decoder architecture. Base for this and many </span></span><br><span class="line"><span class="string">    other models.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, encoder, decoder, src_embed, tgt_embed, generator)</span>:</span></span><br><span class="line">        super(EncoderDecoder, self).__init__()</span><br><span class="line">        self.encoder = encoder</span><br><span class="line">        self.decoder = decoder</span><br><span class="line">        self.src_embed = src_embed</span><br><span class="line">        self.tgt_embed = tgt_embed</span><br><span class="line">        self.generator = generator</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, src, tgt, src_mask, tgt_mask)</span>:</span></span><br><span class="line">        <span class="string">"Take in and process masked src and target sequences."</span></span><br><span class="line">        <span class="keyword">return</span> self.decode(self.encode(src, src_mask), src_mask,</span><br><span class="line">                            tgt, tgt_mask)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encode</span><span class="params">(self, src, src_mask)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.encoder(self.src_embed(src), src_mask)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(self, memory, src_mask, tgt, tgt_mask)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.decoder(self.tgt_embed(tgt), memory, src_mask, tgt_mask)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Generator</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="string">"Define standard linear + softmax generation step."</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, d_model, vocab)</span>:</span></span><br><span class="line">        super(Generator, self).__init__()</span><br><span class="line">        self.proj = nn.Linear(d_model, vocab)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> F.log_softmax(self.proj(x), dim=<span class="number">-1</span>)</span><br></pre></td></tr></table></figure><h2 id="Encoder-and-Decoder-Stacks"><a href="#Encoder-and-Decoder-Stacks" class="headerlink" title="Encoder and Decoder Stacks"></a>Encoder and Decoder Stacks</h2><h3 id="Encoder"><a href="#Encoder" class="headerlink" title="Encoder"></a>Encoder</h3><p>The encoder is composed of a stack of $N=6$ identical layers. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clones</span><span class="params">(module, N)</span>:</span></span><br><span class="line">    <span class="string">"Produce N identical layers."</span></span><br><span class="line">    <span class="keyword">return</span> nn.ModuleList([copy.deepcopy(module) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Encoder</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="string">"Core encoder is a stack of N layers"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, layer, N)</span>:</span></span><br><span class="line">        super(Encoder, self).__init__()</span><br><span class="line">        self.layers = clones(layer, N)</span><br><span class="line">        self.norm = LayerNorm(layer.size)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x, mask)</span>:</span></span><br><span class="line">        <span class="string">"Pass the input (and mask) through each layer in turn."</span></span><br><span class="line">        <span class="keyword">for</span> layer <span class="keyword">in</span> self.layers:</span><br><span class="line">            x = layer(x, mask)</span><br><span class="line">        <span class="keyword">return</span> self.norm(x)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EncoderLayer</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="string">"Encoder is made up of self-attn and feed forward (defined below)"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, size, self_attn, feed_forward, dropout)</span>:</span></span><br><span class="line">        super(EncoderLayer, self).__init__()</span><br><span class="line">        self.self_attn = self_attn</span><br><span class="line">        self.feed_forward = feed_forward</span><br><span class="line">        self.sublayer = clones(SublayerConnection(size, dropout), <span class="number">2</span>)</span><br><span class="line">        self.size = size</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x, mask)</span>:</span></span><br><span class="line">        <span class="string">"Follow Figure 1 (left) for connections."</span></span><br><span class="line">        x = self.sublayer[<span class="number">0</span>](x, <span class="keyword">lambda</span> x: self.self_attn(x, x, x, mask))</span><br><span class="line">        <span class="keyword">return</span> self.sublayer[<span class="number">1</span>](x, self.feed_forward)</span><br></pre></td></tr></table></figure><h3 id="Decoder"><a href="#Decoder" class="headerlink" title="Decoder"></a>Decoder</h3><p>The decoder is also composed of a stack of $N=6$ identical layers.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decoder</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="string">"Generic N layer decoder with masking."</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, layer, N)</span>:</span></span><br><span class="line">        super(Decoder, self).__init__()</span><br><span class="line">        self.layers = clones(layer, N)</span><br><span class="line">        self.norm = LayerNorm(layer.size)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x, memory, src_mask, tgt_mask)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> layer <span class="keyword">in</span> self.layers:</span><br><span class="line">            x = layer(x, memory, src_mask, tgt_mask)</span><br><span class="line">        <span class="keyword">return</span> self.norm(x)</span><br></pre></td></tr></table></figure><p>In addition to the two sub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head attention over the output of the encoder stack.  Similar to the encoder, we employ residual connections around each of the sub-layers, followed by layer normalization.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecoderLayer</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="string">"Decoder is made of self-attn, src-attn, and feed forward (defined below)"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, size, self_attn, src_attn, feed_forward, dropout)</span>:</span></span><br><span class="line">        super(DecoderLayer, self).__init__()</span><br><span class="line">        self.size = size</span><br><span class="line">        self.self_attn = self_attn</span><br><span class="line">        self.src_attn = src_attn</span><br><span class="line">        self.feed_forward = feed_forward</span><br><span class="line">        self.sublayer = clones(SublayerConnection(size, dropout), <span class="number">3</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x, memory, src_mask, tgt_mask)</span>:</span></span><br><span class="line">        <span class="string">"Follow Figure 1 (right) for connections."</span></span><br><span class="line">        m = memory</span><br><span class="line">        x = self.sublayer[<span class="number">0</span>](x, <span class="keyword">lambda</span> x: self.self_attn(x, x, x, tgt_mask))</span><br><span class="line">        x = self.sublayer[<span class="number">1</span>](x, <span class="keyword">lambda</span> x: self.src_attn(x, m, m, src_mask))</span><br><span class="line">        <span class="keyword">return</span> self.sublayer[<span class="number">2</span>](x, self.feed_forward)</span><br></pre></td></tr></table></figure></p><p>We also modify the self-attention sub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This masking, combined with fact that the output embeddings are offset by one position, ensures that the predictions for position $i$ can depend only on the known outputs at positions less than $i$.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subsequent_mask</span><span class="params">(size)</span>:</span></span><br><span class="line">    <span class="string">"Mask out subsequent positions."</span></span><br><span class="line">    attn_shape = (<span class="number">1</span>, size, size)</span><br><span class="line">    subsequent_mask = np.triu(np.ones(attn_shape), k=<span class="number">1</span>).astype(<span class="string">'uint8'</span>)</span><br><span class="line">    <span class="keyword">return</span> torch.from_numpy(subsequent_mask) == <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Full-Model"><a href="#Full-Model" class="headerlink" title="Full Model"></a>Full Model</h2><p>Here we define a function from hyperparameters to a full model. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_model</span><span class="params">(src_vocab, tgt_vocab, N=<span class="number">6</span>, </span></span></span><br><span class="line"><span class="function"><span class="params">               d_model=<span class="number">512</span>, d_ff=<span class="number">2048</span>, h=<span class="number">8</span>, dropout=<span class="number">0.1</span>)</span>:</span></span><br><span class="line">    <span class="string">"Helper: Construct a model from hyperparameters."</span></span><br><span class="line">    c = copy.deepcopy</span><br><span class="line">    attn = MultiHeadedAttention(h, d_model)</span><br><span class="line">    ff = PositionwiseFeedForward(d_model, d_ff, dropout)</span><br><span class="line">    position = PositionalEncoding(d_model, dropout)</span><br><span class="line">    model = EncoderDecoder(</span><br><span class="line">        Encoder(EncoderLayer(d_model, c(attn), c(ff), dropout), N),</span><br><span class="line">        Decoder(DecoderLayer(d_model, c(attn), c(attn), </span><br><span class="line">                             c(ff), dropout), N),</span><br><span class="line">        nn.Sequential(Embeddings(d_model, src_vocab), c(position)),</span><br><span class="line">        nn.Sequential(Embeddings(d_model, tgt_vocab), c(position)),</span><br><span class="line">        Generator(d_model, tgt_vocab))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># This was important from their code. </span></span><br><span class="line">    <span class="comment"># Initialize parameters with Glorot / fan_avg.</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> model.parameters():</span><br><span class="line">        <span class="keyword">if</span> p.dim() &gt; <span class="number">1</span>:</span><br><span class="line">            nn.init.xavier_uniform(p)</span><br><span class="line">    <span class="keyword">return</span> model</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol><li><a href="http://nlp.seas.harvard.edu/2018/04/03/attention.html" target="_blank" rel="noopener">http://nlp.seas.harvard.edu/2018/04/03/attention.html</a></li><li><a href="https://jalammar.github.io/illustrated-transformer/" target="_blank" rel="noopener">https://jalammar.github.io/illustrated-transformer/</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Background&quot;&gt;&lt;a href=&quot;#Background&quot; class=&quot;headerlink&quot; title=&quot;Background&quot;&gt;&lt;/a&gt;Background&lt;/h2&gt;&lt;p&gt;The goal of reducing sequential comput
      
    
    </summary>
    
    
      <category term="Artificial Intelligence" scheme="https://zhangruochi.com/categories/Artificial-Intelligence/"/>
    
      <category term="Deep Learning" scheme="https://zhangruochi.com/categories/Artificial-Intelligence/Deep-Learning/"/>
    
    
      <category term="cs224n" scheme="https://zhangruochi.com/tags/cs224n/"/>
    
      <category term="NLP" scheme="https://zhangruochi.com/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>Subword Models</title>
    <link href="https://zhangruochi.com/Subword-Models/2019/12/19/"/>
    <id>https://zhangruochi.com/Subword-Models/2019/12/19/</id>
    <published>2019-12-19T18:07:57.000Z</published>
    <updated>2019-12-19T21:04:03.603Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Character-Level-Models"><a href="#Character-Level-Models" class="headerlink" title="Character-Level Models"></a>Character-Level Models</h2><ol><li>Word embeddings can be composed from character embeddings<ul><li>Generates embeddings for unknown words</li><li>Similar spellings share similar embeddings</li><li>Solves OOV problem</li></ul></li><li>Motivation<ul><li>Derive a powerful,robust language model effective across a variety of languages.</li><li>Encode subword relatedness:eventful,eventfully, uneventful…</li><li>Address rare-word problem of prior models. </li><li>Obtain comparable expressivity with fewer parameters.</li></ul></li></ol><h2 id="Two-trends"><a href="#Two-trends" class="headerlink" title="Two trends"></a>Two trends</h2><ol><li>Same architecture as forword-level model but use smaller units: “word pieces”</li><li>Hybrid architectures: Main model has words; something else for characters</li></ol><h2 id="Byte-Pair-Encoding"><a href="#Byte-Pair-Encoding" class="headerlink" title="Byte Pair Encoding"></a>Byte Pair Encoding</h2><p>A word segmentation algorithm:</p><ul><li>Start with a vocabulary of characters</li><li>Most frequent ngram pairs -&gt; a new ngram</li><li>Have a target vocabulary size and stop when you reach it</li><li>Do deterministic longest piece segmentation of words</li><li>Segmentation is only within words identified by some prior tokenizer</li></ul><p>For example, all the words in our documents database and their frequency are</p><blockquote><p>{‘l o w’: 5, ‘l o w e r’: 2, ‘n e w e s t’: 6, ‘w i d e s t’: 3}</p></blockquote><p>We can initialize our vocabulary library as:  </p><blockquote><p>{ ‘l’, ‘o’, ‘w’, ‘e’, ‘r’, ‘n’, ‘w’, ‘s’, ‘t’, ‘i’, ‘d’}</p></blockquote><p>The most frequent ngram pair is (‘e’,’s’) and its count is 9. So we add the ‘es’ to our vocabulary library. </p><p>Our documents database now is:</p><blockquote><p>{‘l o w’: 5, ‘l o w e r’: 2, ‘n e w es t’: 6, ‘w i d es t’: 3}.</p></blockquote><p>Our vocabulary library now is:</p><blockquote><p>{ ‘l’, ‘o’, ‘w’, ‘e’, ‘r’, ‘n’, ‘w’, ‘s’, ‘t’, ‘i’, ‘d’, ‘es’}</p></blockquote><p><strong>Again</strong>, the most frequent ngram pair is (‘es’,’t’) and its count is 9，So we add the ‘est’ to our vocabulary library.</p><p>Our documents database now is: </p><blockquote><p>{‘l o w’: 5, ‘l o w e r’: 2, ‘n e w est’: 6, ‘w i d est’: 3}</p></blockquote><p>Our vocabulary library now is:</p><blockquote><p>{ ‘l’, ‘o’, ‘w’, ‘e’, ‘r’, ‘n’, ‘w’, ‘s’, ‘t’, ‘i’, ‘d’, ‘es’,’est’}</p></blockquote><p>the rest can be done in the same manner. We can set a threshold of total count of our vocabulary library. By doing so, we can use BPE to construct a vocabulary library to represent all the words based on subword unit.</p><p>Google NMT(GNMT) uses a variant of this:</p><ul><li>V1: wordpiece model (Word piece model tokenizes inside words)</li><li>V2: sentencepiece model (Sentence piece model works from raw text)</li></ul><h2 id="Character-level-to-build-word-level"><a href="#Character-level-to-build-word-level" class="headerlink" title="Character-level to build word-level"></a>Character-level to build word-level</h2><ol><li>Convolution over characters to generate word embeddings<center> <img style="border-radius: 0.3125em; box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="1.png" width="50%" height="50%"></center></li><li>Character-based LSTM to build word representation<center> <img style="border-radius: 0.3125em; box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="2.png" width="50%" height="50%"></center></li></ol><h2 id="CS224n-Assignment5"><a href="#CS224n-Assignment5" class="headerlink" title="CS224n Assignment5"></a>CS224n Assignment5</h2><h3 id="Character-based-convolutional-encoder-for-NMT"><a href="#Character-based-convolutional-encoder-for-NMT" class="headerlink" title="Character-based convolutional encoder for NMT."></a>Character-based convolutional encoder for NMT.</h3><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="3.png" width="80%" height="80%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Figure from cs224n. Character-based convolutional encoder, which ultimately produces a word embedding of length $e_{word}$</div></center><ol><li>Convert word to character indices. We have a word $x$ (e.g. Anarchy in above figure) that we wish to represent. Assume we have a predefined ‘vocabulary’ of characters (for example, all lowercase letters, uppercase letters, numbers, and some punctuation). By looking up the index of each character, we can thus represent the length-l word x as a vector of integers:<script type="math/tex; mode=display">x = \left[ c_1,c_2,\cdots,c_l  \right ] \in \mathbb{Z}^{l}</script>where each $c_i$ is an integer index into the character vocabulary.</li><li><p>Padding and embedding lookup. Using a special <pad> ‘character’, we pad (or truncate) every word so that it has length $m_word$ (this is some predefined hyperparameter representing maximum word length):</pad></p><script type="math/tex; mode=display">x_{padded} = \left [ c_1,c_2,\cdots,c_{m_{word}}  \right ] \in \mathbb{Z}^{m_{word}}</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad_sents_char</span><span class="params">(sents, char_pad_token)</span>:</span></span><br><span class="line">    <span class="string">""" Pad list of sentences according to the longest sentence in the batch and max_word_length.</span></span><br><span class="line"><span class="string">    @param sents (list[list[list[int]]]): list of sentences, result of `words2charindices()`</span></span><br><span class="line"><span class="string">        from `vocab.py`</span></span><br><span class="line"><span class="string">    @param char_pad_token (int): index of the character-padding token</span></span><br><span class="line"><span class="string">    @returns sents_padded (list[list[list[int]]]): list of sentences where sentences/words shorter</span></span><br><span class="line"><span class="string">        than the max length sentence/word are padded out with the appropriate pad token, such that</span></span><br><span class="line"><span class="string">        each sentence in the batch now has same number of words and each word has an equal</span></span><br><span class="line"><span class="string">        number of characters</span></span><br><span class="line"><span class="string">        Output shape: (batch_size, max_sentence_length, max_word_length)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># Words longer than 21 characters should be truncated</span></span><br><span class="line">    max_word_length = <span class="number">21</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">### YOUR CODE HERE for part 1f</span></span><br><span class="line">    <span class="comment">### <span class="doctag">TODO:</span></span></span><br><span class="line">    <span class="comment">###     Perform necessary padding to the sentences in the batch similar to the pad_sents()</span></span><br><span class="line">    <span class="comment">###     method below using the padding character from the arguments. You should ensure all</span></span><br><span class="line">    <span class="comment">###     sentences have the same number of words and each word has the same number of</span></span><br><span class="line">    <span class="comment">###     characters.</span></span><br><span class="line">    <span class="comment">###     Set padding words to a `max_word_length` sized vector of padding characters.</span></span><br><span class="line">    <span class="comment">###</span></span><br><span class="line">    <span class="comment">###     You should NOT use the method `pad_sents()` below because of the way it handles</span></span><br><span class="line">    <span class="comment">###     padding and unknown words.</span></span><br><span class="line">    sents_padded = []</span><br><span class="line">    max_sent_len = max([len(sent) <span class="keyword">for</span> sent <span class="keyword">in</span> sents])</span><br><span class="line">    <span class="keyword">for</span> sent <span class="keyword">in</span> sents:</span><br><span class="line">        sent = sent + [[] <span class="keyword">for</span> i <span class="keyword">in</span> range(max_sent_len - len(sent))]</span><br><span class="line">        <span class="keyword">assert</span> len(sent) == max_sent_len</span><br><span class="line">        tmp_sent = []</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> sent:</span><br><span class="line">            word = word[:max_word_length]</span><br><span class="line">            diff = max_word_length - len(word)</span><br><span class="line">            word = word + [char_pad_token] * diff</span><br><span class="line">            <span class="keyword">assert</span> len(word) == max_word_length</span><br><span class="line">            tmp_sent.append(word)</span><br><span class="line">        sents_padded.append(tmp_sent)</span><br><span class="line"></span><br><span class="line">    <span class="comment">### END YOUR CODE</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sents_padded</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VocabEntry</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># ......</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">words2charindices</span><span class="params">(self, sents)</span>:</span></span><br><span class="line">            <span class="string">""" Convert list of sentences of words into list of list of list of character indices.</span></span><br><span class="line"><span class="string">            @param sents (list[list[str]]): sentence(s) in words</span></span><br><span class="line"><span class="string">            @return word_ids (list[list[list[int]]]): sentence(s) in indices</span></span><br><span class="line"><span class="string">            """</span></span><br><span class="line">            <span class="comment">### YOUR CODE HERE for part 1e</span></span><br><span class="line">            <span class="comment">### <span class="doctag">TODO:</span> </span></span><br><span class="line">            <span class="comment">###     This method should convert characters in the input sentences into their </span></span><br><span class="line">            <span class="comment">###     corresponding character indices using the character vocabulary char2id </span></span><br><span class="line">            <span class="comment">###     defined above.</span></span><br><span class="line">            <span class="comment">###</span></span><br><span class="line">            <span class="comment">###     You must prepend each word with the `start_of_word` character and append </span></span><br><span class="line">            <span class="comment">###     with the `end_of_word` character. </span></span><br><span class="line"></span><br><span class="line">            word_ids = []</span><br><span class="line">            <span class="keyword">for</span> sent <span class="keyword">in</span> sents:</span><br><span class="line">                sent_chars_id = []</span><br><span class="line">                <span class="keyword">for</span> word <span class="keyword">in</span> sent:</span><br><span class="line">                    sent_chars_id.append([<span class="number">1</span>] + [ self.char2id.get(char,<span class="number">3</span>) <span class="keyword">for</span> char <span class="keyword">in</span> word ] + [<span class="number">2</span>])</span><br><span class="line">                word_ids.append(sent_chars_id)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> word_ids</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">to_input_tensor_char</span><span class="params">(self, sents: List[List[str]], device: torch.device)</span> -&gt; torch.Tensor:</span></span><br><span class="line">        <span class="string">""" Convert list of sentences (words) into tensor with necessary padding for </span></span><br><span class="line"><span class="string">        shorter sentences.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @param sents (List[List[str]]): list of sentences (words)</span></span><br><span class="line"><span class="string">        @param device: device on which to load the tensor, i.e. CPU or GPU</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @returns sents_var: tensor of (max_sentence_length, batch_size, max_word_length)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment">### YOUR CODE HERE for part 1g</span></span><br><span class="line">        <span class="comment">### <span class="doctag">TODO:</span> </span></span><br><span class="line">        <span class="comment">###     Connect `words2charindices()` and `pad_sents_char()` which you've defined in </span></span><br><span class="line">        <span class="comment">###     previous parts</span></span><br><span class="line">        char_sents =  self.words2charindices(sents)</span><br><span class="line">        padded_char_sents = pad_sents_char(char_sents, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        sents_var = torch.tensor(padded_char_sents, dtype=torch.int8, device= device)</span><br><span class="line">        sents_var = sents_var.permute(<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sents_var</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ......</span></span><br></pre></td></tr></table></figure></li><li><p>For each of these characters $c_i$, we lookup a dense character embedding (which has shape $e_{char}$). This yields a tensor $x_{emb}$:</p><script type="math/tex; mode=display">x_{emb} = CharEmbedding(X_{padded}) \in \mathbb{R}^{m_{word} \times e_{char}}</script><p>We’ll reshape $x_{emb}$ to obtain $x_{reshaped} in \mathbb{R}^{e_{char} \times m_{word}}$ before feeding into the convolutional network.</p></li><li><p><strong>Convolutional network</strong>. To combine these character embeddings, we’ll use 1-dimensional convolutions. The convolutional layer has two hyperparameters: the kernel size $k$ (also called window size), which dictates the size of the window used to compute features, and the number of filters $f$, (also called number of output features or number of output channels). The convolutional layer has a weight matrix $W \in \mathbb{R}^{f \times e_{char} \times k}$ and a bias vector $b \in \mathbb{R}^{f}$. Overall this produces output $x_{conv}$.</p><script type="math/tex; mode=display">x_{conv} = Conv1D(x_{reshaped}) \in \mathbb{R}^{f \times {m_{word} - k + 1}}</script><p>For our application, we’ll set $f$ to be equal to $e_{word}$, the size of the final word embedding for word x. Therefore,</p><script type="math/tex; mode=display">x_{conv} \in \mathbb{R}^{e_{word} \times (m_{word} - k + 1)}</script><p>Finally, we apply the <code>ReLU</code> function to $x_{conv}$, then use max-pooling to reduce this to a single vector $x_{conv_out} \in \mathbb{R}^{e_{word}}$, which is the final output of the Convolutional Network:</p><script type="math/tex; mode=display">x_{conv\_out} = MaxPool(ReLU(x_{conv})) \in \mathbb{R}^{e_{word}}</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">CS224N 2018-19: Homework 5</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### YOUR CODE HERE for part 1i</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### END YOUR CODE</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CNN</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="string">""" </span></span><br><span class="line"><span class="string">        Init CNN which is a 1-D cnn.</span></span><br><span class="line"><span class="string">        @param embed_size (int): embedding size of char (dimensionality)</span></span><br><span class="line"><span class="string">        @param k: kernel size, also called window size</span></span><br><span class="line"><span class="string">        @param f: number of filters, should be embed_size of word</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,</span></span></span><br><span class="line"><span class="function"><span class="params">            embed_size: int = <span class="number">50</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 m_word: int = <span class="number">21</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 k: int = <span class="number">5</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 f: int = <span class="number">50</span>)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="string">""" </span></span><br><span class="line"><span class="string">        Init CNN which is a 1-D cnn.</span></span><br><span class="line"><span class="string">        @param embed_size (int): embedding size of char (dimensionality)</span></span><br><span class="line"><span class="string">        @param k: kernel size, also called window size</span></span><br><span class="line"><span class="string">        @param f: number of filters, should be embed_size of word</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        super(CNN, self).__init__()</span><br><span class="line">        self.conv1d = nn.Conv1d(in_channels = embed_size, </span><br><span class="line">                    out_channels = f,</span><br><span class="line">                    kernel_size = k)</span><br><span class="line"></span><br><span class="line">        self.maxpool = nn.MaxPool1d(kernel_size = m_word - k + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, X_reshaped: torch.Tensor)</span> -&gt; torch.Tensor:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        map from X_reshaped to X_conv_out</span></span><br><span class="line"><span class="string">        @param X_reshaped (Tensor): Tensor of char-level embedding with shape ( </span></span><br><span class="line"><span class="string">                                    batch_size, e_char, m_word), where e_char = embed_size of char, </span></span><br><span class="line"><span class="string">                                    m_word = max_word_length.</span></span><br><span class="line"><span class="string">        @return X_conv_out (Tensor): Tensor of word-level embedding with shape (max_sentence_length,</span></span><br><span class="line"><span class="string">                                    batch_size)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        X_conv = self.conv1d(X_reshaped)</span><br><span class="line">        <span class="comment"># print(X_conv.size())</span></span><br><span class="line">        X_conv_out = self.maxpool(F.relu(X_conv))</span><br><span class="line">        <span class="comment"># print(X_conv_out.size())</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> X_conv_out.squeeze(<span class="number">-1</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>Highway layer and dropout</strong>. Highway Networks6 have a skip-connection controlled by a dynamic gate. Given the input $x_{conv\_out} \in \mathbb{R}^{e_{word}}$, we compute:<br><center> <img style="border-radius: 0.3125em; box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="4.png" width="70%" height="70%"> <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">Figure from cs224n. Highway Network (Srivastava et al. 2015)</div></center></p><script type="math/tex; mode=display">\begin{align}& x_{proj} = RELU(W_{proj}x_{conv\_cout} + b_{proj}) \quad \in \mathbb{R}^{e_{word}} \\& x_{gate} = \sigma(W_{gate}x_{conv\_out} + b_{gate}) \quad \in \mathbb{R}^{e_{word}} \\& x_{highway} = x_{gate} \circ x_{proj} + ( 1 - x_{gate}) \circ x_{conv\_out}  \quad \in \mathbb{R}^{e_{word}}\\& x_{word_emb} = Dropout(x_{highway}) \quad \in \mathbb{R}^{e_{word}} \end{align}</script><p>Where $W_{proj},W_{gate} \in \mathbb{R}^{e_{word} \times e_{word}}$, and $\circ$ denotes element-wise multiplication.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">CS224N 2018-19: Homework 5</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"><span class="comment">### YOUR CODE HERE for part 1h</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Highway</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="string">""" Highway network for ConvNN</span></span><br><span class="line"><span class="string">        - Relu</span></span><br><span class="line"><span class="string">        - Sigmoid</span></span><br><span class="line"><span class="string">        - gating mechanism from LSTM</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,embed_size)</span>:</span></span><br><span class="line">        <span class="string">""" Init Higway network</span></span><br><span class="line"><span class="string">            @param embed_size (int): Embedding size of word, in handout, </span></span><br><span class="line"><span class="string">                                     it's e_&#123;word&#125; (dimensionality)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        super(Highway, self).__init__()</span><br><span class="line"></span><br><span class="line">        self.projection = nn.Linear(embed_size,embed_size,bias = <span class="keyword">True</span>)</span><br><span class="line">        self.gate = nn.Linear(embed_size,embed_size, bias = <span class="keyword">True</span>)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, X_conv_out)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">            Take mini-batch of sentence of ConvNN</span></span><br><span class="line"><span class="string">            @param X_conv_out (Tensor): Tensor with shape (max_sentence_length, batch_size, embed_size)</span></span><br><span class="line"><span class="string">            @return X_highway (Tensor): combinded output with shape (max_sentence_length, batch_size, embed_size)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        </span><br><span class="line">        X_proj = F.relu(self.projection(X_conv_out))</span><br><span class="line">        X_gate = torch.sigmoid(self.gate(X_conv_out))</span><br><span class="line">        X_highway =  torch.mul(X_gate, X_proj) + torch.mul((<span class="number">1</span> - X_gate),X_conv_out)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> X_highway</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### END YOUR CODE</span></span><br></pre></td></tr></table></figure></li><li><p>Combine above steps together to get our <strong>Character-based word embedding model</strong>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">CS224N 2018-19: Homework 5</span></span><br><span class="line"><span class="string">model_embeddings.py: Embeddings for the NMT model</span></span><br><span class="line"><span class="string">Pencheng Yin &lt;pcyin@cs.cmu.edu&gt;</span></span><br><span class="line"><span class="string">Sahil Chopra &lt;schopra8@stanford.edu&gt;</span></span><br><span class="line"><span class="string">Anand Dhoot &lt;anandd@stanford.edu&gt;</span></span><br><span class="line"><span class="string">Michael Hahn &lt;mhahn2@stanford.edu&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="comment"># Do not change these imports; your module names should be</span></span><br><span class="line"><span class="comment">#   `CNN` in the file `cnn.py`</span></span><br><span class="line"><span class="comment">#   `Highway` in the file `highway.py`</span></span><br><span class="line"><span class="comment"># Uncomment the following two imports once you're ready to run part 1(j)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> cnn <span class="keyword">import</span> CNN</span><br><span class="line"><span class="keyword">from</span> highway <span class="keyword">import</span> Highway</span><br><span class="line"></span><br><span class="line"><span class="comment"># End "do not change" </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelEmbeddings</span><span class="params">(nn.Module)</span>:</span> </span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Class that converts input words to their CNN-based embeddings.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, embed_size, vocab)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Init the Embedding layer for one language</span></span><br><span class="line"><span class="string">        @param embed_size (int): Embedding size (dimensionality) for the output </span></span><br><span class="line"><span class="string">        @param vocab (VocabEntry): VocabEntry object. See vocab.py for documentation.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        super(ModelEmbeddings, self).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="comment">## A4 code</span></span><br><span class="line">        <span class="comment"># pad_token_idx = vocab.src['&lt;pad&gt;']</span></span><br><span class="line">        <span class="comment"># self.embeddings = nn.Embedding(len(vocab.src), embed_size, padding_idx=pad_token_idx)</span></span><br><span class="line">        <span class="comment">## End A4 code</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">### YOUR CODE HERE for part 1j</span></span><br><span class="line">        pad_token_idx = vocab.char2id[<span class="string">'&lt;pad&gt;'</span>]</span><br><span class="line">        self.embed_size = embed_size</span><br><span class="line">        char_embed_size = <span class="number">50</span></span><br><span class="line">        self.char_embedding = nn.Embedding(len(vocab.char2id),</span><br><span class="line">                                           char_embed_size,</span><br><span class="line">                                           pad_token_idx)</span><br><span class="line">        self.convNN = CNN(f=self.embed_size)</span><br><span class="line">        self.highway = Highway(embed_size=self.embed_size)</span><br><span class="line">        self.dropout = nn.Dropout(p=<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">### END YOUR CODE</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, input)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Looks up character-based CNN embeddings for the words in a batch of sentences.</span></span><br><span class="line"><span class="string">        @param input: Tensor of integers of shape (sentence_length, batch_size, max_word_length) where</span></span><br><span class="line"><span class="string">            each integer is an index into the character vocabulary</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @param output: Tensor of shape (sentence_length, batch_size, embed_size), containing the </span></span><br><span class="line"><span class="string">            CNN-based embeddings for each word of the sentences in the batch</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment">## A4 code</span></span><br><span class="line">        <span class="comment"># output = self.embeddings(input)</span></span><br><span class="line">        <span class="comment"># return output</span></span><br><span class="line">        <span class="comment">## End A4 code</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">### YOUR CODE HERE for part 1j</span></span><br><span class="line">        X_word_emb_list = []</span><br><span class="line">        <span class="keyword">for</span> X_padded <span class="keyword">in</span> input:</span><br><span class="line">            <span class="comment"># (batch_size,max_word_length) -&gt; (batch_size,max_word_length,embed_size)</span></span><br><span class="line">            X_emb = self.char_embedding(X_padded)</span><br><span class="line">            <span class="comment"># print(X_emb.size())</span></span><br><span class="line">            X_reshaped = X_emb.permute(<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">            X_conv_out = self.convNN(X_reshaped)</span><br><span class="line">            X_highway = self.highway(X_conv_out)</span><br><span class="line">            X_word_emb = self.dropout(X_highway)</span><br><span class="line">            X_word_emb_list.append(X_word_emb)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># (sentence_length, batch_size, embed_size)</span></span><br><span class="line">        X_word_emb = torch.stack(X_word_emb_list, dim=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> X_word_emb</span><br><span class="line">        <span class="comment">### END YOUR CODE</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Character-based-LSTM-decoder-for-NMT"><a href="#Character-based-LSTM-decoder-for-NMT" class="headerlink" title="Character-based LSTM decoder for NMT"></a>Character-based LSTM decoder for NMT</h3><p>We will now add a LSTM-based character-level decoder to our NMT system. The main idea is that when our word-level decoder produces and <code>&lt;UNK&gt;</code> token, we run our character-level decoder (which you can think of as a character-level conditional language model) to instead generate the target word one character at a time, as shown in below figure. This will help us to produce rare and out-of-vocabulary target words.</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="5.png" width="50%" height="50%">    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Figure from cs224n. A character-based decoder which is triggered if the word-based decoder produces an UNK. Figure courtesy of Luong & Manning.</div></center><p>We now describe the model in three sections:</p><ol><li><p><strong>Forward computation of Character Decoder</strong>: Given a sequence of integers $x_i,\cdots,x_n \in \mathbb{Z}$ representing a sequence of characters, we lookup their character embeddings $x_i,\cdots,x_n \in \mathbb{Z}^{e_{char}}$ and pass these as input in to the(unidirectional)LSTM,obtaining hidden states $h1, \cdots, h_n$ and cell states $c_1, \cdots, c_n$</p><script type="math/tex; mode=display">h_t,c_t = CharDecoderLSTM(x_t,h_{t-1},c_{t-1}) \quad \text{where} \quad h_t,c_t \in \mathbb{R}^{h}</script><p>where h is the hidden size of the CharDecoderLSTM. The initial hidden and cell states $h_0$ and $c_0$ are both set to the <strong>combined output</strong> vector (attentioned) for the current timestep of the main word-level NMT decoder.<br>For every timestep $t \in { 1, \cdots, n }$ we compute scores (also called logits) $s_t \in \mathbb{R}^{V_{char}}$</p><script type="math/tex; mode=display">s_t = W_{dec}h_t + b_{dec} \in \mathbb{R}^{V_{char}}</script><p>Where the weight matrix $W_{dec} \in \mathbb{R}^{V_{char} \times h}$ and the bias vector $b_{dec} \in \mathbb{R}^{V_{char}}$. If we passed $s_t$ through a softmax function, we would have the probability distribution for the next character in the sequence.</p></li><li><p><strong>Training of Character Decoder</strong> When we train the NMT system, we train the character decoder on <strong>every word</strong> in the target sentence (not just the words represented by <unk>). For example, on a particular step of the main NMT decoder, if the target word is music then the input sequence for the CharDecoderLSTM is $[x_1,…,x_n]$ = [<start>,m,u,s,i,c] and the target sequence for the CharDecoderLSTM is $[x_{2}, . . . , x_{n+1}]$ = [m,u,s,i,c,<end>].<br>We pass the input sequence $x_1, \cdots, x_n$, along with the initial states $h_0$ and $c_0$ obtained from the combined output vector) into the CharDecoderLSTM, thus obtaining scores $s_1,\cdots, s_n$ which we will compare to the target sequence $x_2,\cdots, x_{n+1}$. We optimize with respect to sum of the cross-entropy loss:</end></start></unk></p><script type="math/tex; mode=display">p_t = softmax(s_t) \in \mathbb{R}^{V_{char}}</script><script type="math/tex; mode=display">loss_{char\_dec} = -\sum_{t=1}^{n}log p_t(x_{t+1})</script></li><li><p><strong>Decoding from the Character Decoder</strong> t test time, first we produce a translation from our word- based NMT system in the usual way (e.g. a decoding algorithm like beam search). If the translation contains any <unk> tokens, then for each of those positions, we use the word-based decoder’s combined output vector to initialize the CharDecoderLSTM initial $h_0$ and $c_0$, then use CharDecoderLSTM to generate a sequence of characters. To generate the sequence of characters, we use the greedy decoding algorithm, which repeatedly chooses the most probable next character, until either the <end> token is produced or we reach a predetermined max length. The algorithm is given below, for a single example (not batched).</end></unk></p><center> <img style="border-radius: 0.3125em; box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="6.png" width="100%" height="100%"> <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">Figure from cs224n. Greedy Decoding</div></center></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">CS224N 2018-19: Homework 5</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CharDecoder</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, hidden_size, char_embedding_size=<span class="number">50</span>, target_vocab=None)</span>:</span></span><br><span class="line">        <span class="string">""" Init Character Decoder.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @param hidden_size (int): Hidden size of the decoder LSTM</span></span><br><span class="line"><span class="string">        @param char_embedding_size (int): dimensionality of character embeddings</span></span><br><span class="line"><span class="string">        @param target_vocab (VocabEntry): vocabulary for the target language. See vocab.py for documentation.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment">### YOUR CODE HERE for part 2a</span></span><br><span class="line">        <span class="comment">### TODO - Initialize as an nn.Module.</span></span><br><span class="line">        <span class="comment">###      - Initialize the following variables:</span></span><br><span class="line">        <span class="comment">###        self.charDecoder: LSTM. Please use nn.LSTM() to construct this.</span></span><br><span class="line">        <span class="comment">###        self.char_output_projection: Linear layer, called W_&#123;dec&#125; and b_&#123;dec&#125; in the PDF</span></span><br><span class="line">        <span class="comment">###        self.decoderCharEmb: Embedding matrix of character embeddings</span></span><br><span class="line">        <span class="comment">###        self.target_vocab: vocabulary for the target language</span></span><br><span class="line">        <span class="comment">###</span></span><br><span class="line">        <span class="comment">### Hint: - Use target_vocab.char2id to access the character vocabulary for the target language.</span></span><br><span class="line">        <span class="comment">###       - Set the padding_idx argument of the embedding matrix.</span></span><br><span class="line">        <span class="comment">###       - Create a new Embedding layer. Do not reuse embeddings created in Part 1 of this assignment.</span></span><br><span class="line">        </span><br><span class="line">        super(CharDecoder, self).__init__()</span><br><span class="line"></span><br><span class="line">        self.char_embedding_size = char_embedding_size</span><br><span class="line">        self.target_vocab = target_vocab</span><br><span class="line">        self.padding_idx = self.target_vocab.char2id[<span class="string">'&lt;pad&gt;'</span>]</span><br><span class="line">        self.decoderCharEmb = nn.Embedding(len(self.target_vocab.char2id),</span><br><span class="line">                                           char_embedding_size,</span><br><span class="line">                                           self.padding_idx)</span><br><span class="line">        self.charDecoder = nn.LSTM(input_size=char_embedding_size,</span><br><span class="line">                                   hidden_size=hidden_size)</span><br><span class="line">        self.char_output_projection = nn.Linear(hidden_size,</span><br><span class="line">                                                len(self.target_vocab.char2id))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">### END YOUR CODE</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, input, dec_hidden=None)</span>:</span></span><br><span class="line">        <span class="string">""" Forward pass of character decoder.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @param input: tensor of integers, shape (length, batch)</span></span><br><span class="line"><span class="string">        @param dec_hidden: internal state of the LSTM before reading the input characters. A tuple of two tensors of shape (1, batch, hidden_size)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @returns scores: called s_t in the PDF, shape (length, batch, self.vocab_size)</span></span><br><span class="line"><span class="string">        @returns dec_hidden: internal state of the LSTM after reading the input characters. A tuple of two tensors of shape (1, batch, hidden_size)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment">### YOUR CODE HERE for part 2b</span></span><br><span class="line">        <span class="comment">### TODO - Implement the forward pass of the character decoder.</span></span><br><span class="line">        char_embeddings = self.decoderCharEmb(input)        <span class="comment"># (length, batch, char_embed_size)</span></span><br><span class="line">        hidden_states, dec_hidden = self.charDecoder(</span><br><span class="line">            char_embeddings, dec_hidden)    <span class="comment"># (length, batch, hidden_size)</span></span><br><span class="line">        scores = self.char_output_projection(hidden_states)     <span class="comment"># (len, batch, vocab)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> scores, dec_hidden</span><br><span class="line">        <span class="comment">### END YOUR CODE</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">train_forward</span><span class="params">(self, char_sequence, dec_hidden=None)</span>:</span></span><br><span class="line">        <span class="string">""" Forward computation during training.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @param char_sequence: tensor of integers, shape (length, batch). Note that "length" here and in forward() need not be the same.</span></span><br><span class="line"><span class="string">        @param dec_hidden: initial internal state of the LSTM, obtained from the output of the word-level decoder. A tuple of two tensors of shape (1, batch, hidden_size)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @returns The cross-entropy loss, computed as the *sum* of cross-entropy losses of all the words in the batch.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment">### YOUR CODE HERE for part 2c</span></span><br><span class="line">        <span class="comment">### TODO - Implement training forward pass.</span></span><br><span class="line">        <span class="comment">###</span></span><br><span class="line">        <span class="comment">### Hint: - Make sure padding characters do not contribute to the cross-entropy loss.</span></span><br><span class="line">        <span class="comment">###       - char_sequence corresponds to the sequence x_1 ... x_&#123;n+1&#125; from the handout (e.g., &lt;START&gt;,m,u,s,i,c,&lt;END&gt;).</span></span><br><span class="line">        scores, dec_hidden = self.forward(char_sequence[:<span class="number">-1</span>], dec_hidden)</span><br><span class="line">        <span class="comment"># char_embeddings = self.decoderCharEmb(char_sequence)</span></span><br><span class="line">        <span class="comment"># hidden_states, dec_hidden = self.charDecoder(char_embeddings[:-1], dec_hidden)</span></span><br><span class="line">        <span class="comment"># scores = self.char_output_projection(hidden_states)  # (len, batch, vocab)</span></span><br><span class="line">        loss = nn.CrossEntropyLoss(ignore_index=self.padding_idx,</span><br><span class="line">                                   reduction=<span class="string">'sum'</span>)</span><br><span class="line">        ce_loss = loss(scores.permute(<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>),</span><br><span class="line">                       char_sequence[<span class="number">1</span>:].transpose(<span class="number">1</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ce_loss</span><br><span class="line"></span><br><span class="line">        <span class="comment">### END YOUR CODE</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decode_greedy</span><span class="params">(self, initialStates, device, max_length=<span class="number">21</span>)</span>:</span></span><br><span class="line">        <span class="string">""" Greedy decoding</span></span><br><span class="line"><span class="string">        @param initialStates: initial internal state of the LSTM, a tuple of two tensors of size (1, batch, hidden_size)</span></span><br><span class="line"><span class="string">        @param device: torch.device (indicates whether the model is on CPU or GPU)</span></span><br><span class="line"><span class="string">        @param max_length: maximum length of words to decode</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @returns decodedWords: a list (of length batch) of strings, each of which has length &lt;= max_length.</span></span><br><span class="line"><span class="string">                              The decoded strings should NOT contain the start-of-word and end-of-word characters.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">### YOUR CODE HERE for part 2d</span></span><br><span class="line">        <span class="comment">### TODO - Implement greedy decoding.</span></span><br><span class="line">        <span class="comment">### Hints:</span></span><br><span class="line">        <span class="comment">###      - Use target_vocab.char2id and target_vocab.id2char to convert between integers and characters</span></span><br><span class="line">        <span class="comment">###      - Use torch.tensor(..., device=device) to turn a list of character indices into a tensor.</span></span><br><span class="line">        <span class="comment">###      - We use curly brackets as start-of-word and end-of-word characters. That is, use the character '&#123;' for &lt;START&gt; and '&#125;' for &lt;END&gt;.</span></span><br><span class="line">        <span class="comment">###        Their indices are self.target_vocab.start_of_word and self.target_vocab.end_of_word, respectively.</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">### END YOUR CODE</span></span><br><span class="line"></span><br><span class="line">        output_words = []</span><br><span class="line">        decodedWords = []</span><br><span class="line">        start_idx = self.target_vocab.start_of_word</span><br><span class="line">        end_idx = self.target_vocab.end_of_word</span><br><span class="line">        dec_hidden = initialStates</span><br><span class="line">        batch_size = dec_hidden[<span class="number">0</span>].shape[<span class="number">1</span>]</span><br><span class="line">        current_char = torch.tensor([[start_idx] * batch_size],</span><br><span class="line">                                    device=device)  <span class="comment"># idx of '&lt;start&gt;' token</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(max_length):</span><br><span class="line">            scores, dec_hidden = self.forward(current_char, dec_hidden)</span><br><span class="line">            current_char = scores.argmax(<span class="number">-1</span>)</span><br><span class="line">            output_words += [current_char]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        output_words = torch.cat(output_words).t().tolist()</span><br><span class="line">        <span class="keyword">for</span> foo <span class="keyword">in</span> output_words:</span><br><span class="line">            word = <span class="string">""</span></span><br><span class="line">            <span class="keyword">for</span> bar <span class="keyword">in</span> foo:</span><br><span class="line">                <span class="keyword">if</span> bar == end_idx:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                word += self.target_vocab.id2char[bar]</span><br><span class="line">            decodedWords += [word]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> decodedWords</span><br><span class="line">        <span class="comment">### END YOUR CODE</span></span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li>Course note and slides of <a href="http://web.stanford.edu/class/cs224n/" target="_blank" rel="noopener">cs224n</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Character-Level-Models&quot;&gt;&lt;a href=&quot;#Character-Level-Models&quot; class=&quot;headerlink&quot; title=&quot;Character-Level Models&quot;&gt;&lt;/a&gt;Character-Level Mode
      
    
    </summary>
    
    
      <category term="Artificial Intelligence" scheme="https://zhangruochi.com/categories/Artificial-Intelligence/"/>
    
      <category term="Deep Learning" scheme="https://zhangruochi.com/categories/Artificial-Intelligence/Deep-Learning/"/>
    
    
      <category term="cs224n" scheme="https://zhangruochi.com/tags/cs224n/"/>
    
      <category term="NLP" scheme="https://zhangruochi.com/tags/NLP/"/>
    
  </entry>
  
</feed>
